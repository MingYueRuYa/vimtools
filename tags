!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$	vim/vim/runtime/tutor/tutor.cs	/^		$ (do konce øádku), atd.$/;"	m	signature:(do konce øádku)
.path.c	vim/vim/src/Make_bc5.mak	/^.path.c = .$/;"	m
A	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
A	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
A	vim/vim/runtime/macros/maze/mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
AARGLIST	vim/vim/src/structs.h	739;"	d
ABBREV	vim/vim/src/vim.h	717;"	d
ABBR_OFF	vim/vim/src/keymap.h	43;"	d
ABS	vim/vim/src/gui_at_fs.c	1048;"	d	file:
ABS	vim/vim/src/gui_at_fs.c	1050;"	d	file:
ACCESS_MASK	vim/vim/src/os_win32.c	/^typedef int ACCESS_MASK;$/;"	t	file:
ACTION_EXPAND	vim/vim/src/vim.h	896;"	d
ACTION_GOTO	vim/vim/src/vim.h	892;"	d
ACTION_SHOW	vim/vim/src/vim.h	891;"	d
ACTION_SHOW_ALL	vim/vim/src/vim.h	894;"	d
ACTION_SPLIT	vim/vim/src/vim.h	893;"	d
ADDR_ARGUMENTS	vim/vim/src/ex_cmds.h	66;"	d
ADDR_BUFFERS	vim/vim/src/ex_cmds.h	68;"	d
ADDR_LINES	vim/vim/src/ex_cmds.h	64;"	d
ADDR_LOADED_BUFFERS	vim/vim/src/ex_cmds.h	67;"	d
ADDR_OTHER	vim/vim/src/ex_cmds.h	72;"	d
ADDR_QUICKFIX	vim/vim/src/ex_cmds.h	71;"	d
ADDR_TABS	vim/vim/src/ex_cmds.h	69;"	d
ADDR_TABS_RELATIVE	vim/vim/src/ex_cmds.h	70;"	d
ADDR_WINDOWS	vim/vim/src/ex_cmds.h	65;"	d
ADDSTATE_HERE_OFFSET	vim/vim/src/regexp_nfa.c	4353;"	d	file:
ADD_CHECKED_OBJECT	vim/vim/src/if_py_both.h	6741;"	d
ADD_ICON	vim/vim/src/gui_gtk.c	433;"	d	file:
ADD_ICON	vim/vim/src/gui_gtk.c	449;"	d	file:
ADD_NL	vim/vim/src/regexp.c	181;"	d	file:
ADD_OBJECT	vim/vim/src/if_py_both.h	6737;"	d
ADD_STATE_IF_MATCH	vim/vim/src/regexp_nfa.c	5644;"	d	file:
ADD_STATE_IF_MATCH	vim/vim/src/regexp_nfa.c	6969;"	d	file:
ADVANCE_REGINPUT	vim/vim/src/regexp.c	4233;"	d	file:
AFT_CAPLONG	vim/vim/src/spellfile.c	1809;"	d	file:
AFT_CHAR	vim/vim/src/spellfile.c	1807;"	d	file:
AFT_LONG	vim/vim/src/spellfile.c	1808;"	d	file:
AFT_NUM	vim/vim/src/spellfile.c	1810;"	d	file:
AFX_COMMANDS_H__AC726717_2977_11D1_B2F3_006008040780__INCLUDED_	vim/vim/src/VisVim/Commands.h	5;"	d
AFX_DSADDIN_H__AC726715_2977_11D1_B2F3_006008040780__INCLUDED_	vim/vim/src/VisVim/DSAddIn.h	5;"	d
AFX_STDAFX_H__3389658B_AD83_11D3_9C1E_0090278BBD99__INCLUDED_	vim/vim/src/GvimExt/gvimext.h	15;"	d
AFX_STDAFX_H__AC72670E_2977_11D1_B2F3_006008040780__INCLUDED_	vim/vim/src/VisVim/StdAfx.h	7;"	d
AFX_VISVIM_H__AC72670B_2977_11D1_B2F3_006008040780__INCLUDED_	vim/vim/src/VisVim/VisVim.h	5;"	d
AH_KEY_LEN	vim/vim/src/spellfile.c	1827;"	d	file:
AH_KEY_LEN	vim/vim/src/spellfile.c	1829;"	d	file:
AKEYLEN	vim/vim/src/dict.c	421;"	d	file:
ALEF	vim/vim/src/farsi.h	110;"	d
ALEF_	vim/vim/src/farsi.h	29;"	d
ALEF_A	vim/vim/src/farsi.h	109;"	d
ALEF_D_H	vim/vim/src/farsi.h	168;"	d
ALEF_U_H	vim/vim/src/farsi.h	166;"	d
ALEF_U_H_	vim/vim/src/farsi.h	28;"	d
ALIGN	vim/vim/src/Make_bc5.mak	/^ALIGN = 4$/;"	m
ALIGNARG	vim/vim/src/Make_bc5.mak	/^ALIGNARG = -a$(ALIGN)$/;"	m
ALIGN_LONG	vim/vim/src/structs.h	397;"	d
ALIGN_MASK	vim/vim/src/structs.h	403;"	d
ALIGN_SIZE	vim/vim/src/structs.h	398;"	d
ALIGN_SIZE	vim/vim/src/structs.h	400;"	d
ALIST	vim/vim/src/structs.h	732;"	d
ALIST	vim/vim/src/structs.h	734;"	d
ALL_BUILTIN_TCAPS	vim/vim/src/feature.h	555;"	d
ALL_CFLAGS	vim/vim/src/Makefile	/^ALL_CFLAGS = $(PRE_DEFS) $(CFLAGS) $(PROFILE_CFLAGS) $(SANITIZER_CFLAGS) $(LEAK_CFLAGS) $(ABORT_CLFAGS) $(POST_DEFS)$/;"	m
ALL_GUI_PRO	vim/vim/src/Makefile	/^ALL_GUI_PRO  = gui.pro gui_gtk.pro gui_motif.pro gui_xmdlg.pro gui_athena.pro gui_gtk_x11.pro gui_x11.pro gui_w32.pro gui_photon.pro$/;"	m
ALL_GUI_SRC	vim/vim/src/Makefile	/^ALL_GUI_SRC  = gui.c gui_gtk.c gui_gtk_f.c gui_motif.c gui_xmdlg.c gui_xmebw.c gui_athena.c gui_gtk_x11.c gui_x11.c gui_at_sb.c gui_at_fs.c$/;"	m
ALL_LIBS	vim/vim/src/Makefile	/^ALL_LIBS = \\$/;"	m
ALL_LIB_DIRS	vim/vim/src/Makefile	/^ALL_LIB_DIRS = $(GUI_LIBS_DIR) $(X_LIBS_DIR)$/;"	m
ALL_OBJ	vim/vim/src/Makefile	/^ALL_OBJ = $(OBJ_COMMON) \\$/;"	m
ALL_SRC	vim/vim/src/Makefile	/^ALL_SRC = $(BASIC_SRC) $(ALL_GUI_SRC) $(UNITTEST_SRC) $(EXTRA_SRC)$/;"	m
ALPHA	vim/vim/src/regexp.c	207;"	d	file:
ALT	vim/vim/src/os_win32.c	761;"	d	file:
ALT_GR	vim/vim/src/os_win32.c	762;"	d	file:
ALT_INPUT_LOCK_OFF	vim/vim/src/vim.h	2219;"	d
ALT_INPUT_LOCK_ON	vim/vim/src/vim.h	2220;"	d
ALT_X_INPUT	vim/vim/src/feature.h	1335;"	d
ALWAYS_USE_GUI	vim/vim/src/feature.h	783;"	d
AL_ADD	vim/vim/src/ex_cmds2.c	2279;"	d	file:
AL_DEL	vim/vim/src/ex_cmds2.c	2280;"	d	file:
AL_SET	vim/vim/src/ex_cmds2.c	2278;"	d	file:
ANCHOR_BUF_SIZE	vim/vim/src/os_amiga.c	1428;"	d	file:
ANCHOR_BUF_SIZE	vim/vim/src/os_amiga.c	1430;"	d	file:
ANCHOR_SIZE	vim/vim/src/os_amiga.c	1431;"	d	file:
ANY	vim/vim/src/regexp.c	183;"	d	file:
ANYBUT	vim/vim/src/regexp.c	185;"	d	file:
ANYOF	vim/vim/src/regexp.c	184;"	d	file:
APIENTRY	vim/vim/src/gui_w32.c	245;"	d	file:
APPDIR	vim/vim/src/Makefile	/^APPDIR = $(VIMNAME).app$/;"	m
APPENDBIN	vim/vim/src/vim.h	1561;"	d
APPENDBIN	vim/vim/src/vim.h	1565;"	d
APPVER	vim/vim/src/GvimExt/Makefile	/^APPVER = 5.01$/;"	m
APP_ADD_DIR	vim/vim/src/ex_cmds2.c	/^static int APP_ADD_DIR;$/;"	v	file:
APP_BOTH	vim/vim/src/ex_cmds2.c	/^static int APP_BOTH;$/;"	v	file:
APP_LOAD	vim/vim/src/ex_cmds2.c	/^static int APP_LOAD;$/;"	v	file:
ARABIC_CHAR	vim/vim/src/arabic.h	258;"	d
ARCH	vim/vim/src/Make_cyg_ming.mak	/^ARCH := $(shell $(CC) -dumpmachine | sed -e 's\/-.*\/\/' -e 's\/_\/-\/' -e 's\/^mingw32$$\/i686\/')$/;"	m
ARGCOUNT	vim/vim/src/structs.h	741;"	d
ARGLIST	vim/vim/src/structs.h	737;"	d
ARGOPT	vim/vim/src/ex_cmds.h	52;"	d
ARGSrect	vim/vim/src/libvterm/src/rect.h	6;"	d
ARGTYPE_EDIT	vim/vim/src/main.c	3746;"	d	file:
ARGTYPE_EDIT_WAIT	vim/vim/src/main.c	3747;"	d	file:
ARGTYPE_OTHER	vim/vim/src/main.c	3745;"	d	file:
ARGTYPE_SEND	vim/vim/src/main.c	3748;"	d	file:
ARG_BACKGROUND	vim/vim/src/gui_gtk_x11.c	289;"	d	file:
ARG_COMPAT_LONG	vim/vim/src/gui_gtk_x11.c	300;"	d	file:
ARG_FONT	vim/vim/src/gui_gtk_x11.c	285;"	d	file:
ARG_FOREGROUND	vim/vim/src/gui_gtk_x11.c	290;"	d	file:
ARG_FOR_GTK	vim/vim/src/gui_gtk_x11.c	299;"	d	file:
ARG_GEOMETRY	vim/vim/src/gui_gtk_x11.c	286;"	d	file:
ARG_HAS_VALUE	vim/vim/src/gui_gtk_x11.c	297;"	d	file:
ARG_ICONIC	vim/vim/src/gui_gtk_x11.c	291;"	d	file:
ARG_INDEX_MASK	vim/vim/src/gui_gtk_x11.c	296;"	d	file:
ARG_KEEP	vim/vim/src/gui_gtk_x11.c	301;"	d	file:
ARG_MENUFONT	vim/vim/src/gui_gtk_x11.c	295;"	d	file:
ARG_NEEDS_GUI	vim/vim/src/gui_gtk_x11.c	298;"	d	file:
ARG_NETBEANS	vim/vim/src/gui_gtk_x11.c	293;"	d	file:
ARG_NOREVERSE	vim/vim/src/gui_gtk_x11.c	288;"	d	file:
ARG_REVERSE	vim/vim/src/gui_gtk_x11.c	287;"	d	file:
ARG_ROLE	vim/vim/src/gui_gtk_x11.c	292;"	d	file:
ARG_XRM	vim/vim/src/gui_gtk_x11.c	294;"	d	file:
ARRAY_LENGTH	vim/vim/src/blowfish.c	26;"	d	file:
ARRAY_LENGTH	vim/vim/src/gui_photon.c	37;"	d	file:
ASCII_ISALNUM	vim/vim/src/macros.h	120;"	d
ASCII_ISALNUM	vim/vim/src/macros.h	127;"	d
ASCII_ISALPHA	vim/vim/src/macros.h	119;"	d
ASCII_ISALPHA	vim/vim/src/macros.h	126;"	d
ASCII_ISLOWER	vim/vim/src/macros.h	121;"	d
ASCII_ISLOWER	vim/vim/src/macros.h	124;"	d
ASCII_ISUPPER	vim/vim/src/macros.h	122;"	d
ASCII_ISUPPER	vim/vim/src/macros.h	125;"	d
ASKMORE	vim/vim/src/vim.h	715;"	d
ASSEMBLY_ARCHITECTURE	vim/vim/src/Make_mvc.mak	/^ASSEMBLY_ARCHITECTURE=$(CPU)$/;"	m
ASSERT	vim/vim/src/nbdebug.h	17;"	d
ASSERT	vim/vim/src/nbdebug.h	56;"	d
ASSERT	vim/vim/src/os_win32.h	168;"	d
ASSERT	vim/vim/src/os_win32.h	171;"	d
ASSERT	vim/vim/src/os_win32.h	188;"	d
ASSERT	vim/vim/src/workshop.h	22;"	d
ASSERT	vim/vim/src/wsdebug.h	17;"	d
ASSERT	vim/vim/src/wsdebug.h	57;"	d
ASSERT_EQUAL	vim/vim/src/vim.h	/^    ASSERT_EQUAL,$/;"	e	enum:__anon244
ASSERT_MATCH	vim/vim/src/vim.h	/^    ASSERT_MATCH,$/;"	e	enum:__anon244
ASSERT_NOTEQUAL	vim/vim/src/vim.h	/^    ASSERT_NOTEQUAL,$/;"	e	enum:__anon244
ASSERT_NOTMATCH	vim/vim/src/vim.h	/^    ASSERT_NOTMATCH,$/;"	e	enum:__anon244
ASSERT_NULL_OR_POINTER	vim/vim/src/os_win32.h	202;"	d
ASSERT_OTHER	vim/vim/src/vim.h	/^    ASSERT_OTHER$/;"	e	enum:__anon244
ASSERT_POINTER	vim/vim/src/os_win32.h	199;"	d
ATC_FROM_TERM	vim/vim/src/term.c	3769;"	d	file:
ATHENA_BUNDLE	vim/vim/src/Makefile	/^ATHENA_BUNDLE	=$/;"	m
ATHENA_DEFS	vim/vim/src/Makefile	/^ATHENA_DEFS	= -DFEAT_GUI_ATHENA $(NARROW_PROTO)$/;"	m
ATHENA_INSTALL	vim/vim/src/Makefile	/^ATHENA_INSTALL  = install_normal install_gui_extra$/;"	m
ATHENA_IPATH	vim/vim/src/Makefile	/^ATHENA_IPATH	= $(GUI_INC_LOC)$/;"	m
ATHENA_LIBS1	vim/vim/src/Makefile	/^ATHENA_LIBS1	= $(XAW_LIB)$/;"	m
ATHENA_LIBS2	vim/vim/src/Makefile	/^ATHENA_LIBS2	= -lXt$/;"	m
ATHENA_LIBS_DIR	vim/vim/src/Makefile	/^ATHENA_LIBS_DIR = $(GUI_LIB_LOC)$/;"	m
ATHENA_MAN_TARGETS	vim/vim/src/Makefile	/^ATHENA_MAN_TARGETS = yes$/;"	m
ATHENA_OBJ	vim/vim/src/Makefile	/^ATHENA_OBJ	= objects\/gui.o objects\/gui_athena.o objects\/gui_x11.o \\$/;"	m
ATHENA_SRC	vim/vim/src/Makefile	/^ATHENA_SRC	= gui.c gui_athena.c gui_x11.c gui_beval.c \\$/;"	m
ATHENA_TARGETS	vim/vim/src/Makefile	/^ATHENA_TARGETS	= installglinks$/;"	m
ATHENA_TESTTARGET	vim/vim/src/Makefile	/^ATHENA_TESTTARGET = gui$/;"	m
ATTR_OFF	vim/vim/src/syntax.c	119;"	d	file:
AT_CURSOR	vim/vim/src/farsi.h	178;"	d
AT_MAX	vim/vim/src/gui_at_sb.c	218;"	d	file:
AT_MIN	vim/vim/src/gui_at_sb.c	217;"	d	file:
AUGROUP_ALL	vim/vim/src/fileio.c	56;"	d	file:
AUGROUP_DEFAULT	vim/vim/src/fileio.c	54;"	d	file:
AUGROUP_ERROR	vim/vim/src/fileio.c	55;"	d	file:
AUGROUP_NAME	vim/vim/src/fileio.c	7839;"	d	file:
AUTOCONF	vim/vim/src/Makefile	/^AUTOCONF = autoconf$/;"	m
AUTOLOAD_CHAR	vim/vim/src/vim.h	2438;"	d
AUTOMATA_CORRECT	vim/vim/src/hangulin.c	17;"	d	file:
AUTOMATA_CORRECT_NEW	vim/vim/src/hangulin.c	19;"	d	file:
AUTOMATA_ERROR	vim/vim/src/hangulin.c	20;"	d	file:
AUTOMATA_NEW	vim/vim/src/hangulin.c	16;"	d	file:
AUTOMATA_NULL	vim/vim/src/hangulin.c	21;"	d	file:
AUTOMATA_SPECIAL	vim/vim/src/hangulin.c	18;"	d	file:
AUTOMATIC_ENGINE	vim/vim/src/regexp.h	38;"	d
AUTOSOURCE	vim/vim/src/Makefile	/^AUTOSOURCE = ..\/runtime\/autoload$/;"	m
AUTOSUBDIR	vim/vim/src/Makefile	/^AUTOSUBDIR = \/autoload$/;"	m
AUTOSUBLOC	vim/vim/src/Makefile	/^AUTOSUBLOC	= $(VIMRTLOC)$(AUTOSUBDIR)$/;"	m
AWK	vim/vim/runtime/doc/Makefile	/^AWK = awk$/;"	m
AWK	vim/vim/src/auto/config.mk	/^AWK		= mawk$/;"	m
AYN	vim/vim/src/farsi.h	131;"	d
AYN_	vim/vim/src/farsi.h	44;"	d
A_acute	vim/vim/src/regexp_nfa.c	759;"	d	file:
A_circumflex	vim/vim/src/regexp_nfa.c	756;"	d	file:
A_diaeresis	vim/vim/src/regexp_nfa.c	757;"	d	file:
A_firstc_laa	vim/vim/src/arabic.c	/^A_firstc_laa($/;"	f	file:	signature:( int c, int c1)
A_firstc_laa	vim/vim/src/arabic.c	/^static int  A_firstc_laa(int c1, int c);$/;"	p	file:	signature:(int c1, int c)
A_grave	vim/vim/src/regexp_nfa.c	758;"	d	file:
A_is_a	vim/vim/src/arabic.c	/^A_is_a(int cur_c)$/;"	f	file:	signature:(int cur_c)
A_is_a	vim/vim/src/arabic.c	/^static int  A_is_a(int cur_c);$/;"	p	file:	signature:(int cur_c)
A_is_f	vim/vim/src/arabic.c	/^A_is_f(int cur_c)$/;"	f	file:	signature:(int cur_c)
A_is_f	vim/vim/src/arabic.c	/^static int  A_is_f(int cur_c);$/;"	p	file:	signature:(int cur_c)
A_is_formb	vim/vim/src/arabic.c	/^A_is_formb(int c)$/;"	f	file:	signature:(int c)
A_is_formb	vim/vim/src/arabic.c	/^static int  A_is_formb(int c);$/;"	p	file:	signature:(int c)
A_is_harakat	vim/vim/src/arabic.c	/^A_is_harakat(int c)$/;"	f	file:	signature:(int c)
A_is_harakat	vim/vim/src/arabic.c	/^static int  A_is_harakat(int c);$/;"	p	file:	signature:(int c)
A_is_iso	vim/vim/src/arabic.c	/^A_is_iso(int c)$/;"	f	file:	signature:(int c)
A_is_iso	vim/vim/src/arabic.c	/^static int  A_is_iso(int c);$/;"	p	file:	signature:(int c)
A_is_ok	vim/vim/src/arabic.c	/^A_is_ok(int c)$/;"	f	file:	signature:(int c)
A_is_ok	vim/vim/src/arabic.c	/^static int  A_is_ok(int c);$/;"	p	file:	signature:(int c)
A_is_s	vim/vim/src/arabic.c	/^A_is_s(int cur_c)$/;"	f	file:	signature:(int cur_c)
A_is_s	vim/vim/src/arabic.c	/^static int  A_is_s(int cur_c);$/;"	p	file:	signature:(int cur_c)
A_is_special	vim/vim/src/arabic.c	/^A_is_special(int c)$/;"	f	file:	signature:(int c)
A_is_special	vim/vim/src/arabic.c	/^static int  A_is_special(int c);$/;"	p	file:	signature:(int c)
A_is_valid	vim/vim/src/arabic.c	/^A_is_valid(int c)$/;"	f	file:	signature:(int c)
A_is_valid	vim/vim/src/arabic.c	/^static int  A_is_valid(int c);$/;"	p	file:	signature:(int c)
A_ring	vim/vim/src/regexp_nfa.c	761;"	d	file:
A_virguilla	vim/vim/src/regexp_nfa.c	760;"	d	file:
AbortProc	vim/vim/src/os_mswin.c	/^AbortProc(HDC hdcPrn UNUSED, int iCode UNUSED)$/;"	f	file:	signature:(HDC hdcPrn UNUSED, int iCode UNUSED)
Add	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	e	enum:__anon69
AddCommand	vim/vim/src/VisVim/DSAddIn.cpp	/^bool CDSAddIn::AddCommand (IApplication* pApp, char* MethodName, char* CmdName,$/;"	f	class:CDSAddIn	signature:(IApplication* pApp, char* MethodName, char* CmdName, UINT StrResId, UINT GlyphIndex, VARIANT_BOOL bFirstTime)
AddRef	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExt::AddRef()$/;"	f	class:CShellExt	signature:()
AddRef	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExtClassFactory::AddRef()$/;"	f	class:CShellExtClassFactory	signature:()
AddRef	vim/vim/src/if_ole.cpp	/^CVim::AddRef()$/;"	f	class:CVim	signature:()
AddRef	vim/vim/src/if_ole.cpp	/^CVimCF::AddRef()$/;"	f	class:CVimCF	signature:()
AddRef	vim/vim/src/if_ole.h	/^	ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )($/;"	m	struct:IVimVtbl	access:public
AdjustedGlyphRun	vim/vim/src/gui_dwrite.cpp	/^    AdjustedGlyphRun($/;"	f	class:AdjustedGlyphRun	access:public	signature:( const DWRITE_GLYPH_RUN *glyphRun, FLOAT cellWidth)
AdjustedGlyphRun	vim/vim/src/gui_dwrite.cpp	/^class AdjustedGlyphRun : public DWRITE_GLYPH_RUN$/;"	c	file:	inherits:DWRITE_GLYPH_RUN
AdjustedGlyphRun::AdjustedGlyphRun	vim/vim/src/gui_dwrite.cpp	/^    AdjustedGlyphRun($/;"	f	class:AdjustedGlyphRun	access:public	signature:( const DWRITE_GLYPH_RUN *glyphRun, FLOAT cellWidth)
AdjustedGlyphRun::adjustToCell	vim/vim/src/gui_dwrite.cpp	/^    static FLOAT adjustToCell(FLOAT value, FLOAT cellWidth)$/;"	f	class:AdjustedGlyphRun	access:public	signature:(FLOAT value, FLOAT cellWidth)
AdjustedGlyphRun::getDelta	vim/vim/src/gui_dwrite.cpp	/^    FLOAT getDelta(void) const$/;"	f	class:AdjustedGlyphRun	access:public	signature:(void) const
AdjustedGlyphRun::mAdjustedAdvances	vim/vim/src/gui_dwrite.cpp	/^    FLOAT *mAdjustedAdvances;$/;"	m	class:AdjustedGlyphRun	file:	access:private
AdjustedGlyphRun::mDelta	vim/vim/src/gui_dwrite.cpp	/^    FLOAT mDelta;$/;"	m	class:AdjustedGlyphRun	file:	access:private
AdjustedGlyphRun::~AdjustedGlyphRun	vim/vim/src/gui_dwrite.cpp	/^    ~AdjustedGlyphRun(void)$/;"	f	class:AdjustedGlyphRun	access:public	signature:(void)
AllocBotShadowGC	vim/vim/src/gui_at_sb.c	/^AllocBotShadowGC(Widget w)$/;"	f	file:	signature:(Widget w)
AllocBotShadowGC	vim/vim/src/gui_at_sb.c	/^static void AllocBotShadowGC(Widget);$/;"	p	file:
AllocTopShadowGC	vim/vim/src/gui_at_sb.c	/^AllocTopShadowGC(Widget w)$/;"	f	file:	signature:(Widget w)
AllocTopShadowGC	vim/vim/src/gui_at_sb.c	/^static void AllocTopShadowGC(Widget);$/;"	p	file:
AlwaysFalse	vim/vim/src/if_py_both.h	/^AlwaysFalse(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
AlwaysNone	vim/vim/src/if_py_both.h	/^AlwaysNone(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
AlwaysTrue	vim/vim/src/if_py_both.h	/^AlwaysTrue(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
AppendCharToRedobuff	vim/vim/src/getchar.c	/^AppendCharToRedobuff(int c)$/;"	f	signature:(int c)
AppendNumberToRedobuff	vim/vim/src/getchar.c	/^AppendNumberToRedobuff(long n)$/;"	f	signature:(long n)
AppendPropCarefully	vim/vim/runtime/tools/xcmdsrv_client.c	/^AppendPropCarefully($/;"	f	file:	signature:( Display *dpy, Window window, Atom property, char *value, int length)
AppendPropCarefully	vim/vim/runtime/tools/xcmdsrv_client.c	/^static int	AppendPropCarefully(Display *display,$/;"	p	file:	signature:(Display *display, Window window, Atom property, char *value, int length)
AppendPropCarefully	vim/vim/src/if_xcmdsrv.c	/^AppendPropCarefully($/;"	f	file:	signature:( Display *dpy, Window window, Atom property, char_u *value, int length)
AppendPropCarefully	vim/vim/src/if_xcmdsrv.c	/^static int	AppendPropCarefully(Display *display, Window window, Atom property, char_u *value, int length);$/;"	p	file:	signature:(Display *display, Window window, Atom property, char_u *value, int length)
AppendToRedobuff	vim/vim/src/getchar.c	/^AppendToRedobuff(char_u *s)$/;"	f	signature:(char_u *s)
AppendToRedobuffLit	vim/vim/src/getchar.c	/^AppendToRedobuffLit($/;"	f	signature:( char_u *str, int len)
ArglistW	vim/vim/src/os_win32.c	/^static LPWSTR	*ArglistW = NULL;$/;"	v	file:
ArpBase	vim/vim/src/os_amiga.c	/^struct ArpBase		*ArpBase = NULL;$/;"	v	typeref:struct:ArpBase
AutoCmd	vim/vim/src/fileio.c	/^typedef struct AutoCmd$/;"	s	file:
AutoCmd	vim/vim/src/fileio.c	/^} AutoCmd;$/;"	t	typeref:struct:AutoCmd	file:
AutoCmd::cmd	vim/vim/src/fileio.c	/^    char_u	    *cmd;		\/* The command to be executed (NULL$/;"	m	struct:AutoCmd	file:	access:public
AutoCmd::last	vim/vim/src/fileio.c	/^    char	    last;		\/* last command in list *\/$/;"	m	struct:AutoCmd	file:	access:public
AutoCmd::nested	vim/vim/src/fileio.c	/^    char	    nested;		\/* If autocommands nest here *\/$/;"	m	struct:AutoCmd	file:	access:public
AutoCmd::next	vim/vim/src/fileio.c	/^    struct AutoCmd  *next;		\/* Next AutoCmd in list *\/$/;"	m	struct:AutoCmd	typeref:struct:AutoCmd::AutoCmd	file:	access:public
AutoCmd::scriptID	vim/vim/src/fileio.c	/^    scid_T	    scriptID;		\/* script ID where defined *\/$/;"	m	struct:AutoCmd	file:	access:public
AutoPat	vim/vim/src/fileio.c	/^typedef struct AutoPat$/;"	s	file:
AutoPat	vim/vim/src/fileio.c	/^} AutoPat;$/;"	t	typeref:struct:AutoPat	file:
AutoPat::allow_dirs	vim/vim/src/fileio.c	/^    char	    allow_dirs;		\/* Pattern may match whole path *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPat::buflocal_nr	vim/vim/src/fileio.c	/^    int		    buflocal_nr;	\/* !=0 for buffer-local AutoPat *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPat::cmds	vim/vim/src/fileio.c	/^    AutoCmd	    *cmds;		\/* list of commands to do *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPat::group	vim/vim/src/fileio.c	/^    int		    group;		\/* group ID *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPat::last	vim/vim/src/fileio.c	/^    char	    last;		\/* last pattern for apply_autocmds() *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPat::next	vim/vim/src/fileio.c	/^    struct AutoPat  *next;		\/* next AutoPat in AutoPat list *\/$/;"	m	struct:AutoPat	typeref:struct:AutoPat::AutoPat	file:	access:public
AutoPat::pat	vim/vim/src/fileio.c	/^    char_u	    *pat;		\/* pattern as typed (NULL when pattern$/;"	m	struct:AutoPat	file:	access:public
AutoPat::patlen	vim/vim/src/fileio.c	/^    int		    patlen;		\/* strlen() of pat *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPat::reg_prog	vim/vim/src/fileio.c	/^    regprog_T	    *reg_prog;		\/* compiled regprog for pattern *\/$/;"	m	struct:AutoPat	file:	access:public
AutoPatCmd	vim/vim/src/fileio.c	/^typedef struct AutoPatCmd$/;"	s	file:
AutoPatCmd	vim/vim/src/fileio.c	/^} AutoPatCmd;$/;"	t	typeref:struct:AutoPatCmd	file:
AutoPatCmd::arg_bufnr	vim/vim/src/fileio.c	/^    int		arg_bufnr;	\/* initially equal to <abuf>, set to zero when$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::curpat	vim/vim/src/fileio.c	/^    AutoPat	*curpat;	\/* next AutoPat to examine *\/$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::event	vim/vim/src/fileio.c	/^    event_T	event;		\/* current event *\/$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::fname	vim/vim/src/fileio.c	/^    char_u	*fname;		\/* fname to match with *\/$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::group	vim/vim/src/fileio.c	/^    int		group;		\/* group being used *\/$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::next	vim/vim/src/fileio.c	/^    struct AutoPatCmd   *next;	\/* chain of active apc-s for auto-invalidation*\/$/;"	m	struct:AutoPatCmd	typeref:struct:AutoPatCmd::AutoPatCmd	file:	access:public
AutoPatCmd::nextcmd	vim/vim/src/fileio.c	/^    AutoCmd	*nextcmd;	\/* next AutoCmd to execute *\/$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::sfname	vim/vim/src/fileio.c	/^    char_u	*sfname;	\/* sfname to match with *\/$/;"	m	struct:AutoPatCmd	file:	access:public
AutoPatCmd::tail	vim/vim/src/fileio.c	/^    char_u	*tail;		\/* tail of fname *\/$/;"	m	struct:AutoPatCmd	file:	access:public
B0_DIRTY	vim/vim/src/memline.c	184;"	d	file:
B0_FF_MASK	vim/vim/src/memline.c	201;"	d	file:
B0_FNAME_SIZE_CRYPT	vim/vim/src/memline.c	135;"	d	file:
B0_FNAME_SIZE_NOCRYPT	vim/vim/src/memline.c	134;"	d	file:
B0_FNAME_SIZE_ORG	vim/vim/src/memline.c	133;"	d	file:
B0_HAS_FENC	vim/vim/src/memline.c	209;"	d	file:
B0_HNAME_SIZE	vim/vim/src/memline.c	137;"	d	file:
B0_MAGIC_CHAR	vim/vim/src/memline.c	146;"	d	file:
B0_MAGIC_INT	vim/vim/src/memline.c	144;"	d	file:
B0_MAGIC_LONG	vim/vim/src/memline.c	143;"	d	file:
B0_MAGIC_SHORT	vim/vim/src/memline.c	145;"	d	file:
B0_SAME_DIR	vim/vim/src/memline.c	205;"	d	file:
B0_UNAME_SIZE	vim/vim/src/memline.c	136;"	d	file:
BACK	vim/vim/src/regexp.c	158;"	d	file:
BACKGROUND	vim/vim/src/gui_x11_pm.h	88;"	d
BACKPOS_INITIAL	vim/vim/src/regexp.c	3669;"	d	file:
BACKREF	vim/vim/src/regexp.c	221;"	d	file:
BACKSLASH_IN_FILENAME	vim/vim/src/os_dos.h	131;"	d
BACKSPACE_CHAR	vim/vim/src/edit.c	194;"	d	file:
BACKSPACE_LINE	vim/vim/src/edit.c	197;"	d	file:
BACKSPACE_WORD	vim/vim/src/edit.c	195;"	d	file:
BACKSPACE_WORD_NOT_SPACE	vim/vim/src/edit.c	196;"	d	file:
BACKTRACKING_ENGINE	vim/vim/src/regexp.h	39;"	d
BACKWARD	vim/vim/src/vim.h	728;"	d
BACKWARD_FILE	vim/vim/src/vim.h	730;"	d
BAD_DROP	vim/vim/src/vim.h	2384;"	d
BAD_KEEP	vim/vim/src/vim.h	2383;"	d
BAD_REPLACE	vim/vim/src/vim.h	2382;"	d
BANG	vim/vim/src/ex_cmds.h	34;"	d
BARTYPE_HISTORY	vim/vim/src/vim.h	1140;"	d
BARTYPE_MARK	vim/vim/src/vim.h	1142;"	d
BARTYPE_REGISTER	vim/vim/src/vim.h	1141;"	d
BARTYPE_VERSION	vim/vim/src/vim.h	1139;"	d
BASENAMELEN	vim/vim/src/os_amiga.h	48;"	d
BASENAMELEN	vim/vim/src/os_mac.h	231;"	d
BASENAMELEN	vim/vim/src/os_unix.h	160;"	d
BASENAMELEN	vim/vim/src/os_win32.h	119;"	d
BASIC_SRC	vim/vim/src/Makefile	/^BASIC_SRC = \\$/;"	m
BC	vim/vim/src/term.c	/^char *UP, *BC, PC;$/;"	v
BC	vim/vim/src/termlib.c	/^char	*UP = 0, *BC = 0;     \/* Pointers to UP and BC strings from database *\/$/;"	v
BCC	vim/vim/src/xxd/Make_bc5.mak	/^BCC = bcc32$/;"	m
BCO_ALWAYS	vim/vim/src/vim.h	1098;"	d
BCO_ENTER	vim/vim/src/vim.h	1097;"	d
BCO_NOHELP	vim/vim/src/vim.h	1099;"	d
BE	vim/vim/src/farsi.h	112;"	d
BEHIND	vim/vim/src/regexp.c	167;"	d	file:
BELL	vim/vim/src/ascii.h	104;"	d
BELL	vim/vim/src/ascii.h	25;"	d
BEOS_DR8	vim/vim/src/os_beos.h	20;"	d
BEOS_PR_OR_BETTER	vim/vim/src/os_beos.h	21;"	d
BEVAL_NETBEANS	vim/vim/src/globals.h	1246;"	d
BEVAL_TEXT_LEN	vim/vim/src/gui_w32.c	4234;"	d	file:
BEVAL_WORKSHOP	vim/vim/src/globals.h	1247;"	d
BFA_DEL	vim/vim/src/vim.h	2398;"	d
BFA_KEEP_UNDO	vim/vim/src/vim.h	2400;"	d
BFA_WIPE	vim/vim/src/vim.h	2399;"	d
BF_BLOCK	vim/vim/src/blowfish.c	28;"	d	file:
BF_BLOCK_MASK	vim/vim/src/blowfish.c	29;"	d	file:
BF_CFB_UPDATE	vim/vim/src/blowfish.c	586;"	d	file:
BF_CHECK_RO	vim/vim/src/vim.h	742;"	d
BF_DUMMY	vim/vim/src/vim.h	753;"	d
BF_MAX_CFB_LEN	vim/vim/src/blowfish.c	30;"	d	file:
BF_NEVERLOADED	vim/vim/src/vim.h	745;"	d
BF_NEW	vim/vim/src/vim.h	750;"	d
BF_NEW_W	vim/vim/src/vim.h	751;"	d
BF_NOTEDITED	vim/vim/src/vim.h	747;"	d
BF_PRESERVED	vim/vim/src/vim.h	754;"	d
BF_RANBYTE	vim/vim/src/blowfish.c	592;"	d	file:
BF_READERR	vim/vim/src/vim.h	752;"	d
BF_RECOVERED	vim/vim/src/vim.h	741;"	d
BF_WRITE_MASK	vim/vim/src/vim.h	757;"	d
BHPOS	vim/vim/src/regexp.c	177;"	d	file:
BH_DIRTY	vim/vim/src/structs.h	482;"	d
BH_LOCKED	vim/vim/src/structs.h	483;"	d
BINARY_FILE_IO	vim/vim/src/os_mac.h	100;"	d
BINARY_FILE_IO	vim/vim/src/os_mint.h	13;"	d
BINARY_FILE_IO	vim/vim/src/os_unix.h	38;"	d
BINARY_FILE_IO	vim/vim/src/os_vms_conf.h	6;"	d
BINARY_FILE_IO	vim/vim/src/os_win32.h	27;"	d
BINDIR	vim/vim/src/auto/config.mk	/^BINDIR		= ${exec_prefix}\/bin$/;"	m
BINDIR	vim/vim/src/libvterm/Makefile	/^BINDIR=$(PREFIX)\/bin$/;"	m
BINFILES	vim/vim/src/libvterm/Makefile	/^BINFILES=$(BINFILES_SRC:.c=)$/;"	m
BINFILES_SRC	vim/vim/src/libvterm/Makefile	/^BINFILES_SRC=$(sort $(wildcard bin\/*.c))$/;"	m
BINMOD	vim/vim/src/Makefile	/^BINMOD = 755$/;"	m
BIN_ASSIGN	vim/vim/src/xxd/xxd.c	152;"	d	file:
BIN_ASSIGN	vim/vim/src/xxd/xxd.c	158;"	d	file:
BIN_ASSIGN	vim/vim/src/xxd/xxd.c	165;"	d	file:
BIN_ASSIGN	vim/vim/src/xxd/xxd.c	172;"	d	file:
BIN_CREAT	vim/vim/src/xxd/xxd.c	151;"	d	file:
BIN_CREAT	vim/vim/src/xxd/xxd.c	157;"	d	file:
BIN_CREAT	vim/vim/src/xxd/xxd.c	164;"	d	file:
BIN_CREAT	vim/vim/src/xxd/xxd.c	171;"	d	file:
BIN_READ	vim/vim/src/xxd/xxd.c	149;"	d	file:
BIN_READ	vim/vim/src/xxd/xxd.c	155;"	d	file:
BIN_READ	vim/vim/src/xxd/xxd.c	162;"	d	file:
BIN_READ	vim/vim/src/xxd/xxd.c	169;"	d	file:
BIN_WRITE	vim/vim/src/xxd/xxd.c	150;"	d	file:
BIN_WRITE	vim/vim/src/xxd/xxd.c	156;"	d	file:
BIN_WRITE	vim/vim/src/xxd/xxd.c	163;"	d	file:
BIN_WRITE	vim/vim/src/xxd/xxd.c	170;"	d	file:
BKC_AUTO	vim/vim/src/option.h	334;"	d
BKC_BREAKHARDLINK	vim/vim/src/option.h	337;"	d
BKC_BREAKSYMLINK	vim/vim/src/option.h	336;"	d
BKC_NO	vim/vim/src/option.h	335;"	d
BKC_YES	vim/vim/src/option.h	333;"	d
BLINK_NONE	vim/vim/src/gui_gtk_x11.c	804;"	d	file:
BLINK_NONE	vim/vim/src/gui_photon.c	/^    BLINK_NONE,$/;"	e	enum:__anon239	file:
BLINK_NONE	vim/vim/src/gui_w32.c	531;"	d	file:
BLINK_NONE	vim/vim/src/gui_x11.c	3044;"	d	file:
BLINK_OFF	vim/vim/src/gui_gtk_x11.c	805;"	d	file:
BLINK_OFF	vim/vim/src/gui_photon.c	/^    BLINK_OFF,$/;"	e	enum:__anon239	file:
BLINK_OFF	vim/vim/src/gui_w32.c	532;"	d	file:
BLINK_OFF	vim/vim/src/gui_x11.c	3045;"	d	file:
BLINK_ON	vim/vim/src/gui_gtk_x11.c	806;"	d	file:
BLINK_ON	vim/vim/src/gui_photon.c	/^    BLINK_ON$/;"	e	enum:__anon239	file:
BLINK_ON	vim/vim/src/gui_w32.c	533;"	d	file:
BLINK_ON	vim/vim/src/gui_x11.c	3046;"	d	file:
BLN_CURBUF	vim/vim/src/vim.h	970;"	d
BLN_DUMMY	vim/vim/src/vim.h	972;"	d
BLN_DUMMY_OK	vim/vim/src/vim.h	975;"	d
BLN_LISTED	vim/vim/src/vim.h	971;"	d
BLN_NEW	vim/vim/src/vim.h	973;"	d
BLN_NOOPT	vim/vim/src/vim.h	974;"	d
BLOCK0_ID0	vim/vim/src/memline.c	62;"	d	file:
BLOCK0_ID1	vim/vim/src/memline.c	63;"	d	file:
BLOCK0_ID1_C0	vim/vim/src/memline.c	64;"	d	file:
BLOCK0_ID1_C1	vim/vim/src/memline.c	65;"	d	file:
BLOCK0_ID1_C2	vim/vim/src/memline.c	66;"	d	file:
BLOCK_SIGNALS	vim/vim/src/os_unix.c	216;"	d	file:
BLOCK_SIGNALS	vim/vim/src/os_unix.c	220;"	d	file:
BLUE	vim/vim/src/term.c	2805;"	d	file:
BL_FIX	vim/vim/src/vim.h	1088;"	d
BL_SOL	vim/vim/src/vim.h	1087;"	d
BL_WHITE	vim/vim/src/vim.h	1086;"	d
BOL	vim/vim/src/regexp.c	154;"	d	file:
BOOL	vim/vim/src/gui_w32.c	/^typedef int BOOL;$/;"	t	file:
BOOL	vim/vim/src/os_mswin.c	/^typedef int BOOL;$/;"	t	file:
BOOL	vim/vim/src/os_win32.c	/^typedef int BOOL;$/;"	t	file:
BOOLSTR	vim/vim/src/libvterm/t/harness.c	720;"	d	file:
BOR	vim/vim/src/GvimExt/Make_bc5.mak	/^BOR = c:\\bc5$/;"	m
BOR	vim/vim/src/Make_bc5.mak	/^BOR = c:\\bc5$/;"	m
BOR	vim/vim/src/xxd/Make_bc5.mak	/^BOR = c:\\bc5$/;"	m
BOTTOM_SHADOW	vim/vim/src/gui_x11_pm.h	90;"	d
BOW	vim/vim/src/regexp.c	172;"	d	file:
BO_ALL	vim/vim/src/option.h	351;"	d
BO_BS	vim/vim/src/option.h	352;"	d
BO_COMPL	vim/vim/src/option.h	354;"	d
BO_COPY	vim/vim/src/option.h	355;"	d
BO_CRSR	vim/vim/src/option.h	353;"	d
BO_CTRLG	vim/vim/src/option.h	356;"	d
BO_ERROR	vim/vim/src/option.h	357;"	d
BO_ESC	vim/vim/src/option.h	358;"	d
BO_EX	vim/vim/src/option.h	359;"	d
BO_HANGUL	vim/vim/src/option.h	360;"	d
BO_IM	vim/vim/src/option.h	361;"	d
BO_LANG	vim/vim/src/option.h	362;"	d
BO_MATCH	vim/vim/src/option.h	364;"	d
BO_MESS	vim/vim/src/option.h	363;"	d
BO_OPER	vim/vim/src/option.h	365;"	d
BO_REG	vim/vim/src/option.h	366;"	d
BO_SH	vim/vim/src/option.h	367;"	d
BO_SPELL	vim/vim/src/option.h	368;"	d
BO_WILD	vim/vim/src/option.h	369;"	d
BRACE_AT_END	vim/vim/src/misc1.c	7154;"	d	file:
BRACE_AT_START	vim/vim/src/misc1.c	7153;"	d	file:
BRACE_COMPLEX	vim/vim/src/regexp.c	230;"	d	file:
BRACE_IN_COL0	vim/vim/src/misc1.c	7152;"	d	file:
BRACE_LIMITS	vim/vim/src/regexp.c	174;"	d	file:
BRACE_SIMPLE	vim/vim/src/regexp.c	170;"	d	file:
BRANCH	vim/vim/src/regexp.c	156;"	d	file:
BRC	vim/vim/src/GvimExt/Make_bc5.mak	/^BRC	= $(BOR)\\bin\\brc32$/;"	m
BRC	vim/vim/src/Make_bc5.mak	/^BRC = $(BOR)\\BIN\\brc32$/;"	m
BREAKCHECK_SKIP	vim/vim/src/misc1.c	9639;"	d	file:
BREAKCHECK_SKIP	vim/vim/src/misc1.c	9641;"	d	file:
BREAKCHECK_SKIP	vim/vim/src/os_mac.h	93;"	d
BREAKCHECK_SKIP	vim/vim/src/os_win32.h	75;"	d
BREAKP	vim/vim/src/ex_cmds2.c	537;"	d	file:
BROKEN_LOCALE	vim/vim/src/os_vms_conf.h	169;"	d
BROKEN_LOCALE	vim/vim/src/os_vms_conf.h	178;"	d
BROKEN_TOUPPER	vim/vim/src/os_win32.h	88;"	d
BROWSE_DIR	vim/vim/src/vim.h	2181;"	d
BROWSE_FILTER_ALL_FILES	vim/vim/src/vim.h	2170;"	d
BROWSE_FILTER_ALL_FILES	vim/vim/src/vim.h	2176;"	d
BROWSE_FILTER_DEFAULT	vim/vim/src/vim.h	2171;"	d
BROWSE_FILTER_DEFAULT	vim/vim/src/vim.h	2177;"	d
BROWSE_FILTER_MACROS	vim/vim/src/vim.h	2168;"	d
BROWSE_FILTER_MACROS	vim/vim/src/vim.h	2174;"	d
BROWSE_SAVE	vim/vim/src/vim.h	2180;"	d
BS	vim/vim/src/ascii.h	105;"	d
BS	vim/vim/src/ascii.h	26;"	d
BSC32	vim/vim/src/Make_dvc.mak	/^BSC32=bscmake.exe$/;"	m
BSC32_FLAGS	vim/vim/src/Make_dvc.mak	/^BSC32_FLAGS=\/nologo \/o"$(OUTDIR)\/Make_dvc.bsc"$/;"	m
BSC32_SBRS	vim/vim/src/Make_dvc.mak	/^BSC32_SBRS=$/;"	m
BSTR_UserFree	vim/vim/src/if_ole.h	/^void			  __RPC_USER  BSTR_UserFree(	 unsigned long __RPC_FAR *, BSTR __RPC_FAR * );$/;"	p	signature:( unsigned long __RPC_FAR *, BSTR __RPC_FAR * )
BSTR_UserMarshal	vim/vim/src/if_ole.h	/^unsigned char __RPC_FAR * __RPC_USER  BSTR_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * );$/;"	p	signature:( unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * )
BSTR_UserSize	vim/vim/src/if_ole.h	/^unsigned long		  __RPC_USER  BSTR_UserSize(	 unsigned long __RPC_FAR *, unsigned long	     , BSTR __RPC_FAR * );$/;"	p	signature:( unsigned long __RPC_FAR *, unsigned long , BSTR __RPC_FAR * )
BSTR_UserUnmarshal	vim/vim/src/if_ole.h	/^unsigned char __RPC_FAR * __RPC_USER  BSTR_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * );$/;"	p	signature:(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * )
BS_EOL	vim/vim/src/option.h	300;"	d
BS_INDENT	vim/vim/src/option.h	299;"	d
BS_START	vim/vim/src/option.h	301;"	d
BT_EXTRA_KEYS	vim/vim/src/term.c	75;"	d	file:
BT_REGEXP_DEBUG_LOG	vim/vim/src/regexp.c	54;"	d	file:
BT_REGEXP_DEBUG_LOG_NAME	vim/vim/src/regexp.c	55;"	d	file:
BT_REGEXP_DUMP	vim/vim/src/regexp.c	51;"	d	file:
BT_REGEXP_LOG	vim/vim/src/regexp.c	53;"	d	file:
BUF2SIZE	vim/vim/src/os_amiga.c	301;"	d	file:
BUFEMPTY	vim/vim/src/macros.h	62;"	d
BUFFER_REF	vim/vim/src/if_mzsch.c	258;"	d	file:
BUFFER_REF	vim/vim/src/if_mzsch.c	261;"	d	file:
BUFFER_SIZE	vim/vim/src/if_python.c	1135;"	d	file:
BUFFER_SIZE	vim/vim/src/if_python3.c	1025;"	d	file:
BUFLEN	vim/vim/src/os_win32.c	4179;"	d	file:
BUFNAME	vim/vim/src/ex_cmds.h	50;"	d
BUFPATHLEN	vim/vim/src/gui_w32.c	3784;"	d	file:
BUFSIZE	vim/vim/src/GvimExt/gvimext.cpp	43;"	d	file:
BUFSIZE	vim/vim/src/dosinst.h	71;"	d
BUFSIZE	vim/vim/src/fileio.c	24;"	d	file:
BUFUNL	vim/vim/src/ex_cmds.h	51;"	d
BUF_HAS_LL_ENTRY	vim/vim/src/structs.h	2095;"	d
BUF_HAS_QF_ENTRY	vim/vim/src/structs.h	2094;"	d
BUF_PYTHON_REF	vim/vim/src/if_python.c	787;"	d	file:
BUF_PYTHON_REF	vim/vim/src/if_python3.c	742;"	d	file:
BUTTON_MASK	vim/vim/src/gui_xmebw.c	478;"	d	file:
BVAL_EMPTY	vim/vim/src/vim.h	/^    BVAL_EMPTY$/;"	e	enum:__anon241
BVAL_NR	vim/vim/src/vim.h	/^    BVAL_NR,$/;"	e	enum:__anon241
BVAL_STRING	vim/vim/src/vim.h	/^    BVAL_STRING,$/;"	e	enum:__anon241
BV_AI	vim/vim/src/option.h	/^    BV_AI = 0$/;"	e	enum:__anon220
BV_AR	vim/vim/src/option.h	/^    , BV_AR$/;"	e	enum:__anon220
BV_BEXPR	vim/vim/src/option.h	/^    , BV_BEXPR$/;"	e	enum:__anon220
BV_BH	vim/vim/src/option.h	/^    , BV_BH$/;"	e	enum:__anon220
BV_BIN	vim/vim/src/option.h	/^    , BV_BIN$/;"	e	enum:__anon220
BV_BKC	vim/vim/src/option.h	/^    , BV_BKC$/;"	e	enum:__anon220
BV_BL	vim/vim/src/option.h	/^    , BV_BL$/;"	e	enum:__anon220
BV_BOMB	vim/vim/src/option.h	/^    , BV_BOMB$/;"	e	enum:__anon220
BV_BT	vim/vim/src/option.h	/^    , BV_BT$/;"	e	enum:__anon220
BV_CFU	vim/vim/src/option.h	/^    , BV_CFU$/;"	e	enum:__anon220
BV_CI	vim/vim/src/option.h	/^    , BV_CI$/;"	e	enum:__anon220
BV_CIN	vim/vim/src/option.h	/^    , BV_CIN$/;"	e	enum:__anon220
BV_CINK	vim/vim/src/option.h	/^    , BV_CINK$/;"	e	enum:__anon220
BV_CINO	vim/vim/src/option.h	/^    , BV_CINO$/;"	e	enum:__anon220
BV_CINW	vim/vim/src/option.h	/^    , BV_CINW$/;"	e	enum:__anon220
BV_CM	vim/vim/src/option.h	/^    , BV_CM$/;"	e	enum:__anon220
BV_CMS	vim/vim/src/option.h	/^    , BV_CMS$/;"	e	enum:__anon220
BV_COM	vim/vim/src/option.h	/^    , BV_COM$/;"	e	enum:__anon220
BV_COUNT	vim/vim/src/option.h	/^    , BV_COUNT	    \/* must be the last one *\/$/;"	e	enum:__anon220
BV_CPT	vim/vim/src/option.h	/^    , BV_CPT$/;"	e	enum:__anon220
BV_DEF	vim/vim/src/option.h	/^    , BV_DEF$/;"	e	enum:__anon220
BV_DICT	vim/vim/src/option.h	/^    , BV_DICT$/;"	e	enum:__anon220
BV_EFM	vim/vim/src/option.h	/^    , BV_EFM$/;"	e	enum:__anon220
BV_EOL	vim/vim/src/option.h	/^    , BV_EOL$/;"	e	enum:__anon220
BV_EP	vim/vim/src/option.h	/^    , BV_EP$/;"	e	enum:__anon220
BV_ET	vim/vim/src/option.h	/^    , BV_ET$/;"	e	enum:__anon220
BV_FENC	vim/vim/src/option.h	/^    , BV_FENC$/;"	e	enum:__anon220
BV_FEX	vim/vim/src/option.h	/^    , BV_FEX$/;"	e	enum:__anon220
BV_FF	vim/vim/src/option.h	/^    , BV_FF$/;"	e	enum:__anon220
BV_FIXEOL	vim/vim/src/option.h	/^    , BV_FIXEOL$/;"	e	enum:__anon220
BV_FLP	vim/vim/src/option.h	/^    , BV_FLP$/;"	e	enum:__anon220
BV_FO	vim/vim/src/option.h	/^    , BV_FO$/;"	e	enum:__anon220
BV_FP	vim/vim/src/option.h	/^    , BV_FP$/;"	e	enum:__anon220
BV_FT	vim/vim/src/option.h	/^    , BV_FT$/;"	e	enum:__anon220
BV_GP	vim/vim/src/option.h	/^    , BV_GP$/;"	e	enum:__anon220
BV_IMI	vim/vim/src/option.h	/^    , BV_IMI$/;"	e	enum:__anon220
BV_IMS	vim/vim/src/option.h	/^    , BV_IMS$/;"	e	enum:__anon220
BV_INC	vim/vim/src/option.h	/^    , BV_INC$/;"	e	enum:__anon220
BV_INDE	vim/vim/src/option.h	/^    , BV_INDE$/;"	e	enum:__anon220
BV_INDK	vim/vim/src/option.h	/^    , BV_INDK$/;"	e	enum:__anon220
BV_INEX	vim/vim/src/option.h	/^    , BV_INEX$/;"	e	enum:__anon220
BV_INF	vim/vim/src/option.h	/^    , BV_INF$/;"	e	enum:__anon220
BV_ISK	vim/vim/src/option.h	/^    , BV_ISK$/;"	e	enum:__anon220
BV_KEY	vim/vim/src/option.h	/^    , BV_KEY$/;"	e	enum:__anon220
BV_KMAP	vim/vim/src/option.h	/^    , BV_KMAP$/;"	e	enum:__anon220
BV_KP	vim/vim/src/option.h	/^    , BV_KP$/;"	e	enum:__anon220
BV_LISP	vim/vim/src/option.h	/^    , BV_LISP$/;"	e	enum:__anon220
BV_LW	vim/vim/src/option.h	/^    , BV_LW$/;"	e	enum:__anon220
BV_MA	vim/vim/src/option.h	/^    , BV_MA$/;"	e	enum:__anon220
BV_MENC	vim/vim/src/option.h	/^    , BV_MENC$/;"	e	enum:__anon220
BV_ML	vim/vim/src/option.h	/^    , BV_ML$/;"	e	enum:__anon220
BV_MOD	vim/vim/src/option.h	/^    , BV_MOD$/;"	e	enum:__anon220
BV_MP	vim/vim/src/option.h	/^    , BV_MP$/;"	e	enum:__anon220
BV_MPS	vim/vim/src/option.h	/^    , BV_MPS$/;"	e	enum:__anon220
BV_NF	vim/vim/src/option.h	/^    , BV_NF$/;"	e	enum:__anon220
BV_OFU	vim/vim/src/option.h	/^    , BV_OFU$/;"	e	enum:__anon220
BV_PATH	vim/vim/src/option.h	/^    , BV_PATH$/;"	e	enum:__anon220
BV_PI	vim/vim/src/option.h	/^    , BV_PI$/;"	e	enum:__anon220
BV_QE	vim/vim/src/option.h	/^    , BV_QE$/;"	e	enum:__anon220
BV_RO	vim/vim/src/option.h	/^    , BV_RO$/;"	e	enum:__anon220
BV_SI	vim/vim/src/option.h	/^    , BV_SI$/;"	e	enum:__anon220
BV_SMC	vim/vim/src/option.h	/^    , BV_SMC$/;"	e	enum:__anon220
BV_SN	vim/vim/src/option.h	/^    , BV_SN$/;"	e	enum:__anon220
BV_SPC	vim/vim/src/option.h	/^    , BV_SPC$/;"	e	enum:__anon220
BV_SPF	vim/vim/src/option.h	/^    , BV_SPF$/;"	e	enum:__anon220
BV_SPL	vim/vim/src/option.h	/^    , BV_SPL$/;"	e	enum:__anon220
BV_STS	vim/vim/src/option.h	/^    , BV_STS$/;"	e	enum:__anon220
BV_SUA	vim/vim/src/option.h	/^    , BV_SUA$/;"	e	enum:__anon220
BV_SW	vim/vim/src/option.h	/^    , BV_SW$/;"	e	enum:__anon220
BV_SWF	vim/vim/src/option.h	/^    , BV_SWF$/;"	e	enum:__anon220
BV_SYN	vim/vim/src/option.h	/^    , BV_SYN$/;"	e	enum:__anon220
BV_TAGS	vim/vim/src/option.h	/^    , BV_TAGS$/;"	e	enum:__anon220
BV_TC	vim/vim/src/option.h	/^    , BV_TC$/;"	e	enum:__anon220
BV_TS	vim/vim/src/option.h	/^    , BV_TS$/;"	e	enum:__anon220
BV_TSR	vim/vim/src/option.h	/^    , BV_TSR$/;"	e	enum:__anon220
BV_TW	vim/vim/src/option.h	/^    , BV_TW$/;"	e	enum:__anon220
BV_TX	vim/vim/src/option.h	/^    , BV_TX$/;"	e	enum:__anon220
BV_UDF	vim/vim/src/option.h	/^    , BV_UDF$/;"	e	enum:__anon220
BV_UL	vim/vim/src/option.h	/^    , BV_UL$/;"	e	enum:__anon220
BV_WM	vim/vim/src/option.h	/^    , BV_WM$/;"	e	enum:__anon220
BYTE	vim/vim/src/gui_w32.c	/^typedef int BYTE;$/;"	t	file:
BYTE_STRING_VALUE	vim/vim/src/if_mzsch.h	30;"	d
BYTE_STRING_VALUE	vim/vim/src/if_mzsch.h	44;"	d
BY_FLAGS	vim/vim/src/spellfile.c	257;"	d	file:
BY_FLAGS2	vim/vim/src/spellfile.c	259;"	d	file:
BY_HANDLE_FILE_INFORMATION	vim/vim/src/os_win32.c	/^typedef int BY_HANDLE_FILE_INFORMATION;$/;"	t	file:
BY_INDEX	vim/vim/src/spellfile.c	256;"	d	file:
BY_NOFLAGS	vim/vim/src/spellfile.c	254;"	d	file:
BY_SPECIAL	vim/vim/src/spellfile.c	261;"	d	file:
B_IMODE_IM	vim/vim/src/structs.h	2060;"	d
B_IMODE_LAST	vim/vim/src/structs.h	2058;"	d
B_IMODE_LAST	vim/vim/src/structs.h	2061;"	d
B_IMODE_LMAP	vim/vim/src/structs.h	2056;"	d
B_IMODE_NONE	vim/vim/src/structs.h	2055;"	d
B_IMODE_USE_INSERT	vim/vim/src/structs.h	2054;"	d
B_SPELL	vim/vim/src/structs.h	1766;"	d
B_SPELL	vim/vim/src/structs.h	1768;"	d
BalloonEval	vim/vim/src/gui_beval.h	/^} BalloonEval;$/;"	t	typeref:struct:BalloonEvalStruct
BalloonEval	vim/vim/src/os_mac_conv.c	/^typedef int BalloonEval;    \/* used in header files *\/$/;"	t	file:
BalloonEval	vim/vim/src/proto.h	205;"	d
BalloonEvalStruct	vim/vim/src/gui_beval.h	/^typedef struct BalloonEvalStruct$/;"	s
BalloonEvalStruct::balloonLabel	vim/vim/src/gui_beval.h	/^    GtkWidget		*balloonLabel;$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::balloonShell	vim/vim/src/gui_beval.h	/^    GtkWidget		*balloonShell;$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::clientData	vim/vim/src/gui_beval.h	/^    void		*clientData;	\/* For callback *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::msg	vim/vim/src/gui_beval.h	/^    char_u		*msg;$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::msgCB	vim/vim/src/gui_beval.h	/^    void		(*msgCB)(struct BalloonEvalStruct *, int);$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::screen_height	vim/vim/src/gui_beval.h	/^    Dimension		screen_height;	\/* screen height in pixels *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::screen_width	vim/vim/src/gui_beval.h	/^    Dimension		screen_width;	\/* screen width in pixels *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::showState	vim/vim/src/gui_beval.h	/^    BeState		showState;	\/* tells us whats currently going on *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::state	vim/vim/src/gui_beval.h	/^    unsigned int	state;		\/* Button\/Modifier key state *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::target	vim/vim/src/gui_beval.h	/^    GtkWidget		*target;	\/* widget we are monitoring *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::timerID	vim/vim/src/gui_beval.h	/^    unsigned int	timerID;	\/* timer for run *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::ts	vim/vim/src/gui_beval.h	/^    int			ts;		\/* tabstop setting for this buffer *\/$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::x	vim/vim/src/gui_beval.h	/^    int			x;$/;"	m	struct:BalloonEvalStruct	access:public
BalloonEvalStruct::y	vim/vim/src/gui_beval.h	/^    int			y;$/;"	m	struct:BalloonEvalStruct	access:public
BasePath	vim/vim/runtime/tools/ccfilter.c	/^char	       BasePath[1024];$/;"	v
BeState	vim/vim/src/gui_beval.h	/^} BeState;$/;"	t	typeref:enum:__anon67
BeforeApplicationShutDown	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BeforeApplicationShutDown()$/;"	f	class:CCommands::XApplicationEvents	signature:()
BeforeBuildStart	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BeforeBuildStart()$/;"	f	class:CCommands::XApplicationEvents	signature:()
BeforeDocumentClose	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BeforeDocumentClose(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
BevalTimerId	vim/vim/src/gui_w32.c	/^static UINT_PTR	    BevalTimerId = 0;$/;"	v	file:
BevalTimerProc	vim/vim/src/gui_w32.c	/^BevalTimerProc($/;"	f	file:	signature:( HWND hwnd UNUSED, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED, DWORD dwTime)
BevalTimerProc	vim/vim/src/gui_w32.c	/^static VOID CALLBACK BevalTimerProc(HWND hwnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime);$/;"	p	file:	signature:(HWND hwnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)
Blue	vim/vim/src/gui_mac.c	183;"	d	file:
Bool	vim/vim/src/xpm/include/simx.h	/^typedef BOOL Bool;		\/* take MSW bool *\/$/;"	t
BoolQuery	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^} BoolQuery;$/;"	t	typeref:enum:__anon44	file:
BorderHighlight	vim/vim/src/gui_xmebw.c	/^BorderHighlight(Widget w)$/;"	f	file:	signature:(Widget w)
BorderHighlight	vim/vim/src/gui_xmebw.c	/^static void BorderHighlight(Widget);$/;"	p	file:
BorderUnhighlight	vim/vim/src/gui_xmebw.c	/^BorderUnhighlight(Widget w)$/;"	f	file:	signature:(Widget w)
BorderUnhighlight	vim/vim/src/gui_xmebw.c	/^static void BorderUnhighlight(Widget);$/;"	p	file:
BreakpointHit	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XDebuggerEvents::BreakpointHit(IDispatch * pBreakpoint)$/;"	f	class:CCommands::XDebuggerEvents	signature:(IDispatch * pBreakpoint)
BufMapAsMapping	vim/vim/src/if_py_both.h	/^static PyMappingMethods BufMapAsMapping = {$/;"	v
BufMapItem	vim/vim/src/if_py_both.h	/^BufMapItem(PyObject *self UNUSED, PyObject *keyObject)$/;"	f	signature:(PyObject *self UNUSED, PyObject *keyObject)
BufMapIter	vim/vim/src/if_py_both.h	/^BufMapIter(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
BufMapIterClear	vim/vim/src/if_py_both.h	/^BufMapIterClear(PyObject **buffer)$/;"	f	signature:(PyObject **buffer)
BufMapIterDestruct	vim/vim/src/if_py_both.h	/^BufMapIterDestruct(PyObject *buffer)$/;"	f	signature:(PyObject *buffer)
BufMapIterNext	vim/vim/src/if_py_both.h	/^BufMapIterNext(PyObject **buffer)$/;"	f	signature:(PyObject **buffer)
BufMapIterTraverse	vim/vim/src/if_py_both.h	/^BufMapIterTraverse(PyObject *buffer, visitproc visit, void *arg)$/;"	f	signature:(PyObject *buffer, visitproc visit, void *arg)
BufMapLength	vim/vim/src/if_py_both.h	/^BufMapLength(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
BufMapObject	vim/vim/src/if_py_both.h	/^} BufMapObject;$/;"	t	typeref:struct:__anon113
BufMapType	vim/vim/src/if_py_both.h	/^static PyTypeObject BufMapType;$/;"	v
Buffer	vim/vim/src/os_win32.c	/^    PCHAR_INFO			Buffer;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
BufferAppend	vim/vim/src/if_py_both.h	/^BufferAppend(BufferObject *self, PyObject *args)$/;"	f	signature:(BufferObject *self, PyObject *args)
BufferAsMapping	vim/vim/src/if_py_both.h	/^static PyMappingMethods BufferAsMapping;$/;"	v
BufferAsMapping	vim/vim/src/if_python3.c	/^static PyMappingMethods BufferAsMapping = {$/;"	v	file:
BufferAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods BufferAsSeq;$/;"	v
BufferAsSeq	vim/vim/src/if_python.c	/^static PySequenceMethods BufferAsSeq = {$/;"	v	file:
BufferAsSeq	vim/vim/src/if_python3.c	/^static PySequenceMethods BufferAsSeq = {$/;"	v	file:
BufferAsSubscript	vim/vim/src/if_python3.c	/^BufferAsSubscript(PyObject *self, PyObject* idx, PyObject* val)$/;"	f	file:	signature:(PyObject *self, PyObject* idx, PyObject* val)
BufferAsSubscript	vim/vim/src/if_python3.c	/^static Py_ssize_t BufferAsSubscript(PyObject *self, PyObject *idx, PyObject *val);$/;"	p	file:	signature:(PyObject *self, PyObject *idx, PyObject *val)
BufferAssItem	vim/vim/src/if_python.c	/^BufferAssItem(PyObject *self, PyInt n, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyInt n, PyObject *val)
BufferAssItem	vim/vim/src/if_python.c	/^static PyInt BufferAssItem(PyObject *, PyInt, PyObject *);$/;"	p	file:	signature:(PyObject *, PyInt, PyObject *)
BufferAssSlice	vim/vim/src/if_python.c	/^BufferAssSlice(PyObject *self, PyInt lo, PyInt hi, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyInt lo, PyInt hi, PyObject *val)
BufferAssSlice	vim/vim/src/if_python.c	/^static PyInt BufferAssSlice(PyObject *, PyInt, PyInt, PyObject *);$/;"	p	file:	signature:(PyObject *, PyInt, PyInt, PyObject *)
BufferAttr	vim/vim/src/if_py_both.h	/^BufferAttr(BufferObject *self, char *name)$/;"	f	signature:(BufferObject *self, char *name)
BufferAttrValid	vim/vim/src/if_py_both.h	/^BufferAttrValid(BufferObject *self, char *name)$/;"	f	signature:(BufferObject *self, char *name)
BufferAttrs	vim/vim/src/if_py_both.h	/^static char *BufferAttrs[] = {$/;"	v
BufferDestructor	vim/vim/src/if_py_both.h	/^BufferDestructor(BufferObject *self)$/;"	f	signature:(BufferObject *self)
BufferDir	vim/vim/src/if_py_both.h	/^BufferDir(PyObject *self)$/;"	f	signature:(PyObject *self)
BufferGetattr	vim/vim/src/if_python.c	/^BufferGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
BufferGetattr	vim/vim/src/if_python.c	/^static PyObject *BufferGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
BufferGetattro	vim/vim/src/if_python3.c	/^BufferGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
BufferGetattro	vim/vim/src/if_python3.c	/^static PyObject *BufferGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
BufferItem	vim/vim/src/if_py_both.h	/^BufferItem(BufferObject *self, PyInt n)$/;"	f	signature:(BufferObject *self, PyInt n)
BufferLength	vim/vim/src/if_py_both.h	/^BufferLength(BufferObject *self)$/;"	f	signature:(BufferObject *self)
BufferMark	vim/vim/src/if_py_both.h	/^BufferMark(BufferObject *self, PyObject *pmarkObject)$/;"	f	signature:(BufferObject *self, PyObject *pmarkObject)
BufferMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef BufferMethods[] = {$/;"	v	typeref:struct:PyMethodDef
BufferNew	vim/vim/src/if_py_both.h	/^BufferNew(buf_T *buf)$/;"	f	signature:(buf_T *buf)
BufferNew	vim/vim/src/if_py_both.h	/^static PyObject *BufferNew (buf_T *);$/;"	p	signature:(buf_T *)
BufferObject	vim/vim/src/if_py_both.h	/^} BufferObject;$/;"	t	typeref:struct:__anon111
BufferRange	vim/vim/src/if_py_both.h	/^BufferRange(BufferObject *self, PyObject *args)$/;"	f	signature:(BufferObject *self, PyObject *args)
BufferRepr	vim/vim/src/if_py_both.h	/^BufferRepr(BufferObject *self)$/;"	f	signature:(BufferObject *self)
BufferSetattr	vim/vim/src/if_py_both.h	/^BufferSetattr(BufferObject *self, char *name, PyObject *valObject)$/;"	f	signature:(BufferObject *self, char *name, PyObject *valObject)
BufferSetattro	vim/vim/src/if_python3.c	/^BufferSetattro(PyObject *self, PyObject *nameobj, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj, PyObject *val)
BufferSetattro	vim/vim/src/if_python3.c	/^static int BufferSetattro(PyObject *, PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *, PyObject *)
BufferSize	vim/vim/src/os_win32.c	/^    COORD			BufferSize;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
BufferSlice	vim/vim/src/if_py_both.h	/^BufferSlice(BufferObject *self, PyInt lo, PyInt hi)$/;"	f	signature:(BufferObject *self, PyInt lo, PyInt hi)
BufferSubscript	vim/vim/src/if_python3.c	/^BufferSubscript(PyObject *self, PyObject* idx)$/;"	f	file:	signature:(PyObject *self, PyObject* idx)
BufferSubscript	vim/vim/src/if_python3.c	/^static PyObject* BufferSubscript(PyObject *self, PyObject *idx);$/;"	p	file:	signature:(PyObject *self, PyObject *idx)
BufferType	vim/vim/src/if_py_both.h	/^static PyTypeObject BufferType;$/;"	v
BufferType_Check	vim/vim/src/if_python.c	1232;"	d	file:
BufferType_Check	vim/vim/src/if_python3.c	1146;"	d	file:
BuildFinish	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BuildFinish(long nNumErrors, long nNumWarnings)$/;"	f	class:CCommands::XApplicationEvents	signature:(long nNumErrors, long nNumWarnings)
C1_CSI	vim/vim/src/libvterm/src/vterm_internal.h	/^  C1_CSI = 0x9b,$/;"	e	enum:__anon40
C1_DCS	vim/vim/src/libvterm/src/vterm_internal.h	/^  C1_DCS = 0x90,$/;"	e	enum:__anon40
C1_SS3	vim/vim/src/libvterm/src/vterm_internal.h	/^  C1_SS3 = 0x8f,$/;"	e	enum:__anon40
C1_ST	vim/vim/src/libvterm/src/vterm_internal.h	/^  C1_ST  = 0x9c$/;"	e	enum:__anon40
C2PascalString	vim/vim/src/gui_mac.c	/^C2PascalString(char_u *CString, Str255 *PascalString)$/;"	f	signature:(char_u *CString, Str255 *PascalString)
C2Pascal_save	vim/vim/src/gui_mac.c	/^C2Pascal_save(char_u *Cstring)$/;"	f	signature:(char_u *Cstring)
C2Pascal_save_and_remove_backslash	vim/vim/src/gui_mac.c	/^C2Pascal_save_and_remove_backslash(char_u *Cstring)$/;"	f	signature:(char_u *Cstring)
CALLBACK	vim/vim/src/gui_w32.c	246;"	d	file:
CALLBACK	vim/vim/src/os_mswin.c	/^typedef int CALLBACK;$/;"	t	file:
CAR	vim/vim/src/ascii.h	110;"	d
CAR	vim/vim/src/ascii.h	31;"	d
CARBONGUI_BUNDLE	vim/vim/src/Makefile	/^CARBONGUI_BUNDLE = gui_bundle$/;"	m
CARBONGUI_DEFS	vim/vim/src/Makefile	/^CARBONGUI_DEFS	= -DFEAT_GUI_MAC -fno-common -fpascal-strings \\$/;"	m
CARBONGUI_INSTALL	vim/vim/src/Makefile	/^CARBONGUI_INSTALL = install_macosx$/;"	m
CARBONGUI_IPATH	vim/vim/src/Makefile	/^CARBONGUI_IPATH	= -I. -Iproto$/;"	m
CARBONGUI_LIBS1	vim/vim/src/Makefile	/^CARBONGUI_LIBS1	= -framework Carbon$/;"	m
CARBONGUI_LIBS2	vim/vim/src/Makefile	/^CARBONGUI_LIBS2	=$/;"	m
CARBONGUI_LIBS_DIR	vim/vim/src/Makefile	/^CARBONGUI_LIBS_DIR =$/;"	m
CARBONGUI_MAN_TARGETS	vim/vim/src/Makefile	/^CARBONGUI_MAN_TARGETS =$/;"	m
CARBONGUI_OBJ	vim/vim/src/Makefile	/^CARBONGUI_OBJ	= objects\/gui.o objects\/gui_mac.o$/;"	m
CARBONGUI_SRC	vim/vim/src/Makefile	/^CARBONGUI_SRC	= gui.c gui_mac.c$/;"	m
CARBONGUI_TARGETS	vim/vim/src/Makefile	/^CARBONGUI_TARGETS =$/;"	m
CARBONGUI_TESTARG	vim/vim/src/Makefile	/^CARBONGUI_TESTARG = VIMPROG=..\/$(APPDIR)\/Contents\/MacOS\/$(VIMTARGET)$/;"	m
CARBONGUI_TESTTARGET	vim/vim/src/Makefile	/^CARBONGUI_TESTTARGET = gui$/;"	m
CARDINAL	vim/vim/src/gui_x11.c	1254;"	d	file:
CARDINAL	vim/vim/src/gui_x11.c	1257;"	d	file:
CARDINAL	vim/vim/src/gui_x11.c	1259;"	d	file:
CASEMBC	vim/vim/src/regexp.c	718;"	d	file:
CASEMBC	vim/vim/src/regexp.c	722;"	d	file:
CASE_INSENSITIVE_FILENAME	vim/vim/src/os_amiga.h	13;"	d
CASE_INSENSITIVE_FILENAME	vim/vim/src/os_dos.h	129;"	d
CASE_INSENSITIVE_FILENAME	vim/vim/src/os_mac.h	91;"	d
CASE_INSENSITIVE_FILENAME	vim/vim/src/os_unix.h	40;"	d
CASE_INSENSITIVE_FILENAME	vim/vim/src/os_vms_conf.h	3;"	d
CASE_SCODE	vim/vim/src/VisVim/OleAut.cpp	407;"	d	file:
CAT	vim/vim/src/testdir/Make_ming.mak	/^CAT = cat$/;"	m
CAT	vim/vim/src/testdir/Make_ming.mak	/^CAT = type$/;"	m
CA_COMMAND_BUSY	vim/vim/src/structs.h	2961;"	d
CA_NO_ADJ_OP_END	vim/vim/src/structs.h	2962;"	d
CC	vim/vim/src/GvimExt/Make_bc5.mak	/^CC	= $(BOR)\\bin\\Bcc32$/;"	m
CC	vim/vim/src/Make_bc5.mak	/^CC   = $(BOR)\\BIN\\Bcc32$/;"	m
CC	vim/vim/src/Make_cyg_ming.mak	/^CC := $(CROSS_COMPILE)gcc$/;"	m
CC	vim/vim/src/Make_dice.mak	/^CC = dcc$/;"	m
CC	vim/vim/src/Make_manx.mak	/^CC = cc$/;"	m
CC	vim/vim/src/Make_mint.mak	/^CC = gcc -mint$/;"	m
CC	vim/vim/src/Make_morph.mak	/^CC =		gcc$/;"	m
CC	vim/vim/src/Make_sas.mak	/^CC	= sc$/;"	m
CC	vim/vim/src/Makefile	/^	CC="$(CC) $(OSDEF_CFLAGS)" srcdir=$(srcdir) sh $(srcdir)\/osdef.sh$/;"	m
CC	vim/vim/src/Makefile	/^	cd xxd; CC="$(CC)" CFLAGS="$(CPPFLAGS) $(CFLAGS)" LDFLAGS="$(LDFLAGS)" \\$/;"	m
CC	vim/vim/src/Makefile	/^CC=$/;"	m
CC	vim/vim/src/auto/config.mk	/^CC		= gcc$/;"	m
CC	vim/vim/src/tee/Make_mvc.mak	/^CC=cl$/;"	m
CC	vim/vim/src/tee/Makefile	/^CC=gcc$/;"	m
CC	vim/vim/src/xxd/Make_ming.mak	/^CC = gcc$/;"	m
CC1	vim/vim/src/Make_bc5.mak	/^CC1 = -c$/;"	m
CC2	vim/vim/src/Make_bc5.mak	/^CC2 = -o$/;"	m
CCARG	vim/vim/src/Make_bc5.mak	/^CCARG = +$(OBJDIR)\\bcc.cfg$/;"	m
CCC	vim/vim/src/Makefile	/^CCC = $(CCC_NF) $(ALL_CFLAGS)$/;"	m
CCCTERM	vim/vim/src/Make_cyg_ming.mak	/^CCCTERM = $(CC) -c $(CFLAGS) -Ilibvterm\/include -DINLINE="" -DVSNPRINTF=vim_vsnprintf$/;"	m
CCCTERM	vim/vim/src/Make_mvc.mak	/^CCCTERM = $(CC) $(CFLAGS) -Ilibvterm\/include -DINLINE="" -DVSNPRINTF=vim_vsnprintf$/;"	m
CCCTERM	vim/vim/src/Makefile	/^CCCTERM = $(CCC) -Ilibvterm\/include -DINLINE="" -DVSNPRINTF=vim_vsnprintf$/;"	m
CCC_NF	vim/vim/src/Makefile	/^CCC_NF = $(CC) -c -I$(srcdir)$/;"	m
CCGD_ALLBUF	vim/vim/src/vim.h	1240;"	d
CCGD_AW	vim/vim/src/vim.h	1237;"	d
CCGD_EXCMD	vim/vim/src/vim.h	1241;"	d
CCGD_FORCEIT	vim/vim/src/vim.h	1239;"	d
CCGD_MULTWIN	vim/vim/src/vim.h	1238;"	d
CCM_SETUNICODEFORMAT	vim/vim/src/gui_w32.c	2542;"	d	file:
CCNOSYM	vim/vim/src/Make_manx.mak	/^CCNOSYM = $(CC) $(CFLAGS) -o$/;"	m
CCSYM	vim/vim/src/Make_manx.mak	/^CCSYM = $(CC) $(CFLAGS) -hi$(SYMS) -o$/;"	m
CClink	vim/vim/src/Makefile	/^CClink = $(CC)$/;"	m
CComObjectRoot	vim/vim/src/VisVim/Commands.h	/^	public   CComObjectRoot,$/;"	v
CComObjectRoot	vim/vim/src/VisVim/DSAddIn.h	/^	public   CComObjectRoot,$/;"	v
CCommands	vim/vim/src/VisVim/Commands.cpp	/^CCommands::CCommands()$/;"	f	class:CCommands	signature:()
CCommands	vim/vim/src/VisVim/Commands.h	/^	public   CComCoClass < CCommands,$/;"	v
CCommands::CCommands	vim/vim/src/VisVim/Commands.cpp	/^CCommands::CCommands()$/;"	f	class:CCommands	signature:()
CCommands::SetApplicationObject	vim/vim/src/VisVim/Commands.cpp	/^void CCommands::SetApplicationObject(IApplication * pApplication)$/;"	f	class:CCommands	signature:(IApplication * pApplication)
CCommands::UnadviseFromEvents	vim/vim/src/VisVim/Commands.cpp	/^void CCommands::UnadviseFromEvents()$/;"	f	class:CCommands	signature:()
CCommands::VisVimDialog	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimDialog()$/;"	f	class:CCommands	signature:()
CCommands::VisVimDisable	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimDisable()$/;"	f	class:CCommands	signature:()
CCommands::VisVimEnable	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimEnable()$/;"	f	class:CCommands	signature:()
CCommands::VisVimLoad	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimLoad()$/;"	f	class:CCommands	signature:()
CCommands::VisVimToggle	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimToggle()$/;"	f	class:CCommands	signature:()
CCommands::XApplicationEvents::BeforeApplicationShutDown	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BeforeApplicationShutDown()$/;"	f	class:CCommands::XApplicationEvents	signature:()
CCommands::XApplicationEvents::BeforeBuildStart	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BeforeBuildStart()$/;"	f	class:CCommands::XApplicationEvents	signature:()
CCommands::XApplicationEvents::BeforeDocumentClose	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BeforeDocumentClose(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
CCommands::XApplicationEvents::BuildFinish	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::BuildFinish(long nNumErrors, long nNumWarnings)$/;"	f	class:CCommands::XApplicationEvents	signature:(long nNumErrors, long nNumWarnings)
CCommands::XApplicationEvents::DocumentOpen	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::DocumentOpen(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
CCommands::XApplicationEvents::DocumentSave	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::DocumentSave(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
CCommands::XApplicationEvents::NewDocument	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::NewDocument(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
CCommands::XApplicationEvents::NewWorkspace	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::NewWorkspace()$/;"	f	class:CCommands::XApplicationEvents	signature:()
CCommands::XApplicationEvents::WindowActivate	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WindowActivate(IDispatch * theWindow)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theWindow)
CCommands::XApplicationEvents::WindowDeactivate	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WindowDeactivate(IDispatch * theWindow)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theWindow)
CCommands::XApplicationEvents::WorkspaceClose	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WorkspaceClose()$/;"	f	class:CCommands::XApplicationEvents	signature:()
CCommands::XApplicationEvents::WorkspaceOpen	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WorkspaceOpen()$/;"	f	class:CCommands::XApplicationEvents	signature:()
CCommands::XDebuggerEvents::BreakpointHit	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XDebuggerEvents::BreakpointHit(IDispatch * pBreakpoint)$/;"	f	class:CCommands::XDebuggerEvents	signature:(IDispatch * pBreakpoint)
CCommands::~CCommands	vim/vim/src/VisVim/Commands.cpp	/^CCommands::~CCommands()$/;"	f	class:CCommands	signature:()
CCommandsObj	vim/vim/src/VisVim/Commands.h	/^typedef CComObject < CCommands > CCommandsObj;$/;"	t
CDSAddIn	vim/vim/src/VisVim/DSAddIn.h	/^	public   CComCoClass < CDSAddIn,$/;"	v
CDSAddIn::AddCommand	vim/vim/src/VisVim/DSAddIn.cpp	/^bool CDSAddIn::AddCommand (IApplication* pApp, char* MethodName, char* CmdName,$/;"	f	class:CDSAddIn	signature:(IApplication* pApp, char* MethodName, char* CmdName, UINT StrResId, UINT GlyphIndex, VARIANT_BOOL bFirstTime)
CDSAddIn::OnConnection	vim/vim/src/VisVim/DSAddIn.cpp	/^STDMETHODIMP CDSAddIn::OnConnection (IApplication * pApp, VARIANT_BOOL bFirstTime,$/;"	f	class:CDSAddIn	signature:(IApplication * pApp, VARIANT_BOOL bFirstTime, long dwCookie, VARIANT_BOOL * OnConnection)
CDSAddIn::OnDisconnection	vim/vim/src/VisVim/DSAddIn.cpp	/^STDMETHODIMP CDSAddIn::OnDisconnection (VARIANT_BOOL bLastTime)$/;"	f	class:CDSAddIn	signature:(VARIANT_BOOL bLastTime)
CD_NONE	vim/vim/src/VisVim/Commands.cpp	18;"	d	file:
CD_SOURCE	vim/vim/src/VisVim/Commands.cpp	16;"	d	file:
CD_SOURCE_PARENT	vim/vim/src/VisVim/Commands.cpp	17;"	d	file:
CENT	vim/vim/src/syntax.c	6872;"	d	file:
CENT	vim/vim/src/syntax.c	6874;"	d	file:
CFG	vim/vim/src/Make_dvc.mak	/^CFG=Vim - Win32 IDE for Make_mvc.mak$/;"	m
CFG	vim/vim/src/Make_ivc.mak	/^CFG=Vim - Win32 Release gvim OLE$/;"	m
CFG	vim/vim/src/VisVim/VisVim.mak	/^CFG=VisVim - Win32 Release$/;"	m
CFILES	vim/vim/src/libvterm/Makefile	/^CFILES=$(sort $(wildcard src\/*.c))$/;"	m
CFLAGS	vim/vim/src/Make_bc5.mak	/^CFLAGS = $(CFLAGS) -d -RT- -k- -Oi $(HEADERS) -f-$/;"	m
CFLAGS	vim/vim/src/Make_bc5.mak	/^CFLAGS = -w-aus -w-par -w-pch -w-ngu -w-csu -I$(INCLUDE)$/;"	m
CFLAGS	vim/vim/src/Make_cyg_ming.mak	/^CFLAGS = -Iproto $(DEFINES) -pipe -march=$(ARCH) -Wall$/;"	m
CFLAGS	vim/vim/src/Make_dice.mak	/^CFLAGS = -c -DAMIGA -Iproto $(DEFINES)$/;"	m
CFLAGS	vim/vim/src/Make_manx.mak	/^CFLAGS = $(OPTIONS) -wapruq -ps -qf -Iproto $(DEFINES) -DAMIGA$/;"	m
CFLAGS	vim/vim/src/Make_mint.mak	/^CFLAGS = -g -O -Iproto$/;"	m
CFLAGS	vim/vim/src/Make_morph.mak	/^CFLAGS =	-c						\\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS  = $(CFLAGS) -DFEAT_TCL -DDYNAMIC_TCL -DDYNAMIC_TCL_DLL=\\"$(TCL_DLL)\\" \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS  = $(CFLAGS) -DFEAT_TCL$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) $(DIRECTX_DEFS)$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) $(OPTFLAG) -DNDEBUG $(CPUARG)$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_GETTEXT$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_ICONV$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_IME$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_LUA \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_MZSCHEME$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_PERL -DDYNAMIC_PERL_DLL=\\"$(PERL_DLL)\\"$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_PYTHON \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_PYTHON3 \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DDYNAMIC_RUBY -DDYNAMIC_RUBY_VER=$(RUBY_VER) \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_$(FEATURES)$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_GUI_W32$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_LUA$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_MBYTE$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_MBYTE_IME$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_MZSCHEME -I "$(MZSCHEME)\\include"$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_OLE$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_PERL -DPERL_IMPLICIT_CONTEXT -DPERL_IMPLICIT_SYS$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_PYTHON$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_PYTHON3$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DFEAT_RUBY$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DGLOBAL_IME$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DHAVE_STDINT_H$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DMSWINPS$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DMZSCHEME_FORCE_GC$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -DMZ_PRECISE_GC$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) -D_DEBUG -DDEBUG \/Od$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \/Fd$(OUTDIR)\/ $(DEBUGINFO)$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \/MD$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \/MDd$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \/MP$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \/Zl \/MT$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \/Zl \/MTd$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = $(CFLAGS) \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS = -c \/W3 \/nologo $(CVARS) -I. -Iproto -DHAVE_PATHDEF -DWIN32 \\$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS=$(CFLAGS) $(WP64CHECK)$/;"	m
CFLAGS	vim/vim/src/Make_mvc.mak	/^CFLAGS=$(CFLAGS) \/analyze$/;"	m
CFLAGS	vim/vim/src/Make_sas.mak	/^CFLAGS  = NOLINK $(DBG) CPU=$(CPU) NOSTACKCHECK DEF=AMIGA CODE=FAR idir=proto ignore=317$/;"	m
CFLAGS	vim/vim/src/auto/config.mk	/^CFLAGS		= -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1$/;"	m
CFLAGS	vim/vim/src/tee/Make_mvc.mak	/^CFLAGS=\/O2 \/nologo$/;"	m
CFLAGS	vim/vim/src/tee/Makefile	/^CFLAGS=-O2 -fno-strength-reduce$/;"	m
CFLAGS	vim/vim/src/xxd/Make_amiga.mak	/^CFLAGS = $(OPTIONS) -wapruq -ps -qf -DAMIGA -Dconst=$/;"	m
CFLAGS	vim/vim/src/xxd/Make_ming.mak	/^CFLAGS = -O2 -Wall -DWIN32 $(DEFINES)$/;"	m
CFLAGS2	vim/vim/src/Make_sas.mak	/^CFLAGS2 = $(OPTIMIZE) $(ERROR) GSTIMMEDIATE GST=$(GST)$/;"	m
CFLAGS3	vim/vim/src/Make_sas.mak	/^CFLAGS3 = $(COPTS) STRINGMERGE MEMSIZE=$(MEMSIZE)$/;"	m
CFLAGS4	vim/vim/src/Make_sas.mak	/^CFLAGS4 = $(DEFINES) DATAMEMORY=$(MEMORYTYPE)$/;"	m
CFLAGS_OUTDIR	vim/vim/src/Make_mvc.mak	/^CFLAGS_OUTDIR=$(CFLAGS) \/Fo$(OUTDIR)\/$/;"	m
CFStringRef	vim/vim/src/os_mac_conv.c	/^typedef int CFStringRef;$/;"	t	file:
CF_UPPER	vim/vim/src/spellfile.c	295;"	d	file:
CF_WORD	vim/vim/src/spellfile.c	294;"	d	file:
CHANGEDTICK	vim/vim/src/structs.h	1947;"	d
CHANNEL	vim/vim/src/Make_bc5.mak	/^CHANNEL = yes$/;"	m
CHANNEL	vim/vim/src/Make_cyg_ming.mak	/^CHANNEL=$(GUI)$/;"	m
CHANNEL	vim/vim/src/Make_cyg_ming.mak	/^CHANNEL=yes$/;"	m
CHANNEL	vim/vim/src/Make_mvc.mak	/^CHANNEL = $(GUI)$/;"	m
CHANNEL	vim/vim/src/Make_mvc.mak	/^CHANNEL = yes$/;"	m
CHANNEL_DEFS	vim/vim/src/Make_mvc.mak	/^CHANNEL_DEFS	= -DFEAT_JOB_CHANNEL$/;"	m
CHANNEL_OBJ	vim/vim/src/Make_mvc.mak	/^CHANNEL_OBJ	= $(OBJDIR)\/channel.obj$/;"	m
CHANNEL_OBJ	vim/vim/src/auto/config.mk	/^CHANNEL_OBJ	= objects\/channel.o$/;"	m
CHANNEL_PRO	vim/vim/src/Make_mvc.mak	/^CHANNEL_PRO	= proto\/channel.pro$/;"	m
CHANNEL_SRC	vim/vim/src/auto/config.mk	/^CHANNEL_SRC	= channel.c$/;"	m
CHAR_CELLS	vim/vim/src/screen.c	6031;"	d	file:
CHAR_CLASS	vim/vim/src/ui.c	1349;"	d	file:
CHE	vim/vim/src/farsi.h	117;"	d
CHECK	vim/vim/src/memline.c	12;"	d	file:
CHECKFILES	vim/vim/src/po/Makefile	/^CHECKFILES = \\$/;"	m
CHECK_CMDWIN	vim/vim/src/window.c	113;"	d	file:
CHECK_DOUBLE_CLICK	vim/vim/src/vim.h	1919;"	d
CHECK_INODE	vim/vim/src/os_unix.h	408;"	d
CHECK_PATH	vim/vim/src/vim.h	889;"	d
CHECK_REG_ERROR	vim/vim/src/dosinst.c	23;"	d	file:
CH_ERR_FD	vim/vim/src/structs.h	1549;"	d
CH_HAS_GUI	vim/vim/src/channel.c	19;"	d	file:
CH_IN_FD	vim/vim/src/structs.h	1551;"	d
CH_JSON_MAX_ARGS	vim/vim/src/channel.c	2179;"	d	file:
CH_OUT_FD	vim/vim/src/structs.h	1547;"	d
CH_SOCK_FD	vim/vim/src/structs.h	1544;"	d
CLASS_AF	vim/vim/src/regexp_nfa.c	596;"	d	file:
CLASS_ALNUM	vim/vim/src/regexp.c	464;"	d	file:
CLASS_ALPHA	vim/vim/src/regexp.c	466;"	d	file:
CLASS_AZ	vim/vim/src/regexp_nfa.c	598;"	d	file:
CLASS_BACKSPACE	vim/vim/src/regexp.c	492;"	d	file:
CLASS_BLANK	vim/vim/src/regexp.c	468;"	d	file:
CLASS_CNTRL	vim/vim/src/regexp.c	470;"	d	file:
CLASS_DIGIT	vim/vim/src/regexp.c	472;"	d	file:
CLASS_ESCAPE	vim/vim/src/regexp.c	494;"	d	file:
CLASS_GRAPH	vim/vim/src/regexp.c	474;"	d	file:
CLASS_LOWER	vim/vim/src/regexp.c	476;"	d	file:
CLASS_NONE	vim/vim/src/regexp.c	496;"	d	file:
CLASS_PRINT	vim/vim/src/regexp.c	478;"	d	file:
CLASS_PUNCT	vim/vim/src/regexp.c	480;"	d	file:
CLASS_RETURN	vim/vim/src/regexp.c	490;"	d	file:
CLASS_SPACE	vim/vim/src/regexp.c	482;"	d	file:
CLASS_TAB	vim/vim/src/regexp.c	488;"	d	file:
CLASS_UPPER	vim/vim/src/regexp.c	484;"	d	file:
CLASS_XDIGIT	vim/vim/src/regexp.c	486;"	d	file:
CLASS_af	vim/vim/src/regexp_nfa.c	595;"	d	file:
CLASS_az	vim/vim/src/regexp_nfa.c	597;"	d	file:
CLASS_not	vim/vim/src/regexp_nfa.c	594;"	d	file:
CLASS_o7	vim/vim/src/regexp_nfa.c	599;"	d	file:
CLASS_o9	vim/vim/src/regexp_nfa.c	600;"	d	file:
CLASS_underscore	vim/vim/src/regexp_nfa.c	601;"	d	file:
CLEAR	vim/vim/src/vim.h	642;"	d
CLEAR_POS	vim/vim/src/macros.h	36;"	d
CLEAR_POS	vim/vim/src/macros.h	43;"	d
CLIP_CLEAR	vim/vim/src/ui.c	688;"	d	file:
CLIP_SET	vim/vim/src/ui.c	689;"	d	file:
CLIP_TOGGLE	vim/vim/src/ui.c	690;"	d	file:
CLIP_TYPE_TEXT	vim/vim/src/os_qnx.c	37;"	d	file:
CLIP_TYPE_VIM	vim/vim/src/os_qnx.c	36;"	d	file:
CLIP_UNNAMED	vim/vim/src/globals.h	529;"	d
CLIP_UNNAMED_PLUS	vim/vim/src/globals.h	530;"	d
CLSID	vim/vim/src/iid_ole.c	/^typedef IID CLSID;$/;"	t	file:
CLSID_DEFINED	vim/vim/src/iid_ole.c	43;"	d	file:
CLSID_Vim	vim/vim/src/if_ole.h	/^EXTERN_C const CLSID CLSID_Vim;$/;"	v
CLSID_Vim	vim/vim/src/iid_ole.c	/^const CLSID CLSID_Vim = {0x0F0BFAE1,0x4C90,0x11d1,{0x82,0xD7,0x00,0x04,0xAC,0x36,0x85,0x19}};$/;"	v
CLUSTER_ADD	vim/vim/src/syntax.c	225;"	d	file:
CLUSTER_REPLACE	vim/vim/src/syntax.c	224;"	d	file:
CLUSTER_SUBTRACT	vim/vim/src/syntax.c	226;"	d	file:
CMDBUFFSIZE	vim/vim/src/os_mac.h	227;"	d
CMDBUFFSIZE	vim/vim/src/os_unix.h	399;"	d
CMDBUFFSIZE	vim/vim/src/os_win32.h	112;"	d
CMDBUFFSIZE	vim/vim/src/vim.h	1519;"	d
CMDBUFSIZ	vim/vim/src/integration.c	90;"	d	file:
CMDLINE	vim/vim/src/vim.h	700;"	d
CMDWIN	vim/vim/src/ex_cmds.h	54;"	d
CMD_BACKTRACE	vim/vim/src/ex_cmds2.c	105;"	d	file:
CMD_CONT	vim/vim/src/ex_cmds2.c	99;"	d	file:
CMD_DOWN	vim/vim/src/ex_cmds2.c	108;"	d	file:
CMD_FINISH	vim/vim/src/ex_cmds2.c	102;"	d	file:
CMD_FRAME	vim/vim/src/ex_cmds2.c	106;"	d	file:
CMD_INTERRUPT	vim/vim/src/ex_cmds2.c	104;"	d	file:
CMD_NEXT	vim/vim/src/ex_cmds2.c	100;"	d	file:
CMD_QUIT	vim/vim/src/ex_cmds2.c	103;"	d	file:
CMD_STEP	vim/vim/src/ex_cmds2.c	101;"	d	file:
CMD_UP	vim/vim/src/ex_cmds2.c	107;"	d	file:
CMP_INTERNAL	vim/vim/src/option.h	396;"	d
CMP_KEEPASCII	vim/vim/src/option.h	397;"	d
CMainDialog	vim/vim/src/VisVim/Commands.cpp	/^	CMainDialog(CWnd * pParent = NULL);	\/\/ Standard constructor$/;"	p	class:CMainDialog	file:	access:public	signature:(CWnd * pParent = NULL)
CMainDialog	vim/vim/src/VisVim/Commands.cpp	/^CMainDialog::CMainDialog(CWnd * pParent \/* =NULL *\/ )$/;"	f	class:CMainDialog	signature:(CWnd * pParent )
CMainDialog	vim/vim/src/VisVim/Commands.cpp	/^class CMainDialog : public CDialog$/;"	c	file:	inherits:CDialog
CMainDialog::CMainDialog	vim/vim/src/VisVim/Commands.cpp	/^	CMainDialog(CWnd * pParent = NULL);	\/\/ Standard constructor$/;"	p	class:CMainDialog	file:	access:public	signature:(CWnd * pParent = NULL)
CMainDialog::CMainDialog	vim/vim/src/VisVim/Commands.cpp	/^CMainDialog::CMainDialog(CWnd * pParent \/* =NULL *\/ )$/;"	f	class:CMainDialog	signature:(CWnd * pParent )
CMainDialog::DoDataExchange	vim/vim/src/VisVim/Commands.cpp	/^	virtual void DoDataExchange(CDataExchange * pDX);	\/\/ DDX\/DDV support$/;"	p	class:CMainDialog	file:	access:protected	signature:(CDataExchange * pDX)
CMainDialog::DoDataExchange	vim/vim/src/VisVim/Commands.cpp	/^void CMainDialog::DoDataExchange(CDataExchange * pDX)$/;"	f	class:CMainDialog	signature:(CDataExchange * pDX)
CMainDialog::IDD	vim/vim/src/VisVim/Commands.cpp	/^	enum { IDD = IDD_ADDINMAIN };$/;"	e	enum:CMainDialog::__anon231	file:
CMainDialog::OnDisable	vim/vim/src/VisVim/Commands.cpp	/^	afx_msg void OnDisable();$/;"	p	class:CMainDialog	file:	access:protected	signature:()
CMainDialog::OnEnable	vim/vim/src/VisVim/Commands.cpp	/^	afx_msg void OnEnable();$/;"	p	class:CMainDialog	file:	access:protected	signature:()
CMainDialog::m_ChangeDir	vim/vim/src/VisVim/Commands.cpp	/^	int	m_ChangeDir;$/;"	m	class:CMainDialog	file:	access:public
CMainDialog::m_bDevStudioEditor	vim/vim/src/VisVim/Commands.cpp	/^	BOOL	m_bDevStudioEditor;$/;"	m	class:CMainDialog	file:	access:public
CMainDialog::m_bNewTabs	vim/vim/src/VisVim/Commands.cpp	/^	BOOL	m_bNewTabs;$/;"	m	class:CMainDialog	file:	access:public
CNT	vim/vim/src/spell.c	8025;"	d	file:
COBJMACROS	vim/vim/src/os_win32.h	100;"	d
COCU_ALL	vim/vim/src/option.h	191;"	d
CODEC_ERROR_HANDLER	vim/vim/src/if_python3.c	86;"	d	file:
CODEC_ERROR_HANDLER	vim/vim/src/if_python3.c	88;"	d	file:
CODEGUARD_FLAG	vim/vim/src/Make_bc5.mak	/^CODEGUARD_FLAG = -vG$/;"	m
COLORREF	vim/vim/src/os_mswin.c	/^typedef int COLORREF;$/;"	t	file:
COLORREF	vim/vim/src/os_win32.c	/^typedef int COLORREF;$/;"	t	file:
COLS	vim/vim/src/xxd/xxd.c	206;"	d	file:
COLSOURCE	vim/vim/src/Makefile	/^COLSOURCE = ..\/runtime\/colors$/;"	m
COLSUBDIR	vim/vim/src/Makefile	/^COLSUBDIR = \/colors$/;"	m
COLSUBLOC	vim/vim/src/Makefile	/^COLSUBLOC	= $(VIMRTLOC)$(COLSUBDIR)$/;"	m
COL_RULER	vim/vim/src/option.c	10369;"	d	file:
COMMA	vim/vim/src/vim.h	1789;"	d
COMMENT_FARSI	vim/vim/Makefile	/^COMMENT_FARSI = comment\/$(VERSION)-farsi$/;"	m
COMMENT_GVIM	vim/vim/Makefile	/^COMMENT_GVIM = comment\/$(VERSION)-bin-gvim$/;"	m
COMMENT_HTML	vim/vim/Makefile	/^COMMENT_HTML = comment\/$(VERSION)-html$/;"	m
COMMENT_OLE	vim/vim/Makefile	/^COMMENT_OLE = comment\/$(VERSION)-bin-ole$/;"	m
COMMENT_RT	vim/vim/Makefile	/^COMMENT_RT = comment\/$(VERSION)-rt$/;"	m
COMMENT_SRC	vim/vim/Makefile	/^COMMENT_SRC = comment\/$(VERSION)-src$/;"	m
COMMENT_W32	vim/vim/Makefile	/^COMMENT_W32 = comment\/$(VERSION)-bin-w32$/;"	m
COMPILEDBY	vim/vim/src/auto/config.mk	/^COMPILEDBY	= $/;"	m
COMPILER_AIX	vim/vim/runtime/tools/ccfilter.c	37;"	d	file:
COMPILER_ATT	vim/vim/runtime/tools/ccfilter.c	38;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	57;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	59;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	61;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	63;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	65;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	67;"	d	file:
COMPILER_DEFAULT	vim/vim/runtime/tools/ccfilter.c	69;"	d	file:
COMPILER_GCC	vim/vim/runtime/tools/ccfilter.c	36;"	d	file:
COMPILER_HPUX	vim/vim/runtime/tools/ccfilter.c	41;"	d	file:
COMPILER_IRIX	vim/vim/runtime/tools/ccfilter.c	39;"	d	file:
COMPILER_Names	vim/vim/runtime/tools/ccfilter.c	/^char	*COMPILER_Names[][2] =$/;"	v
COMPILER_QTY	vim/vim/runtime/tools/ccfilter.c	54;"	d	file:
COMPILER_SOLARIS	vim/vim/runtime/tools/ccfilter.c	40;"	d	file:
COMPILER_UNKNOWN	vim/vim/runtime/tools/ccfilter.c	35;"	d	file:
COMPOSITIONFORM	vim/vim/src/gui_w32.c	/^} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;$/;"	t	typeref:struct:tagCOMPOSITIONFORM	file:
COMPSOURCE	vim/vim/src/Makefile	/^COMPSOURCE = ..\/runtime\/compiler$/;"	m
COMPSUBDIR	vim/vim/src/Makefile	/^COMPSUBDIR = \/compiler$/;"	m
COMPSUBLOC	vim/vim/src/Makefile	/^COMPSUBLOC	= $(VIMRTLOC)$(COMPSUBDIR)$/;"	m
COMP_CHECKCASE	vim/vim/src/spell.h	191;"	d
COMP_CHECKDUP	vim/vim/src/spell.h	189;"	d
COMP_CHECKREP	vim/vim/src/spell.h	190;"	d
COMP_CHECKTRIPLE	vim/vim/src/spell.h	192;"	d
COM_ALL	vim/vim/src/option.h	251;"	d
COM_AUTO_END	vim/vim/src/option.h	246;"	d
COM_BLANK	vim/vim/src/option.h	242;"	d
COM_END	vim/vim/src/option.h	245;"	d
COM_FIRST	vim/vim/src/option.h	247;"	d
COM_LEFT	vim/vim/src/option.h	248;"	d
COM_MAX_LEN	vim/vim/src/option.h	252;"	d
COM_MIDDLE	vim/vim/src/option.h	244;"	d
COM_NEST	vim/vim/src/option.h	241;"	d
COM_NOBACK	vim/vim/src/option.h	250;"	d
COM_RIGHT	vim/vim/src/option.h	249;"	d
COM_START	vim/vim/src/option.h	243;"	d
CONDIT_AFF	vim/vim/src/spellfile.c	2042;"	d	file:
CONDIT_CFIX	vim/vim/src/spellfile.c	2040;"	d	file:
CONDIT_COMB	vim/vim/src/spellfile.c	2039;"	d	file:
CONDIT_SUF	vim/vim/src/spellfile.c	2041;"	d	file:
CONFIRM	vim/vim/src/vim.h	720;"	d
CONSOLE_CURSOR_INFO	vim/vim/src/os_mswin.c	/^typedef int CONSOLE_CURSOR_INFO;$/;"	t	file:
CONSOLE_CURSOR_INFO	vim/vim/src/os_win32.c	/^typedef int CONSOLE_CURSOR_INFO;$/;"	t	file:
CONST	vim/vim/src/gui_w32.c	247;"	d	file:
CONST84	vim/vim/src/if_tcl.c	111;"	d	file:
CONT_ADDING	vim/vim/src/globals.h	132;"	d
CONT_INTRPT	vim/vim/src/globals.h	133;"	d
CONT_LOCAL	vim/vim/src/globals.h	140;"	d
CONT_N_ADDS	vim/vim/src/globals.h	135;"	d
CONT_SOL	vim/vim/src/globals.h	138;"	d
CONT_S_IPOS	vim/vim/src/globals.h	136;"	d
CONV	vim/vim/src/gui_gtk.c	2163;"	d	file:
CONV	vim/vim/src/gui_gtk.c	2623;"	d	file:
CONVERTED	vim/vim/runtime/doc/Makefile	/^CONVERTED = \\$/;"	m
CONVERTED	vim/vim/src/po/Makefile	/^CONVERTED = \\$/;"	m
CONVERT_FROM_UTF8	vim/vim/src/gui.h	528;"	d
CONVERT_FROM_UTF8	vim/vim/src/gui.h	541;"	d
CONVERT_FROM_UTF8_FREE	vim/vim/src/gui.h	533;"	d
CONVERT_FROM_UTF8_FREE	vim/vim/src/gui.h	542;"	d
CONVERT_TO_UTF8	vim/vim/src/gui.h	518;"	d
CONVERT_TO_UTF8	vim/vim/src/gui.h	539;"	d
CONVERT_TO_UTF8_FREE	vim/vim/src/gui.h	523;"	d
CONVERT_TO_UTF8_FREE	vim/vim/src/gui.h	540;"	d
CONV_9_TO_UTF8	vim/vim/src/structs.h	1057;"	d
CONV_CODEPAGE	vim/vim/src/structs.h	1062;"	d
CONV_ICONV	vim/vim/src/structs.h	1060;"	d
CONV_LATIN1_MAC	vim/vim/src/structs.h	1066;"	d
CONV_MAC_LATIN1	vim/vim/src/structs.h	1065;"	d
CONV_MAC_UTF8	vim/vim/src/structs.h	1067;"	d
CONV_NONE	vim/vim/src/structs.h	1055;"	d
CONV_RESTLEN	vim/vim/src/fileio.c	83;"	d	file:
CONV_TO_LATIN1	vim/vim/src/structs.h	1058;"	d
CONV_TO_LATIN9	vim/vim/src/structs.h	1059;"	d
CONV_TO_UTF8	vim/vim/src/structs.h	1056;"	d
CONV_UTF8_MAC	vim/vim/src/structs.h	1068;"	d
CON_LIB	vim/vim/src/Make_mvc.mak	/^CON_LIB = $(CON_LIB) \/DELAYLOAD:comdlg32.dll \/DELAYLOAD:ole32.dll DelayImp.lib$/;"	m
CON_LIB	vim/vim/src/Make_mvc.mak	/^CON_LIB = oldnames.lib kernel32.lib advapi32.lib shell32.lib gdi32.lib \\$/;"	m
COORD	vim/vim/src/os_mswin.c	/^typedef int COORD;$/;"	t	file:
COORD	vim/vim/src/os_win32.c	/^typedef int COORD;$/;"	t	file:
COPTS	vim/vim/src/Make_sas.mak	/^COPTS	= SINT SCODE SDATA$/;"	m
COPYDATA_ENCODING	vim/vim/src/os_mswin.c	1980;"	d	file:
COPYDATA_ERROR_RESULT	vim/vim/src/os_mswin.c	1979;"	d	file:
COPYDATA_EXPR	vim/vim/src/os_mswin.c	1977;"	d	file:
COPYDATA_KEYS	vim/vim/src/os_mswin.c	1975;"	d	file:
COPYDATA_REPLY	vim/vim/src/os_mswin.c	1976;"	d	file:
COPYDATA_RESULT	vim/vim/src/os_mswin.c	1978;"	d	file:
COPYID_INC	vim/vim/src/vim.h	2471;"	d
COPYID_MASK	vim/vim/src/vim.h	2472;"	d
COUNT	vim/vim/src/ex_cmds.h	44;"	d
COleAutomationControl	vim/vim/src/VisVim/OleAut.cpp	/^COleAutomationControl::COleAutomationControl ()$/;"	f	class:COleAutomationControl	signature:()
COleAutomationControl::COleAutomationControl	vim/vim/src/VisVim/OleAut.cpp	/^COleAutomationControl::COleAutomationControl ()$/;"	f	class:COleAutomationControl	signature:()
COleAutomationControl::CreateObject	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::CreateObject (char* ProgId)$/;"	f	class:COleAutomationControl	signature:(char* ProgId)
COleAutomationControl::DeleteObject	vim/vim/src/VisVim/OleAut.cpp	/^void COleAutomationControl::DeleteObject ()$/;"	f	class:COleAutomationControl	signature:()
COleAutomationControl::ErrDiag	vim/vim/src/VisVim/OleAut.cpp	/^void COleAutomationControl::ErrDiag ()$/;"	f	class:COleAutomationControl	signature:()
COleAutomationControl::GetDispatchId	vim/vim/src/VisVim/OleAut.cpp	/^DISPID COleAutomationControl::GetDispatchId (char* Name)$/;"	f	class:COleAutomationControl	signature:(char* Name)
COleAutomationControl::GetProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::GetProperty (DISPID DispatchId)$/;"	f	class:COleAutomationControl	signature:(DISPID DispatchId)
COleAutomationControl::GetProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::GetProperty (char* Name)$/;"	f	class:COleAutomationControl	signature:(char* Name)
COleAutomationControl::Invoke	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Invoke (WORD Flags, DISPID DispatchId,$/;"	f	class:COleAutomationControl	signature:(WORD Flags, DISPID DispatchId, LPCTSTR Format, va_list ArgList)
COleAutomationControl::Invoke	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Invoke (WORD Flags, char* Name,$/;"	f	class:COleAutomationControl	signature:(WORD Flags, char* Name, LPCTSTR Format, va_list ArgList)
COleAutomationControl::Method	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Method (DISPID DispatchId, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(DISPID DispatchId, LPCTSTR Format, ...)
COleAutomationControl::Method	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Method (char* Name, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(char* Name, LPCTSTR Format, ...)
COleAutomationControl::PutProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::PutProperty (DISPID DispatchId, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(DISPID DispatchId, LPCTSTR Format, ...)
COleAutomationControl::PutProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::PutProperty (char* Name, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(char* Name, LPCTSTR Format, ...)
COleAutomationControl::~COleAutomationControl	vim/vim/src/VisVim/OleAut.cpp	/^COleAutomationControl::~COleAutomationControl ()$/;"	f	class:COleAutomationControl	signature:()
CP	vim/vim/src/po/Make_cyg.mak	/^CP = cp -f$/;"	m
CP	vim/vim/src/po/Make_ming.mak	/^CP = copy$/;"	m
CP	vim/vim/src/po/Make_mvc.mak	/^CP = copy$/;"	m
CP	vim/vim/src/testdir/Make_ming.mak	/^CP = copy$/;"	m
CP	vim/vim/src/testdir/Make_ming.mak	/^CP = cp$/;"	m
CPO_ALL	vim/vim/src/option.h	174;"	d
CPO_ALTREAD	vim/vim/src/option.h	110;"	d
CPO_ALTWRITE	vim/vim/src/option.h	111;"	d
CPO_BACKSL	vim/vim/src/option.h	167;"	d
CPO_BACKSPACE	vim/vim/src/option.h	146;"	d
CPO_BAR	vim/vim/src/option.h	112;"	d
CPO_BSLASH	vim/vim/src/option.h	113;"	d
CPO_BUFOPT	vim/vim/src/option.h	142;"	d
CPO_BUFOPTGLOB	vim/vim/src/option.h	143;"	d
CPO_CHDIR	vim/vim/src/option.h	168;"	d
CPO_CONCAT	vim/vim/src/option.h	115;"	d
CPO_CW	vim/vim/src/option.h	147;"	d
CPO_DIGRAPH	vim/vim/src/option.h	117;"	d
CPO_DOLLAR	vim/vim/src/option.h	153;"	d
CPO_DOTTAG	vim/vim/src/option.h	116;"	d
CPO_EMPTYREGION	vim/vim/src/option.h	119;"	d
CPO_ENDOFSENT	vim/vim/src/option.h	127;"	d
CPO_ESC	vim/vim/src/option.h	149;"	d
CPO_EXECBUF	vim/vim/src/option.h	118;"	d
CPO_FILTER	vim/vim/src/option.h	154;"	d
CPO_FNAMEAPP	vim/vim/src/option.h	138;"	d
CPO_FNAMER	vim/vim/src/option.h	120;"	d
CPO_FNAMEW	vim/vim/src/option.h	121;"	d
CPO_FWRITE	vim/vim/src/option.h	148;"	d
CPO_GOTO1	vim/vim/src/option.h	122;"	d
CPO_HASH	vim/vim/src/option.h	162;"	d
CPO_INDENT	vim/vim/src/option.h	125;"	d
CPO_INSEND	vim/vim/src/option.h	123;"	d
CPO_INTMOD	vim/vim/src/option.h	124;"	d
CPO_JOINCOL	vim/vim/src/option.h	139;"	d
CPO_JOINSP	vim/vim/src/option.h	126;"	d
CPO_KEEPRO	vim/vim/src/option.h	152;"	d
CPO_KEYCODE	vim/vim/src/option.h	128;"	d
CPO_KOFFSET	vim/vim/src/option.h	129;"	d
CPO_LINEOFF	vim/vim/src/option.h	135;"	d
CPO_LISP	vim/vim/src/option.h	137;"	d
CPO_LISTWM	vim/vim/src/option.h	131;"	d
CPO_LITERAL	vim/vim/src/option.h	130;"	d
CPO_MATCH	vim/vim/src/option.h	155;"	d
CPO_MATCHBSL	vim/vim/src/option.h	133;"	d
CPO_MINUS	vim/vim/src/option.h	158;"	d
CPO_NUMCOL	vim/vim/src/option.h	134;"	d
CPO_OVERNEW	vim/vim/src/option.h	136;"	d
CPO_PARA	vim/vim/src/option.h	163;"	d
CPO_PLUS	vim/vim/src/option.h	157;"	d
CPO_PRESERVE	vim/vim/src/option.h	165;"	d
CPO_REDO	vim/vim/src/option.h	140;"	d
CPO_REGAPPEND	vim/vim/src/option.h	160;"	d
CPO_REMMARK	vim/vim/src/option.h	141;"	d
CPO_REPLCNT	vim/vim/src/option.h	150;"	d
CPO_SCOLON	vim/vim/src/option.h	169;"	d
CPO_SEARCH	vim/vim/src/option.h	114;"	d
CPO_SHOWMATCH	vim/vim/src/option.h	132;"	d
CPO_SPECI	vim/vim/src/option.h	159;"	d
CPO_STAR	vim/vim/src/option.h	156;"	d
CPO_SUBPERCENT	vim/vim/src/option.h	166;"	d
CPO_TAGPAT	vim/vim/src/option.h	144;"	d
CPO_TSIZE	vim/vim/src/option.h	164;"	d
CPO_UNDO	vim/vim/src/option.h	145;"	d
CPO_VI	vim/vim/src/option.h	173;"	d
CPO_VIM	vim/vim/src/option.h	172;"	d
CPO_YANK	vim/vim/src/option.h	151;"	d
CPP	vim/vim/src/Make_dvc.mak	/^CPP=cl.exe$/;"	m
CPP	vim/vim/src/Make_ivc.mak	/^CPP=cl.exe$/;"	m
CPP	vim/vim/src/VisVim/VisVim.mak	/^CPP=cl.exe$/;"	m
CPP	vim/vim/src/auto/config.mk	/^CPP		= gcc -E$/;"	m
CPPFLAGS	vim/vim/src/auto/config.mk	/^CPPFLAGS	= $/;"	m
CPP_DEPEND	vim/vim/src/Makefile	/^CPP_DEPEND = $(CC) -I$(srcdir) -M$(CPP_MM) \\$/;"	m
CPP_MM	vim/vim/src/auto/config.mk	/^CPP_MM		= M$/;"	m
CPP_OBJS	vim/vim/src/VisVim/VisVim.mak	/^CPP_OBJS=.\\Debug\/$/;"	m
CPP_OBJS	vim/vim/src/VisVim/VisVim.mak	/^CPP_OBJS=.\\Release\/$/;"	m
CPP_PROJ	vim/vim/src/Make_dvc.mak	/^CPP_PROJ=\/nologo \/ML \/c$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ= \/nologo \/MT \/W3 \/GX \/I ".\\proto" \/D "WIN32" \/c$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ=$(CPP_PROJ) \/Zi \/O2 \/D "NDEBUG" \/D "FEAT_GUI_W32" \/D "DYNAMIC_GETTEXT" \/D "FEAT_OLE" \/Fd.\\oleRel\/ \/Fo.\\oleRel\/$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ=$(CPP_PROJ) \/Zi \/O2 \/D "NDEBUG" \/D "FEAT_GUI_W32" \/Fd.\\gRel\/ \/Fo.\\gRel\/$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ=$(CPP_PROJ) \/Zi \/O2 \/D "NDEBUG" \/Fd.\\Rel\/ \/Fo.\\Rel\/$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ=$(CPP_PROJ) \/Zi \/Od \/D "_DEBUG" \/D "FEAT_GUI_W32" \/D "DYNAMIC_GETTEXT" \/D "FEAT_OLE" \/Fd.\\oleDbg\/ \/Fo.\\oleDbg\/$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ=$(CPP_PROJ) \/Zi \/Od \/D "_DEBUG" \/D "FEAT_GUI_W32" \/Fd.\\gDbg\/ \/Fo.\\gDbg\/$/;"	m
CPP_PROJ	vim/vim/src/Make_ivc.mak	/^CPP_PROJ=$(CPP_PROJ) \/Zi \/Od \/D "_DEBUG" \/Fd.\\Dbg\/ \/Fo.\\Dbg\/$/;"	m
CPP_PROJ	vim/vim/src/VisVim/VisVim.mak	/^CPP_PROJ= \/MD \/O2 \/D "NDEBUG" \/I.\\Release$/;"	m
CPP_PROJ	vim/vim/src/VisVim/VisVim.mak	/^CPP_PROJ= \/MDd \/Gm \/Zi \/Od \/D "_DEBUG" \/I.\\Debug \/Fd"$(INTDIR)\/"$/;"	m
CPP_PROJ	vim/vim/src/VisVim/VisVim.mak	/^CPP_PROJ=$(CPP_PROJ) \/nologo \/W3 \/GX \/D "WIN32" \/D "_WINDOWS" \/D "_WINDLL" \/D "_AFXDLL" \/D "_USRDLL" \/c \/Fo"$(INTDIR)\/"$/;"	m
CPROTO	vim/vim/src/Makefile	/^CPROTO = cproto $(PROTO_FLAGS) -DPROTO \\$/;"	m
CPT_ABBR	vim/vim/src/structs.h	3213;"	d
CPT_COUNT	vim/vim/src/structs.h	3217;"	d
CPT_INFO	vim/vim/src/structs.h	3216;"	d
CPT_KIND	vim/vim/src/structs.h	3215;"	d
CPT_MENU	vim/vim/src/structs.h	3214;"	d
CPU	vim/vim/src/GvimExt/Makefile	/^CPU = AMD64$/;"	m
CPU	vim/vim/src/GvimExt/Makefile	/^CPU = i386$/;"	m
CPU	vim/vim/src/Make_mvc.mak	/^CPU = AMD64$/;"	m
CPU	vim/vim/src/Make_mvc.mak	/^CPU = i386$/;"	m
CPU	vim/vim/src/Make_mvc.mak	/^CPU = ix86$/;"	m
CPU	vim/vim/src/Make_sas.mak	/^CPU=68000$/;"	m
CPUARG	vim/vim/src/Make_bc5.mak	/^CPUARG = -$(CPUNR)$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/G5$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/G6 \/arch:SSE$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/G6$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/G7 \/arch:SSE2$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/arch:AVX$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/arch:AVX2$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/arch:IA32$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/arch:SSE$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG = \/arch:SSE2$/;"	m
CPUARG	vim/vim/src/Make_mvc.mak	/^CPUARG =$/;"	m
CPUNR	vim/vim/src/Make_bc5.mak	/^CPUNR = 3$/;"	m
CPUNR	vim/vim/src/Make_bc5.mak	/^CPUNR = 4$/;"	m
CPUNR	vim/vim/src/Make_bc5.mak	/^CPUNR = 5$/;"	m
CPUNR	vim/vim/src/Make_bc5.mak	/^CPUNR = 6$/;"	m
CPUNR	vim/vim/src/Make_mvc.mak	/^CPUNR = any$/;"	m
CPUNR	vim/vim/src/Make_mvc.mak	/^CPUNR = i586$/;"	m
CPUNR	vim/vim/src/Make_mvc.mak	/^CPUNR = sse2$/;"	m
CP_UTF8	vim/vim/src/mbyte.c	440;"	d	file:
CRC32	vim/vim/src/crypt_zip.c	64;"	d	file:
CREATE_DUMMY_FILE	vim/vim/src/memline.c	4144;"	d	file:
CROSS	vim/vim/src/GvimExt/Make_ming.mak	/^CROSS = no$/;"	m
CROSS	vim/vim/src/Make_cyg_ming.mak	/^CROSS=no$/;"	m
CROSS_COMPILE	vim/vim/src/Make_cyg.mak	/^CROSS_COMPILE = i686-pc-mingw32-$/;"	m
CROSS_COMPILE	vim/vim/src/Make_cyg_ming.mak	/^CROSS_COMPILE = i586-pc-mingw32msvc-$/;"	m
CROSS_COMPILE	vim/vim/src/Make_cyg_ming.mak	/^CROSS_COMPILE =$/;"	m
CROSS_COMPILING	vim/vim/src/auto/config.mk	/^CROSS_COMPILING = $/;"	m
CRV_GET	vim/vim/src/term.c	118;"	d	file:
CRV_GOT	vim/vim/src/term.c	120;"	d	file:
CRV_SENT	vim/vim/src/term.c	119;"	d	file:
CRYPT_BUF_SIZE	vim/vim/src/undo.c	85;"	d	file:
CRYPT_MAGIC_LEN	vim/vim/src/crypt.c	123;"	d	file:
CRYPT_M_BF	vim/vim/src/structs.h	1799;"	d
CRYPT_M_BF2	vim/vim/src/structs.h	1800;"	d
CRYPT_M_COUNT	vim/vim/src/structs.h	1801;"	d
CRYPT_M_ZIP	vim/vim/src/structs.h	1798;"	d
CSCOPE	vim/vim/src/Make_bc5.mak	/^CSCOPE = yes$/;"	m
CSCOPE	vim/vim/src/Make_cyg_ming.mak	/^CSCOPE=yes$/;"	m
CSCOPE	vim/vim/src/Make_mvc.mak	/^CSCOPE = yes$/;"	m
CSCOPE_DBFILE	vim/vim/src/if_cscope.h	24;"	d
CSCOPE_DEFS	vim/vim/src/Make_mvc.mak	/^CSCOPE_DEFS  = -DFEAT_CSCOPE$/;"	m
CSCOPE_FAILURE	vim/vim/src/if_cscope.h	22;"	d
CSCOPE_INCL	vim/vim/src/Make_mvc.mak	/^CSCOPE_INCL  = if_cscope.h$/;"	m
CSCOPE_OBJ	vim/vim/src/Make_mvc.mak	/^CSCOPE_OBJ   = $(OBJDIR)\/if_cscope.obj$/;"	m
CSCOPE_PROMPT	vim/vim/src/if_cscope.h	25;"	d
CSCOPE_SUCCESS	vim/vim/src/if_cscope.h	21;"	d
CSF_ACTIVE	vim/vim/src/structs.h	785;"	d
CSF_CAUGHT	vim/vim/src/structs.h	793;"	d
CSF_ELSE	vim/vim/src/structs.h	786;"	d
CSF_FINALLY	vim/vim/src/structs.h	791;"	d
CSF_FOR	vim/vim/src/structs.h	788;"	d
CSF_SILENT	vim/vim/src/structs.h	794;"	d
CSF_THROWN	vim/vim/src/structs.h	792;"	d
CSF_TRUE	vim/vim/src/structs.h	784;"	d
CSF_TRY	vim/vim/src/structs.h	790;"	d
CSF_WHILE	vim/vim/src/structs.h	787;"	d
CSI	vim/vim/src/ascii.h	168;"	d
CSI	vim/vim/src/libvterm/src/vterm_internal.h	/^    CSI,$/;"	e	enum:VTerm::VTermParserState
CSIDL_COMMON_DESKTOPDIRECTORY	vim/vim/src/dosinst.h	226;"	d
CSIDL_COMMON_PROGRAMS	vim/vim/src/dosinst.h	223;"	d
CSI_ARG	vim/vim/src/libvterm/include/vterm.h	206;"	d
CSI_ARGS_MAX	vim/vim/src/libvterm/src/parser.c	6;"	d	file:
CSI_ARG_COUNT	vim/vim/src/libvterm/include/vterm.h	213;"	d
CSI_ARG_FLAG_MORE	vim/vim/src/libvterm/include/vterm.h	202;"	d
CSI_ARG_HAS_MORE	vim/vim/src/libvterm/include/vterm.h	205;"	d
CSI_ARG_IS_MISSING	vim/vim/src/libvterm/include/vterm.h	211;"	d
CSI_ARG_MASK	vim/vim/src/libvterm/include/vterm.h	203;"	d
CSI_ARG_MISSING	vim/vim/src/libvterm/include/vterm.h	209;"	d
CSI_ARG_OR	vim/vim/src/libvterm/include/vterm.h	212;"	d
CSI_INTERMED_MAX	vim/vim/src/libvterm/src/parser.c	8;"	d	file:
CSI_LEADER_MAX	vim/vim/src/libvterm/src/parser.c	7;"	d	file:
CSI_STR	vim/vim/src/ascii.h	169;"	d
CSL_HAD_CONT	vim/vim/src/structs.h	816;"	d
CSL_HAD_ENDLOOP	vim/vim/src/structs.h	815;"	d
CSL_HAD_FINA	vim/vim/src/structs.h	817;"	d
CSL_HAD_LOOP	vim/vim/src/structs.h	814;"	d
CSQF_CMDS	vim/vim/src/option.h	428;"	d
CSQF_FLAGS	vim/vim/src/option.h	429;"	d
CSREAD_BUFSIZE	vim/vim/src/if_cscope.c	675;"	d	file:
CSTACK_LEN	vim/vim/src/structs.h	761;"	d
CSTP_BREAK	vim/vim/src/structs.h	806;"	d
CSTP_CONTINUE	vim/vim/src/structs.h	807;"	d
CSTP_ERROR	vim/vim/src/structs.h	803;"	d
CSTP_FINISH	vim/vim/src/structs.h	809;"	d
CSTP_INTERRUPT	vim/vim/src/structs.h	804;"	d
CSTP_NONE	vim/vim/src/structs.h	802;"	d
CSTP_RETURN	vim/vim/src/structs.h	808;"	d
CSTP_THROW	vim/vim/src/structs.h	805;"	d
CS_B5	vim/vim/src/hardcopy.c	1155;"	d	file:
CS_CNS_PLANE_1	vim/vim/src/hardcopy.c	1152;"	d	file:
CS_CNS_PLANE_1_2	vim/vim/src/hardcopy.c	1154;"	d	file:
CS_CNS_PLANE_2	vim/vim/src/hardcopy.c	1153;"	d	file:
CS_CP932	vim/vim/src/hardcopy.c	1094;"	d	file:
CS_DLHKL	vim/vim/src/hardcopy.c	1162;"	d	file:
CS_DLHKS	vim/vim/src/hardcopy.c	1163;"	d	file:
CS_ETEN	vim/vim/src/hardcopy.c	1156;"	d	file:
CS_GBK	vim/vim/src/hardcopy.c	1127;"	d	file:
CS_GBK2K	vim/vim/src/hardcopy.c	1124;"	d	file:
CS_GBT_12345_90	vim/vim/src/hardcopy.c	1123;"	d	file:
CS_GBT_90_MAC	vim/vim/src/hardcopy.c	1126;"	d	file:
CS_GB_2312_80	vim/vim/src/hardcopy.c	1122;"	d	file:
CS_HK_GCCS	vim/vim/src/hardcopy.c	1157;"	d	file:
CS_HK_SCS	vim/vim/src/hardcopy.c	1158;"	d	file:
CS_HK_SCS_ETEN	vim/vim/src/hardcopy.c	1159;"	d	file:
CS_JIS_C_1978	vim/vim/src/hardcopy.c	1089;"	d	file:
CS_JIS_X_1983	vim/vim/src/hardcopy.c	1090;"	d	file:
CS_JIS_X_1990	vim/vim/src/hardcopy.c	1091;"	d	file:
CS_KANJITALK6	vim/vim/src/hardcopy.c	1095;"	d	file:
CS_KANJITALK7	vim/vim/src/hardcopy.c	1096;"	d	file:
CS_KR_ISO10646	vim/vim/src/hardcopy.c	1201;"	d	file:
CS_KR_MAC	vim/vim/src/hardcopy.c	1199;"	d	file:
CS_KR_X_1992	vim/vim/src/hardcopy.c	1198;"	d	file:
CS_KR_X_1992_MS	vim/vim/src/hardcopy.c	1200;"	d	file:
CS_MSWINDOWS	vim/vim/src/hardcopy.c	1093;"	d	file:
CS_MTHKL	vim/vim/src/hardcopy.c	1160;"	d	file:
CS_MTHKS	vim/vim/src/hardcopy.c	1161;"	d	file:
CS_NEC	vim/vim/src/hardcopy.c	1092;"	d	file:
CS_SC_ISO10646	vim/vim/src/hardcopy.c	1128;"	d	file:
CS_SC_MAC	vim/vim/src/hardcopy.c	1125;"	d	file:
CS_TC_ISO10646	vim/vim/src/hardcopy.c	1164;"	d	file:
CShellExt	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExt::CShellExt()$/;"	f	class:CShellExt	signature:()
CShellExt::AddRef	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExt::AddRef()$/;"	f	class:CShellExt	signature:()
CShellExt::CShellExt	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExt::CShellExt()$/;"	f	class:CShellExt	signature:()
CShellExt::EnumWindowsProc	vim/vim/src/GvimExt/gvimext.cpp	/^BOOL CALLBACK CShellExt::EnumWindowsProc(HWND hWnd, LPARAM lParam)$/;"	f	class:CShellExt	signature:(HWND hWnd, LPARAM lParam)
CShellExt::GetCommandString	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::GetCommandString(UINT_PTR  \/* idCmd *\/,$/;"	f	class:CShellExt	signature:(UINT_PTR , UINT uFlags, UINT FAR * , LPSTR pszName, UINT cchMax)
CShellExt::Initialize	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::Initialize(LPCITEMIDLIST  \/* pIDFolder *\/,$/;"	f	class:CShellExt	signature:(LPCITEMIDLIST , LPDATAOBJECT pDataObj, HKEY )
CShellExt::InvokeCommand	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::InvokeCommand(LPCMINVOKECOMMANDINFO lpcmi)$/;"	f	class:CShellExt	signature:(LPCMINVOKECOMMANDINFO lpcmi)
CShellExt::InvokeGvim	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::InvokeGvim(HWND hParent,$/;"	f	class:CShellExt	signature:(HWND hParent, LPCSTR , LPCSTR , LPCSTR , int )
CShellExt::InvokeSingleGvim	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::InvokeSingleGvim(HWND hParent,$/;"	f	class:CShellExt	signature:(HWND hParent, LPCSTR , LPCSTR , LPCSTR , int , int useDiff)
CShellExt::LoadMenuIcon	vim/vim/src/GvimExt/gvimext.cpp	/^BOOL CShellExt::LoadMenuIcon()$/;"	f	class:CShellExt	signature:()
CShellExt::PushToWindow	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::PushToWindow(HWND  \/* hParent *\/,$/;"	f	class:CShellExt	signature:(HWND , LPCSTR , LPCSTR , LPCSTR , int , int idHWnd)
CShellExt::QueryContextMenu	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::QueryContextMenu(HMENU hMenu,$/;"	f	class:CShellExt	signature:(HMENU hMenu, UINT indexMenu, UINT idCmdFirst, UINT , UINT )
CShellExt::QueryInterface	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::QueryInterface(REFIID riid, LPVOID FAR *ppv)$/;"	f	class:CShellExt	signature:(REFIID riid, LPVOID FAR *ppv)
CShellExt::Release	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExt::Release()$/;"	f	class:CShellExt	signature:()
CShellExt::~CShellExt	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExt::~CShellExt()$/;"	f	class:CShellExt	signature:()
CShellExtClassFactory	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExtClassFactory::CShellExtClassFactory()$/;"	f	class:CShellExtClassFactory	signature:()
CShellExtClassFactory::AddRef	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExtClassFactory::AddRef()$/;"	f	class:CShellExtClassFactory	signature:()
CShellExtClassFactory::CShellExtClassFactory	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExtClassFactory::CShellExtClassFactory()$/;"	f	class:CShellExtClassFactory	signature:()
CShellExtClassFactory::CreateInstance	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExtClassFactory::CreateInstance(LPUNKNOWN pUnkOuter,$/;"	f	class:CShellExtClassFactory	signature:(LPUNKNOWN pUnkOuter, REFIID riid, LPVOID *ppvObj)
CShellExtClassFactory::LockServer	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExtClassFactory::LockServer(BOOL  \/* fLock *\/)$/;"	f	class:CShellExtClassFactory	signature:(BOOL )
CShellExtClassFactory::QueryInterface	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExtClassFactory::QueryInterface(REFIID riid,$/;"	f	class:CShellExtClassFactory	signature:(REFIID riid, LPVOID FAR *ppv)
CShellExtClassFactory::Release	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExtClassFactory::Release()$/;"	f	class:CShellExtClassFactory	signature:()
CShellExtClassFactory::~CShellExtClassFactory	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExtClassFactory::~CShellExtClassFactory()$/;"	f	class:CShellExtClassFactory	signature:()
CTAGS	vim/vim/src/Make_mvc.mak	/^CTAGS = ctags$/;"	m
CTERM_ATTR_ENTRY	vim/vim/src/syntax.c	8638;"	d	file:
CTRL	vim/vim/src/os_win32.c	760;"	d	file:
CTRL_F_STR	vim/vim/src/ascii.h	119;"	d
CTRL_F_STR	vim/vim/src/ascii.h	43;"	d
CTRL_H_STR	vim/vim/src/ascii.h	120;"	d
CTRL_H_STR	vim/vim/src/ascii.h	44;"	d
CTRL_V_STR	vim/vim/src/ascii.h	121;"	d
CTRL_V_STR	vim/vim/src/ascii.h	45;"	d
CTRL_X_CMDLINE	vim/vim/src/edit.c	32;"	d	file:
CTRL_X_DICTIONARY	vim/vim/src/edit.c	30;"	d	file:
CTRL_X_EVAL	vim/vim/src/edit.c	37;"	d	file:
CTRL_X_FILES	vim/vim/src/edit.c	25;"	d	file:
CTRL_X_FINISHED	vim/vim/src/edit.c	29;"	d	file:
CTRL_X_FUNCTION	vim/vim/src/edit.c	33;"	d	file:
CTRL_X_LOCAL_MSG	vim/vim/src/edit.c	36;"	d	file:
CTRL_X_MODE_LINE_OR_EVAL	vim/vim/src/edit.c	40;"	d	file:
CTRL_X_MSG	vim/vim/src/edit.c	39;"	d	file:
CTRL_X_NOT_DEFINED_YET	vim/vim/src/edit.c	22;"	d	file:
CTRL_X_OMNI	vim/vim/src/edit.c	34;"	d	file:
CTRL_X_PATH_DEFINES	vim/vim/src/edit.c	28;"	d	file:
CTRL_X_PATH_PATTERNS	vim/vim/src/edit.c	27;"	d	file:
CTRL_X_SCROLL	vim/vim/src/edit.c	23;"	d	file:
CTRL_X_SPELL	vim/vim/src/edit.c	35;"	d	file:
CTRL_X_TAGS	vim/vim/src/edit.c	26;"	d	file:
CTRL_X_THESAURUS	vim/vim/src/edit.c	31;"	d	file:
CTRL_X_WANT_IDENT	vim/vim/src/edit.c	20;"	d	file:
CTRL_X_WHOLE_LINE	vim/vim/src/edit.c	24;"	d	file:
CT_CELL_MASK	vim/vim/src/charset.c	39;"	d	file:
CT_FNAME_CHAR	vim/vim/src/charset.c	42;"	d	file:
CT_ID_CHAR	vim/vim/src/charset.c	41;"	d	file:
CT_PRINT_CHAR	vim/vim/src/charset.c	40;"	d	file:
CUIOBJ	vim/vim/src/Make_cyg_ming.mak	/^CUIOBJ = $(OUTDIR)\/iscygpty.o$/;"	m
CUI_INCL	vim/vim/src/Make_cyg_ming.mak	/^CUI_INCL = iscygpty.h$/;"	m
CUI_INCL	vim/vim/src/Make_mvc.mak	/^CUI_INCL = iscygpty.h$/;"	m
CUI_OBJ	vim/vim/src/Make_mvc.mak	/^CUI_OBJ = $(OUTDIR)\\iscygpty.obj$/;"	m
CURRENT_TAB_NR	vim/vim/src/ex_docmd.c	1714;"	d	file:
CURRENT_TAB_NR	vim/vim/src/ex_docmd.c	1719;"	d	file:
CURRENT_WIN_NR	vim/vim/src/ex_docmd.c	1712;"	d	file:
CURRENT_WIN_NR	vim/vim/src/ex_docmd.c	1717;"	d	file:
CURSOR	vim/vim/src/regexp.c	239;"	d	file:
CURSOR_BAR_RIGHT	vim/vim/src/macros.h	264;"	d
CURSOR_MOVED	vim/vim/src/vim.h	1906;"	d
CURSOR_SHAPE	vim/vim/src/feature.h	1204;"	d
CUR_STATE	vim/vim/src/syntax.c	384;"	d	file:
CV	vim/vim/src/proto.h	275;"	d
CVim	vim/vim/src/if_ole.cpp	/^    CVim() : ref(0), typeinfo(0) {};$/;"	f	class:FINAL	file:	access:private	signature:()
CVim::AddRef	vim/vim/src/if_ole.cpp	/^CVim::AddRef()$/;"	f	class:CVim	signature:()
CVim::Create	vim/vim/src/if_ole.cpp	/^CVim *CVim::Create(int *pbDoRestart)$/;"	f	class:CVim	signature:(int *pbDoRestart)
CVim::Eval	vim/vim/src/if_ole.cpp	/^CVim::Eval(BSTR expr, BSTR *result)$/;"	f	class:CVim	signature:(BSTR expr, BSTR *result)
CVim::GetHwnd	vim/vim/src/if_ole.cpp	/^CVim::GetHwnd(UINT_PTR *result)$/;"	f	class:CVim	signature:(UINT_PTR *result)
CVim::GetIDsOfNames	vim/vim/src/if_ole.cpp	/^CVim::GetIDsOfNames($/;"	f	class:CVim	signature:( const IID &iid, OLECHAR **names, UINT n, LCID, DISPID *dispids)
CVim::GetTypeInfo	vim/vim/src/if_ole.cpp	/^CVim::GetTypeInfo(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo)$/;"	f	class:CVim	signature:(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo)
CVim::GetTypeInfoCount	vim/vim/src/if_ole.cpp	/^CVim::GetTypeInfoCount(UINT *pCount)$/;"	f	class:CVim	signature:(UINT *pCount)
CVim::Invoke	vim/vim/src/if_ole.cpp	/^CVim::Invoke($/;"	f	class:CVim	signature:( DISPID member, const IID &iid, LCID, WORD flags, DISPPARAMS *dispparams, VARIANT *result, EXCEPINFO *excepinfo, UINT *argerr)
CVim::QueryInterface	vim/vim/src/if_ole.cpp	/^CVim::QueryInterface(REFIID riid, void **ppv)$/;"	f	class:CVim	signature:(REFIID riid, void **ppv)
CVim::Release	vim/vim/src/if_ole.cpp	/^CVim::Release()$/;"	f	class:CVim	signature:()
CVim::SendKeys	vim/vim/src/if_ole.cpp	/^CVim::SendKeys(BSTR keys)$/;"	f	class:CVim	signature:(BSTR keys)
CVim::SetForeground	vim/vim/src/if_ole.cpp	/^CVim::SetForeground(void)$/;"	f	class:CVim	signature:(void)
CVim::~CVim	vim/vim/src/if_ole.cpp	/^CVim::~CVim()$/;"	f	class:CVim	signature:()
CVimCF	vim/vim/src/if_ole.cpp	/^    CVimCF() : ref(0) {};$/;"	f	class:FINAL	file:	access:private	signature:()
CVimCF::AddRef	vim/vim/src/if_ole.cpp	/^CVimCF::AddRef()$/;"	f	class:CVimCF	signature:()
CVimCF::Create	vim/vim/src/if_ole.cpp	/^CVimCF *CVimCF::Create()$/;"	f	class:CVimCF	signature:()
CVimCF::CreateInstance	vim/vim/src/if_ole.cpp	/^CVimCF::CreateInstance(IUnknown *punkOuter, REFIID riid, void **ppv)$/;"	f	class:CVimCF	signature:(IUnknown *punkOuter, REFIID riid, void **ppv)
CVimCF::LockServer	vim/vim/src/if_ole.cpp	/^CVimCF::LockServer(BOOL lock)$/;"	f	class:CVimCF	signature:(BOOL lock)
CVimCF::QueryInterface	vim/vim/src/if_ole.cpp	/^CVimCF::QueryInterface(REFIID riid, void **ppv)$/;"	f	class:CVimCF	signature:(REFIID riid, void **ppv)
CVimCF::Release	vim/vim/src/if_ole.cpp	/^CVimCF::Release()$/;"	f	class:CVimCF	signature:()
CVisVimApp	vim/vim/src/VisVim/VisVim.cpp	/^	CVisVimApp ();$/;"	p	class:CVisVimApp	file:	access:public	signature:()
CVisVimApp	vim/vim/src/VisVim/VisVim.cpp	/^CVisVimApp::CVisVimApp ()$/;"	f	class:CVisVimApp	signature:()
CVisVimApp	vim/vim/src/VisVim/VisVim.cpp	/^class CVisVimApp : public CWinApp$/;"	c	file:	inherits:CWinApp
CVisVimApp::CVisVimApp	vim/vim/src/VisVim/VisVim.cpp	/^	CVisVimApp ();$/;"	p	class:CVisVimApp	file:	access:public	signature:()
CVisVimApp::CVisVimApp	vim/vim/src/VisVim/VisVim.cpp	/^CVisVimApp::CVisVimApp ()$/;"	f	class:CVisVimApp	signature:()
CVisVimApp::ExitInstance	vim/vim/src/VisVim/VisVim.cpp	/^	virtual int ExitInstance ();$/;"	p	class:CVisVimApp	file:	access:public	signature:()
CVisVimApp::ExitInstance	vim/vim/src/VisVim/VisVim.cpp	/^int CVisVimApp::ExitInstance ()$/;"	f	class:CVisVimApp	signature:()
CVisVimApp::InitInstance	vim/vim/src/VisVim/VisVim.cpp	/^	virtual BOOL InitInstance ();$/;"	p	class:CVisVimApp	file:	access:public	signature:()
CVisVimApp::InitInstance	vim/vim/src/VisVim/VisVim.cpp	/^BOOL CVisVimApp::InitInstance ()$/;"	f	class:CVisVimApp	signature:()
CWD	vim/vim/runtime/tools/ccfilter.c	/^char	       CWD[1024];$/;"	v
CW_ERROR	vim/vim/src/channel.c	/^    CW_ERROR$/;"	e	enum:__anon158	file:
CW_GetText	vim/vim/src/gui_mac.c	/^struct CW_GetText \/* for handling class 'KAHL', event 'GTTX', keyDirectObject typeChar*\/$/;"	s	file:
CW_GetText	vim/vim/src/gui_mac.c	/^typedef struct CW_GetText CW_GetText;$/;"	t	typeref:struct:CW_GetText	file:
CW_GetText::theDate	vim/vim/src/gui_mac.c	/^    long *theDate;  \/* where to put the modification date\/time *\/$/;"	m	struct:CW_GetText	file:	access:public
CW_GetText::theFile	vim/vim/src/gui_mac.c	/^    FSSpec theFile; \/* identifies the file *\/$/;"	m	struct:CW_GetText	file:	access:public
CW_GetText::theText	vim/vim/src/gui_mac.c	/^    Handle theText; \/* the location where you return the text (must be resized properly) *\/$/;"	m	struct:CW_GetText	file:	access:public
CW_GetText::unused	vim/vim/src/gui_mac.c	/^    long *unused;   \/* 0 (not used) *\/$/;"	m	struct:CW_GetText	file:	access:public
CW_NOT_READY	vim/vim/src/channel.c	/^    CW_NOT_READY,$/;"	e	enum:__anon158	file:
CW_READY	vim/vim/src/channel.c	/^    CW_READY,$/;"	e	enum:__anon158	file:
CXX	vim/vim/src/GvimExt/Make_ming.mak	/^CXX := $(CROSS_COMPILE)g++$/;"	m
CXX	vim/vim/src/Make_cyg_ming.mak	/^CXX := $(CROSS_COMPILE)g++$/;"	m
CXXFLAGS	vim/vim/src/GvimExt/Make_ming.mak	/^CXXFLAGS := -O2 -fvtable-thunks$/;"	m
CXXFLAGS	vim/vim/src/GvimExt/Make_ming.mak	/^CXXFLAGS := -O2$/;"	m
CXXFLAGS	vim/vim/src/Make_cyg_ming.mak	/^CXXFLAGS = -std=gnu++11$/;"	m
CYGWIN	vim/vim/src/xxd/xxd.c	74;"	d	file:
C_cedilla	vim/vim/src/regexp_nfa.c	762;"	d	file:
CancelData	vim/vim/src/gui_gtk.c	98;"	d	file:
CancelRedo	vim/vim/src/getchar.c	/^CancelRedo(void)$/;"	f	signature:(void)
CenterWindow	vim/vim/src/gui_w32.c	/^CenterWindow($/;"	f	file:	signature:( HWND hwndChild, HWND hwndParent)
CharOrd	vim/vim/src/ascii.h	19;"	d
CharOrd	vim/vim/src/ascii.h	95;"	d
CharOrdLow	vim/vim/src/ascii.h	20;"	d
CharOrdLow	vim/vim/src/ascii.h	93;"	d
CharOrdUp	vim/vim/src/ascii.h	21;"	d
CharOrdUp	vim/vim/src/ascii.h	94;"	d
CharOrd__	vim/vim/src/ascii.h	92;"	d
Check	vim/vim/src/gui_at_sb.c	648;"	d	file:
Check	vim/vim/src/gui_at_sb.c	676;"	d	file:
Check	vim/vim/src/if_py_both.h	/^    checkfun	Check;$/;"	m	struct:__anon105	access:public
CheckBuffer	vim/vim/src/if_py_both.h	/^CheckBuffer(BufferObject *self)$/;"	f	signature:(BufferObject *self)
CheckTabPage	vim/vim/src/if_py_both.h	/^CheckTabPage(TabPageObject *self)$/;"	f	signature:(TabPageObject *self)
CheckWindow	vim/vim/src/if_py_both.h	/^CheckWindow(WindowObject *self)$/;"	f	signature:(WindowObject *self)
Chk_Abort	vim/vim/src/os_amiga.c	/^Chk_Abort(void)$/;"	f	signature:(void)
Chk_Abort	vim/vim/src/os_amiga.c	1397;"	d	file:
ClassInitialize	vim/vim/src/gui_at_sb.c	/^ClassInitialize(void)$/;"	f	file:	signature:(void)
ClassInitialize	vim/vim/src/gui_at_sb.c	/^static void ClassInitialize(void);$/;"	p	file:	signature:(void)
CleanUpMessaging	vim/vim/src/os_mswin.c	/^CleanUpMessaging(void)$/;"	f	file:	signature:(void)
ClearConsoleBuffer	vim/vim/src/os_win32.c	/^ClearConsoleBuffer(WORD wAttribute)$/;"	f	file:	signature:(WORD wAttribute)
Col	vim/vim/runtime/tools/ccfilter.c	/^unsigned long  Col;$/;"	v
ColorSymbol	vim/vim/src/xpm/include/xpm.h	489;"	d
Colormap	vim/vim/src/xpm/include/simx.h	/^typedef void *Colormap;			\/* should be COLORPALETTE, not done$/;"	t
Columns	vim/vim/src/globals.h	/^EXTERN long	Columns INIT(= 80);	\/* nr of columns in the screen *\/$/;"	v
CompareEvents	vim/vim/src/gui_at_sb.c	/^CompareEvents(XEvent *oldEvent, XEvent *newEvent)$/;"	f	file:	signature:(XEvent *oldEvent, XEvent *newEvent)
ConsoleBuffer	vim/vim/src/os_win32.c	/^} ConsoleBuffer;$/;"	t	typeref:struct:ConsoleBufferStruct	file:
ConsoleBufferStruct	vim/vim/src/os_win32.c	/^typedef struct ConsoleBufferStruct$/;"	s	file:
ConsoleBufferStruct::Buffer	vim/vim/src/os_win32.c	/^    PCHAR_INFO			Buffer;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
ConsoleBufferStruct::BufferSize	vim/vim/src/os_win32.c	/^    COORD			BufferSize;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
ConsoleBufferStruct::Info	vim/vim/src/os_win32.c	/^    CONSOLE_SCREEN_BUFFER_INFO	Info;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
ConsoleBufferStruct::IsValid	vim/vim/src/os_win32.c	/^    BOOL			IsValid;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
ConvertFromPyMapping	vim/vim/src/if_py_both.h	/^ConvertFromPyMapping(PyObject *obj, typval_T *tv)$/;"	f	signature:(PyObject *obj, typval_T *tv)
ConvertFromPyMapping	vim/vim/src/if_py_both.h	/^static int ConvertFromPyMapping(PyObject *, typval_T *);$/;"	p	signature:(PyObject *, typval_T *)
ConvertFromPyObject	vim/vim/src/if_py_both.h	/^ConvertFromPyObject(PyObject *obj, typval_T *tv)$/;"	f	signature:(PyObject *obj, typval_T *tv)
ConvertFromPyObject	vim/vim/src/if_py_both.h	/^static int ConvertFromPyObject(PyObject *, typval_T *);$/;"	p	signature:(PyObject *, typval_T *)
ConvertFromPySequence	vim/vim/src/if_py_both.h	/^ConvertFromPySequence(PyObject *obj, typval_T *tv)$/;"	f	signature:(PyObject *obj, typval_T *tv)
ConvertFromPySequence	vim/vim/src/if_py_both.h	/^static int ConvertFromPySequence(PyObject *, typval_T *);$/;"	p	signature:(PyObject *, typval_T *)
ConvertToAnsi	vim/vim/src/VisVim/OleAut.cpp	/^char* ConvertToAnsi (OLECHAR* sUnicode)$/;"	f	signature:(OLECHAR* sUnicode)
ConvertToAnsi	vim/vim/src/VisVim/OleAut.h	/^    char* ConvertToAnsi (OLECHAR* sUnicode);$/;"	p	signature:(OLECHAR* sUnicode)
ConvertToAnsiBuf	vim/vim/src/VisVim/OleAut.cpp	/^char* ConvertToAnsiBuf (OLECHAR* sUnicode, char* BufAscii)$/;"	f	signature:(OLECHAR* sUnicode, char* BufAscii)
ConvertToAnsiBuf	vim/vim/src/VisVim/OleAut.h	/^    char* ConvertToAnsiBuf (OLECHAR* sUnicode, char* Buf);$/;"	p	signature:(OLECHAR* sUnicode, char* Buf)
ConvertToPyObject	vim/vim/src/if_py_both.h	/^ConvertToPyObject(typval_T *tv)$/;"	f	signature:(typval_T *tv)
ConvertToPyObject	vim/vim/src/if_py_both.h	/^static PyObject *ConvertToPyObject(typval_T *);$/;"	p	signature:(typval_T *)
ConvertToUnicode	vim/vim/src/VisVim/OleAut.cpp	/^OLECHAR* ConvertToUnicode (char* sAscii)$/;"	f	signature:(char* sAscii)
ConvertToUnicode	vim/vim/src/VisVim/OleAut.h	/^    OLECHAR* ConvertToUnicode (char* sAscii);$/;"	p	signature:(char* sAscii)
ConvertToUnicodeBuf	vim/vim/src/VisVim/OleAut.cpp	/^OLECHAR* ConvertToUnicodeBuf (char* sAscii, OLECHAR* BufUnicode)$/;"	f	signature:(char* sAscii, OLECHAR* BufUnicode)
ConvertToUnicodeBuf	vim/vim/src/VisVim/OleAut.h	/^    OLECHAR* ConvertToUnicodeBuf (char* sAscii, OLECHAR* Buf);$/;"	p	signature:(char* sAscii, OLECHAR* Buf)
CountArgsInFormat	vim/vim/src/VisVim/OleAut.cpp	/^static bool CountArgsInFormat (LPCTSTR Format, UINT* nArgs);$/;"	p	file:	signature:(LPCTSTR Format, UINT* nArgs)
CountArgsInFormat	vim/vim/src/VisVim/OleAut.cpp	/^static bool CountArgsInFormat (LPCTSTR Format, UINT* pArgCount)$/;"	f	file:	signature:(LPCTSTR Format, UINT* pArgCount)
Create	vim/vim/src/if_ole.cpp	/^    static CVim *Create(int *pbDoRestart);$/;"	p	class:FINAL	file:	access:public	signature:(int *pbDoRestart)
Create	vim/vim/src/if_ole.cpp	/^    static CVimCF *Create();$/;"	p	class:FINAL	file:	access:public	signature:()
Create	vim/vim/src/if_ole.cpp	/^CVim *CVim::Create(int *pbDoRestart)$/;"	f	class:CVim	signature:(int *pbDoRestart)
Create	vim/vim/src/if_ole.cpp	/^CVimCF *CVimCF::Create()$/;"	f	class:CVimCF	signature:()
CreateGC	vim/vim/src/gui_at_sb.c	/^CreateGC(Widget w)$/;"	f	file:	signature:(Widget w)
CreateInstance	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExtClassFactory::CreateInstance(LPUNKNOWN pUnkOuter,$/;"	f	class:CShellExtClassFactory	signature:(LPUNKNOWN pUnkOuter, REFIID riid, LPVOID *ppvObj)
CreateInstance	vim/vim/src/if_ole.cpp	/^    STDMETHOD(CreateInstance)(IUnknown *punkOuter, REFIID riid, void ** ppv);$/;"	p	class:FINAL	file:	access:public	signature:(IUnknown *punkOuter, REFIID riid, void ** ppv)
CreateInstance	vim/vim/src/if_ole.cpp	/^CVimCF::CreateInstance(IUnknown *punkOuter, REFIID riid, void **ppv)$/;"	f	class:CVimCF	signature:(IUnknown *punkOuter, REFIID riid, void **ppv)
CreateObject	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::CreateObject (char* ProgId)$/;"	f	class:COleAutomationControl	signature:(char* ProgId)
CtrlChar	vim/vim/src/ascii.h	159;"	d
CtrlCharTable	vim/vim/src/os_unix.c	/^char CtrlCharTable[]=$/;"	v
CtrlTable	vim/vim/src/os_unix.c	/^char CtrlTable[] =$/;"	v
Ctrl_A	vim/vim/src/ascii.h	124;"	d
Ctrl_A	vim/vim/src/ascii.h	48;"	d
Ctrl_AT	vim/vim/src/ascii.h	123;"	d
Ctrl_AT	vim/vim/src/ascii.h	47;"	d
Ctrl_B	vim/vim/src/ascii.h	125;"	d
Ctrl_B	vim/vim/src/ascii.h	49;"	d
Ctrl_BSL	vim/vim/src/ascii.h	152;"	d
Ctrl_BSL	vim/vim/src/ascii.h	75;"	d
Ctrl_C	vim/vim/src/ascii.h	126;"	d
Ctrl_C	vim/vim/src/ascii.h	50;"	d
Ctrl_D	vim/vim/src/ascii.h	127;"	d
Ctrl_D	vim/vim/src/ascii.h	51;"	d
Ctrl_E	vim/vim/src/ascii.h	128;"	d
Ctrl_E	vim/vim/src/ascii.h	52;"	d
Ctrl_F	vim/vim/src/ascii.h	129;"	d
Ctrl_F	vim/vim/src/ascii.h	53;"	d
Ctrl_G	vim/vim/src/ascii.h	130;"	d
Ctrl_G	vim/vim/src/ascii.h	54;"	d
Ctrl_H	vim/vim/src/ascii.h	131;"	d
Ctrl_H	vim/vim/src/ascii.h	55;"	d
Ctrl_HAT	vim/vim/src/ascii.h	153;"	d
Ctrl_HAT	vim/vim/src/ascii.h	77;"	d
Ctrl_I	vim/vim/src/ascii.h	132;"	d
Ctrl_I	vim/vim/src/ascii.h	56;"	d
Ctrl_J	vim/vim/src/ascii.h	133;"	d
Ctrl_J	vim/vim/src/ascii.h	57;"	d
Ctrl_K	vim/vim/src/ascii.h	134;"	d
Ctrl_K	vim/vim/src/ascii.h	58;"	d
Ctrl_L	vim/vim/src/ascii.h	135;"	d
Ctrl_L	vim/vim/src/ascii.h	59;"	d
Ctrl_M	vim/vim/src/ascii.h	136;"	d
Ctrl_M	vim/vim/src/ascii.h	60;"	d
Ctrl_N	vim/vim/src/ascii.h	137;"	d
Ctrl_N	vim/vim/src/ascii.h	61;"	d
Ctrl_O	vim/vim/src/ascii.h	138;"	d
Ctrl_O	vim/vim/src/ascii.h	62;"	d
Ctrl_P	vim/vim/src/ascii.h	139;"	d
Ctrl_P	vim/vim/src/ascii.h	63;"	d
Ctrl_Q	vim/vim/src/ascii.h	140;"	d
Ctrl_Q	vim/vim/src/ascii.h	64;"	d
Ctrl_R	vim/vim/src/ascii.h	141;"	d
Ctrl_R	vim/vim/src/ascii.h	65;"	d
Ctrl_RSB	vim/vim/src/ascii.h	151;"	d
Ctrl_RSB	vim/vim/src/ascii.h	76;"	d
Ctrl_S	vim/vim/src/ascii.h	142;"	d
Ctrl_S	vim/vim/src/ascii.h	66;"	d
Ctrl_T	vim/vim/src/ascii.h	143;"	d
Ctrl_T	vim/vim/src/ascii.h	67;"	d
Ctrl_U	vim/vim/src/ascii.h	144;"	d
Ctrl_U	vim/vim/src/ascii.h	68;"	d
Ctrl_V	vim/vim/src/ascii.h	145;"	d
Ctrl_V	vim/vim/src/ascii.h	69;"	d
Ctrl_W	vim/vim/src/ascii.h	146;"	d
Ctrl_W	vim/vim/src/ascii.h	70;"	d
Ctrl_X	vim/vim/src/ascii.h	147;"	d
Ctrl_X	vim/vim/src/ascii.h	71;"	d
Ctrl_Y	vim/vim/src/ascii.h	148;"	d
Ctrl_Y	vim/vim/src/ascii.h	72;"	d
Ctrl_Z	vim/vim/src/ascii.h	149;"	d
Ctrl_Z	vim/vim/src/ascii.h	73;"	d
Ctrl__	vim/vim/src/ascii.h	154;"	d
Ctrl__	vim/vim/src/ascii.h	78;"	d
Ctrl_chr	vim/vim/src/ascii.h	156;"	d
Ctrl_chr	vim/vim/src/ascii.h	40;"	d
CurrentAttrs	vim/vim/src/if_py_both.h	/^static char *CurrentAttrs[] = {$/;"	v
CurrentDir	vim/vim/src/if_py_both.h	/^CurrentDir(PyObject *self)$/;"	f	signature:(PyObject *self)
CurrentGetattr	vim/vim/src/if_py_both.h	/^CurrentGetattr(PyObject *self UNUSED, char *name)$/;"	f	signature:(PyObject *self UNUSED, char *name)
CurrentGetattro	vim/vim/src/if_python3.c	/^CurrentGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
CurrentGetattro	vim/vim/src/if_python3.c	/^static PyObject *CurrentGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
CurrentMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef CurrentMethods[] = {$/;"	v	typeref:struct:PyMethodDef
CurrentObject	vim/vim/src/if_py_both.h	/^} CurrentObject;$/;"	t	typeref:struct:__anon114
CurrentSetattr	vim/vim/src/if_py_both.h	/^CurrentSetattr(PyObject *self UNUSED, char *name, PyObject *valObject)$/;"	f	signature:(PyObject *self UNUSED, char *name, PyObject *valObject)
CurrentSetattro	vim/vim/src/if_python3.c	/^CurrentSetattro(PyObject *self, PyObject *nameobj, PyObject *value)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj, PyObject *value)
CurrentSetattro	vim/vim/src/if_python3.c	/^static int CurrentSetattro(PyObject *, PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *, PyObject *)
CurrentType	vim/vim/src/if_py_both.h	/^static PyTypeObject CurrentType;$/;"	v
D2D1CreateFactory	vim/vim/src/gui_dwrite.cpp	59;"	d	file:
DAL	vim/vim/src/farsi.h	120;"	d
DATADIR	vim/vim/src/auto/config.mk	/^DATADIR		= ${datarootdir}$/;"	m
DATA_BL	vim/vim/src/memline.c	/^typedef struct data_block	DATA_BL;    \/* contents of a data block *\/$/;"	t	typeref:struct:data_block	file:
DATA_ID	vim/vim/src/memline.c	60;"	d	file:
DBCS_2BYTE	vim/vim/src/globals.h	831;"	d
DBCS_CHS	vim/vim/src/globals.h	827;"	d
DBCS_CHSU	vim/vim/src/globals.h	828;"	d
DBCS_CHT	vim/vim/src/globals.h	829;"	d
DBCS_CHTU	vim/vim/src/globals.h	830;"	d
DBCS_DEBUG	vim/vim/src/globals.h	832;"	d
DBCS_JPN	vim/vim/src/globals.h	823;"	d
DBCS_JPNU	vim/vim/src/globals.h	824;"	d
DBCS_KOR	vim/vim/src/globals.h	825;"	d
DBCS_KORU	vim/vim/src/globals.h	826;"	d
DBG	vim/vim/src/Make_sas.mak	/^DBG = NODEBUG$/;"	m
DBGLDFLAGS	vim/vim/src/Make_mint.mak	/^DBGLDFLAGS = -B$(SYMLDPREFIX)$/;"	m
DBGPOSTPROCESS	vim/vim/src/Make_mint.mak	/^DBGPOSTPROCESS = fixstk 20k $(DBGTARGET)$/;"	m
DBGTARGET	vim/vim/src/Make_mint.mak	/^DBGTARGET = $(VIMTARGET).sym$/;"	m
DBG_FILE	vim/vim/src/ex_cmds2.c	546;"	d	file:
DBG_FUNC	vim/vim/src/ex_cmds2.c	545;"	d	file:
DBL_EPSILON	vim/vim/src/macros.h	368;"	d
DB_COUNT	vim/vim/src/structs.h	2380;"	d
DB_INDEX_MASK	vim/vim/src/memline.c	128;"	d	file:
DB_MARKED	vim/vim/src/memline.c	127;"	d	file:
DCS	vim/vim/src/ascii.h	170;"	d
DCS	vim/vim/src/libvterm/src/vterm_internal.h	/^    DCS,$/;"	e	enum:VTerm::VTermParserState
DEBUG	vim/vim/src/Make_cyg_ming.mak	/^DEBUG=no$/;"	m
DEBUG	vim/vim/src/vim.h	2350;"	d
DEBUGGY	vim/vim/src/ex_cmds2.c	538;"	d	file:
DEBUGINFO	vim/vim/src/Make_mvc.mak	/^DEBUGINFO = \/ZI$/;"	m
DEBUGINFO	vim/vim/src/Make_mvc.mak	/^DEBUGINFO = \/Zi$/;"	m
DEBUG_FLAG	vim/vim/src/Make_bc5.mak	/^DEBUG_FLAG = -v$/;"	m
DEBUG_GLYPH_COMBINE	vim/vim/src/libvterm/src/state.c	9;"	d	file:
DEBUG_LOG	vim/vim/src/libvterm/src/vterm_internal.h	17;"	d
DEBUG_LOG	vim/vim/src/libvterm/src/vterm_internal.h	22;"	d
DEBUG_LOG1	vim/vim/src/libvterm/src/vterm_internal.h	18;"	d
DEBUG_LOG1	vim/vim/src/libvterm/src/vterm_internal.h	23;"	d
DEBUG_LOG2	vim/vim/src/libvterm/src/vterm_internal.h	19;"	d
DEBUG_LOG2	vim/vim/src/libvterm/src/vterm_internal.h	24;"	d
DEBUG_LOG3	vim/vim/src/libvterm/src/vterm_internal.h	20;"	d
DEBUG_LOG3	vim/vim/src/libvterm/src/vterm_internal.h	25;"	d
DEBUG_PRINT_UTF8	vim/vim/src/libvterm/src/encoding.c	6;"	d	file:
DEBUG_SUFFIX	vim/vim/src/Make_cyg_ming.mak	/^DEBUG_SUFFIX=d$/;"	m
DECRYPT_BYTE_ZIP	vim/vim/src/crypt_zip.c	69;"	d	file:
DEFAULT_FONT	vim/vim/src/gui_gtk_x11.c	160;"	d	file:
DEFAULT_PYTHON_VER	vim/vim/src/option.c	490;"	d	file:
DEFAULT_PYTHON_VER	vim/vim/src/option.c	492;"	d	file:
DEFAULT_PYTHON_VER	vim/vim/src/option.c	494;"	d	file:
DEFAULT_PYTHON_VER	vim/vim/src/option.c	496;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1301;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1305;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1309;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1313;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1317;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1321;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1322;"	d	file:
DEFAULT_TERM	vim/vim/src/term.c	1326;"	d	file:
DEFFILE	vim/vim/src/GvimExt/Make_ming.mak	/^DEFFILE = gvimext_ming.def$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DFEAT_CSCOPE$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DFEAT_GUI_W32 -DFEAT_CLIPBOARD$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DFEAT_JOB_CHANNEL$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DFEAT_NETBEANS_INTG$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DFEAT_OLE$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DFEAT_XPM_W32$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DMSWINPS$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DNBDEBUG$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -DVIMDLL$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = $(DEFINES) -D_RTLDLL$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES = -DFEAT_$(FEATURES) -DWIN32 -DHAVE_PATHDEF \\$/;"	m
DEFINES	vim/vim/src/Make_bc5.mak	/^DEFINES=$(DEFINES) -DDEBUG -D_DEBUG$/;"	m
DEFINES	vim/vim/src/Make_cyg_ming.mak	/^DEFINES=-DWIN32 -DWINVER=$(WINVER) -D_WIN32_WINNT=$(WINVER) \\$/;"	m
DEFINES	vim/vim/src/Make_dice.mak	/^DEFINES = -DHAVE_TGETENT -DUP_BC_PC_EXTERN -DOSPEED_EXTERN$/;"	m
DEFINES	vim/vim/src/Make_manx.mak	/^DEFINES =$/;"	m
DEFINES	vim/vim/src/Make_sas.mak	/^DEFINES = DEF=NO_ARP DEF=NEWSASC DEF="SASC=658"$/;"	m
DEFINES	vim/vim/src/xxd/Make_ming.mak	/^DEFINES =$/;"	m
DEFINE_INLINES	vim/vim/src/libvterm/bin/unterm.c	11;"	d	file:
DEFINE_INLINES	vim/vim/src/libvterm/src/vterm.c	1;"	d	file:
DEFS	vim/vim/src/auto/config.mk	/^DEFS		= -DHAVE_CONFIG_H$/;"	m
DEF_GUI	vim/vim/src/Make_cyg_ming.mak	/^DEF_GUI=-DFEAT_GUI_W32 -DFEAT_CLIPBOARD$/;"	m
DEL	vim/vim/src/GvimExt/Make_ming.mak	/^DEL = del$/;"	m
DEL	vim/vim/src/GvimExt/Make_ming.mak	/^DEL = rm$/;"	m
DEL	vim/vim/src/Make_cyg_ming.mak	/^DEL = del$/;"	m
DEL	vim/vim/src/Make_cyg_ming.mak	/^DEL = rm$/;"	m
DEL	vim/vim/src/Make_manx.mak	/^DEL = $(SHELL) -c rm -f$/;"	m
DEL	vim/vim/src/Make_sas.mak	/^DEL	= $(SHELL) -c rm -f$/;"	m
DEL	vim/vim/src/ascii.h	114;"	d
DEL	vim/vim/src/ascii.h	35;"	d
DEL	vim/vim/src/testdir/Make_ming.mak	/^DEL = del$/;"	m
DEL	vim/vim/src/testdir/Make_ming.mak	/^DEL = rm -f$/;"	m
DEL	vim/vim/src/xxd/Make_ming.mak	/^DEL = del$/;"	m
DEL	vim/vim/src/xxd/Make_ming.mak	/^DEL = rm$/;"	m
DELDIR	vim/vim/src/testdir/Make_ming.mak	/^DELDIR = rd \/s \/q$/;"	m
DELDIR	vim/vim/src/testdir/Make_ming.mak	/^DELDIR = rm -rf$/;"	m
DELETE_WINDOW_IDX	vim/vim/src/gui_x11.c	89;"	d	file:
DELETION_REGISTER	vim/vim/src/ops.c	29;"	d	file:
DEL_STR	vim/vim/src/ascii.h	115;"	d
DEL_STR	vim/vim/src/ascii.h	36;"	d
DEL_TREE	vim/vim/src/Make_ivc.mak	/^DEL_TREE = deltree \/y$/;"	m
DEL_TREE	vim/vim/src/Make_ivc.mak	/^DEL_TREE = rmdir \/s \/q$/;"	m
DEL_TREE	vim/vim/src/Make_mvc.mak	/^DEL_TREE = rmdir \/s \/q$/;"	m
DEL_TREE	vim/vim/src/VisVim/VisVim.mak	/^DEL_TREE = deltree \/y$/;"	m
DEL_TREE	vim/vim/src/VisVim/VisVim.mak	/^DEL_TREE = rmdir \/s \/q$/;"	m
DEPEND_CFLAGS	vim/vim/src/Makefile	/^DEPEND_CFLAGS = -DPROTO -DDEPEND -DFEAT_GUI $(LINT_CFLAGS)$/;"	m
DEPEND_CFLAGS_FILTER	vim/vim/src/auto/config.mk	/^DEPEND_CFLAGS_FILTER = | sed 's+-I *\/+-isystem \/+g'$/;"	m
DESC	vim/vim/src/os_unix.h	/^typedef struct dsc$descriptor   DESC;$/;"	t	typeref:struct:dsc$descriptor
DESKTOPPATH	vim/vim/src/Makefile	/^DESKTOPPATH = $(DESTDIR)$(DATADIR)\/applications$/;"	m
DESTRUCTOR_FINISH	vim/vim/src/if_python.c	784;"	d	file:
DESTRUCTOR_FINISH	vim/vim/src/if_python3.c	739;"	d	file:
DEST_AUTO	vim/vim/src/Makefile	/^DEST_AUTO = $(DESTDIR)$(AUTOSUBLOC)$/;"	m
DEST_BIN	vim/vim/src/Makefile	/^DEST_BIN = $(DESTDIR)$(BINDIR)$/;"	m
DEST_COL	vim/vim/src/Makefile	/^DEST_COL = $(DESTDIR)$(COLSUBLOC)$/;"	m
DEST_COMP	vim/vim/src/Makefile	/^DEST_COMP = $(DESTDIR)$(COMPSUBLOC)$/;"	m
DEST_FTP	vim/vim/src/Makefile	/^DEST_FTP = $(DESTDIR)$(FTPLUGSUBLOC)$/;"	m
DEST_HELP	vim/vim/src/Makefile	/^DEST_HELP = $(DESTDIR)$(HELPSUBLOC)$/;"	m
DEST_IND	vim/vim/src/Makefile	/^DEST_IND = $(DESTDIR)$(INDSUBLOC)$/;"	m
DEST_KMAP	vim/vim/src/Makefile	/^DEST_KMAP = $(DESTDIR)$(KMAPSUBLOC)$/;"	m
DEST_LANG	vim/vim/src/Makefile	/^DEST_LANG = $(DESTDIR)$(LANGSUBLOC)$/;"	m
DEST_MACRO	vim/vim/src/Makefile	/^DEST_MACRO = $(DESTDIR)$(MACROSUBLOC)$/;"	m
DEST_MAN	vim/vim/src/Makefile	/^DEST_MAN = $(DEST_MAN_TOP)$(MAN1DIR)$/;"	m
DEST_MAN_FR	vim/vim/src/Makefile	/^DEST_MAN_FR = $(DEST_MAN_TOP)\/fr$(MAN1DIR)$/;"	m
DEST_MAN_FR_I	vim/vim/src/Makefile	/^DEST_MAN_FR_I = $(DEST_MAN_TOP)\/fr.ISO8859-1$(MAN1DIR)$/;"	m
DEST_MAN_FR_U	vim/vim/src/Makefile	/^DEST_MAN_FR_U = $(DEST_MAN_TOP)\/fr.UTF-8$(MAN1DIR)$/;"	m
DEST_MAN_IT	vim/vim/src/Makefile	/^DEST_MAN_IT = $(DEST_MAN_TOP)\/it$(MAN1DIR)$/;"	m
DEST_MAN_IT_I	vim/vim/src/Makefile	/^DEST_MAN_IT_I = $(DEST_MAN_TOP)\/it.ISO8859-1$(MAN1DIR)$/;"	m
DEST_MAN_IT_U	vim/vim/src/Makefile	/^DEST_MAN_IT_U = $(DEST_MAN_TOP)\/it.UTF-8$(MAN1DIR)$/;"	m
DEST_MAN_JA_U	vim/vim/src/Makefile	/^DEST_MAN_JA_U = $(DEST_MAN_TOP)\/ja$(MAN1DIR)$/;"	m
DEST_MAN_PL	vim/vim/src/Makefile	/^DEST_MAN_PL = $(DEST_MAN_TOP)\/pl$(MAN1DIR)$/;"	m
DEST_MAN_PL_I	vim/vim/src/Makefile	/^DEST_MAN_PL_I = $(DEST_MAN_TOP)\/pl.ISO8859-2$(MAN1DIR)$/;"	m
DEST_MAN_PL_U	vim/vim/src/Makefile	/^DEST_MAN_PL_U = $(DEST_MAN_TOP)\/pl.UTF-8$(MAN1DIR)$/;"	m
DEST_MAN_RU	vim/vim/src/Makefile	/^DEST_MAN_RU = $(DEST_MAN_TOP)\/ru.KOI8-R$(MAN1DIR)$/;"	m
DEST_MAN_RU_U	vim/vim/src/Makefile	/^DEST_MAN_RU_U = $(DEST_MAN_TOP)\/ru.UTF-8$(MAN1DIR)$/;"	m
DEST_MAN_TOP	vim/vim/src/Makefile	/^DEST_MAN_TOP = $(DESTDIR)$(MANDIR)$/;"	m
DEST_PACK	vim/vim/src/Makefile	/^DEST_PACK = $(DESTDIR)$(PACKSUBLOC)$/;"	m
DEST_PLUG	vim/vim/src/Makefile	/^DEST_PLUG = $(DESTDIR)$(PLUGSUBLOC)$/;"	m
DEST_PRINT	vim/vim/src/Makefile	/^DEST_PRINT = $(DESTDIR)$(PRINTSUBLOC)$/;"	m
DEST_RT	vim/vim/src/Makefile	/^DEST_RT = $(DESTDIR)$(VIMRTLOC)$/;"	m
DEST_SCRIPT	vim/vim/src/Makefile	/^DEST_SCRIPT = $(DESTDIR)$(SCRIPTLOC)$/;"	m
DEST_SPELL	vim/vim/src/Makefile	/^DEST_SPELL = $(DESTDIR)$(SPELLSUBLOC)$/;"	m
DEST_SYN	vim/vim/src/Makefile	/^DEST_SYN = $(DESTDIR)$(SYNSUBLOC)$/;"	m
DEST_TOOLS	vim/vim/src/Makefile	/^DEST_TOOLS = $(DESTDIR)$(TOOLSSUBLOC)$/;"	m
DEST_TUTOR	vim/vim/src/Makefile	/^DEST_TUTOR = $(DESTDIR)$(TUTORSUBLOC)$/;"	m
DEST_VIM	vim/vim/src/Makefile	/^DEST_VIM = $(DESTDIR)$(VIMLOC)$/;"	m
DETACH_MSG_RAW	vim/vim/src/channel.c	3003;"	d	file:
DFLALL	vim/vim/src/ex_cmds.h	38;"	d
DFLT_BDIR	vim/vim/src/os_amiga.h	202;"	d
DFLT_BDIR	vim/vim/src/os_dos.h	115;"	d
DFLT_BDIR	vim/vim/src/os_mac.h	207;"	d
DFLT_BDIR	vim/vim/src/os_unix.h	343;"	d
DFLT_BDIR	vim/vim/src/os_unix.h	345;"	d
DFLT_DIR	vim/vim/src/os_amiga.h	206;"	d
DFLT_DIR	vim/vim/src/os_dos.h	123;"	d
DFLT_DIR	vim/vim/src/os_mac.h	211;"	d
DFLT_DIR	vim/vim/src/os_unix.h	351;"	d
DFLT_DIR	vim/vim/src/os_unix.h	353;"	d
DFLT_EFM	vim/vim/src/option.h	19;"	d
DFLT_EFM	vim/vim/src/option.h	22;"	d
DFLT_EFM	vim/vim/src/option.h	25;"	d
DFLT_EFM	vim/vim/src/option.h	28;"	d
DFLT_EFM	vim/vim/src/option.h	31;"	d
DFLT_EFM	vim/vim/src/option.h	33;"	d
DFLT_ERRORFILE	vim/vim/src/os_amiga.h	40;"	d
DFLT_ERRORFILE	vim/vim/src/os_dos.h	126;"	d
DFLT_ERRORFILE	vim/vim/src/os_mac.h	218;"	d
DFLT_ERRORFILE	vim/vim/src/os_unix.h	365;"	d
DFLT_FF	vim/vim/src/option.h	48;"	d
DFLT_FF	vim/vim/src/option.h	54;"	d
DFLT_FF	vim/vim/src/option.h	59;"	d
DFLT_FFS_VI	vim/vim/src/option.h	50;"	d
DFLT_FFS_VI	vim/vim/src/option.h	56;"	d
DFLT_FFS_VI	vim/vim/src/option.h	62;"	d
DFLT_FFS_VI	vim/vim/src/option.h	65;"	d
DFLT_FFS_VIM	vim/vim/src/option.h	49;"	d
DFLT_FFS_VIM	vim/vim/src/option.h	55;"	d
DFLT_FFS_VIM	vim/vim/src/option.h	60;"	d
DFLT_FONT	vim/vim/src/gui_x11.c	61;"	d	file:
DFLT_FO_VI	vim/vim/src/option.h	105;"	d
DFLT_FO_VIM	vim/vim/src/option.h	106;"	d
DFLT_GREPFORMAT	vim/vim/src/option.h	40;"	d
DFLT_HELPFILE	vim/vim/src/os_amiga.h	120;"	d
DFLT_HELPFILE	vim/vim/src/os_dos.h	88;"	d
DFLT_HELPFILE	vim/vim/src/os_mac.h	174;"	d
DFLT_HELPFILE	vim/vim/src/os_unix.h	223;"	d
DFLT_MAXMEM	vim/vim/src/os_amiga.h	214;"	d
DFLT_MAXMEM	vim/vim/src/os_mac.h	235;"	d
DFLT_MAXMEM	vim/vim/src/os_unix.h	412;"	d
DFLT_MAXMEM	vim/vim/src/os_unix.h	419;"	d
DFLT_MAXMEM	vim/vim/src/os_win32.h	125;"	d
DFLT_MAXMEMTOT	vim/vim/src/os_amiga.h	217;"	d
DFLT_MAXMEMTOT	vim/vim/src/os_mac.h	239;"	d
DFLT_MAXMEMTOT	vim/vim/src/os_unix.h	415;"	d
DFLT_MAXMEMTOT	vim/vim/src/os_unix.h	422;"	d
DFLT_MAXMEMTOT	vim/vim/src/os_win32.h	129;"	d
DFLT_MENU_BG_COLOR	vim/vim/src/gui_x11.c	70;"	d	file:
DFLT_MENU_BG_COLOR	vim/vim/src/gui_x11.c	78;"	d	file:
DFLT_MENU_FG_COLOR	vim/vim/src/gui_x11.c	71;"	d	file:
DFLT_MENU_FG_COLOR	vim/vim/src/gui_x11.c	79;"	d	file:
DFLT_MENU_FONT	vim/vim/src/gui_x11.c	63;"	d	file:
DFLT_MENU_FONT	vim/vim/src/gui_x11.c	65;"	d	file:
DFLT_RUNTIMEPATH	vim/vim/src/os_amiga.h	44;"	d
DFLT_RUNTIMEPATH	vim/vim/src/os_dos.h	127;"	d
DFLT_RUNTIMEPATH	vim/vim/src/os_mac.h	221;"	d
DFLT_RUNTIMEPATH	vim/vim/src/os_unix.h	368;"	d
DFLT_RUNTIMEPATH	vim/vim/src/os_unix.h	371;"	d
DFLT_RUNTIMEPATH	vim/vim/src/os_unix.h	373;"	d
DFLT_SCROLL_BG_COLOR	vim/vim/src/gui_x11.c	72;"	d	file:
DFLT_SCROLL_BG_COLOR	vim/vim/src/gui_x11.c	80;"	d	file:
DFLT_SCROLL_FG_COLOR	vim/vim/src/gui_x11.c	73;"	d	file:
DFLT_SCROLL_FG_COLOR	vim/vim/src/gui_x11.c	81;"	d	file:
DFLT_TEXTAUTO	vim/vim/src/option.h	51;"	d
DFLT_TEXTAUTO	vim/vim/src/option.h	57;"	d
DFLT_TEXTAUTO	vim/vim/src/option.h	63;"	d
DFLT_TEXTAUTO	vim/vim/src/option.h	66;"	d
DFLT_TOOLTIP_BG_COLOR	vim/vim/src/gui_x11.c	74;"	d	file:
DFLT_TOOLTIP_BG_COLOR	vim/vim/src/gui_x11.c	82;"	d	file:
DFLT_TOOLTIP_FG_COLOR	vim/vim/src/gui_x11.c	75;"	d	file:
DFLT_TOOLTIP_FG_COLOR	vim/vim/src/gui_x11.c	83;"	d	file:
DFLT_TOOLTIP_FONT	vim/vim/src/gui_x11.c	67;"	d	file:
DFLT_VDIR	vim/vim/src/os_amiga.h	210;"	d
DFLT_VDIR	vim/vim/src/os_dos.h	119;"	d
DFLT_VDIR	vim/vim/src/os_mac.h	215;"	d
DFLT_VDIR	vim/vim/src/os_unix.h	359;"	d
DFLT_VDIR	vim/vim/src/os_unix.h	361;"	d
DHL_BOTTOM	vim/vim/src/libvterm/src/state.c	214;"	d	file:
DHL_OFF	vim/vim/src/libvterm/src/state.c	212;"	d	file:
DHL_TOP	vim/vim/src/libvterm/src/state.c	213;"	d	file:
DI2HIKEY	vim/vim/src/macros.h	380;"	d
DIALOG_MSG_SIZE	vim/vim/src/vim.h	1526;"	d
DICT_EXACT	vim/vim/src/edit.c	3104;"	d	file:
DICT_FIRST	vim/vim/src/edit.c	3103;"	d	file:
DICT_FLAG_HAS_DEFAULT	vim/vim/src/if_py_both.h	1610;"	d
DICT_FLAG_NONE_DEFAULT	vim/vim/src/if_py_both.h	1612;"	d
DICT_FLAG_POP	vim/vim/src/if_py_both.h	1611;"	d
DICT_FLAG_RETURN_BOOL	vim/vim/src/if_py_both.h	1613;"	d
DICT_FLAG_RETURN_PAIR	vim/vim/src/if_py_both.h	1614;"	d
DICT_MAXNEST	vim/vim/src/eval.c	23;"	d	file:
DID_FOLD	vim/vim/src/screen.c	1161;"	d	file:
DID_LINE	vim/vim/src/screen.c	1160;"	d	file:
DID_NONE	vim/vim/src/screen.c	1159;"	d	file:
DIFF_FILLER	vim/vim/src/diff.c	21;"	d	file:
DIFF_HORIZONTAL	vim/vim/src/diff.c	24;"	d	file:
DIFF_ICASE	vim/vim/src/diff.c	22;"	d	file:
DIFF_INSERT	vim/vim/src/spell.c	318;"	d	file:
DIFF_IWHITE	vim/vim/src/diff.c	23;"	d	file:
DIFF_NONE	vim/vim/src/spell.c	316;"	d	file:
DIFF_VERTICAL	vim/vim/src/diff.c	25;"	d	file:
DIFF_YES	vim/vim/src/spell.c	317;"	d	file:
DIGIT	vim/vim/src/regexp.c	197;"	d	file:
DIP_AFTER	vim/vim/src/vim.h	2465;"	d
DIP_ALL	vim/vim/src/vim.h	2458;"	d
DIP_DIR	vim/vim/src/vim.h	2459;"	d
DIP_ERR	vim/vim/src/vim.h	2460;"	d
DIP_NOAFTER	vim/vim/src/vim.h	2464;"	d
DIP_NORTP	vim/vim/src/vim.h	2463;"	d
DIP_OPT	vim/vim/src/vim.h	2462;"	d
DIP_START	vim/vim/src/vim.h	2461;"	d
DIRECTX	vim/vim/src/Make_cyg_ming.mak	/^DIRECTX=no$/;"	m
DIRECTX_DEFS	vim/vim/src/Make_mvc.mak	/^DIRECTX_DEFS	= -DFEAT_DIRECTX -DDYNAMIC_DIRECTX$/;"	m
DIRECTX_INCL	vim/vim/src/Make_mvc.mak	/^DIRECTX_INCL	= gui_dwrite.h$/;"	m
DIRECTX_OBJ	vim/vim/src/Make_mvc.mak	/^DIRECTX_OBJ	= $(OUTDIR)\\gui_dwrite.obj$/;"	m
DIRMOD	vim/vim/src/Makefile	/^DIRMOD = 755$/;"	m
DIRSLASH	vim/vim/src/Make_cyg_ming.mak	/^DIRSLASH = \/$/;"	m
DIRSLASH	vim/vim/src/Make_cyg_ming.mak	/^DIRSLASH = \\\\$/;"	m
DIRSLASH	vim/vim/src/testdir/Make_ming.mak	/^DIRSLASH = \/$/;"	m
DIRSLASH	vim/vim/src/testdir/Make_ming.mak	/^DIRSLASH = \\\\$/;"	m
DISTDIR	vim/vim/src/libvterm/Makefile	/^DISTDIR=libvterm-$(VERSION)$/;"	m
DI_FLAGS_ALLOC	vim/vim/src/structs.h	1327;"	d
DI_FLAGS_FIX	vim/vim/src/structs.h	1325;"	d
DI_FLAGS_LOCK	vim/vim/src/structs.h	1326;"	d
DI_FLAGS_RO	vim/vim/src/structs.h	1323;"	d
DI_FLAGS_RO_SBX	vim/vim/src/structs.h	1324;"	d
DLG_ALLOC_SIZE	vim/vim/src/gui_w32.c	4365;"	d	file:
DLG_BUTTON_SEP	vim/vim/src/vim.h	1256;"	d
DLG_FONT_NAME	vim/vim/src/gui_w32.c	225;"	d	file:
DLG_FONT_POINT_SIZE	vim/vim/src/gui_w32.c	226;"	d	file:
DLG_HOTKEY_CHAR	vim/vim/src/vim.h	1257;"	d
DLG_ICON_HEIGHT	vim/vim/src/gui_w32.c	223;"	d	file:
DLG_ICON_WIDTH	vim/vim/src/gui_w32.c	222;"	d	file:
DLG_MIN_MAX_HEIGHT	vim/vim/src/gui_w32.c	228;"	d	file:
DLG_MIN_MAX_WIDTH	vim/vim/src/gui_w32.c	227;"	d	file:
DLG_MIN_WIDTH	vim/vim/src/gui_w32.c	224;"	d	file:
DLG_NONBUTTON_CONTROL	vim/vim/src/gui_w32.c	230;"	d	file:
DLG_OLD_STYLE_PADDING_X	vim/vim/src/gui_w32.c	218;"	d	file:
DLG_OLD_STYLE_PADDING_Y	vim/vim/src/gui_w32.c	219;"	d	file:
DLG_PADDING_X	vim/vim/src/gui_w32.c	216;"	d	file:
DLG_PADDING_Y	vim/vim/src/gui_w32.c	217;"	d	file:
DLG_VERT_PADDING_X	vim/vim/src/gui_w32.c	220;"	d	file:
DLG_VERT_PADDING_Y	vim/vim/src/gui_w32.c	221;"	d	file:
DLL	vim/vim/src/GvimExt/Make_ming.mak	/^DLL  := gvimext.dll$/;"	m
DLLGETVERSIONPROC	vim/vim/src/gui_w32.c	/^typedef HRESULT (WINAPI* DLLGETVERSIONPROC)(DLLVERSIONINFO *);$/;"	t	file:
DLLTARGET	vim/vim/src/Make_bc5.mak	/^DLLTARGET = joebob$/;"	m
DLLTARGET	vim/vim/src/Make_bc5.mak	/^DLLTARGET = vim32.dll$/;"	m
DLLTARGET	vim/vim/src/Make_bc5.mak	/^DLLTARGET = vim32d.dll$/;"	m
DLLVERSIONINFO	vim/vim/src/gui_w32.c	/^} DLLVERSIONINFO;$/;"	t	typeref:struct:_DllVersionInfo	file:
DOBUF_CURRENT	vim/vim/src/vim.h	1032;"	d
DOBUF_DEL	vim/vim/src/vim.h	1028;"	d
DOBUF_FIRST	vim/vim/src/vim.h	1033;"	d
DOBUF_GOTO	vim/vim/src/vim.h	1025;"	d
DOBUF_LAST	vim/vim/src/vim.h	1034;"	d
DOBUF_MOD	vim/vim/src/vim.h	1035;"	d
DOBUF_SPLIT	vim/vim/src/vim.h	1026;"	d
DOBUF_UNLOAD	vim/vim/src/vim.h	1027;"	d
DOBUF_WIPE	vim/vim/src/vim.h	1029;"	d
DOCMD_EXCRESET	vim/vim/src/vim.h	1082;"	d
DOCMD_KEEPLINE	vim/vim/src/vim.h	1083;"	d
DOCMD_KEYTYPED	vim/vim/src/vim.h	1081;"	d
DOCMD_NOWAIT	vim/vim/src/vim.h	1079;"	d
DOCMD_REPEAT	vim/vim/src/vim.h	1080;"	d
DOCMD_VERBOSE	vim/vim/src/vim.h	1078;"	d
DOCS	vim/vim/runtime/doc/Makefile	/^DOCS = \\$/;"	m
DONE_ACTION	vim/vim/src/fold.c	89;"	d	file:
DONE_FOLD	vim/vim/src/fold.c	90;"	d	file:
DONE_NOTHING	vim/vim/src/fold.c	88;"	d	file:
DOPY_FUNC	vim/vim/src/if_py_both.h	32;"	d
DOSINST	vim/vim/src/dosinst.c	19;"	d	file:
DOSO_GVIMRC	vim/vim/src/vim.h	2389;"	d
DOSO_NONE	vim/vim/src/vim.h	2387;"	d
DOSO_VIMRC	vim/vim/src/vim.h	2388;"	d
DOSTMP	vim/vim/src/testdir/Make_dos.mak	/^DOSTMP = dostmp$/;"	m
DOSTMP_INFILES	vim/vim/src/testdir/Make_dos.mak	/^DOSTMP_INFILES = $(DOSTMP_OUTFILES:.out=.in)$/;"	m
DOSTMP_OUTFILES	vim/vim/src/testdir/Make_dos.mak	/^DOSTMP_OUTFILES = $(TEST_OUTFILES:test=dostmp\\test)$/;"	m
DOS_LIBRARY	vim/vim/src/os_amiga.c	239;"	d	file:
DOS_MOUSE	vim/vim/src/feature.h	1072;"	d
DOUBLE2UINT16	vim/vim/src/gui_beval.c	1115;"	d	file:
DOUBLE2UINT16	vim/vim/src/gui_beval.c	1124;"	d	file:
DOUBLE_CLICK	vim/vim/src/os_mswin.c	71;"	d	file:
DOUBLE_CLICK	vim/vim/src/os_win32.c	81;"	d	file:
DO_AUTOCHDIR	vim/vim/src/macros.h	304;"	d
DO_AUTOCHDIR	vim/vim/src/macros.h	306;"	d
DO_DECLARE_EXCMD	vim/vim/src/ex_docmd.c	498;"	d	file:
DO_INIT	vim/vim/src/vim.h	1788;"	d
DO_NOT_FREE_CNT	vim/vim/src/vim.h	2486;"	d
DRAGQVAL	vim/vim/src/gui_w32.c	3785;"	d	file:
DRAWER_INSET	vim/vim/src/gui_mac.c	6408;"	d	file:
DRAWER_SIZE	vim/vim/src/gui_mac.c	6407;"	d	file:
DRAW_BOLD	vim/vim/src/gui.h	138;"	d
DRAW_CURSOR	vim/vim/src/gui.h	144;"	d
DRAW_END	vim/vim/src/gui_photon.c	838;"	d	file:
DRAW_ITALIC	vim/vim/src/gui.h	142;"	d
DRAW_START	vim/vim/src/gui_photon.c	837;"	d	file:
DRAW_TRANSP	vim/vim/src/gui.h	137;"	d
DRAW_UNDERC	vim/vim/src/gui.h	140;"	d
DRAW_UNDERL	vim/vim/src/gui.h	139;"	d
DT_CSCOPE	vim/vim/src/vim.h	1175;"	d
DT_FIRST	vim/vim/src/vim.h	1170;"	d
DT_FREE	vim/vim/src/vim.h	1177;"	d
DT_HELP	vim/vim/src/vim.h	1173;"	d
DT_JUMP	vim/vim/src/vim.h	1174;"	d
DT_LAST	vim/vim/src/vim.h	1171;"	d
DT_LTAG	vim/vim/src/vim.h	1176;"	d
DT_NEXT	vim/vim/src/vim.h	1168;"	d
DT_POP	vim/vim/src/vim.h	1167;"	d
DT_PREV	vim/vim/src/vim.h	1169;"	d
DT_SELECT	vim/vim/src/vim.h	1172;"	d
DT_TAG	vim/vim/src/vim.h	1166;"	d
DUMPFLAG_ALLCAP	vim/vim/src/spell.c	8523;"	d	file:
DUMPFLAG_COUNT	vim/vim/src/spell.c	8520;"	d	file:
DUMPFLAG_ICASE	vim/vim/src/spell.c	8521;"	d	file:
DUMPFLAG_KEEPCASE	vim/vim/src/spell.c	8519;"	d	file:
DUMPFLAG_ONECAP	vim/vim/src/spell.c	8522;"	d	file:
DUM_LEN	vim/vim/src/getchar.c	3043;"	d	file:
DWL_OFF	vim/vim/src/libvterm/src/state.c	209;"	d	file:
DWL_ON	vim/vim/src/libvterm/src/state.c	210;"	d	file:
DWORD	vim/vim/src/gui_w32.c	/^typedef int DWORD;$/;"	t	file:
DWORD	vim/vim/src/os_mswin.c	/^typedef int DWORD;$/;"	t	file:
DWORD	vim/vim/src/os_win32.c	/^typedef int DWORD;$/;"	t	file:
DWORD	vim/vim/src/winclip.c	/^typedef int DWORD;$/;"	t	file:
DWriteContext	vim/vim/src/gui_dwrite.cpp	/^    DWriteContext();$/;"	p	struct:DWriteContext	file:	access:public	signature:()
DWriteContext	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::DWriteContext() :$/;"	f	class:DWriteContext	signature:()
DWriteContext	vim/vim/src/gui_dwrite.cpp	/^struct DWriteContext {$/;"	s	file:
DWriteContext	vim/vim/src/gui_dwrite.h	/^typedef struct DWriteContext DWriteContext;$/;"	t	typeref:struct:DWriteContext
DWriteContext::DWriteContext	vim/vim/src/gui_dwrite.cpp	/^    DWriteContext();$/;"	p	struct:DWriteContext	file:	access:public	signature:()
DWriteContext::DWriteContext	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::DWriteContext() :$/;"	f	class:DWriteContext	signature:()
DWriteContext::DrawText	vim/vim/src/gui_dwrite.cpp	/^    void DrawText(HDC hdc, const WCHAR* text, int len,$/;"	p	struct:DWriteContext	file:	access:public	signature:(HDC hdc, const WCHAR* text, int len, int x, int y, int w, int h, int cellWidth, COLORREF color)
DWriteContext::DrawText	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::DrawText(HDC hdc, const WCHAR* text, int len,$/;"	f	class:DWriteContext	signature:(HDC hdc, const WCHAR* text, int len, int x, int y, int w, int h, int cellWidth, COLORREF color)
DWriteContext::GetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^    DWriteRenderingParams *GetRenderingParams($/;"	p	struct:DWriteContext	file:	access:public	signature:( DWriteRenderingParams *params)
DWriteContext::GetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::GetRenderingParams($/;"	f	class:DWriteContext	signature:( DWriteRenderingParams *params)
DWriteContext::PixelsToDipsX	vim/vim/src/gui_dwrite.cpp	/^    float PixelsToDipsX(int x);$/;"	p	struct:DWriteContext	file:	access:public	signature:(int x)
DWriteContext::PixelsToDipsX	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::PixelsToDipsX(int x)$/;"	f	class:DWriteContext	signature:(int x)
DWriteContext::PixelsToDipsY	vim/vim/src/gui_dwrite.cpp	/^    float PixelsToDipsY(int y);$/;"	p	struct:DWriteContext	file:	access:public	signature:(int y)
DWriteContext::PixelsToDipsY	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::PixelsToDipsY(int y)$/;"	f	class:DWriteContext	signature:(int y)
DWriteContext::SetFont	vim/vim/src/gui_dwrite.cpp	/^    void SetFont(HFONT hFont);$/;"	p	struct:DWriteContext	file:	access:public	signature:(HFONT hFont)
DWriteContext::SetFont	vim/vim/src/gui_dwrite.cpp	/^    void SetFont(const LOGFONTW &logFont);$/;"	p	struct:DWriteContext	file:	access:public	signature:(const LOGFONTW &logFont)
DWriteContext::SetFont	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetFont(HFONT hFont)$/;"	f	class:DWriteContext	signature:(HFONT hFont)
DWriteContext::SetFont	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetFont(const LOGFONTW &logFont)$/;"	f	class:DWriteContext	signature:(const LOGFONTW &logFont)
DWriteContext::SetLOGFONT	vim/vim/src/gui_dwrite.cpp	/^    HRESULT SetLOGFONT(const LOGFONTW &logFont, float fontSize);$/;"	p	struct:DWriteContext	file:	access:public	signature:(const LOGFONTW &logFont, float fontSize)
DWriteContext::SetLOGFONT	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetLOGFONT(const LOGFONTW &logFont, float fontSize)$/;"	f	class:DWriteContext	signature:(const LOGFONTW &logFont, float fontSize)
DWriteContext::SetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^    void SetRenderingParams($/;"	p	struct:DWriteContext	file:	access:public	signature:( const DWriteRenderingParams *params)
DWriteContext::SetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetRenderingParams($/;"	f	class:DWriteContext	signature:( const DWriteRenderingParams *params)
DWriteContext::mBrush	vim/vim/src/gui_dwrite.cpp	/^    ID2D1SolidColorBrush *mBrush;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mD2D1Factory	vim/vim/src/gui_dwrite.cpp	/^    ID2D1Factory *mD2D1Factory;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mDWriteFactory	vim/vim/src/gui_dwrite.cpp	/^    IDWriteFactory *mDWriteFactory;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mDpiScaleX	vim/vim/src/gui_dwrite.cpp	/^    FLOAT mDpiScaleX;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mDpiScaleY	vim/vim/src/gui_dwrite.cpp	/^    FLOAT mDpiScaleY;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mDrawing	vim/vim/src/gui_dwrite.cpp	/^    bool mDrawing;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mFontStyle	vim/vim/src/gui_dwrite.cpp	/^    DWRITE_FONT_STYLE mFontStyle;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mFontWeight	vim/vim/src/gui_dwrite.cpp	/^    DWRITE_FONT_WEIGHT mFontWeight;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mGdiInterop	vim/vim/src/gui_dwrite.cpp	/^    IDWriteGdiInterop *mGdiInterop;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mLastHFont	vim/vim/src/gui_dwrite.cpp	/^    HFONT mLastHFont;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mRT	vim/vim/src/gui_dwrite.cpp	/^    ID2D1DCRenderTarget *mRT;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mRenderingParams	vim/vim/src/gui_dwrite.cpp	/^    IDWriteRenderingParams *mRenderingParams;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mTextAntialiasMode	vim/vim/src/gui_dwrite.cpp	/^    D2D1_TEXT_ANTIALIAS_MODE mTextAntialiasMode;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::mTextFormat	vim/vim/src/gui_dwrite.cpp	/^    IDWriteTextFormat *mTextFormat;$/;"	m	struct:DWriteContext	file:	access:public
DWriteContext::~DWriteContext	vim/vim/src/gui_dwrite.cpp	/^    virtual ~DWriteContext();$/;"	p	struct:DWriteContext	file:	access:public	signature:()
DWriteContext::~DWriteContext	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::~DWriteContext()$/;"	f	class:DWriteContext	signature:()
DWriteContext_BeginDraw	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_BeginDraw(DWriteContext *ctx)$/;"	f	signature:(DWriteContext *ctx)
DWriteContext_BeginDraw	vim/vim/src/gui_dwrite.h	/^void DWriteContext_BeginDraw(DWriteContext *ctx);$/;"	p	signature:(DWriteContext *ctx)
DWriteContext_BindDC	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_BindDC(DWriteContext *ctx, HDC hdc, RECT *rect)$/;"	f	signature:(DWriteContext *ctx, HDC hdc, RECT *rect)
DWriteContext_BindDC	vim/vim/src/gui_dwrite.h	/^void DWriteContext_BindDC(DWriteContext *ctx, HDC hdc, RECT *rect);$/;"	p	signature:(DWriteContext *ctx, HDC hdc, RECT *rect)
DWriteContext_Close	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_Close(DWriteContext *ctx)$/;"	f	signature:(DWriteContext *ctx)
DWriteContext_Close	vim/vim/src/gui_dwrite.h	/^void DWriteContext_Close(DWriteContext *ctx);$/;"	p	signature:(DWriteContext *ctx)
DWriteContext_DrawText	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_DrawText($/;"	f	signature:( DWriteContext *ctx, HDC hdc, const WCHAR* text, int len, int x, int y, int w, int h, int cellWidth, COLORREF color)
DWriteContext_DrawText	vim/vim/src/gui_dwrite.h	/^void DWriteContext_DrawText($/;"	p	signature:( DWriteContext *ctx, HDC hdc, const WCHAR* text, int len, int x, int y, int w, int h, int cellWidth, COLORREF color)
DWriteContext_EndDraw	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_EndDraw(DWriteContext *ctx)$/;"	f	signature:(DWriteContext *ctx)
DWriteContext_EndDraw	vim/vim/src/gui_dwrite.h	/^void DWriteContext_EndDraw(DWriteContext *ctx);$/;"	p	signature:(DWriteContext *ctx)
DWriteContext_GetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_GetRenderingParams($/;"	f	signature:( DWriteContext *ctx, DWriteRenderingParams *params)
DWriteContext_GetRenderingParams	vim/vim/src/gui_dwrite.h	/^DWriteRenderingParams *DWriteContext_GetRenderingParams($/;"	p	signature:( DWriteContext *ctx, DWriteRenderingParams *params)
DWriteContext_Open	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_Open(void)$/;"	f	signature:(void)
DWriteContext_Open	vim/vim/src/gui_dwrite.h	/^DWriteContext *DWriteContext_Open(void);$/;"	p	signature:(void)
DWriteContext_SetFont	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_SetFont(DWriteContext *ctx, HFONT hFont)$/;"	f	signature:(DWriteContext *ctx, HFONT hFont)
DWriteContext_SetFont	vim/vim/src/gui_dwrite.h	/^void DWriteContext_SetFont(DWriteContext *ctx, HFONT hFont);$/;"	p	signature:(DWriteContext *ctx, HFONT hFont)
DWriteContext_SetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^DWriteContext_SetRenderingParams($/;"	f	signature:( DWriteContext *ctx, const DWriteRenderingParams *params)
DWriteContext_SetRenderingParams	vim/vim/src/gui_dwrite.h	/^void DWriteContext_SetRenderingParams($/;"	p	signature:( DWriteContext *ctx, const DWriteRenderingParams *params)
DWriteCreateFactory	vim/vim/src/gui_dwrite.cpp	60;"	d	file:
DWriteRenderingParams	vim/vim/src/gui_dwrite.h	/^typedef struct DWriteRenderingParams {$/;"	s
DWriteRenderingParams	vim/vim/src/gui_dwrite.h	/^} DWriteRenderingParams;$/;"	t	typeref:struct:DWriteRenderingParams
DWriteRenderingParams::clearTypeLevel	vim/vim/src/gui_dwrite.h	/^    float clearTypeLevel;$/;"	m	struct:DWriteRenderingParams	access:public
DWriteRenderingParams::enhancedContrast	vim/vim/src/gui_dwrite.h	/^    float enhancedContrast;$/;"	m	struct:DWriteRenderingParams	access:public
DWriteRenderingParams::gamma	vim/vim/src/gui_dwrite.h	/^    float gamma;$/;"	m	struct:DWriteRenderingParams	access:public
DWriteRenderingParams::pixelGeometry	vim/vim/src/gui_dwrite.h	/^    int pixelGeometry;$/;"	m	struct:DWriteRenderingParams	access:public
DWriteRenderingParams::renderingMode	vim/vim/src/gui_dwrite.h	/^    int renderingMode;$/;"	m	struct:DWriteRenderingParams	access:public
DWriteRenderingParams::textAntialiasMode	vim/vim/src/gui_dwrite.h	/^    int textAntialiasMode;$/;"	m	struct:DWriteRenderingParams	access:public
DWrite_Final	vim/vim/src/gui_dwrite.cpp	/^DWrite_Final(void)$/;"	f	signature:(void)
DWrite_Final	vim/vim/src/gui_dwrite.h	/^void DWrite_Final(void);$/;"	p	signature:(void)
DWrite_Init	vim/vim/src/gui_dwrite.cpp	/^DWrite_Init(void)$/;"	f	signature:(void)
DWrite_Init	vim/vim/src/gui_dwrite.h	/^void DWrite_Init(void);$/;"	p	signature:(void)
DYNAMIC_ICONV	vim/vim/src/os_vms_conf.h	170;"	d
DYNAMIC_ICONV	vim/vim/src/os_vms_conf.h	179;"	d
DYNAMIC_ICONV_DLL	vim/vim/src/mbyte.c	4646;"	d	file:
DYNAMIC_ICONV_DLL_ALT1	vim/vim/src/mbyte.c	4647;"	d	file:
DYNAMIC_ICONV_DLL_ALT2	vim/vim/src/mbyte.c	4648;"	d	file:
DYNAMIC_ICONV_DLL_ALT3	vim/vim/src/mbyte.c	4649;"	d	file:
DYNAMIC_IME	vim/vim/src/Make_bc5.mak	/^DYNAMIC_IME = yes$/;"	m
DYNAMIC_IME	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_IME=yes$/;"	m
DYNAMIC_IME	vim/vim/src/Make_mvc.mak	/^DYNAMIC_IME = yes$/;"	m
DYNAMIC_LUA	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_LUA=yes$/;"	m
DYNAMIC_MSVCRT_DLL	vim/vim/src/mbyte.c	4652;"	d	file:
DYNAMIC_MZSCHEME	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_MZSCHEME=yes$/;"	m
DYNAMIC_PERL	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_PERL=yes$/;"	m
DYNAMIC_PYTHON	vim/vim/src/Make_bc5.mak	/^DYNAMIC_PYTHON=yes$/;"	m
DYNAMIC_PYTHON	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_PYTHON=yes$/;"	m
DYNAMIC_PYTHON	vim/vim/src/Make_mvc.mak	/^DYNAMIC_PYTHON=yes$/;"	m
DYNAMIC_PYTHON3	vim/vim/src/Make_bc5.mak	/^DYNAMIC_PYTHON3=yes$/;"	m
DYNAMIC_PYTHON3	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_PYTHON3=yes$/;"	m
DYNAMIC_PYTHON3	vim/vim/src/Make_mvc.mak	/^DYNAMIC_PYTHON3=yes$/;"	m
DYNAMIC_PYTHON3_DLL	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_PYTHON3_DLL=python$(PYTHON3_VER).dll$/;"	m
DYNAMIC_PYTHON_DLL	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_PYTHON_DLL=python$(PYTHON_VER).dll$/;"	m
DYNAMIC_RUBY	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_RUBY=yes$/;"	m
DYNAMIC_TCL	vim/vim/src/Make_cyg_ming.mak	/^DYNAMIC_TCL=yes$/;"	m
DYNAMIC_TCL_DLL	vim/vim/src/if_tcl.c	153;"	d	file:
DYNAMIC_TCL_VER	vim/vim/src/if_tcl.c	156;"	d	file:
DY_LASTLINE	vim/vim/src/option.h	459;"	d
DY_TRUNCATE	vim/vim/src/option.h	460;"	d
DY_UHEX	vim/vim/src/option.h	461;"	d
DebugMsg	vim/vim/src/VisVim/Commands.cpp	/^static void DebugMsg(char* Msg, char* Arg = NULL);$/;"	p	file:	signature:(char* Msg, char* Arg = NULL)
DebugMsg	vim/vim/src/VisVim/Commands.cpp	/^static void DebugMsg(char* Msg, char* Arg)$/;"	f	file:	signature:(char* Msg, char* Arg)
DeleteAnyLingerer	vim/vim/src/if_xcmdsrv.c	/^DeleteAnyLingerer($/;"	f	file:	signature:( Display *dpy, Window win)
DeleteAnyLingerer	vim/vim/src/if_xcmdsrv.c	/^static void	DeleteAnyLingerer(Display *dpy, Window w);$/;"	p	file:	signature:(Display *dpy, Window w)
DeleteBrush	vim/vim/src/gui_w32.c	4128;"	d	file:
DeleteObject	vim/vim/src/VisVim/OleAut.cpp	/^void COleAutomationControl::DeleteObject ()$/;"	f	class:COleAutomationControl	signature:()
Destroy	vim/vim/src/gui_at_sb.c	/^Destroy(Widget w)$/;"	f	file:	signature:(Widget w)
Destroy	vim/vim/src/gui_at_sb.c	/^static void Destroy(Widget);$/;"	p	file:
Destroy	vim/vim/src/gui_xmebw.c	/^Destroy(Widget w)$/;"	f	file:	signature:(Widget w)
Destroy	vim/vim/src/gui_xmebw.c	/^static void Destroy(Widget w);$/;"	p	file:	signature:(Widget w)
DialogAcceptCB	vim/vim/src/gui_motif.c	/^DialogAcceptCB($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XtPointer call_data)
DialogAcceptCB	vim/vim/src/gui_motif.c	/^static void DialogAcceptCB(Widget, XtPointer, XtPointer);$/;"	p	file:
DialogCancelCB	vim/vim/src/gui_motif.c	/^DialogCancelCB($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XtPointer call_data UNUSED)
DialogCancelCB	vim/vim/src/gui_motif.c	/^static void DialogCancelCB(Widget, XtPointer, XtPointer);$/;"	p	file:
DialogHotkeyFilterProc	vim/vim/src/gui_mac.c	/^DialogHotkeyFilterProc ($/;"	f	file:	signature:( DialogRef theDialog, EventRecord *event, DialogItemIndex *itemHit)
DialogInfo	vim/vim/src/gui_gtk.c	/^} DialogInfo;$/;"	t	typeref:struct:_DialogInfo	file:
DictionaryAsMapping	vim/vim/src/if_py_both.h	/^static PyMappingMethods DictionaryAsMapping = {$/;"	v
DictionaryAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods DictionaryAsSeq = {$/;"	v
DictionaryAssItem	vim/vim/src/if_py_both.h	/^DictionaryAssItem($/;"	f	signature:( DictionaryObject *self, PyObject *keyObject, PyObject *valObject)
DictionaryAttrs	vim/vim/src/if_py_both.h	/^static char *DictionaryAttrs[] = {$/;"	v
DictionaryConstructor	vim/vim/src/if_py_both.h	/^DictionaryConstructor(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)$/;"	f	signature:(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)
DictionaryContains	vim/vim/src/if_py_both.h	/^DictionaryContains(DictionaryObject *self, PyObject *keyObject)$/;"	f	signature:(DictionaryObject *self, PyObject *keyObject)
DictionaryDestructor	vim/vim/src/if_py_both.h	/^DictionaryDestructor(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionaryDir	vim/vim/src/if_py_both.h	/^DictionaryDir(PyObject *self)$/;"	f	signature:(PyObject *self)
DictionaryGet	vim/vim/src/if_py_both.h	/^DictionaryGet(DictionaryObject *self, PyObject *args)$/;"	f	signature:(DictionaryObject *self, PyObject *args)
DictionaryGetattr	vim/vim/src/if_python.c	/^DictionaryGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
DictionaryGetattr	vim/vim/src/if_python.c	/^static PyObject *DictionaryGetattr(PyObject *, char*);$/;"	p	file:	signature:(PyObject *, char*)
DictionaryGetattro	vim/vim/src/if_python3.c	/^DictionaryGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
DictionaryGetattro	vim/vim/src/if_python3.c	/^static PyObject *DictionaryGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
DictionaryHasKey	vim/vim/src/if_py_both.h	/^DictionaryHasKey(DictionaryObject *self, PyObject *keyObject)$/;"	f	signature:(DictionaryObject *self, PyObject *keyObject)
DictionaryItem	vim/vim/src/if_py_both.h	/^DictionaryItem(DictionaryObject *self, PyObject *keyObject)$/;"	f	signature:(DictionaryObject *self, PyObject *keyObject)
DictionaryIter	vim/vim/src/if_py_both.h	/^DictionaryIter(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionaryIterNext	vim/vim/src/if_py_both.h	/^DictionaryIterNext(dictiterinfo_T **dii)$/;"	f	signature:(dictiterinfo_T **dii)
DictionaryLength	vim/vim/src/if_py_both.h	/^DictionaryLength(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionaryListItems	vim/vim/src/if_py_both.h	/^DictionaryListItems(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionaryListKeys	vim/vim/src/if_py_both.h	/^DictionaryListKeys(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionaryListObjects	vim/vim/src/if_py_both.h	/^DictionaryListObjects(DictionaryObject *self, hi_to_py hiconvert)$/;"	f	signature:(DictionaryObject *self, hi_to_py hiconvert)
DictionaryListValues	vim/vim/src/if_py_both.h	/^DictionaryListValues(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionaryMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef DictionaryMethods[] = {$/;"	v	typeref:struct:PyMethodDef
DictionaryNew	vim/vim/src/if_py_both.h	/^DictionaryNew(PyTypeObject *subtype, dict_T *dict)$/;"	f	signature:(PyTypeObject *subtype, dict_T *dict)
DictionaryObject	vim/vim/src/if_py_both.h	/^} DictionaryObject;$/;"	t	typeref:struct:__anon100
DictionaryPop	vim/vim/src/if_py_both.h	/^DictionaryPop(DictionaryObject *self, PyObject *args)$/;"	f	signature:(DictionaryObject *self, PyObject *args)
DictionaryPopItem	vim/vim/src/if_py_both.h	/^DictionaryPopItem(DictionaryObject *self)$/;"	f	signature:(DictionaryObject *self)
DictionarySetattr	vim/vim/src/if_py_both.h	/^DictionarySetattr(DictionaryObject *self, char *name, PyObject *valObject)$/;"	f	signature:(DictionaryObject *self, char *name, PyObject *valObject)
DictionarySetattro	vim/vim/src/if_python3.c	/^DictionarySetattro(PyObject *self, PyObject *nameobj, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj, PyObject *val)
DictionarySetattro	vim/vim/src/if_python3.c	/^static int DictionarySetattro(PyObject *, PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *, PyObject *)
DictionaryType	vim/vim/src/if_py_both.h	/^static PyTypeObject DictionaryType;$/;"	v
DictionaryUpdate	vim/vim/src/if_py_both.h	/^DictionaryUpdate(DictionaryObject *self, PyObject *args, PyObject *kwargs)$/;"	f	signature:(DictionaryObject *self, PyObject *args, PyObject *kwargs)
DictionaryUpdate	vim/vim/src/if_py_both.h	/^static PyObject *DictionaryUpdate(DictionaryObject *, PyObject *, PyObject *);$/;"	p	signature:(DictionaryObject *, PyObject *, PyObject *)
Display	vim/vim/src/proto.h	24;"	d
Display	vim/vim/src/xpm/include/simx.h	/^typedef HDC Display;			\/* this should be similar *\/$/;"	t
DllCanUnloadNow	vim/vim/src/GvimExt/gvimext.cpp	/^STDAPI DllCanUnloadNow(void)$/;"	f	signature:(void)
DllCanUnloadNow	vim/vim/src/VisVim/VisVim.cpp	/^STDAPI DllCanUnloadNow (void)$/;"	f	signature:(void)
DllGetClassObject	vim/vim/src/GvimExt/gvimext.cpp	/^STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppvOut)$/;"	f	signature:(REFCLSID rclsid, REFIID riid, LPVOID *ppvOut)
DllGetClassObject	vim/vim/src/VisVim/VisVim.cpp	/^STDAPI DllGetClassObject (REFCLSID rclsid, REFIID riid, LPVOID * ppv)$/;"	f	signature:(REFCLSID rclsid, REFIID riid, LPVOID * ppv)
DllMain	vim/vim/src/GvimExt/gvimext.cpp	/^DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID  \/* lpReserved *\/)$/;"	f	signature:(HINSTANCE hInstance, DWORD dwReason, LPVOID )
DllMain	vim/vim/src/os_w32dll.c	/^BOOL WINAPI DllMain(HINSTANCE  hinstDLL, DWORD	fdwReason, LPVOID  lpvReserved)$/;"	f	signature:(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
DllRegisterServer	vim/vim/src/VisVim/VisVim.cpp	/^STDAPI DllRegisterServer (void)$/;"	f	signature:(void)
DllUnregisterServer	vim/vim/src/VisVim/VisVim.cpp	/^STDAPI DllUnregisterServer (void)$/;"	f	signature:(void)
DoDataExchange	vim/vim/src/VisVim/Commands.cpp	/^	virtual void DoDataExchange(CDataExchange * pDX);	\/\/ DDX\/DDV support$/;"	p	class:CMainDialog	file:	access:protected	signature:(CDataExchange * pDX)
DoDataExchange	vim/vim/src/VisVim/Commands.cpp	/^void CMainDialog::DoDataExchange(CDataExchange * pDX)$/;"	f	class:CMainDialog	signature:(CDataExchange * pDX)
DoPyCommand	vim/vim/src/if_python.c	/^DoPyCommand(const char *cmd, rangeinitializer init_range, runner run, void *arg)$/;"	f	file:	signature:(const char *cmd, rangeinitializer init_range, runner run, void *arg)
DoPyCommand	vim/vim/src/if_python3.c	/^DoPyCommand(const char *cmd, rangeinitializer init_range, runner run, void *arg)$/;"	f	file:	signature:(const char *cmd, rangeinitializer init_range, runner run, void *arg)
DoRegisterName	vim/vim/src/if_xcmdsrv.c	/^DoRegisterName(Display *dpy, char_u *name)$/;"	f	file:	signature:(Display *dpy, char_u *name)
DoRegisterName	vim/vim/src/if_xcmdsrv.c	/^static int	DoRegisterName(Display *dpy, char_u *name);$/;"	p	file:	signature:(Display *dpy, char_u *name)
DocumentOpen	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::DocumentOpen(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
DocumentSave	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::DocumentSave(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
DrawGlyphRun	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawGlyphRun)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, __in DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, IUnknown* clientDrawingEffect)
DrawInlineObject	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawInlineObject)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect)
DrawStrikethrough	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawStrikethrough)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, __in DWRITE_STRIKETHROUGH const* strikethrough, IUnknown* clientDrawingEffect)
DrawText	vim/vim/src/gui_dwrite.cpp	/^    void DrawText(HDC hdc, const WCHAR* text, int len,$/;"	p	struct:DWriteContext	file:	access:public	signature:(HDC hdc, const WCHAR* text, int len, int x, int y, int w, int h, int cellWidth, COLORREF color)
DrawText	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::DrawText(HDC hdc, const WCHAR* text, int len,$/;"	f	class:DWriteContext	signature:(HDC hdc, const WCHAR* text, int len, int x, int y, int w, int h, int cellWidth, COLORREF color)
DrawUnderline	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawUnderline)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, __in DWRITE_UNDERLINE const* underline, IUnknown* clientDrawingEffect)
DumpPutS	vim/vim/src/os_mswin.c	/^DumpPutS(const char *psz UNUSED)$/;"	f	signature:(const char *psz UNUSED)
E	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
E	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
E	vim/vim/runtime/macros/maze/mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
E0_CFLAGS	vim/vim/src/Make_mvc.mak	/^E0_CFLAGS = $(CFLAGS:\\=\\\\)$/;"	m
E0_LINKARGS2	vim/vim/src/Make_mvc.mak	/^E0_LINKARGS2 = $(LINKARGS2:\\=\\\\)$/;"	m
E2BIG	vim/vim/src/structs.h	982;"	d
EBCDIC_CHAR_ADD	vim/vim/src/ascii.h	98;"	d
EBCDIC_CHAR_ADD_	vim/vim/src/ascii.h	97;"	d
ECMD_ADDBUF	vim/vim/src/vim.h	1070;"	d
ECMD_FORCEIT	vim/vim/src/vim.h	1069;"	d
ECMD_HIDE	vim/vim/src/vim.h	1065;"	d
ECMD_LAST	vim/vim/src/vim.h	1074;"	d
ECMD_LASTL	vim/vim/src/vim.h	1073;"	d
ECMD_OLDBUF	vim/vim/src/vim.h	1068;"	d
ECMD_ONE	vim/vim/src/vim.h	1075;"	d
ECMD_SET_HELP	vim/vim/src/vim.h	1066;"	d
ECONNREFUSED	vim/vim/src/channel.c	27;"	d	file:
ECONNREFUSED	vim/vim/src/channel.c	28;"	d	file:
EDITCMD	vim/vim/src/ex_cmds.h	49;"	d
EDIT_FILE	vim/vim/src/main.c	28;"	d	file:
EDIT_NONE	vim/vim/src/main.c	27;"	d	file:
EDIT_QF	vim/vim/src/main.c	31;"	d	file:
EDIT_STDIN	vim/vim/src/main.c	29;"	d	file:
EDIT_TAG	vim/vim/src/main.c	30;"	d	file:
EFAULT	vim/vim/src/structs.h	984;"	d
EILSEQ	vim/vim/src/structs.h	976;"	d
EILSEQ	vim/vim/src/structs.h	985;"	d
EILSEQ	vim/vim/src/vim.h	2255;"	d
EINPROGRESS	vim/vim/src/channel.c	31;"	d	file:
EINPROGRESS	vim/vim/src/channel.c	32;"	d	file:
EINTR	vim/vim/src/channel.c	34;"	d	file:
EINTR	vim/vim/src/channel.c	36;"	d	file:
EINVAL	vim/vim/src/structs.h	981;"	d
ELAPSED_FUNC	vim/vim/src/vim.h	2511;"	d
ELAPSED_FUNC	vim/vim/src/vim.h	2518;"	d
ELAPSED_INIT	vim/vim/src/vim.h	2510;"	d
ELAPSED_INIT	vim/vim/src/vim.h	2517;"	d
ELAPSED_TICKCOUNT	vim/vim/src/vim.h	2516;"	d
ELAPSED_TIMEVAL	vim/vim/src/vim.h	2509;"	d
ELAPSED_TYPE	vim/vim/src/vim.h	2512;"	d
ELAPSED_TYPE	vim/vim/src/vim.h	2519;"	d
EMIT	vim/vim/src/regexp_nfa.c	324;"	d	file:
EMIT2	vim/vim/src/regexp_nfa.c	1226;"	d	file:
EMIT2	vim/vim/src/regexp_nfa.c	743;"	d	file:
EMITMBC	vim/vim/src/regexp_nfa.c	1227;"	d	file:
EMITMBC	vim/vim/src/regexp_nfa.c	745;"	d	file:
EMPTY_IF_NULL	vim/vim/src/macros.h	131;"	d
EMSG	vim/vim/src/vim.h	1644;"	d
EMSG2	vim/vim/src/vim.h	1645;"	d
EMSG2_RET_FAIL	vim/vim/src/regexp.c	341;"	d	file:
EMSG2_RET_NULL	vim/vim/src/regexp.c	340;"	d	file:
EMSG3	vim/vim/src/vim.h	1646;"	d
EMSGN	vim/vim/src/vim.h	1647;"	d
EMSGU	vim/vim/src/vim.h	1648;"	d
EMSG_ONE_RET_NULL	vim/vim/src/regexp.c	342;"	d	file:
EMSG_RET_FAIL	vim/vim/src/regexp.c	339;"	d	file:
EMSG_RET_NULL	vim/vim/src/regexp.c	337;"	d	file:
ENABLE_LOG	vim/vim/src/regexp_nfa.c	26;"	d	file:
ENABLE_LOG	vim/vim/src/regexp_nfa.c	7436;"	d	file:
ENABLE_NLS	vim/vim/src/gui_gtk.c	67;"	d	file:
ENABLE_NLS	vim/vim/src/gui_gtk_x11.c	51;"	d	file:
ENCODING	vim/vim/src/gui_xmdlg.c	/^    ENCODING,$/;"	e	enum:ListSpecifier	file:
ENC_2BYTE	vim/vim/src/vim.h	2243;"	d
ENC_2WORD	vim/vim/src/vim.h	2245;"	d
ENC_4BYTE	vim/vim/src/vim.h	2244;"	d
ENC_8BIT	vim/vim/src/vim.h	2236;"	d
ENC_DBCS	vim/vim/src/vim.h	2237;"	d
ENC_DFLT	vim/vim/src/option.h	77;"	d
ENC_ENDIAN_B	vim/vim/src/vim.h	2240;"	d
ENC_ENDIAN_L	vim/vim/src/vim.h	2241;"	d
ENC_LATIN1	vim/vim/src/vim.h	2247;"	d
ENC_LATIN9	vim/vim/src/vim.h	2248;"	d
ENC_MACROMAN	vim/vim/src/vim.h	2249;"	d
ENC_OPT	vim/vim/src/if_py_both.h	28;"	d
ENC_OPT	vim/vim/src/if_py_both.h	30;"	d
ENC_SINGLE_94	vim/vim/src/libvterm/src/vterm_internal.h	/^  ENC_SINGLE_94$/;"	e	enum:__anon39
ENC_UCSBOM	vim/vim/src/option.h	74;"	d
ENC_UNICODE	vim/vim/src/vim.h	2238;"	d
ENC_UTF8	vim/vim/src/libvterm/src/vterm_internal.h	/^  ENC_UTF8,$/;"	e	enum:__anon39
END	vim/vim/src/regexp.c	153;"	d	file:
END_PAGE_DATA	vim/vim/src/gui_at_sb.h	143;"	d
ENOENT	vim/vim/src/structs.h	983;"	d
ENTER_NORMAL_STATE	vim/vim/src/libvterm/src/parser.c	210;"	d	file:
ENTER_STRING_STATE	vim/vim/src/libvterm/src/parser.c	209;"	d	file:
ENUMLOGFONT	vim/vim/src/gui_w32.c	/^typedef int ENUMLOGFONT;$/;"	t	file:
ENUMLOGFONT	vim/vim/src/os_mswin.c	/^typedef int ENUMLOGFONT;$/;"	t	file:
EOL	vim/vim/src/regexp.c	155;"	d	file:
EOL_DEFAULT	vim/vim/src/os_mac.h	101;"	d
EOL_DOS	vim/vim/src/option.h	83;"	d
EOL_MAC	vim/vim/src/option.h	84;"	d
EOL_UNIX	vim/vim/src/option.h	82;"	d
EOL_UNKNOWN	vim/vim/src/option.h	81;"	d
EOW	vim/vim/src/regexp.c	173;"	d	file:
EQN	vim/vim/src/os_vms.c	85;"	d	file:
EQUAL_POS	vim/vim/src/macros.h	35;"	d
EQUAL_POS	vim/vim/src/macros.h	42;"	d
EQUIVAL_CLASS_C	vim/vim/src/regexp.c	/^char *EQUIVAL_CLASS_C[16] = {$/;"	v
ERROR	vim/vim/src/Make_sas.mak	/^ERROR = ERRORCONSOLE ERRORSOURCE ERRORHIGHLIGHT$/;"	m
ERROR_DELETED	vim/vim/src/vim.h	2497;"	d
ERROR_DICT	vim/vim/src/vim.h	2494;"	d
ERROR_NONE	vim/vim/src/vim.h	2495;"	d
ERROR_OTHER	vim/vim/src/vim.h	2496;"	d
ERROR_SCRIPT	vim/vim/src/vim.h	2493;"	d
ERROR_TOOFEW	vim/vim/src/vim.h	2492;"	d
ERROR_TOOMANY	vim/vim/src/vim.h	2491;"	d
ERROR_UNKNOWN	vim/vim/src/vim.h	2490;"	d
ESC	vim/vim/src/ascii.h	111;"	d
ESC	vim/vim/src/ascii.h	32;"	d
ESC	vim/vim/src/libvterm/src/vterm_internal.h	/^    ESC,$/;"	e	enum:VTerm::VTermParserState
ESCAPE_CHARS	vim/vim/src/ex_docmd.c	5060;"	d	file:
ESC_CHG_TO_ENG_MODE	vim/vim/src/feature.h	671;"	d
ESC_IN_DCS	vim/vim/src/libvterm/src/vterm_internal.h	/^    ESC_IN_DCS$/;"	e	enum:VTerm::VTermParserState
ESC_IN_OSC	vim/vim/src/libvterm/src/vterm_internal.h	/^    ESC_IN_OSC,$/;"	e	enum:VTerm::VTermParserState
ESC_S	vim/vim/src/libvterm/src/vterm_internal.h	28;"	d
ESC_STR	vim/vim/src/ascii.h	112;"	d
ESC_STR	vim/vim/src/ascii.h	33;"	d
ESC_STR_nc	vim/vim/src/ascii.h	113;"	d
ESC_STR_nc	vim/vim/src/ascii.h	34;"	d
ET_ERROR	vim/vim/src/structs.h	/^    ET_ERROR,		\/* error exception *\/$/;"	e	enum:__anon173
ET_INTERRUPT	vim/vim/src/structs.h	/^    ET_INTERRUPT	\/* interrupt exception triggered by Ctrl-C *\/$/;"	e	enum:__anon173
ET_USER	vim/vim/src/structs.h	/^    ET_USER,		\/* exception caused by ":throw" command *\/$/;"	e	enum:__anon173
EVALCMD_BUSY	vim/vim/src/eval.c	425;"	d	file:
EVAL_OFFSET_X	vim/vim/src/gui_beval.h	75;"	d
EVAL_OFFSET_Y	vim/vim/src/gui_beval.h	76;"	d
EVENT_BUFADD	vim/vim/src/vim.h	/^    EVENT_BUFADD = 0,		\/* after adding a buffer to the buffer list *\/$/;"	e	enum:auto_event
EVENT_BUFDELETE	vim/vim/src/vim.h	/^    EVENT_BUFDELETE,		\/* deleting a buffer from the buffer list *\/$/;"	e	enum:auto_event
EVENT_BUFENTER	vim/vim/src/vim.h	/^    EVENT_BUFENTER,		\/* after entering a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFFER_SIZE	vim/vim/src/gui_photon.c	40;"	d	file:
EVENT_BUFFILEPOST	vim/vim/src/vim.h	/^    EVENT_BUFFILEPOST,		\/* after renaming a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFFILEPRE	vim/vim/src/vim.h	/^    EVENT_BUFFILEPRE,		\/* before renaming a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFHIDDEN	vim/vim/src/vim.h	/^    EVENT_BUFHIDDEN,		\/* just after buffer becomes hidden *\/$/;"	e	enum:auto_event
EVENT_BUFLEAVE	vim/vim/src/vim.h	/^    EVENT_BUFLEAVE,		\/* before leaving a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFNEW	vim/vim/src/vim.h	/^    EVENT_BUFNEW,		\/* after creating any buffer *\/$/;"	e	enum:auto_event
EVENT_BUFNEWFILE	vim/vim/src/vim.h	/^    EVENT_BUFNEWFILE,		\/* when creating a buffer for a new file *\/$/;"	e	enum:auto_event
EVENT_BUFREADCMD	vim/vim/src/vim.h	/^    EVENT_BUFREADCMD,		\/* read buffer using command *\/$/;"	e	enum:auto_event
EVENT_BUFREADPOST	vim/vim/src/vim.h	/^    EVENT_BUFREADPOST,		\/* after reading a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFREADPRE	vim/vim/src/vim.h	/^    EVENT_BUFREADPRE,		\/* before reading a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFUNLOAD	vim/vim/src/vim.h	/^    EVENT_BUFUNLOAD,		\/* just before unloading a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFWINENTER	vim/vim/src/vim.h	/^    EVENT_BUFWINENTER,		\/* after showing a buffer in a window *\/$/;"	e	enum:auto_event
EVENT_BUFWINLEAVE	vim/vim/src/vim.h	/^    EVENT_BUFWINLEAVE,		\/* just after buffer removed from window *\/$/;"	e	enum:auto_event
EVENT_BUFWIPEOUT	vim/vim/src/vim.h	/^    EVENT_BUFWIPEOUT,		\/* just before really deleting a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFWRITECMD	vim/vim/src/vim.h	/^    EVENT_BUFWRITECMD,		\/* write buffer using command *\/$/;"	e	enum:auto_event
EVENT_BUFWRITEPOST	vim/vim/src/vim.h	/^    EVENT_BUFWRITEPOST,		\/* after writing a buffer *\/$/;"	e	enum:auto_event
EVENT_BUFWRITEPRE	vim/vim/src/vim.h	/^    EVENT_BUFWRITEPRE,		\/* before writing a buffer *\/$/;"	e	enum:auto_event
EVENT_CMDUNDEFINED	vim/vim/src/vim.h	/^    EVENT_CMDUNDEFINED,		\/* command undefined *\/$/;"	e	enum:auto_event
EVENT_CMDWINENTER	vim/vim/src/vim.h	/^    EVENT_CMDWINENTER,		\/* after entering the cmdline window *\/$/;"	e	enum:auto_event
EVENT_CMDWINLEAVE	vim/vim/src/vim.h	/^    EVENT_CMDWINLEAVE,		\/* before leaving the cmdline window *\/$/;"	e	enum:auto_event
EVENT_COLORSCHEME	vim/vim/src/vim.h	/^    EVENT_COLORSCHEME,		\/* after loading a colorscheme *\/$/;"	e	enum:auto_event
EVENT_COMPLETEDONE	vim/vim/src/vim.h	/^    EVENT_COMPLETEDONE,		\/* after finishing insert complete *\/$/;"	e	enum:auto_event
EVENT_CURSORHOLD	vim/vim/src/vim.h	/^    EVENT_CURSORHOLD,		\/* cursor in same position for a while *\/$/;"	e	enum:auto_event
EVENT_CURSORHOLDI	vim/vim/src/vim.h	/^    EVENT_CURSORHOLDI,		\/* idem, in Insert mode *\/$/;"	e	enum:auto_event
EVENT_CURSORMOVED	vim/vim/src/vim.h	/^    EVENT_CURSORMOVED,		\/* cursor was moved *\/$/;"	e	enum:auto_event
EVENT_CURSORMOVEDI	vim/vim/src/vim.h	/^    EVENT_CURSORMOVEDI,		\/* cursor was moved in Insert mode *\/$/;"	e	enum:auto_event
EVENT_ENCODINGCHANGED	vim/vim/src/vim.h	/^    EVENT_ENCODINGCHANGED,	\/* after changing the 'encoding' option *\/$/;"	e	enum:auto_event
EVENT_FILEAPPENDCMD	vim/vim/src/vim.h	/^    EVENT_FILEAPPENDCMD,	\/* append to a file using command *\/$/;"	e	enum:auto_event
EVENT_FILEAPPENDPOST	vim/vim/src/vim.h	/^    EVENT_FILEAPPENDPOST,	\/* after appending to a file *\/$/;"	e	enum:auto_event
EVENT_FILEAPPENDPRE	vim/vim/src/vim.h	/^    EVENT_FILEAPPENDPRE,	\/* before appending to a file *\/$/;"	e	enum:auto_event
EVENT_FILECHANGEDRO	vim/vim/src/vim.h	/^    EVENT_FILECHANGEDRO,	\/* before first change to read-only file *\/$/;"	e	enum:auto_event
EVENT_FILECHANGEDSHELL	vim/vim/src/vim.h	/^    EVENT_FILECHANGEDSHELL,	\/* after shell command that changed file *\/$/;"	e	enum:auto_event
EVENT_FILECHANGEDSHELLPOST	vim/vim/src/vim.h	/^    EVENT_FILECHANGEDSHELLPOST,	\/* after (not) reloading changed file *\/$/;"	e	enum:auto_event
EVENT_FILEREADCMD	vim/vim/src/vim.h	/^    EVENT_FILEREADCMD,		\/* read from a file using command *\/$/;"	e	enum:auto_event
EVENT_FILEREADPOST	vim/vim/src/vim.h	/^    EVENT_FILEREADPOST,		\/* after reading a file *\/$/;"	e	enum:auto_event
EVENT_FILEREADPRE	vim/vim/src/vim.h	/^    EVENT_FILEREADPRE,		\/* before reading a file *\/$/;"	e	enum:auto_event
EVENT_FILETYPE	vim/vim/src/vim.h	/^    EVENT_FILETYPE,		\/* new file type detected (user defined) *\/$/;"	e	enum:auto_event
EVENT_FILEWRITECMD	vim/vim/src/vim.h	/^    EVENT_FILEWRITECMD,		\/* write to a file using command *\/$/;"	e	enum:auto_event
EVENT_FILEWRITEPOST	vim/vim/src/vim.h	/^    EVENT_FILEWRITEPOST,	\/* after writing a file *\/$/;"	e	enum:auto_event
EVENT_FILEWRITEPRE	vim/vim/src/vim.h	/^    EVENT_FILEWRITEPRE,		\/* before writing a file *\/$/;"	e	enum:auto_event
EVENT_FILTERREADPOST	vim/vim/src/vim.h	/^    EVENT_FILTERREADPOST,	\/* after reading from a filter *\/$/;"	e	enum:auto_event
EVENT_FILTERREADPRE	vim/vim/src/vim.h	/^    EVENT_FILTERREADPRE,	\/* before reading from a filter *\/$/;"	e	enum:auto_event
EVENT_FILTERWRITEPOST	vim/vim/src/vim.h	/^    EVENT_FILTERWRITEPOST,	\/* after writing to a filter *\/$/;"	e	enum:auto_event
EVENT_FILTERWRITEPRE	vim/vim/src/vim.h	/^    EVENT_FILTERWRITEPRE,	\/* before writing to a filter *\/$/;"	e	enum:auto_event
EVENT_FOCUSGAINED	vim/vim/src/vim.h	/^    EVENT_FOCUSGAINED,		\/* got the focus *\/$/;"	e	enum:auto_event
EVENT_FOCUSLOST	vim/vim/src/vim.h	/^    EVENT_FOCUSLOST,		\/* lost the focus to another app *\/$/;"	e	enum:auto_event
EVENT_FUNCUNDEFINED	vim/vim/src/vim.h	/^    EVENT_FUNCUNDEFINED,	\/* if calling a function which doesn't exist *\/$/;"	e	enum:auto_event
EVENT_GUIENTER	vim/vim/src/vim.h	/^    EVENT_GUIENTER,		\/* after starting the GUI *\/$/;"	e	enum:auto_event
EVENT_GUIFAILED	vim/vim/src/vim.h	/^    EVENT_GUIFAILED,		\/* after starting the GUI failed *\/$/;"	e	enum:auto_event
EVENT_INSERTCHANGE	vim/vim/src/vim.h	/^    EVENT_INSERTCHANGE,		\/* when changing Insert\/Replace mode *\/$/;"	e	enum:auto_event
EVENT_INSERTCHARPRE	vim/vim/src/vim.h	/^    EVENT_INSERTCHARPRE,	\/* before inserting a char *\/$/;"	e	enum:auto_event
EVENT_INSERTENTER	vim/vim/src/vim.h	/^    EVENT_INSERTENTER,		\/* when entering Insert mode *\/$/;"	e	enum:auto_event
EVENT_INSERTLEAVE	vim/vim/src/vim.h	/^    EVENT_INSERTLEAVE,		\/* when leaving Insert mode *\/$/;"	e	enum:auto_event
EVENT_MENUPOPUP	vim/vim/src/vim.h	/^    EVENT_MENUPOPUP,		\/* just before popup menu is displayed *\/$/;"	e	enum:auto_event
EVENT_OPTIONSET	vim/vim/src/vim.h	/^    EVENT_OPTIONSET,		\/* option was set *\/$/;"	e	enum:auto_event
EVENT_QUICKFIXCMDPOST	vim/vim/src/vim.h	/^    EVENT_QUICKFIXCMDPOST,	\/* after :make, :grep etc. *\/$/;"	e	enum:auto_event
EVENT_QUICKFIXCMDPRE	vim/vim/src/vim.h	/^    EVENT_QUICKFIXCMDPRE,	\/* before :make, :grep etc. *\/$/;"	e	enum:auto_event
EVENT_QUITPRE	vim/vim/src/vim.h	/^    EVENT_QUITPRE,		\/* before :quit *\/$/;"	e	enum:auto_event
EVENT_REMOTEREPLY	vim/vim/src/vim.h	/^    EVENT_REMOTEREPLY,		\/* upon string reception from a remote vim *\/$/;"	e	enum:auto_event
EVENT_SESSIONLOADPOST	vim/vim/src/vim.h	/^    EVENT_SESSIONLOADPOST,	\/* after loading a session file *\/$/;"	e	enum:auto_event
EVENT_SHELLCMDPOST	vim/vim/src/vim.h	/^    EVENT_SHELLCMDPOST,		\/* after ":!cmd" *\/$/;"	e	enum:auto_event
EVENT_SHELLFILTERPOST	vim/vim/src/vim.h	/^    EVENT_SHELLFILTERPOST,	\/* after ":1,2!cmd", ":w !cmd", ":r !cmd". *\/$/;"	e	enum:auto_event
EVENT_SOURCECMD	vim/vim/src/vim.h	/^    EVENT_SOURCECMD,		\/* sourcing a Vim script using command *\/$/;"	e	enum:auto_event
EVENT_SOURCEPRE	vim/vim/src/vim.h	/^    EVENT_SOURCEPRE,		\/* before sourcing a Vim script *\/$/;"	e	enum:auto_event
EVENT_SPELLFILEMISSING	vim/vim/src/vim.h	/^    EVENT_SPELLFILEMISSING,	\/* spell file missing *\/$/;"	e	enum:auto_event
EVENT_STDINREADPOST	vim/vim/src/vim.h	/^    EVENT_STDINREADPOST,	\/* after reading from stdin *\/$/;"	e	enum:auto_event
EVENT_STDINREADPRE	vim/vim/src/vim.h	/^    EVENT_STDINREADPRE,		\/* before reading from stdin *\/$/;"	e	enum:auto_event
EVENT_SWAPEXISTS	vim/vim/src/vim.h	/^    EVENT_SWAPEXISTS,		\/* found existing swap file *\/$/;"	e	enum:auto_event
EVENT_SYNTAX	vim/vim/src/vim.h	/^    EVENT_SYNTAX,		\/* syntax selected *\/$/;"	e	enum:auto_event
EVENT_TABCLOSED	vim/vim/src/vim.h	/^    EVENT_TABCLOSED,		\/* after closing a tab page *\/$/;"	e	enum:auto_event
EVENT_TABENTER	vim/vim/src/vim.h	/^    EVENT_TABENTER,		\/* after entering a tab page *\/$/;"	e	enum:auto_event
EVENT_TABLEAVE	vim/vim/src/vim.h	/^    EVENT_TABLEAVE,		\/* before leaving a tab page *\/$/;"	e	enum:auto_event
EVENT_TABNEW	vim/vim/src/vim.h	/^    EVENT_TABNEW,		\/* when entering a new tab page *\/$/;"	e	enum:auto_event
EVENT_TERMCHANGED	vim/vim/src/vim.h	/^    EVENT_TERMCHANGED,		\/* after changing 'term' *\/$/;"	e	enum:auto_event
EVENT_TERMRESPONSE	vim/vim/src/vim.h	/^    EVENT_TERMRESPONSE,		\/* after setting "v:termresponse" *\/$/;"	e	enum:auto_event
EVENT_TEXTCHANGED	vim/vim/src/vim.h	/^    EVENT_TEXTCHANGED,		\/* text was modified *\/$/;"	e	enum:auto_event
EVENT_TEXTCHANGEDI	vim/vim/src/vim.h	/^    EVENT_TEXTCHANGEDI,		\/* text was modified in Insert mode*\/$/;"	e	enum:auto_event
EVENT_USER	vim/vim/src/vim.h	/^    EVENT_USER,			\/* user defined autocommand *\/$/;"	e	enum:auto_event
EVENT_VIMENTER	vim/vim/src/vim.h	/^    EVENT_VIMENTER,		\/* after starting Vim *\/$/;"	e	enum:auto_event
EVENT_VIMLEAVE	vim/vim/src/vim.h	/^    EVENT_VIMLEAVE,		\/* before exiting Vim *\/$/;"	e	enum:auto_event
EVENT_VIMLEAVEPRE	vim/vim/src/vim.h	/^    EVENT_VIMLEAVEPRE,		\/* before exiting Vim and writing .viminfo *\/$/;"	e	enum:auto_event
EVENT_VIMRESIZED	vim/vim/src/vim.h	/^    EVENT_VIMRESIZED,		\/* after Vim window was resized *\/$/;"	e	enum:auto_event
EVENT_WINENTER	vim/vim/src/vim.h	/^    EVENT_WINENTER,		\/* after entering a window *\/$/;"	e	enum:auto_event
EVENT_WINLEAVE	vim/vim/src/vim.h	/^    EVENT_WINLEAVE,		\/* before leaving a window *\/$/;"	e	enum:auto_event
EVENT_WINNEW	vim/vim/src/vim.h	/^    EVENT_WINNEW,		\/* when entering a new window *\/$/;"	e	enum:auto_event
EVIEWNAME	vim/vim/src/Makefile	/^EVIEWNAME	= e$(VIEWNAME)$/;"	m
EVIEWTARGET	vim/vim/src/Makefile	/^EVIEWTARGET	= $(EVIEWNAME)$(LNKEXT)$/;"	m
EVIMNAME	vim/vim/src/Makefile	/^EVIMNAME	= e$(VIMNAME)$/;"	m
EVIMTARGET	vim/vim/src/Makefile	/^EVIMTARGET	= $(EVIMNAME)$(LNKEXT)$/;"	m
EVIM_FILE	vim/vim/src/Makefile	/^EVIM_FILE	= $(DESTDIR)$(SCRIPTLOC)\/evim.vim$/;"	m
EVIM_FILE	vim/vim/src/os_amiga.h	167;"	d
EVIM_FILE	vim/vim/src/os_dos.h	32;"	d
EVIM_FILE	vim/vim/src/os_mac.h	146;"	d
EVIM_FILE	vim/vim/src/os_unix.h	307;"	d
EWOULDBLOCK	vim/vim/src/channel.c	29;"	d	file:
EWOULDBLOCK	vim/vim/src/channel.c	30;"	d	file:
EW_ADDSLASH	vim/vim/src/vim.h	841;"	d
EW_ALLLINKS	vim/vim/src/vim.h	852;"	d
EW_DIR	vim/vim/src/vim.h	838;"	d
EW_DODOT	vim/vim/src/vim.h	855;"	d
EW_EMPTYOK	vim/vim/src/vim.h	856;"	d
EW_EXEC	vim/vim/src/vim.h	844;"	d
EW_FILE	vim/vim/src/vim.h	839;"	d
EW_ICASE	vim/vim/src/vim.h	846;"	d
EW_KEEPALL	vim/vim/src/vim.h	842;"	d
EW_KEEPDOLLAR	vim/vim/src/vim.h	849;"	d
EW_NOERROR	vim/vim/src/vim.h	847;"	d
EW_NOTFOUND	vim/vim/src/vim.h	840;"	d
EW_NOTWILD	vim/vim/src/vim.h	848;"	d
EW_PATH	vim/vim/src/vim.h	845;"	d
EW_SHELLCMD	vim/vim/src/vim.h	853;"	d
EW_SILENT	vim/vim/src/vim.h	843;"	d
EX	vim/vim/src/ex_cmds.h	87;"	d
EX	vim/vim/src/ex_cmds.h	90;"	d
EXACTLY	vim/vim/src/regexp.c	159;"	d	file:
EXEEXT	vim/vim/src/auto/config.mk	/^EXEEXT		= $/;"	m
EXETYPE	vim/vim/src/Make_bc5.mak	/^EXETYPE=-W$/;"	m
EXETYPE	vim/vim/src/Make_bc5.mak	/^EXETYPE=-WC$/;"	m
EXETYPE	vim/vim/src/Make_bc5.mak	/^EXETYPE=-WD$/;"	m
EXFLAGS	vim/vim/src/ex_cmds.h	58;"	d
EXFLAG_LIST	vim/vim/src/ex_cmds.h	1789;"	d
EXFLAG_NR	vim/vim/src/ex_cmds.h	1790;"	d
EXFLAG_PRINT	vim/vim/src/ex_cmds.h	1791;"	d
EXMODE_NORMAL	vim/vim/src/vim.h	813;"	d
EXMODE_VIM	vim/vim/src/vim.h	814;"	d
EXNAME	vim/vim/src/Makefile	/^EXNAME = ex$/;"	m
EXNAME	vim/vim/src/auto/config.mk	/^EXNAME		= ex$/;"	m
EXPAND_AUGROUP	vim/vim/src/vim.h	778;"	d
EXPAND_BEHAVE	vim/vim/src/vim.h	800;"	d
EXPAND_BOOL_SETTINGS	vim/vim/src/vim.h	769;"	d
EXPAND_BUFFERS	vim/vim/src/vim.h	773;"	d
EXPAND_COLORS	vim/vim/src/vim.h	792;"	d
EXPAND_COMMANDS	vim/vim/src/vim.h	765;"	d
EXPAND_COMPILER	vim/vim/src/vim.h	793;"	d
EXPAND_CSCOPE	vim/vim/src/vim.h	797;"	d
EXPAND_DIRECTORIES	vim/vim/src/vim.h	767;"	d
EXPAND_ENV_VARS	vim/vim/src/vim.h	790;"	d
EXPAND_EVENTS	vim/vim/src/vim.h	774;"	d
EXPAND_EXPRESSION	vim/vim/src/vim.h	784;"	d
EXPAND_FILENAMES	vim/vim/src/structs.h	3314;"	d
EXPAND_FILES	vim/vim/src/vim.h	766;"	d
EXPAND_FILES_IN_PATH	vim/vim/src/vim.h	802;"	d
EXPAND_FILETYPE	vim/vim/src/vim.h	801;"	d
EXPAND_FUNCTIONS	vim/vim/src/vim.h	782;"	d
EXPAND_HELP	vim/vim/src/vim.h	772;"	d
EXPAND_HIGHLIGHT	vim/vim/src/vim.h	777;"	d
EXPAND_HISTORY	vim/vim/src/vim.h	805;"	d
EXPAND_LANGUAGE	vim/vim/src/vim.h	791;"	d
EXPAND_LOCALES	vim/vim/src/vim.h	804;"	d
EXPAND_MAPPINGS	vim/vim/src/vim.h	780;"	d
EXPAND_MENUNAMES	vim/vim/src/vim.h	785;"	d
EXPAND_MENUS	vim/vim/src/vim.h	775;"	d
EXPAND_MESSAGES	vim/vim/src/vim.h	810;"	d
EXPAND_NOTHING	vim/vim/src/vim.h	764;"	d
EXPAND_OK	vim/vim/src/vim.h	763;"	d
EXPAND_OLD_SETTING	vim/vim/src/vim.h	771;"	d
EXPAND_OWNSYNTAX	vim/vim/src/vim.h	803;"	d
EXPAND_PACKADD	vim/vim/src/vim.h	809;"	d
EXPAND_PROFILE	vim/vim/src/vim.h	799;"	d
EXPAND_SETTINGS	vim/vim/src/vim.h	768;"	d
EXPAND_SHELLCMD	vim/vim/src/vim.h	796;"	d
EXPAND_SIGN	vim/vim/src/vim.h	798;"	d
EXPAND_SYNTAX	vim/vim/src/vim.h	776;"	d
EXPAND_SYNTIME	vim/vim/src/vim.h	807;"	d
EXPAND_TAGS	vim/vim/src/vim.h	770;"	d
EXPAND_TAGS_LISTFILES	vim/vim/src/vim.h	781;"	d
EXPAND_UNSUCCESSFUL	vim/vim/src/vim.h	762;"	d
EXPAND_USER	vim/vim/src/vim.h	806;"	d
EXPAND_USER_ADDR_TYPE	vim/vim/src/vim.h	808;"	d
EXPAND_USER_CMD_FLAGS	vim/vim/src/vim.h	787;"	d
EXPAND_USER_COMMANDS	vim/vim/src/vim.h	786;"	d
EXPAND_USER_COMPLETE	vim/vim/src/vim.h	789;"	d
EXPAND_USER_DEFINED	vim/vim/src/vim.h	794;"	d
EXPAND_USER_FUNC	vim/vim/src/vim.h	783;"	d
EXPAND_USER_LIST	vim/vim/src/vim.h	795;"	d
EXPAND_USER_NARGS	vim/vim/src/vim.h	788;"	d
EXPAND_USER_VARS	vim/vim/src/vim.h	779;"	d
EXPL_ALLOC_INC	vim/vim/src/os_vms.c	83;"	d	file:
EXP_CASE	vim/vim/src/syntax.c	/^    EXP_CASE,	    \/* expand ":syn case" arguments *\/$/;"	e	enum:__anon138	file:
EXP_CSCOPE_FIND	vim/vim/src/if_cscope.c	/^    EXP_CSCOPE_FIND,	\/* expand ":cscope find" arguments *\/$/;"	e	enum:__anon230	file:
EXP_CSCOPE_KILL	vim/vim/src/if_cscope.c	/^    EXP_CSCOPE_KILL	\/* expand ":cscope kill" arguments *\/$/;"	e	enum:__anon230	file:
EXP_CSCOPE_SUBCMD	vim/vim/src/if_cscope.c	/^    EXP_CSCOPE_SUBCMD,	\/* expand ":cscope" sub-commands *\/$/;"	e	enum:__anon230	file:
EXP_DEFINE	vim/vim/src/ex_cmds.c	/^    EXP_DEFINE,		\/* expand :sign define {name} args *\/$/;"	e	enum:__anon219	file:
EXP_PLACE	vim/vim/src/ex_cmds.c	/^    EXP_PLACE,		\/* expand :sign place {id} args *\/$/;"	e	enum:__anon219	file:
EXP_SCSCOPE_SUBCMD	vim/vim/src/if_cscope.c	/^    EXP_SCSCOPE_SUBCMD,	\/* expand ":scscope" sub-commands *\/$/;"	e	enum:__anon230	file:
EXP_SIGN_NAMES	vim/vim/src/ex_cmds.c	/^    EXP_SIGN_NAMES	\/* expand with name of placed signs *\/$/;"	e	enum:__anon219	file:
EXP_SPELL	vim/vim/src/syntax.c	/^    EXP_SPELL,	    \/* expand ":syn spell" arguments *\/$/;"	e	enum:__anon138	file:
EXP_SUBCMD	vim/vim/src/ex_cmds.c	/^    EXP_SUBCMD,		\/* expand :sign sub-commands *\/$/;"	e	enum:__anon219	file:
EXP_SUBCMD	vim/vim/src/syntax.c	/^    EXP_SUBCMD,	    \/* expand ":syn" sub-commands *\/$/;"	e	enum:__anon138	file:
EXP_SYNC	vim/vim/src/syntax.c	/^    EXP_SYNC	    \/* expand ":syn sync" arguments *\/$/;"	e	enum:__anon138	file:
EXP_UNPLACE	vim/vim/src/ex_cmds.c	/^    EXP_UNPLACE,	\/* expand :sign unplace" *\/$/;"	e	enum:__anon219	file:
EXRC_FILE	vim/vim/src/os_amiga.h	190;"	d
EXRC_FILE	vim/vim/src/os_dos.h	78;"	d
EXRC_FILE	vim/vim/src/os_mac.h	170;"	d
EXRC_FILE	vim/vim/src/os_unix.h	324;"	d
EXTARGET	vim/vim/src/Makefile	/^EXTARGET	= $(EXNAME)$(LNKEXT)$/;"	m
EXTERN	vim/vim/src/if_ruby.c	126;"	d	file:
EXTERN	vim/vim/src/if_tcl.c	70;"	d	file:
EXTERN	vim/vim/src/main.c	10;"	d	file:
EXTERN	vim/vim/src/vim.h	1783;"	d
EXTERNCMD	vim/vim/src/vim.h	718;"	d
EXTRA	vim/vim/src/ex_cmds.h	35;"	d
EXTRAS	vim/vim/src/Make_ivc.mak	/^EXTRAS="$(INTDIR)\/if_ole.obj" "$(INTDIR)\/vim.res" "$(INTDIR)\/gui.obj" "$(INTDIR)\/gui_w32.obj" "$(INTDIR)\/gui_beval.obj" "$(INTDIR)\/os_w32exe.obj"$/;"	m
EXTRAS	vim/vim/src/Make_ivc.mak	/^EXTRAS="$(INTDIR)\/vim.res" "$(INTDIR)\/gui.obj" "$(INTDIR)\/gui_w32.obj" "$(INTDIR)\/gui_beval.obj" "$(INTDIR)\/os_w32exe.obj"$/;"	m
EXTRAS	vim/vim/src/Make_ivc.mak	/^EXTRAS=$/;"	m
EXTRASIZE	vim/vim/src/misc2.c	5930;"	d	file:
EXTRA_LIBS	vim/vim/src/Make_cyg_ming.mak	/^EXTRA_LIBS =$/;"	m
EXTRA_MARKS	vim/vim/src/mark.c	27;"	d	file:
EXTRA_SRC	vim/vim/src/Makefile	/^EXTRA_SRC = hangulin.c if_lua.c if_mzsch.c auto\/if_perl.c if_perlsfio.c \\$/;"	m
E_CFLAGS	vim/vim/src/Make_mvc.mak	/^E_CFLAGS = $(E0_CFLAGS:"=\\")$/;"	m
E_LINKARGS2	vim/vim/src/Make_mvc.mak	/^E_LINKARGS2 = $(E0_LINKARGS2:"=\\")$/;"	m
E_acute	vim/vim/src/regexp_nfa.c	763;"	d	file:
E_circumflex	vim/vim/src/regexp_nfa.c	764;"	d	file:
E_diaeresis	vim/vim/src/regexp_nfa.c	765;"	d	file:
E_grave	vim/vim/src/regexp_nfa.c	766;"	d	file:
EndCond	vim/vim/src/if_xcmdsrv.c	/^typedef int (*EndCond)(void *);$/;"	t	file:
EndScroll	vim/vim/src/gui_at_sb.c	/^EndScroll($/;"	f	file:	signature:( Widget w, XEvent *event UNUSED, String *params UNUSED, Cardinal *num_params UNUSED)
EndScroll	vim/vim/src/gui_at_sb.c	/^static void EndScroll(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
EnhancedBP_H	vim/vim/src/gui_xmebwp.h	21;"	d
EnhancedB_H	vim/vim/src/gui_xmebw.h	21;"	d
Enter	vim/vim/src/gui_xmebw.c	/^Enter(Widget wid,$/;"	f	file:	signature:(Widget wid, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
Enter	vim/vim/src/gui_xmebw.c	/^static void Enter(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
EnumWindowsProc	vim/vim/src/GvimExt/gvimext.cpp	/^BOOL CALLBACK CShellExt::EnumWindowsProc(HWND hWnd, LPARAM lParam)$/;"	f	class:CShellExt	signature:(HWND hWnd, LPARAM lParam)
ErrDiag	vim/vim/src/VisVim/OleAut.cpp	/^void COleAutomationControl::ErrDiag ()$/;"	f	class:COleAutomationControl	signature:()
Error	vim/vim/src/if_py_both.h	/^static OutputObject Error =$/;"	v
Eval	vim/vim/src/if_ole.cpp	/^    STDMETHOD(Eval)(BSTR expr, BSTR *result);$/;"	p	class:FINAL	file:	access:public	signature:(BSTR expr, BSTR *result)
Eval	vim/vim/src/if_ole.cpp	/^CVim::Eval(BSTR expr, BSTR *result)$/;"	f	class:CVim	signature:(BSTR expr, BSTR *result)
Eval	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Eval )($/;"	m	struct:IVimVtbl	access:public
EventData	vim/vim/src/gui_at_sb.c	/^struct EventData$/;"	s	file:
EventData::count	vim/vim/src/gui_at_sb.c	/^    int count;$/;"	m	struct:EventData	file:	access:public
EventData::oldEvent	vim/vim/src/gui_at_sb.c	/^    XEvent *oldEvent;$/;"	m	struct:EventData	file:	access:public
EventModifiers2VimModifiers	vim/vim/src/gui_mac.c	/^EventModifiers2VimModifiers(EventModifiers macModifiers)$/;"	f	file:	signature:(EventModifiers macModifiers)
EventModifiers2VimMouseModifiers	vim/vim/src/gui_mac.c	/^EventModifiers2VimMouseModifiers(EventModifiers macModifiers)$/;"	f	signature:(EventModifiers macModifiers)
Exec_reg	vim/vim/src/globals.h	/^EXTERN int Exec_reg INIT(= FALSE);	\/* TRUE when executing a register *\/$/;"	v
ExitInstance	vim/vim/src/VisVim/VisVim.cpp	/^	virtual int ExitInstance ();$/;"	p	class:CVisVimApp	file:	access:public	signature:()
ExitInstance	vim/vim/src/VisVim/VisVim.cpp	/^int CVisVimApp::ExitInstance ()$/;"	f	class:CVisVimApp	signature:()
ExpandBufnames	vim/vim/src/buffer.c	/^ExpandBufnames($/;"	f	signature:( char_u *pat, int *num_file, char_u ***file, int options)
ExpandCleanup	vim/vim/src/ex_getln.c	/^ExpandCleanup(expand_T *xp)$/;"	f	signature:(expand_T *xp)
ExpandEscape	vim/vim/src/ex_getln.c	/^ExpandEscape($/;"	f	signature:( expand_T *xp, char_u *str, int numfiles, char_u **files, int options)
ExpandFromContext	vim/vim/src/ex_getln.c	/^ExpandFromContext($/;"	f	file:	signature:( expand_T *xp, char_u *pat, int *num_file, char_u ***file, int options)
ExpandFromContext	vim/vim/src/ex_getln.c	/^static int	ExpandFromContext(expand_T *xp, char_u *, int *, char_u ***, int);$/;"	p	file:	signature:(expand_T *xp, char_u *, int *, char_u ***, int)
ExpandGeneric	vim/vim/src/ex_getln.c	/^ExpandGeneric($/;"	f	signature:( expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file, char_u *((*func)(expand_T *, int)), int escaped)
ExpandInit	vim/vim/src/ex_getln.c	/^ExpandInit(expand_T *xp)$/;"	f	signature:(expand_T *xp)
ExpandMappings	vim/vim/src/getchar.c	/^ExpandMappings($/;"	f	signature:( regmatch_T *regmatch, int *num_file, char_u ***file)
ExpandOldSetting	vim/vim/src/option.c	/^ExpandOldSetting(int *num_file, char_u ***file)$/;"	f	signature:(int *num_file, char_u ***file)
ExpandOne	vim/vim/src/ex_getln.c	/^ExpandOne($/;"	f	signature:( expand_T *xp, char_u *str, char_u *orig, int options, int mode)
ExpandPackAddDir	vim/vim/src/ex_getln.c	/^ExpandPackAddDir($/;"	f	file:	signature:( char_u *pat, int *num_file, char_u ***file)
ExpandPackAddDir	vim/vim/src/ex_getln.c	/^static int	ExpandPackAddDir(char_u *pat, int *num_file, char_u ***file);$/;"	p	file:	signature:(char_u *pat, int *num_file, char_u ***file)
ExpandRTDir	vim/vim/src/ex_getln.c	/^ExpandRTDir($/;"	f	file:	signature:( char_u *pat, int flags, int *num_file, char_u ***file, char *dirnames[])
ExpandRTDir	vim/vim/src/ex_getln.c	/^static int	ExpandRTDir(char_u *pat, int flags, int *num_file, char_u ***file, char *dirname[]);$/;"	p	file:	signature:(char_u *pat, int flags, int *num_file, char_u ***file, char *dirname[])
ExpandSettings	vim/vim/src/option.c	/^ExpandSettings($/;"	f	signature:( expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file)
ExpandUserDefined	vim/vim/src/ex_getln.c	/^ExpandUserDefined($/;"	f	file:	signature:( expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file)
ExpandUserDefined	vim/vim/src/ex_getln.c	/^static int	ExpandUserDefined(expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file);$/;"	p	file:	signature:(expand_T *xp, regmatch_T *regmatch, int *num_file, char_u ***file)
ExpandUserList	vim/vim/src/ex_getln.c	/^ExpandUserList($/;"	f	file:	signature:( expand_T *xp, int *num_file, char_u ***file)
ExpandUserList	vim/vim/src/ex_getln.c	/^static int	ExpandUserList(expand_T *xp, int *num_file, char_u ***file);$/;"	p	file:	signature:(expand_T *xp, int *num_file, char_u ***file)
ExtEdProtocolVersion	vim/vim/src/netbeans.c	/^static char *ExtEdProtocolVersion = "2.5";$/;"	v	file:
ExtractPosition	vim/vim/src/gui_at_sb.c	/^ExtractPosition($/;"	f	file:	signature:( XEvent *event, Position *x, Position *y, unsigned int *state)
F0	vim/vim/src/sha256.c	93;"	d	file:
F1	vim/vim/src/blowfish.c	336;"	d	file:
F1	vim/vim/src/sha256.c	94;"	d	file:
F2	vim/vim/src/blowfish.c	343;"	d	file:
FAIL	vim/vim/src/dosinst.h	74;"	d
FAIL	vim/vim/src/vim.h	737;"	d
FALSE	vim/vim/src/dosinst.h	78;"	d
FALSE	vim/vim/src/libvterm/bin/vterm-ctrl.c	8;"	d	file:
FALSE	vim/vim/src/libvterm/include/vterm.h	17;"	d
FALSE	vim/vim/src/os_amiga.c	23;"	d	file:
FALSE	vim/vim/src/os_amiga.c	68;"	d	file:
FALSE	vim/vim/src/os_amiga.c	69;"	d	file:
FALSE	vim/vim/src/vim.h	1452;"	d
FAR	vim/vim/src/gui_w32.c	248;"	d	file:
FARPROC	vim/vim/src/if_python.c	134;"	d	file:
FARPROC	vim/vim/src/if_python3.c	126;"	d	file:
FARSI_0	vim/vim/src/farsi.h	91;"	d
FARSI_1	vim/vim/src/farsi.h	92;"	d
FARSI_2	vim/vim/src/farsi.h	93;"	d
FARSI_3	vim/vim/src/farsi.h	94;"	d
FARSI_4	vim/vim/src/farsi.h	95;"	d
FARSI_5	vim/vim/src/farsi.h	96;"	d
FARSI_6	vim/vim/src/farsi.h	97;"	d
FARSI_7	vim/vim/src/farsi.h	98;"	d
FARSI_8	vim/vim/src/farsi.h	99;"	d
FARSI_9	vim/vim/src/farsi.h	100;"	d
FASTCALL	vim/vim/src/Make_bc5.mak	/^FASTCALL = yes$/;"	m
FC_ABORT	vim/vim/src/userfunc.c	18;"	d	file:
FC_CLOSURE	vim/vim/src/userfunc.c	21;"	d	file:
FC_DELETED	vim/vim/src/userfunc.c	22;"	d	file:
FC_DICT	vim/vim/src/userfunc.c	20;"	d	file:
FC_RANGE	vim/vim/src/userfunc.c	19;"	d	file:
FC_REMOVED	vim/vim/src/userfunc.c	23;"	d	file:
FDC_OFF	vim/vim/src/screen.c	2364;"	d	file:
FDO_ALL	vim/vim/src/option.h	495;"	d
FDO_BLOCK	vim/vim/src/option.h	496;"	d
FDO_HOR	vim/vim/src/option.h	497;"	d
FDO_INSERT	vim/vim/src/option.h	503;"	d
FDO_JUMP	vim/vim/src/option.h	505;"	d
FDO_MARK	vim/vim/src/option.h	498;"	d
FDO_PERCENT	vim/vim/src/option.h	499;"	d
FDO_QUICKFIX	vim/vim/src/option.h	500;"	d
FDO_SEARCH	vim/vim/src/option.h	501;"	d
FDO_TAG	vim/vim/src/option.h	502;"	d
FDO_UNDO	vim/vim/src/option.h	504;"	d
FD_CLOSED	vim/vim/src/fold.c	40;"	d	file:
FD_LEVEL	vim/vim/src/fold.c	41;"	d	file:
FD_OPEN	vim/vim/src/fold.c	39;"	d	file:
FE	vim/vim/src/farsi.h	133;"	d
FEATURES	vim/vim/src/Make_bc5.mak	/^FEATURES = BIG$/;"	m
FEATURES	vim/vim/src/Make_cyg_ming.mak	/^FEATURES=HUGE$/;"	m
FEATURES	vim/vim/src/Make_mvc.mak	/^FEATURES = HUGE$/;"	m
FEAT_ARABIC	vim/vim/src/feature.h	310;"	d
FEAT_ARP	vim/vim/src/feature.h	1217;"	d
FEAT_AUTOCHDIR	vim/vim/src/feature.h	1350;"	d
FEAT_AUTOCMD	vim/vim/src/feature.h	448;"	d
FEAT_BEVAL	vim/vim/src/feature.h	1303;"	d
FEAT_BEVAL_TIP	vim/vim/src/feature.h	1311;"	d
FEAT_BEVAL_TIP	vim/vim/src/vim.h	219;"	d
FEAT_BIG	vim/vim/src/feature.h	68;"	d
FEAT_BIG	vim/vim/src/feature.h	79;"	d
FEAT_BROWSE	vim/vim/src/feature.h	773;"	d
FEAT_BROWSE_CMD	vim/vim/src/feature.h	771;"	d
FEAT_BYTEOFF	vim/vim/src/feature.h	479;"	d
FEAT_CINDENT	vim/vim/src/feature.h	573;"	d
FEAT_CLIENTSERVER	vim/vim/src/feature.h	1169;"	d
FEAT_CLIENTSERVER	vim/vim/src/vim.h	225;"	d
FEAT_CLIPBOARD	vim/vim/src/feature.h	1129;"	d
FEAT_CLIPBOARD	vim/vim/src/feature.h	1134;"	d
FEAT_CLIPBOARD	vim/vim/src/feature.h	1143;"	d
FEAT_CLIPBOARD	vim/vim/src/os_win32.h	69;"	d
FEAT_CLIPBOARD	vim/vim/src/vim.h	185;"	d
FEAT_CMDHIST	vim/vim/src/feature.h	118;"	d
FEAT_CMDL_COMPL	vim/vim/src/feature.h	198;"	d
FEAT_CMDL_INFO	vim/vim/src/feature.h	231;"	d
FEAT_CMDL_INFO	vim/vim/src/feature.h	474;"	d
FEAT_CMDWIN	vim/vim/src/feature.h	139;"	d
FEAT_COMMENTS	vim/vim/src/feature.h	584;"	d
FEAT_COMPL_FUNC	vim/vim/src/feature.h	414;"	d
FEAT_CONCEAL	vim/vim/src/feature.h	522;"	d
FEAT_CON_DIALOG	vim/vim/src/feature.h	798;"	d
FEAT_CON_DIALOG	vim/vim/src/feature.h	816;"	d
FEAT_CRYPT	vim/vim/src/feature.h	591;"	d
FEAT_CSCOPE	vim/vim/src/auto/config.h	382;"	d
FEAT_CSCOPE	vim/vim/src/feature.h	357;"	d
FEAT_CURSORBIND	vim/vim/src/feature.h	717;"	d
FEAT_CW_EDITOR	vim/vim/src/feature.h	829;"	d
FEAT_DIFF	vim/vim/src/feature.h	456;"	d
FEAT_DIGRAPHS	vim/vim/src/feature.h	157;"	d
FEAT_DND	vim/vim/src/feature.h	1151;"	d
FEAT_EMACS_TAGS	vim/vim/src/feature.h	323;"	d
FEAT_EVAL	vim/vim/src/feature.h	367;"	d
FEAT_FILTERPIPE	vim/vim/src/feature.h	1366;"	d
FEAT_FIND_ID	vim/vim/src/feature.h	268;"	d
FEAT_FKMAP	vim/vim/src/feature.h	295;"	d
FEAT_FLOAT	vim/vim/src/feature.h	369;"	d
FEAT_FOLDING	vim/vim/src/feature.h	146;"	d
FEAT_FOOTER	vim/vim/src/feature.h	1341;"	d
FEAT_GETTEXT	vim/vim/src/feature.h	612;"	d
FEAT_GETTEXT	vim/vim/src/vim.h	572;"	d
FEAT_GUI	vim/vim/src/vim.h	121;"	d
FEAT_GUI_ATHENA	vim/vim/src/vim.h	213;"	d
FEAT_GUI_DIALOG	vim/vim/src/feature.h	799;"	d
FEAT_GUI_DIALOG	vim/vim/src/feature.h	808;"	d
FEAT_GUI_ENABLED	vim/vim/src/vim.h	119;"	d
FEAT_GUI_GTK	vim/vim/src/vim.h	216;"	d
FEAT_GUI_MAC	vim/vim/src/vim.h	110;"	d
FEAT_GUI_MOTIF	vim/vim/src/vim.h	210;"	d
FEAT_GUI_MSWIN	vim/vim/src/vim.h	139;"	d
FEAT_GUI_TABLINE	vim/vim/src/feature.h	763;"	d
FEAT_GUI_TEXTDIALOG	vim/vim/src/feature.h	814;"	d
FEAT_GUI_X11	vim/vim/src/feature.h	1316;"	d
FEAT_GUI_X11	vim/vim/src/vim.h	204;"	d
FEAT_HUGE	vim/vim/src/auto/config.h	319;"	d
FEAT_HUGE	vim/vim/src/feature.h	65;"	d
FEAT_INS_EXPAND	vim/vim/src/feature.h	190;"	d
FEAT_JOB_CHANNEL	vim/vim/src/auto/config.h	433;"	d
FEAT_JOB_CHANNEL	vim/vim/src/feature.h	1267;"	d
FEAT_JUMPLIST	vim/vim/src/feature.h	134;"	d
FEAT_KEYMAP	vim/vim/src/feature.h	175;"	d
FEAT_LANGMAP	vim/vim/src/feature.h	167;"	d
FEAT_LIBCALL	vim/vim/src/feature.h	703;"	d
FEAT_LINEBREAK	vim/vim/src/feature.h	239;"	d
FEAT_LISP	vim/vim/src/feature.h	569;"	d
FEAT_LISTCMDS	vim/vim/src/feature.h	111;"	d
FEAT_LOCALMAP	vim/vim/src/feature.h	182;"	d
FEAT_MBYTE	vim/vim/src/auto/config.h	385;"	d
FEAT_MBYTE	vim/vim/src/feature.h	624;"	d
FEAT_MBYTE	vim/vim/src/feature.h	641;"	d
FEAT_MBYTE_IME	vim/vim/src/vim.h	554;"	d
FEAT_MENU	vim/vim/src/feature.h	1326;"	d
FEAT_MENU	vim/vim/src/feature.h	724;"	d
FEAT_MENU	vim/vim/src/feature.h	751;"	d
FEAT_MODIFY_FNAME	vim/vim/src/feature.h	441;"	d
FEAT_MOUSE	vim/vim/src/feature.h	1119;"	d
FEAT_MOUSE	vim/vim/src/vim.h	188;"	d
FEAT_MOUSESHAPE	vim/vim/src/feature.h	1193;"	d
FEAT_MOUSE_DEC	vim/vim/src/feature.h	1063;"	d
FEAT_MOUSE_GPM	vim/vim/src/feature.h	1087;"	d
FEAT_MOUSE_NET	vim/vim/src/feature.h	1060;"	d
FEAT_MOUSE_PTERM	vim/vim/src/feature.h	1075;"	d
FEAT_MOUSE_SGR	vim/vim/src/feature.h	1069;"	d
FEAT_MOUSE_TTY	vim/vim/src/feature.h	1116;"	d
FEAT_MOUSE_URXVT	vim/vim/src/feature.h	1066;"	d
FEAT_MOUSE_XTERM	vim/vim/src/feature.h	1057;"	d
FEAT_MOUSE_XTERM	vim/vim/src/feature.h	1096;"	d
FEAT_MOUSE_XTERM	vim/vim/src/feature.h	1101;"	d
FEAT_MULTI_LANG	vim/vim/src/feature.h	608;"	d
FEAT_NETBEANS_INTG	vim/vim/src/auto/config.h	430;"	d
FEAT_NETBEANS_INTG	vim/vim/src/feature.h	1260;"	d
FEAT_NORMAL	vim/vim/src/feature.h	70;"	d
FEAT_NORMAL	vim/vim/src/feature.h	82;"	d
FEAT_NUM64	vim/vim/src/feature.h	372;"	d
FEAT_PATH_EXTRA	vim/vim/src/feature.h	276;"	d
FEAT_PERSISTENT_UNDO	vim/vim/src/feature.h	1358;"	d
FEAT_POSTSCRIPT	vim/vim/src/feature.h	434;"	d
FEAT_PRINTER	vim/vim/src/feature.h	430;"	d
FEAT_PROFILE	vim/vim/src/feature.h	383;"	d
FEAT_PYTHON	vim/vim/src/auto/config.h	337;"	d
FEAT_QUICKFIX	vim/vim/src/feature.h	253;"	d
FEAT_RELTIME	vim/vim/src/feature.h	393;"	d
FEAT_RENDER_OPTIONS	vim/vim/src/vim.h	128;"	d
FEAT_RESTORE_ORIG_SCREEN	vim/vim/src/os_win32.c	2344;"	d	file:
FEAT_RIGHTLEFT	vim/vim/src/feature.h	285;"	d
FEAT_RIGHTLEFT	vim/vim/src/feature.h	299;"	d
FEAT_RIGHTLEFT	vim/vim/src/feature.h	314;"	d
FEAT_SCROLLBIND	vim/vim/src/feature.h	710;"	d
FEAT_SEARCHPATH	vim/vim/src/feature.h	260;"	d
FEAT_SEARCH_EXTRA	vim/vim/src/feature.h	246;"	d
FEAT_SESSION	vim/vim/src/feature.h	599;"	d
FEAT_SHORTCUT	vim/vim/src/os_win32.h	55;"	d
FEAT_SIGNS	vim/vim/src/feature.h	1283;"	d
FEAT_SIGN_ICONS	vim/vim/src/feature.h	1288;"	d
FEAT_SMALL	vim/vim/src/feature.h	85;"	d
FEAT_SMARTINDENT	vim/vim/src/feature.h	577;"	d
FEAT_SOURCE_FFS	vim/vim/src/os_mac.h	87;"	d
FEAT_SOURCE_FF_MAC	vim/vim/src/os_mac.h	88;"	d
FEAT_SPELL	vim/vim/src/feature.h	531;"	d
FEAT_STL_OPT	vim/vim/src/feature.h	472;"	d
FEAT_SUN_WORKSHOP	vim/vim/src/feature.h	1252;"	d
FEAT_SYN_HL	vim/vim/src/feature.h	514;"	d
FEAT_SYSMOUSE	vim/vim/src/feature.h	1091;"	d
FEAT_TAG_BINS	vim/vim/src/feature.h	336;"	d
FEAT_TAG_OLDSTATIC	vim/vim/src/feature.h	344;"	d
FEAT_TEAROFF	vim/vim/src/feature.h	726;"	d
FEAT_TERMGUICOLORS	vim/vim/src/feature.h	824;"	d
FEAT_TERMINAL	vim/vim/src/feature.h	1274;"	d
FEAT_TERMRESPONSE	vim/vim/src/feature.h	1178;"	d
FEAT_TEXTOBJ	vim/vim/src/feature.h	407;"	d
FEAT_TIMERS	vim/vim/src/feature.h	400;"	d
FEAT_TINY	vim/vim/src/feature.h	88;"	d
FEAT_TITLE	vim/vim/src/feature.h	468;"	d
FEAT_TOOLBAR	vim/vim/src/feature.h	746;"	d
FEAT_USR_CMDS	vim/vim/src/feature.h	421;"	d
FEAT_VIMINFO	vim/vim/src/feature.h	504;"	d
FEAT_VIRTUALEDIT	vim/vim/src/feature.h	217;"	d
FEAT_VISUALEXTRA	vim/vim/src/feature.h	210;"	d
FEAT_VREPLACE	vim/vim/src/feature.h	224;"	d
FEAT_WAK	vim/vim/src/option.h	955;"	d
FEAT_WILDIGN	vim/vim/src/feature.h	487;"	d
FEAT_WILDMENU	vim/vim/src/feature.h	494;"	d
FEAT_WINDOWS	vim/vim/src/feature.h	102;"	d
FEAT_WRITEBACKUP	vim/vim/src/feature.h	849;"	d
FEAT_X11	vim/vim/src/vim.h	194;"	d
FEAT_X11	vim/vim/src/vim.h	201;"	d
FEAT_XCLIPBOARD	vim/vim/src/feature.h	1141;"	d
FEAT_XCLIPBOARD	vim/vim/src/vim.h	207;"	d
FEAT_XFONTSET	vim/vim/src/feature.h	1306;"	d
FEAT_XFONTSET	vim/vim/src/feature.h	688;"	d
FEAT_XIM	vim/vim/src/auto/config.h	391;"	d
FEAT_XIM	vim/vim/src/vim.h	222;"	d
FF	vim/vim/src/ascii.h	109;"	d
FF	vim/vim/src/ascii.h	30;"	d
FF	vim/vim/src/vim.h	2332;"	d
FF_DOS	vim/vim/src/option.h	43;"	d
FF_MAC	vim/vim/src/option.h	44;"	d
FF_MAX_STAR_STAR_EXPAND	vim/vim/src/misc2.c	3948;"	d	file:
FF_UNIX	vim/vim/src/option.h	45;"	d
FGETS_SIZE	vim/vim/src/fileio.c	6440;"	d	file:
FILE1	vim/vim/src/ex_cmds.h	61;"	d
FILEINFO_ENC_FAIL	vim/vim/src/vim.h	2414;"	d
FILEINFO_INFO_FAIL	vim/vim/src/vim.h	2416;"	d
FILEINFO_OK	vim/vim/src/vim.h	2413;"	d
FILEINFO_READ_FAIL	vim/vim/src/vim.h	2415;"	d
FILEMOD	vim/vim/src/Makefile	/^FILEMOD = 644$/;"	m
FILES	vim/vim/src/ex_cmds.h	59;"	d
FILETYPE_FILE	vim/vim/src/os_amiga.h	123;"	d
FILETYPE_FILE	vim/vim/src/os_dos.h	92;"	d
FILETYPE_FILE	vim/vim/src/os_mac.h	178;"	d
FILETYPE_FILE	vim/vim/src/os_unix.h	226;"	d
FILE_ATTRIBUTE_REPARSE_POINT	vim/vim/src/os_win32.h	136;"	d
FILE_SEP	vim/vim/src/xxd/xxd.c	167;"	d	file:
FILL_X	vim/vim/src/gui.h	105;"	d
FILL_X	vim/vim/src/gui.h	99;"	d
FILL_Y	vim/vim/src/gui.h	100;"	d
FILL_Y	vim/vim/src/gui.h	109;"	d
FINAL	vim/vim/src/gui_dwrite.cpp	/^class GdiTextRenderer FINAL : public IDWriteTextRenderer$/;"	c	file:	inherits:IDWriteTextRenderer
FINAL	vim/vim/src/gui_dwrite.cpp	37;"	d	file:
FINAL	vim/vim/src/gui_dwrite.cpp	39;"	d	file:
FINAL	vim/vim/src/if_ole.cpp	/^class CVim FINAL : public IVim$/;"	c	file:	inherits:IVim
FINAL	vim/vim/src/if_ole.cpp	/^class CVimCF FINAL : public IClassFactory$/;"	c	file:	inherits:IClassFactory
FINAL	vim/vim/src/if_ole.cpp	38;"	d	file:
FINAL	vim/vim/src/if_ole.cpp	40;"	d	file:
FINAL::CVim	vim/vim/src/if_ole.cpp	/^    CVim() : ref(0), typeinfo(0) {};$/;"	f	class:FINAL	file:	access:private	signature:()
FINAL::CVimCF	vim/vim/src/if_ole.cpp	/^    CVimCF() : ref(0) {};$/;"	f	class:FINAL	file:	access:private	signature:()
FINAL::Create	vim/vim/src/if_ole.cpp	/^    static CVim *Create(int *pbDoRestart);$/;"	p	class:FINAL	file:	access:public	signature:(int *pbDoRestart)
FINAL::Create	vim/vim/src/if_ole.cpp	/^    static CVimCF *Create();$/;"	p	class:FINAL	file:	access:public	signature:()
FINAL::CreateInstance	vim/vim/src/if_ole.cpp	/^    STDMETHOD(CreateInstance)(IUnknown *punkOuter, REFIID riid, void ** ppv);$/;"	p	class:FINAL	file:	access:public	signature:(IUnknown *punkOuter, REFIID riid, void ** ppv)
FINAL::DrawGlyphRun	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawGlyphRun)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE measuringMode, __in DWRITE_GLYPH_RUN const* glyphRun, __in DWRITE_GLYPH_RUN_DESCRIPTION const* glyphRunDescription, IUnknown* clientDrawingEffect)
FINAL::DrawInlineObject	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawInlineObject)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT originX, FLOAT originY, IDWriteInlineObject* inlineObject, BOOL isSideways, BOOL isRightToLeft, IUnknown* clientDrawingEffect)
FINAL::DrawStrikethrough	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawStrikethrough)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, __in DWRITE_STRIKETHROUGH const* strikethrough, IUnknown* clientDrawingEffect)
FINAL::DrawUnderline	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(DrawUnderline)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, __in DWRITE_UNDERLINE const* underline, IUnknown* clientDrawingEffect)
FINAL::Eval	vim/vim/src/if_ole.cpp	/^    STDMETHOD(Eval)(BSTR expr, BSTR *result);$/;"	p	class:FINAL	file:	access:public	signature:(BSTR expr, BSTR *result)
FINAL::GdiTextRenderer	vim/vim/src/gui_dwrite.cpp	/^    GdiTextRenderer($/;"	f	class:FINAL	access:public	signature:( IDWriteBitmapRenderTarget* bitmapRenderTarget, IDWriteRenderingParams* renderingParams)
FINAL::GetCurrentTransform	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(GetCurrentTransform)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, __out DWRITE_MATRIX* transform)
FINAL::GetHwnd	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetHwnd)(UINT_PTR *result);$/;"	p	class:FINAL	file:	access:public	signature:(UINT_PTR *result)
FINAL::GetIDsOfNames	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetIDsOfNames)(const IID &iid, OLECHAR **names, UINT n, LCID, DISPID *dispids);$/;"	p	class:FINAL	file:	access:public	signature:(const IID &iid, OLECHAR **names, UINT n, LCID, DISPID *dispids)
FINAL::GetPixelsPerDip	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(GetPixelsPerDip)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, __out FLOAT* pixelsPerDip)
FINAL::GetTypeInfo	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetTypeInfo)(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo);$/;"	p	class:FINAL	file:	access:public	signature:(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo)
FINAL::GetTypeInfoCount	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetTypeInfoCount)(UINT *pCount);$/;"	p	class:FINAL	file:	access:public	signature:(UINT *pCount)
FINAL::IFACEMETHOD_	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD_(unsigned long, AddRef) ()$/;"	f	class:FINAL	access:public	signature:(unsigned long, AddRef)
FINAL::IFACEMETHOD_	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD_(unsigned long, Release) ()$/;"	f	class:FINAL	access:public	signature:(unsigned long, Release)
FINAL::Invoke	vim/vim/src/if_ole.cpp	/^    STDMETHOD(Invoke)(DISPID member, const IID &iid, LCID, WORD flags, DISPPARAMS *dispparams, VARIANT *result, EXCEPINFO *excepinfo, UINT *argerr);$/;"	p	class:FINAL	file:	access:public	signature:(DISPID member, const IID &iid, LCID, WORD flags, DISPPARAMS *dispparams, VARIANT *result, EXCEPINFO *excepinfo, UINT *argerr)
FINAL::IsPixelSnappingDisabled	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(IsPixelSnappingDisabled)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, __out BOOL* isDisabled)
FINAL::LockServer	vim/vim/src/if_ole.cpp	/^    STDMETHOD(LockServer)(BOOL lock);$/;"	p	class:FINAL	file:	access:public	signature:(BOOL lock)
FINAL::QueryInterface	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(QueryInterface)($/;"	f	class:FINAL	access:public	signature:( IID const& riid, void** ppvObject)
FINAL::QueryInterface	vim/vim/src/if_ole.cpp	/^    STDMETHOD(QueryInterface)(REFIID riid, void ** ppv);$/;"	p	class:FINAL	file:	access:public	signature:(REFIID riid, void ** ppv)
FINAL::STDMETHOD_	vim/vim/src/if_ole.cpp	/^    STDMETHOD_(unsigned long, AddRef)(void);$/;"	p	class:FINAL	file:	access:public	signature:(unsigned long, AddRef)
FINAL::STDMETHOD_	vim/vim/src/if_ole.cpp	/^    STDMETHOD_(unsigned long, Release)(void);$/;"	p	class:FINAL	file:	access:public	signature:(unsigned long, Release)
FINAL::SendKeys	vim/vim/src/if_ole.cpp	/^    STDMETHOD(SendKeys)(BSTR keys);$/;"	p	class:FINAL	file:	access:public	signature:(BSTR keys)
FINAL::SetForeground	vim/vim/src/if_ole.cpp	/^    STDMETHOD(SetForeground)(void);$/;"	p	class:FINAL	file:	access:public	signature:(void)
FINAL::cRefCount_	vim/vim/src/gui_dwrite.cpp	/^    long cRefCount_;$/;"	m	class:FINAL	file:	access:private
FINAL::pRenderTarget_	vim/vim/src/gui_dwrite.cpp	/^    IDWriteBitmapRenderTarget* pRenderTarget_;$/;"	m	class:FINAL	file:	access:private
FINAL::pRenderingParams_	vim/vim/src/gui_dwrite.cpp	/^    IDWriteRenderingParams* pRenderingParams_;$/;"	m	class:FINAL	file:	access:private
FINAL::ref	vim/vim/src/if_ole.cpp	/^    unsigned long ref;$/;"	m	class:FINAL	file:	access:private
FINAL::typeinfo	vim/vim/src/if_ole.cpp	/^    ITypeInfo *typeinfo;$/;"	m	class:FINAL	file:	access:private
FINAL::~CVim	vim/vim/src/if_ole.cpp	/^    virtual ~CVim();$/;"	p	class:FINAL	file:	access:public	signature:()
FINAL::~CVimCF	vim/vim/src/if_ole.cpp	/^    virtual ~CVimCF() {};$/;"	f	class:FINAL	access:public	signature:()
FINAL::~GdiTextRenderer	vim/vim/src/gui_dwrite.cpp	/^    virtual ~GdiTextRenderer()$/;"	f	class:FINAL	access:public	signature:()
FINDFILE_BOTH	vim/vim/src/vim.h	861;"	d
FINDFILE_DIR	vim/vim/src/vim.h	860;"	d
FINDFILE_FILE	vim/vim/src/vim.h	859;"	d
FINDREPLACE	vim/vim/src/gui_w32.c	/^typedef int FINDREPLACE;$/;"	t	file:
FIND_ANY	vim/vim/src/vim.h	887;"	d
FIND_COMPOUND	vim/vim/src/spell.c	334;"	d	file:
FIND_DEFINE	vim/vim/src/vim.h	888;"	d
FIND_EVAL	vim/vim/src/vim.h	945;"	d
FIND_FOLDWORD	vim/vim/src/spell.c	331;"	d	file:
FIND_IDENT	vim/vim/src/vim.h	943;"	d
FIND_KEEPCOMPOUND	vim/vim/src/spell.c	335;"	d	file:
FIND_KEEPWORD	vim/vim/src/spell.c	332;"	d	file:
FIND_NAMESPACE_LIM	vim/vim/src/misc1.c	5776;"	d	file:
FIND_PREFIX	vim/vim/src/spell.c	333;"	d	file:
FIND_REPLACE_DIALOG	vim/vim/src/feature.h	1161;"	d
FIND_STRING	vim/vim/src/vim.h	944;"	d
FIO_ALL	vim/vim/src/fileio.c	78;"	d	file:
FIO_CODEPAGE	vim/vim/src/fileio.c	67;"	d	file:
FIO_ENCRYPTED	vim/vim/src/fileio.c	75;"	d	file:
FIO_ENDIAN_L	vim/vim/src/fileio.c	74;"	d	file:
FIO_GET_CP	vim/vim/src/fileio.c	69;"	d	file:
FIO_LATIN1	vim/vim/src/fileio.c	61;"	d	file:
FIO_MACROMAN	vim/vim/src/fileio.c	72;"	d	file:
FIO_NOCONVERT	vim/vim/src/fileio.c	76;"	d	file:
FIO_PUT_CP	vim/vim/src/fileio.c	68;"	d	file:
FIO_UCS2	vim/vim/src/fileio.c	63;"	d	file:
FIO_UCS4	vim/vim/src/fileio.c	64;"	d	file:
FIO_UCSBOM	vim/vim/src/fileio.c	77;"	d	file:
FIO_UTF16	vim/vim/src/fileio.c	65;"	d	file:
FIO_UTF8	vim/vim/src/fileio.c	62;"	d	file:
FIRST_NL	vim/vim/src/regexp.c	182;"	d	file:
FIXVAR_CNT	vim/vim/src/structs.h	1386;"	d
FIX_FOR_BOGUSCOLS	vim/vim/src/screen.c	3184;"	d	file:
FLEN_FIXED	vim/vim/src/userfunc.c	475;"	d	file:
FL_ADJUST_CURSOR	vim/vim/src/if_tcl.c	493;"	d	file:
FL_UPDATE_CURBUF	vim/vim/src/if_tcl.c	492;"	d	file:
FL_UPDATE_SCREEN	vim/vim/src/if_tcl.c	491;"	d	file:
FMT8BIT	vim/vim/src/gui_at_fs.c	52;"	d	file:
FMT_PATTERNS	vim/vim/src/quickfix.c	100;"	d	file:
FM_BACKWARD	vim/vim/src/vim.h	1019;"	d
FM_BLOCKSTOP	vim/vim/src/vim.h	1021;"	d
FM_FORWARD	vim/vim/src/vim.h	1020;"	d
FM_SKIPCOMM	vim/vim/src/vim.h	1022;"	d
FNAME	vim/vim/src/regexp.c	191;"	d	file:
FNAME_EXP	vim/vim/src/vim.h	949;"	d
FNAME_HYP	vim/vim/src/vim.h	950;"	d
FNAME_ILLEGAL	vim/vim/src/os_amiga.h	72;"	d
FNAME_ILLEGAL	vim/vim/src/os_vms_conf.h	5;"	d
FNAME_ILLEGAL	vim/vim/src/os_win32.h	90;"	d
FNAME_INCL	vim/vim/src/vim.h	951;"	d
FNAME_MESS	vim/vim/src/vim.h	948;"	d
FNAME_REL	vim/vim/src/vim.h	952;"	d
FNAME_UNESC	vim/vim/src/vim.h	954;"	d
FNE_CHECK_START	vim/vim/src/vim.h	2501;"	d
FNE_INCL_BR	vim/vim/src/vim.h	2500;"	d
FOLD_TEXT_LEN	vim/vim/src/vim.h	1537;"	d
FONTLEN	vim/vim/src/gui.c	845;"	d	file:
FONTSET_ALWAYS	vim/vim/src/gui.h	82;"	d
FONT_STYLE_BUFFER_SIZE	vim/vim/src/gui_mac.c	1424;"	d	file:
FORCE	vim/vim/src/libvterm/src/state.c	207;"	d	file:
FORCE_BIN	vim/vim/src/ex_cmds.h	1785;"	d
FORCE_NOBIN	vim/vim/src/ex_cmds.h	1786;"	d
FOREGROUND	vim/vim/src/gui_x11_pm.h	89;"	d
FORMAT_PLAIN	vim/vim/src/libvterm/bin/unterm.c	/^  FORMAT_PLAIN,$/;"	e	enum:__anon43	file:
FORMAT_SGR	vim/vim/src/libvterm/bin/unterm.c	/^  FORMAT_SGR$/;"	e	enum:__anon43	file:
FORWARD	vim/vim/src/vim.h	727;"	d
FORWARD_FILE	vim/vim/src/vim.h	729;"	d
FOR_ALL_BUFFERS	vim/vim/src/globals.h	608;"	d
FOR_ALL_TABPAGES	vim/vim/src/globals.h	554;"	d
FOR_ALL_TABPAGES	vim/vim/src/globals.h	572;"	d
FOR_ALL_TAB_WINDOWS	vim/vim/src/globals.h	562;"	d
FOR_ALL_TAB_WINDOWS	vim/vim/src/globals.h	574;"	d
FOR_ALL_WINDOWS	vim/vim/src/globals.h	553;"	d
FOR_ALL_WINDOWS	vim/vim/src/globals.h	571;"	d
FOR_ALL_WINDOWS_IN_TAB	vim/vim/src/globals.h	555;"	d
FOR_ALL_WINDOWS_IN_TAB	vim/vim/src/globals.h	573;"	d
FOR_MSW	vim/vim/src/xpm_w32.c	20;"	d	file:
FO_ALL	vim/vim/src/option.h	107;"	d
FO_AUTO	vim/vim/src/option.h	102;"	d
FO_INS_BLANK	vim/vim/src/option.h	96;"	d
FO_INS_LONG	vim/vim/src/option.h	95;"	d
FO_INS_VI	vim/vim/src/option.h	94;"	d
FO_MBYTE_BREAK	vim/vim/src/option.h	97;"	d
FO_MBYTE_JOIN	vim/vim/src/option.h	98;"	d
FO_MBYTE_JOIN2	vim/vim/src/option.h	99;"	d
FO_ONE_LETTER	vim/vim/src/option.h	100;"	d
FO_OPEN_COMS	vim/vim/src/option.h	90;"	d
FO_Q_COMS	vim/vim/src/option.h	91;"	d
FO_Q_NUMBER	vim/vim/src/option.h	92;"	d
FO_Q_SECOND	vim/vim/src/option.h	93;"	d
FO_REMOVE_COMS	vim/vim/src/option.h	103;"	d
FO_RET_COMS	vim/vim/src/option.h	89;"	d
FO_WHITE_PAR	vim/vim/src/option.h	101;"	d
FO_WRAP	vim/vim/src/option.h	87;"	d
FO_WRAP_COMS	vim/vim/src/option.h	88;"	d
FPC_DIFF	vim/vim/src/vim.h	1059;"	d
FPC_DIFFX	vim/vim/src/vim.h	1061;"	d
FPC_NOTX	vim/vim/src/vim.h	1060;"	d
FPC_SAME	vim/vim/src/vim.h	1058;"	d
FPC_SAMEX	vim/vim/src/vim.h	1062;"	d
FRACTION_MULT	vim/vim/src/window.c	5729;"	d	file:
FRD_FINDNEXT	vim/vim/src/gui.h	491;"	d
FRD_MATCH_CASE	vim/vim/src/gui.h	499;"	d
FRD_REPLACE	vim/vim/src/gui.h	493;"	d
FRD_REPLACEALL	vim/vim/src/gui.h	494;"	d
FRD_R_FINDNEXT	vim/vim/src/gui.h	492;"	d
FRD_TYPE_MASK	vim/vim/src/gui.h	496;"	d
FRD_UNDO	vim/vim/src/gui.h	495;"	d
FRD_WHOLE_WORD	vim/vim/src/gui.h	498;"	d
FREE_FNAME	vim/vim/src/edit.c	87;"	d	file:
FROM_LEFT_1ST_BUTTON_PRESSED	vim/vim/src/os_mswin.c	49;"	d	file:
FROM_LEFT_1ST_BUTTON_PRESSED	vim/vim/src/os_win32.c	59;"	d	file:
FROM_LEFT_2ND_BUTTON_PRESSED	vim/vim/src/os_mswin.c	55;"	d	file:
FROM_LEFT_2ND_BUTTON_PRESSED	vim/vim/src/os_win32.c	65;"	d	file:
FROM_LEFT_3RD_BUTTON_PRESSED	vim/vim/src/os_mswin.c	58;"	d	file:
FROM_LEFT_3RD_BUTTON_PRESSED	vim/vim/src/os_win32.c	68;"	d	file:
FROM_LEFT_4TH_BUTTON_PRESSED	vim/vim/src/os_mswin.c	61;"	d	file:
FROM_LEFT_4TH_BUTTON_PRESSED	vim/vim/src/os_win32.c	71;"	d	file:
FROM_OLE_STR	vim/vim/src/VisVim/OleAut.h	60;"	d
FROM_OLE_STRING	vim/vim/src/VisVim/OleAut.h	54;"	d
FROM_OLE_STRING_BUF	vim/vim/src/VisVim/OleAut.h	55;"	d
FROM_OLE_STR_BUF	vim/vim/src/VisVim/OleAut.h	61;"	d
FR_COL	vim/vim/src/structs.h	2504;"	d
FR_LEAF	vim/vim/src/structs.h	2502;"	d
FR_ROW	vim/vim/src/structs.h	2503;"	d
FTOFF_FILE	vim/vim/src/os_amiga.h	132;"	d
FTOFF_FILE	vim/vim/src/os_dos.h	101;"	d
FTOFF_FILE	vim/vim/src/os_mac.h	187;"	d
FTOFF_FILE	vim/vim/src/os_unix.h	235;"	d
FTPLUGIN_FILE	vim/vim/src/os_amiga.h	126;"	d
FTPLUGIN_FILE	vim/vim/src/os_dos.h	95;"	d
FTPLUGIN_FILE	vim/vim/src/os_mac.h	181;"	d
FTPLUGIN_FILE	vim/vim/src/os_unix.h	229;"	d
FTPLUGOF_FILE	vim/vim/src/os_amiga.h	135;"	d
FTPLUGOF_FILE	vim/vim/src/os_dos.h	104;"	d
FTPLUGOF_FILE	vim/vim/src/os_mac.h	190;"	d
FTPLUGOF_FILE	vim/vim/src/os_unix.h	238;"	d
FTPLUGSOURCE	vim/vim/src/Makefile	/^FTPLUGSOURCE = ..\/runtime\/ftplugin$/;"	m
FTPLUGSUBDIR	vim/vim/src/Makefile	/^FTPLUGSUBDIR = \/ftplugin$/;"	m
FTPLUGSUBLOC	vim/vim/src/Makefile	/^FTPLUGSUBLOC	= $(VIMRTLOC)$(FTPLUGSUBDIR)$/;"	m
FUNC	vim/vim/src/xpm/include/simx.h	135;"	d
FUNC	vim/vim/src/xpm/include/simx.h	52;"	d
FUNC	vim/vim/src/xpm/include/simx.h	55;"	d
FUNC	vim/vim/src/xpm/include/xpm.h	293;"	d
FUNC	vim/vim/src/xpm/include/xpm.h	296;"	d
FUNC2GENERIC	vim/vim/src/gui.h	565;"	d
FUNC2GENERIC	vim/vim/src/gui.h	567;"	d
FUNCARG	vim/vim/src/userfunc.c	30;"	d	file:
FUNCLINE	vim/vim/src/userfunc.c	31;"	d	file:
F_A	vim/vim/src/hangulin.c	26;"	d	file:
F_BCOMMA	vim/vim/src/farsi.h	86;"	d
F_BLANK	vim/vim/src/farsi.h	74;"	d
F_BLANK	vim/vim/src/if_python3.c	51;"	d	file:
F_BSIZE	vim/vim/src/memfile.c	42;"	d	file:
F_BSIZE	vim/vim/src/memfile.c	48;"	d	file:
F_BSLASH	vim/vim/src/farsi.h	156;"	d
F_COMMA	vim/vim/src/farsi.h	81;"	d
F_CURRENCY	vim/vim/src/farsi.h	78;"	d
F_DCOLON	vim/vim/src/farsi.h	102;"	d
F_DIVIDE	vim/vim/src/farsi.h	88;"	d
F_EQUALS	vim/vim/src/farsi.h	105;"	d
F_EXCL	vim/vim/src/farsi.h	77;"	d
F_F	vim/vim/src/hangulin.c	23;"	d	file:
F_GREATER	vim/vim/src/farsi.h	104;"	d
F_HE	vim/vim/src/farsi.h	141;"	d
F_L	vim/vim/src/hangulin.c	25;"	d	file:
F_LBRACE	vim/vim/src/farsi.h	149;"	d
F_LBRACK	vim/vim/src/farsi.h	147;"	d
F_LESS	vim/vim/src/farsi.h	106;"	d
F_LPARENT	vim/vim/src/farsi.h	82;"	d
F_LQUOT	vim/vim/src/farsi.h	151;"	d
F_M	vim/vim/src/hangulin.c	24;"	d	file:
F_MINUS	vim/vim/src/farsi.h	87;"	d
F_MUL	vim/vim/src/farsi.h	84;"	d
F_NULL	vim/vim/src/hangulin.c	27;"	d	file:
F_PCN	vim/vim/src/farsi.h	76;"	d
F_PERCENT	vim/vim/src/farsi.h	79;"	d
F_PERIOD	vim/vim/src/farsi.h	80;"	d
F_PIPE	vim/vim/src/farsi.h	155;"	d
F_PLUS	vim/vim/src/farsi.h	85;"	d
F_PSP	vim/vim/src/farsi.h	75;"	d
F_QUESTION	vim/vim/src/farsi.h	107;"	d
F_RBRACE	vim/vim/src/farsi.h	150;"	d
F_RBRACK	vim/vim/src/farsi.h	148;"	d
F_RPARENT	vim/vim/src/farsi.h	83;"	d
F_RQUOT	vim/vim/src/farsi.h	152;"	d
F_SEMICOLON	vim/vim/src/farsi.h	103;"	d
F_SLASH	vim/vim/src/farsi.h	89;"	d
F_STAR	vim/vim/src/farsi.h	153;"	d
F_UNDERLINE	vim/vim/src/farsi.h	154;"	d
F_is_TyB_TyC_TyD	vim/vim/src/farsi.c	/^F_is_TyB_TyC_TyD(int src, int offset)$/;"	f	file:	signature:(int src, int offset)
F_is_TyB_TyC_TyD	vim/vim/src/farsi.c	/^static int F_is_TyB_TyC_TyD(int src, int offset);$/;"	p	file:	signature:(int src, int offset)
F_is_TyC_TyD	vim/vim/src/farsi.c	/^F_is_TyC_TyD(int c)$/;"	f	file:	signature:(int c)
F_is_TyE	vim/vim/src/farsi.c	/^F_is_TyE(int c)$/;"	f	file:	signature:(int c)
F_isalpha	vim/vim/src/farsi.c	/^F_isalpha(int c)$/;"	f	signature:(int c)
F_ischar	vim/vim/src/farsi.c	/^F_ischar(int c)$/;"	f	signature:(int c)
F_isdigit	vim/vim/src/farsi.c	/^F_isdigit(int c)$/;"	f	signature:(int c)
F_isterm	vim/vim/src/farsi.c	/^F_isterm(int c)$/;"	f	file:	signature:(int c)
False	vim/vim/src/xpm/include/simx.h	128;"	d
FileName	vim/vim/runtime/tools/ccfilter.c	/^char	       FileName[1024];$/;"	v
FillArea	vim/vim/src/gui_at_sb.c	/^FillArea($/;"	f	file:	signature:( ScrollbarWidget sbw, Position top, Position bottom, int fill, int draw_shadow)
Find	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	e	enum:__anon69
FindProcessBySignature	vim/vim/src/gui_mac.c	/^FindProcessBySignature($/;"	f	signature:( const OSType targetType, const OSType targetCreator, ProcessSerialNumberPtr psnPtr)
FindWindowTitle	vim/vim/src/gui_w32.c	/^FindWindowTitle(HWND hwnd, LPARAM lParam)$/;"	f	file:	signature:(HWND hwnd, LPARAM lParam)
FinderFindModule	vim/vim/src/if_py_both.h	/^FinderFindModule(PyObject *self, PyObject *args)$/;"	f	signature:(PyObject *self, PyObject *args)
FitConsoleWindow	vim/vim/src/os_win32.c	/^FitConsoleWindow($/;"	f	file:	signature:( COORD dwBufferSize, BOOL WantAdjust)
FloatInRange	vim/vim/src/gui_at_sb.c	/^FloatInRange(float num, float small, float big)$/;"	f	file:	signature:(float num, float small, float big)
FontPanelHandler	vim/vim/src/gui_mac.c	/^FontPanelHandler($/;"	f	file:	signature:( EventHandlerCallRef inHandlerCallRef, EventRef inEvent, void *inUserData)
FractionLoc	vim/vim/src/gui_at_sb.c	/^FractionLoc(ScrollbarWidget sbw, int x, int y)$/;"	f	file:	signature:(ScrollbarWidget sbw, int x, int y)
Frag	vim/vim/src/regexp_nfa.c	/^struct Frag$/;"	s	file:
Frag::out	vim/vim/src/regexp_nfa.c	/^    Ptrlist	*out;$/;"	m	struct:Frag	file:	access:public
Frag::start	vim/vim/src/regexp_nfa.c	/^    nfa_state_T *start;$/;"	m	struct:Frag	file:	access:public
Frag_T	vim/vim/src/regexp_nfa.c	/^typedef struct Frag Frag_T;$/;"	t	typeref:struct:Frag	file:
Free	vim/vim/src/if_cscope.h	/^    Free,$/;"	e	enum:__anon70
FreeWild	vim/vim/src/misc1.c	/^FreeWild(int count, char_u **files)$/;"	f	signature:(int count, char_u **files)
Fspec_Rms	vim/vim/src/os_vms.c	/^static char *Fspec_Rms;		       \/* rms file spec, passed implicitly between routines *\/$/;"	v	file:
FullName_save	vim/vim/src/misc1.c	/^FullName_save($/;"	f	signature:( char_u *fname, int force)
FullPathFromFSSpec_save	vim/vim/src/gui_mac.c	/^char_u *FullPathFromFSSpec_save(FSSpec file)$/;"	f	signature:(FSSpec file)
FunctionAttr	vim/vim/src/if_py_both.h	/^FunctionAttr(FunctionObject *self, char *name)$/;"	f	signature:(FunctionObject *self, char *name)
FunctionAttrs	vim/vim/src/if_py_both.h	/^static char *FunctionAttrs[] = {$/;"	v
FunctionCall	vim/vim/src/if_py_both.h	/^FunctionCall(FunctionObject *self, PyObject *argsObject, PyObject *kwargs)$/;"	f	signature:(FunctionObject *self, PyObject *argsObject, PyObject *kwargs)
FunctionConstructor	vim/vim/src/if_py_both.h	/^FunctionConstructor(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)$/;"	f	signature:(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)
FunctionDestructor	vim/vim/src/if_py_both.h	/^FunctionDestructor(FunctionObject *self)$/;"	f	signature:(FunctionObject *self)
FunctionDir	vim/vim/src/if_py_both.h	/^FunctionDir(PyObject *self)$/;"	f	signature:(PyObject *self)
FunctionGetattr	vim/vim/src/if_python.c	/^FunctionGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
FunctionGetattr	vim/vim/src/if_python.c	/^static PyObject *FunctionGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
FunctionGetattro	vim/vim/src/if_python3.c	/^FunctionGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
FunctionGetattro	vim/vim/src/if_python3.c	/^static PyObject *FunctionGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
FunctionMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef FunctionMethods[] = {$/;"	v	typeref:struct:PyMethodDef
FunctionNew	vim/vim/src/if_py_both.h	/^FunctionNew(PyTypeObject *subtype, char_u *name, int argc, typval_T *argv,$/;"	f	signature:(PyTypeObject *subtype, char_u *name, int argc, typval_T *argv, dict_T *selfdict, int auto_rebind)
FunctionObject	vim/vim/src/if_py_both.h	/^} FunctionObject;$/;"	t	typeref:struct:__anon104
FunctionRepr	vim/vim/src/if_py_both.h	/^FunctionRepr(FunctionObject *self)$/;"	f	signature:(FunctionObject *self)
FunctionType	vim/vim/src/if_py_both.h	/^static PyTypeObject FunctionType;$/;"	v
GAF	vim/vim/src/farsi.h	136;"	d
GAP	vim/vim/src/option.c	9850;"	d	file:
GAP	vim/vim/src/term.c	5824;"	d	file:
GARGCOUNT	vim/vim/src/structs.h	740;"	d
GARGLIST	vim/vim/src/structs.h	736;"	d
GA_CHAR	vim/vim/src/charset.c	446;"	d	file:
GA_EMPTY	vim/vim/src/structs.h	64;"	d
GA_PTR	vim/vim/src/charset.c	447;"	d	file:
GC_malloc	vim/vim/src/if_mzsch.c	440;"	d	file:
GC_malloc_atomic	vim/vim/src/if_mzsch.c	441;"	d	file:
GC_malloc_one_tagged	vim/vim/src/if_mzsch.c	526;"	d	file:
GC_register_traversers	vim/vim/src/if_mzsch.c	527;"	d	file:
GENERIC_64	vim/vim/src/os_vms.c	/^} GENERIC_64;$/;"	t	typeref:struct:_generic_64	file:
GETCONSOLEWINDOWPROC	vim/vim/src/os_win32.c	/^typedef HWND (WINAPI *GETCONSOLEWINDOWPROC)(VOID);$/;"	t	file:
GETCONSOLEWINDOWPROC	vim/vim/src/os_win32.c	/^typedef HWND (__stdcall *GETCONSOLEWINDOWPROC)(VOID);$/;"	t	file:
GETFILE_ERROR	vim/vim/src/vim.h	962;"	d
GETFILE_NOT_WRITTEN	vim/vim/src/vim.h	963;"	d
GETFILE_OPEN_OTHER	vim/vim/src/vim.h	965;"	d
GETFILE_SAME_FILE	vim/vim/src/vim.h	964;"	d
GETFILE_SUCCESS	vim/vim/src/vim.h	967;"	d
GETFILE_UNUSED	vim/vim/src/vim.h	966;"	d
GETF_ALT	vim/vim/src/vim.h	958;"	d
GETF_SETMARK	vim/vim/src/vim.h	957;"	d
GETF_SWITCH	vim/vim/src/vim.h	959;"	d
GETTEXT	vim/vim/src/Make_bc5.mak	/^GETTEXT = yes$/;"	m
GETTEXT	vim/vim/src/Make_cyg_ming.mak	/^GETTEXT=$/;"	m
GETTEXT	vim/vim/src/Make_cyg_ming.mak	/^GETTEXT=yes$/;"	m
GETTEXT	vim/vim/src/Make_mvc.mak	/^GETTEXT = yes$/;"	m
GETTEXTINCLUDE	vim/vim/src/Make_cyg_ming.mak	/^GETTEXTINCLUDE = $(GETTEXT)\/include$/;"	m
GETTEXTLIB	vim/vim/src/Make_cyg_ming.mak	/^GETTEXTLIB = $(INTLPATH)$/;"	m
GETTEXT_DLL	vim/vim/src/GvimExt/gvimext.cpp	160;"	d	file:
GETTEXT_DLL	vim/vim/src/os_win32.c	508;"	d	file:
GETTEXT_DLL_ALT	vim/vim/src/GvimExt/gvimext.cpp	161;"	d	file:
GETTEXT_DLL_ALT	vim/vim/src/os_win32.c	509;"	d	file:
GETTEXT_PATH	vim/vim/src/po/Make_cyg.mak	/^GETTEXT_PATH = \/bin\/$/;"	m
GETTEXT_PATH	vim/vim/src/po/Make_mvc.mak	/^GETTEXT_PATH = H:\\gettext.0.14.4\\bin$/;"	m
GET_ATTR_STRING	vim/vim/src/if_python3.c	794;"	d	file:
GET_CHARTAB	vim/vim/src/charset.c	31;"	d	file:
GET_LOC_LIST	vim/vim/src/quickfix.c	170;"	d	file:
GET_TIMEDIFF	vim/vim/src/ex_cmds2.c	1094;"	d	file:
GET_TIMEDIFF	vim/vim/src/ex_cmds2.c	1098;"	d	file:
GET_UINT32	vim/vim/src/sha256.c	29;"	d	file:
GET_XBUTTON_WPARAM	vim/vim/src/gui_w32.c	885;"	d	file:
GET_X_ATOM	vim/vim/src/gui_gtk_x11.c	105;"	d	file:
GET_X_LPARAM	vim/vim/src/gui_w32.c	296;"	d	file:
GHAF	vim/vim/src/farsi.h	134;"	d
GHAYN	vim/vim/src/farsi.h	132;"	d
GHAYN_	vim/vim/src/farsi.h	47;"	d
GLIB_COMPILE_RESOURCES	vim/vim/src/auto/config.mk	/^GLIB_COMPILE_RESOURCES = $/;"	m
GLOBAL_WO	vim/vim/src/structs.h	2802;"	d
GLV_NO_AUTOLOAD	vim/vim/src/vim.h	2483;"	d
GLV_QUIET	vim/vim/src/vim.h	2482;"	d
GLV_READ_ONLY	vim/vim/src/vim.h	2484;"	d
GOTO_COST	vim/vim/src/screen.c	9182;"	d	file:
GO_ALL	vim/vim/src/option.h	238;"	d
GO_ASEL	vim/vim/src/option.h	217;"	d
GO_ASELML	vim/vim/src/option.h	218;"	d
GO_ASELPLUS	vim/vim/src/option.h	231;"	d
GO_BOT	vim/vim/src/option.h	219;"	d
GO_CONDIALOG	vim/vim/src/option.h	220;"	d
GO_FOOTER	vim/vim/src/option.h	236;"	d
GO_FORG	vim/vim/src/option.h	222;"	d
GO_GREY	vim/vim/src/option.h	223;"	d
GO_HORSCROLL	vim/vim/src/option.h	224;"	d
GO_ICON	vim/vim/src/option.h	225;"	d
GO_LEFT	vim/vim/src/option.h	226;"	d
GO_MENUS	vim/vim/src/option.h	228;"	d
GO_NOSYSMENU	vim/vim/src/option.h	229;"	d
GO_POINTER	vim/vim/src/option.h	230;"	d
GO_RIGHT	vim/vim/src/option.h	232;"	d
GO_TABLINE	vim/vim/src/option.h	221;"	d
GO_TEAROFF	vim/vim/src/option.h	234;"	d
GO_TOOLBAR	vim/vim/src/option.h	235;"	d
GO_VERTICAL	vim/vim/src/option.h	237;"	d
GO_VLEFT	vim/vim/src/option.h	227;"	d
GO_VRIGHT	vim/vim/src/option.h	233;"	d
GPLineEval_EVALUATE	vim/vim/src/workshop.c	/^    GPLineEval_EVALUATE,		\/* evaluate expression *\/$/;"	e	enum:__anon232	file:
GPLineEval_INDIRECT	vim/vim/src/workshop.c	/^    GPLineEval_INDIRECT,		\/* evaluate *<expression> *\/$/;"	e	enum:__anon232	file:
GPLineEval_TYPE	vim/vim/src/workshop.c	/^    GPLineEval_TYPE			\/* type of expression *\/$/;"	e	enum:__anon232	file:
GREEN	vim/vim/src/term.c	2804;"	d	file:
GREG_EXPR_SRC	vim/vim/src/vim.h	2434;"	d
GREG_LIST	vim/vim/src/vim.h	2435;"	d
GREG_NO_EXPR	vim/vim/src/vim.h	2433;"	d
GRESOURCE_OBJ	vim/vim/src/auto/config.mk	/^GRESOURCE_OBJ = $/;"	m
GRESOURCE_SRC	vim/vim/src/auto/config.mk	/^GRESOURCE_SRC = $/;"	m
GST	vim/vim/src/Make_sas.mak	/^GST	= vim.gst$/;"	m
GTK_BUNDLE	vim/vim/src/Makefile	/^GTK_BUNDLE	=$/;"	m
GTK_DEFS	vim/vim/src/Makefile	/^GTK_DEFS	= -DFEAT_GUI_GTK $(NARROW_PROTO)$/;"	m
GTK_FORM	vim/vim/src/gui_gtk_f.h	26;"	d
GTK_FORM	vim/vim/src/gui_gtk_f.h	31;"	d
GTK_FORM_CLASS	vim/vim/src/gui_gtk_f.h	27;"	d
GTK_FORM_CLASS	vim/vim/src/gui_gtk_f.h	32;"	d
GTK_INSTALL	vim/vim/src/Makefile	/^GTK_INSTALL     = install_normal install_gui_extra$/;"	m
GTK_IPATH	vim/vim/src/Makefile	/^GTK_IPATH	= $(GUI_INC_LOC)$/;"	m
GTK_IS_FORM	vim/vim/src/gui_gtk_f.h	28;"	d
GTK_IS_FORM	vim/vim/src/gui_gtk_f.h	33;"	d
GTK_IS_FORM_CLASS	vim/vim/src/gui_gtk_f.h	29;"	d
GTK_IS_FORM_CLASS	vim/vim/src/gui_gtk_f.h	34;"	d
GTK_LIBNAME	vim/vim/src/auto/config.mk	/^GTK_LIBNAME	= -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lgobject-2.0 -lglib-2.0 -lfreetype  $/;"	m
GTK_LIBS1	vim/vim/src/Makefile	/^GTK_LIBS1	=$/;"	m
GTK_LIBS2	vim/vim/src/Makefile	/^GTK_LIBS2	= $(GTK_LIBNAME)$/;"	m
GTK_LIBS_DIR	vim/vim/src/Makefile	/^GTK_LIBS_DIR	= $(GUI_LIB_LOC)$/;"	m
GTK_MAN_TARGETS	vim/vim/src/Makefile	/^GTK_MAN_TARGETS = yes$/;"	m
GTK_OBJ	vim/vim/src/Makefile	/^GTK_OBJ		= objects\/gui.o objects\/gui_gtk.o objects\/gui_gtk_x11.o \\$/;"	m
GTK_SRC	vim/vim/src/Makefile	/^GTK_SRC		= gui.c gui_gtk.c gui_gtk_x11.c gui_gtk_f.c \\$/;"	m
GTK_TARGETS	vim/vim/src/Makefile	/^GTK_TARGETS	= installglinks$/;"	m
GTK_TESTTARGET	vim/vim/src/Makefile	/^GTK_TESTTARGET  = gui$/;"	m
GTK_TYPE_FORM	vim/vim/src/gui_gtk_f.h	24;"	d
GTK_UPDATE_ICON_CACHE	vim/vim/src/auto/config.mk	/^GTK_UPDATE_ICON_CACHE = \/usr\/bin\/gtk-update-icon-cache$/;"	m
GUARANTEED_STRING_ARG	vim/vim/src/if_mzsch.c	782;"	d	file:
GUARANTEED_STRING_ARG	vim/vim/src/if_mzsch.c	807;"	d	file:
GUARDED	vim/vim/src/netbeans.c	39;"	d	file:
GUARDEDOFFSET	vim/vim/src/netbeans.c	40;"	d	file:
GUI	vim/vim/src/Make_bc5.mak	/^GUI = yes$/;"	m
GUI	vim/vim/src/Make_cyg_ming.mak	/^GUI=yes$/;"	m
GUID_STRING_SIZE	vim/vim/src/if_ole.cpp	/^static const int GUID_STRING_SIZE = 39;$/;"	v	file:
GUIDtochar	vim/vim/src/if_ole.cpp	/^static void GUIDtochar(const GUID &guid, char *GUID, int length)$/;"	f	file:	signature:(const GUID &guid, char *GUID, int length)
GUIDtochar	vim/vim/src/if_ole.cpp	/^static void GUIDtochar(const GUID &guid, char *GUID, int length);$/;"	p	file:	signature:(const GUID &guid, char *GUID, int length)
GUIOBJ	vim/vim/src/Make_cyg_ming.mak	/^GUIOBJ =  $(OUTDIR)\/gui.o $(OUTDIR)\/gui_w32.o $(OUTDIR)\/gui_beval.o $(OUTDIR)\/os_w32exe.o$/;"	m
GUI_ATTR_ENTRY	vim/vim/src/syntax.c	8643;"	d	file:
GUI_BEVAL_H	vim/vim/src/gui_beval.h	11;"	d
GUI_BUNDLE	vim/vim/src/auto/config.mk	/^GUI_BUNDLE	= $(GTK_BUNDLE)$/;"	m
GUI_CHILD_FAILED	vim/vim/src/gui.c	/^    GUI_CHILD_FAILED$/;"	e	enum:__anon248	file:
GUI_CHILD_IO_ERROR	vim/vim/src/gui.c	/^    GUI_CHILD_IO_ERROR,$/;"	e	enum:__anon248	file:
GUI_CHILD_OK	vim/vim/src/gui.c	/^    GUI_CHILD_OK,$/;"	e	enum:__anon248	file:
GUI_DEFS	vim/vim/src/auto/config.mk	/^GUI_DEFS	= $(GTK_DEFS)$/;"	m
GUI_DWRITE_H	vim/vim/src/gui_dwrite.h	13;"	d
GUI_FUNCTION	vim/vim/src/vim.h	1662;"	d
GUI_FUNCTION	vim/vim/src/vim.h	1670;"	d
GUI_FUNCTION	vim/vim/src/vim.h	1678;"	d
GUI_FUNCTION2	vim/vim/src/vim.h	1663;"	d
GUI_FUNCTION2	vim/vim/src/vim.h	1671;"	d
GUI_FUNCTION2	vim/vim/src/vim.h	1679;"	d
GUI_GET_COLOR	vim/vim/src/vim.h	1692;"	d
GUI_GTK_RES_INPUTS	vim/vim/src/Makefile	/^GUI_GTK_RES_INPUTS = \\$/;"	m
GUI_INCL	vim/vim/src/Make_mvc.mak	/^GUI_INCL = $(GUI_INCL) $(DIRECTX_INCL)$/;"	m
GUI_INCL	vim/vim/src/Make_mvc.mak	/^GUI_INCL = \\$/;"	m
GUI_INC_LOC	vim/vim/src/auto/config.mk	/^GUI_INC_LOC	= -pthread -I\/usr\/include\/gtk-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/gtk-2.0\/include -I\/usr\/include\/atk-1.0 -I\/usr\/include\/cairo -I\/usr\/include\/gdk-pixbuf-2.0 -I\/usr\/include\/pango-1.0 -I\/usr\/include\/gio-unix-2.0\/ -I\/usr\/include\/freetype2 -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include -I\/usr\/include\/pixman-1 -I\/usr\/include\/libpng12 -I\/usr\/include\/harfbuzz  $/;"	m
GUI_INSTALL	vim/vim/src/auto/config.mk	/^GUI_INSTALL	= $(GTK_INSTALL)$/;"	m
GUI_IPATH	vim/vim/src/auto/config.mk	/^GUI_IPATH	= $(GTK_IPATH)$/;"	m
GUI_LIB	vim/vim/src/Make_mvc.mak	/^GUI_LIB = \\$/;"	m
GUI_LIBS1	vim/vim/src/auto/config.mk	/^GUI_LIBS1	= $(GTK_LIBS1)$/;"	m
GUI_LIBS2	vim/vim/src/auto/config.mk	/^GUI_LIBS2	= $(GTK_LIBS2)$/;"	m
GUI_LIBS_DIR	vim/vim/src/auto/config.mk	/^GUI_LIBS_DIR	= $(GTK_LIBS_DIR)$/;"	m
GUI_LIB_LOC	vim/vim/src/auto/config.mk	/^GUI_LIB_LOC	=  $/;"	m
GUI_MAN_TARGETS	vim/vim/src/auto/config.mk	/^GUI_MAN_TARGETS	= $(GTK_MAN_TARGETS)$/;"	m
GUI_MCH_GET_COLOR	vim/vim/src/vim.h	1691;"	d
GUI_MCH_GET_RGB	vim/vim/src/vim.h	1689;"	d
GUI_MCH_GET_RGB2	vim/vim/src/vim.h	1690;"	d
GUI_MON_INVERT	vim/vim/src/gui.h	131;"	d
GUI_MON_IS_CURSOR	vim/vim/src/gui.h	132;"	d
GUI_MON_NOCLEAR	vim/vim/src/gui.h	134;"	d
GUI_MON_TRS_CURSOR	vim/vim/src/gui.h	133;"	d
GUI_MON_WRAP_CURSOR	vim/vim/src/gui.h	130;"	d
GUI_OBJ	vim/vim/src/Make_mvc.mak	/^GUI_OBJ = $(GUI_OBJ) $(DIRECTX_OBJ)$/;"	m
GUI_OBJ	vim/vim/src/Make_mvc.mak	/^GUI_OBJ = \\$/;"	m
GUI_OBJ	vim/vim/src/auto/config.mk	/^GUI_OBJ		= $(GTK_OBJ)$/;"	m
GUI_PH_MARGIN	vim/vim/src/gui_photon.c	56;"	d	file:
GUI_PH_MOUSE_TYPE	vim/vim/src/gui_photon.c	58;"	d	file:
GUI_SRC	vim/vim/src/auto/config.mk	/^GUI_SRC		= $(GTK_SRC)$/;"	m
GUI_TARGETS	vim/vim/src/auto/config.mk	/^GUI_TARGETS	= $(GTK_TARGETS)$/;"	m
GUI_TESTARG	vim/vim/src/auto/config.mk	/^GUI_TESTARG	= $(GTK_TESTARG)$/;"	m
GUI_TESTTARGET	vim/vim/src/auto/config.mk	/^GUI_TESTTARGET	= $(GTK_TESTTARGET)$/;"	m
GUI_X_LIBS	vim/vim/src/auto/config.mk	/^GUI_X_LIBS	= $/;"	m
GVIEWNAME	vim/vim/src/Makefile	/^GVIEWNAME	= g$(VIEWNAME)$/;"	m
GVIEWTARGET	vim/vim/src/Makefile	/^GVIEWTARGET	= $(GVIEWNAME)$(LNKEXT)$/;"	m
GVIMDIFFNAME	vim/vim/src/Makefile	/^GVIMDIFFNAME	= g$(VIMDIFFNAME)$/;"	m
GVIMDIFFTARGET	vim/vim/src/Makefile	/^GVIMDIFFTARGET	= $(GVIMDIFFNAME)$(LNKEXT)$/;"	m
GVIMNAME	vim/vim/src/Makefile	/^GVIMNAME	= g$(VIMNAME)$/;"	m
GVIMRC_FILE	vim/vim/src/os_amiga.h	198;"	d
GVIMRC_FILE	vim/vim/src/os_dos.h	83;"	d
GVIMRC_FILE	vim/vim/src/os_mac.h	154;"	d
GVIMRC_FILE	vim/vim/src/os_unix.h	333;"	d
GVIMTARGET	vim/vim/src/Makefile	/^GVIMTARGET	= $(GVIMNAME)$(LNKEXT)$/;"	m
GdiTextRenderer	vim/vim/src/gui_dwrite.cpp	/^    GdiTextRenderer($/;"	f	class:FINAL	access:public	signature:( IDWriteBitmapRenderTarget* bitmapRenderTarget, IDWriteRenderingParams* renderingParams)
GdiTextRendererContext	vim/vim/src/gui_dwrite.cpp	/^struct GdiTextRendererContext$/;"	s	file:
GdiTextRendererContext::cellWidth	vim/vim/src/gui_dwrite.cpp	/^    FLOAT cellWidth;$/;"	m	struct:GdiTextRendererContext	file:	access:public
GdiTextRendererContext::color	vim/vim/src/gui_dwrite.cpp	/^    COLORREF color;$/;"	m	struct:GdiTextRendererContext	file:	access:public
GdiTextRendererContext::offsetX	vim/vim/src/gui_dwrite.cpp	/^    FLOAT offsetX;$/;"	m	struct:GdiTextRendererContext	file:	access:public
GdkAtom	vim/vim/src/gui_gtk_x11.c	61;"	d	file:
GdkBitmap	vim/vim/src/gui_gtk.c	92;"	d	file:
GdkDragContext	vim/vim/src/gui_gtk_x11.c	78;"	d	file:
GdkEvent	vim/vim/src/proto.h	28;"	d
GdkEventButton	vim/vim/src/gui_gtk_x11.c	77;"	d	file:
GdkEventClient	vim/vim/src/gui_gtk_x11.c	80;"	d	file:
GdkEventConfigure	vim/vim/src/gui_gtk_x11.c	79;"	d	file:
GdkEventExpose	vim/vim/src/gui_gtk_x11.c	62;"	d	file:
GdkEventFocus	vim/vim/src/gui_gtk_x11.c	63;"	d	file:
GdkEventKey	vim/vim/src/gui_gtk.c	97;"	d	file:
GdkEventKey	vim/vim/src/gui_gtk_x11.c	73;"	d	file:
GdkEventKey	vim/vim/src/proto.h	29;"	d
GdkEventMotion	vim/vim/src/gui_gtk_x11.c	76;"	d	file:
GdkEventProperty	vim/vim/src/gui_gtk_x11.c	65;"	d	file:
GdkEventSelection	vim/vim/src/gui_gtk_x11.c	74;"	d	file:
GdkEventVisibility	vim/vim/src/gui_gtk_x11.c	64;"	d	file:
GdkPixmap	vim/vim/src/gui_gtk.c	91;"	d	file:
Get	vim/vim/src/if_cscope.h	/^    Get,$/;"	e	enum:__anon70
GetAppKey	vim/vim/src/VisVim/Reg.cpp	/^HKEY GetAppKey (char* AppName)$/;"	f	signature:(char* AppName)
GetAppKey	vim/vim/src/VisVim/VisVim.h	/^HKEY GetAppKey (char* AppName);$/;"	p	signature:(char* AppName)
GetBufferLine	vim/vim/src/if_py_both.h	/^GetBufferLine(buf_T *buf, PyInt n)$/;"	f	signature:(buf_T *buf, PyInt n)
GetBufferLineList	vim/vim/src/if_py_both.h	/^GetBufferLineList(buf_T *buf, PyInt lo, PyInt hi)$/;"	f	signature:(buf_T *buf, PyInt lo, PyInt hi)
GetCommandString	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::GetCommandString(UINT_PTR  \/* idCmd *\/,$/;"	f	class:CShellExt	signature:(UINT_PTR , UINT uFlags, UINT FAR * , LPSTR pszName, UINT cchMax)
GetCompositionString_inUCS2	vim/vim/src/gui_w32.c	/^GetCompositionString_inUCS2(HIMC hIMC, DWORD GCS, int *lenp)$/;"	f	file:	signature:(HIMC hIMC, DWORD GCS, int *lenp)
GetConsoleHwnd	vim/vim/src/os_mswin.c	/^GetConsoleHwnd(void)$/;"	f	file:	signature:(void)
GetConsoleIcon	vim/vim/src/os_win32.c	/^GetConsoleIcon($/;"	f	file:	signature:( HWND hWnd, HICON *phIconSmall, HICON *phIcon)
GetCurrentTransform	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(GetCurrentTransform)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, __out DWRITE_MATRIX* transform)
GetDispatchId	vim/vim/src/VisVim/OleAut.cpp	/^DISPID COleAutomationControl::GetDispatchId (char* Name)$/;"	f	class:COleAutomationControl	signature:(char* Name)
GetFSSpecFromPath	vim/vim/src/gui_mac.c	/^GetFSSpecFromPath(char_u *file, FSSpec *fileFSSpec)$/;"	f	signature:(char_u *file, FSSpec *fileFSSpec)
GetFontPanelSelection	vim/vim/src/gui_mac.c	/^GetFontPanelSelection(char_u *outName)$/;"	f	file:	signature:(char_u *outName)
GetFontSize	vim/vim/src/gui_w32.c	/^GetFontSize(GuiFont font)$/;"	f	file:	signature:(GuiFont font)
GetHwnd	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetHwnd)(UINT_PTR *result);$/;"	p	class:FINAL	file:	access:public	signature:(UINT_PTR *result)
GetHwnd	vim/vim/src/if_ole.cpp	/^CVim::GetHwnd(UINT_PTR *result)$/;"	f	class:CVim	signature:(UINT_PTR *result)
GetHwnd	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetHwnd )($/;"	m	struct:IVimVtbl	access:public
GetIDsOfNames	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetIDsOfNames)(const IID &iid, OLECHAR **names, UINT n, LCID, DISPID *dispids);$/;"	p	class:FINAL	file:	access:public	signature:(const IID &iid, OLECHAR **names, UINT n, LCID, DISPID *dispids)
GetIDsOfNames	vim/vim/src/if_ole.cpp	/^CVim::GetIDsOfNames($/;"	f	class:CVim	signature:( const IID &iid, OLECHAR **names, UINT n, LCID, DISPID *dispids)
GetIDsOfNames	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )($/;"	m	struct:IVimVtbl	access:public
GetLastErrorDescription	vim/vim/src/VisVim/StdAfx.h	/^void GetLastErrorDescription (CComBSTR & bstr);	\/\/ Defined in VisVim.cpp$/;"	p	signature:(CComBSTR & bstr)
GetLastErrorDescription	vim/vim/src/VisVim/VisVim.cpp	/^void GetLastErrorDescription (CComBSTR & bstr)$/;"	f	signature:(CComBSTR & bstr)
GetNextVarType	vim/vim/src/VisVim/OleAut.cpp	/^static LPCTSTR GetNextVarType (LPCTSTR Format, VARTYPE* pVarType)$/;"	f	file:	signature:(LPCTSTR Format, VARTYPE* pVarType)
GetNextVarType	vim/vim/src/VisVim/OleAut.cpp	/^static LPCTSTR GetNextVarType (LPCTSTR Format, VARTYPE* pVarType);$/;"	p	file:	signature:(LPCTSTR Format, VARTYPE* pVarType)
GetPixelsPerDip	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(GetPixelsPerDip)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, __out FLOAT* pixelsPerDip)
GetProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::GetProperty (DISPID DispatchId)$/;"	f	class:COleAutomationControl	signature:(DISPID DispatchId)
GetProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::GetProperty (char* Name)$/;"	f	class:COleAutomationControl	signature:(char* Name)
GetRegProp	vim/vim/src/if_xcmdsrv.c	/^GetRegProp($/;"	f	file:	signature:( Display *dpy, char_u **regPropp, long_u *numItemsp, int domsg)
GetRegProp	vim/vim/src/if_xcmdsrv.c	/^static int	GetRegProp(Display *dpy, char_u **regPropp, long_u *numItemsp, int domsg);$/;"	p	file:	signature:(Display *dpy, char_u **regPropp, long_u *numItemsp, int domsg)
GetRegistryInt	vim/vim/src/VisVim/Reg.cpp	/^int GetRegistryInt (HKEY hSectionKey, LPCTSTR Entry, int Default)$/;"	f	signature:(HKEY hSectionKey, LPCTSTR Entry, int Default)
GetRegistryInt	vim/vim/src/VisVim/VisVim.h	/^int GetRegistryInt (HKEY hSectionKey, LPCTSTR Entry, int Default);$/;"	p	signature:(HKEY hSectionKey, LPCTSTR Entry, int Default)
GetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^    DWriteRenderingParams *GetRenderingParams($/;"	p	struct:DWriteContext	file:	access:public	signature:( DWriteRenderingParams *params)
GetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::GetRenderingParams($/;"	f	class:DWriteContext	signature:( DWriteRenderingParams *params)
GetResultStr	vim/vim/src/gui_w32.c	/^GetResultStr(HWND hwnd, int GCS, int *lenp)$/;"	f	file:	signature:(HWND hwnd, int GCS, int *lenp)
GetResultStr	vim/vim/src/gui_w32.c	/^static char_u *GetResultStr(HWND hwnd, int GCS, int *lenp);$/;"	p	file:	signature:(HWND hwnd, int GCS, int *lenp)
GetSectionKey	vim/vim/src/VisVim/Reg.cpp	/^HKEY GetSectionKey (HKEY hAppKey, LPCTSTR Section)$/;"	f	signature:(HKEY hAppKey, LPCTSTR Section)
GetSectionKey	vim/vim/src/VisVim/VisVim.h	/^HKEY GetSectionKey (HKEY hAppKey, LPCTSTR Section);$/;"	p	signature:(HKEY hAppKey, LPCTSTR Section)
GetStockBrush	vim/vim/src/gui_w32.c	4125;"	d	file:
GetTextWidth	vim/vim/src/gui_w32.c	/^GetTextWidth(HDC hdc, char_u *str, int len)$/;"	f	file:	signature:(HDC hdc, char_u *str, int len)
GetTextWidthEnc	vim/vim/src/gui_w32.c	/^GetTextWidthEnc(HDC hdc, char_u *str, int len)$/;"	f	file:	signature:(HDC hdc, char_u *str, int len)
GetTextWidthEnc	vim/vim/src/gui_w32.c	2293;"	d	file:
GetTypeInfo	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetTypeInfo)(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo);$/;"	p	class:FINAL	file:	access:public	signature:(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo)
GetTypeInfo	vim/vim/src/if_ole.cpp	/^CVim::GetTypeInfo(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo)$/;"	f	class:CVim	signature:(UINT iTypeInfo, LCID, ITypeInfo **ppITypeInfo)
GetTypeInfo	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )($/;"	m	struct:IVimVtbl	access:public
GetTypeInfoCount	vim/vim/src/if_ole.cpp	/^    STDMETHOD(GetTypeInfoCount)(UINT *pCount);$/;"	p	class:FINAL	file:	access:public	signature:(UINT *pCount)
GetTypeInfoCount	vim/vim/src/if_ole.cpp	/^CVim::GetTypeInfoCount(UINT *pCount)$/;"	f	class:CVim	signature:(UINT *pCount)
GetTypeInfoCount	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )($/;"	m	struct:IVimVtbl	access:public
GetUserDefaultLocaleName	vim/vim/src/gui_dwrite.cpp	58;"	d	file:
GetWin32Error	vim/vim/src/if_cscope.c	/^GetWin32Error(void)$/;"	f	file:	signature:(void)
GetWin32Error	vim/vim/src/if_cscope.c	/^static char *GetWin32Error(void);$/;"	p	file:	signature:(void)
Green	vim/vim/src/gui_mac.c	182;"	d	file:
GtkAdjustment	vim/vim/src/gui_gtk.c	95;"	d	file:
GtkContainer	vim/vim/src/gui_gtk_x11.c	66;"	d	file:
GtkForm	vim/vim/src/gui_gtk_f.h	/^typedef struct _GtkForm GtkForm;$/;"	t	typeref:struct:_GtkForm
GtkFormChild	vim/vim/src/gui_gtk_f.c	/^typedef struct _GtkFormChild GtkFormChild;$/;"	t	typeref:struct:_GtkFormChild	file:
GtkFormClass	vim/vim/src/gui_gtk_f.h	/^typedef struct _GtkFormClass GtkFormClass;$/;"	t	typeref:struct:_GtkFormClass
GtkIconFactory	vim/vim/src/gui_gtk.c	93;"	d	file:
GtkSelectionData	vim/vim/src/gui_gtk_x11.c	75;"	d	file:
GtkTargetEntry	vim/vim/src/gui_gtk_x11.c	67;"	d	file:
GtkToolbar	vim/vim/src/gui_gtk.c	94;"	d	file:
GtkType	vim/vim/src/gui_gtk_x11.c	68;"	d	file:
GtkWidget	vim/vim/src/gui_gtk.c	/^typedef int GtkWidget;$/;"	t	file:
GtkWidget	vim/vim/src/gui_gtk_x11.c	69;"	d	file:
Gui	vim/vim/src/gui.h	/^typedef struct Gui$/;"	s
Gui::MacOSHelpItems	vim/vim/src/gui.h	/^    int		MacOSHelpItems;	    \/* Nr of help-items supplied by MacOS *\/$/;"	m	struct:Gui	access:public
Gui::MacOSHelpMenu	vim/vim/src/gui.h	/^    MenuHandle	MacOSHelpMenu;	    \/* Help menu provided by the MacOS *\/$/;"	m	struct:Gui	access:public
Gui::VimWindow	vim/vim/src/gui.h	/^    WindowPtr	VimWindow;$/;"	m	struct:Gui	access:public
Gui::accel_group	vim/vim/src/gui.h	/^    GtkAccelGroup *accel_group;$/;"	m	struct:Gui	access:public
Gui::ascii_font	vim/vim/src/gui.h	/^    PangoFont	     *ascii_font;   \/* cached font for ASCII strings *\/$/;"	m	struct:Gui	access:public
Gui::ascii_glyphs	vim/vim/src/gui.h	/^    PangoGlyphString *ascii_glyphs; \/* cached code point -> glyph map *\/$/;"	m	struct:Gui	access:public
Gui::back_gc	vim/vim/src/gui.h	/^    GC		back_gc;$/;"	m	struct:Gui	access:public
Gui::back_pixel	vim/vim/src/gui.h	/^    guicolor_T	back_pixel;	    \/* Color of background *\/$/;"	m	struct:Gui	access:public
Gui::bgcolor	vim/vim/src/gui.h	/^    GdkColor	*bgcolor;	    \/* GDK-styled background color *\/$/;"	m	struct:Gui	access:public
Gui::bgcolor	vim/vim/src/gui.h	/^    GdkRGBA	*bgcolor;	    \/* GDK-styled background color *\/$/;"	m	struct:Gui	access:public
Gui::blank_pointer	vim/vim/src/gui.h	/^    Cursor	blank_pointer;	    \/* Blank pointer *\/$/;"	m	struct:Gui	access:public
Gui::blank_pointer	vim/vim/src/gui.h	/^    GdkCursor	*blank_pointer;	    \/* Blank pointer *\/$/;"	m	struct:Gui	access:public
Gui::bold_font	vim/vim/src/gui.h	/^    GuiFont	bold_font;	    \/* Bold font *\/$/;"	m	struct:Gui	access:public
Gui::boldital_font	vim/vim/src/gui.h	/^    GuiFont	boldital_font;	    \/* Bold-Italic font *\/$/;"	m	struct:Gui	access:public
Gui::border_offset	vim/vim/src/gui.h	/^    int		border_offset;	    \/* Total pixel offset for all borders *\/$/;"	m	struct:Gui	access:public
Gui::border_width	vim/vim/src/gui.h	/^    int		border_width;	    \/* Width of our border around text area *\/$/;"	m	struct:Gui	access:public
Gui::bottom_sbar	vim/vim/src/gui.h	/^    scrollbar_T bottom_sbar;	    \/* Bottom scrollbar *\/$/;"	m	struct:Gui	access:public
Gui::browse_fname	vim/vim/src/gui.h	/^    char_u	*browse_fname;	    \/* file name from filedlg *\/$/;"	m	struct:Gui	access:public
Gui::by_signal	vim/vim/src/gui.h	/^    gboolean	     by_signal;     \/* cause of draw operation *\/$/;"	m	struct:Gui	access:public
Gui::char_ascent	vim/vim/src/gui.h	/^    int		char_ascent;	    \/* Ascent of char in pixels *\/$/;"	m	struct:Gui	access:public
Gui::char_height	vim/vim/src/gui.h	/^    int		char_height;	    \/* Height of char cell in pixels, includes$/;"	m	struct:Gui	access:public
Gui::char_width	vim/vim/src/gui.h	/^    int		char_width;	    \/* Width of char cell in pixels *\/$/;"	m	struct:Gui	access:public
Gui::col	vim/vim/src/gui.h	/^    int		col;		    \/* Current cursor column in GUI display *\/$/;"	m	struct:Gui	access:public
Gui::color_approx	vim/vim/src/gui.h	/^    Bool	color_approx;	    \/* Some color was approximated *\/$/;"	m	struct:Gui	access:public
Gui::currBgColor	vim/vim/src/gui.h	/^    guicolor_T	currBgColor;	    \/* Current background text color *\/$/;"	m	struct:Gui	access:public
Gui::currFgColor	vim/vim/src/gui.h	/^    guicolor_T	currFgColor;	    \/* Current foreground text color *\/$/;"	m	struct:Gui	access:public
Gui::currFont	vim/vim/src/gui.h	/^    GuiFont	currFont;	    \/* Current font *\/$/;"	m	struct:Gui	access:public
Gui::currSpColor	vim/vim/src/gui.h	/^    guicolor_T	currSpColor;	    \/* Current special text color *\/$/;"	m	struct:Gui	access:public
Gui::cursor_col	vim/vim/src/gui.h	/^    int		cursor_col;	    \/* Physical cursor column in GUI display *\/$/;"	m	struct:Gui	access:public
Gui::cursor_is_valid	vim/vim/src/gui.h	/^    char	cursor_is_valid;    \/* There is a cursor at cursor_row\/col *\/$/;"	m	struct:Gui	access:public
Gui::cursor_row	vim/vim/src/gui.h	/^    int		cursor_row;	    \/* Physical cursor row in GUI display *\/$/;"	m	struct:Gui	access:public
Gui::def_back_pixel	vim/vim/src/gui.h	/^    guicolor_T	def_back_pixel;	    \/* default Color of background *\/$/;"	m	struct:Gui	access:public
Gui::def_norm_pixel	vim/vim/src/gui.h	/^    guicolor_T	def_norm_pixel;	    \/* default Color of normal text *\/$/;"	m	struct:Gui	access:public
Gui::dofork	vim/vim/src/gui.h	/^    int		dofork;		    \/* Use fork() when GUI is starting *\/$/;"	m	struct:Gui	access:public
Gui::dpy	vim/vim/src/gui.h	/^    Display	*dpy;		    \/* X display *\/$/;"	m	struct:Gui	access:public
Gui::dragged_sb	vim/vim/src/gui.h	/^    int		dragged_sb;	    \/* Which scrollbar being dragged, if any? *\/$/;"	m	struct:Gui	access:public
Gui::dragged_wp	vim/vim/src/gui.h	/^    win_T	*dragged_wp;	    \/* Which WIN's sb being dragged, if any? *\/$/;"	m	struct:Gui	access:public
Gui::drawarea	vim/vim/src/gui.h	/^    GtkWidget	*drawarea;	    \/* the "text" area *\/$/;"	m	struct:Gui	access:public
Gui::dying	vim/vim/src/gui.h	/^    int		dying;		    \/* Is vim dying? Then output to terminal *\/$/;"	m	struct:Gui	access:public
Gui::event_buffer	vim/vim/src/gui.h	/^    PhEvent_t	*event_buffer;$/;"	m	struct:Gui	access:public
Gui::event_time	vim/vim/src/gui.h	/^    guint32	event_time;$/;"	m	struct:Gui	access:public
Gui::fgcolor	vim/vim/src/gui.h	/^    GdkColor	*fgcolor;	    \/* GDK-styled foreground color *\/$/;"	m	struct:Gui	access:public
Gui::fgcolor	vim/vim/src/gui.h	/^    GdkRGBA	*fgcolor;	    \/* GDK-styled foreground color *\/$/;"	m	struct:Gui	access:public
Gui::filedlg	vim/vim/src/gui.h	/^    GtkWidget	*filedlg;	    \/* file selection dialog *\/$/;"	m	struct:Gui	access:public
Gui::font_can_bold	vim/vim/src/gui.h	/^    int		font_can_bold;	    \/* Whether norm_font supports bold weight.$/;"	m	struct:Gui	access:public
Gui::fontset	vim/vim/src/gui.h	/^    GuiFontset	fontset;	    \/* set of fonts for multi-byte chars *\/$/;"	m	struct:Gui	access:public
Gui::footer_height	vim/vim/src/gui.h	/^    int		footer_height;	    \/* height of the message footer *\/$/;"	m	struct:Gui	access:public
Gui::formwin	vim/vim/src/gui.h	/^    GtkWidget	*formwin;	    \/* manages all the windows below *\/$/;"	m	struct:Gui	access:public
Gui::geom	vim/vim/src/gui.h	/^    char_u	*geom;		    \/* Geometry, eg "80x24" *\/$/;"	m	struct:Gui	access:public
Gui::highlight_mask	vim/vim/src/gui.h	/^    int		highlight_mask;	    \/* Highlight attribute mask *\/$/;"	m	struct:Gui	access:public
Gui::in_focus	vim/vim/src/gui.h	/^    int		in_focus;	    \/* Vim has input focus *\/$/;"	m	struct:Gui	access:public
Gui::in_use	vim/vim/src/gui.h	/^    int		in_use;		    \/* Is the GUI being used? *\/$/;"	m	struct:Gui	access:public
Gui::invert_gc	vim/vim/src/gui.h	/^    GC		invert_gc;$/;"	m	struct:Gui	access:public
Gui::ital_font	vim/vim/src/gui.h	/^    GuiFont	ital_font;	    \/* Italic font *\/$/;"	m	struct:Gui	access:public
Gui::left_sbar_x	vim/vim/src/gui.h	/^    int		left_sbar_x;	    \/* Calculated x coord for left scrollbar *\/$/;"	m	struct:Gui	access:public
Gui::mainwin	vim/vim/src/gui.h	/^    GtkWidget	*mainwin;	    \/* top level GTK window *\/$/;"	m	struct:Gui	access:public
Gui::menu_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_bg_pixel;		\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
Gui::menu_def_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_def_bg_pixel;  \/* Default menu background *\/$/;"	m	struct:Gui	access:public
Gui::menu_def_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_def_fg_pixel;  \/* Default menu foreground *\/$/;"	m	struct:Gui	access:public
Gui::menu_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_fg_pixel;		\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
Gui::menu_font	vim/vim/src/gui.h	/^    GuiFont	menu_font;	    \/* menu item font *\/$/;"	m	struct:Gui	access:public
Gui::menu_fontset	vim/vim/src/gui.h	/^    GuiFontset	menu_fontset;	    \/* set of fonts for multi-byte chars *\/$/;"	m	struct:Gui	access:public
Gui::menu_height	vim/vim/src/gui.h	/^    int		menu_height;	    \/* Height of the menu bar *\/$/;"	m	struct:Gui	access:public
Gui::menu_height_fixed	vim/vim/src/gui.h	/^    char	menu_height_fixed;  \/* TRUE if menu height fixed *\/$/;"	m	struct:Gui	access:public
Gui::menu_is_active	vim/vim/src/gui.h	/^    char	menu_is_active;	    \/* TRUE if menu is present *\/$/;"	m	struct:Gui	access:public
Gui::menu_width	vim/vim/src/gui.h	/^    int		menu_width;	    \/* Width of the menu bar *\/$/;"	m	struct:Gui	access:public
Gui::menubar	vim/vim/src/gui.h	/^    GtkWidget	*menubar;	    \/* menubar *\/$/;"	m	struct:Gui	access:public
Gui::menubar_h	vim/vim/src/gui.h	/^    GtkWidget	*menubar_h;	    \/* menubar handle *\/$/;"	m	struct:Gui	access:public
Gui::norm_font	vim/vim/src/gui.h	/^    GuiFont	norm_font;	    \/* Normal font *\/$/;"	m	struct:Gui	access:public
Gui::norm_pixel	vim/vim/src/gui.h	/^    guicolor_T	norm_pixel;	    \/* Color of normal text *\/$/;"	m	struct:Gui	access:public
Gui::num_cols	vim/vim/src/gui.h	/^    int		num_cols;	    \/* Number of columns *\/$/;"	m	struct:Gui	access:public
Gui::num_rows	vim/vim/src/gui.h	/^    int		num_rows;	    \/* Number of rows *\/$/;"	m	struct:Gui	access:public
Gui::pointer_hidden	vim/vim/src/gui.h	/^    int		pointer_hidden;	    \/* Is the mouse pointer hidden? *\/$/;"	m	struct:Gui	access:public
Gui::prev_wrap	vim/vim/src/gui.h	/^    int		prev_wrap;	    \/* For updating the horizontal scrollbar *\/$/;"	m	struct:Gui	access:public
Gui::right_sbar_x	vim/vim/src/gui.h	/^    int		right_sbar_x;	    \/* Calculated x coord for right scrollbar *\/$/;"	m	struct:Gui	access:public
Gui::row	vim/vim/src/gui.h	/^    int		row;		    \/* Current cursor row in GUI display *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_bold_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_bold_font_name; \/* Resource bold font name *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_boldital_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_boldital_font_name;  \/* Resource bold-italic font name *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_font_name;    \/* Resource font name, used if 'guifont'$/;"	m	struct:Gui	access:public
Gui::rsrc_input_method	vim/vim/src/gui.h	/^    char	*rsrc_input_method;$/;"	m	struct:Gui	access:public
Gui::rsrc_ital_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_ital_font_name; \/* Resource italic font name *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_menu_bg_name	vim/vim/src/gui.h	/^    char	*rsrc_menu_bg_name;	\/* Color of menu & dialog background *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_menu_fg_name	vim/vim/src/gui.h	/^    char	*rsrc_menu_fg_name;	\/* Color of menu & dialog foreground *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_menu_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_menu_font_name;    \/* Resource menu Font name *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_preedit_type_name	vim/vim/src/gui.h	/^    char	*rsrc_preedit_type_name;$/;"	m	struct:Gui	access:public
Gui::rsrc_rev_video	vim/vim/src/gui.h	/^    Bool	rsrc_rev_video;	    \/* Use reverse video? *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_scroll_bg_name	vim/vim/src/gui.h	/^    char	*rsrc_scroll_bg_name;	\/* Color of scrollbar background *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_scroll_fg_name	vim/vim/src/gui.h	/^    char	*rsrc_scroll_fg_name;	\/* Color of scrollbar foreground *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_tooltip_bg_name	vim/vim/src/gui.h	/^    char	*rsrc_tooltip_bg_name;	\/* tooltip background color name *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_tooltip_fg_name	vim/vim/src/gui.h	/^    char	*rsrc_tooltip_fg_name;	\/* tooltip foreground color name *\/$/;"	m	struct:Gui	access:public
Gui::rsrc_tooltip_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_tooltip_font_name; \/* tooltip font name *\/$/;"	m	struct:Gui	access:public
Gui::scroll_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_bg_pixel;	\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
Gui::scroll_def_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_def_bg_pixel;  \/* Default scrollbar background *\/$/;"	m	struct:Gui	access:public
Gui::scroll_def_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_def_fg_pixel;  \/* Default scrollbar foreground *\/$/;"	m	struct:Gui	access:public
Gui::scroll_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_fg_pixel;	\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
Gui::scroll_region_bot	vim/vim/src/gui.h	/^    int		scroll_region_bot;  \/* Bottom (last) line of scroll region *\/$/;"	m	struct:Gui	access:public
Gui::scroll_region_left	vim/vim/src/gui.h	/^    int		scroll_region_left;  \/* Left (first) column of scroll region *\/$/;"	m	struct:Gui	access:public
Gui::scroll_region_right	vim/vim/src/gui.h	/^    int		scroll_region_right;  \/* Right (last) col. of scroll region *\/$/;"	m	struct:Gui	access:public
Gui::scroll_region_top	vim/vim/src/gui.h	/^    int		scroll_region_top;  \/* Top (first) line of scroll region *\/$/;"	m	struct:Gui	access:public
Gui::scrollbar_height	vim/vim/src/gui.h	/^    int		scrollbar_height;   \/* Height of horizontal scrollbar *\/$/;"	m	struct:Gui	access:public
Gui::scrollbar_width	vim/vim/src/gui.h	/^    int		scrollbar_width;    \/* Width of vertical scrollbars *\/$/;"	m	struct:Gui	access:public
Gui::shell_created	vim/vim/src/gui.h	/^    int		shell_created;	    \/* Has the shell been created yet? *\/$/;"	m	struct:Gui	access:public
Gui::spcolor	vim/vim/src/gui.h	/^    GdkColor	*spcolor;	    \/* GDK-styled special color *\/$/;"	m	struct:Gui	access:public
Gui::spcolor	vim/vim/src/gui.h	/^    GdkRGBA	*spcolor;	    \/* GDK-styled special color *\/$/;"	m	struct:Gui	access:public
Gui::starting	vim/vim/src/gui.h	/^    int		starting;	    \/* GUI will start in a little while *\/$/;"	m	struct:Gui	access:public
Gui::surface	vim/vim/src/gui.h	/^    cairo_surface_t *surface;       \/* drawarea surface *\/$/;"	m	struct:Gui	access:public
Gui::tabline	vim/vim/src/gui.h	/^    GtkWidget	*tabline;	    \/* tab pages line handle *\/$/;"	m	struct:Gui	access:public
Gui::tabline_height	vim/vim/src/gui.h	/^    int		tabline_height;$/;"	m	struct:Gui	access:public
Gui::text_context	vim/vim/src/gui.h	/^    PangoContext     *text_context; \/* the context used for all text *\/$/;"	m	struct:Gui	access:public
Gui::text_gc	vim/vim/src/gui.h	/^    GC		text_gc;$/;"	m	struct:Gui	access:public
Gui::text_gc	vim/vim/src/gui.h	/^    GdkGC	*text_gc;	    \/* cached GC for normal text *\/$/;"	m	struct:Gui	access:public
Gui::toolbar	vim/vim/src/gui.h	/^    GtkWidget	*toolbar;	    \/* toolbar *\/$/;"	m	struct:Gui	access:public
Gui::toolbar_h	vim/vim/src/gui.h	/^    GtkWidget	*toolbar_h;	    \/* toolbar handle *\/$/;"	m	struct:Gui	access:public
Gui::toolbar_height	vim/vim/src/gui.h	/^    int		toolbar_height;	    \/* height of the toolbar *\/$/;"	m	struct:Gui	access:public
Gui::toolbar_height	vim/vim/src/gui.h	/^    int		toolbar_height;$/;"	m	struct:Gui	access:public
Gui::tooltip_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	tooltip_bg_pixel;	\/* tooltip background color *\/$/;"	m	struct:Gui	access:public
Gui::tooltip_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	tooltip_fg_pixel;	\/* tooltip foreground color *\/$/;"	m	struct:Gui	access:public
Gui::tooltip_fontset	vim/vim/src/gui.h	/^    XFontSet	tooltip_fontset;	\/* tooltip fontset *\/$/;"	m	struct:Gui	access:public
Gui::vimContainer	vim/vim/src/gui.h	/^    PtWidget_t	*vimContainer;		\/* PtPanel *\/$/;"	m	struct:Gui	access:public
Gui::vimMenuBar	vim/vim/src/gui.h	/^    PtWidget_t	*vimMenuBar;$/;"	m	struct:Gui	access:public
Gui::vimTextArea	vim/vim/src/gui.h	/^    PtWidget_t	*vimTextArea;		\/* PtRaw *\/$/;"	m	struct:Gui	access:public
Gui::vimToolBar	vim/vim/src/gui.h	/^    PtWidget_t	*vimToolBar;$/;"	m	struct:Gui	access:public
Gui::vimToolBarGroup	vim/vim/src/gui.h	/^    PtWidget_t	*vimToolBarGroup;$/;"	m	struct:Gui	access:public
Gui::vimWindow	vim/vim/src/gui.h	/^    PtWidget_t	*vimWindow;		\/* PtWindow *\/$/;"	m	struct:Gui	access:public
Gui::visibility	vim/vim/src/gui.h	/^    int		visibility;	    \/* Is shell partially\/fully obscured? *\/$/;"	m	struct:Gui	access:public
Gui::visibility	vim/vim/src/gui.h	/^    int		visibility;	    \/* Is window partially\/fully obscured? *\/$/;"	m	struct:Gui	access:public
Gui::which_scrollbars	vim/vim/src/gui.h	/^    int		which_scrollbars[3];\/* Which scrollbar boxes are active? *\/$/;"	m	struct:Gui	access:public
Gui::wid	vim/vim/src/gui.h	/^    Window	wid;		    \/* Window id of text area *\/$/;"	m	struct:Gui	access:public
Gui::wid	vim/vim/src/gui.h	/^    WindowPtr	wid;		    \/* Window id of text area *\/$/;"	m	struct:Gui	access:public
Gui::wide_bold_font	vim/vim/src/gui.h	/^    GuiFont	wide_bold_font;	    \/* Bold 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
Gui::wide_boldital_font	vim/vim/src/gui.h	/^    GuiFont	wide_boldital_font; \/* Bold-Italic 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
Gui::wide_font	vim/vim/src/gui.h	/^    GuiFont	wide_font;	    \/* Normal 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
Gui::wide_ital_font	vim/vim/src/gui.h	/^    GuiFont	wide_ital_font;	    \/* Italic 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
GuiFont	vim/vim/src/gui.h	/^  typedef PangoFontDescription	*GuiFont;       \/* handle for a GUI font *\/$/;"	t
GuiFont	vim/vim/src/gui.h	/^  typedef XFontStruct	*GuiFont;	\/* handle for a GUI font *\/$/;"	t
GuiFont	vim/vim/src/gui.h	/^  typedef char		*GuiFont;$/;"	t
GuiFont	vim/vim/src/gui.h	/^  typedef long_u	GuiFont;	\/* handle for a GUI font *\/$/;"	t
GuiFontset	vim/vim/src/gui.h	/^  typedef PangoFontDescription  *GuiFontset;    \/* handle for a GUI fontset *\/$/;"	t
GuiFontset	vim/vim/src/gui.h	/^  typedef XFontSet	GuiFontset;	\/* handle for a GUI fontset *\/$/;"	t
GuiFontset	vim/vim/src/gui.h	/^  typedef char		*GuiFontset;$/;"	t
GuiFontset	vim/vim/src/gui.h	/^  typedef long_u	GuiFontset;	\/* handle for a GUI fontset *\/$/;"	t
GuiScrollbar	vim/vim/src/gui.h	/^typedef struct GuiScrollbar$/;"	s
GuiScrollbar::handler_id	vim/vim/src/gui.h	/^    unsigned long handler_id;   \/* Id of "value_changed" signal handler *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::height	vim/vim/src/gui.h	/^    int		height;		\/* Current height of scroll bar in rows *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::id	vim/vim/src/gui.h	/^    ControlHandle id;		\/* A handle to the scrollbar *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::id	vim/vim/src/gui.h	/^    GtkWidget *id;		\/* Id of real scroll bar *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::id	vim/vim/src/gui.h	/^    HWND	id;		\/* Id of real scroll bar *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::id	vim/vim/src/gui.h	/^    PtWidget_t	*id;$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::id	vim/vim/src/gui.h	/^    Widget	id;		\/* Id of real scroll bar *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::ident	vim/vim/src/gui.h	/^    long	ident;		\/* Unique identifier for each scrollbar *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::max	vim/vim/src/gui.h	/^    long	max;		\/* Number of lines in buffer *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::pixval	vim/vim/src/gui.h	/^    int		pixval;		\/* pixel count of value *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::scroll_shift	vim/vim/src/gui.h	/^    int		scroll_shift;	\/* The scrollbar stuff can handle only up to$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::size	vim/vim/src/gui.h	/^    long	size;		\/* Size of scrollbar thumb *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::status_height	vim/vim/src/gui.h	/^    int		status_height;	\/* Height of status line *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::top	vim/vim/src/gui.h	/^    int		top;		\/* Top of scroll bar (chars from row 0) *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::type	vim/vim/src/gui.h	/^    int		type;		\/* one of SBAR_{LEFT,RIGHT,BOTTOM} *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::value	vim/vim/src/gui.h	/^    long	value;		\/* Represents top line number visible *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::width	vim/vim/src/gui.h	/^    int		width;		\/* Current width of scroll bar in cols *\/$/;"	m	struct:GuiScrollbar	access:public
GuiScrollbar::wp	vim/vim/src/gui.h	/^    win_T	*wp;		\/* Scrollbar's window, NULL for bottom *\/$/;"	m	struct:GuiScrollbar	access:public
HAMZE	vim/vim/src/farsi.h	111;"	d
HANDLE	vim/vim/src/gui_w32.c	/^typedef int HANDLE;$/;"	t	file:
HANDLE	vim/vim/src/if_lua.c	73;"	d	file:
HANDLE	vim/vim/src/if_tcl.c	/^typedef int HANDLE;$/;"	t	file:
HANDLE	vim/vim/src/if_tcl.c	165;"	d	file:
HANDLE	vim/vim/src/os_mswin.c	/^typedef int HANDLE;$/;"	t	file:
HANDLE	vim/vim/src/os_win32.c	/^typedef int HANDLE;$/;"	t	file:
HANDLE_ERRORS	vim/vim/src/integration.c	97;"	d	file:
HANDLE_ERRORS	vim/vim/src/integration.c	99;"	d	file:
HANDLE_WM_ACTIVATEAPP	vim/vim/src/gui_w32.c	4176;"	d	file:
HANDLE_WM_CHAR	vim/vim/src/gui_w32.c	4204;"	d	file:
HANDLE_WM_DEADCHAR	vim/vim/src/gui_w32.c	4212;"	d	file:
HANDLE_WM_DROPFILES	vim/vim/src/gui_w32.c	4200;"	d	file:
HANDLE_WM_HSCROLL	vim/vim/src/gui_w32.c	4196;"	d	file:
HANDLE_WM_KILLFOCUS	vim/vim/src/gui_w32.c	4192;"	d	file:
HANDLE_WM_LBUTTONDBLCLK	vim/vim/src/gui_w32.c	4144;"	d	file:
HANDLE_WM_LBUTTONDOWN	vim/vim/src/gui_w32.c	4168;"	d	file:
HANDLE_WM_LBUTTONUP	vim/vim/src/gui_w32.c	4164;"	d	file:
HANDLE_WM_MBUTTONDBLCLK	vim/vim/src/gui_w32.c	4140;"	d	file:
HANDLE_WM_MBUTTONDOWN	vim/vim/src/gui_w32.c	4160;"	d	file:
HANDLE_WM_MBUTTONUP	vim/vim/src/gui_w32.c	4136;"	d	file:
HANDLE_WM_MOUSEMOVE	vim/vim/src/gui_w32.c	4152;"	d	file:
HANDLE_WM_RBUTTONDBLCLK	vim/vim/src/gui_w32.c	4132;"	d	file:
HANDLE_WM_RBUTTONDOWN	vim/vim/src/gui_w32.c	4148;"	d	file:
HANDLE_WM_RBUTTONUP	vim/vim/src/gui_w32.c	4156;"	d	file:
HANDLE_WM_SETFOCUS	vim/vim/src/gui_w32.c	4188;"	d	file:
HANDLE_WM_SYSCHAR	vim/vim/src/gui_w32.c	4172;"	d	file:
HANDLE_WM_SYSDEADCHAR	vim/vim/src/gui_w32.c	4208;"	d	file:
HANDLE_WM_VSCROLL	vim/vim/src/gui_w32.c	4184;"	d	file:
HANDLE_WM_WINDOWPOSCHANGING	vim/vim/src/gui_w32.c	4180;"	d	file:
HANDLE_WM_XBUTTONDBLCLK	vim/vim/src/gui_w32.c	184;"	d	file:
HANDLE_WM_XBUTTONDOWN	vim/vim/src/gui_w32.c	180;"	d	file:
HANDLE_WM_XBUTTONUP	vim/vim/src/gui_w32.c	176;"	d	file:
HANGULIN_OBJ	vim/vim/src/auto/config.mk	/^HANGULIN_OBJ	= $/;"	m
HANGULIN_SRC	vim/vim/src/auto/config.mk	/^HANGULIN_SRC	= $/;"	m
HANGUL_DEFAULT_KEYBOARD	vim/vim/src/feature.h	670;"	d
HANGUL_DEFAULT_KEYBOARD	vim/vim/src/hangulin.c	13;"	d	file:
HASHITEM_EMPTY	vim/vim/src/structs.h	1122;"	d
HASLOOKBH	vim/vim/src/regexp.c	399;"	d	file:
HASNL	vim/vim/src/regexp.c	398;"	d	file:
HASWIDTH	vim/vim/src/regexp.c	395;"	d	file:
HAS_BW_FLAGS	vim/vim/src/fileio.c	60;"	d	file:
HAS_HOTKEY_LEN	vim/vim/src/message.c	3713;"	d	file:
HAS_RIGHTLEFT	vim/vim/src/screen.c	191;"	d	file:
HAS_RIGHTLEFT	vim/vim/src/screen.c	193;"	d	file:
HAS_SWAP_EXISTS_ACTION	vim/vim/src/globals.h	994;"	d
HAVE_ACL	vim/vim/src/os_unix.h	505;"	d
HAVE_ACL	vim/vim/src/os_win32.h	64;"	d
HAVE_ATTRIBUTE_UNUSED	vim/vim/src/auto/config.h	35;"	d
HAVE_AVAIL_MEM	vim/vim/src/os_amiga.h	17;"	d
HAVE_AVAIL_MEM	vim/vim/src/os_mac.h	106;"	d
HAVE_AVAIL_MEM	vim/vim/src/os_mac.h	288;"	d
HAVE_BIND_TEXTDOMAIN_CODESET	vim/vim/src/auto/config.h	215;"	d
HAVE_BIND_TEXTDOMAIN_CODESET	vim/vim/src/vim.h	596;"	d
HAVE_BUFLIST_MATCH	vim/vim/src/buffer.c	32;"	d	file:
HAVE_CHECK_STACK_GROWTH	vim/vim/src/os_unix.c	723;"	d	file:
HAVE_DATE_TIME	vim/vim/src/auto/config.h	32;"	d
HAVE_DATE_TIME	vim/vim/src/os_amiga.h	34;"	d
HAVE_DATE_TIME	vim/vim/src/os_mac.h	120;"	d
HAVE_DATE_TIME	vim/vim/src/os_vms_conf.h	23;"	d
HAVE_DATE_TIME	vim/vim/src/os_win32.h	72;"	d
HAVE_DIRENT_H	vim/vim/src/auto/config.h	226;"	d
HAVE_DIRENT_H	vim/vim/src/os_vms_conf.h	121;"	d
HAVE_DLFCN_H	vim/vim/src/auto/config.h	406;"	d
HAVE_DLOPEN	vim/vim/src/auto/config.h	415;"	d
HAVE_DLSYM	vim/vim/src/auto/config.h	418;"	d
HAVE_DROP_FILE	vim/vim/src/gui.h	74;"	d
HAVE_DROP_FILE	vim/vim/src/os_beos.h	18;"	d
HAVE_DUP	vim/vim/src/if_ruby.c	169;"	d	file:
HAVE_DUP	vim/vim/src/os_dos.h	133;"	d
HAVE_DUP	vim/vim/src/os_unix.h	500;"	d
HAVE_ERRNO_H	vim/vim/src/auto/config.h	227;"	d
HAVE_ERRNO_H	vim/vim/src/os_vms_conf.h	113;"	d
HAVE_EX_SCRIPT_NI	vim/vim/src/ex_docmd.c	148;"	d	file:
HAVE_FCHDIR	vim/vim/src/auto/config.h	158;"	d
HAVE_FCHDIR	vim/vim/src/os_vms_conf.h	142;"	d
HAVE_FCHDIR	vim/vim/src/vim.h	54;"	d
HAVE_FCHOWN	vim/vim/src/auto/config.h	159;"	d
HAVE_FCHOWN	vim/vim/src/os_vms_conf.h	105;"	d
HAVE_FCNTL_H	vim/vim/src/auto/config.h	228;"	d
HAVE_FCNTL_H	vim/vim/src/if_python.c	39;"	d	file:
HAVE_FCNTL_H	vim/vim/src/if_python.c	78;"	d	file:
HAVE_FCNTL_H	vim/vim/src/if_python3.c	43;"	d	file:
HAVE_FCNTL_H	vim/vim/src/if_python3.c	82;"	d	file:
HAVE_FCNTL_H	vim/vim/src/os_amiga.h	25;"	d
HAVE_FCNTL_H	vim/vim/src/os_mac.h	114;"	d
HAVE_FCNTL_H	vim/vim/src/os_vms_conf.h	165;"	d
HAVE_FCNTL_H	vim/vim/src/os_vms_conf.h	174;"	d
HAVE_FCNTL_H	vim/vim/src/os_win32.h	50;"	d
HAVE_FD_CLOEXEC	vim/vim/src/auto/config.h	448;"	d
HAVE_FLOAT_FUNCS	vim/vim/src/auto/config.h	162;"	d
HAVE_FLOAT_FUNCS	vim/vim/src/os_vms_conf.h	119;"	d
HAVE_FSEEKO	vim/vim/src/auto/config.h	160;"	d
HAVE_FSYNC	vim/vim/src/auto/config.h	161;"	d
HAVE_FSYNC	vim/vim/src/os_vms_conf.h	108;"	d
HAVE_GETCWD	vim/vim/src/auto/config.h	163;"	d
HAVE_GETCWD	vim/vim/src/os_vms_conf.h	99;"	d
HAVE_GETPGID	vim/vim/src/auto/config.h	164;"	d
HAVE_GETPWENT	vim/vim/src/auto/config.h	166;"	d
HAVE_GETPWNAM	vim/vim/src/auto/config.h	167;"	d
HAVE_GETPWNAM	vim/vim/src/os_vms_conf.h	110;"	d
HAVE_GETPWUID	vim/vim/src/auto/config.h	168;"	d
HAVE_GETPWUID	vim/vim/src/os_vms_conf.h	109;"	d
HAVE_GETRLIMIT	vim/vim/src/auto/config.h	169;"	d
HAVE_GETTEXT	vim/vim/src/auto/config.h	409;"	d
HAVE_GETTIMEOFDAY	vim/vim/src/auto/config.h	170;"	d
HAVE_GETTIMEOFDAY	vim/vim/src/os_vms_conf.h	147;"	d
HAVE_GETTIMEOFDAY	vim/vim/src/os_vms_conf.h	154;"	d
HAVE_GETWD	vim/vim/src/auto/config.h	171;"	d
HAVE_GET_LOCALE_VAL	vim/vim/src/ex_cmds2.c	5028;"	d	file:
HAVE_ICONV	vim/vim/src/auto/config.h	172;"	d
HAVE_ICONV	vim/vim/src/os_vms_conf.h	185;"	d
HAVE_ICONV	vim/vim/src/os_vms_conf.h	188;"	d
HAVE_ICONV_H	vim/vim/src/auto/config.h	230;"	d
HAVE_ICONV_H	vim/vim/src/os_vms_conf.h	184;"	d
HAVE_ICONV_H	vim/vim/src/os_vms_conf.h	187;"	d
HAVE_INTTYPES_H	vim/vim/src/auto/config.h	231;"	d
HAVE_ISINF	vim/vim/src/auto/config.h	469;"	d
HAVE_ISNAN	vim/vim/src/auto/config.h	472;"	d
HAVE_ISNAN	vim/vim/src/os_vms_conf.h	152;"	d
HAVE_ISNAN	vim/vim/src/os_vms_conf.h	159;"	d
HAVE_ISSYMLINK	vim/vim/src/vim.h	2275;"	d
HAVE_ISWUPPER	vim/vim/src/auto/config.h	212;"	d
HAVE_LANGINFO_H	vim/vim/src/auto/config.h	232;"	d
HAVE_LIBC_H	vim/vim/src/os_vms_conf.h	138;"	d
HAVE_LIBGEN_H	vim/vim/src/auto/config.h	234;"	d
HAVE_LIBINTL_H	vim/vim/src/auto/config.h	235;"	d
HAVE_LOCALE_H	vim/vim/src/auto/config.h	236;"	d
HAVE_LOCALE_H	vim/vim/src/os_vms_conf.h	168;"	d
HAVE_LOCALE_H	vim/vim/src/os_vms_conf.h	177;"	d
HAVE_LOCALE_H	vim/vim/src/os_win32.h	47;"	d
HAVE_LSTAT	vim/vim/src/auto/config.h	173;"	d
HAVE_LSTAT	vim/vim/src/os_vms_conf.h	143;"	d
HAVE_MATH_H	vim/vim/src/auto/config.h	237;"	d
HAVE_MATH_H	vim/vim/src/os_mac.h	117;"	d
HAVE_MATH_H	vim/vim/src/os_vms_conf.h	118;"	d
HAVE_MATH_H	vim/vim/src/os_win32.h	35;"	d
HAVE_MEMSET	vim/vim/src/auto/config.h	174;"	d
HAVE_MEMSET	vim/vim/src/os_amiga.h	31;"	d
HAVE_MEMSET	vim/vim/src/os_mac.h	112;"	d
HAVE_MEMSET	vim/vim/src/os_vms_conf.h	103;"	d
HAVE_MEMSET	vim/vim/src/os_win32.h	45;"	d
HAVE_MKDTEMP	vim/vim/src/auto/config.h	175;"	d
HAVE_NANOSLEEP	vim/vim/src/auto/config.h	176;"	d
HAVE_NDIR_H	vim/vim/src/os_vms_conf.h	124;"	d
HAVE_NL_LANGINFO_CODESET	vim/vim/src/auto/config.h	177;"	d
HAVE_NL_MSG_CAT_CNTR	vim/vim/src/auto/config.h	412;"	d
HAVE_OPENDIR	vim/vim/src/auto/config.h	178;"	d
HAVE_OPENDIR	vim/vim/src/os_vms_conf.h	114;"	d
HAVE_OSPEED	vim/vim/src/auto/config.h	17;"	d
HAVE_PANGO_SHAPE_FULL	vim/vim/src/auto/config.h	373;"	d
HAVE_PATHDEF	vim/vim/src/vim.h	38;"	d
HAVE_POLL_H	vim/vim/src/auto/config.h	239;"	d
HAVE_PUTENV	vim/vim/src/auto/config.h	179;"	d
HAVE_PUTENV	vim/vim/src/if_python.c	53;"	d	file:
HAVE_PUTENV	vim/vim/src/if_python3.c	61;"	d	file:
HAVE_PUTENV	vim/vim/src/os_mac.h	298;"	d
HAVE_PUTENV	vim/vim/src/os_mac.h	305;"	d
HAVE_PUTENV	vim/vim/src/os_vms_conf.h	115;"	d
HAVE_PUTENV	vim/vim/src/os_win32.h	80;"	d
HAVE_PWD_H	vim/vim/src/auto/config.h	241;"	d
HAVE_PWD_H	vim/vim/src/os_vms_conf.h	141;"	d
HAVE_QSORT	vim/vim/src/auto/config.h	180;"	d
HAVE_QSORT	vim/vim/src/os_amiga.h	32;"	d
HAVE_QSORT	vim/vim/src/os_mac.h	115;"	d
HAVE_QSORT	vim/vim/src/os_vms_conf.h	107;"	d
HAVE_QSORT	vim/vim/src/os_win32.h	52;"	d
HAVE_READLINK	vim/vim/src/auto/config.h	181;"	d
HAVE_RENAME	vim/vim/src/auto/config.h	182;"	d
HAVE_RENAME	vim/vim/src/os_mac.h	300;"	d
HAVE_RENAME	vim/vim/src/os_vms_conf.h	106;"	d
HAVE_SANDBOX	vim/vim/src/globals.h	684;"	d
HAVE_SELECT	vim/vim/src/auto/config.h	183;"	d
HAVE_SELECT	vim/vim/src/os_mac.h	296;"	d
HAVE_SELECT	vim/vim/src/os_vms_conf.h	164;"	d
HAVE_SELECT	vim/vim/src/os_vms_conf.h	173;"	d
HAVE_SELECT	vim/vim/src/vim.h	539;"	d
HAVE_SETENV	vim/vim/src/auto/config.h	185;"	d
HAVE_SETENV	vim/vim/src/os_amiga.h	30;"	d
HAVE_SETENV	vim/vim/src/os_mac.h	299;"	d
HAVE_SETENV	vim/vim/src/os_vms_conf.h	116;"	d
HAVE_SETENV	vim/vim/src/os_win32.h	206;"	d
HAVE_SETENV	vim/vim/src/vim.h	302;"	d
HAVE_SETJMP_H	vim/vim/src/auto/config.h	242;"	d
HAVE_SETJMP_H	vim/vim/src/os_vms_conf.h	117;"	d
HAVE_SETPGID	vim/vim/src/auto/config.h	186;"	d
HAVE_SETSID	vim/vim/src/auto/config.h	187;"	d
HAVE_SGTTY_H	vim/vim/src/auto/config.h	243;"	d
HAVE_SGTTY_H	vim/vim/src/os_vms_conf.h	131;"	d
HAVE_SIGACTION	vim/vim/src/auto/config.h	188;"	d
HAVE_SIGALTSTACK	vim/vim/src/auto/config.h	189;"	d
HAVE_SIGCONTEXT	vim/vim/src/auto/config.h	140;"	d
HAVE_SIGCONTEXT	vim/vim/src/os_vms_conf.h	78;"	d
HAVE_SIGPROCMASK	vim/vim/src/auto/config.h	193;"	d
HAVE_SIGSET	vim/vim/src/auto/config.h	190;"	d
HAVE_SIGSETJMP	vim/vim/src/os_vms_conf.h	151;"	d
HAVE_SIGSETJMP	vim/vim/src/os_vms_conf.h	158;"	d
HAVE_SIGSTACK	vim/vim/src/auto/config.h	192;"	d
HAVE_SIGVEC	vim/vim/src/auto/config.h	194;"	d
HAVE_STAT64	vim/vim/src/vim.h	2092;"	d
HAVE_STAT_H	vim/vim/src/os_amiga.h	21;"	d
HAVE_STDARG_H	vim/vim/src/if_python.c	56;"	d	file:
HAVE_STDARG_H	vim/vim/src/if_python3.c	64;"	d	file:
HAVE_STDINT_H	vim/vim/src/auto/config.h	244;"	d
HAVE_STDLIB_H	vim/vim/src/auto/config.h	300;"	d
HAVE_STDLIB_H	vim/vim/src/os_amiga.h	23;"	d
HAVE_STDLIB_H	vim/vim/src/os_vms_conf.h	111;"	d
HAVE_STRCASECMP	vim/vim/src/auto/config.h	196;"	d
HAVE_STRCASECMP	vim/vim/src/os_vms_conf.h	149;"	d
HAVE_STRCASECMP	vim/vim/src/os_vms_conf.h	156;"	d
HAVE_STRCSPN	vim/vim/src/os_amiga.h	26;"	d
HAVE_STRCSPN	vim/vim/src/os_mac.h	111;"	d
HAVE_STRCSPN	vim/vim/src/os_vms_conf.h	100;"	d
HAVE_STRCSPN	vim/vim/src/os_win32.h	37;"	d
HAVE_STRERROR	vim/vim/src/auto/config.h	197;"	d
HAVE_STRERROR	vim/vim/src/os_vms_conf.h	104;"	d
HAVE_STRFTIME	vim/vim/src/auto/config.h	198;"	d
HAVE_STRFTIME	vim/vim/src/if_python.c	47;"	d	file:
HAVE_STRFTIME	vim/vim/src/if_python3.c	55;"	d	file:
HAVE_STRFTIME	vim/vim/src/os_amiga.h	29;"	d
HAVE_STRFTIME	vim/vim/src/os_mac.h	122;"	d
HAVE_STRFTIME	vim/vim/src/os_vms_conf.h	171;"	d
HAVE_STRFTIME	vim/vim/src/os_vms_conf.h	180;"	d
HAVE_STRFTIME	vim/vim/src/os_win32.h	43;"	d
HAVE_STRICMP	vim/vim/src/os_amiga.h	27;"	d
HAVE_STRICMP	vim/vim/src/os_win32.h	39;"	d
HAVE_STRINGS_H	vim/vim/src/auto/config.h	245;"	d
HAVE_STRINGS_H	vim/vim/src/os_vms_conf.h	150;"	d
HAVE_STRINGS_H	vim/vim/src/os_vms_conf.h	157;"	d
HAVE_STRING_H	vim/vim/src/auto/config.h	301;"	d
HAVE_STRING_H	vim/vim/src/if_python.c	50;"	d	file:
HAVE_STRING_H	vim/vim/src/if_python3.c	58;"	d	file:
HAVE_STRING_H	vim/vim/src/os_amiga.h	24;"	d
HAVE_STRING_H	vim/vim/src/os_mac.h	110;"	d
HAVE_STRING_H	vim/vim/src/os_vms_conf.h	112;"	d
HAVE_STRING_H	vim/vim/src/os_win32.h	32;"	d
HAVE_STRNCASECMP	vim/vim/src/auto/config.h	200;"	d
HAVE_STRNICMP	vim/vim/src/os_amiga.h	28;"	d
HAVE_STRNICMP	vim/vim/src/os_win32.h	40;"	d
HAVE_STROPTS_H	vim/vim/src/auto/config.h	246;"	d
HAVE_STROPTS_H	vim/vim/src/os_vms_conf.h	134;"	d
HAVE_STRPBRK	vim/vim/src/auto/config.h	202;"	d
HAVE_STRTOL	vim/vim/src/auto/config.h	203;"	d
HAVE_STRTOL	vim/vim/src/os_vms_conf.h	101;"	d
HAVE_ST_BLKSIZE	vim/vim/src/auto/config.h	204;"	d
HAVE_ST_MODE	vim/vim/src/os_dos.h	134;"	d
HAVE_ST_MODE	vim/vim/src/os_mac.h	116;"	d
HAVE_ST_MODE	vim/vim/src/os_unix.h	502;"	d
HAVE_ST_MODE	vim/vim/src/os_win32.h	53;"	d
HAVE_SVR4_PTYS	vim/vim/src/auto/config.h	121;"	d
HAVE_SVR4_PTYS	vim/vim/src/pty.c	126;"	d	file:
HAVE_SYSCONF	vim/vim/src/auto/config.h	205;"	d
HAVE_SYSINFO	vim/vim/src/auto/config.h	207;"	d
HAVE_SYSINFO_MEM_UNIT	vim/vim/src/auto/config.h	208;"	d
HAVE_SYS_DIR_H	vim/vim/src/os_vms_conf.h	123;"	d
HAVE_SYS_IOCTL_H	vim/vim/src/auto/config.h	250;"	d
HAVE_SYS_IOCTL_H	vim/vim/src/os_vms_conf.h	132;"	d
HAVE_SYS_NDIR_H	vim/vim/src/os_vms_conf.h	122;"	d
HAVE_SYS_PARAM_H	vim/vim/src/auto/config.h	252;"	d
HAVE_SYS_POLL_H	vim/vim/src/auto/config.h	253;"	d
HAVE_SYS_POLL_H	vim/vim/src/os_vms_conf.h	140;"	d
HAVE_SYS_PTEM_H	vim/vim/src/os_vms_conf.h	136;"	d
HAVE_SYS_RESOURCE_H	vim/vim/src/auto/config.h	255;"	d
HAVE_SYS_SELECT_H	vim/vim/src/auto/config.h	256;"	d
HAVE_SYS_SELECT_H	vim/vim/src/os_mac.h	297;"	d
HAVE_SYS_SELECT_H	vim/vim/src/os_vms_conf.h	127;"	d
HAVE_SYS_STATFS_H	vim/vim/src/auto/config.h	257;"	d
HAVE_SYS_STATFS_H	vim/vim/src/os_vms_conf.h	139;"	d
HAVE_SYS_STREAM_H	vim/vim/src/os_vms_conf.h	135;"	d
HAVE_SYS_SYSCTL_H	vim/vim/src/auto/config.h	259;"	d
HAVE_SYS_SYSINFO_H	vim/vim/src/auto/config.h	260;"	d
HAVE_SYS_SYSTEMINFO_H	vim/vim/src/os_vms_conf.h	129;"	d
HAVE_SYS_TIME_H	vim/vim/src/auto/config.h	262;"	d
HAVE_SYS_TIME_H	vim/vim/src/os_vms_conf.h	167;"	d
HAVE_SYS_TIME_H	vim/vim/src/os_vms_conf.h	176;"	d
HAVE_SYS_TYPES_H	vim/vim/src/auto/config.h	263;"	d
HAVE_SYS_UTSNAME_H	vim/vim/src/auto/config.h	264;"	d
HAVE_SYS_UTSNAME_H	vim/vim/src/os_unix.h	17;"	d
HAVE_SYS_UTSNAME_H	vim/vim/src/os_vms_conf.h	128;"	d
HAVE_SYS_WAIT_H	vim/vim/src/auto/config.h	290;"	d
HAVE_SYS_WAIT_H	vim/vim/src/os_mac.h	293;"	d
HAVE_SYS_WAIT_H	vim/vim/src/os_vms_conf.h	125;"	d
HAVE_TERMCAP_H	vim/vim/src/auto/config.h	265;"	d
HAVE_TERMCAP_H	vim/vim/src/os_vms_conf.h	130;"	d
HAVE_TERMIOS_H	vim/vim/src/auto/config.h	266;"	d
HAVE_TERMIOS_H	vim/vim/src/os_mac.h	294;"	d
HAVE_TERMIOS_H	vim/vim/src/os_vms_conf.h	137;"	d
HAVE_TERMIO_H	vim/vim/src/auto/config.h	267;"	d
HAVE_TERMIO_H	vim/vim/src/os_vms_conf.h	133;"	d
HAVE_TGETENT	vim/vim/src/auto/config.h	209;"	d
HAVE_TGETENT	vim/vim/src/os_mac.h	267;"	d
HAVE_TGETENT	vim/vim/src/os_vms_conf.h	102;"	d
HAVE_TLS_SPACE	vim/vim/src/if_mzsch.c	53;"	d	file:
HAVE_TOTAL_MEM	vim/vim/src/os_unix.h	169;"	d
HAVE_TOTAL_MEM	vim/vim/src/os_win32.h	78;"	d
HAVE_TOWLOWER	vim/vim/src/auto/config.h	210;"	d
HAVE_TOWUPPER	vim/vim/src/auto/config.h	211;"	d
HAVE_TRY_EXCEPT	vim/vim/src/os_win32.h	148;"	d
HAVE_UNION_WAIT	vim/vim/src/os_vms_conf.h	126;"	d
HAVE_UNISTD_H	vim/vim/src/auto/config.h	270;"	d
HAVE_UNISTD_H	vim/vim/src/os_vms_conf.h	166;"	d
HAVE_UNISTD_H	vim/vim/src/os_vms_conf.h	175;"	d
HAVE_UP_BC_PC	vim/vim/src/auto/config.h	23;"	d
HAVE_USLEEP	vim/vim/src/auto/config.h	213;"	d
HAVE_USLEEP	vim/vim/src/os_vms_conf.h	148;"	d
HAVE_USLEEP	vim/vim/src/os_vms_conf.h	155;"	d
HAVE_UTIME	vim/vim/src/auto/config.h	214;"	d
HAVE_UTIME	vim/vim/src/os_unix.h	14;"	d
HAVE_UTIMES	vim/vim/src/auto/config.h	223;"	d
HAVE_UTIME_H	vim/vim/src/auto/config.h	273;"	d
HAVE_WCHAR_H	vim/vim/src/auto/config.h	268;"	d
HAVE_WCTYPE_H	vim/vim/src/auto/config.h	269;"	d
HAVE_X11	vim/vim/src/auto/config.h	11;"	d
HAVE_X11	vim/vim/src/os_vms_conf.h	193;"	d
HAVE_X11_SM_SMLIB_H	vim/vim/src/auto/config.h	284;"	d
HAVE_X11_SUNKEYSYM_H	vim/vim/src/auto/config.h	274;"	d
HAVE_XPM	vim/vim/src/feature.h	733;"	d
HAVE_XUTF8SETWMPROPERTIES	vim/vim/src/auto/config.h	460;"	d
HBITMAP	vim/vim/src/gui_w32.c	/^typedef int HBITMAP;$/;"	t	file:
HBRUSH	vim/vim/src/gui_w32.c	/^typedef int HBRUSH;$/;"	t	file:
HDC	vim/vim/src/gui_w32.c	/^typedef void *HDC;$/;"	t	file:
HDC	vim/vim/src/os_mswin.c	/^typedef int HDC;$/;"	t	file:
HDC	vim/vim/src/os_win32.c	/^typedef int HDC;$/;"	t	file:
HDROP	vim/vim/src/gui_w32.c	/^typedef int HDROP;$/;"	t	file:
HEAD	vim/vim/src/regexp.c	205;"	d	file:
HEADERS	vim/vim/src/Make_bc5.mak	/^HEADERS = -H -H=vim.csm -Hc$/;"	m
HEADER_SIZE	vim/vim/src/memline.c	131;"	d	file:
HELPMOD	vim/vim/src/Makefile	/^HELPMOD = 644$/;"	m
HELPSOURCE	vim/vim/src/Makefile	/^HELPSOURCE = ..\/runtime\/doc$/;"	m
HELPSUBDIR	vim/vim/src/Makefile	/^HELPSUBDIR = \/doc$/;"	m
HELPSUBLOC	vim/vim/src/Makefile	/^HELPSUBLOC	= $(VIMRTLOC)$(HELPSUBDIR)$/;"	m
HEX	vim/vim/src/regexp.c	199;"	d	file:
HEX_BITS	vim/vim/src/xxd/xxd.c	215;"	d	file:
HEX_CINCLUDE	vim/vim/src/xxd/xxd.c	214;"	d	file:
HEX_LITTLEENDIAN	vim/vim/src/xxd/xxd.c	216;"	d	file:
HEX_NORMAL	vim/vim/src/xxd/xxd.c	212;"	d	file:
HEX_POSTSCRIPT	vim/vim/src/xxd/xxd.c	213;"	d	file:
HE_J	vim/vim/src/farsi.h	118;"	d
HFILES	vim/vim/src/libvterm/Makefile	/^HFILES=$(sort $(wildcard include\/*.h))$/;"	m
HFILES_INT	vim/vim/src/libvterm/Makefile	/^HFILES_INT=$(sort $(wildcard src\/*.h)) $(HFILES)$/;"	m
HFONT	vim/vim/src/os_mswin.c	/^typedef int HFONT;$/;"	t	file:
HFONT	vim/vim/src/os_win32.c	/^typedef int HFONT;$/;"	t	file:
HI2AH	vim/vim/src/spellfile.c	1843;"	d	file:
HI2CI	vim/vim/src/spellfile.c	1853;"	d	file:
HI2DI	vim/vim/src/macros.h	382;"	d
HI2KE	vim/vim/src/syntax.c	271;"	d	file:
HI2SFT	vim/vim/src/spell.c	6269;"	d	file:
HI2UF	vim/vim/src/userfunc.c	28;"	d	file:
HI2WC	vim/vim/src/spell.c	108;"	d	file:
HI2WN	vim/vim/src/spellfile.c	1913;"	d	file:
HICON	vim/vim/src/os_mswin.c	/^typedef int HICON;$/;"	t	file:
HICON	vim/vim/src/os_win32.c	/^typedef int HICON;$/;"	t	file:
HIGHLIGHT	vim/vim/src/gui_x11_pm.h	92;"	d
HIGHLIGHT_INIT	vim/vim/src/option.c	483;"	d	file:
HIGHLIGHT_INIT	vim/vim/src/option.c	485;"	d	file:
HIGHL_COST	vim/vim/src/screen.c	9183;"	d	file:
HIKEY2DI	vim/vim/src/macros.h	381;"	d
HIKEY2KE	vim/vim/src/syntax.c	270;"	d	file:
HIKEY2SFT	vim/vim/src/spell.c	6268;"	d	file:
HIKEY2UF	vim/vim/src/userfunc.c	27;"	d	file:
HIMC	vim/vim/src/gui_w32.c	/^typedef HANDLE HIMC;$/;"	t	file:
HINSTANCE	vim/vim/src/gui_w32.c	/^typedef void *HINSTANCE;$/;"	t	file:
HINSTANCE	vim/vim/src/if_mzsch.c	/^typedef int HINSTANCE;$/;"	t	file:
HINSTANCE	vim/vim/src/if_python.c	129;"	d	file:
HINSTANCE	vim/vim/src/if_python.c	135;"	d	file:
HINSTANCE	vim/vim/src/if_python3.c	127;"	d	file:
HINSTANCE	vim/vim/src/if_ruby.c	204;"	d	file:
HINSTANCE	vim/vim/src/if_ruby.c	67;"	d	file:
HINSTANCE	vim/vim/src/mbyte.c	4640;"	d	file:
HINSTANCE	vim/vim/src/os_win32.c	/^typedef int HINSTANCE;$/;"	t	file:
HIST_CMD	vim/vim/src/vim.h	1131;"	d
HIST_COUNT	vim/vim/src/vim.h	1136;"	d
HIST_DEBUG	vim/vim/src/vim.h	1135;"	d
HIST_EXPR	vim/vim/src/vim.h	1133;"	d
HIST_INPUT	vim/vim/src/vim.h	1134;"	d
HIST_SEARCH	vim/vim/src/vim.h	1132;"	d
HITRETURN	vim/vim/src/vim.h	714;"	d
HI_KEY_REMOVED	vim/vim/src/structs.h	1121;"	d
HLF_8	vim/vim/src/vim.h	/^    HLF_8 = 0	    \/* Meta & special keys listed with ":map", text that is$/;"	e	enum:__anon243
HLF_ADD	vim/vim/src/vim.h	/^    , HLF_ADD	    \/* Added diff line *\/$/;"	e	enum:__anon243
HLF_AT	vim/vim/src/vim.h	/^    , HLF_AT	    \/* @ characters at end of screen, characters that$/;"	e	enum:__anon243
HLF_C	vim/vim/src/vim.h	/^    , HLF_C	    \/* column to separate vertically split windows *\/$/;"	e	enum:__anon243
HLF_CHD	vim/vim/src/vim.h	/^    , HLF_CHD	    \/* Changed diff line *\/$/;"	e	enum:__anon243
HLF_CLN	vim/vim/src/vim.h	/^    , HLF_CLN	    \/* current line number *\/$/;"	e	enum:__anon243
HLF_CM	vim/vim/src/vim.h	/^    , HLF_CM	    \/* Mode (e.g., "-- INSERT --") *\/$/;"	e	enum:__anon243
HLF_CONCEAL	vim/vim/src/vim.h	/^    , HLF_CONCEAL   \/* Concealed text *\/$/;"	e	enum:__anon243
HLF_COUNT	vim/vim/src/vim.h	/^    , HLF_COUNT	    \/* MUST be the last one *\/$/;"	e	enum:__anon243
HLF_CUC	vim/vim/src/vim.h	/^    , HLF_CUC	    \/* 'cursurcolumn' *\/$/;"	e	enum:__anon243
HLF_CUL	vim/vim/src/vim.h	/^    , HLF_CUL	    \/* 'cursurline' *\/$/;"	e	enum:__anon243
HLF_D	vim/vim/src/vim.h	/^    , HLF_D	    \/* directories in CTRL-D listing *\/$/;"	e	enum:__anon243
HLF_DED	vim/vim/src/vim.h	/^    , HLF_DED	    \/* Deleted diff line *\/$/;"	e	enum:__anon243
HLF_E	vim/vim/src/vim.h	/^    , HLF_E	    \/* error messages *\/$/;"	e	enum:__anon243
HLF_EOB	vim/vim/src/vim.h	/^    , HLF_EOB	    \/* after the last line in the buffer *\/$/;"	e	enum:__anon243
HLF_FC	vim/vim/src/vim.h	/^    , HLF_FC	    \/* Fold column *\/$/;"	e	enum:__anon243
HLF_FL	vim/vim/src/vim.h	/^    , HLF_FL	    \/* Folded line *\/$/;"	e	enum:__anon243
HLF_H	vim/vim/src/vim.h	/^    , HLF_H	    \/* obsolete, ignored *\/$/;"	e	enum:__anon243
HLF_I	vim/vim/src/vim.h	/^    , HLF_I	    \/* incremental search *\/$/;"	e	enum:__anon243
HLF_L	vim/vim/src/vim.h	/^    , HLF_L	    \/* last search string *\/$/;"	e	enum:__anon243
HLF_M	vim/vim/src/vim.h	/^    , HLF_M	    \/* "--More--" message *\/$/;"	e	enum:__anon243
HLF_MC	vim/vim/src/vim.h	/^    , HLF_MC	    \/* 'colorcolumn' *\/$/;"	e	enum:__anon243
HLF_N	vim/vim/src/vim.h	/^    , HLF_N	    \/* line number for ":number" and ":#" commands *\/$/;"	e	enum:__anon243
HLF_PNI	vim/vim/src/vim.h	/^    , HLF_PNI	    \/* popup menu normal item *\/$/;"	e	enum:__anon243
HLF_PSB	vim/vim/src/vim.h	/^    , HLF_PSB	    \/* popup menu scrollbar *\/$/;"	e	enum:__anon243
HLF_PSI	vim/vim/src/vim.h	/^    , HLF_PSI	    \/* popup menu selected item *\/$/;"	e	enum:__anon243
HLF_PST	vim/vim/src/vim.h	/^    , HLF_PST	    \/* popup menu scrollbar thumb *\/$/;"	e	enum:__anon243
HLF_QFL	vim/vim/src/vim.h	/^    , HLF_QFL	    \/* quickfix window line currently selected *\/$/;"	e	enum:__anon243
HLF_R	vim/vim/src/vim.h	/^    , HLF_R	    \/* return to continue message and yes\/no questions *\/$/;"	e	enum:__anon243
HLF_S	vim/vim/src/vim.h	/^    , HLF_S	    \/* status lines *\/$/;"	e	enum:__anon243
HLF_SC	vim/vim/src/vim.h	/^    , HLF_SC	    \/* Sign column *\/$/;"	e	enum:__anon243
HLF_SNC	vim/vim/src/vim.h	/^    , HLF_SNC	    \/* status lines of not-current windows *\/$/;"	e	enum:__anon243
HLF_SPB	vim/vim/src/vim.h	/^    , HLF_SPB	    \/* SpellBad *\/$/;"	e	enum:__anon243
HLF_SPC	vim/vim/src/vim.h	/^    , HLF_SPC	    \/* SpellCap *\/$/;"	e	enum:__anon243
HLF_SPL	vim/vim/src/vim.h	/^    , HLF_SPL	    \/* SpellLocal *\/$/;"	e	enum:__anon243
HLF_SPR	vim/vim/src/vim.h	/^    , HLF_SPR	    \/* SpellRare *\/$/;"	e	enum:__anon243
HLF_T	vim/vim/src/vim.h	/^    , HLF_T	    \/* Titles for output from ":set all", ":autocmd" etc. *\/$/;"	e	enum:__anon243
HLF_TP	vim/vim/src/vim.h	/^    , HLF_TP	    \/* tabpage line *\/$/;"	e	enum:__anon243
HLF_TPF	vim/vim/src/vim.h	/^    , HLF_TPF	    \/* tabpage line filler *\/$/;"	e	enum:__anon243
HLF_TPS	vim/vim/src/vim.h	/^    , HLF_TPS	    \/* tabpage line selected *\/$/;"	e	enum:__anon243
HLF_TXD	vim/vim/src/vim.h	/^    , HLF_TXD	    \/* Text Changed in diff line *\/$/;"	e	enum:__anon243
HLF_V	vim/vim/src/vim.h	/^    , HLF_V	    \/* Visual mode *\/$/;"	e	enum:__anon243
HLF_VNC	vim/vim/src/vim.h	/^    , HLF_VNC	    \/* Visual mode, autoselecting and not clipboard owner *\/$/;"	e	enum:__anon243
HLF_W	vim/vim/src/vim.h	/^    , HLF_W	    \/* warning messages *\/$/;"	e	enum:__anon243
HLF_WM	vim/vim/src/vim.h	/^    , HLF_WM	    \/* Wildmenu highlight *\/$/;"	e	enum:__anon243
HL_ALL	vim/vim/src/vim.h	683;"	d
HL_ATTR	vim/vim/src/vim.h	1775;"	d
HL_BOLD	vim/vim/src/vim.h	678;"	d
HL_CONCEAL	vim/vim/src/vim.h	923;"	d
HL_CONCEALENDS	vim/vim/src/vim.h	924;"	d
HL_CONTAINED	vim/vim/src/vim.h	906;"	d
HL_DISPLAY	vim/vim/src/vim.h	918;"	d
HL_EXCLUDENL	vim/vim/src/vim.h	917;"	d
HL_EXTEND	vim/vim/src/vim.h	920;"	d
HL_FLAGS	vim/vim/src/vim.h	1442;"	d
HL_FOLD	vim/vim/src/vim.h	919;"	d
HL_HAS_EOL	vim/vim/src/vim.h	909;"	d
HL_INVERSE	vim/vim/src/vim.h	677;"	d
HL_ITALIC	vim/vim/src/vim.h	679;"	d
HL_KEEPEND	vim/vim/src/vim.h	916;"	d
HL_MATCH	vim/vim/src/vim.h	912;"	d
HL_MATCHCONT	vim/vim/src/vim.h	921;"	d
HL_NORMAL	vim/vim/src/vim.h	676;"	d
HL_ONELINE	vim/vim/src/vim.h	908;"	d
HL_SKIPEMPTY	vim/vim/src/vim.h	915;"	d
HL_SKIPNL	vim/vim/src/vim.h	913;"	d
HL_SKIPWHITE	vim/vim/src/vim.h	914;"	d
HL_STANDOUT	vim/vim/src/vim.h	682;"	d
HL_SYNC_HERE	vim/vim/src/vim.h	910;"	d
HL_SYNC_THERE	vim/vim/src/vim.h	911;"	d
HL_TABLE	vim/vim/src/syntax.c	72;"	d	file:
HL_TRANSP	vim/vim/src/vim.h	907;"	d
HL_TRANS_CONT	vim/vim/src/vim.h	922;"	d
HL_UNDERCURL	vim/vim/src/vim.h	681;"	d
HL_UNDERLINE	vim/vim/src/vim.h	680;"	d
HMENU	vim/vim/src/gui_w32.c	/^typedef void *HMENU;$/;"	t	file:
HMT_DEC	vim/vim/src/term.c	1969;"	d	file:
HMT_JSBTERM	vim/vim/src/term.c	1970;"	d	file:
HMT_NETTERM	vim/vim/src/term.c	1968;"	d	file:
HMT_NORMAL	vim/vim/src/term.c	1967;"	d	file:
HMT_PTERM	vim/vim/src/term.c	1971;"	d	file:
HMT_SGR	vim/vim/src/term.c	1973;"	d	file:
HMT_SGR_REL	vim/vim/src/term.c	1974;"	d	file:
HMT_URXVT	vim/vim/src/term.c	1972;"	d	file:
HOTK_LEN	vim/vim/src/message.c	3703;"	d	file:
HRESULT	vim/vim/src/gui_w32.c	/^typedef int HRESULT;$/;"	t	file:
HTMLS	vim/vim/runtime/doc/Makefile	/^HTMLS = \\$/;"	m
HT_INIT_SIZE	vim/vim/src/structs.h	1126;"	d
HWND	vim/vim/src/globals.h	/^typedef int HWND;$/;"	t
HWND	vim/vim/src/gui_w32.c	/^typedef void *HWND;$/;"	t	file:
HWND	vim/vim/src/os_mswin.c	/^typedef int HWND;$/;"	t	file:
HWND	vim/vim/src/os_win32.c	/^typedef int HWND;$/;"	t	file:
HandleMouseHide	vim/vim/src/gui_w32.c	/^HandleMouseHide(UINT uMsg, LPARAM lParam)$/;"	f	file:	signature:(UINT uMsg, LPARAM lParam)
HandleODocAE	vim/vim/src/gui_mac.c	/^HandleODocAE(const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)$/;"	f	signature:(const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
HandleThumb	vim/vim/src/gui_at_sb.c	/^HandleThumb($/;"	f	file:	signature:( Widget w, XEvent *event, String *params, Cardinal *num_params)
HandleThumb	vim/vim/src/gui_at_sb.c	/^static void HandleThumb(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
HandleToLong	vim/vim/src/gui_w32.c	5544;"	d	file:
HandleUnusedParms	vim/vim/src/gui_mac.c	/^HandleUnusedParms(const AppleEvent *theAEvent)$/;"	f	signature:(const AppleEvent *theAEvent)
HandleUnusedParms	vim/vim/src/gui_mac.c	/^OSErr HandleUnusedParms(const AppleEvent *theAEvent);$/;"	p	file:	signature:(const AppleEvent *theAEvent)
Handle_KAHL_GTTX_AE	vim/vim/src/gui_mac.c	/^Handle_KAHL_GTTX_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Handle_KAHL_MOD_AE	vim/vim/src/gui_mac.c	/^Handle_KAHL_MOD_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Handle_KAHL_SRCH_AE	vim/vim/src/gui_mac.c	/^Handle_KAHL_SRCH_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Handle_WM_Notify	vim/vim/src/gui_w32.c	/^Handle_WM_Notify(HWND hwnd UNUSED, LPNMHDR pnmh)$/;"	f	file:	signature:(HWND hwnd UNUSED, LPNMHDR pnmh)
Handle_WM_Notify	vim/vim/src/gui_w32.c	/^static void Handle_WM_Notify(HWND hwnd, LPNMHDR pnmh);$/;"	p	file:	signature:(HWND hwnd, LPNMHDR pnmh)
Handle_aevt_oapp_AE	vim/vim/src/gui_mac.c	/^Handle_aevt_oapp_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Handle_aevt_pdoc_AE	vim/vim/src/gui_mac.c	/^Handle_aevt_pdoc_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Handle_aevt_quit_AE	vim/vim/src/gui_mac.c	/^Handle_aevt_quit_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Handle_unknown_AE	vim/vim/src/gui_mac.c	/^Handle_unknown_AE($/;"	f	signature:( const AppleEvent *theAEvent, AppleEvent *theReply, long refCon)
Help	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	e	enum:__anon69
ICON16PATH	vim/vim/src/Makefile	/^ICON16PATH = $(DESTDIR)$(DATADIR)\/icons\/locolor\/16x16\/apps$/;"	m
ICON32PATH	vim/vim/src/Makefile	/^ICON32PATH = $(DESTDIR)$(DATADIR)\/icons\/locolor\/32x32\/apps$/;"	m
ICON48PATH	vim/vim/src/Makefile	/^ICON48PATH = $(DESTDIR)$(DATADIR)\/icons\/hicolor\/48x48\/apps$/;"	m
ICONTHEMEPATH	vim/vim/src/Makefile	/^ICONTHEMEPATH = $(DATADIR)\/icons\/hicolor$/;"	m
ICONV	vim/vim/src/Make_bc5.mak	/^ICONV = yes$/;"	m
ICONV	vim/vim/src/Make_cyg_ming.mak	/^ICONV=yes$/;"	m
ICONV	vim/vim/src/Make_mvc.mak	/^ICONV = yes$/;"	m
ICONV_E2BIG	vim/vim/src/vim.h	2260;"	d
ICONV_E2BIG	vim/vim/src/vim.h	2265;"	d
ICONV_EILSEQ	vim/vim/src/vim.h	2262;"	d
ICONV_EILSEQ	vim/vim/src/vim.h	2267;"	d
ICONV_EINVAL	vim/vim/src/vim.h	2261;"	d
ICONV_EINVAL	vim/vim/src/vim.h	2266;"	d
ICONV_ERRNO	vim/vim/src/vim.h	2259;"	d
ICONV_ERRNO	vim/vim/src/vim.h	2264;"	d
ICONV_MULT	vim/vim/src/fileio.c	87;"	d	file:
ICONV_TESTLEN	vim/vim/src/mbyte.c	4487;"	d	file:
ICON_BIG	vim/vim/src/os_win32.c	2369;"	d	file:
ICON_COUNT	vim/vim/src/dosinst.h	399;"	d
ICON_SMALL	vim/vim/src/os_win32.c	2366;"	d	file:
ICommands	vim/vim/src/VisVim/Commands.h	/^	public   CComDualImpl < ICommands,$/;"	v
IContextMenu	vim/vim/src/GvimExt/gvimext.h	/^class CShellExt : public IContextMenu,$/;"	v
IDC_BOX1	vim/vim/src/os_mswin.c	1120;"	d	file:
IDC_CD_NONE	vim/vim/src/VisVim/Resource.h	18;"	d
IDC_CD_SOURCE_PARENT	vim/vim/src/VisVim/Resource.h	17;"	d
IDC_CD_SOURCE_PATH	vim/vim/src/VisVim/Resource.h	16;"	d
IDC_DEVSTUDIO_EDITOR	vim/vim/src/VisVim/Resource.h	15;"	d
IDC_NEW_TABS	vim/vim/src/VisVim/Resource.h	19;"	d
IDC_PRINTTEXT1	vim/vim/src/os_mswin.c	1121;"	d	file:
IDC_PRINTTEXT2	vim/vim/src/os_mswin.c	1122;"	d	file:
IDC_PROGRESS	vim/vim/src/os_mswin.c	1123;"	d	file:
IDD	vim/vim/src/VisVim/Commands.cpp	/^	enum { IDD = IDD_ADDINMAIN };$/;"	e	enum:CMainDialog::__anon231	file:
IDD_ADDINMAIN	vim/vim/src/VisVim/Resource.h	14;"	d
IDENT	vim/vim/src/regexp.c	187;"	d	file:
IDR_TOOLBAR1	vim/vim/src/gui_w32_rc.h	5;"	d
IDR_TOOLBAR_LARGE	vim/vim/src/VisVim/Resource.h	13;"	d
IDR_TOOLBAR_MEDIUM	vim/vim/src/VisVim/Resource.h	12;"	d
IDSAddIn	vim/vim/src/VisVim/DSAddIn.h	/^	public   IDSAddIn,$/;"	v
IDS_CMD_DIALOG	vim/vim/src/VisVim/Resource.h	7;"	d
IDS_CMD_DISABLE	vim/vim/src/VisVim/Resource.h	9;"	d
IDS_CMD_ENABLE	vim/vim/src/VisVim/Resource.h	8;"	d
IDS_CMD_LOAD	vim/vim/src/VisVim/Resource.h	11;"	d
IDS_CMD_TOGGLE	vim/vim/src/VisVim/Resource.h	10;"	d
IDS_VISVIM_DESCRIPTION	vim/vim/src/VisVim/Resource.h	6;"	d
IDS_VISVIM_LONGNAME	vim/vim/src/VisVim/Resource.h	5;"	d
IDX_BIG5	vim/vim/src/mbyte.c	284;"	d	file:
IDX_COUNT	vim/vim/src/mbyte.c	352;"	d	file:
IDX_CP1250	vim/vim/src/mbyte.c	328;"	d	file:
IDX_CP1251	vim/vim/src/mbyte.c	330;"	d	file:
IDX_CP1253	vim/vim/src/mbyte.c	333;"	d	file:
IDX_CP1254	vim/vim/src/mbyte.c	335;"	d	file:
IDX_CP1255	vim/vim/src/mbyte.c	337;"	d	file:
IDX_CP1256	vim/vim/src/mbyte.c	339;"	d	file:
IDX_CP1257	vim/vim/src/mbyte.c	341;"	d	file:
IDX_CP1258	vim/vim/src/mbyte.c	343;"	d	file:
IDX_CP437	vim/vim/src/mbyte.c	290;"	d	file:
IDX_CP737	vim/vim/src/mbyte.c	292;"	d	file:
IDX_CP775	vim/vim/src/mbyte.c	294;"	d	file:
IDX_CP850	vim/vim/src/mbyte.c	296;"	d	file:
IDX_CP852	vim/vim/src/mbyte.c	298;"	d	file:
IDX_CP855	vim/vim/src/mbyte.c	300;"	d	file:
IDX_CP857	vim/vim/src/mbyte.c	302;"	d	file:
IDX_CP860	vim/vim/src/mbyte.c	304;"	d	file:
IDX_CP861	vim/vim/src/mbyte.c	306;"	d	file:
IDX_CP862	vim/vim/src/mbyte.c	308;"	d	file:
IDX_CP863	vim/vim/src/mbyte.c	310;"	d	file:
IDX_CP865	vim/vim/src/mbyte.c	312;"	d	file:
IDX_CP866	vim/vim/src/mbyte.c	314;"	d	file:
IDX_CP869	vim/vim/src/mbyte.c	316;"	d	file:
IDX_CP874	vim/vim/src/mbyte.c	318;"	d	file:
IDX_CP932	vim/vim/src/mbyte.c	320;"	d	file:
IDX_CP936	vim/vim/src/mbyte.c	322;"	d	file:
IDX_CP949	vim/vim/src/mbyte.c	324;"	d	file:
IDX_CP950	vim/vim/src/mbyte.c	326;"	d	file:
IDX_DEBUG	vim/vim/src/mbyte.c	272;"	d	file:
IDX_DECMCS	vim/vim/src/mbyte.c	348;"	d	file:
IDX_EUC_CN	vim/vim/src/mbyte.c	280;"	d	file:
IDX_EUC_JP	vim/vim/src/mbyte.c	274;"	d	file:
IDX_EUC_KR	vim/vim/src/mbyte.c	278;"	d	file:
IDX_EUC_TW	vim/vim/src/mbyte.c	282;"	d	file:
IDX_HPROMAN8	vim/vim/src/mbyte.c	350;"	d	file:
IDX_ISO_10	vim/vim/src/mbyte.c	242;"	d	file:
IDX_ISO_11	vim/vim/src/mbyte.c	244;"	d	file:
IDX_ISO_13	vim/vim/src/mbyte.c	246;"	d	file:
IDX_ISO_14	vim/vim/src/mbyte.c	248;"	d	file:
IDX_ISO_15	vim/vim/src/mbyte.c	250;"	d	file:
IDX_ISO_2	vim/vim/src/mbyte.c	226;"	d	file:
IDX_ISO_3	vim/vim/src/mbyte.c	228;"	d	file:
IDX_ISO_4	vim/vim/src/mbyte.c	230;"	d	file:
IDX_ISO_5	vim/vim/src/mbyte.c	232;"	d	file:
IDX_ISO_6	vim/vim/src/mbyte.c	234;"	d	file:
IDX_ISO_7	vim/vim/src/mbyte.c	236;"	d	file:
IDX_ISO_8	vim/vim/src/mbyte.c	238;"	d	file:
IDX_ISO_9	vim/vim/src/mbyte.c	240;"	d	file:
IDX_KOI8_R	vim/vim/src/mbyte.c	252;"	d	file:
IDX_KOI8_U	vim/vim/src/mbyte.c	254;"	d	file:
IDX_LATIN_1	vim/vim/src/mbyte.c	224;"	d	file:
IDX_MACROMAN	vim/vim/src/mbyte.c	346;"	d	file:
IDX_SJIS	vim/vim/src/mbyte.c	276;"	d	file:
IDX_UCS2	vim/vim/src/mbyte.c	258;"	d	file:
IDX_UCS2LE	vim/vim/src/mbyte.c	260;"	d	file:
IDX_UCS4	vim/vim/src/mbyte.c	266;"	d	file:
IDX_UCS4LE	vim/vim/src/mbyte.c	268;"	d	file:
IDX_UTF16	vim/vim/src/mbyte.c	262;"	d	file:
IDX_UTF16LE	vim/vim/src/mbyte.c	264;"	d	file:
IDX_UTF8	vim/vim/src/mbyte.c	256;"	d	file:
ID_BEVAL_TOOLTIP	vim/vim/src/gui_w32.c	4233;"	d	file:
ID_LIST_ALL	vim/vim/src/syntax.c	315;"	d	file:
IE	vim/vim/src/farsi.h	61;"	d
IEMSG	vim/vim/src/vim.h	1649;"	d
IEMSG2	vim/vim/src/vim.h	1650;"	d
IEMSGN	vim/vim/src/vim.h	1651;"	d
IEMSG_RET_NULL	vim/vim/src/regexp.c	338;"	d	file:
IE_	vim/vim/src/farsi.h	60;"	d
IFACEMETHOD_	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD_(unsigned long, AddRef) ()$/;"	f	class:FINAL	access:public	signature:(unsigned long, AddRef)
IFACEMETHOD_	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD_(unsigned long, Release) ()$/;"	f	class:FINAL	access:public	signature:(unsigned long, Release)
IF_EB	vim/vim/src/ascii.h	17;"	d
IF_EB	vim/vim/src/ascii.h	85;"	d
IF_SYN_TIME	vim/vim/src/syntax.c	423;"	d	file:
IF_SYN_TIME	vim/vim/src/syntax.c	425;"	d	file:
IID	vim/vim/src/iid_ole.c	/^} IID;$/;"	t	typeref:struct:_IID	file:
IID_ICommands	vim/vim/src/VisVim/Commands.h	/^				 &IID_ICommands,$/;"	v
IID_IVim	vim/vim/src/if_ole.h	/^EXTERN_C const IID IID_IVim;$/;"	v
IID_IVim	vim/vim/src/iid_ole.c	/^const IID IID_IVim = {0x0F0BFAE2,0x4C90,0x11d1,{0x82,0xD7,0x00,0x04,0xAC,0x36,0x85,0x19}};$/;"	v
IMAGE_XPM	vim/vim/src/gui_w32.c	8227;"	d	file:
IME	vim/vim/src/Make_bc5.mak	/^IME = yes$/;"	m
IME	vim/vim/src/Make_cyg_ming.mak	/^IME=yes$/;"	m
IME_LIB	vim/vim/src/Make_mvc.mak	/^IME_LIB = imm32.lib$/;"	m
IMLEN_MAX	vim/vim/src/mbyte.c	5849;"	d	file:
IMPORT	vim/vim/src/if_ruby.c	26;"	d	file:
INBUFLEN	vim/vim/src/ui.c	1568;"	d	file:
INBUFLEN	vim/vim/src/ui.c	1570;"	d	file:
INC	vim/vim/src/option.c	9849;"	d	file:
INC2	vim/vim/src/term.c	5823;"	d	file:
INC3	vim/vim/src/term.c	5822;"	d	file:
INCDIR	vim/vim/src/libvterm/Makefile	/^INCDIR=$(PREFIX)\/include$/;"	m
INCFILES	vim/vim/src/libvterm/Makefile	/^INCFILES=$(TBLFILES:.tbl=.inc)$/;"	m
INCL	vim/vim/src/Make_cyg_ming.mak	/^INCL = vim.h feature.h os_win32.h os_dos.h ascii.h keymap.h term.h macros.h \\$/;"	m
INCL	vim/vim/src/Make_manx.mak	/^INCL = vim.h feature.h keymap.h macros.h ascii.h term.h structs.h os_amiga.h$/;"	m
INCL	vim/vim/src/Make_mvc.mak	/^INCL =	vim.h os_win32.h ascii.h feature.h globals.h keymap.h macros.h \\$/;"	m
INCLUDE	vim/vim/src/GvimExt/Make_bc5.mak	/^INCLUDE = $(BOR)\\include;.$/;"	m
INCLUDE	vim/vim/src/Make_bc5.mak	/^INCLUDE = $(BOR)\\include;.;proto$/;"	m
INCLUDE	vim/vim/src/Make_bc5.mak	/^INCLUDE = $(LUA)\\include;$(INCLUDE)$/;"	m
INCLUDE	vim/vim/src/Make_bc5.mak	/^INCLUDE = $(PERL)\\lib\\core;$(INCLUDE)$/;"	m
INCLUDE	vim/vim/src/Make_bc5.mak	/^INCLUDE = $(RUBY)\\lib\\ruby\\$(RUBY_VER_LONG)\\$(RUBY_PLATFORM);$(INCLUDE)$/;"	m
INCLUDE	vim/vim/src/Make_bc5.mak	/^INCLUDE = $(TCL)\\include;$(INCLUDE)$/;"	m
INCLUDE	vim/vim/src/Make_bc5.mak	/^INCLUDE = $(XPM)\\include;$(INCLUDE)$/;"	m
INCSTACK_SIZE	vim/vim/src/tag.c	1330;"	d	file:
INC_OLE2	vim/vim/src/GvimExt/gvimext.h	34;"	d
INDENT_DEC	vim/vim/src/vim.h	1016;"	d
INDENT_FILE	vim/vim/src/os_amiga.h	129;"	d
INDENT_FILE	vim/vim/src/os_dos.h	98;"	d
INDENT_FILE	vim/vim/src/os_mac.h	184;"	d
INDENT_FILE	vim/vim/src/os_unix.h	232;"	d
INDENT_INC	vim/vim/src/vim.h	1015;"	d
INDENT_SET	vim/vim/src/vim.h	1014;"	d
INDEX_SIZE	vim/vim/src/memline.c	130;"	d	file:
INDOFF_FILE	vim/vim/src/os_amiga.h	138;"	d
INDOFF_FILE	vim/vim/src/os_dos.h	107;"	d
INDOFF_FILE	vim/vim/src/os_mac.h	193;"	d
INDOFF_FILE	vim/vim/src/os_unix.h	241;"	d
INDSOURCE	vim/vim/src/Makefile	/^INDSOURCE = ..\/runtime\/indent$/;"	m
INDSUBDIR	vim/vim/src/Makefile	/^INDSUBDIR = \/indent$/;"	m
INDSUBLOC	vim/vim/src/Makefile	/^INDSUBLOC	= $(VIMRTLOC)$(INDSUBDIR)$/;"	m
INFINITY	vim/vim/src/macros.h	356;"	d
INFINITY	vim/vim/src/macros.h	358;"	d
INFINITY	vim/vim/src/macros.h	361;"	d
INIT	vim/vim/src/vim.h	1784;"	d
INIT	vim/vim/src/vim.h	1787;"	d
INITGUID	vim/vim/src/GvimExt/gvimext.h	58;"	d
INIT_POS_T	vim/vim/src/structs.h	36;"	d
INIT_POS_T	vim/vim/src/structs.h	38;"	d
INLINE_KEY_BUFFER_SIZE	vim/vim/src/gui_mac.c	2091;"	d	file:
INPUT_BUFLEN	vim/vim/src/edit.c	6199;"	d	file:
INPUT_RECORD	vim/vim/src/os_mswin.c	/^typedef int INPUT_RECORD;$/;"	t	file:
INPUT_RECORD	vim/vim/src/os_win32.c	/^typedef int INPUT_RECORD;$/;"	t	file:
INSCHAR_COM_LIST	vim/vim/src/vim.h	1119;"	d
INSCHAR_CTRLV	vim/vim/src/vim.h	1117;"	d
INSCHAR_DO_COM	vim/vim/src/vim.h	1116;"	d
INSCHAR_FORMAT	vim/vim/src/vim.h	1115;"	d
INSCHAR_NO_FEX	vim/vim/src/vim.h	1118;"	d
INSERT	vim/vim/src/vim.h	701;"	d
INSERT_PANGO_ATTR	vim/vim/src/gui_gtk_x11.c	5687;"	d	file:
INSTALLDIR	vim/vim/src/po/Make_mvc.mak	/^INSTALLDIR = $(VIMRUNTIME)\\lang\\$(LANGUAGE)\\LC_MESSAGES$/;"	m
INSTALLGVIMDIFF	vim/vim/src/auto/config.mk	/^INSTALLGVIMDIFF	= installgvimdiff$/;"	m
INSTALLMANARGS	vim/vim/src/Makefile	/^INSTALLMANARGS = $(VIMLOC) $(SCRIPTLOC) $(VIMRCLOC) $(HELPSOURCE) $(MANMOD) \\$/;"	m
INSTALLMLARGS	vim/vim/src/Makefile	/^INSTALLMLARGS = $(VIMNAME) $(VIMDIFFNAME) $(EVIMNAME) \\$/;"	m
INSTALLVIMDIFF	vim/vim/src/auto/config.mk	/^INSTALLVIMDIFF	= installvimdiff$/;"	m
INSTALL_DATA	vim/vim/src/Makefile	/^INSTALL_DATA	= cp$/;"	m
INSTALL_DATA_R	vim/vim/src/Makefile	/^INSTALL_DATA_R	= cp -r$/;"	m
INSTALL_LANGS	vim/vim/src/auto/config.mk	/^INSTALL_LANGS	= install-languages$/;"	m
INSTALL_PROG	vim/vim/src/Makefile	/^INSTALL_PROG	= cp$/;"	m
INSTALL_TOOL_LANGS	vim/vim/src/auto/config.mk	/^INSTALL_TOOL_LANGS	= install-tool-languages$/;"	m
INT	vim/vim/src/gui_w32.c	/^typedef int INT;$/;"	t	file:
INTDIR	vim/vim/src/Make_dvc.mak	/^INTDIR=.$/;"	m
INTDIR	vim/vim/src/Make_ivc.mak	/^INTDIR=.\\Dbg$/;"	m
INTDIR	vim/vim/src/Make_ivc.mak	/^INTDIR=.\\Rel$/;"	m
INTDIR	vim/vim/src/Make_ivc.mak	/^INTDIR=.\\gDbg$/;"	m
INTDIR	vim/vim/src/Make_ivc.mak	/^INTDIR=.\\gRel$/;"	m
INTDIR	vim/vim/src/Make_ivc.mak	/^INTDIR=.\\oleDbg$/;"	m
INTDIR	vim/vim/src/Make_ivc.mak	/^INTDIR=.\\oleRel$/;"	m
INTDIR	vim/vim/src/Make_mvc.mak	/^INTDIR=$(OBJDIR)$/;"	m
INTDIR	vim/vim/src/VisVim/VisVim.mak	/^INTDIR=.\\Debug$/;"	m
INTDIR	vim/vim/src/VisVim/VisVim.mak	/^INTDIR=.\\Release$/;"	m
INTERMED	vim/vim/src/libvterm/src/state.c	939;"	d	file:
INTERNAL	vim/vim/src/libvterm/src/vterm_internal.h	12;"	d
INTERNAL	vim/vim/src/libvterm/src/vterm_internal.h	9;"	d
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_LUA -DDYNAMIC_LUA_DLL=\\"lua$(LUA_VER).dll\\"$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_PERL -DDYNAMIC_PERL_DLL=\\"perl$(PERL_VER).dll\\"$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_PYTHON -DDYNAMIC_PYTHON_DLL=\\"python$(PYTHON_VER).dll\\"$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_PYTHON3 -DDYNAMIC_PYTHON3_DLL=\\"python$(PYTHON3_VER).dll\\"$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_RUBY -DDYNAMIC_RUBY_DLL=\\"$(RUBY_INSTALL_NAME).dll\\"$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_RUBY_VER=$(RUBY_VER)$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DDYNAMIC_TCL -DDYNAMIC_TCL_DLL=\\"tcl$(TCL_VER).dll\\"$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DFEAT_LUA$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DFEAT_PERL$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DFEAT_PYTHON$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DFEAT_PYTHON3$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DFEAT_RUBY$/;"	m
INTERP_DEFINES	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES = $(INTERP_DEFINES) -DFEAT_TCL$/;"	m
INTERP_DEFINES_ESC	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES_ESC=$(INTERP_DEFINES_ESC_BKS:"=\\")$/;"	m
INTERP_DEFINES_ESC_BKS	vim/vim/src/Make_bc5.mak	/^INTERP_DEFINES_ESC_BKS=$(INTERP_DEFINES:\\=\\\\)$/;"	m
INTLLIB	vim/vim/src/Make_cyg_ming.mak	/^INTLLIB=gnu_gettext$/;"	m
INTLPATH	vim/vim/src/Make_cyg_ming.mak	/^INTLPATH=$(GETTEXT)\/lib\/mingw32$/;"	m
INTPROCINT	vim/vim/src/os_unix.c	/^typedef int (*INTPROCINT)(int);$/;"	t	file:
INTPROCSTR	vim/vim/src/os_unix.c	/^typedef char_u * (*INTPROCSTR)(int);$/;"	t	file:
INVALCOLOR	vim/vim/src/gui.h	212;"	d
INVALCOLOR	vim/vim/src/structs.h	99;"	d
INVALID_BUFFER_VALUE	vim/vim/src/if_mzsch.c	76;"	d	file:
INVALID_BUFFER_VALUE	vim/vim/src/if_py_both.h	61;"	d
INVALID_FD	vim/vim/src/structs.h	1556;"	d
INVALID_STATE	vim/vim/src/syntax.c	360;"	d	file:
INVALID_TABPAGE_VALUE	vim/vim/src/if_py_both.h	63;"	d
INVALID_WINDOW_VALUE	vim/vim/src/if_mzsch.c	84;"	d	file:
INVALID_WINDOW_VALUE	vim/vim/src/if_py_both.h	62;"	d
INVERTED	vim/vim/src/vim.h	637;"	d
INVERTED_ALL	vim/vim/src/vim.h	638;"	d
IN_BUFFER	vim/vim/src/vim.h	1902;"	d
IN_OPTION_C	vim/vim/src/option.c	34;"	d	file:
IN_OTHER_WIN	vim/vim/src/vim.h	1905;"	d
IN_PERL_FILE	vim/vim/src/if_perlsfio.c	14;"	d	file:
IN_SEP_LINE	vim/vim/src/vim.h	1904;"	d
IN_SPELL_C	vim/vim/src/spell.c	74;"	d	file:
IN_STATUS_LINE	vim/vim/src/vim.h	1903;"	d
IN_UNKNOWN	vim/vim/src/vim.h	1901;"	d
IOSIZE	vim/vim/src/vim.h	1524;"	d
IO_REPARSE_TAG_MOUNT_POINT	vim/vim/src/os_win32.h	139;"	d
IO_REPARSE_TAG_SYMLINK	vim/vim/src/os_win32.h	142;"	d
IObuff	vim/vim/src/globals.h	/^EXTERN char_u	*IObuff;		\/* sprintf's are done in this buffer,$/;"	v
ISK_LATIN1	vim/vim/src/option.c	468;"	d	file:
ISP_LATIN1	vim/vim/src/option.c	473;"	d	file:
ISP_LATIN1	vim/vim/src/option.c	475;"	d	file:
ISSPECIAL	vim/vim/src/edit.c	6017;"	d	file:
ISSPECIAL	vim/vim/src/edit.c	6019;"	d	file:
ISSYMLINK	vim/vim/src/vim.h	2277;"	d
ISSYMLINK	vim/vim/src/vim.h	2279;"	d
IS_CTERM	vim/vim/src/vim.h	1684;"	d
IS_CTERM	vim/vim/src/vim.h	1686;"	d
IS_ENABLE_DIRECTX	vim/vim/src/gui_w32.c	36;"	d	file:
IS_LL_WINDOW	vim/vim/src/quickfix.c	165;"	d	file:
IS_NONPRINTABLE	vim/vim/src/gui_beval.c	1162;"	d	file:
IS_NONPRINTABLE	vim/vim/src/gui_beval.c	988;"	d	file:
IS_QF_WINDOW	vim/vim/src/quickfix.c	163;"	d	file:
IS_SPECIAL	vim/vim/src/keymap.h	37;"	d
IS_USER_CMDIDX	vim/vim/src/ex_docmd.c	54;"	d	file:
IS_USER_CMDIDX	vim/vim/src/ex_docmd.c	61;"	d	file:
ITEM	vim/vim/src/os_vms.c	/^}	ITEM;$/;"	t	typeref:struct:__anon26	file:
ITEM_COMPARE_FAIL	vim/vim/src/evalfunc.c	10569;"	d	file:
ITEM_END	vim/vim/src/syntax.c	5133;"	d	file:
ITEM_MATCHGROUP	vim/vim/src/syntax.c	5134;"	d	file:
ITEM_SKIP	vim/vim/src/syntax.c	5132;"	d	file:
ITEM_START	vim/vim/src/syntax.c	5131;"	d	file:
ITMLST1	vim/vim/src/os_vms.c	/^}	ITMLST1;$/;"	t	typeref:struct:__anon27	file:
ITMLST2	vim/vim/src/os_vms.c	/^}	ITMLST2;$/;"	t	typeref:struct:__anon28	file:
IVim	vim/vim/src/if_ole.h	/^typedef interface IVim IVim;$/;"	t
IVimVtbl	vim/vim/src/if_ole.h	/^    typedef struct IVimVtbl$/;"	s
IVimVtbl	vim/vim/src/if_ole.h	/^    } IVimVtbl;$/;"	t	typeref:struct:IVimVtbl
IVimVtbl::AddRef	vim/vim/src/if_ole.h	/^	ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::Eval	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Eval )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::GetHwnd	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetHwnd )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::GetIDsOfNames	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::GetTypeInfo	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::GetTypeInfoCount	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::Invoke	vim/vim/src/if_ole.h	/^	\/* [local] *\/ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::QueryInterface	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::Release	vim/vim/src/if_ole.h	/^	ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::SendKeys	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendKeys )($/;"	m	struct:IVimVtbl	access:public
IVimVtbl::SetForeground	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetForeground )($/;"	m	struct:IVimVtbl	access:public
IVim_AddRef	vim/vim/src/if_ole.h	165;"	d
IVim_Eval	vim/vim/src/if_ole.h	188;"	d
IVim_Eval_Proxy	vim/vim/src/if_ole.h	/^HRESULT STDMETHODCALLTYPE IVim_Eval_Proxy($/;"	p	signature:( IVim __RPC_FAR * This, BSTR expr, BSTR __RPC_FAR *result)
IVim_Eval_Stub	vim/vim/src/if_ole.h	/^void __RPC_STUB IVim_Eval_Stub($/;"	p	signature:( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
IVim_GetHwnd	vim/vim/src/if_ole.h	194;"	d
IVim_GetHwnd_Proxy	vim/vim/src/if_ole.h	/^HRESULT STDMETHODCALLTYPE IVim_GetHwnd_Proxy($/;"	p	signature:( IVim __RPC_FAR * This, UINT_PTR __RPC_FAR *result)
IVim_GetHwnd_Stub	vim/vim/src/if_ole.h	/^void __RPC_STUB IVim_GetHwnd_Stub($/;"	p	signature:( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
IVim_GetIDsOfNames	vim/vim/src/if_ole.h	178;"	d
IVim_GetTypeInfo	vim/vim/src/if_ole.h	175;"	d
IVim_GetTypeInfoCount	vim/vim/src/if_ole.h	172;"	d
IVim_Invoke	vim/vim/src/if_ole.h	181;"	d
IVim_QueryInterface	vim/vim/src/if_ole.h	162;"	d
IVim_Release	vim/vim/src/if_ole.h	168;"	d
IVim_SendKeys	vim/vim/src/if_ole.h	185;"	d
IVim_SendKeys_Proxy	vim/vim/src/if_ole.h	/^HRESULT STDMETHODCALLTYPE IVim_SendKeys_Proxy($/;"	p	signature:( IVim __RPC_FAR * This, BSTR keys)
IVim_SendKeys_Stub	vim/vim/src/if_ole.h	/^void __RPC_STUB IVim_SendKeys_Stub($/;"	p	signature:( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
IVim_SetForeground	vim/vim/src/if_ole.h	191;"	d
IVim_SetForeground_Proxy	vim/vim/src/if_ole.h	/^HRESULT STDMETHODCALLTYPE IVim_SetForeground_Proxy($/;"	p	signature:( IVim __RPC_FAR * This)
IVim_SetForeground_Stub	vim/vim/src/if_ole.h	/^void __RPC_STUB IVim_SetForeground_Stub($/;"	p	signature:( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
I_acute	vim/vim/src/regexp_nfa.c	767;"	d	file:
I_circumflex	vim/vim/src/regexp_nfa.c	768;"	d	file:
I_diaeresis	vim/vim/src/regexp_nfa.c	769;"	d	file:
I_grave	vim/vim/src/regexp_nfa.c	770;"	d	file:
IconNames	vim/vim/src/gui_gtk.c	/^typedef struct IconNames {$/;"	s	file:
IconNames	vim/vim/src/gui_gtk.c	/^} IconNames;$/;"	t	typeref:struct:IconNames	file:
IconNames::file_name	vim/vim/src/gui_gtk.c	/^    const char *file_name;$/;"	m	struct:IconNames	file:	access:public
IconNames::icon_name	vim/vim/src/gui_gtk.c	/^    const char *icon_name;$/;"	m	struct:IconNames	file:	access:public
IconToBitmap	vim/vim/src/GvimExt/gvimext.cpp	/^HBITMAP IconToBitmap(HICON hIcon, HBRUSH hBackground, int width, int height)$/;"	f	signature:(HICON hIcon, HBRUSH hBackground, int width, int height)
Info	vim/vim/src/os_win32.c	/^    CONSOLE_SCREEN_BUFFER_INFO	Info;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
InitInstance	vim/vim/src/VisVim/VisVim.cpp	/^	virtual BOOL InitInstance ();$/;"	p	class:CVisVimApp	file:	access:public	signature:()
InitInstance	vim/vim/src/VisVim/VisVim.cpp	/^BOOL CVisVimApp::InitInstance ()$/;"	f	class:CVisVimApp	signature:()
InitOLE	vim/vim/src/if_ole.cpp	/^extern "C" void InitOLE(int *pbDoRestart)$/;"	f	signature:(int *pbDoRestart)
Initialize	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::Initialize(LPCITEMIDLIST  \/* pIDFolder *\/,$/;"	f	class:CShellExt	signature:(LPCITEMIDLIST , LPDATAOBJECT pDataObj, HKEY )
Initialize	vim/vim/src/gui_at_sb.c	/^Initialize($/;"	f	file:	signature:( Widget request UNUSED, Widget new, ArgList args UNUSED, Cardinal *num_args UNUSED)
Initialize	vim/vim/src/gui_at_sb.c	/^static void Initialize(Widget, Widget, ArgList, Cardinal *);$/;"	p	file:	signature:(Widget, Widget, ArgList, Cardinal *)
Initialize	vim/vim/src/gui_xmebw.c	/^Initialize(Widget rq, Widget ebw, ArgList args UNUSED, Cardinal *n UNUSED)$/;"	f	file:	signature:(Widget rq, Widget ebw, ArgList args UNUSED, Cardinal *n UNUSED)
Initialize	vim/vim/src/gui_xmebw.c	/^static void Initialize(Widget rq, Widget eb, ArgList args, Cardinal *n);$/;"	p	file:	signature:(Widget rq, Widget eb, ArgList args, Cardinal *n)
InsertBufferLines	vim/vim/src/if_py_both.h	/^InsertBufferLines(buf_T *buf, PyInt n, PyObject *lines, PyInt *len_change)$/;"	f	signature:(buf_T *buf, PyInt n, PyObject *lines, PyInt *len_change)
Insstart	vim/vim/src/globals.h	/^EXTERN pos_T	Insstart;		\/* This is where the latest$/;"	v
Insstart_blank_vcol	vim/vim/src/edit.c	/^static colnr_T	Insstart_blank_vcol;	\/* vcol for first inserted blank *\/$/;"	v	file:
Insstart_orig	vim/vim/src/globals.h	/^EXTERN pos_T	Insstart_orig;$/;"	v
Insstart_textlen	vim/vim/src/edit.c	/^static colnr_T	Insstart_textlen;	\/* length of line when insert started *\/$/;"	v	file:
InstallAEHandlers	vim/vim/src/gui_mac.c	/^InstallAEHandlers(void)$/;"	f	signature:(void)
InstallFontPanelHandler	vim/vim/src/gui_mac.c	/^InstallFontPanelHandler(void)$/;"	f	file:	signature:(void)
IntuitionBase	vim/vim/src/os_amiga.c	/^struct IntuitionBase	*IntuitionBase = NULL;$/;"	v	typeref:struct:IntuitionBase
Invoke	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Invoke (WORD Flags, DISPID DispatchId,$/;"	f	class:COleAutomationControl	signature:(WORD Flags, DISPID DispatchId, LPCTSTR Format, va_list ArgList)
Invoke	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Invoke (WORD Flags, char* Name,$/;"	f	class:COleAutomationControl	signature:(WORD Flags, char* Name, LPCTSTR Format, va_list ArgList)
Invoke	vim/vim/src/if_ole.cpp	/^    STDMETHOD(Invoke)(DISPID member, const IID &iid, LCID, WORD flags, DISPPARAMS *dispparams, VARIANT *result, EXCEPINFO *excepinfo, UINT *argerr);$/;"	p	class:FINAL	file:	access:public	signature:(DISPID member, const IID &iid, LCID, WORD flags, DISPPARAMS *dispparams, VARIANT *result, EXCEPINFO *excepinfo, UINT *argerr)
Invoke	vim/vim/src/if_ole.cpp	/^CVim::Invoke($/;"	f	class:CVim	signature:( DISPID member, const IID &iid, LCID, WORD flags, DISPPARAMS *dispparams, VARIANT *result, EXCEPINFO *excepinfo, UINT *argerr)
Invoke	vim/vim/src/if_ole.h	/^	\/* [local] *\/ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )($/;"	m	struct:IVimVtbl	access:public
InvokeCommand	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::InvokeCommand(LPCMINVOKECOMMANDINFO lpcmi)$/;"	f	class:CShellExt	signature:(LPCMINVOKECOMMANDINFO lpcmi)
InvokeGvim	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::InvokeGvim(HWND hParent,$/;"	f	class:CShellExt	signature:(HWND hParent, LPCSTR , LPCSTR , LPCSTR , int )
InvokeSingleGvim	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::InvokeSingleGvim(HWND hParent,$/;"	f	class:CShellExt	signature:(HWND hParent, LPCSTR , LPCSTR , LPCSTR , int , int useDiff)
IsMaximized	vim/vim/src/gui_w32.c	4119;"	d	file:
IsMinimized	vim/vim/src/gui_w32.c	4116;"	d	file:
IsNull	vim/vim/src/gui_xmebw.c	902;"	d	file:
IsPixelSnappingDisabled	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(IsPixelSnappingDisabled)($/;"	f	class:FINAL	access:public	signature:( __maybenull void* clientDrawingContext, __out BOOL* isDisabled)
IsSerialName	vim/vim/runtime/tools/xcmdsrv_client.c	/^IsSerialName(char *str)$/;"	f	file:	signature:(char *str)
IsSerialName	vim/vim/runtime/tools/xcmdsrv_client.c	/^static int	IsSerialName(char *name);$/;"	p	file:	signature:(char *name)
IsSerialName	vim/vim/src/if_xcmdsrv.c	/^IsSerialName(char_u *str)$/;"	f	file:	signature:(char_u *str)
IsSerialName	vim/vim/src/if_xcmdsrv.c	/^static int	IsSerialName(char_u *name);$/;"	p	file:	signature:(char_u *name)
IsValid	vim/vim/src/os_win32.c	/^    BOOL			IsValid;$/;"	m	struct:ConsoleBufferStruct	file:	access:public
IterClear	vim/vim/src/if_py_both.h	/^IterClear(IterObject *self)$/;"	f	signature:(IterObject *self)
IterDestructor	vim/vim/src/if_py_both.h	/^IterDestructor(IterObject *self)$/;"	f	signature:(IterObject *self)
IterIter	vim/vim/src/if_py_both.h	/^IterIter(PyObject *self)$/;"	f	signature:(PyObject *self)
IterNew	vim/vim/src/if_py_both.h	/^IterNew(void *start, destructorfun destruct, nextfun next, traversefun traverse,$/;"	f	signature:(void *start, destructorfun destruct, nextfun next, traversefun traverse, clearfun clear)
IterNext	vim/vim/src/if_py_both.h	/^IterNext(IterObject *self)$/;"	f	signature:(IterObject *self)
IterObject	vim/vim/src/if_py_both.h	/^} IterObject;$/;"	t	typeref:struct:__anon99
IterTraverse	vim/vim/src/if_py_both.h	/^IterTraverse(IterObject *self, visitproc visit, void *arg)$/;"	f	signature:(IterObject *self, visitproc visit, void *arg)
IterType	vim/vim/src/if_py_both.h	/^static PyTypeObject IterType;$/;"	v
J	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
J	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
JAZR	vim/vim/src/farsi.h	159;"	d
JAZR_N	vim/vim/src/farsi.h	162;"	d
JE	vim/vim/src/farsi.h	124;"	d
JIM	vim/vim/src/farsi.h	116;"	d
JIO_BUFFER	vim/vim/src/structs.h	/^    JIO_BUFFER,$/;"	e	enum:__anon194
JIO_FILE	vim/vim/src/structs.h	/^    JIO_FILE,$/;"	e	enum:__anon194
JIO_NULL	vim/vim/src/structs.h	/^    JIO_NULL,$/;"	e	enum:__anon194
JIO_OUT	vim/vim/src/structs.h	/^    JIO_OUT$/;"	e	enum:__anon194
JIO_PIPE	vim/vim/src/structs.h	/^    JIO_PIPE,	    \/* default *\/$/;"	e	enum:__anon194
JMP_BUF	vim/vim/src/os_unix.h	489;"	d
JMP_BUF	vim/vim/src/os_unix.h	493;"	d
JO2_ALL	vim/vim/src/structs.h	1684;"	d
JO2_ERR_MSG	vim/vim/src/structs.h	1683;"	d
JO2_OUT_MSG	vim/vim/src/structs.h	1682;"	d
JOB_ENDED	vim/vim/src/structs.h	/^    JOB_ENDED,	    \/* detected job done *\/$/;"	e	enum:__anon192
JOB_FAILED	vim/vim/src/structs.h	/^    JOB_FAILED,$/;"	e	enum:__anon192
JOB_FINISHED	vim/vim/src/structs.h	/^    JOB_FINISHED    \/* job done and cleanup done *\/$/;"	e	enum:__anon192
JOB_STARTED	vim/vim/src/structs.h	/^    JOB_STARTED,$/;"	e	enum:__anon192
JO_ALL	vim/vim/src/structs.h	1680;"	d
JO_BLOCK_WRITE	vim/vim/src/structs.h	1677;"	d
JO_CALLBACK	vim/vim/src/structs.h	1653;"	d
JO_CB_ALL	vim/vim/src/structs.h	1687;"	d
JO_CHANNEL	vim/vim/src/structs.h	1676;"	d
JO_CLOSE_CALLBACK	vim/vim/src/structs.h	1656;"	d
JO_ERR_BUF	vim/vim/src/structs.h	1674;"	d
JO_ERR_CALLBACK	vim/vim/src/structs.h	1655;"	d
JO_ERR_IO	vim/vim/src/structs.h	1666;"	d
JO_ERR_MODE	vim/vim/src/structs.h	1652;"	d
JO_ERR_MODIFIABLE	vim/vim/src/structs.h	1679;"	d
JO_ERR_NAME	vim/vim/src/structs.h	1669;"	d
JO_ERR_TIMEOUT	vim/vim/src/structs.h	1660;"	d
JO_EXIT_CB	vim/vim/src/structs.h	1664;"	d
JO_ID	vim/vim/src/structs.h	1662;"	d
JO_IN_BOT	vim/vim/src/structs.h	1672;"	d
JO_IN_BUF	vim/vim/src/structs.h	1675;"	d
JO_IN_IO	vim/vim/src/structs.h	1667;"	d
JO_IN_MODE	vim/vim/src/structs.h	1650;"	d
JO_IN_NAME	vim/vim/src/structs.h	1670;"	d
JO_IN_TOP	vim/vim/src/structs.h	1671;"	d
JO_MODE	vim/vim/src/structs.h	1649;"	d
JO_MODE_ALL	vim/vim/src/structs.h	1686;"	d
JO_OUT_BUF	vim/vim/src/structs.h	1673;"	d
JO_OUT_CALLBACK	vim/vim/src/structs.h	1654;"	d
JO_OUT_IO	vim/vim/src/structs.h	1665;"	d
JO_OUT_MODE	vim/vim/src/structs.h	1651;"	d
JO_OUT_MODIFIABLE	vim/vim/src/structs.h	1678;"	d
JO_OUT_NAME	vim/vim/src/structs.h	1668;"	d
JO_OUT_TIMEOUT	vim/vim/src/structs.h	1659;"	d
JO_PART	vim/vim/src/structs.h	1661;"	d
JO_STOPONEXIT	vim/vim/src/structs.h	1663;"	d
JO_TIMEOUT	vim/vim/src/structs.h	1658;"	d
JO_TIMEOUT_ALL	vim/vim/src/structs.h	1689;"	d
JO_WAITTIME	vim/vim/src/structs.h	1657;"	d
JSON_ARRAY	vim/vim/src/json.c	/^    JSON_ARRAY,		\/* parsing items in an array *\/$/;"	e	enum:__anon149	file:
JSON_JS	vim/vim/src/vim.h	2453;"	d
JSON_NL	vim/vim/src/vim.h	2455;"	d
JSON_NO_NONE	vim/vim/src/vim.h	2454;"	d
JSON_OBJECT	vim/vim/src/json.c	/^    JSON_OBJECT		\/* parsing item in an object, after the key *\/$/;"	e	enum:__anon149	file:
JSON_OBJECT_KEY	vim/vim/src/json.c	/^    JSON_OBJECT_KEY,	\/* parsing key of an object *\/$/;"	e	enum:__anon149	file:
JSON_TEST_OBJ	vim/vim/src/Makefile	/^JSON_TEST_OBJ = $(OBJ_COMMON) $(OBJ_JSON_TEST)$/;"	m
JSON_TEST_SRC	vim/vim/src/Makefile	/^JSON_TEST_SRC = json_test.c$/;"	m
JSON_TEST_TARGET	vim/vim/src/Makefile	/^JSON_TEST_TARGET = json_test$(EXEEXT)$/;"	m
JUMPLISTSIZE	vim/vim/src/structs.h	111;"	d
JUST_CALC_SIZE	vim/vim/src/regexp.c	406;"	d	file:
KAF	vim/vim/src/farsi.h	135;"	d
KDEPATH	vim/vim/src/Makefile	/^KDEPATH = $(HOME)\/.kde\/share\/icons$/;"	m
KE2HIKEY	vim/vim/src/syntax.c	269;"	d	file:
KEEP_ROOM	vim/vim/src/misc2.c	830;"	d	file:
KEEP_ROOM_KB	vim/vim/src/misc2.c	831;"	d	file:
KEY2TERMCAP0	vim/vim/src/keymap.h	126;"	d
KEY2TERMCAP1	vim/vim/src/keymap.h	127;"	d
KEYBUFLEN	vim/vim/src/netbeans.c	2335;"	d	file:
KEYCODE_CSI	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_CSI,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_CSINUM	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_CSINUM,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_CSI_CURSOR	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_CSI_CURSOR,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_ENTER	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_ENTER,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_KEYPAD	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_KEYPAD$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_LITERAL	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_LITERAL,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_NONE	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_NONE,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_SS3	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_SS3,$/;"	e	enum:__anon31::__anon32	file:
KEYCODE_TAB	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_TAB,$/;"	e	enum:__anon31::__anon32	file:
KEYLEN_PART_KEY	vim/vim/src/vim.h	2408;"	d
KEYLEN_PART_MAP	vim/vim/src/vim.h	2409;"	d
KEYLEN_REMOVED	vim/vim/src/vim.h	2410;"	d
KEYMAP_INIT	vim/vim/src/structs.h	2066;"	d
KEYMAP_LOADED	vim/vim/src/structs.h	2067;"	d
KEYWORD_IDX	vim/vim/src/syntax.c	314;"	d	file:
KEY_BUF_LEN	vim/vim/src/terminal.c	119;"	d	file:
KEY_COMPLETE	vim/vim/src/vim.h	980;"	d
KEY_EVENT_RECORD	vim/vim/src/os_mswin.c	/^typedef int KEY_EVENT_RECORD;$/;"	t	file:
KEY_EVENT_RECORD	vim/vim/src/os_win32.c	/^typedef int KEY_EVENT_RECORD;$/;"	t	file:
KEY_NAMES_TABLE_LEN	vim/vim/src/misc2.c	2477;"	d	file:
KEY_OPEN_BACK	vim/vim/src/vim.h	979;"	d
KEY_OPEN_FORW	vim/vim/src/vim.h	978;"	d
KEY_WOW64_64KEY	vim/vim/src/dosinst.h	89;"	d
KE_CMDWIN	vim/vim/src/keymap.h	/^    , KE_CMDWIN = 84		\/* open command-line window from Command-line Mode *\/$/;"	e	enum:key_extra
KE_CSI	vim/vim/src/keymap.h	/^    , KE_CSI = 81		\/* CSI typed directly *\/$/;"	e	enum:key_extra
KE_CURSORHOLD	vim/vim/src/keymap.h	/^    , KE_CURSORHOLD = 96	\/* CursorHold event *\/$/;"	e	enum:key_extra
KE_C_END	vim/vim/src/keymap.h	/^    , KE_C_END = 88		\/* control-end *\/$/;"	e	enum:key_extra
KE_C_HOME	vim/vim/src/keymap.h	/^    , KE_C_HOME = 87		\/* control-home *\/$/;"	e	enum:key_extra
KE_C_LEFT	vim/vim/src/keymap.h	/^    , KE_C_LEFT = 85		\/* control-left *\/$/;"	e	enum:key_extra
KE_C_RIGHT	vim/vim/src/keymap.h	/^    , KE_C_RIGHT = 86		\/* control-right *\/$/;"	e	enum:key_extra
KE_DROP	vim/vim/src/keymap.h	/^    , KE_DROP = 95		\/* DnD data is available *\/$/;"	e	enum:key_extra
KE_FILLER	vim/vim/src/keymap.h	120;"	d
KE_FOCUSGAINED	vim/vim/src/keymap.h	/^    , KE_FOCUSGAINED = 98	\/* focus gained *\/$/;"	e	enum:key_extra
KE_FOCUSLOST	vim/vim/src/keymap.h	/^    , KE_FOCUSLOST = 99		\/* focus lost *\/$/;"	e	enum:key_extra
KE_IGNORE	vim/vim/src/keymap.h	/^    , KE_IGNORE = 53		\/* Ignored mouse drag\/release *\/$/;"	e	enum:key_extra
KE_KDEL	vim/vim/src/keymap.h	/^    , KE_KDEL = 80		\/* keypad Delete key *\/$/;"	e	enum:key_extra
KE_KINS	vim/vim/src/keymap.h	/^    , KE_KINS = 79		\/* keypad Insert key *\/$/;"	e	enum:key_extra
KE_LEFTDRAG	vim/vim/src/keymap.h	/^    , KE_LEFTDRAG = 45		\/* Drag with left mouse button down *\/$/;"	e	enum:key_extra
KE_LEFTMOUSE	vim/vim/src/keymap.h	/^    , KE_LEFTMOUSE = 44		\/* Left mouse button click *\/$/;"	e	enum:key_extra
KE_LEFTMOUSE_NM	vim/vim/src/keymap.h	/^    , KE_LEFTMOUSE_NM = 69	\/* non-mappable Left mouse button click *\/$/;"	e	enum:key_extra
KE_LEFTRELEASE	vim/vim/src/keymap.h	/^    , KE_LEFTRELEASE = 46	\/* Left mouse button release *\/$/;"	e	enum:key_extra
KE_LEFTRELEASE_NM	vim/vim/src/keymap.h	/^    , KE_LEFTRELEASE_NM = 70	\/* non-mappable left mouse button release *\/$/;"	e	enum:key_extra
KE_MIDDLEDRAG	vim/vim/src/keymap.h	/^    , KE_MIDDLEDRAG = 48	\/* Drag with middle mouse button down *\/$/;"	e	enum:key_extra
KE_MIDDLEMOUSE	vim/vim/src/keymap.h	/^    , KE_MIDDLEMOUSE = 47	\/* Middle mouse button click *\/$/;"	e	enum:key_extra
KE_MIDDLERELEASE	vim/vim/src/keymap.h	/^    , KE_MIDDLERELEASE = 49	\/* Middle mouse button release *\/$/;"	e	enum:key_extra
KE_MOUSE	vim/vim/src/keymap.h	/^    , KE_MOUSE = 43		\/* mouse event start *\/$/;"	e	enum:key_extra
KE_MOUSEDOWN	vim/vim/src/keymap.h	/^    , KE_MOUSEDOWN = 75		\/* scroll wheel pseudo-button Down *\/$/;"	e	enum:key_extra
KE_MOUSELEFT	vim/vim/src/keymap.h	/^    , KE_MOUSELEFT = 77		\/* scroll wheel pseudo-button Left *\/$/;"	e	enum:key_extra
KE_MOUSERIGHT	vim/vim/src/keymap.h	/^    , KE_MOUSERIGHT = 78	\/* scroll wheel pseudo-button Right *\/$/;"	e	enum:key_extra
KE_MOUSEUP	vim/vim/src/keymap.h	/^    , KE_MOUSEUP = 76		\/* scroll wheel pseudo-button Up *\/$/;"	e	enum:key_extra
KE_NAME	vim/vim/src/keymap.h	/^    KE_NAME = 3		\/* name of this terminal entry *\/$/;"	e	enum:key_extra
KE_NOP	vim/vim/src/keymap.h	/^    , KE_NOP = 97		\/* doesn't do something *\/$/;"	e	enum:key_extra
KE_PLUG	vim/vim/src/keymap.h	/^    , KE_PLUG = 83		\/* <Plug> *\/$/;"	e	enum:key_extra
KE_RIGHTDRAG	vim/vim/src/keymap.h	/^    , KE_RIGHTDRAG = 51		\/* Drag with right mouse button down *\/$/;"	e	enum:key_extra
KE_RIGHTMOUSE	vim/vim/src/keymap.h	/^    , KE_RIGHTMOUSE = 50	\/* Right mouse button click *\/$/;"	e	enum:key_extra
KE_RIGHTRELEASE	vim/vim/src/keymap.h	/^    , KE_RIGHTRELEASE = 52	\/* Right mouse button release *\/$/;"	e	enum:key_extra
KE_SNIFF_UNUSED	vim/vim/src/keymap.h	/^    , KE_SNIFF_UNUSED = 56	\/* obsolete *\/$/;"	e	enum:key_extra
KE_SNR	vim/vim/src/keymap.h	/^    , KE_SNR = 82		\/* <SNR> *\/$/;"	e	enum:key_extra
KE_S_DOWN	vim/vim/src/keymap.h	/^    , KE_S_DOWN = 5		\/* shift-down *\/$/;"	e	enum:key_extra
KE_S_F1	vim/vim/src/keymap.h	/^    , KE_S_F1 = 6		\/* shifted function keys *\/$/;"	e	enum:key_extra
KE_S_F10	vim/vim/src/keymap.h	/^    , KE_S_F10 = 15$/;"	e	enum:key_extra
KE_S_F11	vim/vim/src/keymap.h	/^    , KE_S_F11 = 16$/;"	e	enum:key_extra
KE_S_F12	vim/vim/src/keymap.h	/^    , KE_S_F12 = 17$/;"	e	enum:key_extra
KE_S_F13	vim/vim/src/keymap.h	/^    , KE_S_F13 = 18$/;"	e	enum:key_extra
KE_S_F14	vim/vim/src/keymap.h	/^    , KE_S_F14 = 19$/;"	e	enum:key_extra
KE_S_F15	vim/vim/src/keymap.h	/^    , KE_S_F15 = 20$/;"	e	enum:key_extra
KE_S_F16	vim/vim/src/keymap.h	/^    , KE_S_F16 = 21$/;"	e	enum:key_extra
KE_S_F17	vim/vim/src/keymap.h	/^    , KE_S_F17 = 22$/;"	e	enum:key_extra
KE_S_F18	vim/vim/src/keymap.h	/^    , KE_S_F18 = 23$/;"	e	enum:key_extra
KE_S_F19	vim/vim/src/keymap.h	/^    , KE_S_F19 = 24$/;"	e	enum:key_extra
KE_S_F2	vim/vim/src/keymap.h	/^    , KE_S_F2 = 7$/;"	e	enum:key_extra
KE_S_F20	vim/vim/src/keymap.h	/^    , KE_S_F20 = 25$/;"	e	enum:key_extra
KE_S_F21	vim/vim/src/keymap.h	/^    , KE_S_F21 = 26$/;"	e	enum:key_extra
KE_S_F22	vim/vim/src/keymap.h	/^    , KE_S_F22 = 27$/;"	e	enum:key_extra
KE_S_F23	vim/vim/src/keymap.h	/^    , KE_S_F23 = 28$/;"	e	enum:key_extra
KE_S_F24	vim/vim/src/keymap.h	/^    , KE_S_F24 = 29$/;"	e	enum:key_extra
KE_S_F25	vim/vim/src/keymap.h	/^    , KE_S_F25 = 30$/;"	e	enum:key_extra
KE_S_F26	vim/vim/src/keymap.h	/^    , KE_S_F26 = 31$/;"	e	enum:key_extra
KE_S_F27	vim/vim/src/keymap.h	/^    , KE_S_F27 = 32$/;"	e	enum:key_extra
KE_S_F28	vim/vim/src/keymap.h	/^    , KE_S_F28 = 33$/;"	e	enum:key_extra
KE_S_F29	vim/vim/src/keymap.h	/^    , KE_S_F29 = 34$/;"	e	enum:key_extra
KE_S_F3	vim/vim/src/keymap.h	/^    , KE_S_F3 = 8$/;"	e	enum:key_extra
KE_S_F30	vim/vim/src/keymap.h	/^    , KE_S_F30 = 35$/;"	e	enum:key_extra
KE_S_F31	vim/vim/src/keymap.h	/^    , KE_S_F31 = 36$/;"	e	enum:key_extra
KE_S_F32	vim/vim/src/keymap.h	/^    , KE_S_F32 = 37$/;"	e	enum:key_extra
KE_S_F33	vim/vim/src/keymap.h	/^    , KE_S_F33 = 38$/;"	e	enum:key_extra
KE_S_F34	vim/vim/src/keymap.h	/^    , KE_S_F34 = 39$/;"	e	enum:key_extra
KE_S_F35	vim/vim/src/keymap.h	/^    , KE_S_F35 = 40$/;"	e	enum:key_extra
KE_S_F36	vim/vim/src/keymap.h	/^    , KE_S_F36 = 41$/;"	e	enum:key_extra
KE_S_F37	vim/vim/src/keymap.h	/^    , KE_S_F37 = 42$/;"	e	enum:key_extra
KE_S_F4	vim/vim/src/keymap.h	/^    , KE_S_F4 = 9$/;"	e	enum:key_extra
KE_S_F5	vim/vim/src/keymap.h	/^    , KE_S_F5 = 10$/;"	e	enum:key_extra
KE_S_F6	vim/vim/src/keymap.h	/^    , KE_S_F6 = 11$/;"	e	enum:key_extra
KE_S_F7	vim/vim/src/keymap.h	/^    , KE_S_F7 = 12$/;"	e	enum:key_extra
KE_S_F8	vim/vim/src/keymap.h	/^    , KE_S_F8 = 13$/;"	e	enum:key_extra
KE_S_F9	vim/vim/src/keymap.h	/^    , KE_S_F9 = 14$/;"	e	enum:key_extra
KE_S_TAB_OLD	vim/vim/src/keymap.h	/^    , KE_S_TAB_OLD = 55		\/* shifted TAB key (no longer used) *\/$/;"	e	enum:key_extra
KE_S_UP	vim/vim/src/keymap.h	/^    , KE_S_UP = 4		\/* shift-up *\/$/;"	e	enum:key_extra
KE_S_XF1	vim/vim/src/keymap.h	/^    , KE_S_XF1 = 71		\/* vt100 shifted function keys for xterm *\/$/;"	e	enum:key_extra
KE_S_XF2	vim/vim/src/keymap.h	/^    , KE_S_XF2 = 72$/;"	e	enum:key_extra
KE_S_XF3	vim/vim/src/keymap.h	/^    , KE_S_XF3 = 73$/;"	e	enum:key_extra
KE_S_XF4	vim/vim/src/keymap.h	/^    , KE_S_XF4 = 74$/;"	e	enum:key_extra
KE_TAB	vim/vim/src/keymap.h	/^    , KE_TAB = 54		\/* unshifted TAB key *\/$/;"	e	enum:key_extra
KE_X1DRAG	vim/vim/src/keymap.h	/^    , KE_X1DRAG = 90$/;"	e	enum:key_extra
KE_X1MOUSE	vim/vim/src/keymap.h	/^    , KE_X1MOUSE = 89		\/* X1\/X2 mouse-buttons *\/$/;"	e	enum:key_extra
KE_X1RELEASE	vim/vim/src/keymap.h	/^    , KE_X1RELEASE = 91$/;"	e	enum:key_extra
KE_X2DRAG	vim/vim/src/keymap.h	/^    , KE_X2DRAG = 93$/;"	e	enum:key_extra
KE_X2MOUSE	vim/vim/src/keymap.h	/^    , KE_X2MOUSE = 92$/;"	e	enum:key_extra
KE_X2RELEASE	vim/vim/src/keymap.h	/^    , KE_X2RELEASE = 94$/;"	e	enum:key_extra
KE_XDOWN	vim/vim/src/keymap.h	/^    , KE_XDOWN = 66$/;"	e	enum:key_extra
KE_XEND	vim/vim/src/keymap.h	/^    , KE_XEND = 61		\/* extra (vt100) end key for xterm *\/$/;"	e	enum:key_extra
KE_XF1	vim/vim/src/keymap.h	/^    , KE_XF1 = 57		\/* extra vt100 function keys for xterm *\/$/;"	e	enum:key_extra
KE_XF2	vim/vim/src/keymap.h	/^    , KE_XF2 = 58$/;"	e	enum:key_extra
KE_XF3	vim/vim/src/keymap.h	/^    , KE_XF3 = 59$/;"	e	enum:key_extra
KE_XF4	vim/vim/src/keymap.h	/^    , KE_XF4 = 60$/;"	e	enum:key_extra
KE_XHOME	vim/vim/src/keymap.h	/^    , KE_XHOME = 63		\/* extra (vt100) home key for xterm *\/$/;"	e	enum:key_extra
KE_XLEFT	vim/vim/src/keymap.h	/^    , KE_XLEFT = 67$/;"	e	enum:key_extra
KE_XRIGHT	vim/vim/src/keymap.h	/^    , KE_XRIGHT = 68$/;"	e	enum:key_extra
KE_XUP	vim/vim/src/keymap.h	/^    , KE_XUP = 65		\/* extra vt100 cursor keys for xterm *\/$/;"	e	enum:key_extra
KE_ZEND	vim/vim/src/keymap.h	/^    , KE_ZEND = 62		\/* extra (vt100) end key for xterm *\/$/;"	e	enum:key_extra
KE_ZHOME	vim/vim/src/keymap.h	/^    , KE_ZHOME = 64		\/* extra (vt100) home key for xterm *\/$/;"	e	enum:key_extra
KG_ALT	vim/vim/src/os_unix.c	93;"	d	file:
KG_ALTGR	vim/vim/src/os_unix.c	94;"	d	file:
KG_CAPSSHIFT	vim/vim/src/os_unix.c	99;"	d	file:
KG_CTRL	vim/vim/src/os_unix.c	92;"	d	file:
KG_CTRLL	vim/vim/src/os_unix.c	97;"	d	file:
KG_CTRLR	vim/vim/src/os_unix.c	98;"	d	file:
KG_SHIFT	vim/vim/src/os_unix.c	91;"	d	file:
KG_SHIFTL	vim/vim/src/os_unix.c	95;"	d	file:
KG_SHIFTR	vim/vim/src/os_unix.c	96;"	d	file:
KMAPSOURCE	vim/vim/src/Makefile	/^KMAPSOURCE = ..\/runtime\/keymap$/;"	m
KMAPSUBDIR	vim/vim/src/Makefile	/^KMAPSUBDIR = \/keymap$/;"	m
KMAPSUBLOC	vim/vim/src/Makefile	/^KMAPSUBLOC	= $(VIMRTLOC)$(KMAPSUBDIR)$/;"	m
KMAP_LLEN	vim/vim/src/digraph.c	2359;"	d	file:
KMAP_MAXLEN	vim/vim/src/digraph.c	2289;"	d	file:
KS_8B	vim/vim/src/term.h	/^    KS_8B,	\/* set background color (RGB) *\/$/;"	e	enum:SpecialKey
KS_8F	vim/vim/src/term.h	/^    KS_8F,	\/* set foreground color (RGB) *\/$/;"	e	enum:SpecialKey
KS_AL	vim/vim/src/term.h	/^    KS_AL,	\/* add new blank line *\/$/;"	e	enum:SpecialKey
KS_BC	vim/vim/src/term.h	/^    KS_BC,	\/* backspace character (cursor left) *\/$/;"	e	enum:SpecialKey
KS_CAB	vim/vim/src/term.h	/^    KS_CAB,	\/* set background color (ANSI) *\/$/;"	e	enum:SpecialKey
KS_CAF	vim/vim/src/term.h	/^    KS_CAF,	\/* set foreground color (ANSI) *\/$/;"	e	enum:SpecialKey
KS_CAL	vim/vim/src/term.h	/^    KS_CAL,	\/* add number of blank lines *\/$/;"	e	enum:SpecialKey
KS_CBD	vim/vim/src/term.h	/^    KS_CBD,	\/* disable bracketed paste mode *\/$/;"	e	enum:SpecialKey
KS_CBE	vim/vim/src/term.h	/^    KS_CBE,	\/* enable bracketed paste mode *\/$/;"	e	enum:SpecialKey
KS_CCO	vim/vim/src/term.h	/^    KS_CCO,	\/* number of colors *\/$/;"	e	enum:SpecialKey
KS_CCS	vim/vim/src/term.h	/^    KS_CCS,	\/* cur is relative to scroll region *\/$/;"	e	enum:SpecialKey
KS_CD	vim/vim/src/term.h	/^    KS_CD,	\/* clear to end of display *\/$/;"	e	enum:SpecialKey
KS_CDL	vim/vim/src/term.h	/^    KS_CDL,	\/* delete number of lines *\/$/;"	e	enum:SpecialKey
KS_CE	vim/vim/src/term.h	/^    KS_CE,	\/* clear to end of line *\/$/;"	e	enum:SpecialKey
KS_CEI	vim/vim/src/term.h	/^    KS_CEI,	\/* end insert mode (block cursor) *\/$/;"	e	enum:SpecialKey
KS_CGP	vim/vim/src/term.h	/^    KS_CGP,	\/* get window position *\/$/;"	e	enum:SpecialKey
KS_CIE	vim/vim/src/term.h	/^    KS_CIE,	\/* set icon text end *\/$/;"	e	enum:SpecialKey
KS_CIS	vim/vim/src/term.h	/^    KS_CIS,	\/* set icon text start *\/$/;"	e	enum:SpecialKey
KS_CL	vim/vim/src/term.h	/^    KS_CL,	\/* clear screen *\/$/;"	e	enum:SpecialKey
KS_CM	vim/vim/src/term.h	/^    KS_CM,	\/* cursor motion *\/$/;"	e	enum:SpecialKey
KS_CPE	vim/vim/src/term.h	/^    KS_CPE	\/* end of bracketed paste *\/$/;"	e	enum:SpecialKey
KS_CPS	vim/vim/src/term.h	/^    KS_CPS,	\/* start of bracketed paste *\/$/;"	e	enum:SpecialKey
KS_CRI	vim/vim/src/term.h	/^    KS_CRI,	\/* cursor number of chars right *\/$/;"	e	enum:SpecialKey
KS_CRV	vim/vim/src/term.h	/^    KS_CRV,	\/* request version string *\/$/;"	e	enum:SpecialKey
KS_CS	vim/vim/src/term.h	/^    KS_CS,	\/* scroll region *\/$/;"	e	enum:SpecialKey
KS_CSB	vim/vim/src/term.h	/^    KS_CSB,	\/* set background color *\/$/;"	e	enum:SpecialKey
KS_CSF	vim/vim/src/term.h	/^    KS_CSF,	\/* set foreground color *\/$/;"	e	enum:SpecialKey
KS_CSI	vim/vim/src/term.h	/^    KS_CSI,	\/* start insert mode (bar cursor) *\/$/;"	e	enum:SpecialKey
KS_CSR	vim/vim/src/term.h	/^    KS_CSR,	\/* start replace mode (underline cursor) *\/$/;"	e	enum:SpecialKey
KS_CSV	vim/vim/src/term.h	/^    KS_CSV,	\/* scroll region vertical *\/$/;"	e	enum:SpecialKey
KS_CWP	vim/vim/src/term.h	/^    KS_CWP,	\/* set window position in pixels *\/$/;"	e	enum:SpecialKey
KS_CWS	vim/vim/src/term.h	/^    KS_CWS,	\/* set window size in characters *\/$/;"	e	enum:SpecialKey
KS_CZH	vim/vim/src/term.h	/^    KS_CZH,	\/* italic mode start *\/$/;"	e	enum:SpecialKey
KS_CZR	vim/vim/src/term.h	/^    KS_CZR,	\/* italic mode end *\/$/;"	e	enum:SpecialKey
KS_DA	vim/vim/src/term.h	/^    KS_DA,	\/* text may be scrolled down from up *\/$/;"	e	enum:SpecialKey
KS_DB	vim/vim/src/term.h	/^    KS_DB,	\/* text may be scrolled up from down *\/$/;"	e	enum:SpecialKey
KS_DEC_MOUSE	vim/vim/src/keymap.h	82;"	d
KS_DL	vim/vim/src/term.h	/^    KS_DL,	\/* delete line *\/$/;"	e	enum:SpecialKey
KS_EXTRA	vim/vim/src/keymap.h	61;"	d
KS_FS	vim/vim/src/term.h	/^    KS_FS,	\/* set window title end (from status line) *\/$/;"	e	enum:SpecialKey
KS_HOR_SCROLLBAR	vim/vim/src/keymap.h	76;"	d
KS_JSBTERM_MOUSE	vim/vim/src/keymap.h	96;"	d
KS_KE	vim/vim/src/term.h	/^    KS_KE,	\/* out of "keypad transmit" mode *\/$/;"	e	enum:SpecialKey
KS_KEY	vim/vim/src/keymap.h	99;"	d
KS_KS	vim/vim/src/term.h	/^    KS_KS,	\/* put term in "keypad transmit" mode *\/$/;"	e	enum:SpecialKey
KS_LAST	vim/vim/src/term.h	100;"	d
KS_LE	vim/vim/src/term.h	/^    KS_LE,	\/* cursor left (mostly backspace) *\/$/;"	e	enum:SpecialKey
KS_MB	vim/vim/src/term.h	/^    KS_MB,	\/* blink mode *\/$/;"	e	enum:SpecialKey
KS_MD	vim/vim/src/term.h	/^    KS_MD,	\/* bold mode *\/$/;"	e	enum:SpecialKey
KS_ME	vim/vim/src/term.h	/^    KS_ME,	\/* normal mode *\/$/;"	e	enum:SpecialKey
KS_MENU	vim/vim/src/keymap.h	74;"	d
KS_MODIFIER	vim/vim/src/keymap.h	67;"	d
KS_MOUSE	vim/vim/src/keymap.h	73;"	d
KS_MR	vim/vim/src/term.h	/^    KS_MR,	\/* reverse mode *\/$/;"	e	enum:SpecialKey
KS_MS	vim/vim/src/term.h	/^    KS_MS,	\/* save to move cur in reverse mode *\/$/;"	e	enum:SpecialKey
KS_NAME	vim/vim/src/term.h	/^    KS_NAME = 0,\/* name of this terminal entry *\/$/;"	e	enum:SpecialKey
KS_ND	vim/vim/src/term.h	/^    KS_ND,	\/* cursor right *\/$/;"	e	enum:SpecialKey
KS_NETTERM_MOUSE	vim/vim/src/keymap.h	81;"	d
KS_OP	vim/vim/src/term.h	/^    KS_OP,	\/* original color pair *\/$/;"	e	enum:SpecialKey
KS_PTERM_MOUSE	vim/vim/src/keymap.h	102;"	d
KS_RBG	vim/vim/src/term.h	/^    KS_RBG,	\/* request background color *\/$/;"	e	enum:SpecialKey
KS_SE	vim/vim/src/term.h	/^    KS_SE,	\/* normal mode *\/$/;"	e	enum:SpecialKey
KS_SELECT	vim/vim/src/keymap.h	87;"	d
KS_SGR_MOUSE	vim/vim/src/keymap.h	114;"	d
KS_SGR_MOUSE_RELEASE	vim/vim/src/keymap.h	115;"	d
KS_SO	vim/vim/src/term.h	/^    KS_SO,	\/* standout mode *\/$/;"	e	enum:SpecialKey
KS_SPECIAL	vim/vim/src/keymap.h	55;"	d
KS_SR	vim/vim/src/term.h	/^    KS_SR,	\/* scroll reverse (backward) *\/$/;"	e	enum:SpecialKey
KS_TABLINE	vim/vim/src/keymap.h	105;"	d
KS_TABMENU	vim/vim/src/keymap.h	108;"	d
KS_TE	vim/vim/src/term.h	/^    KS_TE,	\/* out of termcap mode *\/$/;"	e	enum:SpecialKey
KS_TEAROFF	vim/vim/src/keymap.h	93;"	d
KS_TI	vim/vim/src/term.h	/^    KS_TI,	\/* put terminal in termcap mode *\/$/;"	e	enum:SpecialKey
KS_TS	vim/vim/src/term.h	/^    KS_TS,	\/* set window title start (to status line)*\/$/;"	e	enum:SpecialKey
KS_U7	vim/vim/src/term.h	/^    KS_U7,	\/* request cursor position *\/$/;"	e	enum:SpecialKey
KS_UCE	vim/vim/src/term.h	/^    KS_UCE,	\/* exit undercurl mode *\/$/;"	e	enum:SpecialKey
KS_UCS	vim/vim/src/term.h	/^    KS_UCS,	\/* undercurl mode *\/$/;"	e	enum:SpecialKey
KS_UE	vim/vim/src/term.h	/^    KS_UE,	\/* exit underscore (underline) mode *\/$/;"	e	enum:SpecialKey
KS_URXVT_MOUSE	vim/vim/src/keymap.h	111;"	d
KS_US	vim/vim/src/term.h	/^    KS_US,	\/* underscore (underline) mode *\/$/;"	e	enum:SpecialKey
KS_UT	vim/vim/src/term.h	/^    KS_UT,	\/* clearing uses current background color *\/$/;"	e	enum:SpecialKey
KS_VB	vim/vim/src/term.h	/^    KS_VB,	\/* visual bell *\/$/;"	e	enum:SpecialKey
KS_VE	vim/vim/src/term.h	/^    KS_VE,	\/* cursor visible *\/$/;"	e	enum:SpecialKey
KS_VER_SCROLLBAR	vim/vim/src/keymap.h	75;"	d
KS_VI	vim/vim/src/term.h	/^    KS_VI,	\/* cursor invisible *\/$/;"	e	enum:SpecialKey
KS_VS	vim/vim/src/term.h	/^    KS_VS,	\/* cursor very visible *\/$/;"	e	enum:SpecialKey
KS_XN	vim/vim/src/term.h	/^    KS_XN,	\/* newline glitch *\/$/;"	e	enum:SpecialKey
KS_XS	vim/vim/src/term.h	/^    KS_XS,	\/* standout not erased by overwriting (hpterm) *\/$/;"	e	enum:SpecialKey
KS_ZERO	vim/vim/src/keymap.h	49;"	d
KWORD	vim/vim/src/regexp.c	189;"	d	file:
KWORD_TEST_OBJ	vim/vim/src/Makefile	/^KWORD_TEST_OBJ = $(OBJ_COMMON) $(OBJ_KWORD_TEST)$/;"	m
KWORD_TEST_SRC	vim/vim/src/Makefile	/^KWORD_TEST_SRC = kword_test.c$/;"	m
KWORD_TEST_TARGET	vim/vim/src/Makefile	/^KWORD_TEST_TARGET = kword_test$(EXEEXT)$/;"	m
K_BS	vim/vim/src/keymap.h	373;"	d
K_CMDWIN	vim/vim/src/keymap.h	465;"	d
K_CSI	vim/vim/src/keymap.h	462;"	d
K_CURSORHOLD	vim/vim/src/keymap.h	471;"	d
K_C_END	vim/vim/src/keymap.h	292;"	d
K_C_HOME	vim/vim/src/keymap.h	290;"	d
K_C_LEFT	vim/vim/src/keymap.h	286;"	d
K_C_RIGHT	vim/vim/src/keymap.h	288;"	d
K_DEC_MOUSE	vim/vim/src/keymap.h	418;"	d
K_DEL	vim/vim/src/keymap.h	377;"	d
K_DOWN	vim/vim/src/keymap.h	280;"	d
K_DROP	vim/vim/src/keymap.h	467;"	d
K_END	vim/vim/src/keymap.h	383;"	d
K_F1	vim/vim/src/keymap.h	308;"	d
K_F10	vim/vim/src/keymap.h	317;"	d
K_F11	vim/vim/src/keymap.h	319;"	d
K_F12	vim/vim/src/keymap.h	320;"	d
K_F13	vim/vim/src/keymap.h	321;"	d
K_F14	vim/vim/src/keymap.h	322;"	d
K_F15	vim/vim/src/keymap.h	323;"	d
K_F16	vim/vim/src/keymap.h	324;"	d
K_F17	vim/vim/src/keymap.h	325;"	d
K_F18	vim/vim/src/keymap.h	326;"	d
K_F19	vim/vim/src/keymap.h	327;"	d
K_F2	vim/vim/src/keymap.h	309;"	d
K_F20	vim/vim/src/keymap.h	328;"	d
K_F21	vim/vim/src/keymap.h	330;"	d
K_F22	vim/vim/src/keymap.h	331;"	d
K_F23	vim/vim/src/keymap.h	332;"	d
K_F24	vim/vim/src/keymap.h	333;"	d
K_F25	vim/vim/src/keymap.h	334;"	d
K_F26	vim/vim/src/keymap.h	335;"	d
K_F27	vim/vim/src/keymap.h	336;"	d
K_F28	vim/vim/src/keymap.h	337;"	d
K_F29	vim/vim/src/keymap.h	338;"	d
K_F3	vim/vim/src/keymap.h	310;"	d
K_F30	vim/vim/src/keymap.h	339;"	d
K_F31	vim/vim/src/keymap.h	341;"	d
K_F32	vim/vim/src/keymap.h	342;"	d
K_F33	vim/vim/src/keymap.h	343;"	d
K_F34	vim/vim/src/keymap.h	344;"	d
K_F35	vim/vim/src/keymap.h	345;"	d
K_F36	vim/vim/src/keymap.h	346;"	d
K_F37	vim/vim/src/keymap.h	347;"	d
K_F4	vim/vim/src/keymap.h	311;"	d
K_F5	vim/vim/src/keymap.h	312;"	d
K_F6	vim/vim/src/keymap.h	313;"	d
K_F7	vim/vim/src/keymap.h	314;"	d
K_F8	vim/vim/src/keymap.h	315;"	d
K_F9	vim/vim/src/keymap.h	316;"	d
K_FOCUSGAINED	vim/vim/src/keymap.h	468;"	d
K_FOCUSLOST	vim/vim/src/keymap.h	469;"	d
K_HELP	vim/vim/src/keymap.h	370;"	d
K_HOME	vim/vim/src/keymap.h	379;"	d
K_HOR_SCROLLBAR	vim/vim/src/keymap.h	415;"	d
K_IGNORE	vim/vim/src/keymap.h	454;"	d
K_INS	vim/vim/src/keymap.h	375;"	d
K_JSBTERM_MOUSE	vim/vim/src/keymap.h	419;"	d
K_K0	vim/vim/src/keymap.h	401;"	d
K_K1	vim/vim/src/keymap.h	402;"	d
K_K2	vim/vim/src/keymap.h	403;"	d
K_K3	vim/vim/src/keymap.h	404;"	d
K_K4	vim/vim/src/keymap.h	405;"	d
K_K5	vim/vim/src/keymap.h	406;"	d
K_K6	vim/vim/src/keymap.h	407;"	d
K_K7	vim/vim/src/keymap.h	408;"	d
K_K8	vim/vim/src/keymap.h	409;"	d
K_K9	vim/vim/src/keymap.h	410;"	d
K_KDEL	vim/vim/src/keymap.h	378;"	d
K_KDIVIDE	vim/vim/src/keymap.h	394;"	d
K_KEND	vim/vim/src/keymap.h	384;"	d
K_KENTER	vim/vim/src/keymap.h	396;"	d
K_KHOME	vim/vim/src/keymap.h	380;"	d
K_KINS	vim/vim/src/keymap.h	376;"	d
K_KMINUS	vim/vim/src/keymap.h	393;"	d
K_KMULTIPLY	vim/vim/src/keymap.h	395;"	d
K_KPAGEDOWN	vim/vim/src/keymap.h	390;"	d
K_KPAGEUP	vim/vim/src/keymap.h	389;"	d
K_KPLUS	vim/vim/src/keymap.h	392;"	d
K_KPOINT	vim/vim/src/keymap.h	397;"	d
K_LEFT	vim/vim/src/keymap.h	281;"	d
K_LEFTDRAG	vim/vim/src/keymap.h	437;"	d
K_LEFTMOUSE	vim/vim/src/keymap.h	435;"	d
K_LEFTMOUSE_NM	vim/vim/src/keymap.h	436;"	d
K_LEFTRELEASE	vim/vim/src/keymap.h	438;"	d
K_LEFTRELEASE_NM	vim/vim/src/keymap.h	439;"	d
K_MENU	vim/vim/src/keymap.h	413;"	d
K_MIDDLEDRAG	vim/vim/src/keymap.h	441;"	d
K_MIDDLEMOUSE	vim/vim/src/keymap.h	440;"	d
K_MIDDLERELEASE	vim/vim/src/keymap.h	442;"	d
K_MOUSE	vim/vim/src/keymap.h	412;"	d
K_MOUSEDOWN	vim/vim/src/keymap.h	457;"	d
K_MOUSELEFT	vim/vim/src/keymap.h	459;"	d
K_MOUSERIGHT	vim/vim/src/keymap.h	460;"	d
K_MOUSEUP	vim/vim/src/keymap.h	458;"	d
K_NETTERM_MOUSE	vim/vim/src/keymap.h	417;"	d
K_NOP	vim/vim/src/keymap.h	455;"	d
K_NUL	vim/vim/src/keymap.h	19;"	d
K_PAGEDOWN	vim/vim/src/keymap.h	388;"	d
K_PAGEUP	vim/vim/src/keymap.h	387;"	d
K_PE	vim/vim/src/keymap.h	399;"	d
K_PLUG	vim/vim/src/keymap.h	464;"	d
K_PS	vim/vim/src/keymap.h	398;"	d
K_PTERM_MOUSE	vim/vim/src/keymap.h	420;"	d
K_RIGHT	vim/vim/src/keymap.h	282;"	d
K_RIGHTDRAG	vim/vim/src/keymap.h	444;"	d
K_RIGHTMOUSE	vim/vim/src/keymap.h	443;"	d
K_RIGHTRELEASE	vim/vim/src/keymap.h	445;"	d
K_SECOND	vim/vim/src/keymap.h	132;"	d
K_SELECT	vim/vim/src/keymap.h	425;"	d
K_SELECT_STRING	vim/vim/src/keymap.h	88;"	d
K_SGR_MOUSE	vim/vim/src/keymap.h	422;"	d
K_SGR_MOUSERELEASE	vim/vim/src/keymap.h	423;"	d
K_SNR	vim/vim/src/keymap.h	463;"	d
K_SPECIAL	vim/vim/src/keymap.h	29;"	d
K_S_DOWN	vim/vim/src/keymap.h	284;"	d
K_S_END	vim/vim/src/keymap.h	291;"	d
K_S_F1	vim/vim/src/keymap.h	355;"	d
K_S_F10	vim/vim/src/keymap.h	364;"	d
K_S_F11	vim/vim/src/keymap.h	366;"	d
K_S_F12	vim/vim/src/keymap.h	367;"	d
K_S_F2	vim/vim/src/keymap.h	356;"	d
K_S_F3	vim/vim/src/keymap.h	357;"	d
K_S_F4	vim/vim/src/keymap.h	358;"	d
K_S_F5	vim/vim/src/keymap.h	359;"	d
K_S_F6	vim/vim/src/keymap.h	360;"	d
K_S_F7	vim/vim/src/keymap.h	361;"	d
K_S_F8	vim/vim/src/keymap.h	362;"	d
K_S_F9	vim/vim/src/keymap.h	363;"	d
K_S_HOME	vim/vim/src/keymap.h	289;"	d
K_S_LEFT	vim/vim/src/keymap.h	285;"	d
K_S_RIGHT	vim/vim/src/keymap.h	287;"	d
K_S_TAB	vim/vim/src/keymap.h	294;"	d
K_S_UP	vim/vim/src/keymap.h	283;"	d
K_S_XF1	vim/vim/src/keymap.h	350;"	d
K_S_XF2	vim/vim/src/keymap.h	351;"	d
K_S_XF3	vim/vim/src/keymap.h	352;"	d
K_S_XF4	vim/vim/src/keymap.h	353;"	d
K_TAB	vim/vim/src/keymap.h	293;"	d
K_TABLINE	vim/vim/src/keymap.h	428;"	d
K_TABMENU	vim/vim/src/keymap.h	429;"	d
K_TEAROFF	vim/vim/src/keymap.h	426;"	d
K_THIRD	vim/vim/src/keymap.h	134;"	d
K_UNDO	vim/vim/src/keymap.h	371;"	d
K_UP	vim/vim/src/keymap.h	279;"	d
K_URXVT_MOUSE	vim/vim/src/keymap.h	421;"	d
K_VER_SCROLLBAR	vim/vim/src/keymap.h	414;"	d
K_X1DRAG	vim/vim/src/keymap.h	448;"	d
K_X1MOUSE	vim/vim/src/keymap.h	446;"	d
K_X1MOUSE	vim/vim/src/keymap.h	447;"	d
K_X1RELEASE	vim/vim/src/keymap.h	449;"	d
K_X2DRAG	vim/vim/src/keymap.h	451;"	d
K_X2MOUSE	vim/vim/src/keymap.h	450;"	d
K_X2RELEASE	vim/vim/src/keymap.h	452;"	d
K_XDOWN	vim/vim/src/keymap.h	304;"	d
K_XEND	vim/vim/src/keymap.h	385;"	d
K_XF1	vim/vim/src/keymap.h	297;"	d
K_XF2	vim/vim/src/keymap.h	298;"	d
K_XF3	vim/vim/src/keymap.h	299;"	d
K_XF4	vim/vim/src/keymap.h	300;"	d
K_XHOME	vim/vim/src/keymap.h	381;"	d
K_XLEFT	vim/vim/src/keymap.h	305;"	d
K_XRIGHT	vim/vim/src/keymap.h	306;"	d
K_XUP	vim/vim/src/keymap.h	303;"	d
K_ZEND	vim/vim/src/keymap.h	386;"	d
K_ZERO	vim/vim/src/keymap.h	277;"	d
K_ZHOME	vim/vim/src/keymap.h	382;"	d
KeyNoremap	vim/vim/src/getchar.c	/^static int		KeyNoremap = 0;	    \/* remapping flags *\/$/;"	v	file:
KeyStuffed	vim/vim/src/globals.h	/^EXTERN int	KeyStuffed;		\/* TRUE if current char from stuffbuf *\/$/;"	v
KeySym	vim/vim/src/gui_mac.c	236;"	d	file:
KeyTyped	vim/vim/src/globals.h	/^EXTERN int	KeyTyped;		\/* TRUE if user typed current char *\/$/;"	v
Kill	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	e	enum:__anon69
L	vim/vim/src/if_lua.c	/^static lua_State *L = NULL;$/;"	v	file:
LA	vim/vim/src/farsi.h	53;"	d
LAM	vim/vim/src/farsi.h	137;"	d
LANGMAP	vim/vim/src/vim.h	702;"	d
LANGMAP_ADJUST	vim/vim/src/macros.h	143;"	d
LANGMAP_ADJUST	vim/vim/src/macros.h	158;"	d
LANGMAP_ADJUST	vim/vim/src/macros.h	169;"	d
LANGP_ENTRY	vim/vim/src/spell.h	237;"	d
LANGSOURCE	vim/vim/src/Makefile	/^LANGSOURCE = ..\/runtime\/lang$/;"	m
LANGSUBDIR	vim/vim/src/Makefile	/^LANGSUBDIR = \/lang$/;"	m
LANGSUBLOC	vim/vim/src/Makefile	/^LANGSUBLOC	= $(VIMRTLOC)$(LANGSUBDIR)$/;"	m
LANGUAGES	vim/vim/src/po/Make_cyg.mak	/^LANGUAGES = \\$/;"	m
LANGUAGES	vim/vim/src/po/Make_ming.mak	/^LANGUAGES = \\$/;"	m
LANGUAGES	vim/vim/src/po/Make_mvc.mak	/^LANGUAGES = \\$/;"	m
LANGUAGES	vim/vim/src/po/Makefile	/^LANGUAGES = \\$/;"	m
LAST_NL	vim/vim/src/regexp.c	213;"	d	file:
LAST_TAB_NR	vim/vim/src/ex_docmd.c	1715;"	d	file:
LAST_TAB_NR	vim/vim/src/ex_docmd.c	1720;"	d	file:
LAST_WIN_NR	vim/vim/src/ex_docmd.c	1713;"	d	file:
LAST_WIN_NR	vim/vim/src/ex_docmd.c	1718;"	d	file:
LATIN1LOWER	vim/vim/src/charset.c	1660;"	d	file:
LATIN1UPPER	vim/vim/src/charset.c	1661;"	d	file:
LBOUND	vim/vim/src/libvterm/src/state.c	935;"	d	file:
LBUFLEN	vim/vim/src/diff.c	28;"	d	file:
LD	vim/vim/src/Make_dice.mak	/^LD = dcc$/;"	m
LD	vim/vim/src/Make_morph.mak	/^LD =		gcc$/;"	m
LDFLAGS	vim/vim/src/auto/config.mk	/^LDFLAGS		=  -L\/usr\/local\/lib -Wl,--as-needed$/;"	m
LD_PO_FILE_INPUT	vim/vim/src/po/Make_mvc.mak	/^	set OLD_PO_FILE_INPUT=yes$/;"	m
LD_PO_FILE_OUTPUT	vim/vim/src/po/Make_mvc.mak	/^	set OLD_PO_FILE_OUTPUT=yes$/;"	m
LEADER	vim/vim/src/libvterm/src/state.c	938;"	d	file:
LEN_FROM_CONV	vim/vim/src/mbyte.c	520;"	d	file:
LFLAGS	vim/vim/src/Make_bc5.mak	/^LFLAGS	= -OS -Tpe -c -m -L$(LIB) $(DEBUG_FLAG) $(LINK2)$/;"	m
LFLAGSDLL	vim/vim/src/Make_bc5.mak	/^LFLAGSDLL  = -Tpd -c -m -L$(LIB) $(DEBUG_FLAG) $(LINK2)$/;"	m
LFUNC	vim/vim/src/xpm/include/simx.h	134;"	d
LFUNC	vim/vim/src/xpm/include/simx.h	53;"	d
LFUNC	vim/vim/src/xpm/include/simx.h	56;"	d
LFUNC	vim/vim/src/xpm/include/xpm.h	294;"	d
LFUNC	vim/vim/src/xpm/include/xpm.h	297;"	d
LIB	vim/vim/src/GvimExt/Make_bc5.mak	/^LIB	= $(BOR)\\lib$/;"	m
LIB	vim/vim/src/Make_bc5.mak	/^LIB = $(BOR)\\lib$/;"	m
LIB	vim/vim/src/Make_cyg_ming.mak	/^LIB = -lkernel32 -luser32 -lgdi32 -ladvapi32 -lcomdlg32 -lcomctl32 -lversion$/;"	m
LIBC	vim/vim/src/Make_mvc.mak	/^LIBC = $(LIBC) libcmtd.lib$/;"	m
LIBC	vim/vim/src/Make_mvc.mak	/^LIBC = $(LIBC) msvcrtd.lib$/;"	m
LIBC	vim/vim/src/Make_mvc.mak	/^LIBC = \/fixed:no$/;"	m
LIBC	vim/vim/src/Make_mvc.mak	/^LIBC = libcmt.lib$/;"	m
LIBC	vim/vim/src/Make_mvc.mak	/^LIBC = msvcrt.lib$/;"	m
LIBC	vim/vim/src/Make_mvc.mak	/^LIBC =$/;"	m
LIBDIR	vim/vim/src/libvterm/Makefile	/^LIBDIR=$(PREFIX)\/lib$/;"	m
LIBID_Vim	vim/vim/src/if_ole.h	/^EXTERN_C const IID LIBID_Vim;$/;"	v
LIBID_Vim	vim/vim/src/iid_ole.c	/^const IID LIBID_Vim = {0x0F0BFAE0,0x4C90,0x11d1,{0x82,0xD7,0x00,0x04,0xAC,0x36,0x85,0x19}};$/;"	v
LIBID_VisVim	vim/vim/src/VisVim/Commands.h	/^				 &LIBID_VisVim >,$/;"	v
LIBRARY	vim/vim/src/libvterm/Makefile	/^LIBRARY=libvterm.la$/;"	m
LIBS	vim/vim/src/GvimExt/Make_ming.mak	/^LIBS :=  -luuid -lgdi32$/;"	m
LIBS	vim/vim/src/Make_dice.mak	/^LIBS = -la$/;"	m
LIBS	vim/vim/src/Make_manx.mak	/^LIBS = -lc16$/;"	m
LIBS	vim/vim/src/Make_morph.mak	/^LIBS =		-noixemul -s$/;"	m
LIBS	vim/vim/src/auto/config.mk	/^LIBS		= -lm -ltinfo -lnsl   -ldl$/;"	m
LIBS	vim/vim/src/xxd/Make_ming.mak	/^LIBS    = -lc$/;"	m
LIBS	vim/vim/src/xxd/Make_ming.mak	/^LIBS    =$/;"	m
LIBTOOL	vim/vim/src/libvterm/Makefile	/^  LIBTOOL ?= glibtool$/;"	m
LIBTOOL	vim/vim/src/libvterm/Makefile	/^  LIBTOOL ?= libtool$/;"	m
LINEEMPTY	vim/vim/src/macros.h	57;"	d
LINELEN	vim/vim/runtime/doc/doctags.c	14;"	d	file:
LINELENGTH	vim/vim/runtime/tools/ccfilter.c	21;"	d	file:
LINE_ATTR	vim/vim/src/screen.c	3113;"	d	file:
LINE_BUF_LEN	vim/vim/src/buffer.c	5617;"	d	file:
LINE_DELAY	vim/vim/src/gui_at_sb.c	220;"	d	file:
LINE_LEN	vim/vim/src/term.c	6258;"	d	file:
LINE_MAXLEN	vim/vim/src/quickfix.c	209;"	d	file:
LINE_REPEAT	vim/vim/src/gui_at_sb.c	222;"	d	file:
LINK	vim/vim/src/GvimExt/Make_bc5.mak	/^LINK	= $(BOR)\\BIN\\ILink32$/;"	m
LINK	vim/vim/src/Make_bc5.mak	/^LINK	= $(BOR)\\BIN\\ILink32$/;"	m
LINK2	vim/vim/src/Make_bc5.mak	/^LINK2 = -aa$/;"	m
LINK2	vim/vim/src/Make_bc5.mak	/^LINK2 = -ap -OS -o -P$/;"	m
LINK32	vim/vim/src/Make_dvc.mak	/^LINK32=link.exe$/;"	m
LINK32	vim/vim/src/Make_ivc.mak	/^LINK32=link.exe$/;"	m
LINK32	vim/vim/src/VisVim/VisVim.mak	/^LINK32=link.exe$/;"	m
LINK32_FLAGS	vim/vim/src/Make_dvc.mak	/^LINK32_FLAGS=\/nologo \/pdb:none \/machine:IX86 \/out:"$(OUTDIR)\/vimrun.exe"$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS= oldnames.lib kernel32.lib user32.lib gdi32.lib version.lib comdlg32.lib comctl32.lib advapi32.lib shell32.lib ole32.lib uuid.lib \/nologo \/machine:I386 \/nodefaultlib$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) \/pdb:.\\Rel\/vim.pdb -debug:full -debugtype:cv,fixup \/map:.\\oleDbg\\vim.map libc.lib \/subsystem:console \/out:.\\vim.exe$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) \/pdb:.\\gRel\/gvim.pdb -debug:full -debugtype:cv,fixup \/map:.\\oleDbg\\gvim.map libc.lib \/subsystem:windows \/out:.\\gvim.exe$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) \/pdb:.\\oleRel\/gvim.pdb -debug:full -debugtype:cv,fixup \/map:.\\oleDbg\\gvim.map libc.lib oleaut32.lib \/subsystem:windows \/out:.\\gvim.exe$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) libcd.lib \/subsystem:console \/debug \/profile \/pdb:.\\Dbg\/vimd.pdb -debug:full -debugtype:cv,fixup \/map:.\\Dbg\/vimd.map \/out:.\\vimd.exe$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) libcd.lib \/subsystem:windows \/debug \/profile \/pdb:.\\gDbg\/gvimd.pdb -debug:full -debugtype:cv,fixup \/map:.\\gDbg\\gvimd.map \/out:.\\gvimd.exe$/;"	m
LINK32_FLAGS	vim/vim/src/Make_ivc.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) libcd.lib oleaut32.lib \/subsystem:windows \/debug \/profile \/pdb:.\\oleDbg\/gvimd.pdb -debug:full -debugtype:cv,fixup \/map:.\\oleDbg\\gvimd.map \/out:.\\gvimd.exe$/;"	m
LINK32_FLAGS	vim/vim/src/VisVim/VisVim.mak	/^LINK32_FLAGS=$(LINK32_FLAGS) \/nologo \/subsystem:windows \/dll \/machine:I386\\$/;"	m
LINK32_FLAGS	vim/vim/src/VisVim/VisVim.mak	/^LINK32_FLAGS=\/debug \/pdbtype:sept \/pdb:"$(OUTDIR)\/VisVim.pdb"$/;"	m
LINK32_FLAGS	vim/vim/src/VisVim/VisVim.mak	/^LINK32_FLAGS=\/pdb:none$/;"	m
LINK32_OBJS	vim/vim/src/Make_dvc.mak	/^LINK32_OBJS= \\$/;"	m
LINK32_OBJS	vim/vim/src/Make_ivc.mak	/^LINK32_OBJS= \\$/;"	m
LINK32_OBJS	vim/vim/src/VisVim/VisVim.mak	/^LINK32_OBJS= \\$/;"	m
LINKARGS1	vim/vim/src/Make_mvc.mak	/^LINKARGS1 = $(LINKARGS1) \/LTCG:STATUS$/;"	m
LINKARGS1	vim/vim/src/Make_mvc.mak	/^LINKARGS1 = $(linkdebug) $(conflags)$/;"	m
LINKARGS2	vim/vim/src/Make_mvc.mak	/^LINKARGS2 = $(CON_LIB) $(GUI_LIB) $(NODEFAULTLIB) $(LIBC) $(OLE_LIB) user32.lib \\$/;"	m
LINKIT	vim/vim/src/Makefile	/^LINKIT = @echo >\/dev\/null$/;"	m
LINK_AS_NEEDED	vim/vim/src/auto/config.mk	/^LINK_AS_NEEDED	= yes$/;"	m
LINK_PDB	vim/vim/src/Make_mvc.mak	/^LINK_PDB = \/PDB:$(VIM).pdb -debug$/;"	m
LINT	vim/vim/src/Makefile	/^LINT = lint$/;"	m
LINT_CFLAGS	vim/vim/src/Makefile	/^LINT_CFLAGS = -DLINT -I. $(PRE_DEFS) $(POST_DEFS) $(RUBY_CFLAGS) $(LUA_CFLAGS) $(PERL_CFLAGS) $(PYTHON_CFLAGS) $(PYTHON3_CFLAGS) $(TCL_CFLAGS) -Dinline= -D__extension__= -Dalloca=alloca$/;"	m
LINT_EXTRA	vim/vim/src/Makefile	/^LINT_EXTRA = -DHANGUL_INPUT -D"__attribute__(x)="$/;"	m
LINT_OPTIONS	vim/vim/src/Makefile	/^LINT_OPTIONS = -beprxzF$/;"	m
LINT_SRC	vim/vim/src/Makefile	/^LINT_SRC = $(BASIC_SRC) $(GUI_SRC) $(HANGULIN_SRC) \\$/;"	m
LISPWORD_VALUE	vim/vim/src/option.h	303;"	d
LISTCOUNT	vim/vim/src/quickfix.c	48;"	d	file:
LIST_ATTR	vim/vim/src/syntax.c	9046;"	d	file:
LIST_INT	vim/vim/src/syntax.c	9048;"	d	file:
LIST_STRING	vim/vim/src/syntax.c	9047;"	d	file:
LLEN	vim/vim/src/xxd/xxd.c	207;"	d	file:
LN	vim/vim/src/Make_manx.mak	/^LN = ln$/;"	m
LNFLAGS	vim/vim/src/Make_manx.mak	/^LNFLAGS = +q$/;"	m
LN_DEBUG	vim/vim/src/xxd/Make_amiga.mak	/^LN_DEBUG =$/;"	m
LOCALE	vim/vim/src/if_ole.cpp	86;"	d	file:
LOGFONT	vim/vim/src/gui_w32.c	/^typedef int LOGFONT[];$/;"	t	file:
LOGFONT	vim/vim/src/os_mswin.c	/^typedef int LOGFONT;$/;"	t	file:
LOGFONT	vim/vim/src/os_win32.c	/^typedef int LOGFONT;$/;"	t	file:
LOG_TR	vim/vim/src/term.c	115;"	d	file:
LONG	vim/vim/src/gui_w32.c	/^typedef int LONG;$/;"	t	file:
LONGJMP	vim/vim/src/os_unix.h	491;"	d
LONGJMP	vim/vim/src/os_unix.h	495;"	d
LONG_LONG_OFF_T	vim/vim/src/vim.h	397;"	d
LOOKFOR_ANY	vim/vim/src/misc1.c	7164;"	d	file:
LOOKFOR_CASE	vim/vim/src/misc1.c	7163;"	d	file:
LOOKFOR_COMMA	vim/vim/src/misc1.c	7172;"	d	file:
LOOKFOR_CPP_BASECLASS	vim/vim/src/misc1.c	7169;"	d	file:
LOOKFOR_DO	vim/vim/src/misc1.c	7162;"	d	file:
LOOKFOR_ENUM_OR_INIT	vim/vim/src/misc1.c	7170;"	d	file:
LOOKFOR_IF	vim/vim/src/misc1.c	7161;"	d	file:
LOOKFOR_INITIAL	vim/vim/src/misc1.c	7160;"	d	file:
LOOKFOR_JS_KEY	vim/vim/src/misc1.c	7171;"	d	file:
LOOKFOR_NOBREAK	vim/vim/src/misc1.c	7168;"	d	file:
LOOKFOR_SCOPEDECL	vim/vim/src/misc1.c	7167;"	d	file:
LOOKFOR_TERM	vim/vim/src/misc1.c	7165;"	d	file:
LOOKFOR_UNTERM	vim/vim/src/misc1.c	7166;"	d	file:
LOWER	vim/vim/src/regexp.c	209;"	d	file:
LOWEST_WIN_ID	vim/vim/src/vim.h	2468;"	d
LPARAM	vim/vim/src/gui_w32.c	/^typedef int LPARAM;$/;"	t	file:
LPARAM	vim/vim/src/os_mswin.c	/^typedef int LPARAM;$/;"	t	file:
LPBOOL	vim/vim/src/os_mswin.c	/^typedef int LPBOOL;$/;"	t	file:
LPBOOL	vim/vim/src/os_win32.c	/^typedef int LPBOOL;$/;"	t	file:
LPBOOL	vim/vim/src/winclip.c	/^typedef int LPBOOL;$/;"	t	file:
LPCOMPOSITIONFORM	vim/vim/src/gui_w32.c	/^} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;$/;"	t	typeref:struct:tagCOMPOSITIONFORM	file:
LPCREATESTRUCT	vim/vim/src/gui_w32.c	/^typedef int LPCREATESTRUCT;$/;"	t	file:
LPCSHELLEXT	vim/vim/src/GvimExt/gvimext.h	/^typedef CShellExt *LPCSHELLEXT;$/;"	t
LPCSHELLEXTCLASSFACTORY	vim/vim/src/GvimExt/gvimext.h	/^typedef CShellExtClassFactory *LPCSHELLEXTCLASSFACTORY;$/;"	t
LPCSTR	vim/vim/src/gui_w32.c	/^typedef int LPCSTR;$/;"	t	file:
LPCSTR	vim/vim/src/os_mswin.c	/^typedef int LPCSTR;$/;"	t	file:
LPCSTR	vim/vim/src/os_win32.c	/^typedef char * LPCSTR;$/;"	t	file:
LPCSTR	vim/vim/src/winclip.c	/^typedef int LPCSTR;$/;"	t	file:
LPCTSTR	vim/vim/src/gui_w32.c	/^typedef int LPCTSTR;$/;"	t	file:
LPCTSTR	vim/vim/src/os_win32.c	/^typedef int LPCTSTR;$/;"	t	file:
LPCWSTR	vim/vim/src/os_mswin.c	/^typedef int LPCWSTR;$/;"	t	file:
LPCWSTR	vim/vim/src/winclip.c	/^typedef int LPCWSTR;$/;"	t	file:
LPDWORD	vim/vim/src/os_win32.c	/^typedef int LPDWORD;$/;"	t	file:
LPHANDLE	vim/vim/src/os_win32.c	/^typedef int LPHANDLE;$/;"	t	file:
LPNMHDR	vim/vim/src/gui_w32.c	/^typedef int LPNMHDR;$/;"	t	file:
LPNMTTDISPINFO	vim/vim/src/gui_w32.c	4327;"	d	file:
LPNMTTDISPINFOA	vim/vim/src/gui_w32.c	/^} NMTTDISPINFOA, *LPNMTTDISPINFOA;$/;"	t	typeref:struct:tagNMTTDISPINFOA	file:
LPNMTTDISPINFOW	vim/vim/src/gui_w32.c	/^} NMTTDISPINFOW, *LPNMTTDISPINFOW;$/;"	t	typeref:struct:tagNMTTDISPINFOW	file:
LPRECT	vim/vim/src/gui_w32.c	/^typedef int LPRECT;$/;"	t	file:
LPSECURITY_ATTRIBUTES	vim/vim/src/os_win32.c	/^typedef int LPSECURITY_ATTRIBUTES;$/;"	t	file:
LPSTR	vim/vim/src/gui_w32.c	/^typedef int LPSTR;$/;"	t	file:
LPSTR	vim/vim/src/os_mswin.c	/^typedef int LPSTR;$/;"	t	file:
LPSTR	vim/vim/src/os_win32.c	/^typedef int LPSTR;$/;"	t	file:
LPSTR	vim/vim/src/winclip.c	/^typedef int LPSTR;$/;"	t	file:
LPTSTR	vim/vim/src/os_mswin.c	/^typedef int LPTSTR;$/;"	t	file:
LPTSTR	vim/vim/src/os_win32.c	/^typedef int LPTSTR;$/;"	t	file:
LPVOID	vim/vim/src/os_win32.c	/^typedef int LPVOID;$/;"	t	file:
LPWINDOWPOS	vim/vim/src/gui_w32.c	/^typedef int LPWINDOWPOS;$/;"	t	file:
LPWORD	vim/vim/src/gui_w32.c	/^typedef int LPWORD;$/;"	t	file:
LPWSTR	vim/vim/src/os_mswin.c	/^typedef int LPWSTR;$/;"	t	file:
LPWSTR	vim/vim/src/os_win32.c	/^typedef char * LPWSTR;$/;"	t	file:
LPWSTR	vim/vim/src/winclip.c	/^typedef int LPWSTR;$/;"	t	file:
LREPLACE	vim/vim/src/vim.h	711;"	d
LRESULT	vim/vim/src/gui_w32.c	/^typedef int LRESULT;$/;"	t	file:
LRESULT	vim/vim/src/os_mswin.c	/^typedef int LRESULT;$/;"	t	file:
LS	vim/vim/src/po/Make_mvc.mak	/^LS = dir$/;"	m
LSFLAGS	vim/vim/src/po/Make_mvc.mak	/^LSFLAGS = \/b \/on \/l \/s$/;"	m
LSIZE	vim/vim/src/vim.h	1522;"	d
LTOREQ_POS	vim/vim/src/macros.h	46;"	d
LT_POS	vim/vim/src/macros.h	25;"	d
LT_POS	vim/vim/src/macros.h	38;"	d
LT_POSP	vim/vim/src/macros.h	30;"	d
LT_POSP	vim/vim/src/macros.h	40;"	d
LUAVIM_BUFFER	vim/vim/src/if_lua.c	/^static const char LUAVIM_BUFFER[] = "buffer";$/;"	v	file:
LUAVIM_CHUNKNAME	vim/vim/src/if_lua.c	22;"	d	file:
LUAVIM_DICT	vim/vim/src/if_lua.c	/^static const char LUAVIM_DICT[] = "dict";$/;"	v	file:
LUAVIM_EVALHEADER	vim/vim/src/if_lua.c	25;"	d	file:
LUAVIM_EVALNAME	vim/vim/src/if_lua.c	24;"	d	file:
LUAVIM_FREE	vim/vim/src/if_lua.c	/^static const char LUAVIM_FREE[] = "luaV_free";$/;"	v	file:
LUAVIM_LIST	vim/vim/src/if_lua.c	/^static const char LUAVIM_LIST[] = "list";$/;"	v	file:
LUAVIM_LUAEVAL	vim/vim/src/if_lua.c	/^static const char LUAVIM_LUAEVAL[] = "luaV_luaeval";$/;"	v	file:
LUAVIM_NAME	vim/vim/src/if_lua.c	23;"	d	file:
LUAVIM_SETREF	vim/vim/src/if_lua.c	/^static const char LUAVIM_SETREF[] = "luaV_setref";$/;"	v	file:
LUAVIM_WINDOW	vim/vim/src/if_lua.c	/^static const char LUAVIM_WINDOW[] = "window";$/;"	v	file:
LUA_CFLAGS	vim/vim/src/auto/config.mk	/^LUA_CFLAGS	= $/;"	m
LUA_INC	vim/vim/src/Make_mvc.mak	/^LUA_INC = \/I "$(LUA)\\include" \/I "$(LUA)"$/;"	m
LUA_LIB	vim/vim/src/Make_cyg_ming.mak	/^LUA_LIB = -L$(LUA)\/lib -llua$/;"	m
LUA_LIB	vim/vim/src/Make_mvc.mak	/^LUA_LIB = "$(LUA)\\lib\\lua$(LUA_VER).lib"$/;"	m
LUA_LIB	vim/vim/src/Make_mvc.mak	/^LUA_LIB = \/nodefaultlib:lua$(LUA_VER).lib$/;"	m
LUA_LIBS	vim/vim/src/auto/config.mk	/^LUA_LIBS	= $/;"	m
LUA_LIB_FLAG	vim/vim/src/Make_bc5.mak	/^LUA_LIB_FLAG = \/nodefaultlib:$/;"	m
LUA_OBJ	vim/vim/src/Make_mvc.mak	/^LUA_OBJ = $(OUTDIR)\\if_lua.obj$/;"	m
LUA_OBJ	vim/vim/src/auto/config.mk	/^LUA_OBJ		= $/;"	m
LUA_PRO	vim/vim/src/auto/config.mk	/^LUA_PRO		= $/;"	m
LUA_SRC	vim/vim/src/auto/config.mk	/^LUA_SRC		= $/;"	m
LUA_VER	vim/vim/src/Make_bc5.mak	/^LUA_VER = 51$/;"	m
LUA_VER	vim/vim/src/Make_cyg_ming.mak	/^LUA_VER=53$/;"	m
LUA_VER	vim/vim/src/Make_mvc.mak	/^LUA_VER = 53$/;"	m
L_MATCH	vim/vim/src/screen.c	6586;"	d	file:
L_NULL	vim/vim/src/hangulin.c	29;"	d	file:
L_SHOWFILE	vim/vim/src/ex_getln.c	4129;"	d	file:
Lab_IsMenupane	vim/vim/src/gui_xmebw.c	58;"	d	file:
LastActivity	vim/vim/src/gui_w32.c	/^static DWORD	    LastActivity = 0;$/;"	v	file:
Leave	vim/vim/src/gui_xmebw.c	/^Leave(Widget wid,$/;"	f	file:	signature:(Widget wid, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
Leave	vim/vim/src/gui_xmebw.c	/^static void Leave(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
Line	vim/vim/runtime/tools/ccfilter.c	/^char	       Line[LINELENGTH];$/;"	v
Line2	vim/vim/runtime/tools/ccfilter.c	/^char	       Line2[LINELENGTH];$/;"	v
LineOffset	vim/vim/src/globals.h	/^EXTERN unsigned	*LineOffset INIT(= NULL);$/;"	v
LineToString	vim/vim/src/if_py_both.h	/^static PyObject *LineToString(const char *);$/;"	p	signature:(const char *)
LineToString	vim/vim/src/if_python.c	/^LineToString(const char *str)$/;"	f	file:	signature:(const char *str)
LineToString	vim/vim/src/if_python3.c	/^LineToString(const char *str)$/;"	f	file:	signature:(const char *str)
LineWraps	vim/vim/src/globals.h	/^EXTERN char_u	*LineWraps INIT(= NULL);	\/* line wraps to next line *\/$/;"	v
ListAsMapping	vim/vim/src/if_py_both.h	/^static PyMappingMethods ListAsMapping = {$/;"	v
ListAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods ListAsSeq = {$/;"	v
ListAssIndex	vim/vim/src/if_py_both.h	/^ListAssIndex(ListObject *self, Py_ssize_t index, PyObject *obj)$/;"	f	signature:(ListObject *self, Py_ssize_t index, PyObject *obj)
ListAssItem	vim/vim/src/if_py_both.h	/^ListAssItem(ListObject *self, PyObject *idx, PyObject *obj)$/;"	f	signature:(ListObject *self, PyObject *idx, PyObject *obj)
ListAssSlice	vim/vim/src/if_py_both.h	/^ListAssSlice(ListObject *self, Py_ssize_t first,$/;"	f	signature:(ListObject *self, Py_ssize_t first, Py_ssize_t step, Py_ssize_t slicelen, PyObject *obj)
ListAttrs	vim/vim/src/if_py_both.h	/^static char *ListAttrs[] = {$/;"	v
ListConcatInPlace	vim/vim/src/if_py_both.h	/^ListConcatInPlace(ListObject *self, PyObject *obj)$/;"	f	signature:(ListObject *self, PyObject *obj)
ListConstructor	vim/vim/src/if_py_both.h	/^ListConstructor(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)$/;"	f	signature:(PyTypeObject *subtype, PyObject *args, PyObject *kwargs)
ListDestructor	vim/vim/src/if_py_both.h	/^ListDestructor(ListObject *self)$/;"	f	signature:(ListObject *self)
ListDir	vim/vim/src/if_py_both.h	/^ListDir(PyObject *self)$/;"	f	signature:(PyObject *self)
ListGetattr	vim/vim/src/if_python.c	/^ListGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
ListGetattr	vim/vim/src/if_python.c	/^static PyObject *ListGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
ListGetattro	vim/vim/src/if_python3.c	/^ListGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
ListGetattro	vim/vim/src/if_python3.c	/^static PyObject *ListGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
ListIndex	vim/vim/src/if_py_both.h	/^ListIndex(ListObject *self, Py_ssize_t index)$/;"	f	signature:(ListObject *self, Py_ssize_t index)
ListItem	vim/vim/src/if_py_both.h	/^ListItem(ListObject *self, PyObject* idx)$/;"	f	signature:(ListObject *self, PyObject* idx)
ListIter	vim/vim/src/if_py_both.h	/^ListIter(ListObject *self)$/;"	f	signature:(ListObject *self)
ListIterDestruct	vim/vim/src/if_py_both.h	/^ListIterDestruct(listiterinfo_T *lii)$/;"	f	signature:(listiterinfo_T *lii)
ListIterNext	vim/vim/src/if_py_both.h	/^ListIterNext(listiterinfo_T **lii)$/;"	f	signature:(listiterinfo_T **lii)
ListLength	vim/vim/src/if_py_both.h	/^ListLength(ListObject *self)$/;"	f	signature:(ListObject *self)
ListMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef ListMethods[] = {$/;"	v	typeref:struct:PyMethodDef
ListNew	vim/vim/src/if_py_both.h	/^ListNew(PyTypeObject *subtype, list_T *list)$/;"	f	signature:(PyTypeObject *subtype, list_T *list)
ListObject	vim/vim/src/if_py_both.h	/^} ListObject;$/;"	t	typeref:struct:__anon102
ListSetattr	vim/vim/src/if_py_both.h	/^ListSetattr(ListObject *self, char *name, PyObject *valObject)$/;"	f	signature:(ListObject *self, char *name, PyObject *valObject)
ListSetattro	vim/vim/src/if_python3.c	/^ListSetattro(PyObject *self, PyObject *nameobj, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj, PyObject *val)
ListSetattro	vim/vim/src/if_python3.c	/^static int ListSetattro(PyObject *, PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *, PyObject *)
ListSlice	vim/vim/src/if_py_both.h	/^ListSlice(ListObject *self, Py_ssize_t first, Py_ssize_t step,$/;"	f	signature:(ListObject *self, Py_ssize_t first, Py_ssize_t step, Py_ssize_t slicelen)
ListSpecifier	vim/vim/src/gui_xmdlg.c	/^enum ListSpecifier$/;"	g	file:
ListType	vim/vim/src/if_py_both.h	/^static PyTypeObject ListType;$/;"	v
LoadMenuIcon	vim/vim/src/GvimExt/gvimext.cpp	/^BOOL CShellExt::LoadMenuIcon()$/;"	f	class:CShellExt	signature:()
LoadXpmImage	vim/vim/src/xpm_w32.c	/^LoadXpmImage($/;"	f	signature:( char *filename, HBITMAP *hImage, HBITMAP *hShape)
LoadXpmImage	vim/vim/src/xpm_w32.h	/^int LoadXpmImage(char *filename, HBITMAP *hImage, HBITMAP *hShape);$/;"	p	signature:(char *filename, HBITMAP *hImage, HBITMAP *hShape)
LoaderDestructor	vim/vim/src/if_py_both.h	/^LoaderDestructor(LoaderObject *self)$/;"	f	signature:(LoaderObject *self)
LoaderLoadModule	vim/vim/src/if_py_both.h	/^LoaderLoadModule(LoaderObject *self, PyObject *args UNUSED)$/;"	f	signature:(LoaderObject *self, PyObject *args UNUSED)
LoaderMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef LoaderMethods[] = {$/;"	v	typeref:struct:PyMethodDef
LoaderObject	vim/vim/src/if_py_both.h	/^} LoaderObject;$/;"	t	typeref:struct:__anon97
LoaderType	vim/vim/src/if_py_both.h	/^static PyTypeObject LoaderType;$/;"	v
LockServer	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExtClassFactory::LockServer(BOOL  \/* fLock *\/)$/;"	f	class:CShellExtClassFactory	signature:(BOOL )
LockServer	vim/vim/src/if_ole.cpp	/^    STDMETHOD(LockServer)(BOOL lock);$/;"	p	class:FINAL	file:	access:public	signature:(BOOL lock)
LockServer	vim/vim/src/if_ole.cpp	/^CVimCF::LockServer(BOOL lock)$/;"	f	class:CVimCF	signature:(BOOL lock)
LookAhead	vim/vim/src/gui_at_sb.c	/^LookAhead(Widget w, XEvent *event)$/;"	f	file:	signature:(Widget w, XEvent *event)
LookupName	vim/vim/runtime/tools/xcmdsrv_client.c	/^LookupName($/;"	f	file:	signature:( Display *dpy, char *name, int delete, char **loose)
LookupName	vim/vim/runtime/tools/xcmdsrv_client.c	/^static Window	LookupName(Display *dpy, char *name,$/;"	p	file:	signature:(Display *dpy, char *name, int delete, char **loose)
LookupName	vim/vim/src/if_xcmdsrv.c	/^LookupName($/;"	f	file:	signature:( Display *dpy, char_u *name, int delete, char_u **loose)
LookupName	vim/vim/src/if_xcmdsrv.c	/^static Window	LookupName(Display *dpy, char_u *name, int delete, char_u **loose);$/;"	p	file:	signature:(Display *dpy, char_u *name, int delete, char_u **loose)
M	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
M	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
M	vim/vim/runtime/macros/maze/mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
M4FLAGSX	vim/vim/src/Makefile	/^M4FLAGSX = $(M4FLAGS) -DAPP_EXE=$(VIMNAME) -DAPP_NAME=$(VIMNAME) \\$/;"	m
MACOS	vim/vim/src/vim.h	103;"	d
MACOS_CLASSIC	vim/vim/src/vim.h	94;"	d
MACOS_CONVERT	vim/vim/src/vim.h	231;"	d
MACOS_X	vim/vim/src/vim.h	97;"	d
MACROSOURCE	vim/vim/src/Makefile	/^MACROSOURCE = ..\/runtime\/macros$/;"	m
MACROSUBDIR	vim/vim/src/Makefile	/^MACROSUBDIR = \/macros$/;"	m
MACROSUBLOC	vim/vim/src/Makefile	/^MACROSUBLOC	= $(VIMRTLOC)$(MACROSUBDIR)$/;"	m
MAD	vim/vim/src/farsi.h	158;"	d
MAD_N	vim/vim/src/farsi.h	161;"	d
MAGIC_ALL	vim/vim/src/regexp.c	628;"	d	file:
MAGIC_NONE	vim/vim/src/regexp.c	625;"	d	file:
MAGIC_OFF	vim/vim/src/regexp.c	626;"	d	file:
MAGIC_ON	vim/vim/src/regexp.c	627;"	d	file:
MAJOR	vim/vim/Makefile	/^MAJOR = 8$/;"	m
MAJORVER	vim/vim/src/if_ole.cpp	84;"	d	file:
MAKE	vim/vim/src/Make_bc5.mak	/^MAKE = $(BOR)\\bin\\make$/;"	m
MAKEFLAGS_GVIMEXT	vim/vim/src/Make_mvc.mak	/^MAKEFLAGS_GVIMEXT = $(MAKEFLAGS_GVIMEXT) CPUARG="$(CPUARG)"$/;"	m
MAKEFLAGS_GVIMEXT	vim/vim/src/Make_mvc.mak	/^MAKEFLAGS_GVIMEXT = DEBUG=yes$/;"	m
MAKEMO	vim/vim/src/auto/config.mk	/^MAKEMO		= yes$/;"	m
MAN1DIR	vim/vim/src/Makefile	/^MAN1DIR = \/man1$/;"	m
MAN3DIR	vim/vim/src/libvterm/Makefile	/^MAN3DIR=$(MANDIR)\/man3$/;"	m
MANDIR	vim/vim/src/auto/config.mk	/^MANDIR		= ${datarootdir}\/man$/;"	m
MANDIR	vim/vim/src/libvterm/Makefile	/^MANDIR=$(PREFIX)\/share\/man$/;"	m
MANMOD	vim/vim/src/Makefile	/^MANMOD = 644$/;"	m
MAP_ALL_MODES	vim/vim/src/vim.h	723;"	d
MAP_HASH	vim/vim/src/getchar.c	62;"	d	file:
MARGIN	vim/vim/src/gui_at_sb.c	233;"	d	file:
MATCH	vim/vim/src/regexp.c	165;"	d	file:
MAUTO	vim/vim/src/vim.h	1505;"	d
MAX	vim/vim/src/gui.h	26;"	d
MAX	vim/vim/src/gui_gtk.c	46;"	d	file:
MAX	vim/vim/src/integration.c	71;"	d	file:
MAX	vim/vim/src/terminal.c	77;"	d	file:
MAX	vim/vim/src/vim.h	2340;"	d
MAXCOL	vim/vim/src/vim.h	1720;"	d
MAXCOL	vim/vim/src/vim.h	1722;"	d
MAXCOL	vim/vim/src/vim.h	1725;"	d
MAXITEMCNT	vim/vim/src/spellfile.c	2204;"	d	file:
MAXKEYWLEN	vim/vim/src/syntax.c	198;"	d	file:
MAXLINELEN	vim/vim/src/spellfile.c	1780;"	d	file:
MAXLNUM	vim/vim/src/vim.h	1707;"	d
MAXMAPLEN	vim/vim/src/vim.h	1549;"	d
MAXMSGSIZE	vim/vim/src/channel.c	3006;"	d	file:
MAXNAMLEN	vim/vim/src/os_unix.h	141;"	d
MAXNAMLEN	vim/vim/src/os_unix.h	145;"	d
MAXNAMLEN	vim/vim/src/os_unix.h	149;"	d
MAXNAMLEN	vim/vim/src/os_unix.h	157;"	d
MAXPATHL	vim/vim/src/os_mac.h	230;"	d
MAXPATHL	vim/vim/src/os_unix.h	403;"	d
MAXPATHL	vim/vim/src/os_unix.h	405;"	d
MAXPATHL	vim/vim/src/os_win32.h	116;"	d
MAXPATHL	vim/vim/src/vim.h	329;"	d
MAXPOSMATCH	vim/vim/src/structs.h	2531;"	d
MAXSCORE	vim/vim/src/spell.c	72;"	d	file:
MAXSUFLEN	vim/vim/src/misc1.c	9806;"	d	file:
MAXWLEN	vim/vim/src/spell.h	32;"	d
MAXWORDCOUNT	vim/vim/src/spell.c	109;"	d	file:
MAX_ARG_CMDS	vim/vim/src/structs.h	3260;"	d
MAX_CHECK_ENDED	vim/vim/src/channel.c	4883;"	d	file:
MAX_CLSID_LEN	vim/vim/src/if_ole.cpp	92;"	d	file:
MAX_CLUSTER_ID	vim/vim/src/syntax.c	244;"	d	file:
MAX_COLOR_LENGTH	vim/vim/src/netbeans.c	41;"	d	file:
MAX_COLOR_STR_LEN	vim/vim/src/term.c	2810;"	d	file:
MAX_DISPLAY_SIZE	vim/vim/src/gui_xmdlg.c	86;"	d	file:
MAX_ENTRIES_IN_LIST	vim/vim/src/gui_xmdlg.c	85;"	d	file:
MAX_ENV_PATH_LEN	vim/vim/src/os_win32.c	336;"	d	file:
MAX_FONTS	vim/vim/src/gui_xmdlg.c	83;"	d	file:
MAX_FONT_NAME_LEN	vim/vim/src/gui_xmdlg.c	84;"	d	file:
MAX_FUNC_ARGS	vim/vim/src/structs.h	1384;"	d
MAX_HL_ID	vim/vim/src/syntax.c	74;"	d	file:
MAX_HWND	vim/vim/src/GvimExt/gvimext.h	108;"	d
MAX_KEY_CODE_LEN	vim/vim/src/keymap.h	503;"	d
MAX_KEY_NAME_LEN	vim/vim/src/keymap.h	493;"	d
MAX_LEVEL	vim/vim/src/fold.c	43;"	d	file:
MAX_LIMIT	vim/vim/src/regexp.c	345;"	d	file:
MAX_MCO	vim/vim/src/vim.h	1794;"	d
MAX_MSG_HIST_LEN	vim/vim/src/feature.h	125;"	d
MAX_MSG_HIST_LEN	vim/vim/src/feature.h	127;"	d
MAX_NAME_LENGTH	vim/vim/src/if_xcmdsrv.c	259;"	d	file:
MAX_OLE_STR	vim/vim/src/VisVim/OleAut.h	58;"	d
MAX_OLE_STR	vim/vim/src/VisVim/OleAut.h	69;"	d
MAX_OPEN_CHANNELS	vim/vim/src/vim.h	2447;"	d
MAX_OPEN_CHANNELS	vim/vim/src/vim.h	2449;"	d
MAX_PROP_WORDS	vim/vim/runtime/tools/xcmdsrv_client.c	65;"	d	file:
MAX_PROP_WORDS	vim/vim/src/if_xcmdsrv.c	160;"	d	file:
MAX_ROW	vim/vim/src/terminal.c	118;"	d	file:
MAX_SWAP_PAGE_SIZE	vim/vim/src/vim.h	1277;"	d
MAX_SYN_INC_TAG	vim/vim/src/syntax.c	243;"	d	file:
MAX_TYPENR	vim/vim/src/vim.h	440;"	d
MAX_TYPENR	vim/vim/src/vim.h	443;"	d
MAYBE	vim/vim/src/vim.h	1456;"	d
MAY_FORK	vim/vim/src/gui.c	41;"	d	file:
MAY_LOOP	vim/vim/src/os_unix.c	5723;"	d	file:
MBDEFINES	vim/vim/src/Make_bc5.mak	/^MBDEFINES = $(MBDEFINES) -DDYNAMIC_GETTEXT$/;"	m
MBDEFINES	vim/vim/src/Make_bc5.mak	/^MBDEFINES = $(MBDEFINES) -DDYNAMIC_ICONV$/;"	m
MBDEFINES	vim/vim/src/Make_bc5.mak	/^MBDEFINES = $(MBDEFINES) -DDYNAMIC_IME$/;"	m
MBDEFINES	vim/vim/src/Make_bc5.mak	/^MBDEFINES = $(MBDEFINES) -DFEAT_MBYTE$/;"	m
MBDEFINES	vim/vim/src/Make_bc5.mak	/^MBDEFINES = $(MBDEFINES) -DFEAT_MBYTE_IME$/;"	m
MBLOCK	vim/vim/src/vim.h	1503;"	d
MBYTE	vim/vim/src/Make_bc5.mak	/^MBYTE = yes$/;"	m
MBYTE	vim/vim/src/Make_cyg_ming.mak	/^MBYTE=yes$/;"	m
MBYTE	vim/vim/src/Make_mvc.mak	/^MBYTE = yes$/;"	m
MB_BYTE2LEN	vim/vim/src/vim.h	2230;"	d
MB_BYTE2LEN_CHECK	vim/vim/src/vim.h	2231;"	d
MB_CHAR2LEN	vim/vim/src/macros.h	289;"	d
MB_CHAR2LEN	vim/vim/src/macros.h	299;"	d
MB_CHARLEN	vim/vim/src/macros.h	288;"	d
MB_CHARLEN	vim/vim/src/macros.h	298;"	d
MB_COPY_CHAR	vim/vim/src/macros.h	287;"	d
MB_COPY_CHAR	vim/vim/src/macros.h	297;"	d
MB_CPTR2LEN	vim/vim/src/macros.h	285;"	d
MB_CPTR2LEN	vim/vim/src/macros.h	293;"	d
MB_CPTR_ADV	vim/vim/src/macros.h	281;"	d
MB_CPTR_ADV	vim/vim/src/macros.h	295;"	d
MB_FILLER_CHAR	vim/vim/src/screen.c	92;"	d	file:
MB_ISLOWER	vim/vim/src/macros.h	100;"	d
MB_ISLOWER	vim/vim/src/macros.h	105;"	d
MB_ISUPPER	vim/vim/src/macros.h	101;"	d
MB_ISUPPER	vim/vim/src/macros.h	106;"	d
MB_MAXBYTES	vim/vim/src/vim.h	1799;"	d
MB_MAXBYTES	vim/vim/src/vim.h	1801;"	d
MB_PTR2LEN	vim/vim/src/macros.h	277;"	d
MB_PTR2LEN	vim/vim/src/macros.h	292;"	d
MB_PTR_ADV	vim/vim/src/macros.h	279;"	d
MB_PTR_ADV	vim/vim/src/macros.h	294;"	d
MB_PTR_BACK	vim/vim/src/macros.h	283;"	d
MB_PTR_BACK	vim/vim/src/macros.h	296;"	d
MB_STRICMP	vim/vim/src/vim.h	1628;"	d
MB_STRICMP	vim/vim/src/vim.h	1631;"	d
MB_STRNICMP	vim/vim/src/vim.h	1629;"	d
MB_STRNICMP	vim/vim/src/vim.h	1632;"	d
MB_TOLOWER	vim/vim/src/macros.h	102;"	d
MB_TOLOWER	vim/vim/src/macros.h	107;"	d
MB_TOUPPER	vim/vim/src/macros.h	103;"	d
MB_TOUPPER	vim/vim/src/macros.h	108;"	d
MCHAR	vim/vim/src/vim.h	1501;"	d
MCH_CURSOR_SHAPE	vim/vim/src/feature.h	1188;"	d
MCLOSE	vim/vim/src/regexp.c	219;"	d	file:
MEMFILE_PAGE_SIZE	vim/vim/src/memfile.c	68;"	d	file:
MEMFILE_TEST_OBJ	vim/vim/src/Makefile	/^MEMFILE_TEST_OBJ = $(OBJ_COMMON) $(OBJ_MEMFILE_TEST)$/;"	m
MEMFILE_TEST_SRC	vim/vim/src/Makefile	/^MEMFILE_TEST_SRC = memfile_test.c$/;"	m
MEMFILE_TEST_TARGET	vim/vim/src/Makefile	/^MEMFILE_TEST_TARGET = memfile_test$(EXEEXT)$/;"	m
MEMORYTYPE	vim/vim/src/Make_sas.mak	/^MEMORYTYPE=ANY$/;"	m
MEMSIZE	vim/vim/src/Make_sas.mak	/^MEMSIZE=LARGE$/;"	m
MEM_SIZES	vim/vim/src/misc2.c	704;"	d	file:
MENUDEPTH	vim/vim/src/menu.c	19;"	d	file:
MENUHINTS	vim/vim/src/gui_w32.c	212;"	d	file:
MENU_ALL_MODES	vim/vim/src/structs.h	3034;"	d
MENU_CMDLINE_MODE	vim/vim/src/structs.h	3032;"	d
MENU_DEFAULT_HEIGHT	vim/vim/src/gui.h	127;"	d
MENU_INC	vim/vim/src/workshop.c	87;"	d	file:
MENU_INDEX_CMDLINE	vim/vim/src/structs.h	3022;"	d
MENU_INDEX_INSERT	vim/vim/src/structs.h	3021;"	d
MENU_INDEX_INVALID	vim/vim/src/structs.h	3016;"	d
MENU_INDEX_NORMAL	vim/vim/src/structs.h	3017;"	d
MENU_INDEX_OP_PENDING	vim/vim/src/structs.h	3020;"	d
MENU_INDEX_SELECT	vim/vim/src/structs.h	3019;"	d
MENU_INDEX_TIP	vim/vim/src/structs.h	3023;"	d
MENU_INDEX_VISUAL	vim/vim/src/structs.h	3018;"	d
MENU_INSERT_MODE	vim/vim/src/structs.h	3031;"	d
MENU_MODES	vim/vim/src/structs.h	3024;"	d
MENU_NORMAL_MODE	vim/vim/src/structs.h	3027;"	d
MENU_OP_PENDING_MODE	vim/vim/src/structs.h	3030;"	d
MENU_SELECT_MODE	vim/vim/src/structs.h	3029;"	d
MENU_TIP_MODE	vim/vim/src/structs.h	3033;"	d
MENU_VISUAL_MODE	vim/vim/src/structs.h	3028;"	d
MESSAGE_FILE	vim/vim/src/message.c	14;"	d	file:
MESSAGE_QUEUE	vim/vim/src/macros.h	330;"	d
MESSAGE_TEST_OBJ	vim/vim/src/Makefile	/^MESSAGE_TEST_OBJ = $(OBJ_COMMON) $(OBJ_MESSAGE_TEST)$/;"	m
MESSAGE_TEST_SRC	vim/vim/src/Makefile	/^MESSAGE_TEST_SRC = message_test.c$/;"	m
MESSAGE_TEST_TARGET	vim/vim/src/Makefile	/^MESSAGE_TEST_TARGET = message_test$(EXEEXT)$/;"	m
META	vim/vim/src/regexp.c	/^static char_u META[] = "%&()*+.123456789<=>?@ACDFHIKLMOPSUVWX[_acdfhiklmnopsuvwxz{|~";$/;"	v	file:
META_flags	vim/vim/src/regexp.c	/^static char_u META_flags[] = {$/;"	v	file:
ME_ARG_MISSING	vim/vim/src/main.c	82;"	d	file:
ME_EXTRA_CMD	vim/vim/src/main.c	86;"	d	file:
ME_GARBAGE	vim/vim/src/main.c	84;"	d	file:
ME_INVALID_ARG	vim/vim/src/main.c	88;"	d	file:
ME_TOO_MANY_ARGS	vim/vim/src/main.c	80;"	d	file:
ME_UNKNOWN_OPTION	vim/vim/src/main.c	78;"	d	file:
MFS_ALL	vim/vim/src/vim.h	1091;"	d
MFS_FLUSH	vim/vim/src/vim.h	1093;"	d
MFS_STOP	vim/vim/src/vim.h	1092;"	d
MFS_ZERO	vim/vim/src/vim.h	1094;"	d
MF_SEED_LEN	vim/vim/src/structs.h	593;"	d
MHT_GROWTH_FACTOR	vim/vim/src/memfile.c	1320;"	d	file:
MHT_INIT_SIZE	vim/vim/src/structs.h	444;"	d
MHT_LOG_LOAD_FACTOR	vim/vim/src/memfile.c	1319;"	d	file:
MIDL_user_allocate	vim/vim/src/if_ole.h	/^    void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);$/;"	p
MIDL_user_free	vim/vim/src/if_ole.h	/^    void __RPC_USER MIDL_user_free( void __RPC_FAR * );$/;"	p	signature:( void __RPC_FAR * )
MIM	vim/vim/src/farsi.h	138;"	d
MIN	vim/vim/src/fileio.c	3082;"	d	file:
MIN	vim/vim/src/gui.h	29;"	d
MIN	vim/vim/src/gui_gtk.c	43;"	d	file:
MIN	vim/vim/src/terminal.c	76;"	d	file:
MIN	vim/vim/src/vim.h	2343;"	d
MINGWOLD	vim/vim/src/GvimExt/Make_ming.mak	/^MINGWOLD = no$/;"	m
MINIMAL_SIZE	vim/vim/src/getchar.c	41;"	d	file:
MINOR	vim/vim/Makefile	/^MINOR = 0$/;"	m
MINORVER	vim/vim/src/if_ole.cpp	85;"	d	file:
MIN_COLUMNS	vim/vim/src/vim.h	1510;"	d
MIN_LINES	vim/vim/src/vim.h	1511;"	d
MIN_SPACE	vim/vim/src/edit.c	5207;"	d	file:
MIN_STACK_WINNT	vim/vim/src/os_win32.c	6751;"	d	file:
MIN_SWAP_PAGE_SIZE	vim/vim/src/vim.h	1276;"	d
MKD	vim/vim/src/po/Make_cyg.mak	/^MKD = mkdir -p$/;"	m
MKD	vim/vim/src/po/Make_ming.mak	/^MKD = mkdir$/;"	m
MKD	vim/vim/src/po/Make_mvc.mak	/^MKD = mkdir$/;"	m
MKDIR	vim/vim/src/Make_cyg_ming.mak	/^MKDIR = mkdir -p$/;"	m
MKDIR	vim/vim/src/Make_cyg_ming.mak	/^MKDIR = mkdir$/;"	m
MKDIR_P	vim/vim/src/Makefile	/^MKDIR_P = $(SHELL) install-sh -c -d$/;"	m
MKSESSION_NL	vim/vim/src/ex_docmd.c	9869;"	d	file:
MK_XBUTTON1	vim/vim/src/gui_w32.c	236;"	d	file:
MK_XBUTTON2	vim/vim/src/gui_w32.c	237;"	d	file:
MLCS_MAXL	vim/vim/src/memline.c	4910;"	d	file:
MLCS_MINL	vim/vim/src/memline.c	4911;"	d	file:
MLINE	vim/vim/src/vim.h	1502;"	d
ML_CHNK_ADDLINE	vim/vim/src/structs.h	650;"	d
ML_CHNK_DELLINE	vim/vim/src/structs.h	651;"	d
ML_CHNK_UPDLINE	vim/vim/src/structs.h	652;"	d
ML_DELETE	vim/vim/src/memline.c	224;"	d	file:
ML_EMPTY	vim/vim/src/structs.h	664;"	d
ML_EXTRA	vim/vim/src/tag.c	2286;"	d	file:
ML_FIND	vim/vim/src/memline.c	226;"	d	file:
ML_FLUSH	vim/vim/src/memline.c	227;"	d	file:
ML_INSERT	vim/vim/src/memline.c	225;"	d	file:
ML_LINE_DIRTY	vim/vim/src/structs.h	665;"	d
ML_LOCKED_DIRTY	vim/vim/src/structs.h	666;"	d
ML_LOCKED_POS	vim/vim/src/structs.h	667;"	d
ML_SIMPLE	vim/vim/src/memline.c	228;"	d	file:
MNU_HIDDEN_CHAR	vim/vim/src/structs.h	3038;"	d
MOCONVERTED	vim/vim/src/po/Makefile	/^MOCONVERTED = \\$/;"	m
MODBY_LEN	vim/vim/src/version.c	2899;"	d	file:
MODE_JS	vim/vim/src/structs.h	/^    MODE_JS$/;"	e	enum:__anon193
MODE_JSON	vim/vim/src/structs.h	/^    MODE_JSON,$/;"	e	enum:__anon193
MODE_NL	vim/vim/src/structs.h	/^    MODE_NL = 0,$/;"	e	enum:__anon193
MODE_RAW	vim/vim/src/structs.h	/^    MODE_RAW,$/;"	e	enum:__anon193
MODIFY	vim/vim/src/ex_cmds.h	57;"	d
MOD_KEYS_ENTRY_SIZE	vim/vim/src/misc2.c	2210;"	d	file:
MOD_MASK_2CLICK	vim/vim/src/keymap.h	479;"	d
MOD_MASK_3CLICK	vim/vim/src/keymap.h	480;"	d
MOD_MASK_4CLICK	vim/vim/src/keymap.h	481;"	d
MOD_MASK_ALT	vim/vim/src/keymap.h	477;"	d
MOD_MASK_CMD	vim/vim/src/keymap.h	483;"	d
MOD_MASK_CTRL	vim/vim/src/keymap.h	476;"	d
MOD_MASK_META	vim/vim/src/keymap.h	478;"	d
MOD_MASK_MULTI_CLICK	vim/vim/src/keymap.h	486;"	d
MOD_MASK_SHIFT	vim/vim/src/keymap.h	475;"	d
MOFILES	vim/vim/src/po/Make_cyg.mak	/^MOFILES = \\$/;"	m
MOFILES	vim/vim/src/po/Make_ming.mak	/^MOFILES = \\$/;"	m
MOFILES	vim/vim/src/po/Make_mvc.mak	/^MOFILES = \\$/;"	m
MOFILES	vim/vim/src/po/Makefile	/^MOFILES = \\$/;"	m
MOPEN	vim/vim/src/regexp.c	216;"	d	file:
MOTIF_BUNDLE	vim/vim/src/Makefile	/^MOTIF_BUNDLE	=$/;"	m
MOTIF_DEFS	vim/vim/src/Makefile	/^MOTIF_DEFS	= -DFEAT_GUI_MOTIF $(NARROW_PROTO)$/;"	m
MOTIF_INSTALL	vim/vim/src/Makefile	/^MOTIF_INSTALL   = install_normal install_gui_extra$/;"	m
MOTIF_IPATH	vim/vim/src/Makefile	/^MOTIF_IPATH	= $(GUI_INC_LOC)$/;"	m
MOTIF_LIBNAME	vim/vim/src/auto/config.mk	/^MOTIF_LIBNAME	= $/;"	m
MOTIF_LIBS1	vim/vim/src/Makefile	/^MOTIF_LIBS1	=$/;"	m
MOTIF_LIBS2	vim/vim/src/Makefile	/^MOTIF_LIBS2	= $(MOTIF_LIBNAME) -lXt$/;"	m
MOTIF_LIBS_DIR	vim/vim/src/Makefile	/^MOTIF_LIBS_DIR	= $(GUI_LIB_LOC)$/;"	m
MOTIF_MAN_TARGETS	vim/vim/src/Makefile	/^MOTIF_MAN_TARGETS = yes$/;"	m
MOTIF_OBJ	vim/vim/src/Makefile	/^MOTIF_OBJ	= objects\/gui.o objects\/gui_motif.o objects\/gui_x11.o \\$/;"	m
MOTIF_POPUP	vim/vim/src/gui_motif.c	59;"	d	file:
MOTIF_SRC	vim/vim/src/Makefile	/^MOTIF_SRC	= gui.c gui_motif.c gui_x11.c gui_beval.c \\$/;"	m
MOTIF_TARGETS	vim/vim/src/Makefile	/^MOTIF_TARGETS	= installglinks$/;"	m
MOTIF_TESTTARGET	vim/vim/src/Makefile	/^MOTIF_TESTTARGET = gui$/;"	m
MOUSEWHEEL_LOW	vim/vim/src/vim.h	1882;"	d
MOUSE_4	vim/vim/src/vim.h	1867;"	d
MOUSE_5	vim/vim/src/vim.h	1868;"	d
MOUSE_6	vim/vim/src/vim.h	1873;"	d
MOUSE_7	vim/vim/src/vim.h	1874;"	d
MOUSE_A	vim/vim/src/option.h	186;"	d
MOUSE_ALL	vim/vim/src/option.h	187;"	d
MOUSE_ALT	vim/vim/src/vim.h	1860;"	d
MOUSE_CLICK_MASK	vim/vim/src/vim.h	1884;"	d
MOUSE_COLOFF	vim/vim/src/vim.h	1895;"	d
MOUSE_COMMAND	vim/vim/src/option.h	183;"	d
MOUSE_CTRL	vim/vim/src/vim.h	1861;"	d
MOUSE_DID_MOVE	vim/vim/src/vim.h	1913;"	d
MOUSE_DRAG	vim/vim/src/vim.h	1879;"	d
MOUSE_DRAG_XTERM	vim/vim/src/vim.h	1877;"	d
MOUSE_EVENT_RECORD	vim/vim/src/os_mswin.c	/^typedef int MOUSE_EVENT_RECORD;$/;"	t	file:
MOUSE_EVENT_RECORD	vim/vim/src/os_win32.c	/^typedef int MOUSE_EVENT_RECORD;$/;"	t	file:
MOUSE_FOCUS	vim/vim/src/vim.h	1911;"	d
MOUSE_FOLD_CLOSE	vim/vim/src/vim.h	1907;"	d
MOUSE_FOLD_OPEN	vim/vim/src/vim.h	1908;"	d
MOUSE_HELP	vim/vim/src/option.h	184;"	d
MOUSE_HIDE	vim/vim/src/gui_photon.c	43;"	d	file:
MOUSE_INSERT	vim/vim/src/option.h	182;"	d
MOUSE_LEFT	vim/vim/src/vim.h	1853;"	d
MOUSE_MAY_STOP_VIS	vim/vim/src/vim.h	1915;"	d
MOUSE_MAY_VIS	vim/vim/src/vim.h	1912;"	d
MOUSE_MIDDLE	vim/vim/src/vim.h	1854;"	d
MOUSE_MOVED	vim/vim/src/os_mswin.c	68;"	d	file:
MOUSE_MOVED	vim/vim/src/os_win32.c	78;"	d	file:
MOUSE_NONE	vim/vim/src/option.h	188;"	d
MOUSE_NONEF	vim/vim/src/option.h	189;"	d
MOUSE_NORMAL	vim/vim/src/option.h	180;"	d
MOUSE_RELEASE	vim/vim/src/vim.h	1856;"	d
MOUSE_RELEASED	vim/vim/src/vim.h	1916;"	d
MOUSE_RETURN	vim/vim/src/option.h	185;"	d
MOUSE_RIGHT	vim/vim/src/vim.h	1855;"	d
MOUSE_RXVT	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
MOUSE_SETPOS	vim/vim/src/vim.h	1914;"	d
MOUSE_SGR	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
MOUSE_SHIFT	vim/vim/src/vim.h	1859;"	d
MOUSE_SHOW	vim/vim/src/gui_photon.c	44;"	d	file:
MOUSE_UTF8	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
MOUSE_VISUAL	vim/vim/src/option.h	181;"	d
MOUSE_WANT_CLICK	vim/vim/src/libvterm/src/vterm_internal.h	98;"	d
MOUSE_WANT_DRAG	vim/vim/src/libvterm/src/vterm_internal.h	99;"	d
MOUSE_WANT_MOVE	vim/vim/src/libvterm/src/vterm_internal.h	100;"	d
MOUSE_X1	vim/vim/src/vim.h	1870;"	d
MOUSE_X10	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
MOUSE_X2	vim/vim/src/vim.h	1871;"	d
MP	vim/vim/src/os_amiga.c	936;"	d	file:
MSCR_DOWN	vim/vim/src/vim.h	2403;"	d
MSCR_LEFT	vim/vim/src/vim.h	2405;"	d
MSCR_RIGHT	vim/vim/src/vim.h	2406;"	d
MSCR_UP	vim/vim/src/vim.h	2404;"	d
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) Align=$(ALIGNARG)$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) CHANNEL$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) CODEGUARD$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) CSCOPE$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) DEBUG$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) FASTCALL$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) GETTEXT$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) GUI$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) ICONV$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) IME$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) LUA$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) MBYTE$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) NETBEANS$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) OLE$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) PERL$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) PYTHON$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) PYTHON3$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) RUBY$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) TCL$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) USEDLL$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) VIMDLL$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) XPM$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG) cpu=$(CPUARG)$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = $(MSG)(dynamic)$/;"	m
MSG	vim/vim/src/Make_bc5.mak	/^MSG = Compiling $(OSTYPE) $(TARGET) $(OLETARGET), with:$/;"	m
MSG	vim/vim/src/gui_w32.c	/^typedef int MSG;$/;"	t	file:
MSG	vim/vim/src/gui_w32.c	274;"	d	file:
MSG	vim/vim/src/vim.h	1642;"	d
MSGFMT	vim/vim/src/auto/config.mk	/^MSGFMT		= msgfmt$/;"	m
MSGFMT	vim/vim/src/po/Make_cyg.mak	/^MSGFMT = OLD_PO_FILE_INPUT=yes $(GETTEXT_PATH)msgfmt -v$/;"	m
MSGFMT	vim/vim/src/po/Make_ming.mak	/^MSGFMT = set OLD_PO_FILE_INPUT=yes && $(GETTEXT_PATH)msgfmt -v$/;"	m
MSGFMT	vim/vim/src/po/Make_mvc.mak	/^MSGFMT = $(GETTEXT_PATH)\\msgfmt -v$/;"	m
MSGFMTCMD	vim/vim/src/po/Makefile	/^MSGFMTCMD = OLD_PO_FILE_INPUT=yes $(MSGFMT) -v$/;"	m
MSGMERGE	vim/vim/src/po/Make_cyg.mak	/^MSGMERGE = OLD_PO_FILE_INPUT=yes OLD_PO_FILE_OUTPUT=yes $(GETTEXT_PATH)msgmerge$/;"	m
MSGMERGE	vim/vim/src/po/Make_ming.mak	/^MSGMERGE = set OLD_PO_FILE_INPUT=yes && set OLD_PO_FILE_OUTPUT=yes && $(GETTEXT_PATH)msgmerge$/;"	m
MSGMERGE	vim/vim/src/po/Make_mvc.mak	/^MSGMERGE = $(GETTEXT_PATH)\\msgmerge$/;"	m
MSGMERGE	vim/vim/src/po/Makefile	/^MSGMERGE = OLD_PO_FILE_INPUT=yes OLD_PO_FILE_OUTPUT=yes msgmerge$/;"	m
MSG_ATTR	vim/vim/src/vim.h	1643;"	d
MSG_BUF_CLEN	vim/vim/src/vim.h	1530;"	d
MSG_BUF_CLEN	vim/vim/src/vim.h	1534;"	d
MSG_BUF_LEN	vim/vim/src/vim.h	1529;"	d
MSG_BUF_LEN	vim/vim/src/vim.h	1533;"	d
MSG_HIST	vim/vim/src/vim.h	686;"	d
MSG_PUTS	vim/vim/src/vim.h	1654;"	d
MSG_PUTS_ATTR	vim/vim/src/vim.h	1655;"	d
MSG_PUTS_LONG	vim/vim/src/vim.h	1657;"	d
MSG_PUTS_LONG_ATTR	vim/vim/src/vim.h	1658;"	d
MSG_PUTS_TITLE	vim/vim/src/vim.h	1656;"	d
MSHAPE_HIDE	vim/vim/src/structs.h	2993;"	d
MSHAPE_NUMBERED	vim/vim/src/structs.h	2992;"	d
MSVCRT_NAME	vim/vim/src/Make_mvc.mak	/^MSVCRT_NAME = msvcr$(MSVCRT_VER)$/;"	m
MSVCRT_NAME	vim/vim/src/Make_mvc.mak	/^MSVCRT_NAME = msvcrt$/;"	m
MSVCRT_NAME	vim/vim/src/Make_mvc.mak	/^MSVCRT_NAME = vcruntime$(MSVCRT_VER)$/;"	m
MSVCRT_VER	vim/vim/src/Make_mvc.mak	/^MSVCRT_VER = ($(MSVCVER) \/ 10 - 50)$/;"	m
MSVCRT_VER	vim/vim/src/Make_mvc.mak	/^MSVCRT_VER = ($(MSVCVER) \/ 10 - 60)$/;"	m
MSVCRT_VER	vim/vim/src/Make_mvc.mak	/^MSVCRT_VER = 140$/;"	m
MSVC_MAJOR	vim/vim/src/Make_mvc.mak	/^MSVC_MAJOR = ($(MSVCVER) \/ 100 - 5)$/;"	m
MSVC_MAJOR	vim/vim/src/Make_mvc.mak	/^MSVC_MAJOR = ($(MSVCVER) \/ 100 - 6)$/;"	m
MSVC_MAJOR	vim/vim/src/Make_mvc.mak	/^MSVC_MAJOR = 15$/;"	m
MSWIN	vim/vim/src/vim.h	142;"	d
MSWIN_FILE	vim/vim/src/Makefile	/^MSWIN_FILE	= $(DESTDIR)$(SCRIPTLOC)\/mswin.vim$/;"	m
MSWIN_FIND_REPLACE	vim/vim/src/feature.h	1155;"	d
MSWIN_FR_BUFSIZE	vim/vim/src/feature.h	1156;"	d
MTL_PROJ	vim/vim/src/VisVim/VisVim.mak	/^MTL_PROJ= \/D "_DEBUG"$/;"	m
MT_COUNT	vim/vim/src/tag.c	51;"	d	file:
MT_GL_CUR	vim/vim/src/tag.c	45;"	d	file:
MT_GL_OTH	vim/vim/src/tag.c	46;"	d	file:
MT_IC_OFF	vim/vim/src/tag.c	48;"	d	file:
MT_MASK	vim/vim/src/tag.c	50;"	d	file:
MT_RE_OFF	vim/vim/src/tag.c	49;"	d	file:
MT_ST_CUR	vim/vim/src/tag.c	44;"	d	file:
MT_ST_OTH	vim/vim/src/tag.c	47;"	d	file:
MULTIBYTECODE	vim/vim/src/regexp.c	236;"	d	file:
MULTISIGN_BYTE	vim/vim/src/vim.h	2287;"	d
MULTI_MULT	vim/vim/src/regexp.c	376;"	d	file:
MULTI_ONE	vim/vim/src/regexp.c	375;"	d	file:
MV	vim/vim/src/po/Make_cyg.mak	/^MV = mv -f$/;"	m
MV	vim/vim/src/po/Make_ming.mak	/^MV = move$/;"	m
MV	vim/vim/src/po/Make_mvc.mak	/^MV = move$/;"	m
MV	vim/vim/src/testdir/Make_ming.mak	/^MV = mv$/;"	m
MV	vim/vim/src/testdir/Make_ming.mak	/^MV = rename$/;"	m
MYCLSID	vim/vim/src/if_ole.cpp	80;"	d	file:
MYIID	vim/vim/src/if_ole.cpp	82;"	d	file:
MYINTPROCINT	vim/vim/src/os_mswin.c	/^typedef int (*MYINTPROCINT)(int);$/;"	t	file:
MYINTPROCSTR	vim/vim/src/os_mswin.c	/^typedef LPTSTR (*MYINTPROCSTR)(int);$/;"	t	file:
MYLIBID	vim/vim/src/if_ole.cpp	81;"	d	file:
MYNAME	vim/vim/src/if_ole.cpp	88;"	d	file:
MYPROGID	vim/vim/src/if_ole.cpp	89;"	d	file:
MYRESETSTKOFLW	vim/vim/src/os_win32.h	154;"	d
MYSTRPROCINT	vim/vim/src/os_mswin.c	/^typedef int (*MYSTRPROCINT)(LPTSTR);$/;"	t	file:
MYSTRPROCSTR	vim/vim/src/os_mswin.c	/^typedef LPTSTR (*MYSTRPROCSTR)(LPTSTR);$/;"	t	file:
MYVIPROGID	vim/vim/src/if_ole.cpp	90;"	d	file:
MY_BUFSIZE	vim/vim/src/os_mswin.c	1041;"	d	file:
MZSCHEME_CFLAGS	vim/vim/src/auto/config.mk	/^MZSCHEME_CFLAGS	= $/;"	m
MZSCHEME_COLLECTS	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_COLLECTS:=$(shell cygpath -m $(MZSCHEME_COLLECTS) | sed -e 's\/ \/\\\\ \/g')$/;"	m
MZSCHEME_COLLECTS	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_COLLECTS=$(MZSCHEME)\/collects$/;"	m
MZSCHEME_COLLECTS	vim/vim/src/Make_mvc.mak	/^MZSCHEME_COLLECTS=$(MZSCHEME)\\collects$/;"	m
MZSCHEME_DLLS	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_DLLS=$(MZSCHEME)$/;"	m
MZSCHEME_EXTRA	vim/vim/src/auto/config.mk	/^MZSCHEME_EXTRA	= $/;"	m
MZSCHEME_EXTRA_DEP	vim/vim/src/Make_mvc.mak	/^MZSCHEME_EXTRA_DEP = lib$(MZSCHEME_MAIN_LIB)$(MZSCHEME_VER).lib$/;"	m
MZSCHEME_GENERATE_BASE	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_GENERATE_BASE=no$/;"	m
MZSCHEME_GUI_THREADS	vim/vim/src/feature.h	1210;"	d
MZSCHEME_INCL	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_INCL = if_mzsch.h$/;"	m
MZSCHEME_LIB	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_LIB=-l$(MZSCHEME_MAIN_LIB)$(MZSCHEME_VER) -lmzgc$(MZSCHEME_VER)$/;"	m
MZSCHEME_LIB	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_LIB=-l$(MZSCHEME_MAIN_LIB)$(MZSCHEME_VER)$/;"	m
MZSCHEME_LIB	vim/vim/src/Make_mvc.mak	/^MZSCHEME_LIB = "$(MZSCHEME)\\lib\\msvc\\lib$(MZSCHEME_MAIN_LIB)$(MZSCHEME_VER).lib"$/;"	m
MZSCHEME_LIB	vim/vim/src/Make_mvc.mak	/^MZSCHEME_LIB = "$(MZSCHEME)\\lib\\msvc\\libmzgc$(MZSCHEME_VER).lib" \\$/;"	m
MZSCHEME_LIB	vim/vim/src/Make_mvc.mak	/^MZSCHEME_LIB = $(MZSCHEME_LIB) \/STACK:8388608$/;"	m
MZSCHEME_LIB	vim/vim/src/Make_mvc.mak	/^MZSCHEME_LIB = lib$(MZSCHEME_MAIN_LIB)$(MZSCHEME_VER).lib$/;"	m
MZSCHEME_LIBDIR	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_LIBDIR=-L$(MZSCHEME_DLLS) -L$(MZSCHEME_DLLS)\\lib$/;"	m
MZSCHEME_LIBS	vim/vim/src/auto/config.mk	/^MZSCHEME_LIBS	= $/;"	m
MZSCHEME_MAIN_LIB	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_MAIN_LIB=mzsch$/;"	m
MZSCHEME_MAIN_LIB	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_MAIN_LIB=racket$/;"	m
MZSCHEME_MAIN_LIB	vim/vim/src/Make_mvc.mak	/^MZSCHEME_MAIN_LIB=mzsch$/;"	m
MZSCHEME_MAIN_LIB	vim/vim/src/Make_mvc.mak	/^MZSCHEME_MAIN_LIB=racket$/;"	m
MZSCHEME_MZC	vim/vim/src/auto/config.mk	/^MZSCHEME_MZC	= $/;"	m
MZSCHEME_OBJ	vim/vim/src/Make_mvc.mak	/^MZSCHEME_OBJ = $(OUTDIR)\\if_mzsch.obj$/;"	m
MZSCHEME_OBJ	vim/vim/src/auto/config.mk	/^MZSCHEME_OBJ	= $/;"	m
MZSCHEME_PRECISE_GC	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_PRECISE_GC=no$/;"	m
MZSCHEME_PRECISE_GC	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_PRECISE_GC=yes$/;"	m
MZSCHEME_PRECISE_GC	vim/vim/src/Make_mvc.mak	/^MZSCHEME_PRECISE_GC = yes$/;"	m
MZSCHEME_PRO	vim/vim/src/auto/config.mk	/^MZSCHEME_PRO	= $/;"	m
MZSCHEME_SRC	vim/vim/src/auto/config.mk	/^MZSCHEME_SRC	= $/;"	m
MZSCHEME_SUFFIX	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_SUFFIX = Z$/;"	m
MZSCHEME_VER	vim/vim/src/Make_cyg_ming.mak	/^MZSCHEME_VER=3m_a0solc$/;"	m
MZSCHEME_VER	vim/vim/src/Make_mvc.mak	/^MZSCHEME_VER = 3m_a0solc$/;"	m
MZ_GC_ARRAY_VAR_IN_REG	vim/vim/src/if_mzsch.h	57;"	d
MZ_GC_CHECK	vim/vim/src/if_mzsch.h	71;"	d
MZ_GC_CHECK	vim/vim/src/if_mzsch.h	73;"	d
MZ_GC_DECL_REG	vim/vim/src/if_mzsch.h	51;"	d
MZ_GC_REG	vim/vim/src/if_mzsch.h	60;"	d
MZ_GC_UNREG	vim/vim/src/if_mzsch.h	63;"	d
MZ_GC_VAR_IN_REG	vim/vim/src/if_mzsch.h	54;"	d
M_NULL	vim/vim/src/hangulin.c	28;"	d	file:
M_delete	vim/vim/src/if_mzsch.c	/^static Scheme_Object *M_delete = NULL;$/;"	v	file:
M_execute	vim/vim/src/if_mzsch.c	/^static Scheme_Object *M_execute = NULL;$/;"	v	file:
M_global	vim/vim/src/if_mzsch.c	/^static Scheme_Object *M_global = NULL;$/;"	v	file:
M_read	vim/vim/src/if_mzsch.c	/^static Scheme_Object *M_read = NULL;$/;"	v	file:
M_write	vim/vim/src/if_mzsch.c	/^static Scheme_Object *M_write = NULL;$/;"	v	file:
MacOSHelpItems	vim/vim/src/gui.h	/^    int		MacOSHelpItems;	    \/* Nr of help-items supplied by MacOS *\/$/;"	m	struct:Gui	access:public
MacOSHelpMenu	vim/vim/src/gui.h	/^    MenuHandle	MacOSHelpMenu;	    \/* Help menu provided by the MacOS *\/$/;"	m	struct:Gui	access:public
Magic	vim/vim/src/regexp.c	254;"	d	file:
MenuMap	vim/vim/src/workshop.c	/^} MenuMap;$/;"	t	typeref:struct:__anon233	file:
Messaging_WndProc	vim/vim/src/os_mswin.c	/^Messaging_WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	file:	signature:(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
Meta	vim/vim/src/ascii.h	41;"	d
MetaChar	vim/vim/src/ascii.h	162;"	d
MetaCharTable	vim/vim/src/os_unix.c	/^char MetaCharTable[]=$/;"	v
Method	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Method (DISPID DispatchId, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(DISPID DispatchId, LPCTSTR Format, ...)
Method	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::Method (char* Name, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(char* Name, LPCTSTR Format, ...)
ModificationInfo	vim/vim/src/gui_mac.c	/^struct ModificationInfo \/* for replying to class 'KAHL', event 'MOD ', keyDirectObject typeAEList*\/$/;"	s	file:
ModificationInfo	vim/vim/src/gui_mac.c	/^typedef struct ModificationInfo ModificationInfo;$/;"	t	typeref:struct:ModificationInfo	file:
ModificationInfo::saved	vim/vim/src/gui_mac.c	/^    short saved; \/\/ set this to zero when replying, unused$/;"	m	struct:ModificationInfo	file:	access:public
ModificationInfo::theDate	vim/vim/src/gui_mac.c	/^    long theDate; \/\/ the date\/time the file was last modified$/;"	m	struct:ModificationInfo	file:	access:public
ModificationInfo::theFile	vim/vim/src/gui_mac.c	/^    FSSpec theFile; \/\/ identifies the file$/;"	m	struct:ModificationInfo	file:	access:public
MoveRectTo	vim/vim/src/gui_mac.c	5310;"	d	file:
MoveThumb	vim/vim/src/gui_at_sb.c	/^MoveThumb($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
MoveThumb	vim/vim/src/gui_at_sb.c	/^static void MoveThumb(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
MultiByteToWideChar_alloc	vim/vim/src/winclip.c	/^MultiByteToWideChar_alloc(UINT cp, DWORD flags,$/;"	f	signature:(UINT cp, DWORD flags, LPCSTR in, int inlen, LPWSTR *out, int *outlen)
MyTranslateMessage	vim/vim/src/gui_w32.c	367;"	d	file:
MyTranslateMessage	vim/vim/src/gui_w32.c	369;"	d	file:
MyWindowProc	vim/vim/src/gui_w32.c	374;"	d	file:
MyWindowProc	vim/vim/src/gui_w32.c	377;"	d	file:
NALPHA	vim/vim/src/regexp.c	208;"	d	file:
NAME	vim/vim/src/gui_xmdlg.c	/^    NAME,$/;"	e	enum:ListSpecifier	file:
NAMESPACE_CHAR	vim/vim/src/eval.c	35;"	d	file:
NAMLEN	vim/vim/src/os_unix.h	114;"	d
NAMLEN	vim/vim/src/os_unix.h	118;"	d
NAN	vim/vim/src/macros.h	365;"	d
NARROW_PROTO	vim/vim/src/auto/config.mk	/^NARROW_PROTO	= $/;"	m
NBDEBUG	vim/vim/src/vim.h	2318;"	d
NBDEBUG_DEFS	vim/vim/src/Make_mvc.mak	/^NBDEBUG_DEFS	= -DNBDEBUG$/;"	m
NBDEBUG_DEP	vim/vim/src/Make_bc5.mak	/^NBDEBUG_DEP = nbdebug.h nbdebug.c$/;"	m
NBDEBUG_H	vim/vim/src/nbdebug.h	12;"	d
NBDEBUG_INCL	vim/vim/src/Make_cyg_ming.mak	/^NBDEBUG_INCL = nbdebug.h$/;"	m
NBDEBUG_INCL	vim/vim/src/Make_mvc.mak	/^NBDEBUG_INCL	= nbdebug.h$/;"	m
NBDEBUG_SRC	vim/vim/src/Make_cyg_ming.mak	/^NBDEBUG_SRC = nbdebug.c$/;"	m
NBDEBUG_SRC	vim/vim/src/Make_mvc.mak	/^NBDEBUG_SRC	= nbdebug.c$/;"	m
NBDEBUG_TRACE	vim/vim/src/nbdebug.h	36;"	d
NBDLEVEL	vim/vim/src/nbdebug.h	34;"	d
NB_DEBUG_ALL	vim/vim/src/nbdebug.h	32;"	d
NB_DEF_ADDR	vim/vim/src/netbeans.c	135;"	d	file:
NB_DEF_HOST	vim/vim/src/netbeans.c	134;"	d	file:
NB_DEF_PASS	vim/vim/src/netbeans.c	136;"	d	file:
NB_PRINT	vim/vim/src/nbdebug.h	31;"	d
NB_TRACE	vim/vim/src/nbdebug.h	28;"	d
NB_TRACE_COLONCMD	vim/vim/src/nbdebug.h	30;"	d
NB_TRACE_VERBOSE	vim/vim/src/nbdebug.h	29;"	d
NCLOSE	vim/vim/src/regexp.c	234;"	d	file:
NDEBUG	vim/vim/src/json_test.c	14;"	d	file:
NDEBUG	vim/vim/src/kword_test.c	14;"	d	file:
NDEBUG	vim/vim/src/memfile_test.c	15;"	d	file:
NDEBUG	vim/vim/src/message_test.c	14;"	d	file:
NDIGIT	vim/vim/src/regexp.c	198;"	d	file:
NEAR	vim/vim/src/gui_w32.c	249;"	d	file:
NEEDARG	vim/vim/src/ex_cmds.h	41;"	d
NEED_GUI_UPDATE_SCREEN	vim/vim/src/gui.c	801;"	d	file:
NEED_STRCASECMP	vim/vim/src/xpm/include/xpm.h	71;"	d
NETBEANS	vim/vim/src/Make_bc5.mak	/^NETBEANS = no$/;"	m
NETBEANS	vim/vim/src/Make_bc5.mak	/^NETBEANS = yes$/;"	m
NETBEANS	vim/vim/src/Make_cyg_ming.mak	/^NETBEANS=$(GUI)$/;"	m
NETBEANS	vim/vim/src/Make_cyg_ming.mak	/^NETBEANS=no$/;"	m
NETBEANS	vim/vim/src/Make_mvc.mak	/^NETBEANS = $(GUI)$/;"	m
NETBEANS_DEFS	vim/vim/src/Make_mvc.mak	/^NETBEANS_DEFS	= -DFEAT_NETBEANS_INTG$/;"	m
NETBEANS_LIB	vim/vim/src/Make_mvc.mak	/^NETBEANS_LIB	= WSock32.lib$/;"	m
NETBEANS_OBJ	vim/vim/src/Make_mvc.mak	/^NETBEANS_OBJ	= $(OBJDIR)\/netbeans.obj$/;"	m
NETBEANS_OBJ	vim/vim/src/auto/config.mk	/^NETBEANS_OBJ	= objects\/netbeans.o$/;"	m
NETBEANS_OPEN	vim/vim/src/netbeans.c	66;"	d	file:
NETBEANS_PRO	vim/vim/src/Make_mvc.mak	/^NETBEANS_PRO	= proto\/netbeans.pro$/;"	m
NETBEANS_SRC	vim/vim/src/auto/config.mk	/^NETBEANS_SRC	= netbeans.c$/;"	m
NEWL	vim/vim/src/regexp.c	176;"	d	file:
NEWTEXTMETRIC	vim/vim/src/gui_w32.c	/^typedef int NEWTEXTMETRIC;$/;"	t	file:
NEWTEXTMETRIC	vim/vim/src/os_mswin.c	/^typedef int NEWTEXTMETRIC;$/;"	t	file:
NEW_DICTIONARY	vim/vim/src/if_py_both.h	1486;"	d
NEW_FUNCTION	vim/vim/src/if_py_both.h	2843;"	d
NEW_LIST	vim/vim/src/if_py_both.h	2170;"	d
NEW_TESTS	vim/vim/src/testdir/Make_all.mak	/^NEW_TESTS = test_arabic.res \\$/;"	m
NEXT	vim/vim/src/regexp.c	320;"	d	file:
NEXTAW_BUNDLE	vim/vim/src/Makefile	/^NEXTAW_BUNDLE	=$/;"	m
NEXTAW_DEFS	vim/vim/src/Makefile	/^NEXTAW_DEFS	= -DFEAT_GUI_ATHENA -DFEAT_GUI_NEXTAW $(NARROW_PROTO)$/;"	m
NEXTAW_INSTALL	vim/vim/src/Makefile	/^NEXTAW_INSTALL  =  install_normal install_gui_extra$/;"	m
NEXTAW_IPATH	vim/vim/src/Makefile	/^NEXTAW_IPATH	= $(GUI_INC_LOC)$/;"	m
NEXTAW_LIB	vim/vim/src/Makefile	/^NEXTAW_LIB = -lneXtaw$/;"	m
NEXTAW_LIBS1	vim/vim/src/Makefile	/^NEXTAW_LIBS1	= $(NEXTAW_LIB)$/;"	m
NEXTAW_LIBS2	vim/vim/src/Makefile	/^NEXTAW_LIBS2	= -lXt$/;"	m
NEXTAW_LIBS_DIR	vim/vim/src/Makefile	/^NEXTAW_LIBS_DIR = $(GUI_LIB_LOC)$/;"	m
NEXTAW_MAN_TARGETS	vim/vim/src/Makefile	/^NEXTAW_MAN_TARGETS = yes$/;"	m
NEXTAW_OBJ	vim/vim/src/Makefile	/^NEXTAW_OBJ	= objects\/gui.o objects\/gui_athena.o objects\/gui_x11.o \\$/;"	m
NEXTAW_SRC	vim/vim/src/Makefile	/^NEXTAW_SRC	= gui.c gui_athena.c gui_x11.c gui_beval.c gui_at_fs.c$/;"	m
NEXTAW_TARGETS	vim/vim/src/Makefile	/^NEXTAW_TARGETS	=  installglinks$/;"	m
NEXTAW_TESTTARGET	vim/vim/src/Makefile	/^NEXTAW_TESTTARGET = gui$/;"	m
NFA_ADD_NL	vim/vim/src/regexp_nfa.c	33;"	d	file:
NFA_ALPHA	vim/vim/src/regexp_nfa.c	/^    NFA_ALPHA,		\/*	Match alpha char *\/$/;"	e	enum:__anon115	file:
NFA_ANY	vim/vim/src/regexp_nfa.c	/^    NFA_ANY,		\/*	Match any one character. *\/$/;"	e	enum:__anon115	file:
NFA_ANY_COMPOSING	vim/vim/src/regexp_nfa.c	/^    NFA_ANY_COMPOSING,		    \/* \\%C: Any composing characters. *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF1	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF1,		    \/* \\1 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF2	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF2,		    \/* \\2 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF3	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF3,		    \/* \\3 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF4	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF4,		    \/* \\4 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF5	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF5,		    \/* \\5 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF6	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF6,		    \/* \\6 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF7	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF7,		    \/* \\7 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF8	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF8,		    \/* \\8 *\/$/;"	e	enum:__anon115	file:
NFA_BACKREF9	vim/vim/src/regexp_nfa.c	/^    NFA_BACKREF9,		    \/* \\9 *\/$/;"	e	enum:__anon115	file:
NFA_BOF	vim/vim/src/regexp_nfa.c	/^    NFA_BOF,			    \/* \\%^  Begin file *\/$/;"	e	enum:__anon115	file:
NFA_BOL	vim/vim/src/regexp_nfa.c	/^    NFA_BOL,			    \/* ^    Begin line *\/$/;"	e	enum:__anon115	file:
NFA_BOW	vim/vim/src/regexp_nfa.c	/^    NFA_BOW,			    \/* \\<   Begin word *\/$/;"	e	enum:__anon115	file:
NFA_CLASS_ALNUM	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_ALNUM,$/;"	e	enum:__anon115	file:
NFA_CLASS_ALPHA	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_ALPHA,$/;"	e	enum:__anon115	file:
NFA_CLASS_BACKSPACE	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_BACKSPACE,$/;"	e	enum:__anon115	file:
NFA_CLASS_BLANK	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_BLANK,$/;"	e	enum:__anon115	file:
NFA_CLASS_CNTRL	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_CNTRL,$/;"	e	enum:__anon115	file:
NFA_CLASS_DIGIT	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_DIGIT,$/;"	e	enum:__anon115	file:
NFA_CLASS_ESCAPE	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_ESCAPE$/;"	e	enum:__anon115	file:
NFA_CLASS_GRAPH	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_GRAPH,$/;"	e	enum:__anon115	file:
NFA_CLASS_LOWER	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_LOWER,$/;"	e	enum:__anon115	file:
NFA_CLASS_PRINT	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_PRINT,$/;"	e	enum:__anon115	file:
NFA_CLASS_PUNCT	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_PUNCT,$/;"	e	enum:__anon115	file:
NFA_CLASS_RETURN	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_RETURN,$/;"	e	enum:__anon115	file:
NFA_CLASS_SPACE	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_SPACE,$/;"	e	enum:__anon115	file:
NFA_CLASS_TAB	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_TAB,$/;"	e	enum:__anon115	file:
NFA_CLASS_UPPER	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_UPPER,$/;"	e	enum:__anon115	file:
NFA_CLASS_XDIGIT	vim/vim/src/regexp_nfa.c	/^    NFA_CLASS_XDIGIT,$/;"	e	enum:__anon115	file:
NFA_COL	vim/vim/src/regexp_nfa.c	/^    NFA_COL,		\/*	Match cursor column *\/$/;"	e	enum:__anon115	file:
NFA_COL_GT	vim/vim/src/regexp_nfa.c	/^    NFA_COL_GT,		\/*	Match > cursor column *\/$/;"	e	enum:__anon115	file:
NFA_COL_LT	vim/vim/src/regexp_nfa.c	/^    NFA_COL_LT,		\/*	Match < cursor column *\/$/;"	e	enum:__anon115	file:
NFA_COMPOSING	vim/vim/src/regexp_nfa.c	/^    NFA_COMPOSING,		    \/* Next nodes in NFA are part of the$/;"	e	enum:__anon115	file:
NFA_CONCAT	vim/vim/src/regexp_nfa.c	/^    NFA_CONCAT,			    \/* concatenate two previous items (postfix$/;"	e	enum:__anon115	file:
NFA_CURSOR	vim/vim/src/regexp_nfa.c	/^    NFA_CURSOR,		\/*	Match cursor pos *\/$/;"	e	enum:__anon115	file:
NFA_DIGIT	vim/vim/src/regexp_nfa.c	/^    NFA_DIGIT,		\/*	Match digit char *\/$/;"	e	enum:__anon115	file:
NFA_EMPTY	vim/vim/src/regexp_nfa.c	/^    NFA_EMPTY,			    \/* matches 0-length *\/$/;"	e	enum:__anon115	file:
NFA_END_COLL	vim/vim/src/regexp_nfa.c	/^    NFA_END_COLL,		    \/* [abc] end *\/$/;"	e	enum:__anon115	file:
NFA_END_COMPOSING	vim/vim/src/regexp_nfa.c	/^    NFA_END_COMPOSING,		    \/* End of a composing char in the NFA *\/$/;"	e	enum:__anon115	file:
NFA_END_INVISIBLE	vim/vim/src/regexp_nfa.c	/^    NFA_END_INVISIBLE,$/;"	e	enum:__anon115	file:
NFA_END_INVISIBLE_NEG	vim/vim/src/regexp_nfa.c	/^    NFA_END_INVISIBLE_NEG,$/;"	e	enum:__anon115	file:
NFA_END_NEG_COLL	vim/vim/src/regexp_nfa.c	/^    NFA_END_NEG_COLL,		    \/* [^abc] end (postfix only) *\/$/;"	e	enum:__anon115	file:
NFA_END_PATTERN	vim/vim/src/regexp_nfa.c	/^    NFA_END_PATTERN,$/;"	e	enum:__anon115	file:
NFA_ENGINE	vim/vim/src/regexp.h	40;"	d
NFA_EOF	vim/vim/src/regexp_nfa.c	/^    NFA_EOF,			    \/* \\%$  End file *\/$/;"	e	enum:__anon115	file:
NFA_EOL	vim/vim/src/regexp_nfa.c	/^    NFA_EOL,			    \/* $    End line *\/$/;"	e	enum:__anon115	file:
NFA_EOW	vim/vim/src/regexp_nfa.c	/^    NFA_EOW,			    \/* \\>   End word *\/$/;"	e	enum:__anon115	file:
NFA_FIRST_NL	vim/vim/src/regexp_nfa.c	/^    NFA_FIRST_NL = NFA_ANY + NFA_ADD_NL,$/;"	e	enum:__anon115	file:
NFA_FNAME	vim/vim/src/regexp_nfa.c	/^    NFA_FNAME,		\/*	Match file name char *\/$/;"	e	enum:__anon115	file:
NFA_HEAD	vim/vim/src/regexp_nfa.c	/^    NFA_HEAD,		\/*	Match head char *\/$/;"	e	enum:__anon115	file:
NFA_HEX	vim/vim/src/regexp_nfa.c	/^    NFA_HEX,		\/*	Match hex char *\/$/;"	e	enum:__anon115	file:
NFA_IDENT	vim/vim/src/regexp_nfa.c	/^    NFA_IDENT,		\/*	Match identifier char *\/$/;"	e	enum:__anon115	file:
NFA_KWORD	vim/vim/src/regexp_nfa.c	/^    NFA_KWORD,		\/*	Match keyword char *\/$/;"	e	enum:__anon115	file:
NFA_LAST_NL	vim/vim/src/regexp_nfa.c	/^    NFA_LAST_NL = NFA_NUPPER_IC + NFA_ADD_NL,$/;"	e	enum:__anon115	file:
NFA_LNUM	vim/vim/src/regexp_nfa.c	/^    NFA_LNUM,		\/*	Match line number *\/$/;"	e	enum:__anon115	file:
NFA_LNUM_GT	vim/vim/src/regexp_nfa.c	/^    NFA_LNUM_GT,	\/*	Match > line number *\/$/;"	e	enum:__anon115	file:
NFA_LNUM_LT	vim/vim/src/regexp_nfa.c	/^    NFA_LNUM_LT,	\/*	Match < line number *\/$/;"	e	enum:__anon115	file:
NFA_LOWER	vim/vim/src/regexp_nfa.c	/^    NFA_LOWER,		\/*	Match lowercase char *\/$/;"	e	enum:__anon115	file:
NFA_LOWER_IC	vim/vim/src/regexp_nfa.c	/^    NFA_LOWER_IC,	\/*	Match [a-z] *\/$/;"	e	enum:__anon115	file:
NFA_MARK	vim/vim/src/regexp_nfa.c	/^    NFA_MARK,		\/*	Match mark *\/$/;"	e	enum:__anon115	file:
NFA_MARK_GT	vim/vim/src/regexp_nfa.c	/^    NFA_MARK_GT,	\/*	Match > mark *\/$/;"	e	enum:__anon115	file:
NFA_MARK_LT	vim/vim/src/regexp_nfa.c	/^    NFA_MARK_LT,	\/*	Match < mark *\/$/;"	e	enum:__anon115	file:
NFA_MATCH	vim/vim/src/regexp_nfa.c	/^    NFA_MATCH,$/;"	e	enum:__anon115	file:
NFA_MAX_BRACES	vim/vim/src/regexp.h	28;"	d
NFA_MAX_STATES	vim/vim/src/regexp.h	33;"	d
NFA_MCLOSE	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE,$/;"	e	enum:__anon115	file:
NFA_MCLOSE1	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE1,$/;"	e	enum:__anon115	file:
NFA_MCLOSE2	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE2,$/;"	e	enum:__anon115	file:
NFA_MCLOSE3	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE3,$/;"	e	enum:__anon115	file:
NFA_MCLOSE4	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE4,$/;"	e	enum:__anon115	file:
NFA_MCLOSE5	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE5,$/;"	e	enum:__anon115	file:
NFA_MCLOSE6	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE6,$/;"	e	enum:__anon115	file:
NFA_MCLOSE7	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE7,$/;"	e	enum:__anon115	file:
NFA_MCLOSE8	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE8,$/;"	e	enum:__anon115	file:
NFA_MCLOSE9	vim/vim/src/regexp_nfa.c	/^    NFA_MCLOSE9,$/;"	e	enum:__anon115	file:
NFA_MOPEN	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN,$/;"	e	enum:__anon115	file:
NFA_MOPEN1	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN1,$/;"	e	enum:__anon115	file:
NFA_MOPEN2	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN2,$/;"	e	enum:__anon115	file:
NFA_MOPEN3	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN3,$/;"	e	enum:__anon115	file:
NFA_MOPEN4	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN4,$/;"	e	enum:__anon115	file:
NFA_MOPEN5	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN5,$/;"	e	enum:__anon115	file:
NFA_MOPEN6	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN6,$/;"	e	enum:__anon115	file:
NFA_MOPEN7	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN7,$/;"	e	enum:__anon115	file:
NFA_MOPEN8	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN8,$/;"	e	enum:__anon115	file:
NFA_MOPEN9	vim/vim/src/regexp_nfa.c	/^    NFA_MOPEN9,$/;"	e	enum:__anon115	file:
NFA_NALPHA	vim/vim/src/regexp_nfa.c	/^    NFA_NALPHA,		\/*	Match non-alpha char *\/$/;"	e	enum:__anon115	file:
NFA_NCLOSE	vim/vim/src/regexp_nfa.c	/^    NFA_NCLOSE,			    \/* End of subexpr. marked with \\%( ... \\) *\/$/;"	e	enum:__anon115	file:
NFA_NDIGIT	vim/vim/src/regexp_nfa.c	/^    NFA_NDIGIT,		\/*	Match non-digit char *\/$/;"	e	enum:__anon115	file:
NFA_NEWL	vim/vim/src/regexp_nfa.c	/^    NFA_NEWL,$/;"	e	enum:__anon115	file:
NFA_NHEAD	vim/vim/src/regexp_nfa.c	/^    NFA_NHEAD,		\/*	Match non-head char *\/$/;"	e	enum:__anon115	file:
NFA_NHEX	vim/vim/src/regexp_nfa.c	/^    NFA_NHEX,		\/*	Match non-hex char *\/$/;"	e	enum:__anon115	file:
NFA_NLOWER	vim/vim/src/regexp_nfa.c	/^    NFA_NLOWER,		\/*	Match non-lowercase char *\/$/;"	e	enum:__anon115	file:
NFA_NLOWER_IC	vim/vim/src/regexp_nfa.c	/^    NFA_NLOWER_IC,	\/*	Match [^a-z] *\/$/;"	e	enum:__anon115	file:
NFA_NOCTAL	vim/vim/src/regexp_nfa.c	/^    NFA_NOCTAL,		\/*	Match non-octal char *\/$/;"	e	enum:__anon115	file:
NFA_NOPEN	vim/vim/src/regexp_nfa.c	/^    NFA_NOPEN,			    \/* Start of subexpression marked with \\%( *\/$/;"	e	enum:__anon115	file:
NFA_NUPPER	vim/vim/src/regexp_nfa.c	/^    NFA_NUPPER,		\/*	Match non-uppercase char *\/$/;"	e	enum:__anon115	file:
NFA_NUPPER_IC	vim/vim/src/regexp_nfa.c	/^    NFA_NUPPER_IC,	\/*	Match [^A-Z] *\/$/;"	e	enum:__anon115	file:
NFA_NWHITE	vim/vim/src/regexp_nfa.c	/^    NFA_NWHITE,		\/*	Match non-whitespace char *\/$/;"	e	enum:__anon115	file:
NFA_NWORD	vim/vim/src/regexp_nfa.c	/^    NFA_NWORD,		\/*	Match non-word char *\/$/;"	e	enum:__anon115	file:
NFA_OCTAL	vim/vim/src/regexp_nfa.c	/^    NFA_OCTAL,		\/*	Match octal char *\/$/;"	e	enum:__anon115	file:
NFA_OPT_CHARS	vim/vim/src/regexp_nfa.c	/^    NFA_OPT_CHARS,		    \/* \\%[abc] *\/$/;"	e	enum:__anon115	file:
NFA_OR	vim/vim/src/regexp_nfa.c	/^    NFA_OR,			    \/* \\| (postfix only) *\/$/;"	e	enum:__anon115	file:
NFA_PIM_MATCH	vim/vim/src/regexp_nfa.c	3883;"	d	file:
NFA_PIM_NOMATCH	vim/vim/src/regexp_nfa.c	3884;"	d	file:
NFA_PIM_TODO	vim/vim/src/regexp_nfa.c	3882;"	d	file:
NFA_PIM_UNUSED	vim/vim/src/regexp_nfa.c	3881;"	d	file:
NFA_PREV_ATOM_JUST_BEFORE	vim/vim/src/regexp_nfa.c	/^    NFA_PREV_ATOM_JUST_BEFORE,	    \/* Used for \\@<= *\/$/;"	e	enum:__anon115	file:
NFA_PREV_ATOM_JUST_BEFORE_NEG	vim/vim/src/regexp_nfa.c	/^    NFA_PREV_ATOM_JUST_BEFORE_NEG,  \/* Used for \\@<! *\/$/;"	e	enum:__anon115	file:
NFA_PREV_ATOM_LIKE_PATTERN	vim/vim/src/regexp_nfa.c	/^    NFA_PREV_ATOM_LIKE_PATTERN,	    \/* Used for \\@> *\/$/;"	e	enum:__anon115	file:
NFA_PREV_ATOM_NO_WIDTH	vim/vim/src/regexp_nfa.c	/^    NFA_PREV_ATOM_NO_WIDTH,	    \/* Used for \\@= *\/$/;"	e	enum:__anon115	file:
NFA_PREV_ATOM_NO_WIDTH_NEG	vim/vim/src/regexp_nfa.c	/^    NFA_PREV_ATOM_NO_WIDTH_NEG,	    \/* Used for \\@! *\/$/;"	e	enum:__anon115	file:
NFA_PRINT	vim/vim/src/regexp_nfa.c	/^    NFA_PRINT,		\/*	Match printable char *\/$/;"	e	enum:__anon115	file:
NFA_QUEST	vim/vim/src/regexp_nfa.c	/^    NFA_QUEST,			    \/* greedy \\? (postfix only) *\/$/;"	e	enum:__anon115	file:
NFA_QUEST_NONGREEDY	vim/vim/src/regexp_nfa.c	/^    NFA_QUEST_NONGREEDY,	    \/* non-greedy \\? (postfix only) *\/$/;"	e	enum:__anon115	file:
NFA_RANGE	vim/vim/src/regexp_nfa.c	/^    NFA_RANGE,			    \/* range of the two previous items$/;"	e	enum:__anon115	file:
NFA_RANGE_MAX	vim/vim/src/regexp_nfa.c	/^    NFA_RANGE_MAX,		    \/* high end of a range  *\/$/;"	e	enum:__anon115	file:
NFA_RANGE_MIN	vim/vim/src/regexp_nfa.c	/^    NFA_RANGE_MIN,		    \/* low end of a range  *\/$/;"	e	enum:__anon115	file:
NFA_REGEXP_DEBUG_LOG	vim/vim/src/regexp_nfa.c	29;"	d	file:
NFA_REGEXP_DUMP_LOG	vim/vim/src/regexp_nfa.c	27;"	d	file:
NFA_REGEXP_ERROR_LOG	vim/vim/src/regexp_nfa.c	25;"	d	file:
NFA_REGEXP_RUN_LOG	vim/vim/src/regexp_nfa.c	28;"	d	file:
NFA_SFNAME	vim/vim/src/regexp_nfa.c	/^    NFA_SFNAME,		\/*	Match file name char but no digit *\/$/;"	e	enum:__anon115	file:
NFA_SIDENT	vim/vim/src/regexp_nfa.c	/^    NFA_SIDENT,		\/*	Match identifier char but no digit *\/$/;"	e	enum:__anon115	file:
NFA_SKIP	vim/vim/src/regexp_nfa.c	/^    NFA_SKIP,			    \/* Skip characters *\/$/;"	e	enum:__anon115	file:
NFA_SKWORD	vim/vim/src/regexp_nfa.c	/^    NFA_SKWORD,		\/*	Match word char but no digit *\/$/;"	e	enum:__anon115	file:
NFA_SPLIT	vim/vim/src/regexp_nfa.c	/^    NFA_SPLIT = -1024,$/;"	e	enum:__anon115	file:
NFA_SPRINT	vim/vim/src/regexp_nfa.c	/^    NFA_SPRINT,		\/*	Match printable char but no digit *\/$/;"	e	enum:__anon115	file:
NFA_STAR	vim/vim/src/regexp_nfa.c	/^    NFA_STAR,			    \/* greedy * (postfix only) *\/$/;"	e	enum:__anon115	file:
NFA_START_COLL	vim/vim/src/regexp_nfa.c	/^    NFA_START_COLL,		    \/* [abc] start *\/$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_BEFORE	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_BEFORE,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_BEFORE_FIRST	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_BEFORE_FIRST,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_BEFORE_NEG	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_BEFORE_NEG,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_BEFORE_NEG_FIRST	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_BEFORE_NEG_FIRST,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_FIRST	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_FIRST,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_NEG	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_NEG,$/;"	e	enum:__anon115	file:
NFA_START_INVISIBLE_NEG_FIRST	vim/vim/src/regexp_nfa.c	/^    NFA_START_INVISIBLE_NEG_FIRST,$/;"	e	enum:__anon115	file:
NFA_START_NEG_COLL	vim/vim/src/regexp_nfa.c	/^    NFA_START_NEG_COLL,		    \/* [^abc] start *\/$/;"	e	enum:__anon115	file:
NFA_START_PATTERN	vim/vim/src/regexp_nfa.c	/^    NFA_START_PATTERN,$/;"	e	enum:__anon115	file:
NFA_STAR_NONGREEDY	vim/vim/src/regexp_nfa.c	/^    NFA_STAR_NONGREEDY,		    \/* non-greedy * (postfix only) *\/$/;"	e	enum:__anon115	file:
NFA_TOO_EXPENSIVE	vim/vim/src/regexp.h	34;"	d
NFA_UPPER	vim/vim/src/regexp_nfa.c	/^    NFA_UPPER,		\/*	Match uppercase char *\/$/;"	e	enum:__anon115	file:
NFA_UPPER_IC	vim/vim/src/regexp_nfa.c	/^    NFA_UPPER_IC,	\/*	Match [A-Z] *\/$/;"	e	enum:__anon115	file:
NFA_VCOL	vim/vim/src/regexp_nfa.c	/^    NFA_VCOL,		\/*	Match cursor virtual column *\/$/;"	e	enum:__anon115	file:
NFA_VCOL_GT	vim/vim/src/regexp_nfa.c	/^    NFA_VCOL_GT,	\/*	Match > cursor virtual column *\/$/;"	e	enum:__anon115	file:
NFA_VCOL_LT	vim/vim/src/regexp_nfa.c	/^    NFA_VCOL_LT,	\/*	Match < cursor virtual column *\/$/;"	e	enum:__anon115	file:
NFA_VISUAL	vim/vim/src/regexp_nfa.c	/^    NFA_VISUAL,		\/*	Match Visual area *\/$/;"	e	enum:__anon115	file:
NFA_WHITE	vim/vim/src/regexp_nfa.c	/^    NFA_WHITE,		\/*	Match whitespace char *\/$/;"	e	enum:__anon115	file:
NFA_WORD	vim/vim/src/regexp_nfa.c	/^    NFA_WORD,		\/*	Match word char *\/$/;"	e	enum:__anon115	file:
NFA_ZCLOSE	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE1	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE1,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE2	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE2,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE3	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE3,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE4	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE4,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE5	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE5,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE6	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE6,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE7	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE7,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE8	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE8,$/;"	e	enum:__anon115	file:
NFA_ZCLOSE9	vim/vim/src/regexp_nfa.c	/^    NFA_ZCLOSE9,$/;"	e	enum:__anon115	file:
NFA_ZEND	vim/vim/src/regexp_nfa.c	/^    NFA_ZEND,			    \/* Used for \\ze *\/$/;"	e	enum:__anon115	file:
NFA_ZOPEN	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN,$/;"	e	enum:__anon115	file:
NFA_ZOPEN1	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN1,$/;"	e	enum:__anon115	file:
NFA_ZOPEN2	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN2,$/;"	e	enum:__anon115	file:
NFA_ZOPEN3	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN3,$/;"	e	enum:__anon115	file:
NFA_ZOPEN4	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN4,$/;"	e	enum:__anon115	file:
NFA_ZOPEN5	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN5,$/;"	e	enum:__anon115	file:
NFA_ZOPEN6	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN6,$/;"	e	enum:__anon115	file:
NFA_ZOPEN7	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN7,$/;"	e	enum:__anon115	file:
NFA_ZOPEN8	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN8,$/;"	e	enum:__anon115	file:
NFA_ZOPEN9	vim/vim/src/regexp_nfa.c	/^    NFA_ZOPEN9,$/;"	e	enum:__anon115	file:
NFA_ZREF1	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF1,			    \/* \\z1 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF2	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF2,			    \/* \\z2 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF3	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF3,			    \/* \\z3 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF4	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF4,			    \/* \\z4 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF5	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF5,			    \/* \\z5 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF6	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF6,			    \/* \\z6 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF7	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF7,			    \/* \\z7 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF8	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF8,			    \/* \\z8 *\/$/;"	e	enum:__anon115	file:
NFA_ZREF9	vim/vim/src/regexp_nfa.c	/^    NFA_ZREF9,			    \/* \\z9 *\/$/;"	e	enum:__anon115	file:
NFA_ZSTART	vim/vim/src/regexp_nfa.c	/^    NFA_ZSTART,			    \/* Used for \\zs *\/$/;"	e	enum:__anon115	file:
NGETTEXT	vim/vim/src/vim.h	591;"	d
NGETTEXT	vim/vim/src/vim.h	604;"	d
NGETTEXT	vim/vim/src/vim.h	613;"	d
NHEAD	vim/vim/src/regexp.c	206;"	d	file:
NHEX	vim/vim/src/regexp.c	200;"	d	file:
NIL	vim/vim/src/if_perlsfio.c	25;"	d	file:
NL	vim/vim/src/ascii.h	107;"	d
NL	vim/vim/src/ascii.h	28;"	d
NL	vim/vim/src/auto/config.mk	/^NL		= "\\\\012"$/;"	m
NLOWER	vim/vim/src/regexp.c	210;"	d	file:
NL_STR	vim/vim/src/ascii.h	108;"	d
NL_STR	vim/vim/src/ascii.h	29;"	d
NMARKS	vim/vim/src/structs.h	110;"	d
NMTTDISPINFOA	vim/vim/src/gui_w32.c	/^} NMTTDISPINFOA, *LPNMTTDISPINFOA;$/;"	t	typeref:struct:tagNMTTDISPINFOA	file:
NMTTDISPINFOW	vim/vim/src/gui_w32.c	/^} NMTTDISPINFOW, *LPNMTTDISPINFOW;$/;"	t	typeref:struct:tagNMTTDISPINFOW	file:
NMTTDISPINFO_NEW	vim/vim/src/gui_w32.c	/^} NMTTDISPINFO_NEW;$/;"	t	typeref:struct:tagNMTTDISPINFO_NEW	file:
NOBEHIND	vim/vim/src/regexp.c	168;"	d	file:
NOCATGETS	vim/vim/src/integration.c	75;"	d	file:
NOCTAL	vim/vim/src/regexp.c	202;"	d	file:
NODEBUG	vim/vim/src/GvimExt/Makefile	/^NODEBUG = 1$/;"	m
NODEBUG	vim/vim/src/Make_mvc.mak	/^NODEBUG = 1$/;"	m
NODEFAULTLIB	vim/vim/src/Make_mvc.mak	/^NODEFAULTLIB = \/nodefaultlib$/;"	m
NODEFAULTLIB	vim/vim/src/Make_mvc.mak	/^NODEFAULTLIB =$/;"	m
NODE_NORMAL	vim/vim/src/vim.h	999;"	d
NODE_OTHER	vim/vim/src/vim.h	1002;"	d
NODE_WRITABLE	vim/vim/src/vim.h	1000;"	d
NOFONT	vim/vim/src/gui.h	219;"	d
NOFONT	vim/vim/src/gui.h	225;"	d
NOFONT	vim/vim/src/gui.h	231;"	d
NOFONT	vim/vim/src/gui.h	236;"	d
NOFONTSET	vim/vim/src/gui.h	220;"	d
NOFONTSET	vim/vim/src/gui.h	226;"	d
NOFONTSET	vim/vim/src/gui.h	232;"	d
NOFONTSET	vim/vim/src/gui.h	237;"	d
NOHANDS_SUPPORT_FUNCTIONS	vim/vim/src/integration.h	28;"	d
NOMATCH	vim/vim/src/regexp.c	166;"	d	file:
NONE	vim/vim/src/gui_xmdlg.c	/^    NONE$/;"	e	enum:ListSpecifier	file:
NONE_IDX	vim/vim/src/syntax.c	188;"	d	file:
NONE_INSTALL	vim/vim/src/Makefile	/^NONE_INSTALL = install_normal$/;"	m
NOON	vim/vim/src/farsi.h	139;"	d
NOPEN	vim/vim/src/regexp.c	232;"	d	file:
NOPROTO	vim/vim/src/vim.h	2336;"	d
NORMAL	vim/vim/src/libvterm/src/vterm_internal.h	/^    NORMAL,$/;"	e	enum:VTerm::VTermParserState
NORMAL	vim/vim/src/vim.h	2330;"	d
NORMAL	vim/vim/src/vim.h	696;"	d
NORMAL_BUSY	vim/vim/src/vim.h	713;"	d
NOSPC	vim/vim/src/ex_cmds.h	37;"	d
NOTADR	vim/vim/src/ex_cmds.h	48;"	d
NOTAGFILE	vim/vim/src/tag.c	56;"	d	file:
NOTDONE	vim/vim/src/vim.h	738;"	d
NOTHING	vim/vim/src/regexp.c	160;"	d	file:
NOTRLCOM	vim/vim/src/ex_cmds.h	45;"	d
NOT_EQUAL	vim/vim/src/gui_xmebw.c	1072;"	d	file:
NOT_MULTI	vim/vim/src/regexp.c	374;"	d	file:
NOT_VALID	vim/vim/src/vim.h	641;"	d
NOWIN	vim/vim/src/window.c	74;"	d	file:
NO_ATTR	vim/vim/src/Makefile	/^NO_ATTR=$/;"	m
NO_BUFFERS	vim/vim/src/vim.h	1261;"	d
NO_CONSOLE	vim/vim/src/os_mac.h	104;"	d
NO_CONSOLE	vim/vim/src/os_win32.h	83;"	d
NO_CONSOLE_INPUT	vim/vim/src/gui.h	163;"	d
NO_EXPANDPATH	vim/vim/src/os_unix.h	393;"	d
NO_FORCE	vim/vim/src/libvterm/src/state.c	206;"	d	file:
NO_INITS	vim/vim/src/testdir/Make_all.mak	/^NO_INITS = -U NONE $(NO_PLUGINS)$/;"	m
NO_LOCAL_UNDOLEVEL	vim/vim/src/option.h	1202;"	d
NO_PLUGINS	vim/vim/src/testdir/Make_all.mak	/^NO_PLUGINS = --noplugin --not-a-term$/;"	m
NO_SCREEN	vim/vim/src/vim.h	1260;"	d
NO_VIM_MAIN	vim/vim/src/json_test.c	18;"	d	file:
NO_VIM_MAIN	vim/vim/src/kword_test.c	18;"	d	file:
NO_VIM_MAIN	vim/vim/src/memfile_test.c	19;"	d	file:
NO_VIM_MAIN	vim/vim/src/message_test.c	18;"	d	file:
NO_X11_INCLUDES	vim/vim/src/os_mac_conv.c	16;"	d	file:
NPCOMPOSITIONFORM	vim/vim/src/gui_w32.c	/^} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;$/;"	t	typeref:struct:tagCOMPOSITIONFORM	file:
NR_ELEMS	vim/vim/src/gui_mac.c	70;"	d	file:
NR_TRANS	vim/vim/src/structs.h	/^typedef struct nr_trans NR_TRANS;$/;"	t	typeref:struct:nr_trans
NSCRIPT	vim/vim/src/globals.h	1040;"	d
NSUBEXP	vim/vim/src/regexp.h	22;"	d
NT	vim/vim/src/if_ruby.c	23;"	d	file:
NUL	vim/vim/src/ascii.h	103;"	d
NUL	vim/vim/src/ascii.h	24;"	d
NUL	vim/vim/src/dosinst.h	72;"	d
NULL	vim/vim/src/Make_dvc.mak	/^NULL=$/;"	m
NULL	vim/vim/src/Make_dvc.mak	/^NULL=nul$/;"	m
NULL	vim/vim/src/Make_ivc.mak	/^NULL=$/;"	m
NULL	vim/vim/src/Make_ivc.mak	/^NULL=nul$/;"	m
NULL	vim/vim/src/VisVim/VisVim.mak	/^NULL=$/;"	m
NULL	vim/vim/src/VisVim/VisVim.mak	/^NULL=nul$/;"	m
NUMBER_INT	vim/vim/src/if_py_both.h	167;"	d
NUMBER_LONG	vim/vim/src/if_py_both.h	166;"	d
NUMBER_NATURAL	vim/vim/src/if_py_both.h	168;"	d
NUMBER_UNSIGNED	vim/vim/src/if_py_both.h	169;"	d
NUMBUFLEN	vim/vim/src/vim.h	348;"	d
NUM_ELEMENTS	vim/vim/src/hardcopy.c	999;"	d	file:
NUM_EVENTS	vim/vim/src/vim.h	/^    NUM_EVENTS			\/* MUST be the last one *\/$/;"	e	enum:auto_event
NUM_MOUSE_CLICKS	vim/vim/src/vim.h	1886;"	d
NUM_REGISTERS	vim/vim/src/ops.c	44;"	d	file:
NUM_REGISTERS	vim/vim/src/ops.c	46;"	d	file:
NUM_REGISTERS	vim/vim/src/ops.c	49;"	d	file:
NUPPER	vim/vim/src/regexp.c	212;"	d	file:
NV_CMDS_SIZE	vim/vim/src/normal.c	433;"	d	file:
NV_KEEPREG	vim/vim/src/normal.c	195;"	d	file:
NV_LANG	vim/vim/src/normal.c	189;"	d	file:
NV_NCH	vim/vim/src/normal.c	186;"	d	file:
NV_NCH_ALW	vim/vim/src/normal.c	188;"	d	file:
NV_NCH_NOP	vim/vim/src/normal.c	187;"	d	file:
NV_NCW	vim/vim/src/normal.c	196;"	d	file:
NV_RL	vim/vim/src/normal.c	194;"	d	file:
NV_SS	vim/vim/src/normal.c	191;"	d	file:
NV_SSS	vim/vim/src/normal.c	192;"	d	file:
NV_STS	vim/vim/src/normal.c	193;"	d	file:
NWHITE	vim/vim/src/regexp.c	196;"	d	file:
NWORD	vim/vim/src/regexp.c	204;"	d	file:
N_	vim/vim/src/gui_gtk.c	55;"	d	file:
N_	vim/vim/src/gui_gtk_x11.c	39;"	d	file:
N_	vim/vim/src/vim.h	592;"	d
N_	vim/vim/src/vim.h	606;"	d
N_	vim/vim/src/vim.h	608;"	d
N_	vim/vim/src/vim.h	614;"	d
N_DND_TARGETS	vim/vim/src/gui_gtk_x11.c	152;"	d	file:
N_SELECTION_TARGETS	vim/vim/src/gui_gtk_x11.c	137;"	d	file:
N_virguilla	vim/vim/src/regexp_nfa.c	771;"	d	file:
NameBuff	vim/vim/src/globals.h	/^EXTERN char_u	*NameBuff;		\/* file names are expanded in this$/;"	v
NeedFunctionPrototypes	vim/vim/src/xpm/include/xpm.h	90;"	d
NeedFunctionPrototypes	vim/vim/src/xpm/include/xpm.h	92;"	d
NewDocument	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::NewDocument(IDispatch * theDocument)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theDocument)
NewWorkspace	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::NewWorkspace()$/;"	f	class:CCommands::XApplicationEvents	signature:()
NoButton	vim/vim/src/gui_at_sb.c	214;"	d	file:
NotifyScroll	vim/vim/src/gui_at_sb.c	/^NotifyScroll($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
NotifyScroll	vim/vim/src/gui_at_sb.c	/^static void NotifyScroll(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
NotifyThumb	vim/vim/src/gui_at_sb.c	/^NotifyThumb($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
NotifyThumb	vim/vim/src/gui_at_sb.c	/^static void NotifyThumb(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
NtInitialize	vim/vim/src/if_ruby.c	305;"	d	file:
NumberToLong	vim/vim/src/if_py_both.h	/^NumberToLong(PyObject *obj, long *result, int flags)$/;"	f	signature:(PyObject *obj, long *result, int flags)
OBJ	vim/vim/src/GvimExt/Make_ming.mak	/^OBJ  := gvimext.o$/;"	m
OBJ	vim/vim/src/Make_cyg_ming.mak	/^OBJ = \\$/;"	m
OBJ	vim/vim/src/Make_dice.mak	/^OBJ =	o\/arabic.o \\$/;"	m
OBJ	vim/vim/src/Make_manx.mak	/^OBJ =	obj\/arabic.o \\$/;"	m
OBJ	vim/vim/src/Make_morph.mak	/^OBJ =	$(SRC:.c=.o)$/;"	m
OBJ	vim/vim/src/Make_mvc.mak	/^OBJ = $(OBJ) $(OUTDIR)\\dimm_i.obj $(OUTDIR)\\glbl_ime.obj$/;"	m
OBJ	vim/vim/src/Make_mvc.mak	/^OBJ = \\$/;"	m
OBJ	vim/vim/src/Make_sas.mak	/^OBJ = \\$/;"	m
OBJ	vim/vim/src/Makefile	/^OBJ = $(OBJ_COMMON) $(OBJ_MAIN)$/;"	m
OBJDIR	vim/vim/src/Make_bc5.mak	/^OBJDIR	= $(OSTYPE)\\gobj$/;"	m
OBJDIR	vim/vim/src/Make_bc5.mak	/^OBJDIR	= $(OSTYPE)\\obj$/;"	m
OBJDIR	vim/vim/src/Make_bc5.mak	/^OBJDIR	= $(OSTYPE)\\objdbg$/;"	m
OBJDIR	vim/vim/src/Make_bc5.mak	/^OBJDIR	= $(OSTYPE)\\oleobj$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)$(CPU)$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)H$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)L$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)O$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)R$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)T$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)U$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)X$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)Y$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)Z$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = $(OBJDIR)d$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = .\\ObjC$/;"	m
OBJDIR	vim/vim/src/Make_mvc.mak	/^OBJDIR = .\\ObjG$/;"	m
OBJDUMP	vim/vim/src/Make_morph.mak	/^OBJDUMP =	objdump$/;"	m
OBJECTS	vim/vim/src/libvterm/Makefile	/^OBJECTS=$(CFILES:.c=.lo)$/;"	m
OBJ_COMMON	vim/vim/src/Makefile	/^OBJ_COMMON = \\$/;"	m
OBJ_JSON_TEST	vim/vim/src/Makefile	/^OBJ_JSON_TEST = \\$/;"	m
OBJ_KWORD_TEST	vim/vim/src/Makefile	/^OBJ_KWORD_TEST = \\$/;"	m
OBJ_MAIN	vim/vim/src/Makefile	/^OBJ_MAIN = \\$/;"	m
OBJ_MEMFILE_TEST	vim/vim/src/Makefile	/^OBJ_MEMFILE_TEST = \\$/;"	m
OBJ_MESSAGE_TEST	vim/vim/src/Makefile	/^OBJ_MESSAGE_TEST = \\$/;"	m
OCTAL	vim/vim/src/regexp.c	201;"	d	file:
OFF	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^  OFF,$/;"	e	enum:__anon44	file:
OK	vim/vim/src/dosinst.h	75;"	d
OK	vim/vim/src/os_mac.h	59;"	d
OK	vim/vim/src/vim.h	735;"	d
OLDXAW	vim/vim/src/vim.h	79;"	d
OLE	vim/vim/src/Make_cyg_ming.mak	/^OLE=no$/;"	m
OLE_IDL	vim/vim/src/Make_mvc.mak	/^OLE_IDL = if_ole.idl$/;"	m
OLE_LIB	vim/vim/src/Make_mvc.mak	/^OLE_LIB = oleaut32.lib$/;"	m
OLE_OBJ	vim/vim/src/Make_mvc.mak	/^OLE_OBJ = $(OUTDIR)\\if_ole.obj$/;"	m
ON	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^  ON,$/;"	e	enum:__anon44	file:
ONE_CLIPBOARD	vim/vim/src/globals.h	526;"	d
ONE_LINE_DATA	vim/vim/src/gui_at_sb.h	141;"	d
ONE_PAGE_DATA	vim/vim/src/gui_at_sb.h	142;"	d
ONE_WINDOW	vim/vim/src/globals.h	551;"	d
ONE_WINDOW	vim/vim/src/globals.h	569;"	d
OO	vim/vim/src/farsi.h	165;"	d
OP	vim/vim/src/regexp.c	319;"	d	file:
OPEN	vim/vim/src/xxd/xxd.c	179;"	d	file:
OPEN	vim/vim/src/xxd/xxd.c	181;"	d	file:
OPENLINE_COM_LIST	vim/vim/src/vim.h	1126;"	d
OPENLINE_DELSPACES	vim/vim/src/vim.h	1122;"	d
OPENLINE_DO_COM	vim/vim/src/vim.h	1123;"	d
OPENLINE_KEEPTRAIL	vim/vim/src/vim.h	1124;"	d
OPENLINE_MARKFIX	vim/vim/src/vim.h	1125;"	d
OPEN_CHR_FILES	vim/vim/src/vim.h	2505;"	d
OPEN_OH_ARGTYPE	vim/vim/src/if_cscope.c	818;"	d	file:
OPEN_OH_ARGTYPE	vim/vim/src/os_mswin.c	474;"	d	file:
OPEN_OH_ARGTYPE	vim/vim/src/os_mswin.c	476;"	d	file:
OPERAND	vim/vim/src/regexp.c	321;"	d	file:
OPERAND_CMP	vim/vim/src/regexp.c	328;"	d	file:
OPERAND_MAX	vim/vim/src/regexp.c	326;"	d	file:
OPERAND_MIN	vim/vim/src/regexp.c	323;"	d	file:
OPT	vim/vim/src/Make_bc5.mak	/^OPT = $(OPT) -pr$/;"	m
OPT	vim/vim/src/Make_bc5.mak	/^OPT = $(OPT) -vi-$/;"	m
OPT	vim/vim/src/Make_bc5.mak	/^OPT = -O1 -f- -d$/;"	m
OPT	vim/vim/src/Make_bc5.mak	/^OPT = -O2 -f- -d -Oc -O$/;"	m
OPT	vim/vim/src/Make_bc5.mak	/^OPT = -O2 -f- -d -Ocavi -O$/;"	m
OPT	vim/vim/src/Make_bc5.mak	/^OPT = -Od -N$/;"	m
OPTFLAG	vim/vim/src/Make_mvc.mak	/^OPTFLAG = $(OPTFLAG) \/GL$/;"	m
OPTFLAG	vim/vim/src/Make_mvc.mak	/^OPTFLAG = \/O1$/;"	m
OPTFLAG	vim/vim/src/Make_mvc.mak	/^OPTFLAG = \/O2$/;"	m
OPTFLAG	vim/vim/src/Make_mvc.mak	/^OPTFLAG = \/Ox$/;"	m
OPTIMIZE	vim/vim/src/Make_bc5.mak	/^OPTIMIZE = MAXSPEED$/;"	m
OPTIMIZE	vim/vim/src/Make_cyg_ming.mak	/^OPTIMIZE=MAXSPEED$/;"	m
OPTIMIZE	vim/vim/src/Make_sas.mak	/^OPTIMIZE  = OPT$/;"	m
OPTIONS	vim/vim/src/Make_manx.mak	/^OPTIONS = -so$/;"	m
OPTIONS	vim/vim/src/xxd/Make_amiga.mak	/^OPTIONS = -so$/;"	m
OPT_BOTH	vim/vim/src/option.c	51;"	d	file:
OPT_BUF	vim/vim/src/option.c	50;"	d	file:
OPT_FREE	vim/vim/src/vim.h	1248;"	d
OPT_GLOBAL	vim/vim/src/vim.h	1249;"	d
OPT_LOCAL	vim/vim/src/vim.h	1250;"	d
OPT_MBFONT_ASCII	vim/vim/src/hardcopy.c	107;"	d	file:
OPT_MBFONT_BOLD	vim/vim/src/hardcopy.c	109;"	d	file:
OPT_MBFONT_BOLDOBLIQUE	vim/vim/src/hardcopy.c	111;"	d	file:
OPT_MBFONT_NUM_OPTIONS	vim/vim/src/hardcopy.c	112;"	d	file:
OPT_MBFONT_OBLIQUE	vim/vim/src/hardcopy.c	110;"	d	file:
OPT_MBFONT_REGULAR	vim/vim/src/hardcopy.c	108;"	d	file:
OPT_MBFONT_USECOURIER	vim/vim/src/hardcopy.c	106;"	d	file:
OPT_MODELINE	vim/vim/src/vim.h	1251;"	d
OPT_NOWIN	vim/vim/src/vim.h	1253;"	d
OPT_PRINT_BOT	vim/vim/src/globals.h	1261;"	d
OPT_PRINT_COLLATE	vim/vim/src/globals.h	1271;"	d
OPT_PRINT_DUPLEX	vim/vim/src/globals.h	1268;"	d
OPT_PRINT_FORMFEED	vim/vim/src/globals.h	1273;"	d
OPT_PRINT_HEADERHEIGHT	vim/vim/src/globals.h	1264;"	d
OPT_PRINT_JOBSPLIT	vim/vim/src/globals.h	1272;"	d
OPT_PRINT_LEFT	vim/vim/src/globals.h	1262;"	d
OPT_PRINT_NUMBER	vim/vim/src/globals.h	1266;"	d
OPT_PRINT_NUM_OPTIONS	vim/vim/src/globals.h	1275;"	d
OPT_PRINT_PAPER	vim/vim/src/globals.h	1270;"	d
OPT_PRINT_PORTRAIT	vim/vim/src/globals.h	1269;"	d
OPT_PRINT_RIGHT	vim/vim/src/globals.h	1263;"	d
OPT_PRINT_SYNTAX	vim/vim/src/globals.h	1265;"	d
OPT_PRINT_TOP	vim/vim/src/globals.h	1260;"	d
OPT_PRINT_WRAP	vim/vim/src/globals.h	1267;"	d
OPT_WIN	vim/vim/src/option.c	49;"	d	file:
OPT_WINONLY	vim/vim/src/vim.h	1252;"	d
OP_APPEND	vim/vim/src/vim.h	1483;"	d
OP_CHANGE	vim/vim/src/vim.h	1468;"	d
OP_COLON	vim/vim/src/vim.h	1475;"	d
OP_DELETE	vim/vim/src/vim.h	1466;"	d
OP_DELETE	vim/vim/src/vim.h	2333;"	d
OP_FILTER	vim/vim/src/vim.h	1471;"	d
OP_FOLD	vim/vim/src/vim.h	1484;"	d
OP_FOLDCLOSE	vim/vim/src/vim.h	1487;"	d
OP_FOLDCLOSEREC	vim/vim/src/vim.h	1488;"	d
OP_FOLDDEL	vim/vim/src/vim.h	1489;"	d
OP_FOLDDELREC	vim/vim/src/vim.h	1490;"	d
OP_FOLDOPEN	vim/vim/src/vim.h	1485;"	d
OP_FOLDOPENREC	vim/vim/src/vim.h	1486;"	d
OP_FORMAT	vim/vim/src/vim.h	1474;"	d
OP_FORMAT2	vim/vim/src/vim.h	1491;"	d
OP_FUNCTION	vim/vim/src/vim.h	1492;"	d
OP_INDENT	vim/vim/src/vim.h	1473;"	d
OP_INSERT	vim/vim/src/vim.h	1482;"	d
OP_JOIN	vim/vim/src/vim.h	1478;"	d
OP_JOIN	vim/vim/src/vim.h	2334;"	d
OP_JOIN_NS	vim/vim/src/vim.h	1479;"	d
OP_LOWER	vim/vim/src/vim.h	1477;"	d
OP_LSHIFT	vim/vim/src/vim.h	1469;"	d
OP_NOP	vim/vim/src/vim.h	1465;"	d
OP_NR_ADD	vim/vim/src/vim.h	1493;"	d
OP_NR_SUB	vim/vim/src/vim.h	1495;"	d
OP_PENDING	vim/vim/src/vim.h	698;"	d
OP_REPLACE	vim/vim/src/vim.h	1481;"	d
OP_ROT13	vim/vim/src/vim.h	1480;"	d
OP_RSHIFT	vim/vim/src/vim.h	1470;"	d
OP_TILDE	vim/vim/src/vim.h	1472;"	d
OP_UPPER	vim/vim/src/vim.h	1476;"	d
OP_YANK	vim/vim/src/vim.h	1467;"	d
ORIGINAL_TEXT	vim/vim/src/edit.c	86;"	d	file:
OSC	vim/vim/src/ascii.h	171;"	d
OSC	vim/vim/src/libvterm/src/vterm_internal.h	/^    OSC,$/;"	e	enum:VTerm::VTermParserState
OSDEF_CFLAGS	vim/vim/src/Makefile	/^OSDEF_CFLAGS = $(PRE_DEFS) $(POST_DEFS)$/;"	m
OSPEED_EXTERN	vim/vim/src/os_mac.h	268;"	d
OSTYPE	vim/vim/src/Make_bc5.mak	/^OSTYPE = WIN32$/;"	m
OSVERSIONINFO	vim/vim/src/gui_w32.c	/^typedef int OSVERSIONINFO;$/;"	t	file:
OS_EXTRA_OBJ	vim/vim/src/auto/config.mk	/^OS_EXTRA_OBJ	= $/;"	m
OS_EXTRA_SRC	vim/vim/src/auto/config.mk	/^OS_EXTRA_SRC	= $/;"	m
OUTDIR	vim/vim/src/Make_cyg_ming.mak	/^OUTDIR = gobj$(DEBUG_SUFFIX)$(MZSCHEME_SUFFIX)$(ARCH)$/;"	m
OUTDIR	vim/vim/src/Make_cyg_ming.mak	/^OUTDIR = obj$(DEBUG_SUFFIX)$(MZSCHEME_SUFFIX)$(ARCH)$/;"	m
OUTDIR	vim/vim/src/Make_dvc.mak	/^OUTDIR=.$/;"	m
OUTDIR	vim/vim/src/Make_mvc.mak	/^OUTDIR=$(OBJDIR)$/;"	m
OUTDIR	vim/vim/src/VisVim/VisVim.mak	/^OUTDIR=.\\Debug$/;"	m
OUTDIR	vim/vim/src/VisVim/VisVim.mak	/^OUTDIR=.\\Release$/;"	m
OUTPUT_LEN_TYPE	vim/vim/src/if_mzsch.c	178;"	d	file:
OUTPUT_LEN_TYPE	vim/vim/src/if_mzsch.c	180;"	d	file:
OUT_SIZE	vim/vim/src/term.c	2433;"	d	file:
OUT_STR	vim/vim/src/vim.h	1652;"	d
OUT_STR_NF	vim/vim/src/vim.h	1653;"	d
OW	vim/vim/src/farsi.h	160;"	d
OW_OW	vim/vim/src/farsi.h	163;"	d
O_EXTRA	vim/vim/src/vim.h	1573;"	d
O_EXTRA	vim/vim/src/vim.h	1575;"	d
O_NOCTTY	vim/vim/src/pty.c	135;"	d	file:
O_NOFOLLOW	vim/vim/src/vim.h	1579;"	d
O_NONBLOCK	vim/vim/src/evalfunc.c	3229;"	d	file:
O_acute	vim/vim/src/regexp_nfa.c	775;"	d	file:
O_circumflex	vim/vim/src/regexp_nfa.c	772;"	d	file:
O_diaeresis	vim/vim/src/regexp_nfa.c	773;"	d	file:
O_grave	vim/vim/src/regexp_nfa.c	774;"	d	file:
O_slash	vim/vim/src/regexp_nfa.c	777;"	d	file:
O_virguilla	vim/vim/src/regexp_nfa.c	776;"	d	file:
ObjectDir	vim/vim/src/if_py_both.h	/^ObjectDir(PyObject *self, char **attributes)$/;"	f	signature:(PyObject *self, char **attributes)
Offset	vim/vim/src/gui_at_sb.c	127;"	d	file:
Offset	vim/vim/src/gui_at_sb.c	90;"	d	file:
OnConnection	vim/vim/src/VisVim/DSAddIn.cpp	/^STDMETHODIMP CDSAddIn::OnConnection (IApplication * pApp, VARIANT_BOOL bFirstTime,$/;"	f	class:CDSAddIn	signature:(IApplication * pApp, VARIANT_BOOL bFirstTime, long dwCookie, VARIANT_BOOL * OnConnection)
OnDisable	vim/vim/src/VisVim/Commands.cpp	/^	afx_msg void OnDisable();$/;"	p	class:CMainDialog	file:	access:protected	signature:()
OnDisconnection	vim/vim/src/VisVim/DSAddIn.cpp	/^STDMETHODIMP CDSAddIn::OnDisconnection (VARIANT_BOOL bLastTime)$/;"	f	class:CDSAddIn	signature:(VARIANT_BOOL bLastTime)
OnEnable	vim/vim/src/VisVim/Commands.cpp	/^	afx_msg void OnEnable();$/;"	p	class:CMainDialog	file:	access:protected	signature:()
OpenPTY	vim/vim/src/pty.c	/^OpenPTY(char **ttyn)$/;"	f	signature:(char **ttyn)
OptionsAsMapping	vim/vim/src/if_py_both.h	/^static PyMappingMethods OptionsAsMapping = {$/;"	v
OptionsAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods OptionsAsSeq = {$/;"	v
OptionsAssItem	vim/vim/src/if_py_both.h	/^OptionsAssItem(OptionsObject *self, PyObject *keyObject, PyObject *valObject)$/;"	f	signature:(OptionsObject *self, PyObject *keyObject, PyObject *valObject)
OptionsClear	vim/vim/src/if_py_both.h	/^OptionsClear(OptionsObject *self)$/;"	f	signature:(OptionsObject *self)
OptionsContains	vim/vim/src/if_py_both.h	/^OptionsContains(OptionsObject *self, PyObject *keyObject)$/;"	f	signature:(OptionsObject *self, PyObject *keyObject)
OptionsDestructor	vim/vim/src/if_py_both.h	/^OptionsDestructor(OptionsObject *self)$/;"	f	signature:(OptionsObject *self)
OptionsItem	vim/vim/src/if_py_both.h	/^OptionsItem(OptionsObject *self, PyObject *keyObject)$/;"	f	signature:(OptionsObject *self, PyObject *keyObject)
OptionsIter	vim/vim/src/if_py_both.h	/^OptionsIter(OptionsObject *self)$/;"	f	signature:(OptionsObject *self)
OptionsIterNext	vim/vim/src/if_py_both.h	/^OptionsIterNext(optiterinfo_T **oii)$/;"	f	signature:(optiterinfo_T **oii)
OptionsNew	vim/vim/src/if_py_both.h	/^OptionsNew(int opt_type, void *from, checkfun Check, PyObject *fromObj)$/;"	f	signature:(int opt_type, void *from, checkfun Check, PyObject *fromObj)
OptionsObject	vim/vim/src/if_py_both.h	/^} OptionsObject;$/;"	t	typeref:struct:__anon105
OptionsTraverse	vim/vim/src/if_py_both.h	/^OptionsTraverse(OptionsObject *self, visitproc visit, void *arg)$/;"	f	signature:(OptionsObject *self, visitproc visit, void *arg)
OptionsType	vim/vim/src/if_py_both.h	/^static PyTypeObject OptionsType;$/;"	v
Output	vim/vim/src/if_py_both.h	/^static OutputObject Output =$/;"	v
OutputAttrs	vim/vim/src/if_py_both.h	/^static char *OutputAttrs[] = {$/;"	v
OutputDir	vim/vim/src/if_py_both.h	/^OutputDir(PyObject *self)$/;"	f	signature:(PyObject *self)
OutputGetattr	vim/vim/src/if_python.c	/^OutputGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
OutputGetattr	vim/vim/src/if_python.c	/^static PyObject *OutputGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
OutputGetattro	vim/vim/src/if_python3.c	/^OutputGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
OutputGetattro	vim/vim/src/if_python3.c	/^static PyObject *OutputGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
OutputMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef OutputMethods[] = {$/;"	v	typeref:struct:PyMethodDef
OutputObject	vim/vim/src/if_py_both.h	/^} OutputObject;$/;"	t	typeref:struct:__anon96
OutputSetattr	vim/vim/src/if_py_both.h	/^OutputSetattr(OutputObject *self, char *name, PyObject *valObject)$/;"	f	signature:(OutputObject *self, char *name, PyObject *valObject)
OutputSetattro	vim/vim/src/if_python3.c	/^OutputSetattro(PyObject *self, PyObject *nameobj, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj, PyObject *val)
OutputSetattro	vim/vim/src/if_python3.c	/^static int OutputSetattro(PyObject *, PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *, PyObject *)
OutputType	vim/vim/src/if_py_both.h	/^static PyTypeObject OutputType;$/;"	v
OutputWrite	vim/vim/src/if_py_both.h	/^OutputWrite(OutputObject *self, PyObject *string)$/;"	f	signature:(OutputObject *self, PyObject *string)
OutputWritelines	vim/vim/src/if_py_both.h	/^OutputWritelines(OutputObject *self, PyObject *seq)$/;"	f	signature:(OutputObject *self, PyObject *seq)
P	vim/vim/src/sha256.c	102;"	d	file:
PACKAGE	vim/vim/src/po/Make_cyg.mak	/^PACKAGE = vim$/;"	m
PACKAGE	vim/vim/src/po/Make_ming.mak	/^PACKAGE = vim$/;"	m
PACKAGE	vim/vim/src/po/Make_mvc.mak	/^PACKAGE = vim$/;"	m
PACKAGE	vim/vim/src/po/Makefile	/^PACKAGE = vim$/;"	m
PACKSOURCE	vim/vim/src/Makefile	/^PACKSOURCE = ..\/runtime\/pack$/;"	m
PACKSUBDIR	vim/vim/src/Makefile	/^PACKSUBDIR = \/pack$/;"	m
PACKSUBLOC	vim/vim/src/Makefile	/^PACKSUBLOC	= $(VIMRTLOC)$(PACKSUBDIR)$/;"	m
PACL	vim/vim/src/os_mswin.c	/^typedef int PACL;$/;"	t	file:
PACL	vim/vim/src/os_win32.c	/^typedef int PACL;$/;"	t	file:
PAGE_DELAY	vim/vim/src/gui_at_sb.c	221;"	d	file:
PAGE_REPEAT	vim/vim/src/gui_at_sb.c	223;"	d	file:
PARAM_COUNT	vim/vim/src/option.c	3214;"	d	file:
PART_COUNT	vim/vim/src/structs.h	/^    PART_COUNT$/;"	e	enum:__anon195
PART_ERR	vim/vim/src/structs.h	/^    PART_ERR,$/;"	e	enum:__anon195
PART_IN	vim/vim/src/structs.h	/^    PART_IN,$/;"	e	enum:__anon195
PART_OUT	vim/vim/src/structs.h	/^    PART_OUT,$/;"	e	enum:__anon195
PART_SOCK	vim/vim/src/structs.h	/^    PART_SOCK = 0,$/;"	e	enum:__anon195
PASTE_CMDLINE	vim/vim/src/vim.h	/^    PASTE_CMDLINE,	\/* command line *\/$/;"	e	enum:__anon245
PASTE_EX	vim/vim/src/vim.h	/^    PASTE_EX,		\/* ex mode line *\/$/;"	e	enum:__anon245
PASTE_INSERT	vim/vim/src/vim.h	/^    PASTE_INSERT,	\/* insert mode *\/$/;"	e	enum:__anon245
PASTE_ONE_CHAR	vim/vim/src/vim.h	/^    PASTE_ONE_CHAR	\/* return first character *\/$/;"	e	enum:__anon245
PATHDEF_SRC	vim/vim/src/Make_mvc.mak	/^PATHDEF_SRC = $(OUTDIR)\\pathdef.c$/;"	m
PATHSEP	vim/vim/src/ascii.h	181;"	d
PATHSEP	vim/vim/src/ascii.h	184;"	d
PATHSEPSTR	vim/vim/src/ascii.h	182;"	d
PATHSEPSTR	vim/vim/src/ascii.h	185;"	d
PATH_ESC_CHARS	vim/vim/src/vim.h	335;"	d
PATH_SEP	vim/vim/src/xxd/xxd.c	153;"	d	file:
PATH_SEP	vim/vim/src/xxd/xxd.c	159;"	d	file:
PATH_SEP	vim/vim/src/xxd/xxd.c	166;"	d	file:
PATH_SEP	vim/vim/src/xxd/xxd.c	173;"	d	file:
PC	vim/vim/src/term.c	/^char *UP, *BC, PC;$/;"	v
PC	vim/vim/src/termlib.c	/^char	PC = 0;		      \/* Pad character, default NULL *\/$/;"	v
PCHAR	vim/vim/src/macros.h	19;"	d
PCOMPOSITIONFORM	vim/vim/src/gui_w32.c	/^} COMPOSITIONFORM, *PCOMPOSITIONFORM, NEAR *NPCOMPOSITIONFORM, FAR *LPCOMPOSITIONFORM;$/;"	t	typeref:struct:tagCOMPOSITIONFORM	file:
PC_STATUS_LEFT	vim/vim/src/edit.c	1758;"	d	file:
PC_STATUS_RIGHT	vim/vim/src/edit.c	1757;"	d	file:
PC_STATUS_SET	vim/vim/src/edit.c	1759;"	d	file:
PC_STATUS_UNSET	vim/vim/src/edit.c	1756;"	d	file:
PD2D1CREATEFACTORY	vim/vim/src/gui_dwrite.cpp	/^typedef HRESULT (WINAPI *PD2D1CREATEFACTORY)(D2D1_FACTORY_TYPE,$/;"	t	file:
PDP_RETVAL	vim/vim/src/os_mswin.c	1165;"	d	file:
PDP_RETVAL	vim/vim/src/os_mswin.c	1167;"	d	file:
PDWORD	vim/vim/src/os_win32.c	/^typedef int PDWORD;$/;"	t	file:
PDWRITECREATEFACTORY	vim/vim/src/gui_dwrite.cpp	/^typedef HRESULT (WINAPI *PDWRITECREATEFACTORY)(DWRITE_FACTORY_TYPE,$/;"	t	file:
PE	vim/vim/src/farsi.h	113;"	d
PERL	vim/vim/src/auto/config.mk	/^PERL		= $/;"	m
PERLEXE	vim/vim/src/Make_cyg_ming.mak	/^PERLEXE=$(PERL)\/bin\/perl$/;"	m
PERLLIB	vim/vim/src/Make_cyg_ming.mak	/^PERLLIB=$(PERL)\/lib$/;"	m
PERLLIB	vim/vim/src/auto/config.mk	/^PERLLIB		= $/;"	m
PERLLIBS	vim/vim/src/Make_cyg_ming.mak	/^PERLLIBS=$(PERLLIB)\/Core$/;"	m
PERLTYPEMAP	vim/vim/src/Make_cyg_ming.mak	/^PERLTYPEMAP:=$(shell cygpath -m $(PERLLIB)\/ExtUtils\/typemap)$/;"	m
PERLTYPEMAP	vim/vim/src/Make_cyg_ming.mak	/^PERLTYPEMAP=$(PERLLIB)\/ExtUtils\/typemap$/;"	m
PERL_ARCH	vim/vim/src/Make_mvc.mak	/^PERL_ARCH = \\MSWin32-x86$/;"	m
PERL_CFLAGS	vim/vim/src/auto/config.mk	/^PERL_CFLAGS	= $/;"	m
PERL_DLL	vim/vim/src/Make_mvc.mak	/^PERL_DLL = perl$(PERL_VER).dll$/;"	m
PERL_EXE	vim/vim/src/Make_mvc.mak	/^PERL_EXE = $(PERL)\\Bin$(PERL_ARCH)\\perl$/;"	m
PERL_INC	vim/vim/src/Make_mvc.mak	/^PERL_INC = $(PERL_INC) \/I if_perl_msvc$/;"	m
PERL_INC	vim/vim/src/Make_mvc.mak	/^PERL_INC = \/I $(PERL_INCDIR)$/;"	m
PERL_INCDIR	vim/vim/src/Make_mvc.mak	/^PERL_INCDIR = $(PERL)\\Lib$(PERL_ARCH)\\Core$/;"	m
PERL_LIB	vim/vim/src/Make_mvc.mak	/^PERL_LIB = $(PERL_INCDIR)\\libperl$(PERL_VER).a$/;"	m
PERL_LIB	vim/vim/src/Make_mvc.mak	/^PERL_LIB = $(PERL_INCDIR)\\perl$(PERL_VER).lib$/;"	m
PERL_LIB	vim/vim/src/Make_mvc.mak	/^PERL_LIB = $(PERL_INCDIR)\\perl.lib$/;"	m
PERL_LIBS	vim/vim/src/auto/config.mk	/^PERL_LIBS	= $/;"	m
PERL_LIB_FLAG	vim/vim/src/Make_bc5.mak	/^PERL_LIB_FLAG = \/nodefaultlib:$/;"	m
PERL_OBJ	vim/vim/src/Make_mvc.mak	/^PERL_OBJ = $(OUTDIR)\\if_perl.obj $(OUTDIR)\\if_perlsfio.obj$/;"	m
PERL_OBJ	vim/vim/src/auto/config.mk	/^PERL_OBJ	= $/;"	m
PERL_PRO	vim/vim/src/auto/config.mk	/^PERL_PRO	= $/;"	m
PERL_SRC	vim/vim/src/auto/config.mk	/^PERL_SRC	= $/;"	m
PERL_VER	vim/vim/src/Make_bc5.mak	/^PERL_VER = 56$/;"	m
PERL_VER	vim/vim/src/Make_cyg_ming.mak	/^PERL_VER=524$/;"	m
PERL_VER	vim/vim/src/Make_mvc.mak	/^PERL_VER = 524$/;"	m
PERL_XSUBPP	vim/vim/src/auto/config.mk	/^PERL_XSUBPP	= $/;"	m
PERROR	vim/vim/src/channel.c	253;"	d	file:
PERROR	vim/vim/src/channel.c	254;"	d	file:
PERROR	vim/vim/src/vim.h	1698;"	d
PERROR	vim/vim/src/vim.h	1700;"	d
PERTURB_SHIFT	vim/vim/src/hashtab.c	40;"	d	file:
PEXP_FUNC	vim/vim/src/ex_cmds2.c	/^    PEXP_FUNC		\/* expand :profile func {funcname} *\/$/;"	e	enum:__anon123	file:
PEXP_SUBCMD	vim/vim/src/ex_cmds2.c	/^    PEXP_SUBCMD,	\/* expand :profile sub-commands *\/$/;"	e	enum:__anon123	file:
PFD_NOPREFIX	vim/vim/src/spell.c	326;"	d	file:
PFD_NOTSPECIAL	vim/vim/src/spell.c	328;"	d	file:
PFD_PREFIXTREE	vim/vim/src/spell.c	327;"	d	file:
PFX_FLAGS	vim/vim/src/spellfile.c	2036;"	d	file:
PGETUSERDEFAULTLOCALENAME	vim/vim/src/gui_dwrite.cpp	/^typedef int (WINAPI *PGETUSERDEFAULTLOCALENAME)(LPWSTR, int);$/;"	t	file:
PHANDLE	vim/vim/src/os_win32.c	/^typedef int PHANDLE;$/;"	t	file:
PHOTONGUI_BUNDLE	vim/vim/src/Makefile	/^PHOTONGUI_BUNDLE =$/;"	m
PHOTONGUI_DEFS	vim/vim/src/Makefile	/^PHOTONGUI_DEFS	= -DFEAT_GUI_PHOTON$/;"	m
PHOTONGUI_INSTALL	vim/vim/src/Makefile	/^PHOTONGUI_INSTALL = install_normal install_gui_extra$/;"	m
PHOTONGUI_IPATH	vim/vim/src/Makefile	/^PHOTONGUI_IPATH	=$/;"	m
PHOTONGUI_LIBS1	vim/vim/src/Makefile	/^PHOTONGUI_LIBS1	= -lph -lphexlib$/;"	m
PHOTONGUI_LIBS2	vim/vim/src/Makefile	/^PHOTONGUI_LIBS2	=$/;"	m
PHOTONGUI_LIBS_DIR	vim/vim/src/Makefile	/^PHOTONGUI_LIBS_DIR =$/;"	m
PHOTONGUI_MAN_TARGETS	vim/vim/src/Makefile	/^PHOTONGUI_MAN_TARGETS = yes$/;"	m
PHOTONGUI_OBJ	vim/vim/src/Makefile	/^PHOTONGUI_OBJ	= objects\/gui.o objects\/gui_photon.o$/;"	m
PHOTONGUI_SRC	vim/vim/src/Makefile	/^PHOTONGUI_SRC	= gui.c gui_photon.c$/;"	m
PHOTONGUI_TARGETS	vim/vim/src/Makefile	/^PHOTONGUI_TARGETS = installglinks$/;"	m
PHOTONGUI_TESTTARGET	vim/vim/src/Makefile	/^PHOTONGUI_TESTTARGET = gui$/;"	m
PICKLENGTH	vim/vim/src/gui_at_sb.c	215;"	d	file:
PIXEL_ALREADY_TYPEDEFED	vim/vim/src/xpm/include/simx.h	77;"	d
PIXEL_ALREADY_TYPEDEFED	vim/vim/src/xpm/include/xpm.h	84;"	d
PLAN_CR	vim/vim/src/screen.c	9186;"	d	file:
PLAN_LE	vim/vim/src/screen.c	9185;"	d	file:
PLAN_NL	vim/vim/src/screen.c	9187;"	d	file:
PLAN_WRITE	vim/vim/src/screen.c	9188;"	d	file:
PLATFORM	vim/vim/src/GvimExt/Makefile	/^PLATFORM = $(TARGET_CPU)$/;"	m
PLATFORM	vim/vim/src/Make_mvc.mak	/^PLATFORM = $(TARGET_CPU)$/;"	m
PLINES_NOFILL	vim/vim/src/macros.h	324;"	d
PLINES_NOFILL	vim/vim/src/macros.h	326;"	d
PLUGSOURCE	vim/vim/src/Makefile	/^PLUGSOURCE = ..\/runtime\/plugin$/;"	m
PLUGSUBDIR	vim/vim/src/Makefile	/^PLUGSUBDIR = \/plugin$/;"	m
PLUGSUBLOC	vim/vim/src/Makefile	/^PLUGSUBLOC	= $(VIMRTLOC)$(PLUGSUBDIR)$/;"	m
PLUS	vim/vim/src/regexp.c	163;"	d	file:
PLUS_REGISTER	vim/vim/src/ops.c	33;"	d	file:
PLUS_REGISTER	vim/vim/src/ops.c	35;"	d	file:
PODIR	vim/vim/src/Makefile	/^PODIR = po$/;"	m
POINT	vim/vim/src/gui_w32.c	/^typedef int POINT;$/;"	t	file:
POP	vim/vim/src/regexp_nfa.c	3264;"	d	file:
POP	vim/vim/src/regexp_nfa.c	3772;"	d	file:
POP1	vim/vim/src/regexp_nfa.c	3768;"	d	file:
POP2	vim/vim/src/regexp_nfa.c	3770;"	d	file:
PORT	vim/vim/src/testdir/test_channel.py	/^        PORT = 13684$/;"	v
POSIX	vim/vim/src/os_qnx.h	15;"	d
POSTPROCESS	vim/vim/src/Make_mint.mak	/^POSTPROCESS = fixstk 20k $(VIMTARGET)$/;"	m
POSTSCRIPT	vim/vim/src/Make_cyg_ming.mak	/^POSTSCRIPT=no$/;"	m
POST_DEFS	vim/vim/src/Makefile	/^POST_DEFS = $(X_CFLAGS) $(MZSCHEME_CFLAGS) $(EXTRA_DEFS)$/;"	m
POUND	vim/vim/src/ascii.h	117;"	d
POUND	vim/vim/src/ascii.h	38;"	d
PRCOLOR_BLACK	vim/vim/src/hardcopy.c	95;"	d	file:
PRCOLOR_WHITE	vim/vim/src/hardcopy.c	96;"	d	file:
PRE	vim/vim/src/Make_dice.mak	/^PRE = -H${SYMS}=vim.h$/;"	m
PREFIX	vim/vim/src/libvterm/Makefile	/^PREFIX=\/usr\/local$/;"	m
PRE_DEFS	vim/vim/src/Makefile	/^PRE_DEFS = -Iproto $(DEFS) $(GUI_DEFS) $(GUI_IPATH) $(CPPFLAGS) $(EXTRA_IPATHS)$/;"	m
PRG	vim/vim/src/Make_morph.mak	/^PRG =		Vim$/;"	m
PRINT	vim/vim/src/regexp.c	193;"	d	file:
PRINTDLG	vim/vim/src/os_mswin.c	/^typedef int PRINTDLG;$/;"	t	file:
PRINTDLG	vim/vim/src/os_win32.c	/^typedef int PRINTDLG;$/;"	t	file:
PRINTF_DECIMAL_LONG_U	vim/vim/src/vim.h	388;"	d
PRINTF_HEX_LONG_U	vim/vim/src/vim.h	372;"	d
PRINTF_HEX_LONG_U	vim/vim/src/vim.h	386;"	d
PRINTLINESIZE	vim/vim/src/spellfile.c	2098;"	d	file:
PRINTSOME	vim/vim/src/spellfile.c	2101;"	d	file:
PRINTSOURCE	vim/vim/src/Makefile	/^PRINTSOURCE = ..\/runtime\/print$/;"	m
PRINTSUBDIR	vim/vim/src/Makefile	/^PRINTSUBDIR = \/print$/;"	m
PRINTSUBLOC	vim/vim/src/Makefile	/^PRINTSUBLOC	= $(VIMRTLOC)$(PRINTSUBDIR)$/;"	m
PRINTWIDTH	vim/vim/src/spellfile.c	2099;"	d	file:
PRINT_NUMBER_WIDTH	vim/vim/src/structs.h	3185;"	d
PRL_ITEM	vim/vim/src/ex_cmds2.c	64;"	d	file:
PRO	vim/vim/src/Make_manx.mak	/^PRO =	proto\/arabic.pro \\$/;"	m
PRO	vim/vim/src/Make_sas.mak	/^PRO = \\$/;"	m
PROCESS_INFORMATION	vim/vim/src/os_win32.c	/^typedef int PROCESS_INFORMATION;$/;"	t	file:
PROC_EXE_LINK	vim/vim/src/auto/config.h	451;"	d
PROFCMD_CONTINUE	vim/vim/src/ex_cmds2.c	1608;"	d	file:
PROFCMD_FILE	vim/vim/src/ex_cmds2.c	1612;"	d	file:
PROFCMD_FUNC	vim/vim/src/ex_cmds2.c	1610;"	d	file:
PROFCMD_LAST	vim/vim/src/ex_cmds2.c	1614;"	d	file:
PROFCMD_PAUSE	vim/vim/src/ex_cmds2.c	1606;"	d	file:
PROFCMD_START	vim/vim/src/ex_cmds2.c	1604;"	d	file:
PROF_NONE	vim/vim/src/vim.h	1846;"	d
PROF_PAUSED	vim/vim/src/vim.h	1848;"	d
PROF_STORE	vim/vim/src/spell.c	4275;"	d	file:
PROF_YES	vim/vim/src/vim.h	1847;"	d
PROPT	vim/vim/src/Make_sas.mak	/^PROPT = DEF=PROTO GPROTO GPPARM MAXIMUMERRORS=999 GENPROTOSTATICS GENPROTOPARAMETERS$/;"	m
PROTECTED_DACL_SECURITY_INFORMATION	vim/vim/src/os_win32.c	687;"	d	file:
PROTOCOL_VERSION	vim/vim/src/integration.c	107;"	d	file:
PROTO_FLAGS	vim/vim/src/Makefile	/^PROTO_FLAGS = -d -E"$(CPP)" $(NO_ATTR)$/;"	m
PROXY_DELEGATION	vim/vim/src/dlldata.c	14;"	d	file:
PRO_AUTO	vim/vim/src/Makefile	/^PRO_AUTO = \\$/;"	m
PRO_MANUAL	vim/vim/src/Makefile	/^PRO_MANUAL = os_amiga.pro os_win32.pro \\$/;"	m
PRT_CID_PROLOG_VERSION	vim/vim/src/hardcopy.c	1299;"	d	file:
PRT_DSC_ENDCOMMENTS	vim/vim/src/hardcopy.c	1328;"	d	file:
PRT_DSC_ENDCOMMENTS_TYPE	vim/vim/src/hardcopy.c	1324;"	d	file:
PRT_DSC_MISC_TYPE	vim/vim/src/hardcopy.c	1321;"	d	file:
PRT_DSC_TITLE	vim/vim/src/hardcopy.c	1326;"	d	file:
PRT_DSC_TITLE_TYPE	vim/vim/src/hardcopy.c	1322;"	d	file:
PRT_DSC_VERSION	vim/vim/src/hardcopy.c	1327;"	d	file:
PRT_DSC_VERSION_TYPE	vim/vim/src/hardcopy.c	1323;"	d	file:
PRT_FILE_BUFFER_LEN	vim/vim/src/hardcopy.c	1782;"	d	file:
PRT_MEDIASIZE_LEN	vim/vim/src/hardcopy.c	1012;"	d	file:
PRT_PROLOG_VERSION	vim/vim/src/hardcopy.c	1298;"	d	file:
PRT_PS_DEFAULT_BUFFER_SIZE	vim/vim/src/hardcopy.c	1003;"	d	file:
PRT_PS_DEFAULT_DPI	vim/vim/src/hardcopy.c	1001;"	d	file:
PRT_PS_DEFAULT_FONTSIZE	vim/vim/src/hardcopy.c	1002;"	d	file:
PRT_PS_FONT_BOLD	vim/vim/src/hardcopy.c	1044;"	d	file:
PRT_PS_FONT_BOLDOBLIQUE	vim/vim/src/hardcopy.c	1046;"	d	file:
PRT_PS_FONT_OBLIQUE	vim/vim/src/hardcopy.c	1045;"	d	file:
PRT_PS_FONT_ROMAN	vim/vim/src/hardcopy.c	1043;"	d	file:
PRT_PS_FONT_TO_USER	vim/vim/src/hardcopy.c	1657;"	d	file:
PRT_RESOURCE_CMAP	vim/vim/src/hardcopy.c	1316;"	d	file:
PRT_RESOURCE_ENCODING	vim/vim/src/hardcopy.c	1315;"	d	file:
PRT_RESOURCE_HEADER	vim/vim/src/hardcopy.c	1312;"	d	file:
PRT_RESOURCE_PROCSET	vim/vim/src/hardcopy.c	1314;"	d	file:
PRT_RESOURCE_RESOURCE	vim/vim/src/hardcopy.c	1313;"	d	file:
PRT_RESOURCE_TYPE_CMAP	vim/vim/src/hardcopy.c	1286;"	d	file:
PRT_RESOURCE_TYPE_ENCODING	vim/vim/src/hardcopy.c	1285;"	d	file:
PRT_RESOURCE_TYPE_PROCSET	vim/vim/src/hardcopy.c	1284;"	d	file:
PRT_UNIT_INCH	vim/vim/src/globals.h	1302;"	d
PRT_UNIT_MM	vim/vim/src/globals.h	1303;"	d
PRT_UNIT_NAMES	vim/vim/src/globals.h	1305;"	d
PRT_UNIT_NONE	vim/vim/src/globals.h	1300;"	d
PRT_UNIT_PERC	vim/vim/src/globals.h	1301;"	d
PRT_UNIT_POINT	vim/vim/src/globals.h	1304;"	d
PSCR	vim/vim/src/hardcopy.c	1778;"	d	file:
PSECURITY_DESCRIPTOR	vim/vim/src/os_mswin.c	/^typedef int PSECURITY_DESCRIPTOR;$/;"	t	file:
PSECURITY_DESCRIPTOR	vim/vim/src/os_win32.c	/^typedef int PSECURITY_DESCRIPTOR;$/;"	t	file:
PSID	vim/vim/src/os_mswin.c	/^typedef int PSID;$/;"	t	file:
PSID	vim/vim/src/os_win32.c	/^typedef int PSID;$/;"	t	file:
PSLF	vim/vim/src/hardcopy.c	1777;"	d	file:
PSNSECINFO	vim/vim/src/os_win32.c	/^typedef int PSNSECINFO;$/;"	t	file:
PSNSECINFOW	vim/vim/src/os_win32.c	/^typedef int PSNSECINFOW;$/;"	t	file:
PTR2CHAR	vim/vim/src/macros.h	290;"	d
PTR2CHAR	vim/vim/src/macros.h	300;"	d
PTR_BL	vim/vim/src/memline.c	/^typedef struct pointer_block	PTR_BL;	    \/* contents of a pointer block *\/$/;"	t	typeref:struct:pointer_block	file:
PTR_EN	vim/vim/src/memline.c	/^typedef struct pointer_entry	PTR_EN;	    \/* block\/line-count pair *\/$/;"	t	typeref:struct:pointer_entry	file:
PTR_ID	vim/vim/src/memline.c	61;"	d	file:
PTYRANGE0	vim/vim/src/pty.c	118;"	d	file:
PTYRANGE1	vim/vim/src/pty.c	121;"	d	file:
PTY_DONE	vim/vim/src/pty.c	181;"	d	file:
PTY_DONE	vim/vim/src/pty.c	198;"	d	file:
PTY_DONE	vim/vim/src/pty.c	222;"	d	file:
PTY_DONE	vim/vim/src/pty.c	247;"	d	file:
PTY_DONE	vim/vim/src/pty.c	274;"	d	file:
PTY_DONE	vim/vim/src/pty.c	310;"	d	file:
PUM_DEF_HEIGHT	vim/vim/src/popupmnu.c	35;"	d	file:
PUM_DEF_WIDTH	vim/vim/src/popupmnu.c	36;"	d	file:
PUSH	vim/vim/src/regexp_nfa.c	3263;"	d	file:
PUSH	vim/vim/src/regexp_nfa.c	3773;"	d	file:
PUSH1	vim/vim/src/regexp_nfa.c	3769;"	d	file:
PUSH2	vim/vim/src/regexp_nfa.c	3771;"	d	file:
PUT	vim/vim/src/libvterm/src/screen.c	681;"	d	file:
PUT_CURSEND	vim/vim/src/vim.h	1103;"	d
PUT_CURSLINE	vim/vim/src/vim.h	1104;"	d
PUT_FIXINDENT	vim/vim/src/vim.h	1102;"	d
PUT_LINE	vim/vim/src/vim.h	1105;"	d
PUT_LINE_FORWARD	vim/vim/src/vim.h	1107;"	d
PUT_LINE_SPLIT	vim/vim/src/vim.h	1106;"	d
PUT_UINT32	vim/vim/src/sha256.c	37;"	d	file:
PV_AI	vim/vim/src/option.c	57;"	d	file:
PV_AR	vim/vim/src/option.c	58;"	d	file:
PV_ARAB	vim/vim/src/option.c	194;"	d	file:
PV_BEXPR	vim/vim/src/option.c	108;"	d	file:
PV_BH	vim/vim/src/option.c	60;"	d	file:
PV_BIN	vim/vim/src/option.c	67;"	d	file:
PV_BKC	vim/vim/src/option.c	59;"	d	file:
PV_BL	vim/vim/src/option.c	68;"	d	file:
PV_BOMB	vim/vim/src/option.c	70;"	d	file:
PV_BOTH	vim/vim/src/option.c	45;"	d	file:
PV_BRI	vim/vim/src/option.c	197;"	d	file:
PV_BRIOPT	vim/vim/src/option.c	198;"	d	file:
PV_BT	vim/vim/src/option.c	61;"	d	file:
PV_BUF	vim/vim/src/option.c	47;"	d	file:
PV_CC	vim/vim/src/option.c	242;"	d	file:
PV_CFU	vim/vim/src/option.c	94;"	d	file:
PV_CI	vim/vim/src/option.c	72;"	d	file:
PV_CIN	vim/vim/src/option.c	74;"	d	file:
PV_CINK	vim/vim/src/option.c	75;"	d	file:
PV_CINO	vim/vim/src/option.c	76;"	d	file:
PV_CINW	vim/vim/src/option.c	79;"	d	file:
PV_CM	vim/vim/src/option.c	81;"	d	file:
PV_CMS	vim/vim/src/option.c	83;"	d	file:
PV_COCU	vim/vim/src/option.c	257;"	d	file:
PV_COLE	vim/vim/src/option.c	258;"	d	file:
PV_COM	vim/vim/src/option.c	86;"	d	file:
PV_CPT	vim/vim/src/option.c	89;"	d	file:
PV_CRBIND	vim/vim/src/option.c	254;"	d	file:
PV_CUC	vim/vim/src/option.c	240;"	d	file:
PV_CUL	vim/vim/src/option.c	241;"	d	file:
PV_DEF	vim/vim/src/option.c	97;"	d	file:
PV_DICT	vim/vim/src/option.c	90;"	d	file:
PV_DIFF	vim/vim/src/option.c	201;"	d	file:
PV_EFM	vim/vim/src/option.c	63;"	d	file:
PV_EOL	vim/vim/src/option.c	100;"	d	file:
PV_EP	vim/vim/src/option.c	102;"	d	file:
PV_ET	vim/vim/src/option.c	103;"	d	file:
PV_FDC	vim/vim/src/option.c	204;"	d	file:
PV_FDE	vim/vim/src/option.c	212;"	d	file:
PV_FDI	vim/vim/src/option.c	206;"	d	file:
PV_FDL	vim/vim/src/option.c	207;"	d	file:
PV_FDM	vim/vim/src/option.c	208;"	d	file:
PV_FDN	vim/vim/src/option.c	210;"	d	file:
PV_FDT	vim/vim/src/option.c	213;"	d	file:
PV_FEN	vim/vim/src/option.c	205;"	d	file:
PV_FENC	vim/vim/src/option.c	105;"	d	file:
PV_FEX	vim/vim/src/option.c	112;"	d	file:
PV_FF	vim/vim/src/option.c	114;"	d	file:
PV_FIXEOL	vim/vim/src/option.c	101;"	d	file:
PV_FLP	vim/vim/src/option.c	115;"	d	file:
PV_FML	vim/vim/src/option.c	209;"	d	file:
PV_FMR	vim/vim/src/option.c	215;"	d	file:
PV_FO	vim/vim/src/option.c	116;"	d	file:
PV_FP	vim/vim/src/option.c	110;"	d	file:
PV_FT	vim/vim/src/option.c	118;"	d	file:
PV_GP	vim/vim/src/option.c	64;"	d	file:
PV_IMI	vim/vim/src/option.c	120;"	d	file:
PV_IMS	vim/vim/src/option.c	121;"	d	file:
PV_INC	vim/vim/src/option.c	98;"	d	file:
PV_INDE	vim/vim/src/option.c	123;"	d	file:
PV_INDK	vim/vim/src/option.c	124;"	d	file:
PV_INEX	vim/vim/src/option.c	127;"	d	file:
PV_INF	vim/vim/src/option.c	129;"	d	file:
PV_ISK	vim/vim/src/option.c	130;"	d	file:
PV_KEY	vim/vim/src/option.c	132;"	d	file:
PV_KMAP	vim/vim/src/option.c	135;"	d	file:
PV_KP	vim/vim/src/option.c	137;"	d	file:
PV_LBR	vim/vim/src/option.c	218;"	d	file:
PV_LISP	vim/vim/src/option.c	139;"	d	file:
PV_LIST	vim/vim/src/option.c	192;"	d	file:
PV_LW	vim/vim/src/option.c	140;"	d	file:
PV_MA	vim/vim/src/option.c	145;"	d	file:
PV_MASK	vim/vim/src/option.c	48;"	d	file:
PV_MAXVAL	vim/vim/src/option.c	/^    PV_MAXVAL = 0xffff    \/* to avoid warnings for value out of range *\/$/;"	e	enum:__anon159	file:
PV_MENC	vim/vim/src/option.c	143;"	d	file:
PV_ML	vim/vim/src/option.c	146;"	d	file:
PV_MOD	vim/vim/src/option.c	147;"	d	file:
PV_MP	vim/vim/src/option.c	65;"	d	file:
PV_MPS	vim/vim/src/option.c	148;"	d	file:
PV_NF	vim/vim/src/option.c	149;"	d	file:
PV_NONE	vim/vim/src/option.c	/^    PV_NONE = 0,$/;"	e	enum:__anon159	file:
PV_NU	vim/vim/src/option.c	220;"	d	file:
PV_NUW	vim/vim/src/option.c	223;"	d	file:
PV_OFU	vim/vim/src/option.c	151;"	d	file:
PV_PATH	vim/vim/src/option.c	153;"	d	file:
PV_PI	vim/vim/src/option.c	154;"	d	file:
PV_PVW	vim/vim/src/option.c	226;"	d	file:
PV_QE	vim/vim/src/option.c	156;"	d	file:
PV_RL	vim/vim/src/option.c	229;"	d	file:
PV_RLC	vim/vim/src/option.c	230;"	d	file:
PV_RNU	vim/vim/src/option.c	221;"	d	file:
PV_RO	vim/vim/src/option.c	158;"	d	file:
PV_SCBIND	vim/vim/src/option.c	233;"	d	file:
PV_SCL	vim/vim/src/option.c	265;"	d	file:
PV_SCROLL	vim/vim/src/option.c	235;"	d	file:
PV_SI	vim/vim/src/option.c	160;"	d	file:
PV_SMC	vim/vim/src/option.c	164;"	d	file:
PV_SN	vim/vim/src/option.c	162;"	d	file:
PV_SPC	vim/vim/src/option.c	168;"	d	file:
PV_SPELL	vim/vim/src/option.c	237;"	d	file:
PV_SPF	vim/vim/src/option.c	169;"	d	file:
PV_SPL	vim/vim/src/option.c	170;"	d	file:
PV_STL	vim/vim/src/option.c	245;"	d	file:
PV_STS	vim/vim/src/option.c	172;"	d	file:
PV_SUA	vim/vim/src/option.c	174;"	d	file:
PV_SW	vim/vim/src/option.c	176;"	d	file:
PV_SWF	vim/vim/src/option.c	177;"	d	file:
PV_SYN	vim/vim/src/option.c	165;"	d	file:
PV_TAGS	vim/vim/src/option.c	178;"	d	file:
PV_TC	vim/vim/src/option.c	179;"	d	file:
PV_TK	vim/vim/src/option.c	261;"	d	file:
PV_TMS	vim/vim/src/option.c	262;"	d	file:
PV_TS	vim/vim/src/option.c	180;"	d	file:
PV_TSR	vim/vim/src/option.c	91;"	d	file:
PV_TW	vim/vim/src/option.c	181;"	d	file:
PV_TX	vim/vim/src/option.c	182;"	d	file:
PV_UDF	vim/vim/src/option.c	184;"	d	file:
PV_UL	vim/vim/src/option.c	247;"	d	file:
PV_WFH	vim/vim/src/option.c	249;"	d	file:
PV_WFW	vim/vim/src/option.c	250;"	d	file:
PV_WIN	vim/vim/src/option.c	46;"	d	file:
PV_WM	vim/vim/src/option.c	186;"	d	file:
PV_WRAP	vim/vim/src/option.c	252;"	d	file:
PWORD	vim/vim/src/gui_w32.c	/^typedef int PWORD;$/;"	t	file:
PY3OBJ_DELETED	vim/vim/src/if_python3.c	799;"	d	file:
PYINITIALISED	vim/vim/src/if_python.c	781;"	d	file:
PYINITIALISED	vim/vim/src/if_python3.c	736;"	d	file:
PYTHON3INC	vim/vim/src/Make_cyg_ming.mak	/^PYTHON3INC=-I $(PYTHON3)\/include$/;"	m
PYTHON3INC	vim/vim/src/Make_cyg_ming.mak	/^PYTHON3INC=-I $(PYTHON3)\/win32inc$/;"	m
PYTHON3LIB	vim/vim/src/Make_cyg_ming.mak	/^PYTHON3LIB=-L$(PYTHON3)\/libs -lpython$(PYTHON3_VER)$/;"	m
PYTHON3_CFLAGS	vim/vim/src/auto/config.mk	/^PYTHON3_CFLAGS	= $/;"	m
PYTHON3_CONFDIR	vim/vim/src/auto/config.mk	/^PYTHON3_CONFDIR	= $/;"	m
PYTHON3_HOME_DEF	vim/vim/src/Make_cyg_ming.mak	/^PYTHON3_HOME_DEF=-DPYTHON3_HOME=L\\"$(PYTHON3_HOME)\\"$/;"	m
PYTHON3_INC	vim/vim/src/Make_mvc.mak	/^PYTHON3_INC = \/I "$(PYTHON3)\\Include" \/I "$(PYTHON3)\\PC"$/;"	m
PYTHON3_LIB	vim/vim/src/Make_mvc.mak	/^PYTHON3_LIB = $(PYTHON3)\\libs\\python$(PYTHON3_VER).lib$/;"	m
PYTHON3_LIB	vim/vim/src/Make_mvc.mak	/^PYTHON3_LIB = \/nodefaultlib:python$(PYTHON3_VER).lib$/;"	m
PYTHON3_LIBS	vim/vim/src/auto/config.mk	/^PYTHON3_LIBS	= $/;"	m
PYTHON3_LIB_FLAG	vim/vim/src/Make_bc5.mak	/^PYTHON3_LIB_FLAG = \/nodefaultlib:$/;"	m
PYTHON3_OBJ	vim/vim/src/Make_mvc.mak	/^PYTHON3_OBJ = $(OUTDIR)\\if_python3.obj$/;"	m
PYTHON3_OBJ	vim/vim/src/auto/config.mk	/^PYTHON3_OBJ	= $/;"	m
PYTHON3_SRC	vim/vim/src/auto/config.mk	/^PYTHON3_SRC	= $/;"	m
PYTHON3_VER	vim/vim/src/Make_bc5.mak	/^PYTHON3_VER = 31$/;"	m
PYTHON3_VER	vim/vim/src/Make_cyg_ming.mak	/^PYTHON3_VER=35$/;"	m
PYTHON3_VER	vim/vim/src/Make_mvc.mak	/^PYTHON3_VER = 35$/;"	m
PYTHONINC	vim/vim/src/Make_cyg_ming.mak	/^PYTHONINC=-I $(PYTHON)\/include$/;"	m
PYTHONINC	vim/vim/src/Make_cyg_ming.mak	/^PYTHONINC=-I $(PYTHON)\/win32inc$/;"	m
PYTHONLIB	vim/vim/src/Make_cyg_ming.mak	/^PYTHONLIB=-L$(PYTHON)\/libs -lpython$(PYTHON_VER)$/;"	m
PYTHONX_STRING_LENGTH	vim/vim/src/if_py_both.h	1103;"	d
PYTHON_CFLAGS	vim/vim/src/auto/config.mk	/^PYTHON_CFLAGS	= -I\/usr\/include\/python2.7 -DPYTHON_HOME='"\/usr"' -pthread -fPIE$/;"	m
PYTHON_CONFDIR	vim/vim/src/auto/config.mk	/^PYTHON_CONFDIR	= \/usr\/lib\/python2.7\/config-x86_64-linux-gnu\/$/;"	m
PYTHON_GETPATH_CFLAGS	vim/vim/src/auto/config.mk	/^PYTHON_GETPATH_CFLAGS = -DPYTHONPATH='":\/usr\/lib\/python2.7:\/usr\/lib\/python2.7\/plat-x86_64-linux-gnu:\/usr\/lib\/python2.7\/lib-tk:\/usr\/lib\/python2.7\/lib-old:\/usr\/lib\/python2.7\/lib-dynload:\/usr\/local\/lib\/python2.7\/dist-packages:\/usr\/lib\/python2.7\/dist-packages:\/usr\/lib\/python2.7\/dist-packages\/PILcompat:\/usr\/lib\/python2.7\/dist-packages\/gtk-2.0:\/usr\/lib\/python2.7\/dist-packages\/ubuntu-sso-client"' -DPREFIX='"\/usr"' -DEXEC_PREFIX='"\/usr"'$/;"	m
PYTHON_HOME_DEF	vim/vim/src/Make_cyg_ming.mak	/^PYTHON_HOME_DEF=-DPYTHON_HOME=\\"$(PYTHON_HOME)\\"$/;"	m
PYTHON_INC	vim/vim/src/Make_mvc.mak	/^PYTHON_INC = \/I "$(PYTHON)\\Include" \/I "$(PYTHON)\\PC"$/;"	m
PYTHON_LIB	vim/vim/src/Make_mvc.mak	/^PYTHON_LIB = $(PYTHON)\\libs\\python$(PYTHON_VER).lib$/;"	m
PYTHON_LIB	vim/vim/src/Make_mvc.mak	/^PYTHON_LIB = \/nodefaultlib:python$(PYTHON_VER).lib$/;"	m
PYTHON_LIBS	vim/vim/src/auto/config.mk	/^PYTHON_LIBS	= -L\/usr\/lib\/python2.7\/config-x86_64-linux-gnu\/ -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions$/;"	m
PYTHON_LIB_FLAG	vim/vim/src/Make_bc5.mak	/^PYTHON_LIB_FLAG = \/nodefaultlib:$/;"	m
PYTHON_OBJ	vim/vim/src/Make_mvc.mak	/^PYTHON_OBJ = $(OUTDIR)\\if_python.obj$/;"	m
PYTHON_OBJ	vim/vim/src/auto/config.mk	/^PYTHON_OBJ	= objects\/if_python.o$/;"	m
PYTHON_PROC	vim/vim/src/if_python.c	487;"	d	file:
PYTHON_PROC	vim/vim/src/if_python3.c	456;"	d	file:
PYTHON_SRC	vim/vim/src/auto/config.mk	/^PYTHON_SRC	= if_python.c$/;"	m
PYTHON_VER	vim/vim/src/Make_bc5.mak	/^PYTHON_VER = 22$/;"	m
PYTHON_VER	vim/vim/src/Make_cyg_ming.mak	/^PYTHON_VER=27$/;"	m
PYTHON_VER	vim/vim/src/Make_mvc.mak	/^PYTHON_VER = 27$/;"	m
PYTYPE_READY	vim/vim/src/if_py_both.h	6589;"	d
PY_ALTERNATE_DIR_STRING	vim/vim/src/if_py_both.h	1101;"	d
PY_CAN_RECURSE	vim/vim/src/if_python.c	124;"	d	file:
PY_CAN_RECURSE	vim/vim/src/if_python3.c	787;"	d	file:
PY_MAIN_DIR_STRING	vim/vim/src/if_py_both.h	1097;"	d
PY_NO_MAPPING_KEYS	vim/vim/src/if_python.c	215;"	d	file:
PY_SSIZE_T_CLEAN	vim/vim/src/if_python.c	65;"	d	file:
PY_SSIZE_T_CLEAN	vim/vim/src/if_python.c	70;"	d	file:
PY_SSIZE_T_CLEAN	vim/vim/src/if_python3.c	73;"	d	file:
PY_STRSAVE	vim/vim/src/if_python.c	822;"	d	file:
PY_USE_CAPSULE	vim/vim/src/if_python.c	94;"	d	file:
PY_USE_CAPSULE	vim/vim/src/if_python3.c	92;"	d	file:
P_ALLOCED	vim/vim/src/option.c	428;"	d	file:
P_BOOL	vim/vim/src/option.c	425;"	d	file:
P_COMMA	vim/vim/src/option.c	449;"	d	file:
P_CURSWANT	vim/vim/src/option.c	463;"	d	file:
P_DEF_ALLOCED	vim/vim/src/option.c	435;"	d	file:
P_EXPAND	vim/vim/src/option.c	432;"	d	file:
P_FLAGLIST	vim/vim/src/option.c	453;"	d	file:
P_GETTEXT	vim/vim/src/option.c	456;"	d	file:
P_HID	vim/vim/src/option.h	564;"	d
P_HID	vim/vim/src/option.h	566;"	d
P_INSECURE	vim/vim/src/option.c	459;"	d	file:
P_NDNAME	vim/vim/src/option.c	465;"	d	file:
P_NFNAME	vim/vim/src/option.c	458;"	d	file:
P_NODEFAULT	vim/vim/src/option.c	434;"	d	file:
P_NODUP	vim/vim/src/option.c	452;"	d	file:
P_NOGLOB	vim/vim/src/option.c	457;"	d	file:
P_NO_MKRC	vim/vim/src/option.c	438;"	d	file:
P_NO_ML	vim/vim/src/option.c	462;"	d	file:
P_NUM	vim/vim/src/option.c	426;"	d	file:
P_ONECOMMA	vim/vim/src/option.c	450;"	d	file:
P_PRI_MKRC	vim/vim/src/option.c	460;"	d	file:
P_RALL	vim/vim/src/option.c	446;"	d	file:
P_RBUF	vim/vim/src/option.c	445;"	d	file:
P_RCLR	vim/vim/src/option.c	447;"	d	file:
P_RSTAT	vim/vim/src/option.c	443;"	d	file:
P_RWIN	vim/vim/src/option.c	444;"	d	file:
P_RWINONLY	vim/vim/src/option.c	466;"	d	file:
P_SECURE	vim/vim/src/option.c	455;"	d	file:
P_STRING	vim/vim/src/option.c	427;"	d	file:
P_VIM	vim/vim/src/option.c	440;"	d	file:
P_VI_DEF	vim/vim/src/option.c	439;"	d	file:
P_WAS_SET	vim/vim/src/option.c	437;"	d	file:
PaintArrows	vim/vim/src/gui_at_sb.c	/^PaintArrows(ScrollbarWidget sbw)$/;"	f	file:	signature:(ScrollbarWidget sbw)
PaintThumb	vim/vim/src/gui_at_sb.c	/^PaintThumb(ScrollbarWidget sbw)$/;"	f	file:	signature:(ScrollbarWidget sbw)
PeekNotifyEvent	vim/vim/src/gui_at_sb.c	/^PeekNotifyEvent(Display *dpy, XEvent *event, char *args)$/;"	f	file:	signature:(Display *dpy, XEvent *event, char *args)
PendingCommand	vim/vim/src/if_xcmdsrv.c	/^typedef struct PendingCommand$/;"	s	file:
PendingCommand	vim/vim/src/if_xcmdsrv.c	/^} PendingCommand;$/;"	t	typeref:struct:PendingCommand	file:
PendingCommand::code	vim/vim/src/if_xcmdsrv.c	/^    int	    code;	\/* Result Code. 0 is OK *\/$/;"	m	struct:PendingCommand	file:	access:public
PendingCommand::nextPtr	vim/vim/src/if_xcmdsrv.c	/^    struct PendingCommand *nextPtr;$/;"	m	struct:PendingCommand	typeref:struct:PendingCommand::PendingCommand	file:	access:public
PendingCommand::result	vim/vim/src/if_xcmdsrv.c	/^    char_u  *result;	\/* String result for command (malloc'ed).$/;"	m	struct:PendingCommand	file:	access:public
PendingCommand::serial	vim/vim/src/if_xcmdsrv.c	/^    int	    serial;	\/* Serial number expected in result. *\/$/;"	m	struct:PendingCommand	file:	access:public
PgColor_t	vim/vim/src/gui_photon.c	25;"	d	file:
Pg_BLACK	vim/vim/src/gui_photon.c	29;"	d	file:
PhEvent_t	vim/vim/src/gui_photon.c	26;"	d	file:
PhImage_t	vim/vim/src/gui_photon.c	34;"	d	file:
PhPoint_t	vim/vim/src/gui_photon.c	27;"	d	file:
PhTile_t	vim/vim/src/gui_photon.c	32;"	d	file:
Pixel	vim/vim/src/xpm/include/simx.h	/^typedef COLORREF Pixel;$/;"	t
Pixel	vim/vim/src/xpm/include/xpm.h	/^typedef unsigned long Pixel;	\/* Index into colormap *\/$/;"	t
PixelToDialogX	vim/vim/src/gui_w32.c	/^PixelToDialogX(int numPixels)$/;"	f	file:	signature:(int numPixels)
PixelToDialogY	vim/vim/src/gui_w32.c	/^PixelToDialogY(int numPixels)$/;"	f	file:	signature:(int numPixels)
PixelsToDipsX	vim/vim/src/gui_dwrite.cpp	/^    float PixelsToDipsX(int x);$/;"	p	struct:DWriteContext	file:	access:public	signature:(int x)
PixelsToDipsX	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::PixelsToDipsX(int x)$/;"	f	class:DWriteContext	signature:(int x)
PixelsToDipsY	vim/vim/src/gui_dwrite.cpp	/^    float PixelsToDipsY(int y);$/;"	p	struct:DWriteContext	file:	access:public	signature:(int y)
PixelsToDipsY	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::PixelsToDipsY(int y)$/;"	f	class:DWriteContext	signature:(int y)
PixmapColorError	vim/vim/src/xpm/include/xpm.h	482;"	d
PixmapColorFailed	vim/vim/src/xpm/include/xpm.h	487;"	d
PixmapFileInvalid	vim/vim/src/xpm/include/xpm.h	485;"	d
PixmapNoMemory	vim/vim/src/xpm/include/xpm.h	486;"	d
PixmapOpenFailed	vim/vim/src/xpm/include/xpm.h	484;"	d
PixmapSuccess	vim/vim/src/xpm/include/xpm.h	483;"	d
PlatformId	vim/vim/src/GvimExt/gvimext.cpp	/^PlatformId(void)$/;"	f	file:	signature:(void)
PlatformId	vim/vim/src/dosinst.h	/^PlatformId(void)$/;"	f	signature:(void)
PlatformId	vim/vim/src/os_win32.c	/^PlatformId(void)$/;"	f	signature:(void)
Port_Info	vim/vim/src/if_mzsch.c	/^} Port_Info;$/;"	t	typeref:struct:__anon10	file:
PreLink_Cmds	vim/vim/src/Make_ivc.mak	/^PreLink_Cmds=@if exist .\\oleDbg\\gvimd.pdb del .\\oleDbg\\gvimd.pdb$/;"	m
Print	vim/vim/src/if_cscope.h	/^    Print$/;"	e	enum:__anon70
PrintDlgProc	vim/vim/src/os_mswin.c	/^PrintDlgProc($/;"	f	file:	signature:( HWND hDlg, UINT message, WPARAM wParam UNUSED, LPARAM lParam UNUSED)
PrintHookProc	vim/vim/src/os_mswin.c	/^PrintHookProc($/;"	f	file:	signature:( HWND hDlg, UINT uiMsg, WPARAM wParam, LPARAM lParam )
PtCallbackF_t	vim/vim/src/gui_photon.c	30;"	d	file:
PtCallbackInfo_t	vim/vim/src/gui_photon.c	31;"	d	file:
PtWidget_t	vim/vim/src/gui_photon.c	28;"	d	file:
PtWidget_t	vim/vim/src/gui_photon.c	33;"	d	file:
Ptrlist	vim/vim/src/regexp_nfa.c	/^typedef union Ptrlist Ptrlist;$/;"	t	typeref:union:Ptrlist	file:
Ptrlist	vim/vim/src/regexp_nfa.c	/^union Ptrlist$/;"	u	file:
Ptrlist::next	vim/vim/src/regexp_nfa.c	/^    Ptrlist	*next;$/;"	m	union:Ptrlist	file:	access:public
Ptrlist::s	vim/vim/src/regexp_nfa.c	/^    nfa_state_T	*s;$/;"	m	union:Ptrlist	file:	access:public
PtyProto	vim/vim/src/pty.c	/^static char PtyProto[] = "\/dev\/pt\/XY";$/;"	v	file:
PtyProto	vim/vim/src/pty.c	/^static char PtyProto[] = "\/dev\/ptyXY";$/;"	v	file:
PtyProto	vim/vim/src/pty.c	/^static char PtyProto[] = "\/dev\/ptym\/ptyXY";$/;"	v	file:
PushToWindow	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::PushToWindow(HWND  \/* hParent *\/,$/;"	f	class:CShellExt	signature:(HWND , LPCSTR , LPCSTR , LPCSTR , int , int idHWnd)
PutProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::PutProperty (DISPID DispatchId, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(DISPID DispatchId, LPCTSTR Format, ...)
PutProperty	vim/vim/src/VisVim/OleAut.cpp	/^bool COleAutomationControl::PutProperty (char* Name, LPCTSTR Format, ...)$/;"	f	class:COleAutomationControl	signature:(char* Name, LPCTSTR Format, ...)
Py3Init_vim	vim/vim/src/if_python3.c	/^Py3Init_vim(void)$/;"	f	file:	signature:(void)
Py3Init_vim	vim/vim/src/if_python3.c	/^static PyObject *Py3Init_vim(void);$/;"	p	file:	signature:(void)
PyArg_Parse	vim/vim/src/if_python.c	153;"	d	file:
PyArg_Parse	vim/vim/src/if_python.c	164;"	d	file:
PyArg_Parse	vim/vim/src/if_python3.c	143;"	d	file:
PyArg_Parse	vim/vim/src/if_python3.c	144;"	d	file:
PyArg_ParseTuple	vim/vim/src/if_python.c	154;"	d	file:
PyArg_ParseTuple	vim/vim/src/if_python.c	165;"	d	file:
PyArg_ParseTuple	vim/vim/src/if_python3.c	145;"	d	file:
PyArg_ParseTuple	vim/vim/src/if_python3.c	146;"	d	file:
PyBool_Type	vim/vim/src/if_python.c	191;"	d	file:
PyBool_Type	vim/vim/src/if_python3.c	247;"	d	file:
PyBytes_AsString	vim/vim/src/if_python3.c	232;"	d	file:
PyBytes_AsString	vim/vim/src/if_python3.c	233;"	d	file:
PyBytes_AsStringAndSize	vim/vim/src/if_python.c	82;"	d	file:
PyBytes_AsStringAndSize	vim/vim/src/if_python3.c	235;"	d	file:
PyBytes_Check	vim/vim/src/if_python.c	81;"	d	file:
PyBytes_FromString	vim/vim/src/if_python.c	80;"	d	file:
PyBytes_FromString	vim/vim/src/if_python3.c	237;"	d	file:
PyBytes_FromString	vim/vim/src/if_python3.c	238;"	d	file:
PyCObject_AsVoidPtr	vim/vim/src/if_python.c	305;"	d	file:
PyCObject_FromVoidPtr	vim/vim/src/if_python.c	304;"	d	file:
PyCapsule_GetPointer	vim/vim/src/if_python.c	302;"	d	file:
PyCapsule_GetPointer	vim/vim/src/if_python3.c	285;"	d	file:
PyCapsule_New	vim/vim/src/if_python.c	301;"	d	file:
PyCapsule_New	vim/vim/src/if_python3.c	284;"	d	file:
PyDict_GetItemString	vim/vim/src/if_python.c	211;"	d	file:
PyDict_GetItemString	vim/vim/src/if_python3.c	183;"	d	file:
PyDict_New	vim/vim/src/if_python.c	210;"	d	file:
PyDict_New	vim/vim/src/if_python3.c	182;"	d	file:
PyDict_Next	vim/vim/src/if_python.c	212;"	d	file:
PyDict_Next	vim/vim/src/if_python3.c	184;"	d	file:
PyDict_SetItemString	vim/vim/src/if_python.c	168;"	d	file:
PyDict_SetItemString	vim/vim/src/if_python3.c	149;"	d	file:
PyDict_Type	vim/vim/src/if_python.c	213;"	d	file:
PyErr_BadArgument	vim/vim/src/if_python.c	169;"	d	file:
PyErr_BadArgument	vim/vim/src/if_python3.c	150;"	d	file:
PyErr_Clear	vim/vim/src/if_python.c	171;"	d	file:
PyErr_Clear	vim/vim/src/if_python3.c	151;"	d	file:
PyErr_ExceptionMatches	vim/vim/src/if_python.c	179;"	d	file:
PyErr_ExceptionMatches	vim/vim/src/if_python3.c	159;"	d	file:
PyErr_FORMAT	vim/vim/src/if_py_both.h	39;"	d
PyErr_FORMAT2	vim/vim/src/if_py_both.h	40;"	d
PyErr_Format	vim/vim/src/if_python.c	172;"	d	file:
PyErr_Format	vim/vim/src/if_python3.c	152;"	d	file:
PyErr_NewException	vim/vim/src/if_python.c	170;"	d	file:
PyErr_NewException	vim/vim/src/if_python3.c	248;"	d	file:
PyErr_NoMemory	vim/vim/src/if_python.c	174;"	d	file:
PyErr_NoMemory	vim/vim/src/if_python3.c	154;"	d	file:
PyErr_Occurred	vim/vim/src/if_python.c	175;"	d	file:
PyErr_Occurred	vim/vim/src/if_python3.c	155;"	d	file:
PyErr_PrintEx	vim/vim/src/if_python.c	173;"	d	file:
PyErr_PrintEx	vim/vim/src/if_python3.c	153;"	d	file:
PyErr_SET_STRING	vim/vim/src/if_py_both.h	36;"	d
PyErr_SET_VIM	vim/vim/src/if_py_both.h	38;"	d
PyErr_SetNone	vim/vim/src/if_python.c	176;"	d	file:
PyErr_SetNone	vim/vim/src/if_python3.c	156;"	d	file:
PyErr_SetObject	vim/vim/src/if_python.c	178;"	d	file:
PyErr_SetObject	vim/vim/src/if_python3.c	158;"	d	file:
PyErr_SetString	vim/vim/src/if_python.c	177;"	d	file:
PyErr_SetString	vim/vim/src/if_python3.c	157;"	d	file:
PyErr_SetVim	vim/vim/src/if_py_both.h	37;"	d
PyErr_VIM_FORMAT	vim/vim/src/if_py_both.h	41;"	d
PyEval_GetGlobals	vim/vim/src/if_python3.c	206;"	d	file:
PyEval_GetLocals	vim/vim/src/if_python3.c	205;"	d	file:
PyEval_InitThreads	vim/vim/src/if_python.c	180;"	d	file:
PyEval_InitThreads	vim/vim/src/if_python3.c	160;"	d	file:
PyEval_RestoreThread	vim/vim/src/if_python.c	181;"	d	file:
PyEval_RestoreThread	vim/vim/src/if_python3.c	161;"	d	file:
PyEval_SaveThread	vim/vim/src/if_python.c	182;"	d	file:
PyEval_SaveThread	vim/vim/src/if_python3.c	162;"	d	file:
PyExc_AttributeError	vim/vim/src/if_python.c	473;"	d	file:
PyExc_AttributeError	vim/vim/src/if_python3.c	442;"	d	file:
PyExc_ImportError	vim/vim/src/if_python.c	481;"	d	file:
PyExc_ImportError	vim/vim/src/if_python3.c	450;"	d	file:
PyExc_IndexError	vim/vim/src/if_python.c	474;"	d	file:
PyExc_IndexError	vim/vim/src/if_python3.c	443;"	d	file:
PyExc_KeyError	vim/vim/src/if_python.c	475;"	d	file:
PyExc_KeyError	vim/vim/src/if_python3.c	444;"	d	file:
PyExc_KeyboardInterrupt	vim/vim/src/if_python.c	476;"	d	file:
PyExc_KeyboardInterrupt	vim/vim/src/if_python3.c	445;"	d	file:
PyExc_OverflowError	vim/vim/src/if_python.c	482;"	d	file:
PyExc_OverflowError	vim/vim/src/if_python3.c	451;"	d	file:
PyExc_RuntimeError	vim/vim/src/if_python.c	480;"	d	file:
PyExc_RuntimeError	vim/vim/src/if_python3.c	449;"	d	file:
PyExc_SystemExit	vim/vim/src/if_python.c	479;"	d	file:
PyExc_SystemExit	vim/vim/src/if_python3.c	448;"	d	file:
PyExc_TypeError	vim/vim/src/if_python.c	477;"	d	file:
PyExc_TypeError	vim/vim/src/if_python3.c	446;"	d	file:
PyExc_ValueError	vim/vim/src/if_python.c	478;"	d	file:
PyExc_ValueError	vim/vim/src/if_python3.c	447;"	d	file:
PyFloat_AsDouble	vim/vim/src/if_python.c	244;"	d	file:
PyFloat_AsDouble	vim/vim/src/if_python3.c	240;"	d	file:
PyFloat_FromDouble	vim/vim/src/if_python.c	245;"	d	file:
PyFloat_FromDouble	vim/vim/src/if_python3.c	239;"	d	file:
PyFloat_Type	vim/vim/src/if_python.c	246;"	d	file:
PyFloat_Type	vim/vim/src/if_python3.c	244;"	d	file:
PyGILState_Ensure	vim/vim/src/if_python.c	184;"	d	file:
PyGILState_Ensure	vim/vim/src/if_python3.c	163;"	d	file:
PyGILState_Release	vim/vim/src/if_python.c	185;"	d	file:
PyGILState_Release	vim/vim/src/if_python3.c	164;"	d	file:
PyImport_AddModule	vim/vim/src/if_python.c	249;"	d	file:
PyImport_AddModule	vim/vim/src/if_python3.c	223;"	d	file:
PyImport_AppendInittab	vim/vim/src/if_python3.c	222;"	d	file:
PyImport_ImportModule	vim/vim/src/if_python.c	209;"	d	file:
PyImport_ImportModule	vim/vim/src/if_python3.c	180;"	d	file:
PyInquiry	vim/vim/src/if_python.c	108;"	d	file:
PyInquiry	vim/vim/src/if_python.c	99;"	d	file:
PyInt	vim/vim/src/if_python.c	106;"	d	file:
PyInt	vim/vim/src/if_python.c	98;"	d	file:
PyInt	vim/vim/src/if_python3.c	94;"	d	file:
PyIntArgFunc	vim/vim/src/if_python.c	100;"	d	file:
PyIntArgFunc	vim/vim/src/if_python.c	109;"	d	file:
PyIntArgFunc	vim/vim/src/if_python3.c	109;"	d	file:
PyIntIntArgFunc	vim/vim/src/if_python.c	101;"	d	file:
PyIntIntArgFunc	vim/vim/src/if_python.c	110;"	d	file:
PyIntIntObjArgProc	vim/vim/src/if_python.c	103;"	d	file:
PyIntIntObjArgProc	vim/vim/src/if_python.c	112;"	d	file:
PyIntObjArgProc	vim/vim/src/if_python.c	102;"	d	file:
PyIntObjArgProc	vim/vim/src/if_python.c	111;"	d	file:
PyIntObjArgProc	vim/vim/src/if_python3.c	110;"	d	file:
PyInt_AsLong	vim/vim/src/if_python.c	187;"	d	file:
PyInt_AsLong	vim/vim/src/if_python3.c	105;"	d	file:
PyInt_Check	vim/vim/src/if_python3.c	102;"	d	file:
PyInt_FromLong	vim/vim/src/if_python.c	188;"	d	file:
PyInt_FromLong	vim/vim/src/if_python3.c	104;"	d	file:
PyInt_Type	vim/vim/src/if_python.c	192;"	d	file:
PyIter_Next	vim/vim/src/if_python.c	222;"	d	file:
PyIter_Next	vim/vim/src/if_python3.c	189;"	d	file:
PyList_Append	vim/vim/src/if_python.c	195;"	d	file:
PyList_Append	vim/vim/src/if_python3.c	168;"	d	file:
PyList_GetItem	vim/vim/src/if_python.c	194;"	d	file:
PyList_GetItem	vim/vim/src/if_python3.c	167;"	d	file:
PyList_Insert	vim/vim/src/if_python.c	196;"	d	file:
PyList_Insert	vim/vim/src/if_python3.c	169;"	d	file:
PyList_New	vim/vim/src/if_python.c	197;"	d	file:
PyList_New	vim/vim/src/if_python3.c	170;"	d	file:
PyList_SetItem	vim/vim/src/if_python.c	198;"	d	file:
PyList_SetItem	vim/vim/src/if_python3.c	171;"	d	file:
PyList_Size	vim/vim/src/if_python.c	199;"	d	file:
PyList_Size	vim/vim/src/if_python3.c	172;"	d	file:
PyList_Type	vim/vim/src/if_python.c	200;"	d	file:
PyLong_AsLong	vim/vim/src/if_python.c	189;"	d	file:
PyLong_AsLong	vim/vim/src/if_python3.c	165;"	d	file:
PyLong_FromLong	vim/vim/src/if_python.c	190;"	d	file:
PyLong_FromLong	vim/vim/src/if_python3.c	166;"	d	file:
PyLong_Type	vim/vim/src/if_python.c	193;"	d	file:
PyMapping_Check	vim/vim/src/if_python.c	221;"	d	file:
PyMapping_Check	vim/vim/src/if_python3.c	185;"	d	file:
PyMapping_Keys	vim/vim/src/if_python.c	217;"	d	file:
PyMapping_Keys	vim/vim/src/if_python3.c	187;"	d	file:
PyMem_Free	vim/vim/src/if_python.c	166;"	d	file:
PyMem_Free	vim/vim/src/if_python3.c	147;"	d	file:
PyMem_Malloc	vim/vim/src/if_python.c	167;"	d	file:
PyMem_Malloc	vim/vim/src/if_python3.c	148;"	d	file:
PyMethodDef	vim/vim/src/if_python.c	/^struct PyMethodDef { Py_ssize_t a; };$/;"	s	file:
PyMethodDef::a	vim/vim/src/if_python.c	/^struct PyMethodDef { Py_ssize_t a; };$/;"	m	struct:PyMethodDef	file:	access:public
PyModule_AddObject	vim/vim/src/if_python.c	224;"	d	file:
PyModule_AddObject	vim/vim/src/if_python3.c	221;"	d	file:
PyModule_Create2	vim/vim/src/if_python3.c	255;"	d	file:
PyModule_Create2TraceRefs	vim/vim/src/if_python3.c	253;"	d	file:
PyModule_GetDict	vim/vim/src/if_python.c	223;"	d	file:
PyModule_GetDict	vim/vim/src/if_python3.c	194;"	d	file:
PyNumber_Check	vim/vim/src/if_python.c	247;"	d	file:
PyNumber_Check	vim/vim/src/if_python3.c	245;"	d	file:
PyNumber_Long	vim/vim/src/if_python.c	248;"	d	file:
PyNumber_Long	vim/vim/src/if_python3.c	246;"	d	file:
PyObject	vim/vim/src/if_python.c	86;"	d	file:
PyObject_Call	vim/vim/src/if_python.c	232;"	d	file:
PyObject_Call	vim/vim/src/if_python3.c	204;"	d	file:
PyObject_CallFunction	vim/vim/src/if_python.c	159;"	d	file:
PyObject_CallFunction	vim/vim/src/if_python.c	231;"	d	file:
PyObject_CallFunctionObjArgs	vim/vim/src/if_python.c	230;"	d	file:
PyObject_CallFunctionObjArgs	vim/vim/src/if_python3.c	202;"	d	file:
PyObject_CallMethod	vim/vim/src/if_python.c	158;"	d	file:
PyObject_CallMethod	vim/vim/src/if_python.c	220;"	d	file:
PyObject_Free	vim/vim/src/if_python.c	297;"	d	file:
PyObject_Free	vim/vim/src/if_python3.c	262;"	d	file:
PyObject_GC_Del	vim/vim/src/if_python.c	271;"	d	file:
PyObject_GC_Del	vim/vim/src/if_python3.c	265;"	d	file:
PyObject_GC_UnTrack	vim/vim/src/if_python.c	272;"	d	file:
PyObject_GC_UnTrack	vim/vim/src/if_python3.c	266;"	d	file:
PyObject_GenericGetAttr	vim/vim/src/if_python3.c	241;"	d	file:
PyObject_GetAttrString	vim/vim/src/if_python.c	227;"	d	file:
PyObject_GetAttrString	vim/vim/src/if_python3.c	199;"	d	file:
PyObject_GetItem	vim/vim/src/if_python.c	219;"	d	file:
PyObject_GetItem	vim/vim/src/if_python3.c	192;"	d	file:
PyObject_GetIter	vim/vim/src/if_python.c	281;"	d	file:
PyObject_GetIter	vim/vim/src/if_python3.c	190;"	d	file:
PyObject_HasAttrString	vim/vim/src/if_python.c	228;"	d	file:
PyObject_HasAttrString	vim/vim/src/if_python3.c	200;"	d	file:
PyObject_Init	vim/vim/src/if_python.c	280;"	d	file:
PyObject_Init	vim/vim/src/if_python3.c	181;"	d	file:
PyObject_IsTrue	vim/vim/src/if_python.c	282;"	d	file:
PyObject_IsTrue	vim/vim/src/if_python3.c	193;"	d	file:
PyObject_Malloc	vim/vim/src/if_python.c	296;"	d	file:
PyObject_Malloc	vim/vim/src/if_python3.c	261;"	d	file:
PyObject_NEW	vim/vim/src/if_python3.c	288;"	d	file:
PyObject_NEW	vim/vim/src/if_python3.c	289;"	d	file:
PyObject_Repr	vim/vim/src/if_python.c	233;"	d	file:
PyObject_Repr	vim/vim/src/if_python3.c	191;"	d	file:
PyObject_SetAttrString	vim/vim/src/if_python.c	229;"	d	file:
PyObject_SetAttrString	vim/vim/src/if_python3.c	201;"	d	file:
PyRun_SimpleString	vim/vim/src/if_python.c	151;"	d	file:
PyRun_SimpleString	vim/vim/src/if_python.c	225;"	d	file:
PyRun_SimpleString	vim/vim/src/if_python3.c	195;"	d	file:
PyRun_SimpleString	vim/vim/src/if_python3.c	196;"	d	file:
PyRun_String	vim/vim/src/if_python.c	152;"	d	file:
PyRun_String	vim/vim/src/if_python.c	226;"	d	file:
PyRun_String	vim/vim/src/if_python3.c	197;"	d	file:
PyRun_String	vim/vim/src/if_python3.c	198;"	d	file:
PySequenceMethods	vim/vim/src/if_python.c	90;"	d	file:
PySequence_Check	vim/vim/src/if_python.c	201;"	d	file:
PySequence_Check	vim/vim/src/if_python3.c	173;"	d	file:
PySequence_Fast	vim/vim/src/if_python.c	204;"	d	file:
PySequence_Fast	vim/vim/src/if_python3.c	176;"	d	file:
PySequence_GetItem	vim/vim/src/if_python.c	203;"	d	file:
PySequence_GetItem	vim/vim/src/if_python3.c	175;"	d	file:
PySequence_Size	vim/vim/src/if_python.c	202;"	d	file:
PySequence_Size	vim/vim/src/if_python3.c	174;"	d	file:
PySliceObject_T	vim/vim/src/if_python.c	/^typedef PySliceObject PySliceObject_T;$/;"	t	file:
PySliceObject_T	vim/vim/src/if_python3.c	/^typedef PyObject PySliceObject_T;$/;"	t	file:
PySliceObject_T	vim/vim/src/if_python3.c	/^typedef PySliceObject PySliceObject_T;$/;"	t	file:
PySlice_GetIndicesEx	vim/vim/src/if_python.c	208;"	d	file:
PySlice_GetIndicesEx	vim/vim/src/if_python3.c	179;"	d	file:
PySlice_Type	vim/vim/src/if_python.c	254;"	d	file:
PySlice_Type	vim/vim/src/if_python3.c	243;"	d	file:
PyString_AsString	vim/vim/src/if_python.c	234;"	d	file:
PyString_AsStringAndSize	vim/vim/src/if_python.c	235;"	d	file:
PyString_Check	vim/vim/src/if_python3.c	96;"	d	file:
PyString_FromFormat	vim/vim/src/if_python.c	237;"	d	file:
PyString_FromFormat	vim/vim/src/if_python3.c	100;"	d	file:
PyString_FromString	vim/vim/src/if_python.c	236;"	d	file:
PyString_FromString	vim/vim/src/if_python3.c	98;"	d	file:
PyString_FromStringAndSize	vim/vim/src/if_python.c	238;"	d	file:
PyString_Size	vim/vim/src/if_python.c	239;"	d	file:
PyString_Type	vim/vim/src/if_python.c	240;"	d	file:
PySys_GetObject	vim/vim/src/if_python.c	251;"	d	file:
PySys_GetObject	vim/vim/src/if_python3.c	208;"	d	file:
PySys_SetArgv	vim/vim/src/if_python.c	252;"	d	file:
PySys_SetArgv	vim/vim/src/if_python3.c	209;"	d	file:
PySys_SetObject	vim/vim/src/if_python.c	250;"	d	file:
PySys_SetObject	vim/vim/src/if_python3.c	207;"	d	file:
PyThreadState	vim/vim/src/if_python.c	/^typedef PyObject PyThreadState;$/;"	t	file:
PyThreadState	vim/vim/src/if_python.c	87;"	d	file:
PyTuple_GetItem	vim/vim/src/if_python.c	206;"	d	file:
PyTuple_GetItem	vim/vim/src/if_python3.c	178;"	d	file:
PyTuple_Size	vim/vim/src/if_python.c	205;"	d	file:
PyTuple_Size	vim/vim/src/if_python3.c	177;"	d	file:
PyTuple_Type	vim/vim/src/if_python.c	207;"	d	file:
PyTypeObject	vim/vim/src/if_python.c	88;"	d	file:
PyType_GenericAlloc	vim/vim/src/if_python.c	256;"	d	file:
PyType_GenericAlloc	vim/vim/src/if_python3.c	267;"	d	file:
PyType_GenericNew	vim/vim/src/if_python3.c	268;"	d	file:
PyType_IsSubtype	vim/vim/src/if_python.c	284;"	d	file:
PyType_IsSubtype	vim/vim/src/if_python3.c	283;"	d	file:
PyType_Ready	vim/vim/src/if_python.c	255;"	d	file:
PyType_Ready	vim/vim/src/if_python3.c	210;"	d	file:
PyType_Type	vim/vim/src/if_python.c	253;"	d	file:
PyType_Type	vim/vim/src/if_python3.c	242;"	d	file:
PyUnicodeUCS2_FromFormat	vim/vim/src/if_python3.c	278;"	d	file:
PyUnicodeUCS4_FromFormat	vim/vim/src/if_python3.c	276;"	d	file:
PyUnicode_AsEncodedString	vim/vim/src/if_python.c	242;"	d	file:
PyUnicode_AsEncodedString	vim/vim/src/if_python.c	243;"	d	file:
PyUnicode_AsEncodedString	vim/vim/src/if_python3.c	230;"	d	file:
PyUnicode_AsEncodedString	vim/vim/src/if_python3.c	231;"	d	file:
PyUnicode_Decode	vim/vim/src/if_python3.c	281;"	d	file:
PyUnicode_Decode	vim/vim/src/if_python3.c	282;"	d	file:
PyUnicode_FromFormat	vim/vim/src/if_python3.c	272;"	d	file:
PyUnicode_FromString	vim/vim/src/if_python3.c	269;"	d	file:
PyUnicode_FromString	vim/vim/src/if_python3.c	270;"	d	file:
PyUnicode_Type	vim/vim/src/if_python.c	241;"	d	file:
Py_BuildValue	vim/vim/src/if_python.c	155;"	d	file:
Py_BuildValue	vim/vim/src/if_python.c	257;"	d	file:
Py_BuildValue	vim/vim/src/if_python3.c	211;"	d	file:
Py_BuildValue	vim/vim/src/if_python3.c	212;"	d	file:
Py_CLEAR	vim/vim/src/if_python.c	803;"	d	file:
Py_Finalize	vim/vim/src/if_python.c	262;"	d	file:
Py_Finalize	vim/vim/src/if_python3.c	215;"	d	file:
Py_FindMethod	vim/vim/src/if_python.c	258;"	d	file:
Py_GetProgramName	vim/vim/src/if_python.c	/^Py_GetProgramName(void)$/;"	f	signature:(void)
Py_InitModule4	vim/vim/src/if_python.c	156;"	d	file:
Py_InitModule4	vim/vim/src/if_python.c	259;"	d	file:
Py_InitModule4_64	vim/vim/src/if_python.c	157;"	d	file:
Py_Initialize	vim/vim/src/if_python.c	261;"	d	file:
Py_Initialize	vim/vim/src/if_python3.c	214;"	d	file:
Py_IsInitialized	vim/vim/src/if_python.c	263;"	d	file:
Py_IsInitialized	vim/vim/src/if_python3.c	216;"	d	file:
Py_NoSiteFlag	vim/vim/src/if_python.c	308;"	d	file:
Py_SetPythonHome	vim/vim/src/if_python.c	260;"	d	file:
Py_SetPythonHome	vim/vim/src/if_python3.c	213;"	d	file:
Py_TYPE_NAME	vim/vim/src/if_py_both.h	43;"	d
Py_UNICODE_USE_UCS_FUNCTIONS	vim/vim/src/if_python3.c	274;"	d	file:
Py_VISIT	vim/vim/src/if_python.c	800;"	d	file:
Py_bytes_fmt	vim/vim/src/if_python.c	115;"	d	file:
Py_bytes_fmt	vim/vim/src/if_python3.c	107;"	d	file:
Py_ssize_t	vim/vim/src/if_py_both.h	/^typedef int Py_ssize_t;  \/* Python 2.4 and earlier don't have this type. *\/$/;"	t
Py_ssize_t_fmt	vim/vim/src/if_python.c	104;"	d	file:
Py_ssize_t_fmt	vim/vim/src/if_python.c	113;"	d	file:
Py_ssize_t_fmt	vim/vim/src/if_python3.c	106;"	d	file:
Py_underscore_GC	vim/vim/src/if_python.c	267;"	d	file:
Python3_Init	vim/vim/src/if_python3.c	/^Python3_Init(void)$/;"	f	file:	signature:(void)
PythonIO_Flush	vim/vim/src/if_py_both.h	/^PythonIO_Flush(void)$/;"	f	signature:(void)
PythonIO_Init_io	vim/vim/src/if_py_both.h	/^PythonIO_Init_io(void)$/;"	f	signature:(void)
PythonMod_Init	vim/vim/src/if_python.c	/^PythonMod_Init(void)$/;"	f	file:	signature:(void)
PythonMod_Init	vim/vim/src/if_python.c	/^static int PythonMod_Init(void);$/;"	p	file:	signature:(void)
Python_Init	vim/vim/src/if_python.c	/^Python_Init(void)$/;"	f	file:	signature:(void)
Python_Lock_Vim	vim/vim/src/if_py_both.h	/^Python_Lock_Vim(void)$/;"	f	signature:(void)
Python_Release_Vim	vim/vim/src/if_py_both.h	/^Python_Release_Vim(void)$/;"	f	signature:(void)
Python_RestoreThread	vim/vim/src/if_python.c	/^Python_RestoreThread(void)$/;"	f	file:	signature:(void)
Python_SaveThread	vim/vim/src/if_python.c	/^Python_SaveThread(void)$/;"	f	file:	signature:(void)
QF_END_OF_INPUT	vim/vim/src/quickfix.c	/^    QF_END_OF_INPUT = 2,$/;"	e	enum:__anon12	file:
QF_FAIL	vim/vim/src/quickfix.c	/^    QF_FAIL = 0,$/;"	e	enum:__anon12	file:
QF_GETLIST_ALL	vim/vim/src/quickfix.c	/^    QF_GETLIST_ALL	= 0xFF$/;"	e	enum:__anon15	file:
QF_GETLIST_CONTEXT	vim/vim/src/quickfix.c	/^    QF_GETLIST_CONTEXT	= 0x10,$/;"	e	enum:__anon15	file:
QF_GETLIST_ITEMS	vim/vim/src/quickfix.c	/^    QF_GETLIST_ITEMS	= 0x2,$/;"	e	enum:__anon15	file:
QF_GETLIST_NONE	vim/vim/src/quickfix.c	/^    QF_GETLIST_NONE	= 0x0,$/;"	e	enum:__anon15	file:
QF_GETLIST_NR	vim/vim/src/quickfix.c	/^    QF_GETLIST_NR	= 0x4,$/;"	e	enum:__anon15	file:
QF_GETLIST_TITLE	vim/vim/src/quickfix.c	/^    QF_GETLIST_TITLE	= 0x1,$/;"	e	enum:__anon15	file:
QF_GETLIST_WINID	vim/vim/src/quickfix.c	/^    QF_GETLIST_WINID	= 0x8,$/;"	e	enum:__anon15	file:
QF_IGNORE_LINE	vim/vim/src/quickfix.c	/^    QF_IGNORE_LINE = 4$/;"	e	enum:__anon12	file:
QF_NOMEM	vim/vim/src/quickfix.c	/^    QF_NOMEM = 3,$/;"	e	enum:__anon12	file:
QF_OK	vim/vim/src/quickfix.c	/^    QF_OK = 1,$/;"	e	enum:__anon12	file:
QF_WINHEIGHT	vim/vim/src/vim.h	1513;"	d
QUERY	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^  QUERY$/;"	e	enum:__anon44	file:
QUOTESED	vim/vim/src/auto/config.mk	/^QUOTESED        = sed -e 's\/[\\\\"]\/\\\\&\/g' -e 's\/\\\\"\/"\/' -e 's\/\\\\";$$\/";\/'$/;"	m
QueryContextMenu	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::QueryContextMenu(HMENU hMenu,$/;"	f	class:CShellExt	signature:(HMENU hMenu, UINT indexMenu, UINT idCmdFirst, UINT , UINT )
QueryInterface	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExt::QueryInterface(REFIID riid, LPVOID FAR *ppv)$/;"	f	class:CShellExt	signature:(REFIID riid, LPVOID FAR *ppv)
QueryInterface	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP CShellExtClassFactory::QueryInterface(REFIID riid,$/;"	f	class:CShellExtClassFactory	signature:(REFIID riid, LPVOID FAR *ppv)
QueryInterface	vim/vim/src/gui_dwrite.cpp	/^    IFACEMETHOD(QueryInterface)($/;"	f	class:FINAL	access:public	signature:( IID const& riid, void** ppvObject)
QueryInterface	vim/vim/src/if_ole.cpp	/^    STDMETHOD(QueryInterface)(REFIID riid, void ** ppv);$/;"	p	class:FINAL	file:	access:public	signature:(REFIID riid, void ** ppv)
QueryInterface	vim/vim/src/if_ole.cpp	/^CVim::QueryInterface(REFIID riid, void **ppv)$/;"	f	class:CVim	signature:(REFIID riid, void **ppv)
QueryInterface	vim/vim/src/if_ole.cpp	/^CVimCF::QueryInterface(REFIID riid, void **ppv)$/;"	f	class:CVimCF	signature:(REFIID riid, void **ppv)
QueryInterface	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )($/;"	m	struct:IVimVtbl	access:public
R	vim/vim/src/sha256.c	96;"	d	file:
R13_	vim/vim/src/ascii.h	100;"	d
RAISE_DELETE_LINE_FAIL	vim/vim/src/if_py_both.h	52;"	d
RAISE_INSERT_LINE_FAIL	vim/vim/src/if_py_both.h	53;"	d
RAISE_INVALID_INDEX_TYPE	vim/vim/src/if_py_both.h	57;"	d
RAISE_KEY_ADD_FAIL	vim/vim/src/if_py_both.h	55;"	d
RAISE_LOCKED_DICTIONARY	vim/vim/src/if_py_both.h	49;"	d
RAISE_LOCKED_LIST	vim/vim/src/if_py_both.h	50;"	d
RAISE_NO_EMPTY_KEYS	vim/vim/src/if_py_both.h	47;"	d
RAISE_REPLACE_LINE_FAIL	vim/vim/src/if_py_both.h	54;"	d
RAISE_UNDO_FAIL	vim/vim/src/if_py_both.h	51;"	d
RANGE	vim/vim/src/ex_cmds.h	30;"	d
RANGE	vim/vim/src/ex_cmds.h	33;"	d
RARRAY_LEN	vim/vim/src/if_ruby.c	156;"	d	file:
RARRAY_PTR	vim/vim/src/if_ruby.c	159;"	d	file:
RA_BREAK	vim/vim/src/regexp.c	4272;"	d	file:
RA_CONT	vim/vim/src/regexp.c	4271;"	d	file:
RA_FAIL	vim/vim/src/regexp.c	4270;"	d	file:
RA_MATCH	vim/vim/src/regexp.c	4273;"	d	file:
RA_NOMATCH	vim/vim/src/regexp.c	4274;"	d	file:
RBAppend	vim/vim/src/if_py_both.h	/^RBAppend($/;"	f	signature:( BufferObject *self, PyObject *args, PyInt start, PyInt end, PyInt *new_end)
RBAsItem	vim/vim/src/if_py_both.h	/^RBAsItem($/;"	f	signature:( BufferObject *self, PyInt n, PyObject *valObject, PyInt start, PyInt end, PyInt *new_end)
RBAsSlice	vim/vim/src/if_py_both.h	/^RBAsSlice($/;"	f	signature:( BufferObject *self, PyInt lo, PyInt hi, PyObject *valObject, PyInt start, PyInt end, PyInt *new_end)
RBG_GET	vim/vim/src/term.c	128;"	d	file:
RBG_GOT	vim/vim/src/term.c	130;"	d	file:
RBG_SENT	vim/vim/src/term.c	129;"	d	file:
RBItem	vim/vim/src/if_py_both.h	/^RBItem(BufferObject *self, PyInt n, PyInt start, PyInt end)$/;"	f	signature:(BufferObject *self, PyInt n, PyInt start, PyInt end)
RBSlice	vim/vim/src/if_py_both.h	/^RBSlice(BufferObject *self, PyInt lo, PyInt hi, PyInt start, PyInt end)$/;"	f	signature:(BufferObject *self, PyInt lo, PyInt hi, PyInt start, PyInt end)
RCFLAGS	vim/vim/src/Make_mvc.mak	/^RCFLAGS = $(RCFLAGS) -DFEAT_GUI_W32$/;"	m
RCFLAGS	vim/vim/src/Make_mvc.mak	/^RCFLAGS = $(RCFLAGS) -DFEAT_OLE$/;"	m
RCFLAGS	vim/vim/src/Make_mvc.mak	/^RCFLAGS = $(rcflags) $(rcvars) -DNDEBUG$/;"	m
RCFLAGS	vim/vim/src/Make_mvc.mak	/^RCFLAGS = $(rcflags) $(rcvars) -D_DEBUG -DDEBUG$/;"	m
RE	vim/vim/src/farsi.h	122;"	d
READBIN	vim/vim/src/vim.h	1560;"	d
READBIN	vim/vim/src/vim.h	1564;"	d
READ_BUFFER	vim/vim/src/vim.h	1008;"	d
READ_BUFFER_SIZE	vim/vim/src/gui.c	328;"	d	file:
READ_BUFFER_SIZE	vim/vim/src/gui.c	332;"	d	file:
READ_DUMMY	vim/vim/src/vim.h	1009;"	d
READ_FIFO	vim/vim/src/vim.h	1011;"	d
READ_FILTER	vim/vim/src/vim.h	1006;"	d
READ_KEEP_UNDO	vim/vim/src/vim.h	1010;"	d
READ_NEW	vim/vim/src/vim.h	1005;"	d
READ_STDIN	vim/vim/src/vim.h	1007;"	d
RECT	vim/vim/src/gui_w32.c	/^typedef int RECT;$/;"	t	file:
RED	vim/vim/src/term.c	2803;"	d	file:
REDRAW_TOP	vim/vim/src/vim.h	639;"	d
REGEXP_ABBR	vim/vim/src/regexp.c	/^static char_u REGEXP_ABBR[] = "nrtebdoxuU";$/;"	v	file:
REGEXP_INRANGE	vim/vim/src/regexp.c	/^static char_u REGEXP_INRANGE[] = "]^-n\\\\";$/;"	v	file:
REGION_ALL	vim/vim/src/spell.c	88;"	d	file:
REGMAGIC	vim/vim/src/regexp.c	280;"	d	file:
REGMBC	vim/vim/src/regexp.c	717;"	d	file:
REGMBC	vim/vim/src/regexp.c	721;"	d	file:
REGSTACK_INITIAL	vim/vim/src/regexp.c	3668;"	d	file:
REGSTR	vim/vim/src/ex_cmds.h	43;"	d
REG_EXEC	vim/vim/src/ops.c	5916;"	d	file:
REG_MULTI	vim/vim/src/regexp.c	3708;"	d	file:
REG_NOPAREN	vim/vim/src/regexp.c	669;"	d	file:
REG_NPAREN	vim/vim/src/regexp.c	672;"	d	file:
REG_PAREN	vim/vim/src/regexp.c	670;"	d	file:
REG_PREVIOUS	vim/vim/src/ops.c	5915;"	d	file:
REG_ZPAREN	vim/vim/src/regexp.c	671;"	d	file:
REMAP_NONE	vim/vim/src/vim.h	985;"	d
REMAP_SCRIPT	vim/vim/src/vim.h	986;"	d
REMAP_SKIP	vim/vim/src/vim.h	987;"	d
REMAP_YES	vim/vim/src/vim.h	984;"	d
REN	vim/vim/src/Make_manx.mak	/^REN = $(SHELL) -c mv -f$/;"	m
REPLACE	vim/vim/src/vim.h	706;"	d
REPLACE_FLAG	vim/vim/src/vim.h	705;"	d
REPLACE_NORMAL	vim/vim/src/macros.h	251;"	d
REPLACE_NORMAL	vim/vim/src/macros.h	253;"	d
REPLY_COUNT	vim/vim/src/os_mswin.c	2488;"	d	file:
REPLY_ITEM	vim/vim/src/os_mswin.c	2487;"	d	file:
RES	vim/vim/src/GvimExt/Make_ming.mak	/^RES  := gvimext.res$/;"	m
RESCORE	vim/vim/src/spell.c	66;"	d	file:
RESDIR	vim/vim/src/Makefile	/^RESDIR = $(APPDIR)\/Contents\/Resources$/;"	m
RESETSTKOFLW	vim/vim/src/os_win32.h	151;"	d
RESETSTKOFLW	vim/vim/src/os_win32.h	153;"	d
RESET_BINDING	vim/vim/src/macros.h	310;"	d
RESET_BINDING	vim/vim/src/macros.h	313;"	d
RESET_BINDING	vim/vim/src/macros.h	316;"	d
RESET_BINDING	vim/vim/src/macros.h	318;"	d
RESET_CHARTAB	vim/vim/src/charset.c	30;"	d	file:
RESFILE	vim/vim/src/Make_bc5.mak	/^RESFILE = vim.res$/;"	m
RESIZE_BOTH	vim/vim/src/vim.h	1232;"	d
RESIZE_HOR	vim/vim/src/vim.h	1231;"	d
RESIZE_VERT	vim/vim/src/vim.h	1230;"	d
RETSIGTYPE	vim/vim/src/auto/config.h	134;"	d
RETSIGTYPE	vim/vim/src/os_mac.h	290;"	d
RETSIGTYPE	vim/vim/src/os_vms_conf.h	72;"	d
RET_WIN_BUF_CHARTABSIZE	vim/vim/src/charset.c	815;"	d	file:
REX_SET	vim/vim/src/vim.h	1052;"	d
REX_USE	vim/vim/src/vim.h	1053;"	d
REZ	vim/vim/src/Makefile	/^REZ    = \/Developer\/Tools\/Rez$/;"	m
RE_AUTO	vim/vim/src/vim.h	1048;"	d
RE_BOF	vim/vim/src/regexp.c	237;"	d	file:
RE_BOTH	vim/vim/src/vim.h	1041;"	d
RE_COL	vim/vim/src/regexp.c	242;"	d	file:
RE_COMPOSING	vim/vim/src/regexp.c	247;"	d	file:
RE_EOF	vim/vim/src/regexp.c	238;"	d	file:
RE_LAST	vim/vim/src/vim.h	1042;"	d
RE_LNUM	vim/vim/src/regexp.c	241;"	d	file:
RE_MAGIC	vim/vim/src/vim.h	1045;"	d
RE_MARK	vim/vim/src/regexp.c	245;"	d	file:
RE_SEARCH	vim/vim/src/vim.h	1039;"	d
RE_STRICT	vim/vim/src/vim.h	1047;"	d
RE_STRING	vim/vim/src/vim.h	1046;"	d
RE_SUBST	vim/vim/src/vim.h	1040;"	d
RE_VCOL	vim/vim/src/regexp.c	243;"	d	file:
RE_VISUAL	vim/vim/src/regexp.c	246;"	d	file:
RF_HASNL	vim/vim/src/regexp.c	595;"	d	file:
RF_ICASE	vim/vim/src/regexp.c	593;"	d	file:
RF_ICOMBINE	vim/vim/src/regexp.c	596;"	d	file:
RF_LOOKBH	vim/vim/src/regexp.c	597;"	d	file:
RF_NOICASE	vim/vim/src/regexp.c	594;"	d	file:
RGB	vim/vim/src/gui_mac.c	180;"	d	file:
RGB	vim/vim/src/gui_photon.c	38;"	d	file:
RGB	vim/vim/src/term.c	6253;"	d	file:
RGB	vim/vim/src/term.c	6256;"	d	file:
RGVIEWNAME	vim/vim/src/Makefile	/^RGVIEWNAME	= r$(GVIEWNAME)$/;"	m
RGVIEWTARGET	vim/vim/src/Makefile	/^RGVIEWTARGET	= $(RGVIEWNAME)$(LNKEXT)$/;"	m
RGVIMNAME	vim/vim/src/Makefile	/^RGVIMNAME	= r$(GVIMNAME)$/;"	m
RGVIMTARGET	vim/vim/src/Makefile	/^RGVIMTARGET	= $(RGVIMNAME)$(LNKEXT)$/;"	m
RIGHTMOST_BUTTON_PRESSED	vim/vim/src/os_mswin.c	52;"	d	file:
RIGHTMOST_BUTTON_PRESSED	vim/vim/src/os_win32.c	62;"	d	file:
RI_ALPHA	vim/vim/src/regexp.c	522;"	d	file:
RI_DIGIT	vim/vim/src/regexp.c	517;"	d	file:
RI_HEAD	vim/vim/src/regexp.c	521;"	d	file:
RI_HEX	vim/vim/src/regexp.c	518;"	d	file:
RI_LOWER	vim/vim/src/regexp.c	523;"	d	file:
RI_OCTAL	vim/vim/src/regexp.c	519;"	d	file:
RI_UPPER	vim/vim/src/regexp.c	524;"	d	file:
RI_WHITE	vim/vim/src/regexp.c	525;"	d	file:
RI_WORD	vim/vim/src/regexp.c	520;"	d	file:
RL_MEMSET	vim/vim/src/screen.c	2567;"	d	file:
RM	vim/vim/src/Make_morph.mak	/^RM =		rm$/;"	m
RM	vim/vim/src/po/Make_cyg.mak	/^RM = rm -f$/;"	m
RM	vim/vim/src/po/Make_ming.mak	/^RM = del$/;"	m
RM	vim/vim/src/po/Make_mvc.mak	/^RM = del$/;"	m
RM_ABBR	vim/vim/src/getchar.c	99;"	d	file:
RM_NONE	vim/vim/src/getchar.c	97;"	d	file:
RM_ON_RUN	vim/vim/src/testdir/Makefile	/^RM_ON_RUN = test.out X* viminfo$/;"	m
RM_ON_START	vim/vim/src/testdir/Makefile	/^RM_ON_START = tiny.vim small.vim mbyte.vim mzscheme.vim lua.vim test.ok benchmark.out$/;"	m
RM_SCRIPT	vim/vim/src/getchar.c	98;"	d	file:
RM_YES	vim/vim/src/getchar.c	96;"	d	file:
ROOT_UID	vim/vim/src/vim.h	78;"	d
ROT13	vim/vim/src/ascii.h	101;"	d
ROT13	vim/vim/src/ascii.h	22;"	d
ROTR	vim/vim/src/sha256.c	85;"	d	file:
ROWS_AVAIL	vim/vim/src/window.c	77;"	d	file:
ROWS_AVAIL	vim/vim/src/window.c	79;"	d	file:
ROWWIDTH	vim/vim/src/libvterm/src/vterm_internal.h	91;"	d
RP_DISCARD	vim/vim/src/ex_eval.c	742;"	d	file:
RP_MAKE	vim/vim/src/ex_eval.c	740;"	d	file:
RP_RESUME	vim/vim/src/ex_eval.c	741;"	d	file:
RSC	vim/vim/src/Make_dvc.mak	/^RSC=rc.exe$/;"	m
RSC	vim/vim/src/Make_ivc.mak	/^RSC=rc.exe$/;"	m
RSC	vim/vim/src/VisVim/VisVim.mak	/^RSC=rc.exe$/;"	m
RSC_PROJ	vim/vim/src/Make_ivc.mak	/^RSC_PROJ= \/l 0x409 \/d "FEAT_GUI_W32"$/;"	m
RSC_PROJ	vim/vim/src/Make_ivc.mak	/^RSC_PROJ=$(RSC_PROJ) \/I ".\\oleRel" \/d "NDEBUG" \/d "FEAT_OLE" \/fo.\\oleRel\\vim.res$/;"	m
RSC_PROJ	vim/vim/src/Make_ivc.mak	/^RSC_PROJ=$(RSC_PROJ) \/I .\\oleDbg \/d "_DEBUG" \/d "FEAT_OLE" \/fo.\\oleDbg\\vim.res$/;"	m
RSC_PROJ	vim/vim/src/Make_ivc.mak	/^RSC_PROJ=$(RSC_PROJ) \/d "NDEBUG" \/fo.\\gRel\\vim.res$/;"	m
RSC_PROJ	vim/vim/src/Make_ivc.mak	/^RSC_PROJ=$(RSC_PROJ) \/d "_DEBUG" \/fo.\\gDbg\\vim.res$/;"	m
RSC_PROJ	vim/vim/src/VisVim/VisVim.mak	/^RSC_PROJ= \/d "NDEBUG"$/;"	m
RSC_PROJ	vim/vim/src/VisVim/VisVim.mak	/^RSC_PROJ= \/d "_DEBUG"$/;"	m
RSC_PROJ	vim/vim/src/VisVim/VisVim.mak	/^RSC_PROJ=$(RSC_PROJ) \/l 0x409 \/d "_AFXDLL" \/fo"$(INTDIR)\/VisVim.res"$/;"	m
RSRC_DIR	vim/vim/src/Makefile	/^RSRC_DIR = os_mac_rsrc$/;"	m
RSTRING_LEN	vim/vim/src/if_ruby.c	162;"	d	file:
RSTRING_PTR	vim/vim/src/if_ruby.c	165;"	d	file:
RS_BEHIND1	vim/vim/src/regexp.c	/^    , RS_BEHIND1	\/* BEHIND \/ NOBEHIND matching rest *\/$/;"	e	enum:regstate_E	file:
RS_BEHIND2	vim/vim/src/regexp.c	/^    , RS_BEHIND2	\/* BEHIND \/ NOBEHIND matching behind part *\/$/;"	e	enum:regstate_E	file:
RS_BRANCH	vim/vim/src/regexp.c	/^    , RS_BRANCH		\/* BRANCH *\/$/;"	e	enum:regstate_E	file:
RS_BRCPLX_LONG	vim/vim/src/regexp.c	/^    , RS_BRCPLX_LONG	\/* BRACE_COMPLEX and trying longest match *\/$/;"	e	enum:regstate_E	file:
RS_BRCPLX_MORE	vim/vim/src/regexp.c	/^    , RS_BRCPLX_MORE	\/* BRACE_COMPLEX and trying one more match *\/$/;"	e	enum:regstate_E	file:
RS_BRCPLX_SHORT	vim/vim/src/regexp.c	/^    , RS_BRCPLX_SHORT	\/* BRACE_COMPLEX and trying shortest match *\/$/;"	e	enum:regstate_E	file:
RS_FAIL	vim/vim/src/gui_gtk_x11.c	1383;"	d	file:
RS_MCLOSE	vim/vim/src/regexp.c	/^    , RS_MCLOSE		\/* MCLOSE + [0-9] *\/$/;"	e	enum:regstate_E	file:
RS_MOPEN	vim/vim/src/regexp.c	/^    , RS_MOPEN		\/* MOPEN + [0-9] *\/$/;"	e	enum:regstate_E	file:
RS_NOMATCH	vim/vim/src/regexp.c	/^    , RS_NOMATCH	\/* NOMATCH *\/$/;"	e	enum:regstate_E	file:
RS_NONE	vim/vim/src/gui_gtk_x11.c	1381;"	d	file:
RS_NOPEN	vim/vim/src/regexp.c	/^    RS_NOPEN = 0	\/* NOPEN and NCLOSE *\/$/;"	e	enum:regstate_E	file:
RS_OK	vim/vim/src/gui_gtk_x11.c	1382;"	d	file:
RS_STAR_LONG	vim/vim/src/regexp.c	/^    , RS_STAR_LONG	\/* STAR\/PLUS\/BRACE_SIMPLE longest match *\/$/;"	e	enum:regstate_E	file:
RS_STAR_SHORT	vim/vim/src/regexp.c	/^    , RS_STAR_SHORT	\/* STAR\/PLUS\/BRACE_SIMPLE shortest match *\/$/;"	e	enum:regstate_E	file:
RS_ZCLOSE	vim/vim/src/regexp.c	/^    , RS_ZCLOSE		\/* ZCLOSE + [0-9] *\/$/;"	e	enum:regstate_E	file:
RS_ZOPEN	vim/vim/src/regexp.c	/^    , RS_ZOPEN		\/* ZOPEN + [0-9] *\/$/;"	e	enum:regstate_E	file:
RT_DEF	vim/vim/src/GvimExt/Make_bc5.mak	/^RT_DEF = -D_RTLDLL$/;"	m
RT_DEF	vim/vim/src/GvimExt/Make_bc5.mak	/^RT_DEF =$/;"	m
RT_LIB	vim/vim/src/GvimExt/Make_bc5.mak	/^RT_LIB = cw32.lib$/;"	m
RT_LIB	vim/vim/src/GvimExt/Make_bc5.mak	/^RT_LIB = cw32i.lib$/;"	m
RUBY	vim/vim/src/auto/config.mk	/^RUBY		= $/;"	m
RUBY19_OR_LATER	vim/vim/src/if_ruby.c	88;"	d	file:
RUBY20_OR_LATER	vim/vim/src/if_ruby.c	93;"	d	file:
RUBYEXTERN	vim/vim/src/if_ruby.c	27;"	d	file:
RUBYEXTERN	vim/vim/src/if_ruby.c	31;"	d	file:
RUBYINC	vim/vim/src/Make_cyg_ming.mak	/^RUBYINC = -I $(RUBY)\/lib\/ruby\/$(RUBY_API_VER_LONG)\/$(RUBY_PLATFORM)$/;"	m
RUBYLIB	vim/vim/src/Make_cyg_ming.mak	/^RUBYLIB = -L$(RUBY)\/lib -l$(RUBY_INSTALL_NAME)$/;"	m
RUBY_19_OR_LATER	vim/vim/src/Make_cyg_ming.mak	/^RUBY_19_OR_LATER = 1$/;"	m
RUBY_API_VER	vim/vim/src/Make_cyg_ming.mak	/^RUBY_API_VER = $(subst .,,$(RUBY_API_VER_LONG))$/;"	m
RUBY_API_VER	vim/vim/src/Make_mvc.mak	/^RUBY_API_VER = $(RUBY_API_VER_LONG:.=)$/;"	m
RUBY_API_VER_LONG	vim/vim/src/Make_cyg_ming.mak	/^RUBY_API_VER_LONG = $(RUBY_VER_LONG)$/;"	m
RUBY_API_VER_LONG	vim/vim/src/Make_mvc.mak	/^RUBY_API_VER_LONG = $(RUBY_VER_LONG)$/;"	m
RUBY_CFLAGS	vim/vim/src/auto/config.mk	/^RUBY_CFLAGS	= $/;"	m
RUBY_DATA_FUNC	vim/vim/src/if_ruby.c	178;"	d	file:
RUBY_EXPORT	vim/vim/src/if_ruby.c	62;"	d	file:
RUBY_INC	vim/vim/src/Make_mvc.mak	/^RUBY_INC = \/I "$(RUBY)\\lib\\ruby\\$(RUBY_API_VER_LONG)\\$(RUBY_PLATFORM)" \/I "$(RUBY)\\include\\ruby-$(RUBY_API_VER_LONG)" \/I "$(RUBY)\\include\\ruby-$(RUBY_API_VER_LONG)\\$(RUBY_PLATFORM)"$/;"	m
RUBY_INC	vim/vim/src/Make_mvc.mak	/^RUBY_INC = \/I "$(RUBY)\\lib\\ruby\\$(RUBY_API_VER_LONG)\\$(RUBY_PLATFORM)"$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_bc5.mak	/^RUBY_INSTALL_NAME = msvcrt-ruby$(RUBY_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_bc5.mak	/^RUBY_INSTALL_NAME = mswin32-ruby$(RUBY_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_cyg_ming.mak	/^RUBY_INSTALL_NAME = $(RUBY_MSVCRT_NAME)-ruby$(RUBY_API_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_cyg_ming.mak	/^RUBY_INSTALL_NAME = mswin32-ruby$(RUBY_API_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_cyg_ming.mak	/^RUBY_INSTALL_NAME = x64-$(RUBY_MSVCRT_NAME)-ruby$(RUBY_API_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_mvc.mak	/^RUBY_INSTALL_NAME = $(RUBY_MSVCRT_NAME)-ruby$(RUBY_API_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_mvc.mak	/^RUBY_INSTALL_NAME = mswin32-ruby$(RUBY_API_VER)$/;"	m
RUBY_INSTALL_NAME	vim/vim/src/Make_mvc.mak	/^RUBY_INSTALL_NAME = x64-$(RUBY_MSVCRT_NAME)-ruby$(RUBY_API_VER)$/;"	m
RUBY_LIB	vim/vim/src/Make_mvc.mak	/^RUBY_LIB = $(RUBY)\\lib\\$(RUBY_INSTALL_NAME).lib$/;"	m
RUBY_LIBS	vim/vim/src/auto/config.mk	/^RUBY_LIBS	= $/;"	m
RUBY_LIB_FLAG	vim/vim/src/Make_bc5.mak	/^RUBY_LIB_FLAG = \/nodefaultlib:$/;"	m
RUBY_MSVCRT_NAME	vim/vim/src/Make_cyg_ming.mak	/^RUBY_MSVCRT_NAME = msvcrt$/;"	m
RUBY_MSVCRT_NAME	vim/vim/src/Make_mvc.mak	/^RUBY_MSVCRT_NAME = $(MSVCRT_NAME)$/;"	m
RUBY_OBJ	vim/vim/src/Make_mvc.mak	/^RUBY_OBJ = $(OUTDIR)\\if_ruby.obj$/;"	m
RUBY_OBJ	vim/vim/src/auto/config.mk	/^RUBY_OBJ	= $/;"	m
RUBY_PLATFORM	vim/vim/src/Make_bc5.mak	/^RUBY_PLATFORM = i386-mswin32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_bc5.mak	/^RUBY_PLATFORM = i586-mswin32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_cyg_ming.mak	/^RUBY_PLATFORM = i386-mingw32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_cyg_ming.mak	/^RUBY_PLATFORM = i386-mswin32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_cyg_ming.mak	/^RUBY_PLATFORM = i586-mswin32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_cyg_ming.mak	/^RUBY_PLATFORM = x64-mingw32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_mvc.mak	/^RUBY_PLATFORM = $(RUBY_PLATFORM)_$(MSVCRT_VER)$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_mvc.mak	/^RUBY_PLATFORM = i386-mswin32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_mvc.mak	/^RUBY_PLATFORM = i586-mswin32$/;"	m
RUBY_PLATFORM	vim/vim/src/Make_mvc.mak	/^RUBY_PLATFORM = x64-mswin64$/;"	m
RUBY_PRO	vim/vim/src/auto/config.mk	/^RUBY_PRO	= $/;"	m
RUBY_PROC	vim/vim/src/if_ruby.c	68;"	d	file:
RUBY_PROC	vim/vim/src/if_ruby.c	73;"	d	file:
RUBY_SRC	vim/vim/src/auto/config.mk	/^RUBY_SRC	= $/;"	m
RUBY_VER	vim/vim/src/Make_bc5.mak	/^RUBY_VER = 16$/;"	m
RUBY_VER	vim/vim/src/Make_cyg_ming.mak	/^RUBY_VER = 22$/;"	m
RUBY_VER	vim/vim/src/Make_mvc.mak	/^RUBY_VER = 22$/;"	m
RUBY_VER_LONG	vim/vim/src/Make_bc5.mak	/^RUBY_VER_LONG = 1.6$/;"	m
RUBY_VER_LONG	vim/vim/src/Make_cyg_ming.mak	/^RUBY_VER_LONG = 2.2.0$/;"	m
RUBY_VER_LONG	vim/vim/src/Make_mvc.mak	/^RUBY_VER_LONG = 2.2.0$/;"	m
RULER_BUF_LEN	vim/vim/src/screen.c	10802;"	d	file:
RUNTIME_DIRNAME	vim/vim/src/feature.h	985;"	d
RUN_UNITTESTS	vim/vim/src/Makefile	/^RUN_UNITTESTS = run_json_test run_kword_test run_memfile_test run_message_test$/;"	m
RUN_VIM	vim/vim/src/testdir/Makefile	/^RUN_VIM = VIMRUNTIME=$(SCRIPTSOURCE); export VIMRUNTIME; $(VALGRIND) $(VIMPROG) -f $(GUI_FLAG) -u unix.vim $(NO_INITS) -s dotest.in$/;"	m
RUN_VIMTEST	vim/vim/src/testdir/Makefile	/^RUN_VIMTEST = VIMRUNTIME=$(SCRIPTSOURCE); export VIMRUNTIME; $(VALGRIND) $(VIMPROG) -f $(GUI_FLAG) -u unix.vim$/;"	m
RVIEWNAME	vim/vim/src/Makefile	/^RVIEWNAME	= r$(VIEWNAME)$/;"	m
RVIEWTARGET	vim/vim/src/Makefile	/^RVIEWTARGET	= $(RVIEWNAME)$(LNKEXT)$/;"	m
RVIMNAME	vim/vim/src/Makefile	/^RVIMNAME	= r$(VIMNAME)$/;"	m
RVIMTARGET	vim/vim/src/Makefile	/^RVIMTARGET	= $(RVIMNAME)$(LNKEXT)$/;"	m
R_OK	vim/vim/src/vim.h	1586;"	d
RangeAppend	vim/vim/src/if_py_both.h	/^RangeAppend(RangeObject *self, PyObject *args)$/;"	f	signature:(RangeObject *self, PyObject *args)
RangeAsItem	vim/vim/src/if_python3.c	/^RangeAsItem(PyObject *self, Py_ssize_t n, PyObject *val)$/;"	f	file:	signature:(PyObject *self, Py_ssize_t n, PyObject *val)
RangeAsItem	vim/vim/src/if_python3.c	/^static Py_ssize_t RangeAsItem(PyObject *, Py_ssize_t, PyObject *);$/;"	p	file:	signature:(PyObject *, Py_ssize_t, PyObject *)
RangeAsMapping	vim/vim/src/if_py_both.h	/^static PyMappingMethods RangeAsMapping;$/;"	v
RangeAsMapping	vim/vim/src/if_python3.c	/^static PyMappingMethods RangeAsMapping = {$/;"	v	file:
RangeAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods RangeAsSeq;$/;"	v
RangeAsSeq	vim/vim/src/if_python.c	/^static PySequenceMethods RangeAsSeq = {$/;"	v	file:
RangeAsSeq	vim/vim/src/if_python3.c	/^static PySequenceMethods RangeAsSeq = {$/;"	v	file:
RangeAsSlice	vim/vim/src/if_python3.c	/^RangeAsSlice(PyObject *self, Py_ssize_t lo, Py_ssize_t hi, PyObject *val)$/;"	f	file:	signature:(PyObject *self, Py_ssize_t lo, Py_ssize_t hi, PyObject *val)
RangeAsSubscript	vim/vim/src/if_python3.c	/^RangeAsSubscript(PyObject *self, PyObject *idx, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyObject *idx, PyObject *val)
RangeAsSubscript	vim/vim/src/if_python3.c	/^static Py_ssize_t RangeAsSubscript(PyObject *self, PyObject *idx, PyObject *val);$/;"	p	file:	signature:(PyObject *self, PyObject *idx, PyObject *val)
RangeAssItem	vim/vim/src/if_python.c	/^RangeAssItem(PyObject *self, PyInt n, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyInt n, PyObject *val)
RangeAssItem	vim/vim/src/if_python.c	/^static PyInt RangeAssItem(PyObject *, PyInt, PyObject *);$/;"	p	file:	signature:(PyObject *, PyInt, PyObject *)
RangeAssSlice	vim/vim/src/if_python.c	/^RangeAssSlice(PyObject *self, PyInt lo, PyInt hi, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyInt lo, PyInt hi, PyObject *val)
RangeAssSlice	vim/vim/src/if_python.c	/^static PyInt RangeAssSlice(PyObject *, PyInt, PyInt, PyObject *);$/;"	p	file:	signature:(PyObject *, PyInt, PyInt, PyObject *)
RangeAttrs	vim/vim/src/if_py_both.h	/^static char *RangeAttrs[] = {$/;"	v
RangeClear	vim/vim/src/if_py_both.h	/^RangeClear(RangeObject *self)$/;"	f	signature:(RangeObject *self)
RangeDestructor	vim/vim/src/if_py_both.h	/^RangeDestructor(RangeObject *self)$/;"	f	signature:(RangeObject *self)
RangeDir	vim/vim/src/if_py_both.h	/^RangeDir(PyObject *self)$/;"	f	signature:(PyObject *self)
RangeEnd	vim/vim/src/if_py_both.h	/^static PyInt RangeEnd;$/;"	v
RangeGetattr	vim/vim/src/if_python.c	/^RangeGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
RangeGetattr	vim/vim/src/if_python.c	/^static PyObject *RangeGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
RangeGetattro	vim/vim/src/if_python3.c	/^RangeGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
RangeGetattro	vim/vim/src/if_python3.c	/^static PyObject *RangeGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
RangeItem	vim/vim/src/if_py_both.h	/^RangeItem(RangeObject *self, PyInt n)$/;"	f	signature:(RangeObject *self, PyInt n)
RangeLength	vim/vim/src/if_py_both.h	/^RangeLength(RangeObject *self)$/;"	f	signature:(RangeObject *self)
RangeMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef RangeMethods[] = {$/;"	v	typeref:struct:PyMethodDef
RangeNew	vim/vim/src/if_py_both.h	/^RangeNew(buf_T *buf, PyInt start, PyInt end)$/;"	f	signature:(buf_T *buf, PyInt start, PyInt end)
RangeObject	vim/vim/src/if_py_both.h	/^} RangeObject;$/;"	t	typeref:struct:__anon112
RangeRepr	vim/vim/src/if_py_both.h	/^RangeRepr(RangeObject *self)$/;"	f	signature:(RangeObject *self)
RangeSlice	vim/vim/src/if_py_both.h	/^RangeSlice(RangeObject *self, PyInt lo, PyInt hi)$/;"	f	signature:(RangeObject *self, PyInt lo, PyInt hi)
RangeStart	vim/vim/src/if_py_both.h	/^static PyInt RangeStart;$/;"	v
RangeSubscript	vim/vim/src/if_python3.c	/^RangeSubscript(PyObject *self, PyObject* idx)$/;"	f	file:	signature:(PyObject *self, PyObject* idx)
RangeSubscript	vim/vim/src/if_python3.c	/^static PyObject* RangeSubscript(PyObject *self, PyObject *idx);$/;"	p	file:	signature:(PyObject *self, PyObject *idx)
RangeTraverse	vim/vim/src/if_py_both.h	/^RangeTraverse(RangeObject *self, visitproc visit, void *arg)$/;"	f	signature:(RangeObject *self, visitproc visit, void *arg)
RangeType	vim/vim/src/if_py_both.h	/^static PyTypeObject RangeType;$/;"	v
RangeType_Check	vim/vim/src/if_python.c	1241;"	d	file:
RangeType_Check	vim/vim/src/if_python3.c	1155;"	d	file:
RealWaitForChar	vim/vim/src/os_unix.c	/^RealWaitForChar(int fd, long msec, int *check_for_gpm UNUSED, int *interrupted)$/;"	f	signature:(int fd, long msec, int *check_for_gpm UNUSED, int *interrupted)
RealWaitForChar	vim/vim/src/os_unix.c	/^int  RealWaitForChar(int, long, int *, int *interrupted);$/;"	p	file:	signature:(int, long, int *, int *interrupted)
RealWaitForChar	vim/vim/src/os_unix.c	/^static int  RealWaitForChar(int, long, int *, int *interrupted);$/;"	p	file:	signature:(int, long, int *, int *interrupted)
RealWaitForChar	vim/vim/src/os_vms.c	/^RealWaitForChar($/;"	f	signature:( int fd UNUSED, long msec, int *check_for_gpm UNUSED, int *interrupted)
Realize	vim/vim/src/gui_at_sb.c	/^Realize($/;"	f	file:	signature:( Widget w, Mask *valueMask, XSetWindowAttributes *attributes)
Realize	vim/vim/src/gui_at_sb.c	/^static void Realize(Widget, Mask *, XSetWindowAttributes *);$/;"	p	file:	signature:(Widget, Mask *, XSetWindowAttributes *)
Reason	vim/vim/runtime/tools/ccfilter.c	/^char	       Reason[LINELENGTH];$/;"	v
Recording	vim/vim/src/globals.h	/^EXTERN int Recording INIT(= FALSE);	\/* TRUE when recording into a reg. *\/$/;"	v
RecursiveDeleteKey	vim/vim/src/if_ole.cpp	/^static void RecursiveDeleteKey(HKEY hKeyParent, const char *child)$/;"	f	file:	signature:(HKEY hKeyParent, const char *child)
RecursiveDeleteKey	vim/vim/src/if_ole.cpp	/^static void RecursiveDeleteKey(HKEY hKeyParent, const char *child);$/;"	p	file:	signature:(HKEY hKeyParent, const char *child)
Red	vim/vim/src/gui_mac.c	181;"	d	file:
Redisplay	vim/vim/src/gui_at_sb.c	/^Redisplay(Widget w, XEvent *event, Region region)$/;"	f	file:	signature:(Widget w, XEvent *event, Region region)
Redisplay	vim/vim/src/gui_at_sb.c	/^static void Redisplay(Widget, XEvent *, Region);$/;"	p	file:	signature:(Widget, XEvent *, Region)
Redisplay	vim/vim/src/gui_xmebw.c	/^Redisplay(Widget w, XEvent *event, Region region)$/;"	f	file:	signature:(Widget w, XEvent *event, Region region)
Redisplay	vim/vim/src/gui_xmebw.c	/^static void Redisplay(Widget, XEvent *, Region);$/;"	p	file:	signature:(Widget, XEvent *, Region)
RedrawingDisabled	vim/vim/src/globals.h	/^EXTERN int	RedrawingDisabled INIT(= 0);$/;"	v
RegisterMe	vim/vim/src/if_ole.cpp	/^extern "C" void RegisterMe(int silent)$/;"	f	signature:(int silent)
Release	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExt::Release()$/;"	f	class:CShellExt	signature:()
Release	vim/vim/src/GvimExt/gvimext.cpp	/^STDMETHODIMP_(ULONG) CShellExtClassFactory::Release()$/;"	f	class:CShellExtClassFactory	signature:()
Release	vim/vim/src/if_ole.cpp	/^CVim::Release()$/;"	f	class:CVim	signature:()
Release	vim/vim/src/if_ole.cpp	/^CVimCF::Release()$/;"	f	class:CVimCF	signature:()
Release	vim/vim/src/if_ole.h	/^	ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )($/;"	m	struct:IVimVtbl	access:public
RepeatNotify	vim/vim/src/gui_at_sb.c	/^RepeatNotify(XtPointer client_data, XtIntervalId *idp UNUSED)$/;"	f	file:	signature:(XtPointer client_data, XtIntervalId *idp UNUSED)
ReportInternalError	vim/vim/src/VisVim/DSAddIn.cpp	/^void ReportInternalError (char* Fct)$/;"	f	signature:(char* Fct)
ReportInternalError	vim/vim/src/VisVim/VisVim.h	/^void ReportInternalError (char* Fct);$/;"	p	signature:(char* Fct)
ReportLastError	vim/vim/src/VisVim/DSAddIn.cpp	/^void ReportLastError (HRESULT Err)$/;"	f	signature:(HRESULT Err)
ReportLastError	vim/vim/src/VisVim/VisVim.h	/^void ReportLastError (HRESULT Err);$/;"	p	signature:(HRESULT Err)
Reset	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	e	enum:__anon69
ResetRedobuff	vim/vim/src/getchar.c	/^ResetRedobuff(void)$/;"	f	signature:(void)
Resize	vim/vim/src/gui_at_sb.c	/^Resize(Widget w)$/;"	f	file:	signature:(Widget w)
Resize	vim/vim/src/gui_at_sb.c	/^static void Resize(Widget);$/;"	p	file:
ResizeConBufAndWindow	vim/vim/src/os_win32.c	/^ResizeConBufAndWindow($/;"	f	file:	signature:( HANDLE hConsole, int xSize, int ySize)
RestoreConsoleBuffer	vim/vim/src/os_win32.c	/^RestoreConsoleBuffer($/;"	f	file:	signature:( ConsoleBuffer *cb, BOOL RestoreScreen)
ResultFromShort	vim/vim/src/GvimExt/gvimext.h	53;"	d
RevOut	vim/vim/src/gui_w32.c	/^RevOut( HDC s_hdc,$/;"	f	file:	signature:( HDC s_hdc, int col, int row, UINT foptions, CONST RECT *pcliprect, LPCTSTR text, UINT len, CONST INT *padding)
Row	vim/vim/runtime/tools/ccfilter.c	/^unsigned long  Row;$/;"	v
Rows	vim/vim/src/globals.h	/^EXTERN long	Rows			\/* nr of rows in the screen *\/$/;"	v
S0	vim/vim/src/sha256.c	87;"	d	file:
S1	vim/vim/src/sha256.c	88;"	d	file:
S2	vim/vim/src/sha256.c	90;"	d	file:
S3	vim/vim/src/sha256.c	91;"	d	file:
SAD	vim/vim/src/farsi.h	127;"	d
SAFE_GETTEXT_DLL_OBJ	vim/vim/src/Make_cyg_ming.mak	/^SAFE_GETTEXT_DLL_OBJ = $(GETTEXT)\/src\/safe_gettext_dll\/safe_gettext_dll.o$/;"	m
SAL_COLLAPSE	vim/vim/src/spellfile.c	265;"	d	file:
SAL_F0LLOWUP	vim/vim/src/spellfile.c	264;"	d	file:
SAL_REM_ACCENTS	vim/vim/src/spellfile.c	266;"	d	file:
SANITIZER_LIBS	vim/vim/src/Makefile	/^SANITIZER_LIBS = $(SANITIZER_CFLAGS)$/;"	m
SAVE_YOURSELF_IDX	vim/vim/src/gui_x11.c	90;"	d	file:
SA_ONSTACK_COMPATIBILITY	vim/vim/src/vim.h	81;"	d
SBAR_BOTTOM	vim/vim/src/gui.h	117;"	d
SBAR_HORIZ	vim/vim/src/gui.h	121;"	d
SBAR_LEFT	vim/vim/src/gui.h	115;"	d
SBAR_NONE	vim/vim/src/gui.h	114;"	d
SBAR_RIGHT	vim/vim/src/gui.h	116;"	d
SBAR_VERT	vim/vim/src/gui.h	120;"	d
SBLOCKSIZE	vim/vim/src/spellfile.c	1863;"	d	file:
SBOXOK	vim/vim/src/ex_cmds.h	53;"	d
SB_CLEAR_ALL	vim/vim/src/message.c	/^    SB_CLEAR_ALL,$/;"	e	enum:__anon20	file:
SB_CLEAR_CMDLINE_BUSY	vim/vim/src/message.c	/^    SB_CLEAR_CMDLINE_BUSY,$/;"	e	enum:__anon20	file:
SB_CLEAR_CMDLINE_DONE	vim/vim/src/message.c	/^    SB_CLEAR_CMDLINE_DONE$/;"	e	enum:__anon20	file:
SB_CLEAR_NONE	vim/vim/src/message.c	/^    SB_CLEAR_NONE = 0,$/;"	e	enum:__anon20	file:
SB_DEFAULT_WIDTH	vim/vim/src/gui.h	124;"	d
SCANF_DECIMAL_LONG_U	vim/vim/src/vim.h	371;"	d
SCANF_DECIMAL_LONG_U	vim/vim/src/vim.h	385;"	d
SCANF_HEX_LONG_U	vim/vim/src/vim.h	370;"	d
SCANF_HEX_LONG_U	vim/vim/src/vim.h	384;"	d
SCHEME_BYTE_STRINGP	vim/vim/src/if_mzsch.h	46;"	d
SCHEME_BYTE_STRLEN_VAL	vim/vim/src/if_mzsch.h	43;"	d
SCHEME_STRINGP	vim/vim/src/if_mzsch.h	29;"	d
SCHEME_VIMBUFFERP	vim/vim/src/if_mzsch.c	67;"	d	file:
SCHEME_VIMWINDOWP	vim/vim/src/if_mzsch.c	68;"	d	file:
SCORE_BIG	vim/vim/src/spell.c	196;"	d	file:
SCORE_COMMON1	vim/vim/src/spell.c	182;"	d	file:
SCORE_COMMON2	vim/vim/src/spell.c	183;"	d	file:
SCORE_COMMON3	vim/vim/src/spell.c	184;"	d	file:
SCORE_DEL	vim/vim/src/spell.c	170;"	d	file:
SCORE_DELCOMP	vim/vim/src/spell.c	172;"	d	file:
SCORE_DELDUP	vim/vim/src/spell.c	171;"	d	file:
SCORE_EDIT_MIN	vim/vim/src/spell.c	202;"	d	file:
SCORE_FILE	vim/vim/src/spell.c	178;"	d	file:
SCORE_ICASE	vim/vim/src/spell.c	161;"	d	file:
SCORE_INS	vim/vim/src/spell.c	173;"	d	file:
SCORE_INSCOMP	vim/vim/src/spell.c	175;"	d	file:
SCORE_INSDUP	vim/vim/src/spell.c	174;"	d	file:
SCORE_LIMITMAX	vim/vim/src/spell.c	198;"	d	file:
SCORE_MAXINIT	vim/vim/src/spell.c	179;"	d	file:
SCORE_MAXMAX	vim/vim/src/spell.c	197;"	d	file:
SCORE_NONWORD	vim/vim/src/spell.c	176;"	d	file:
SCORE_RARE	vim/vim/src/spell.c	163;"	d	file:
SCORE_REGION	vim/vim/src/spell.c	162;"	d	file:
SCORE_REP	vim/vim/src/spell.c	166;"	d	file:
SCORE_SFMAX1	vim/vim/src/spell.c	192;"	d	file:
SCORE_SFMAX2	vim/vim/src/spell.c	193;"	d	file:
SCORE_SFMAX3	vim/vim/src/spell.c	194;"	d	file:
SCORE_SIMILAR	vim/vim/src/spell.c	168;"	d	file:
SCORE_SPLIT	vim/vim/src/spell.c	159;"	d	file:
SCORE_SPLIT_NO	vim/vim/src/spell.c	160;"	d	file:
SCORE_SUBCOMP	vim/vim/src/spell.c	169;"	d	file:
SCORE_SUBST	vim/vim/src/spell.c	167;"	d	file:
SCORE_SWAP	vim/vim/src/spell.c	164;"	d	file:
SCORE_SWAP3	vim/vim/src/spell.c	165;"	d	file:
SCORE_THRES2	vim/vim/src/spell.c	185;"	d	file:
SCORE_THRES3	vim/vim/src/spell.c	186;"	d	file:
SCRAPTEXTFLAVOR	vim/vim/src/gui_mac.c	52;"	d	file:
SCRAPTEXTFLAVOR	vim/vim/src/gui_mac.c	54;"	d	file:
SCRIPTID_INIT	vim/vim/src/option.c	413;"	d	file:
SCRIPTID_INIT	vim/vim/src/option.c	415;"	d	file:
SCRIPTLOC	vim/vim/src/Makefile	/^SCRIPTLOC	= $(VIMRTLOC)$/;"	m
SCRIPTMOD	vim/vim/src/Makefile	/^SCRIPTMOD = 755$/;"	m
SCRIPTS	vim/vim/src/testdir/Make_amiga.mak	/^SCRIPTS = $(SCRIPTS_ALL) $(SCRIPTS_MORE3) $(SCRIPTS_MORE4)$/;"	m
SCRIPTS	vim/vim/src/testdir/Make_dos.mak	/^SCRIPTS = $(SCRIPTS_ALL) $(SCRIPTS_MORE1) $(SCRIPTS_MORE3) $(SCRIPTS_MORE4)$/;"	m
SCRIPTS	vim/vim/src/testdir/Make_ming.mak	/^SCRIPTS = $(SCRIPTS_ALL) $(SCRIPTS_MORE1) $(SCRIPTS_MORE4) $(SCRIPTS_WIN32)$/;"	m
SCRIPTS	vim/vim/src/testdir/Makefile	/^SCRIPTS = $(SCRIPTS_ALL) \\$/;"	m
SCRIPTSOURCE	vim/vim/src/Makefile	/^SCRIPTSOURCE = ..\/runtime$/;"	m
SCRIPTSOURCE	vim/vim/src/testdir/Makefile	/^SCRIPTSOURCE = ..\/..\/runtime$/;"	m
SCRIPTS_ALL	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_ALL = \\$/;"	m
SCRIPTS_BENCH	vim/vim/src/testdir/Make_ming.mak	/^SCRIPTS_BENCH = bench_re_freeze.out$/;"	m
SCRIPTS_BENCH	vim/vim/src/testdir/Makefile	/^SCRIPTS_BENCH = bench_re_freeze.out$/;"	m
SCRIPTS_FIRST	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_FIRST = \\$/;"	m
SCRIPTS_GUI	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_GUI =$/;"	m
SCRIPTS_MORE1	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_MORE1 = \\$/;"	m
SCRIPTS_MORE2	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_MORE2 = \\$/;"	m
SCRIPTS_MORE3	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_MORE3 = \\$/;"	m
SCRIPTS_MORE4	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_MORE4 = \\$/;"	m
SCRIPTS_WIN32	vim/vim/src/testdir/Make_all.mak	/^SCRIPTS_WIN32 = test50.out$/;"	m
SCRIPT_ITEM	vim/vim/src/ex_cmds2.c	53;"	d	file:
SCRIPT_SV	vim/vim/src/eval.c	64;"	d	file:
SCRIPT_VARS	vim/vim/src/eval.c	65;"	d	file:
SCROLLREGION_BOTTOM	vim/vim/src/libvterm/src/vterm_internal.h	81;"	d
SCROLLREGION_LEFT	vim/vim/src/libvterm/src/vterm_internal.h	83;"	d
SCROLLREGION_RIGHT	vim/vim/src/libvterm/src/vterm_internal.h	85;"	d
SCROLL_PAST_END	vim/vim/src/gui.c	65;"	d	file:
SE	vim/vim/src/farsi.h	115;"	d
SEARCH_COL	vim/vim/src/vim.h	940;"	d
SEARCH_ECHO	vim/vim/src/vim.h	929;"	d
SEARCH_END	vim/vim/src/vim.h	934;"	d
SEARCH_HIS	vim/vim/src/vim.h	933;"	d
SEARCH_HL_PRIORITY	vim/vim/src/screen.c	140;"	d	file:
SEARCH_KEEP	vim/vim/src/vim.h	938;"	d
SEARCH_MARK	vim/vim/src/vim.h	937;"	d
SEARCH_MSG	vim/vim/src/vim.h	930;"	d
SEARCH_NFMSG	vim/vim/src/vim.h	931;"	d
SEARCH_NOOF	vim/vim/src/vim.h	935;"	d
SEARCH_OPT	vim/vim/src/vim.h	932;"	d
SEARCH_PEEK	vim/vim/src/vim.h	939;"	d
SEARCH_REV	vim/vim/src/vim.h	928;"	d
SEARCH_START	vim/vim/src/vim.h	936;"	d
SEA_DIALOG	vim/vim/src/vim.h	1266;"	d
SEA_NONE	vim/vim/src/vim.h	1265;"	d
SEA_QUIT	vim/vim/src/vim.h	1267;"	d
SEA_RECOVER	vim/vim/src/vim.h	1268;"	d
SECURITY_INFORMATION	vim/vim/src/os_mswin.c	/^typedef int SECURITY_INFORMATION;$/;"	t	file:
SECURITY_INFORMATION	vim/vim/src/os_win32.c	/^typedef int SECURITY_INFORMATION;$/;"	t	file:
SEEK_END	vim/vim/src/misc1.c	11164;"	d	file:
SEEK_END	vim/vim/src/os_unix.c	6089;"	d	file:
SEEK_SET	vim/vim/src/misc1.c	11161;"	d	file:
SEEK_SET	vim/vim/src/os_unix.c	6086;"	d	file:
SELECTMODE	vim/vim/src/vim.h	721;"	d
SELECT_CLEARED	vim/vim/src/vim.h	2039;"	d
SELECT_DONE	vim/vim/src/vim.h	2041;"	d
SELECT_IN_PROGRESS	vim/vim/src/vim.h	2040;"	d
SELECT_MODE_CHAR	vim/vim/src/vim.h	2043;"	d
SELECT_MODE_LINE	vim/vim/src/vim.h	2045;"	d
SELECT_MODE_WORD	vim/vim/src/vim.h	2044;"	d
SEL_FILE_CANCEL	vim/vim/src/gui_at_fs.c	73;"	d	file:
SEL_FILE_NULL	vim/vim/src/gui_at_fs.c	75;"	d	file:
SEL_FILE_OK	vim/vim/src/gui_at_fs.c	74;"	d	file:
SEL_FILE_TEXT	vim/vim/src/gui_at_fs.c	76;"	d	file:
SEND_MSEC_POLL	vim/vim/runtime/tools/xcmdsrv_client.c	204;"	d	file:
SEND_MSEC_POLL	vim/vim/src/if_xcmdsrv.c	570;"	d	file:
SESSION_FILE	vim/vim/src/feature.h	897;"	d
SETJMP	vim/vim/src/os_unix.h	490;"	d
SETJMP	vim/vim/src/os_unix.h	494;"	d
SETWSIZE	vim/vim/src/vim.h	716;"	d
SET_CHARTAB	vim/vim/src/charset.c	29;"	d	file:
SET_FLAG	vim/vim/src/undo.c	2016;"	d	file:
SET_INVALID_PARAM_HANDLER	vim/vim/src/os_win32.c	2006;"	d	file:
SET_INVALID_PARAM_HANDLER	vim/vim/src/os_win32.c	2009;"	d	file:
SET_NO_HLSEARCH	vim/vim/src/vim.h	2441;"	d
SET_NO_HLSEARCH	vim/vim/src/vim.h	2443;"	d
SET_NUM_MOUSE_CLICKS	vim/vim/src/vim.h	1889;"	d
SET_SIG_ALARM	vim/vim/src/os_unix.c	204;"	d	file:
SE_OBJECT_TYPE	vim/vim/src/os_win32.c	/^typedef int SE_OBJECT_TYPE;$/;"	t	file:
SFDir	vim/vim/src/gui_at_fs.c	/^} SFDir;$/;"	t	typeref:struct:__anon236	file:
SFEntry	vim/vim/src/gui_at_fs.c	/^} SFEntry;$/;"	t	typeref:struct:__anon235	file:
SFLogin	vim/vim/src/gui_at_fs.c	/^} SFLogin;$/;"	t	typeref:struct:__anon237	file:
SFNAME	vim/vim/src/regexp.c	192;"	d	file:
SF_CCOMMENT	vim/vim/src/syntax.c	193;"	d	file:
SF_DEFAULT_FONT	vim/vim/src/gui_at_fs.c	1042;"	d	file:
SF_DEFAULT_FONT	vim/vim/src/gui_at_fs.c	1044;"	d	file:
SF_DO_NOT_SCROLL	vim/vim/src/gui_at_fs.c	79;"	d	file:
SF_DO_SCROLL	vim/vim/src/gui_at_fs.c	78;"	d	file:
SF_MATCH	vim/vim/src/syntax.c	194;"	d	file:
SFaboveAndBelowText	vim/vim/src/gui_at_fs.c	/^static int	SFaboveAndBelowText = 2;$/;"	v	file:
SFapp	vim/vim/src/gui_at_fs.c	/^static XtAppContext SFapp;$/;"	v	file:
SFback	vim/vim/src/gui_at_fs.c	/^static Pixel	SFfore, SFback;$/;"	v	file:
SFbesideText	vim/vim/src/gui_at_fs.c	/^static int	SFbesideText = 3;$/;"	v	file:
SFbuttonPressList	vim/vim/src/gui_at_fs.c	/^SFbuttonPressList($/;"	f	file:	signature:( Widget w UNUSED, int n UNUSED, XButtonPressedEvent *event UNUSED)
SFbuttonPressList	vim/vim/src/gui_at_fs.c	/^static void SFbuttonPressList(Widget w, int n, XButtonPressedEvent *event);$/;"	p	file:	signature:(Widget w, int n, XButtonPressedEvent *event)
SFbuttonPressed	vim/vim/src/gui_at_fs.c	/^static int	SFbuttonPressed = 0;$/;"	v	file:
SFbuttonReleaseList	vim/vim/src/gui_at_fs.c	/^SFbuttonReleaseList($/;"	f	file:	signature:( Widget w, int n, XButtonReleasedEvent *event)
SFbuttonReleaseList	vim/vim/src/gui_at_fs.c	/^static void SFbuttonReleaseList(Widget w, int n, XButtonReleasedEvent *event);$/;"	p	file:	signature:(Widget w, int n, XButtonReleasedEvent *event)
SFcancelCallback	vim/vim/src/gui_at_fs.c	/^SFcancelCallback(Widget w UNUSED, XtPointer cl UNUSED, XtPointer cd UNUSED)$/;"	f	file:	signature:(Widget w UNUSED, XtPointer cl UNUSED, XtPointer cd UNUSED)
SFcancelCallback	vim/vim/src/gui_at_fs.c	/^static void SFcancelCallback(Widget w, XtPointer cl, XtPointer cd);$/;"	p	file:	signature:(Widget w, XtPointer cl, XtPointer cd)
SFcancelSelect	vim/vim/src/gui_at_fs.c	/^static XtCallbackRec SFcancelSelect[] =$/;"	v	file:
SFcharAscent	vim/vim/src/gui_at_fs.c	/^static int	SFcharWidth, SFcharAscent, SFcharHeight;$/;"	v	file:
SFcharHeight	vim/vim/src/gui_at_fs.c	/^static int	SFcharWidth, SFcharAscent, SFcharHeight;$/;"	v	file:
SFcharWidth	vim/vim/src/gui_at_fs.c	/^static int	SFcharWidth, SFcharAscent, SFcharHeight;$/;"	v	file:
SFcharsPerEntry	vim/vim/src/gui_at_fs.c	/^static int	SFcharsPerEntry = 15;$/;"	v	file:
SFchdir	vim/vim/src/gui_at_fs.c	/^SFchdir(char *path)$/;"	f	file:	signature:(char *path)
SFchdir	vim/vim/src/gui_at_fs.c	/^static int SFchdir(char *path);$/;"	p	file:	signature:(char *path)
SFcheckDir	vim/vim/src/gui_at_fs.c	/^SFcheckDir(int n, SFDir *dir)$/;"	f	file:	signature:(int n, SFDir *dir)
SFcheckDir	vim/vim/src/gui_at_fs.c	/^static int SFcheckDir(int n, SFDir *dir);$/;"	p	file:	signature:(int n, SFDir *dir)
SFcheckFiles	vim/vim/src/gui_at_fs.c	/^SFcheckFiles(SFDir *dir)$/;"	f	file:	signature:(SFDir *dir)
SFcheckFiles	vim/vim/src/gui_at_fs.c	/^static int SFcheckFiles(SFDir *dir);$/;"	p	file:	signature:(SFDir *dir)
SFclearList	vim/vim/src/gui_at_fs.c	/^SFclearList(int n, int doScroll)$/;"	f	file:	signature:(int n, int doScroll)
SFclearList	vim/vim/src/gui_at_fs.c	/^static void SFclearList(int n, int doScroll);$/;"	p	file:	signature:(int n, int doScroll)
SFcompareEntries	vim/vim/src/gui_at_fs.c	/^SFcompareEntries(const void *p, const void *q)$/;"	f	file:	signature:(const void *p, const void *q)
SFcompareEntries	vim/vim/src/gui_at_fs.c	/^static int SFcompareEntries(const void *p, const void *q);$/;"	p	file:	signature:(const void *p, const void *q)
SFcompareLogins	vim/vim/src/gui_at_fs.c	/^SFcompareLogins(const void *p, const void *q)$/;"	f	file:	signature:(const void *p, const void *q)
SFcompareLogins	vim/vim/src/gui_at_fs.c	/^static int SFcompareLogins(const void *p, const void *q);$/;"	p	file:	signature:(const void *p, const void *q)
SFcompletionSegs	vim/vim/src/gui_at_fs.c	/^static XSegment SFsegs[2], SFcompletionSegs[2];$/;"	v	file:
SFcreateGC	vim/vim/src/gui_at_fs.c	/^SFcreateGC(void)$/;"	f	file:	signature:(void)
SFcreateGC	vim/vim/src/gui_at_fs.c	/^static void SFcreateGC(void);$/;"	p	file:	signature:(void)
SFcreateWidgets	vim/vim/src/gui_at_fs.c	/^SFcreateWidgets($/;"	f	file:	signature:( Widget toplevel, char *prompt, char *ok, char *cancel)
SFcreateWidgets	vim/vim/src/gui_at_fs.c	/^static void SFcreateWidgets(Widget toplevel, char *prompt, char *ok, char *cancel);$/;"	p	file:	signature:(Widget toplevel, char *prompt, char *ok, char *cancel)
SFcurrentDir	vim/vim/src/gui_at_fs.c	/^		SFcurrentDir[MAXPATHL];$/;"	v	file:
SFcurrentInvert	vim/vim/src/gui_at_fs.c	/^static int	SFcurrentInvert[3] = { -1, -1, -1 };$/;"	v	file:
SFcurrentListY	vim/vim/src/gui_at_fs.c	/^static int SFcurrentListY;$/;"	v	file:
SFcurrentPath	vim/vim/src/gui_at_fs.c	/^		SFcurrentPath[MAXPATHL],$/;"	v	file:
SFdeleteEntry	vim/vim/src/gui_at_fs.c	/^SFdeleteEntry(SFDir *dir, SFEntry *entry)$/;"	f	file:	signature:(SFDir *dir, SFEntry *entry)
SFdeleteEntry	vim/vim/src/gui_at_fs.c	/^static void SFdeleteEntry(SFDir *dir, SFEntry *entry);$/;"	p	file:	signature:(SFDir *dir, SFEntry *entry)
SFdirEnd	vim/vim/src/gui_at_fs.c	/^static int	SFdirEnd;$/;"	v	file:
SFdirModTimer	vim/vim/src/gui_at_fs.c	/^SFdirModTimer(XtPointer cl UNUSED, XtIntervalId *id UNUSED)$/;"	f	file:	signature:(XtPointer cl UNUSED, XtIntervalId *id UNUSED)
SFdirModTimer	vim/vim/src/gui_at_fs.c	/^static void SFdirModTimer(XtPointer cl, XtIntervalId *id);$/;"	p	file:	signature:(XtPointer cl, XtIntervalId *id)
SFdirModTimerId	vim/vim/src/gui_at_fs.c	/^static XtIntervalId SFdirModTimerId;$/;"	v	file:
SFdirPtr	vim/vim/src/gui_at_fs.c	/^static int	SFdirPtr;$/;"	v	file:
SFdirs	vim/vim/src/gui_at_fs.c	/^static SFDir	*SFdirs = NULL;$/;"	v	file:
SFdismissAction	vim/vim/src/gui_at_fs.c	/^SFdismissAction($/;"	f	file:	signature:( Widget w UNUSED, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
SFdismissAction	vim/vim/src/gui_at_fs.c	/^static void SFdismissAction(Widget w, XEvent *event, String *params, Cardinal *num_params);$/;"	p	file:	signature:(Widget w, XEvent *event, String *params, Cardinal *num_params)
SFdisplay	vim/vim/src/gui_at_fs.c	/^static Display	*SFdisplay;$/;"	v	file:
SFdoNotTouchDirPtr	vim/vim/src/gui_at_fs.c	/^static int	SFdoNotTouchDirPtr = 0;$/;"	v	file:
SFdoNotTouchVorigin	vim/vim/src/gui_at_fs.c	/^static int	SFdoNotTouchVorigin = 0;$/;"	v	file:
SFdrawList	vim/vim/src/gui_at_fs.c	/^SFdrawList(int n, int doScroll)$/;"	f	file:	signature:(int n, int doScroll)
SFdrawList	vim/vim/src/gui_at_fs.c	/^static void SFdrawList(int n, int doScroll);$/;"	p	file:	signature:(int n, int doScroll)
SFdrawLists	vim/vim/src/gui_at_fs.c	/^SFdrawLists(int doScroll)$/;"	f	file:	signature:(int doScroll)
SFdrawLists	vim/vim/src/gui_at_fs.c	/^static void SFdrawLists(int doScroll);$/;"	p	file:	signature:(int doScroll)
SFdrawStrings	vim/vim/src/gui_at_fs.c	/^SFdrawStrings($/;"	f	file:	signature:( Window w, SFDir *dir, int from, int to)
SFdrawStrings	vim/vim/src/gui_at_fs.c	/^static void SFdrawStrings(Window w, SFDir *dir, int from, int to);$/;"	p	file:	signature:(Window w, SFDir *dir, int from, int to)
SFenterList	vim/vim/src/gui_at_fs.c	/^SFenterList(Widget w UNUSED, int n, XEnterWindowEvent *event)$/;"	f	file:	signature:(Widget w UNUSED, int n, XEnterWindowEvent *event)
SFenterList	vim/vim/src/gui_at_fs.c	/^static void SFenterList(Widget w, int n, XEnterWindowEvent *event);$/;"	p	file:	signature:(Widget w, int n, XEnterWindowEvent *event)
SFentryHeight	vim/vim/src/gui_at_fs.c	/^static int	SFentryWidth, SFentryHeight;$/;"	v	file:
SFentryWidth	vim/vim/src/gui_at_fs.c	/^static int	SFentryWidth, SFentryHeight;$/;"	v	file:
SFexpand	vim/vim/src/gui_at_fs.c	/^SFexpand(char *str)$/;"	f	file:	signature:(char *str)
SFexpand	vim/vim/src/gui_at_fs.c	/^static void SFexpand(char *str);$/;"	p	file:	signature:(char *str)
SFexposeList	vim/vim/src/gui_at_fs.c	/^SFexposeList($/;"	f	file:	signature:( Widget w UNUSED, XtPointer n, XEvent *event, Boolean *cont UNUSED)
SFexposeList	vim/vim/src/gui_at_fs.c	/^static void SFexposeList(Widget w, XtPointer n, XEvent *event, Boolean *cont);$/;"	p	file:	signature:(Widget w, XtPointer n, XEvent *event, Boolean *cont)
SFfindFile	vim/vim/src/gui_at_fs.c	/^SFfindFile(SFDir *dir, char *str)$/;"	f	file:	signature:(SFDir *dir, char *str)
SFfindFile	vim/vim/src/gui_at_fs.c	/^static int SFfindFile(SFDir *dir, char *str);$/;"	p	file:	signature:(SFDir *dir, char *str)
SFfindHomeDir	vim/vim/src/gui_at_fs.c	/^SFfindHomeDir(char *begin, char *end)$/;"	f	file:	signature:(char *begin, char *end)
SFfindHomeDir	vim/vim/src/gui_at_fs.c	/^static int SFfindHomeDir(char *begin, char *end);$/;"	p	file:	signature:(char *begin, char *end)
SFfont	vim/vim/src/gui_at_fs.c	/^static XFontSet SFfont;$/;"	v	file:
SFfont	vim/vim/src/gui_at_fs.c	/^static XFontStruct *SFfont;$/;"	v	file:
SFfore	vim/vim/src/gui_at_fs.c	/^static Pixel	SFfore, SFback;$/;"	v	file:
SFfree	vim/vim/src/gui_at_fs.c	/^SFfree(int i)$/;"	f	file:	signature:(int i)
SFfree	vim/vim/src/gui_at_fs.c	/^static void SFfree(int i);$/;"	p	file:	signature:(int i)
SFfunc	vim/vim/src/gui_at_fs.c	/^static int	(*SFfunc)();$/;"	v	file:
SFgetDir	vim/vim/src/gui_at_fs.c	/^SFgetDir($/;"	f	file:	signature:( SFDir *dir)
SFgetDir	vim/vim/src/gui_at_fs.c	/^static int SFgetDir(SFDir *dir);$/;"	p	file:	signature:(SFDir *dir)
SFgetHomeDirs	vim/vim/src/gui_at_fs.c	/^SFgetHomeDirs(void)$/;"	f	file:	signature:(void)
SFgetHomeDirs	vim/vim/src/gui_at_fs.c	/^static void SFgetHomeDirs(void);$/;"	p	file:	signature:(void)
SFgetText	vim/vim/src/gui_at_fs.c	/^SFgetText(void)$/;"	f	file:	signature:(void)
SFgetText	vim/vim/src/gui_at_fs.c	/^static char *SFgetText(void);$/;"	p	file:	signature:(void)
SFhAreaSelectedCallback	vim/vim/src/gui_at_fs.c	/^SFhAreaSelectedCallback(Widget w, XtPointer n, XtPointer pnew)$/;"	f	file:	signature:(Widget w, XtPointer n, XtPointer pnew)
SFhAreaSelectedCallback	vim/vim/src/gui_at_fs.c	/^static void SFhAreaSelectedCallback(Widget w, XtPointer n, XtPointer pnew);$/;"	p	file:	signature:(Widget w, XtPointer n, XtPointer pnew)
SFhScrollWidth	vim/vim/src/gui_at_fs.c	/^static int	SFpathScrollWidth, SFvScrollHeight, SFhScrollWidth;$/;"	v	file:
SFhSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^SFhSliderMovedCallback(Widget w UNUSED, XtPointer n, XtPointer nw)$/;"	f	file:	signature:(Widget w UNUSED, XtPointer n, XtPointer nw)
SFhSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^static void SFhSliderMovedCallback(Widget w, XtPointer n, XtPointer nw);$/;"	p	file:	signature:(Widget w, XtPointer n, XtPointer nw)
SFhomeDir	vim/vim/src/gui_at_fs.c	/^static SFDir	SFrootDir, SFhomeDir;$/;"	v	file:
SFinitFont	vim/vim/src/gui_at_fs.c	/^SFinitFont(void)$/;"	f	file:	signature:(void)
SFinitFont	vim/vim/src/gui_at_fs.c	/^static void SFinitFont(void);$/;"	p	file:	signature:(void)
SFinvertEntry	vim/vim/src/gui_at_fs.c	/^SFinvertEntry(int n)$/;"	f	file:	signature:(int n)
SFinvertEntry	vim/vim/src/gui_at_fs.c	/^static void SFinvertEntry(int n);$/;"	p	file:	signature:(int n)
SFinvertGC	vim/vim/src/gui_at_fs.c	/^static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;$/;"	v	file:
SFleaveList	vim/vim/src/gui_at_fs.c	/^SFleaveList(Widget w UNUSED, int n, XEvent *event UNUSED)$/;"	f	file:	signature:(Widget w UNUSED, int n, XEvent *event UNUSED)
SFleaveList	vim/vim/src/gui_at_fs.c	/^static void SFleaveList(Widget w, int n, XEvent *event);$/;"	p	file:	signature:(Widget w, int n, XEvent *event)
SFlineGC	vim/vim/src/gui_at_fs.c	/^static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;$/;"	v	file:
SFlineToTextH	vim/vim/src/gui_at_fs.c	/^static int	SFlineToTextH = 3;$/;"	v	file:
SFlineToTextV	vim/vim/src/gui_at_fs.c	/^static int	SFlineToTextV = 3;$/;"	v	file:
SFlistSize	vim/vim/src/gui_at_fs.c	/^static int	SFlistSize = 10;$/;"	v	file:
SFlogins	vim/vim/src/gui_at_fs.c	/^static SFLogin	*SFlogins;$/;"	v	file:
SFlowerY	vim/vim/src/gui_at_fs.c	/^static int	SFupperX, SFlowerY, SFupperY;$/;"	v	file:
SFmodVerifyCallback	vim/vim/src/gui_at_fs.c	/^SFmodVerifyCallback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XEvent *event, Boolean *cont UNUSED)
SFmodVerifyCallback	vim/vim/src/gui_at_fs.c	/^static void SFmodVerifyCallback(Widget w, XtPointer client_data, XEvent *event, Boolean *cont);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XEvent *event, Boolean *cont)
SFmotionList	vim/vim/src/gui_at_fs.c	/^SFmotionList(Widget w UNUSED, int n, XMotionEvent *event)$/;"	f	file:	signature:(Widget w UNUSED, int n, XMotionEvent *event)
SFmotionList	vim/vim/src/gui_at_fs.c	/^static void SFmotionList(Widget w, int n, XMotionEvent *event);$/;"	p	file:	signature:(Widget w, int n, XMotionEvent *event)
SFnewInvertEntry	vim/vim/src/gui_at_fs.c	/^SFnewInvertEntry(int n, XMotionEvent *event)$/;"	f	file:	signature:(int n, XMotionEvent *event)
SFnewInvertEntry	vim/vim/src/gui_at_fs.c	/^static int SFnewInvertEntry(int n, XMotionEvent *event);$/;"	p	file:	signature:(int n, XMotionEvent *event)
SFokCallback	vim/vim/src/gui_at_fs.c	/^SFokCallback(Widget w UNUSED, XtPointer cl UNUSED, XtPointer cd UNUSED)$/;"	f	file:	signature:(Widget w UNUSED, XtPointer cl UNUSED, XtPointer cd UNUSED)
SFokCallback	vim/vim/src/gui_at_fs.c	/^static void SFokCallback(Widget w, XtPointer cl, XtPointer cd);$/;"	p	file:	signature:(Widget w, XtPointer cl, XtPointer cd)
SFokSelect	vim/vim/src/gui_at_fs.c	/^static XtCallbackRec SFokSelect[] =$/;"	v	file:
SFpathAreaSelectedCallback	vim/vim/src/gui_at_fs.c	/^SFpathAreaSelectedCallback($/;"	f	file:	signature:( Widget w, XtPointer client_data UNUSED, XtPointer pnew)
SFpathAreaSelectedCallback	vim/vim/src/gui_at_fs.c	/^static void SFpathAreaSelectedCallback(Widget w, XtPointer client_data, XtPointer pnew);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer pnew)
SFpathScrollWidth	vim/vim/src/gui_at_fs.c	/^static int	SFpathScrollWidth, SFvScrollHeight, SFhScrollWidth;$/;"	v	file:
SFpathSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^SFpathSliderMovedCallback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XtPointer nw)
SFpathSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^static void SFpathSliderMovedCallback(Widget w, XtPointer client_data, XtPointer nw);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer nw)
SFprepareToReturn	vim/vim/src/gui_at_fs.c	/^SFprepareToReturn(void)$/;"	f	file:	signature:(void)
SFprepareToReturn	vim/vim/src/gui_at_fs.c	/^static void SFprepareToReturn(void);$/;"	p	file:	signature:(void)
SFreplaceText	vim/vim/src/gui_at_fs.c	/^SFreplaceText(SFDir *dir, char *str)$/;"	f	file:	signature:(SFDir *dir, char *str)
SFreplaceText	vim/vim/src/gui_at_fs.c	/^static void SFreplaceText(SFDir *dir, char *str);$/;"	p	file:	signature:(SFDir *dir, char *str)
SFrootDir	vim/vim/src/gui_at_fs.c	/^static SFDir	SFrootDir, SFhomeDir;$/;"	v	file:
SFscrollGC	vim/vim/src/gui_at_fs.c	/^static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;$/;"	v	file:
SFscrollTimer	vim/vim/src/gui_at_fs.c	/^SFscrollTimer(XtPointer p, XtIntervalId *id UNUSED)$/;"	f	file:	signature:(XtPointer p, XtIntervalId *id UNUSED)
SFscrollTimer	vim/vim/src/gui_at_fs.c	/^static void SFscrollTimer(XtPointer p, XtIntervalId *id);$/;"	p	file:	signature:(XtPointer p, XtIntervalId *id)
SFscrollTimerId	vim/vim/src/gui_at_fs.c	/^static XtIntervalId SFscrollTimerId;$/;"	v	file:
SFscrollTimerInterval	vim/vim/src/gui_at_fs.c	/^SFscrollTimerInterval(void)$/;"	f	file:	signature:(void)
SFscrollTimerInterval	vim/vim/src/gui_at_fs.c	/^static unsigned long SFscrollTimerInterval(void);$/;"	p	file:	signature:(void)
SFsegs	vim/vim/src/gui_at_fs.c	/^static XSegment SFsegs[2], SFcompletionSegs[2];$/;"	v	file:
SFsetColors	vim/vim/src/gui_at_fs.c	/^SFsetColors($/;"	f	file:	signature:( guicolor_T bg, guicolor_T fg, guicolor_T scroll_bg, guicolor_T scroll_fg)
SFsetColors	vim/vim/src/gui_at_fs.c	/^static void SFsetColors(guicolor_T bg, guicolor_T fg, guicolor_T scroll_bg, guicolor_T scrollfg);$/;"	p	file:	signature:(guicolor_T bg, guicolor_T fg, guicolor_T scroll_bg, guicolor_T scrollfg)
SFsetText	vim/vim/src/gui_at_fs.c	/^SFsetText(char *path)$/;"	f	file:	signature:(char *path)
SFsetText	vim/vim/src/gui_at_fs.c	/^static void SFsetText(char *path);$/;"	p	file:	signature:(char *path)
SFstartDir	vim/vim/src/gui_at_fs.c	/^static char	SFstartDir[MAXPATHL],$/;"	v	file:
SFstatAndCheck	vim/vim/src/gui_at_fs.c	/^SFstatAndCheck(SFDir *dir, SFEntry *entry)$/;"	f	file:	signature:(SFDir *dir, SFEntry *entry)
SFstatAndCheck	vim/vim/src/gui_at_fs.c	/^static int SFstatAndCheck(SFDir *dir, SFEntry *entry);$/;"	p	file:	signature:(SFDir *dir, SFEntry *entry)
SFstatChar	vim/vim/src/gui_at_fs.c	/^SFstatChar(stat_T *statBuf)$/;"	f	file:	signature:(stat_T *statBuf)
SFstatChar	vim/vim/src/gui_at_fs.c	/^static char SFstatChar(stat_T *statBuf);$/;"	p	file:	signature:(stat_T *statBuf)
SFstatus	vim/vim/src/gui_at_fs.c	/^static int	SFstatus = SEL_FILE_NULL;$/;"	v	file:
SFstrdup	vim/vim/src/gui_at_fs.c	/^SFstrdup(char **s1, char *s2)$/;"	f	file:	signature:(char **s1, char *s2)
SFstrdup	vim/vim/src/gui_at_fs.c	/^static void SFstrdup(char **s1, char *s2);$/;"	p	file:	signature:(char **s1, char *s2)
SFtextBuffer	vim/vim/src/gui_at_fs.c	/^static char	SFtextBuffer[MAXPATHL*sizeof(wchar_t)];$/;"	v	file:
SFtextBuffer	vim/vim/src/gui_at_fs.c	/^static char	SFtextBuffer[MAXPATHL];$/;"	v	file:
SFtextChanged	vim/vim/src/gui_at_fs.c	/^SFtextChanged(void)$/;"	f	file:	signature:(void)
SFtextChanged	vim/vim/src/gui_at_fs.c	/^static void SFtextChanged(void);$/;"	p	file:	signature:(void)
SFtextGC	vim/vim/src/gui_at_fs.c	/^static GC SFlineGC, SFscrollGC, SFinvertGC, SFtextGC;$/;"	v	file:
SFtextPos	vim/vim/src/gui_at_fs.c	/^static XawTextPosition SFtextPos;$/;"	v	file:
SFtextX	vim/vim/src/gui_at_fs.c	/^static int	SFtextX, SFtextYoffset;$/;"	v	file:
SFtextYoffset	vim/vim/src/gui_at_fs.c	/^static int	SFtextX, SFtextYoffset;$/;"	v	file:
SFtwiddle	vim/vim/src/gui_at_fs.c	/^static int	SFtwiddle = 0;$/;"	v	file:
SFunreadableDir	vim/vim/src/gui_at_fs.c	/^SFunreadableDir(SFDir *dir)$/;"	f	file:	signature:(SFDir *dir)
SFunreadableDir	vim/vim/src/gui_at_fs.c	/^static void SFunreadableDir(SFDir *dir);$/;"	p	file:	signature:(SFDir *dir)
SFunselect	vim/vim/src/gui_at_fs.c	/^SFunselect(void)$/;"	f	file:	signature:(void)
SFunselect	vim/vim/src/gui_at_fs.c	/^static void SFunselect(void);$/;"	p	file:	signature:(void)
SFupdatePath	vim/vim/src/gui_at_fs.c	/^SFupdatePath(void)$/;"	f	file:	signature:(void)
SFupdatePath	vim/vim/src/gui_at_fs.c	/^static void SFupdatePath(void);$/;"	p	file:	signature:(void)
SFupperX	vim/vim/src/gui_at_fs.c	/^static int	SFupperX, SFlowerY, SFupperY;$/;"	v	file:
SFupperY	vim/vim/src/gui_at_fs.c	/^static int	SFupperX, SFlowerY, SFupperY;$/;"	v	file:
SFvAreaSelectedCallback	vim/vim/src/gui_at_fs.c	/^SFvAreaSelectedCallback(Widget w, XtPointer n, XtPointer pnew)$/;"	f	file:	signature:(Widget w, XtPointer n, XtPointer pnew)
SFvAreaSelectedCallback	vim/vim/src/gui_at_fs.c	/^static void SFvAreaSelectedCallback(Widget w, XtPointer n, XtPointer pnew);$/;"	p	file:	signature:(Widget w, XtPointer n, XtPointer pnew)
SFvFloatSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^SFvFloatSliderMovedCallback(Widget w, XtPointer n, XtPointer fnew)$/;"	f	file:	signature:(Widget w, XtPointer n, XtPointer fnew)
SFvFloatSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^static void SFvFloatSliderMovedCallback(Widget w, XtPointer n, XtPointer fnew);$/;"	p	file:	signature:(Widget w, XtPointer n, XtPointer fnew)
SFvScrollHeight	vim/vim/src/gui_at_fs.c	/^static int	SFpathScrollWidth, SFvScrollHeight, SFhScrollWidth;$/;"	v	file:
SFvSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^SFvSliderMovedCallback(Widget w UNUSED, int n, int nw)$/;"	f	file:	signature:(Widget w UNUSED, int n, int nw)
SFvSliderMovedCallback	vim/vim/src/gui_at_fs.c	/^static void SFvSliderMovedCallback(Widget w, int n, int nw);$/;"	p	file:	signature:(Widget w, int n, int nw)
SFwmDeleteWindow	vim/vim/src/gui_at_fs.c	/^static Atom	SFwmDeleteWindow;$/;"	v	file:
SFworkProc	vim/vim/src/gui_at_fs.c	/^SFworkProc(void)$/;"	f	file:	signature:(void)
SFworkProc	vim/vim/src/gui_at_fs.c	/^static Boolean SFworkProc(void);$/;"	p	file:	signature:(void)
SFworkProcAdded	vim/vim/src/gui_at_fs.c	/^static int	SFworkProcAdded = 0;$/;"	v	file:
SFwriteStatChar	vim/vim/src/gui_at_fs.c	/^SFwriteStatChar($/;"	f	file:	signature:( char *name, int last, stat_T *statBuf)
SFwriteStatChar	vim/vim/src/gui_at_fs.c	/^static void SFwriteStatChar(char *name, int last, stat_T *statBuf);$/;"	p	file:	signature:(char *name, int last, stat_T *statBuf)
SG_CTERM	vim/vim/src/syntax.c	66;"	d	file:
SG_GUI	vim/vim/src/syntax.c	67;"	d	file:
SG_LINK	vim/vim/src/syntax.c	68;"	d	file:
SG_TERM	vim/vim/src/syntax.c	65;"	d	file:
SHADOWDIR	vim/vim/src/Makefile	/^SHADOWDIR = shadow$/;"	m
SHAPE_BLOCK	vim/vim/src/structs.h	2988;"	d
SHAPE_CURSOR	vim/vim/src/structs.h	2996;"	d
SHAPE_HOR	vim/vim/src/structs.h	2989;"	d
SHAPE_IDX_C	vim/vim/src/structs.h	2973;"	d
SHAPE_IDX_CI	vim/vim/src/structs.h	2974;"	d
SHAPE_IDX_CLINE	vim/vim/src/structs.h	2978;"	d
SHAPE_IDX_COUNT	vim/vim/src/structs.h	2986;"	d
SHAPE_IDX_CR	vim/vim/src/structs.h	2975;"	d
SHAPE_IDX_I	vim/vim/src/structs.h	2971;"	d
SHAPE_IDX_MORE	vim/vim/src/structs.h	2983;"	d
SHAPE_IDX_MOREL	vim/vim/src/structs.h	2984;"	d
SHAPE_IDX_N	vim/vim/src/structs.h	2969;"	d
SHAPE_IDX_O	vim/vim/src/structs.h	2976;"	d
SHAPE_IDX_R	vim/vim/src/structs.h	2972;"	d
SHAPE_IDX_SDRAG	vim/vim/src/structs.h	2980;"	d
SHAPE_IDX_SM	vim/vim/src/structs.h	2985;"	d
SHAPE_IDX_STATUS	vim/vim/src/structs.h	2979;"	d
SHAPE_IDX_V	vim/vim/src/structs.h	2970;"	d
SHAPE_IDX_VDRAG	vim/vim/src/structs.h	2982;"	d
SHAPE_IDX_VE	vim/vim/src/structs.h	2977;"	d
SHAPE_IDX_VSEP	vim/vim/src/structs.h	2981;"	d
SHAPE_MOUSE	vim/vim/src/structs.h	2995;"	d
SHAPE_VER	vim/vim/src/structs.h	2990;"	d
SHARED_MASK	vim/vim/src/spellfile.c	1649;"	d	file:
SHELL	vim/vim/src/Make_manx.mak	/^SHELL = csh$/;"	m
SHELL	vim/vim/src/Make_sas.mak	/^SHELL	= csh$/;"	m
SHELL	vim/vim/src/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	vim/vim/src/po/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL_COOKED	vim/vim/src/vim.h	992;"	d
SHELL_DOOUT	vim/vim/src/vim.h	993;"	d
SHELL_EXPAND	vim/vim/src/vim.h	991;"	d
SHELL_FILTER	vim/vim/src/vim.h	990;"	d
SHELL_READ	vim/vim/src/vim.h	995;"	d
SHELL_SILENT	vim/vim/src/vim.h	994;"	d
SHELL_SPECIAL	vim/vim/src/os_unix.c	6092;"	d	file:
SHELL_WRITE	vim/vim/src/vim.h	996;"	d
SHIFT	vim/vim/src/os_win32.c	759;"	d	file:
SHIN	vim/vim/src/farsi.h	126;"	d
SHM_A	vim/vim/src/option.h	202;"	d
SHM_ALL	vim/vim/src/option.h	214;"	d
SHM_ATTENTION	vim/vim/src/option.h	209;"	d
SHM_COMPLETIONMENU	vim/vim/src/option.h	211;"	d
SHM_FILE	vim/vim/src/option.h	196;"	d
SHM_FILEINFO	vim/vim/src/option.h	213;"	d
SHM_INTRO	vim/vim/src/option.h	210;"	d
SHM_LAST	vim/vim/src/option.h	197;"	d
SHM_LINES	vim/vim/src/option.h	199;"	d
SHM_MOD	vim/vim/src/option.h	195;"	d
SHM_NEW	vim/vim/src/option.h	200;"	d
SHM_OVER	vim/vim/src/option.h	206;"	d
SHM_OVERALL	vim/vim/src/option.h	207;"	d
SHM_RECORDING	vim/vim/src/option.h	212;"	d
SHM_RO	vim/vim/src/option.h	194;"	d
SHM_SEARCH	vim/vim/src/option.h	208;"	d
SHM_TEXT	vim/vim/src/option.h	198;"	d
SHM_TRUNC	vim/vim/src/option.h	204;"	d
SHM_TRUNCALL	vim/vim/src/option.h	205;"	d
SHM_WRI	vim/vim/src/option.h	201;"	d
SHM_WRITE	vim/vim/src/option.h	203;"	d
SHORT	vim/vim/src/os_mswin.c	/^typedef int SHORT;$/;"	t	file:
SHORT	vim/vim/src/os_win32.c	/^typedef int SHORT;$/;"	t	file:
SHOWCMD_BUFLEN	vim/vim/src/normal.c	3732;"	d	file:
SHOWCMD_COLS	vim/vim/src/vim.h	1728;"	d
SHOWMATCH	vim/vim/src/vim.h	719;"	d
SHR	vim/vim/src/sha256.c	84;"	d	file:
SHRPENV	vim/vim/src/auto/config.mk	/^SHRPENV		= $/;"	m
SIDENT	vim/vim/src/regexp.c	188;"	d	file:
SID_CARG	vim/vim/src/vim.h	1282;"	d
SID_CMDARG	vim/vim/src/vim.h	1281;"	d
SID_ENV	vim/vim/src/vim.h	1283;"	d
SID_ERROR	vim/vim/src/vim.h	1284;"	d
SID_MODELINE	vim/vim/src/vim.h	1280;"	d
SID_NONE	vim/vim/src/vim.h	1285;"	d
SIGDEFARG	vim/vim/src/if_cscope.c	/^sig_handler SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_mac.h	283;"	d
SIGDEFARG	vim/vim/src/os_unix.c	/^catch_sigint SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.c	/^catch_sigpwr SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.c	/^deathtrap SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.c	/^sig_alarm SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.c	/^sig_sysmouse SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.c	/^sig_winch SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.c	/^sigcont_handler SIGDEFARG(sigarg)$/;"	f	file:
SIGDEFARG	vim/vim/src/os_unix.h	102;"	d
SIGDEFARG	vim/vim/src/os_unix.h	107;"	d
SIGDEFARG	vim/vim/src/os_unix.h	98;"	d
SIGDUMMYARG	vim/vim/src/os_mac.h	286;"	d
SIGDUMMYARG	vim/vim/src/os_unix.h	103;"	d
SIGDUMMYARG	vim/vim/src/os_unix.h	108;"	d
SIGDUMMYARG	vim/vim/src/os_unix.h	99;"	d
SIGHAS3ARGS	vim/vim/src/os_unix.h	92;"	d
SIGHASARG	vim/vim/src/os_unix.h	88;"	d
SIGNAL_BLOCK	vim/vim/src/vim.h	2371;"	d
SIGNAL_UNBLOCK	vim/vim/src/vim.h	2372;"	d
SIGNCMD_DEFINE	vim/vim/src/ex_cmds.c	7520;"	d	file:
SIGNCMD_JUMP	vim/vim/src/ex_cmds.c	7530;"	d	file:
SIGNCMD_LAST	vim/vim/src/ex_cmds.c	7532;"	d	file:
SIGNCMD_LIST	vim/vim/src/ex_cmds.c	7524;"	d	file:
SIGNCMD_PLACE	vim/vim/src/ex_cmds.c	7526;"	d	file:
SIGNCMD_UNDEFINE	vim/vim/src/ex_cmds.c	7522;"	d	file:
SIGNCMD_UNPLACE	vim/vim/src/ex_cmds.c	7528;"	d	file:
SIGN_ANY	vim/vim/src/structs.h	703;"	d
SIGN_ASPECT	vim/vim/src/gui_gtk_x11.c	7325;"	d	file:
SIGN_BYTE	vim/vim/src/vim.h	2283;"	d
SIGN_HEIGHT	vim/vim/src/gui_gtk_x11.c	7324;"	d	file:
SIGN_ICON	vim/vim/src/structs.h	705;"	d
SIGN_LINEHL	vim/vim/src/structs.h	704;"	d
SIGN_TEXT	vim/vim/src/structs.h	706;"	d
SIGN_WIDTH	vim/vim/src/gui_gtk_x11.c	7323;"	d	file:
SIGN_WIDTH	vim/vim/src/gui_x11.c	3232;"	d	file:
SIGPROTOARG	vim/vim/src/os_mac.h	280;"	d
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE catch_sigint SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE catch_sigpwr SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE deathtrap SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE sig_alarm SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE sig_sysmouse SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE sig_winch SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.c	/^static RETSIGTYPE sigcont_handler SIGPROTOARG;$/;"	v	file:
SIGPROTOARG	vim/vim/src/os_unix.h	101;"	d
SIGPROTOARG	vim/vim/src/os_unix.h	106;"	d
SIGPROTOARG	vim/vim/src/os_unix.h	97;"	d
SIGRETURN	vim/vim/src/auto/config.h	137;"	d
SIGRETURN	vim/vim/src/os_mac.h	291;"	d
SIGRETURN	vim/vim/src/os_vms_conf.h	75;"	d
SIGSET_DECL	vim/vim/src/os_unix.c	215;"	d	file:
SIGSET_DECL	vim/vim/src/os_unix.c	219;"	d	file:
SIGSTKSZ	vim/vim/src/os_unix.c	845;"	d	file:
SIGWINCH	vim/vim/src/os_unix.c	123;"	d	file:
SIGWINCH	vim/vim/src/os_unix.c	131;"	d	file:
SIG_ERR	vim/vim/src/os_unix.c	229;"	d	file:
SIMPLE	vim/vim/src/regexp.c	396;"	d	file:
SIN	vim/vim/src/farsi.h	125;"	d
SIN_CHANGED	vim/vim/src/vim.h	1110;"	d
SIN_INSERT	vim/vim/src/vim.h	1111;"	d
SIN_UNDO	vim/vim/src/vim.h	1112;"	d
SIZE	vim/vim/src/gui_xmdlg.c	/^    SIZE,$/;"	e	enum:ListSpecifier	file:
SIZEOF_CSTR	vim/vim/src/hardcopy.c	1345;"	d	file:
SIZEOF_OFF_T	vim/vim/src/auto/config.h	47;"	d
SIZEOF_TIME_T	vim/vim/src/auto/config.h	50;"	d
SKIP_FOLLOWING_SLASHES	vim/vim/src/os_vms.c	86;"	d	file:
SKIP_STOP	vim/vim/src/netbeans.c	973;"	d	file:
SKWORD	vim/vim/src/regexp.c	190;"	d	file:
SMACK_LABEL_LEN	vim/vim/src/os_unix.c	53;"	d	file:
SMALL_RECT	vim/vim/src/os_mswin.c	/^typedef int SMALL_RECT;$/;"	t	file:
SMALL_RECT	vim/vim/src/os_win32.c	/^typedef int SMALL_RECT;$/;"	t	file:
SMBUFSIZE	vim/vim/src/fileio.c	25;"	d	file:
SMODE_CONT	vim/vim/src/gui_at_sb.h	135;"	d
SMODE_LINE_DOWN	vim/vim/src/gui_at_sb.h	139;"	d
SMODE_LINE_UP	vim/vim/src/gui_at_sb.h	138;"	d
SMODE_NONE	vim/vim/src/gui_at_sb.h	134;"	d
SMODE_PAGE_DOWN	vim/vim/src/gui_at_sb.h	137;"	d
SMODE_PAGE_UP	vim/vim/src/gui_at_sb.h	136;"	d
SM_CXPADDEDBORDER	vim/vim/src/os_win32.h	105;"	d
SNAP_AUCMD_IDX	vim/vim/src/structs.h	2407;"	d
SNAP_COUNT	vim/vim/src/structs.h	2408;"	d
SNAP_COUNT	vim/vim/src/structs.h	2410;"	d
SNAP_HELP_IDX	vim/vim/src/structs.h	2405;"	d
SNF_REQUIRED	vim/vim/src/spellfile.c	292;"	d	file:
SN_CHARFLAGS	vim/vim/src/spellfile.c	274;"	d	file:
SN_COMPOUND	vim/vim/src/spellfile.c	281;"	d	file:
SN_END	vim/vim/src/spellfile.c	290;"	d	file:
SN_INFO	vim/vim/src/spellfile.c	288;"	d	file:
SN_MAP	vim/vim/src/spellfile.c	280;"	d	file:
SN_MIDWORD	vim/vim/src/spellfile.c	275;"	d	file:
SN_NOBREAK	vim/vim/src/spellfile.c	283;"	d	file:
SN_NOCOMPOUNDSUGS	vim/vim/src/spellfile.c	289;"	d	file:
SN_NOSPLITSUGS	vim/vim/src/spellfile.c	287;"	d	file:
SN_PREFCOND	vim/vim/src/spellfile.c	276;"	d	file:
SN_REGION	vim/vim/src/spellfile.c	273;"	d	file:
SN_REP	vim/vim/src/spellfile.c	277;"	d	file:
SN_REPSAL	vim/vim/src/spellfile.c	285;"	d	file:
SN_SAL	vim/vim/src/spellfile.c	278;"	d	file:
SN_SOFO	vim/vim/src/spellfile.c	279;"	d	file:
SN_SUGFILE	vim/vim/src/spellfile.c	284;"	d	file:
SN_SYLLABLE	vim/vim/src/spellfile.c	282;"	d	file:
SN_WORDS	vim/vim/src/spellfile.c	286;"	d	file:
SOCK_ERRNO	vim/vim/src/channel.c	26;"	d	file:
SOCK_ERRNO	vim/vim/src/channel.c	48;"	d	file:
SOME_BUILTIN_TCAPS	vim/vim/src/feature.h	557;"	d
SOME_VALID	vim/vim/src/vim.h	640;"	d
SOPT_BOOL	vim/vim/src/vim.h	2419;"	d
SOPT_BUF	vim/vim/src/vim.h	2424;"	d
SOPT_GLOBAL	vim/vim/src/vim.h	2422;"	d
SOPT_NUM	vim/vim/src/vim.h	2420;"	d
SOPT_STRING	vim/vim/src/vim.h	2421;"	d
SOPT_UNSET	vim/vim/src/vim.h	2425;"	d
SOPT_WIN	vim/vim/src/vim.h	2423;"	d
SOURCE	vim/vim/src/Make_dvc.mak	/^SOURCE=.\\vimrun.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\arabic.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\blowfish.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\buffer.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\charset.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\crypt.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\crypt_zip.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\dict.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\diff.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\digraph.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\edit.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\eval.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\evalfunc.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ex_cmds.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ex_cmds2.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ex_docmd.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ex_eval.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ex_getln.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\farsi.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\fileio.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\fold.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\getchar.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\gui.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\gui_beval.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\gui_w32.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\hardcopy.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\hashtab.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\if_ole.cpp$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\if_ole.idl$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\json.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\list.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\main.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\mark.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\mbyte.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\memfile.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\memline.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\menu.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\message.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\misc1.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\misc2.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\move.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\normal.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ops.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\option.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\os_mswin.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\os_w32exe.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\os_win32.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\popupmnu.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\quickfix.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\regexp.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\screen.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\search.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\sha256.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\spell.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\spellfile.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\syntax.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\tag.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\term.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\ui.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\undo.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\userfunc.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\version.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\vim.rc$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\winclip.c$/;"	m
SOURCE	vim/vim/src/Make_ivc.mak	/^SOURCE=.\\window.c$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\Commands.cpp$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\DSAddIn.cpp$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\OleAut.cpp$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\Reg.cpp$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\StdAfx.cpp$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\VisVim.cpp$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\VisVim.def$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\VisVim.odl$/;"	m
SOURCE	vim/vim/src/VisVim/VisVim.mak	/^SOURCE=.\\VisVim.rc$/;"	m
SPACE_FOR_ARGNR	vim/vim/src/buffer.c	3626;"	d	file:
SPACE_FOR_DIR	vim/vim/src/buffer.c	3625;"	d	file:
SPACE_FOR_FNAME	vim/vim/src/buffer.c	3624;"	d	file:
SPACE_IN_FILENAME	vim/vim/src/os_amiga.h	14;"	d
SPACE_IN_FILENAME	vim/vim/src/os_dos.h	130;"	d
SPACE_IN_FILENAME	vim/vim/src/os_mac.h	92;"	d
SPACE_IN_FILENAME	vim/vim/src/os_vms_conf.h	4;"	d
SPECIAL_WILDCHAR	vim/vim/src/os_unix.h	390;"	d
SPEC_ABUF	vim/vim/src/ex_docmd.c	10636;"	d	file:
SPEC_AFILE	vim/vim/src/ex_docmd.c	10634;"	d	file:
SPEC_AMATCH	vim/vim/src/ex_docmd.c	10638;"	d	file:
SPEC_CCWORD	vim/vim/src/ex_docmd.c	10625;"	d	file:
SPEC_CFILE	vim/vim/src/ex_docmd.c	10627;"	d	file:
SPEC_CLIENT	vim/vim/src/ex_docmd.c	10643;"	d	file:
SPEC_CWORD	vim/vim/src/ex_docmd.c	10623;"	d	file:
SPEC_HASH	vim/vim/src/ex_docmd.c	10621;"	d	file:
SPEC_PERC	vim/vim/src/ex_docmd.c	10619;"	d	file:
SPEC_SFILE	vim/vim/src/ex_docmd.c	10629;"	d	file:
SPEC_SLNUM	vim/vim/src/ex_docmd.c	10631;"	d	file:
SPELLSOURCE	vim/vim/src/Makefile	/^SPELLSOURCE = ..\/runtime\/spell$/;"	m
SPELLSUBDIR	vim/vim/src/Makefile	/^SPELLSUBDIR = \/spell$/;"	m
SPELLSUBLOC	vim/vim/src/Makefile	/^SPELLSUBLOC	= $(VIMRTLOC)$(SPELLSUBDIR)$/;"	m
SPELL_EXTERN	vim/vim/src/spell.h	301;"	d
SPELL_EXTERN	vim/vim/src/spell.h	304;"	d
SPELL_INIT	vim/vim/src/spell.h	302;"	d
SPELL_INIT	vim/vim/src/spell.h	305;"	d
SPELL_ISUPPER	vim/vim/src/spell.h	264;"	d
SPELL_ISUPPER	vim/vim/src/spell.h	289;"	d
SPELL_ISUPPER	vim/vim/src/spell.h	292;"	d
SPELL_TOFOLD	vim/vim/src/spell.h	262;"	d
SPELL_TOFOLD	vim/vim/src/spell.h	273;"	d
SPELL_TOFOLD	vim/vim/src/spell.h	276;"	d
SPELL_TOUPPER	vim/vim/src/spell.h	263;"	d
SPELL_TOUPPER	vim/vim/src/spell.h	281;"	d
SPELL_TOUPPER	vim/vim/src/spell.h	284;"	d
SPI_GETWHEELSCROLLLINES	vim/vim/src/gui_w32.c	4519;"	d	file:
SPI_SETWHEELSCROLLLINES	vim/vim/src/gui_w32.c	4522;"	d	file:
SPL_FNAME_ADD	vim/vim/src/spell.h	144;"	d
SPL_FNAME_ADD	vim/vim/src/spell.h	148;"	d
SPL_FNAME_ASCII	vim/vim/src/spell.h	145;"	d
SPL_FNAME_ASCII	vim/vim/src/spell.h	149;"	d
SPL_FNAME_TMPL	vim/vim/src/spell.h	143;"	d
SPL_FNAME_TMPL	vim/vim/src/spell.h	147;"	d
SPO_COUNT	vim/vim/src/syntax.c	133;"	d	file:
SPO_HE_OFF	vim/vim/src/syntax.c	129;"	d	file:
SPO_HS_OFF	vim/vim/src/syntax.c	128;"	d	file:
SPO_LC_OFF	vim/vim/src/syntax.c	132;"	d	file:
SPO_ME_OFF	vim/vim/src/syntax.c	127;"	d	file:
SPO_MS_OFF	vim/vim/src/syntax.c	126;"	d	file:
SPO_RE_OFF	vim/vim/src/syntax.c	131;"	d	file:
SPO_RS_OFF	vim/vim/src/syntax.c	130;"	d	file:
SPRINT	vim/vim/src/regexp.c	194;"	d	file:
SPSTART	vim/vim/src/regexp.c	397;"	d	file:
SPS_BEST	vim/vim/src/spell.c	3273;"	d	file:
SPS_DOUBLE	vim/vim/src/spell.c	3275;"	d	file:
SPS_FAST	vim/vim/src/spell.c	3274;"	d	file:
SPTYPE_END	vim/vim/src/syntax.c	182;"	d	file:
SPTYPE_MATCH	vim/vim/src/syntax.c	180;"	d	file:
SPTYPE_SKIP	vim/vim/src/syntax.c	183;"	d	file:
SPTYPE_START	vim/vim/src/syntax.c	181;"	d	file:
SPWORDLEN	vim/vim/src/screen.c	3077;"	d	file:
SP_BAD	vim/vim/src/spell.c	99;"	d	file:
SP_BANNED	vim/vim/src/spell.c	95;"	d	file:
SP_COLUMN	vim/vim/src/evalfunc.c	9165;"	d	file:
SP_END	vim/vim/src/evalfunc.c	9164;"	d	file:
SP_FORMERROR	vim/vim/src/spell.h	223;"	d
SP_LOCAL	vim/vim/src/spell.c	98;"	d	file:
SP_NOMOVE	vim/vim/src/evalfunc.c	9158;"	d	file:
SP_OK	vim/vim/src/spell.c	96;"	d	file:
SP_OTHERERROR	vim/vim/src/spell.h	224;"	d
SP_RARE	vim/vim/src/spell.c	97;"	d	file:
SP_REPEAT	vim/vim/src/evalfunc.c	9159;"	d	file:
SP_RETCOUNT	vim/vim/src/evalfunc.c	9160;"	d	file:
SP_SETPCMARK	vim/vim/src/evalfunc.c	9161;"	d	file:
SP_START	vim/vim/src/evalfunc.c	9162;"	d	file:
SP_SUBPAT	vim/vim/src/evalfunc.c	9163;"	d	file:
SP_TRUNCERROR	vim/vim/src/spell.h	222;"	d
SRC	vim/vim/src/Make_dice.mak	/^SRC = \\$/;"	m
SRC	vim/vim/src/Make_manx.mak	/^SRC =	arabic.c \\$/;"	m
SRC	vim/vim/src/Make_morph.mak	/^SRC =	arabic.c						\\$/;"	m
SRC	vim/vim/src/Make_sas.mak	/^SRC = \\$/;"	m
SRC	vim/vim/src/Makefile	/^SRC =	$(BASIC_SRC) \\$/;"	m
SRC_CMD	vim/vim/src/farsi.h	176;"	d
SRC_EDT	vim/vim/src/farsi.h	175;"	d
SREQ_BUF	vim/vim/src/vim.h	2430;"	d
SREQ_GLOBAL	vim/vim/src/vim.h	2428;"	d
SREQ_WIN	vim/vim/src/vim.h	2429;"	d
SRHEIGHT	vim/vim/src/os_win32.c	2086;"	d	file:
SROP_Add	vim/vim/src/if_xcmdsrv.c	/^enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };$/;"	e	enum:ServerReplyOp	file:
SROP_Delete	vim/vim/src/if_xcmdsrv.c	/^enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };$/;"	e	enum:ServerReplyOp	file:
SROP_Find	vim/vim/src/if_xcmdsrv.c	/^enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };$/;"	e	enum:ServerReplyOp	file:
SRWIDTH	vim/vim/src/os_win32.c	2085;"	d	file:
SSOP_BLANK	vim/vim/src/option.h	758;"	d
SSOP_BUFFERS	vim/vim/src/option.h	751;"	d
SSOP_CURDIR	vim/vim/src/option.h	763;"	d
SSOP_CURSOR	vim/vim/src/option.h	765;"	d
SSOP_FOLDS	vim/vim/src/option.h	764;"	d
SSOP_GLOBALS	vim/vim/src/option.h	759;"	d
SSOP_HELP	vim/vim/src/option.h	757;"	d
SSOP_LOCALOPTIONS	vim/vim/src/option.h	755;"	d
SSOP_OPTIONS	vim/vim/src/option.h	756;"	d
SSOP_RESIZE	vim/vim/src/option.h	753;"	d
SSOP_SESDIR	vim/vim/src/option.h	762;"	d
SSOP_SLASH	vim/vim/src/option.h	760;"	d
SSOP_TABPAGES	vim/vim/src/option.h	766;"	d
SSOP_UNIX	vim/vim/src/option.h	761;"	d
SSOP_WINPOS	vim/vim/src/option.h	752;"	d
SSOP_WINSIZE	vim/vim/src/option.h	754;"	d
SST_DIST	vim/vim/src/vim.h	903;"	d
SST_FIX_STATES	vim/vim/src/vim.h	902;"	d
SST_INVALID	vim/vim/src/vim.h	904;"	d
SST_MAX_ENTRIES	vim/vim/src/vim.h	901;"	d
SST_MIN_ENTRIES	vim/vim/src/vim.h	900;"	d
STACK_INCR	vim/vim/src/memline.c	211;"	d	file:
STAR	vim/vim/src/regexp.c	161;"	d	file:
STARTUPINFO	vim/vim/src/os_win32.c	/^typedef int STARTUPINFO;$/;"	t	file:
STARTUPOBJ	vim/vim/src/Make_bc5.mak	/^STARTUPOBJ = c0w32.obj$/;"	m
STARTUPOBJ	vim/vim/src/Make_bc5.mak	/^STARTUPOBJ = c0x32.obj$/;"	m
STARTUPTIME	vim/vim/src/feature.h	871;"	d
STAR_REGISTER	vim/vim/src/ops.c	31;"	d	file:
STATE_DEL	vim/vim/src/spell.c	/^    STATE_DEL,		\/* Delete a byte from the bad word. *\/$/;"	e	enum:__anon81	file:
STATE_ENDNUL	vim/vim/src/spell.c	/^    STATE_ENDNUL,	\/* Past NUL bytes at start of the node. *\/$/;"	e	enum:__anon81	file:
STATE_FINAL	vim/vim/src/spell.c	/^    STATE_FINAL		\/* End of this node. *\/$/;"	e	enum:__anon81	file:
STATE_INS	vim/vim/src/spell.c	/^    STATE_INS,		\/* Insert a byte in the bad word. *\/$/;"	e	enum:__anon81	file:
STATE_INS_PREP	vim/vim/src/spell.c	/^    STATE_INS_PREP,	\/* Prepare for inserting bytes. *\/$/;"	e	enum:__anon81	file:
STATE_NOPREFIX	vim/vim/src/spell.c	/^    STATE_NOPREFIX,	\/* try without prefix *\/$/;"	e	enum:__anon81	file:
STATE_PLAIN	vim/vim/src/spell.c	/^    STATE_PLAIN,	\/* Use each byte of the node. *\/$/;"	e	enum:__anon81	file:
STATE_REP	vim/vim/src/spell.c	/^    STATE_REP,		\/* Use matching REP items from the .aff file. *\/$/;"	e	enum:__anon81	file:
STATE_REP_INI	vim/vim/src/spell.c	/^    STATE_REP_INI,	\/* Prepare for using REP items. *\/$/;"	e	enum:__anon81	file:
STATE_REP_UNDO	vim/vim/src/spell.c	/^    STATE_REP_UNDO,	\/* Undo a REP item replacement. *\/$/;"	e	enum:__anon81	file:
STATE_SPLITUNDO	vim/vim/src/spell.c	/^    STATE_SPLITUNDO,	\/* Undo splitting. *\/$/;"	e	enum:__anon81	file:
STATE_START	vim/vim/src/spell.c	/^    STATE_START = 0,	\/* At start of node check for NUL bytes (goodword$/;"	e	enum:__anon81	file:
STATE_SWAP	vim/vim/src/spell.c	/^    STATE_SWAP,		\/* Swap two bytes. *\/$/;"	e	enum:__anon81	file:
STATE_SWAP3	vim/vim/src/spell.c	/^    STATE_SWAP3,	\/* Swap two characters over three. *\/$/;"	e	enum:__anon81	file:
STATE_UNROT3L	vim/vim/src/spell.c	/^    STATE_UNROT3L,	\/* Undo rotate three characters left *\/$/;"	e	enum:__anon81	file:
STATE_UNROT3R	vim/vim/src/spell.c	/^    STATE_UNROT3R,	\/* Undo rotate three characters right *\/$/;"	e	enum:__anon81	file:
STATE_UNSWAP	vim/vim/src/spell.c	/^    STATE_UNSWAP,	\/* Undo swap two characters. *\/$/;"	e	enum:__anon81	file:
STATE_UNSWAP3	vim/vim/src/spell.c	/^    STATE_UNSWAP3,	\/* Undo Swap two characters over three. *\/$/;"	e	enum:__anon81	file:
STATFS	vim/vim/src/memfile.c	41;"	d	file:
STATFS	vim/vim/src/memfile.c	47;"	d	file:
STATIC_SPACE	vim/vim/runtime/tools/xcmdsrv_client.c	107;"	d	file:
STATIC_STDCPLUS	vim/vim/src/GvimExt/Make_ming.mak	/^STATIC_STDCPLUS=no$/;"	m
STATIC_STDCPLUS	vim/vim/src/Make_cyg_ming.mak	/^STATIC_STDCPLUS=no$/;"	m
STATIC_WINPTHREAD	vim/vim/src/Make_cyg_ming.mak	/^STATIC_WINPTHREAD=$(STATIC_STDCPLUS)$/;"	m
STATUS_HEIGHT	vim/vim/src/vim.h	1512;"	d
STDMETHOD_	vim/vim/src/if_ole.cpp	/^    STDMETHOD_(unsigned long, AddRef)(void);$/;"	p	class:FINAL	file:	access:public	signature:(unsigned long, AddRef)
STDMETHOD_	vim/vim/src/if_ole.cpp	/^    STDMETHOD_(unsigned long, Release)(void);$/;"	p	class:FINAL	file:	access:public	signature:(unsigned long, Release)
STERM	vim/vim/src/ascii.h	172;"	d
STIPPLE_BITMAP	vim/vim/src/gui_xmebw.c	108;"	d	file:
STL_ALL	vim/vim/src/option.h	291;"	d
STL_ALTPERCENT	vim/vim/src/option.h	281;"	d
STL_ARGLISTSTAT	vim/vim/src/option.h	282;"	d
STL_BUFNO	vim/vim/src/option.h	263;"	d
STL_BYTEVAL	vim/vim/src/option.h	267;"	d
STL_BYTEVAL_X	vim/vim/src/option.h	268;"	d
STL_COLUMN	vim/vim/src/option.h	258;"	d
STL_FILENAME	vim/vim/src/option.h	257;"	d
STL_FILEPATH	vim/vim/src/option.h	255;"	d
STL_FILETYPE	vim/vim/src/option.h	273;"	d
STL_FILETYPE_ALT	vim/vim/src/option.h	274;"	d
STL_FULLPATH	vim/vim/src/option.h	256;"	d
STL_HELPFLAG	vim/vim/src/option.h	271;"	d
STL_HELPFLAG_ALT	vim/vim/src/option.h	272;"	d
STL_HIGHLIGHT	vim/vim/src/option.h	288;"	d
STL_IN_ICON	vim/vim/src/globals.h	1232;"	d
STL_IN_TITLE	vim/vim/src/globals.h	1233;"	d
STL_KEYMAP	vim/vim/src/option.h	264;"	d
STL_LINE	vim/vim/src/option.h	261;"	d
STL_MAX_ITEM	vim/vim/src/vim.h	1729;"	d
STL_MIDDLEMARK	vim/vim/src/option.h	285;"	d
STL_MODIFIED	vim/vim/src/option.h	277;"	d
STL_MODIFIED_ALT	vim/vim/src/option.h	278;"	d
STL_NUMLINES	vim/vim/src/option.h	262;"	d
STL_OFFSET	vim/vim/src/option.h	265;"	d
STL_OFFSET_X	vim/vim/src/option.h	266;"	d
STL_PAGENUM	vim/vim/src/option.h	283;"	d
STL_PERCENTAGE	vim/vim/src/option.h	280;"	d
STL_PREVIEWFLAG	vim/vim/src/option.h	275;"	d
STL_PREVIEWFLAG_ALT	vim/vim/src/option.h	276;"	d
STL_QUICKFIX	vim/vim/src/option.h	279;"	d
STL_ROFLAG	vim/vim/src/option.h	269;"	d
STL_ROFLAG_ALT	vim/vim/src/option.h	270;"	d
STL_TABCLOSENR	vim/vim/src/option.h	290;"	d
STL_TABPAGENR	vim/vim/src/option.h	289;"	d
STL_TRUNCMARK	vim/vim/src/option.h	286;"	d
STL_USER_HL	vim/vim/src/option.h	287;"	d
STL_VIM_EXPR	vim/vim/src/option.h	284;"	d
STL_VIRTCOL	vim/vim/src/option.h	259;"	d
STL_VIRTCOL_ALT	vim/vim/src/option.h	260;"	d
STR2NR_ALL	vim/vim/src/vim.h	354;"	d
STR2NR_BIN	vim/vim/src/vim.h	351;"	d
STR2NR_FORCE	vim/vim/src/vim.h	355;"	d
STR2NR_HEX	vim/vim/src/vim.h	353;"	d
STR2NR_OCT	vim/vim/src/vim.h	352;"	d
STRCAT	vim/vim/src/vim.h	1635;"	d
STRCMP	vim/vim/src/vim.h	1596;"	d
STRCPY	vim/vim/src/vim.h	1594;"	d
STRFrect	vim/vim/src/libvterm/src/rect.h	5;"	d
STRICMP	vim/vim/src/vim.h	1599;"	d
STRICMP	vim/vim/src/vim.h	1602;"	d
STRICMP	vim/vim/src/vim.h	1604;"	d
STRICT	vim/vim/src/GvimExt/gvimext.h	31;"	d
STRICT	vim/vim/src/os_win32.h	97;"	d
STRING_TAG	vim/vim/src/gui_motif.c	111;"	d	file:
STRING_TAG	vim/vim/src/gui_motif.c	113;"	d	file:
STRIP	vim/vim/src/auto/config.mk	/^STRIP		= strip$/;"	m
STRLEN	vim/vim/src/vim.h	1593;"	d
STRLEN	vim/vim/src/vim.h	2331;"	d
STRMOVE	vim/vim/src/vim.h	1609;"	d
STRNCAT	vim/vim/src/vim.h	1636;"	d
STRNCMP	vim/vim/src/vim.h	1597;"	d
STRNCMP	vim/vim/src/xxd/xxd.c	185;"	d	file:
STRNCMP	vim/vim/src/xxd/xxd.c	187;"	d	file:
STRNCPY	vim/vim/src/vim.h	1595;"	d
STRNICMP	vim/vim/src/vim.h	1612;"	d
STRNICMP	vim/vim/src/vim.h	1615;"	d
STRNICMP	vim/vim/src/vim.h	1617;"	d
STRPROCINT	vim/vim/src/os_unix.c	/^typedef int (*STRPROCINT)(char_u *);$/;"	t	file:
STRPROCSTR	vim/vim/src/os_unix.c	/^typedef char_u * (*STRPROCSTR)(char_u *);$/;"	t	file:
STR_CHAR	vim/vim/src/charset.c	448;"	d	file:
STR_PTR	vim/vim/src/charset.c	449;"	d	file:
STUB_IMPL	vim/vim/src/iscygpty.c	50;"	d	file:
STYLE	vim/vim/src/gui_xmdlg.c	/^    STYLE,$/;"	e	enum:ListSpecifier	file:
STYLE_BT	vim/vim/src/os_unix.c	6120;"	d	file:
STYLE_ECHO	vim/vim/src/os_unix.c	6116;"	d	file:
STYLE_GLOB	vim/vim/src/os_unix.c	6117;"	d	file:
STYLE_PRINT	vim/vim/src/os_unix.c	6119;"	d	file:
STYLE_VIMGLOB	vim/vim/src/os_unix.c	6118;"	d	file:
SUBPAT	vim/vim/src/regexp.c	169;"	d	file:
SUBSYSTEM	vim/vim/src/Make_mvc.mak	/^SUBSYSTEM = $(SUBSYSTEM),$(SUBSYSTEM_VER)$/;"	m
SUBSYSTEM	vim/vim/src/Make_mvc.mak	/^SUBSYSTEM = console$/;"	m
SUBSYSTEM	vim/vim/src/Make_mvc.mak	/^SUBSYSTEM = windows$/;"	m
SUG	vim/vim/src/spell.c	144;"	d	file:
SUG_CLEAN_COUNT	vim/vim/src/spell.c	152;"	d	file:
SUG_MAX_COUNT	vim/vim/src/spell.c	156;"	d	file:
SUN_SYSTEM	vim/vim/src/vim.h	273;"	d
SWB_NEWTAB	vim/vim/src/option.h	826;"	d
SWB_SPLIT	vim/vim/src/option.h	825;"	d
SWB_USEOPEN	vim/vim/src/option.h	823;"	d
SWB_USETAB	vim/vim/src/option.h	824;"	d
SWB_VSPLIT	vim/vim/src/option.h	827;"	d
SW_SHOWDEFAULT	vim/vim/src/gui_w32.c	1297;"	d	file:
SYMLDPREFIX	vim/vim/src/Make_mint.mak	/^SYMLDPREFIX = \/usr\/local\/bin\/sym-$/;"	m
SYMS	vim/vim/src/Make_dice.mak	/^SYMS = vim.syms$/;"	m
SYMS	vim/vim/src/Make_manx.mak	/^SYMS = vim.syms$/;"	m
SYNC_DUP_CLOSE	vim/vim/src/os_win32.h	29;"	d
SYNID_ALLBUT	vim/vim/src/syntax.c	238;"	d	file:
SYNID_CLUSTER	vim/vim/src/syntax.c	241;"	d	file:
SYNID_CONTAINED	vim/vim/src/syntax.c	240;"	d	file:
SYNID_TOP	vim/vim/src/syntax.c	239;"	d	file:
SYNSOURCE	vim/vim/src/Makefile	/^SYNSOURCE = ..\/runtime\/syntax$/;"	m
SYNSPL_DEFAULT	vim/vim/src/structs.h	1760;"	d
SYNSPL_NOTOP	vim/vim/src/structs.h	1762;"	d
SYNSPL_TOP	vim/vim/src/structs.h	1761;"	d
SYNSUBDIR	vim/vim/src/Makefile	/^SYNSUBDIR = \/syntax$/;"	m
SYNSUBLOC	vim/vim/src/Makefile	/^SYNSUBLOC	= $(VIMRTLOC)$(SYNSUBDIR)$/;"	m
SYNTAX_FNAME	vim/vim/src/os_amiga.h	141;"	d
SYNTAX_FNAME	vim/vim/src/os_dos.h	111;"	d
SYNTAX_FNAME	vim/vim/src/os_mac.h	197;"	d
SYNTAX_FNAME	vim/vim/src/os_unix.h	338;"	d
SYN_CLSTR	vim/vim/src/syntax.c	228;"	d	file:
SYN_ITEMS	vim/vim/src/syntax.c	186;"	d	file:
SYN_NAMELEN	vim/vim/src/syntax.c	123;"	d	file:
SYN_STATE_P	vim/vim/src/syntax.c	196;"	d	file:
SYN_TIME_LIMIT	vim/vim/src/screen.c	187;"	d	file:
SYSV	vim/vim/src/xpm/include/xpm.h	68;"	d
SYS_BUGR_FILE	vim/vim/src/Makefile	/^SYS_BUGR_FILE	= $(DESTDIR)$(SCRIPTLOC)\/bugreport.vim$/;"	m
SYS_DELMENU_FILE	vim/vim/src/Makefile	/^SYS_DELMENU_FILE = $(DESTDIR)$(SCRIPTLOC)\/delmenu.vim$/;"	m
SYS_FILETYPE_FILE	vim/vim/src/Makefile	/^SYS_FILETYPE_FILE = $(DESTDIR)$(SCRIPTLOC)\/filetype.vim$/;"	m
SYS_FTOFF_FILE	vim/vim/src/Makefile	/^SYS_FTOFF_FILE	= $(DESTDIR)$(SCRIPTLOC)\/ftoff.vim$/;"	m
SYS_FTPLUGIN_FILE	vim/vim/src/Makefile	/^SYS_FTPLUGIN_FILE = $(DESTDIR)$(SCRIPTLOC)\/ftplugin.vim$/;"	m
SYS_FTPLUGOF_FILE	vim/vim/src/Makefile	/^SYS_FTPLUGOF_FILE = $(DESTDIR)$(SCRIPTLOC)\/ftplugof.vim$/;"	m
SYS_GVIMRC_FILE	vim/vim/src/os_amiga.h	114;"	d
SYS_GVIMRC_FILE	vim/vim/src/os_dos.h	44;"	d
SYS_GVIMRC_FILE	vim/vim/src/os_mac.h	134;"	d
SYS_GVIMRC_FILE	vim/vim/src/os_unix.h	220;"	d
SYS_INDENT_FILE	vim/vim/src/Makefile	/^SYS_INDENT_FILE = $(DESTDIR)$(SCRIPTLOC)\/indent.vim$/;"	m
SYS_INDOFF_FILE	vim/vim/src/Makefile	/^SYS_INDOFF_FILE = $(DESTDIR)$(SCRIPTLOC)\/indoff.vim$/;"	m
SYS_MENU_FILE	vim/vim/src/Makefile	/^SYS_MENU_FILE	= $(DESTDIR)$(SCRIPTLOC)\/menu.vim$/;"	m
SYS_MENU_FILE	vim/vim/src/os_amiga.h	117;"	d
SYS_MENU_FILE	vim/vim/src/os_dos.h	56;"	d
SYS_MENU_FILE	vim/vim/src/os_mac.h	137;"	d
SYS_MENU_FILE	vim/vim/src/os_unix.h	244;"	d
SYS_NMLN	vim/vim/src/os_unixx.h	74;"	d
SYS_OPTWIN_FILE	vim/vim/src/Makefile	/^SYS_OPTWIN_FILE = $(DESTDIR)$(SCRIPTLOC)\/optwin.vim$/;"	m
SYS_OPTWIN_FILE	vim/vim/src/feature.h	973;"	d
SYS_OPTWIN_FILE	vim/vim/src/os_dos.h	61;"	d
SYS_OPTWIN_FILE	vim/vim/src/os_mac.h	140;"	d
SYS_RGB_FILE	vim/vim/src/Makefile	/^SYS_RGB_FILE   = $(DESTDIR)$(SCRIPTLOC)\/rgb.txt$/;"	m
SYS_SCRIPTS_FILE	vim/vim/src/Makefile	/^SYS_SCRIPTS_FILE = $(DESTDIR)$(SCRIPTLOC)\/scripts.vim$/;"	m
SYS_SELECT_WITH_SYS_TIME	vim/vim/src/auto/config.h	115;"	d
SYS_SELECT_WITH_SYS_TIME	vim/vim/src/os_mac.h	295;"	d
SYS_SYNMENU_FILE	vim/vim/src/Makefile	/^SYS_SYNMENU_FILE = $(DESTDIR)$(SCRIPTLOC)\/synmenu.vim$/;"	m
SYS_VIMRC_FILE	vim/vim/src/os_amiga.h	111;"	d
SYS_VIMRC_FILE	vim/vim/src/os_dos.h	17;"	d
SYS_VIMRC_FILE	vim/vim/src/os_mac.h	131;"	d
SYS_VIMRC_FILE	vim/vim/src/os_unix.h	217;"	d
SY_MAXLEN	vim/vim/src/spell.c	2228;"	d	file:
S_ISBLK	vim/vim/src/os_unix.h	465;"	d
S_ISCHR	vim/vim/src/os_unix.h	474;"	d
S_ISDIR	vim/vim/src/os_unix.h	459;"	d
S_ISFIFO	vim/vim/src/os_unix.h	471;"	d
S_ISREG	vim/vim/src/os_unix.h	462;"	d
S_ISSOCK	vim/vim/src/os_unix.h	468;"	d
S_ISXXX	vim/vim/src/gui_at_fs.c	218;"	d	file:
S_IXGRP	vim/vim/src/gui_at_fs.c	212;"	d	file:
S_IXOTH	vim/vim/src/gui_at_fs.c	215;"	d	file:
S_IXUSR	vim/vim/src/gui_at_fs.c	209;"	d	file:
SafeRelease	vim/vim/src/gui_dwrite.cpp	/^template <class T> inline void SafeRelease(T **ppT)$/;"	f	signature:(T **ppT)
SaveConsoleBuffer	vim/vim/src/os_win32.c	/^SaveConsoleBuffer($/;"	f	file:	signature:( ConsoleBuffer *cb)
SaveConsoleTitleAndIcon	vim/vim/src/os_win32.c	/^SaveConsoleTitleAndIcon(void)$/;"	f	file:	signature:(void)
SaveInst	vim/vim/src/gui_w32.c	/^SaveInst(HINSTANCE hInst)$/;"	f	signature:(HINSTANCE hInst)
SaveInst	vim/vim/src/os_w32exe.c	/^void _cdecl SaveInst(HINSTANCE hInst);$/;"	p	file:	signature:(HINSTANCE hInst)
Scheme_Closed_Prim	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Closed_Prim;$/;"	t	file:
Scheme_Env	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Env;$/;"	t	file:
Scheme_Hash_Table	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Hash_Table;$/;"	t	file:
Scheme_Object	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Object;$/;"	t	file:
Scheme_Prim	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Prim;$/;"	t	file:
Scheme_Thread	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Thread;$/;"	t	file:
Scheme_Type	vim/vim/src/if_mzsch.c	/^typedef int Scheme_Type;$/;"	t	file:
Screen	vim/vim/src/xpm/include/simx.h	/^typedef void *Screen;			\/* not used *\/$/;"	t
ScreenAttrs	vim/vim/src/globals.h	/^EXTERN sattr_T	*ScreenAttrs INIT(= NULL);$/;"	v
ScreenCell	vim/vim/src/libvterm/src/screen.c	/^} ScreenCell;$/;"	t	typeref:struct:__anon30	file:
ScreenLines	vim/vim/src/globals.h	/^EXTERN schar_T	*ScreenLines INIT(= NULL);$/;"	v
ScreenLines2	vim/vim/src/globals.h	/^EXTERN schar_T	*ScreenLines2 INIT(= NULL);$/;"	v
ScreenLinesC	vim/vim/src/globals.h	/^EXTERN u8char_T	*ScreenLinesC[MAX_MCO];		\/* composing characters *\/$/;"	v
ScreenLinesUC	vim/vim/src/globals.h	/^EXTERN u8char_T	*ScreenLinesUC INIT(= NULL);	\/* decoded UTF-8 characters *\/$/;"	v
ScreenPen	vim/vim/src/libvterm/src/screen.c	/^} ScreenPen;$/;"	t	typeref:struct:__anon29	file:
Screen_mco	vim/vim/src/globals.h	/^EXTERN int	Screen_mco INIT(= 0);		\/* value of p_mco used when$/;"	v
ScrollOneLineDown	vim/vim/src/gui_at_sb.c	/^ScrollOneLineDown($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
ScrollOneLineDown	vim/vim/src/gui_at_sb.c	/^static void ScrollOneLineDown(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
ScrollOneLineUp	vim/vim/src/gui_at_sb.c	/^ScrollOneLineUp($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
ScrollOneLineUp	vim/vim/src/gui_at_sb.c	/^static void ScrollOneLineUp(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
ScrollPageDown	vim/vim/src/gui_at_sb.c	/^ScrollPageDown($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
ScrollPageDown	vim/vim/src/gui_at_sb.c	/^static void ScrollPageDown(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
ScrollPageUp	vim/vim/src/gui_at_sb.c	/^ScrollPageUp($/;"	f	file:	signature:( Widget w, XEvent *event, String *params UNUSED, Cardinal *num_params UNUSED)
ScrollPageUp	vim/vim/src/gui_at_sb.c	/^static void ScrollPageUp(Widget, XEvent *, String *, Cardinal *);$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
ScrollSome	vim/vim/src/gui_at_sb.c	/^ScrollSome($/;"	f	file:	signature:( Widget w, XEvent *event, int call_data)
ScrollSome	vim/vim/src/gui_at_sb.c	/^static void ScrollSome(Widget w, XEvent *event, int call_data);$/;"	p	file:	signature:(Widget w, XEvent *event, int call_data)
ScrollbarClassPart	vim/vim/src/gui_at_sb.h	/^typedef struct {int empty;} ScrollbarClassPart;$/;"	t	typeref:struct:__anon85
ScrollbarClassRec	vim/vim/src/gui_at_sb.h	/^} ScrollbarClassRec;$/;"	t	typeref:struct:_ScrollbarClassRec
ScrollbarPart	vim/vim/src/gui_at_sb.h	/^} ScrollbarPart;$/;"	t	typeref:struct:__anon84
ScrollbarRec	vim/vim/src/gui_at_sb.h	/^} ScrollbarRec;$/;"	t	typeref:struct:_ScrollbarRec
ScrollbarWidget	vim/vim/src/gui_at_sb.h	/^typedef struct _ScrollbarRec	  *ScrollbarWidget;$/;"	t	typeref:struct:_ScrollbarRec
ScrollbarWidgetClass	vim/vim/src/gui_at_sb.h	/^typedef struct _ScrollbarClassRec *ScrollbarWidgetClass;$/;"	t	typeref:struct:_ScrollbarClassRec
SearchedFile	vim/vim/src/search.c	/^typedef struct SearchedFile$/;"	s	file:
SearchedFile	vim/vim/src/search.c	/^} SearchedFile;$/;"	t	typeref:struct:SearchedFile	file:
SearchedFile::fp	vim/vim/src/search.c	/^    FILE	*fp;		\/* File pointer *\/$/;"	m	struct:SearchedFile	file:	access:public
SearchedFile::lnum	vim/vim/src/search.c	/^    linenr_T	lnum;		\/* Line we were up to in file *\/$/;"	m	struct:SearchedFile	file:	access:public
SearchedFile::matched	vim/vim/src/search.c	/^    int		matched;	\/* Found a match in this file *\/$/;"	m	struct:SearchedFile	file:	access:public
SearchedFile::name	vim/vim/src/search.c	/^    char_u	*name;		\/* Full name of file *\/$/;"	m	struct:SearchedFile	file:	access:public
SelectFont	vim/vim/src/gui_w32.c	4122;"	d	file:
SelectionRange	vim/vim/src/gui_mac.c	/^struct SelectionRange \/* for handling kCoreClassEvent:kOpenDocuments:keyAEPosition typeChar *\/$/;"	s	file:
SelectionRange	vim/vim/src/gui_mac.c	/^typedef struct SelectionRange SelectionRange;$/;"	t	typeref:struct:SelectionRange	file:
SelectionRange::endRange	vim/vim/src/gui_mac.c	/^    long endRange; \/\/ end of selection range (if line < 0)$/;"	m	struct:SelectionRange	file:	access:public
SelectionRange::lineNum	vim/vim/src/gui_mac.c	/^    short lineNum; \/\/ line to select (<0 to specify range)$/;"	m	struct:SelectionRange	file:	access:public
SelectionRange::startRange	vim/vim/src/gui_mac.c	/^    long startRange; \/\/ start of selection range (if line < 0)$/;"	m	struct:SelectionRange	file:	access:public
SelectionRange::theDate	vim/vim/src/gui_mac.c	/^    long theDate; \/\/ modification date\/time$/;"	m	struct:SelectionRange	file:	access:public
SelectionRange::unused1	vim/vim/src/gui_mac.c	/^    short unused1; \/\/ 0 (not used)$/;"	m	struct:SelectionRange	file:	access:public
SelectionRange::unused2	vim/vim/src/gui_mac.c	/^    long unused2; \/\/ 0 (not used)$/;"	m	struct:SelectionRange	file:	access:public
SendEventProc	vim/vim/runtime/tools/xcmdsrv_client.c	/^SendEventProc($/;"	f	file:	signature:( Display *dpy, XEvent *eventPtr, int expected, int *code)
SendEventProc	vim/vim/runtime/tools/xcmdsrv_client.c	/^static char	*SendEventProc(Display *dpy, XEvent *eventPtr,$/;"	p	file:	signature:(Display *dpy, XEvent *eventPtr, int expect, int *code)
SendInit	vim/vim/runtime/tools/xcmdsrv_client.c	/^SendInit(Display *dpy)$/;"	f	file:	signature:(Display *dpy)
SendInit	vim/vim/runtime/tools/xcmdsrv_client.c	/^static int	SendInit(Display *dpy);$/;"	p	file:	signature:(Display *dpy)
SendInit	vim/vim/src/if_xcmdsrv.c	/^SendInit(Display *dpy)$/;"	f	file:	signature:(Display *dpy)
SendInit	vim/vim/src/if_xcmdsrv.c	/^static int	SendInit(Display *dpy);$/;"	p	file:	signature:(Display *dpy)
SendKeys	vim/vim/src/if_ole.cpp	/^    STDMETHOD(SendKeys)(BSTR keys);$/;"	p	class:FINAL	file:	access:public	signature:(BSTR keys)
SendKeys	vim/vim/src/if_ole.cpp	/^CVim::SendKeys(BSTR keys)$/;"	f	class:CVim	signature:(BSTR keys)
SendKeys	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SendKeys )($/;"	m	struct:IVimVtbl	access:public
Send_KAHL_MOD_AE	vim/vim/src/gui_mac.c	/^Send_KAHL_MOD_AE(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ServerReply	vim/vim/src/if_xcmdsrv.c	/^struct ServerReply$/;"	s	file:
ServerReply::id	vim/vim/src/if_xcmdsrv.c	/^    Window  id;$/;"	m	struct:ServerReply	file:	access:public
ServerReply::strings	vim/vim/src/if_xcmdsrv.c	/^    garray_T strings;$/;"	m	struct:ServerReply	file:	access:public
ServerReplyFind	vim/vim/src/if_xcmdsrv.c	/^ServerReplyFind(Window w, enum ServerReplyOp op)$/;"	f	file:	signature:(Window w, enum ServerReplyOp op)
ServerReplyFind	vim/vim/src/if_xcmdsrv.c	/^static struct ServerReply *ServerReplyFind(Window w, enum ServerReplyOp op);$/;"	p	file:	signature:(Window w, enum ServerReplyOp op)
ServerReplyOp	vim/vim/src/if_xcmdsrv.c	/^enum ServerReplyOp { SROP_Find, SROP_Add, SROP_Delete };$/;"	g	file:
ServerWait	vim/vim/src/if_xcmdsrv.c	/^ServerWait($/;"	f	file:	signature:( Display *dpy, Window w, EndCond endCond, void *endData, int localLoop, int seconds)
ServerWait	vim/vim/src/if_xcmdsrv.c	/^static void	ServerWait(Display *dpy, Window w, EndCond endCond, void *endData, int localLoop, int seconds);$/;"	p	file:	signature:(Display *dpy, Window w, EndCond endCond, void *endData, int localLoop, int seconds)
SetApplicationObject	vim/vim/src/VisVim/Commands.cpp	/^void CCommands::SetApplicationObject(IApplication * pApplication)$/;"	f	class:CCommands	signature:(IApplication * pApplication)
SetBufferLine	vim/vim/src/if_py_both.h	/^SetBufferLine(buf_T *buf, PyInt n, PyObject *line, PyInt *len_change)$/;"	f	signature:(buf_T *buf, PyInt n, PyObject *line, PyInt *len_change)
SetBufferLineList	vim/vim/src/if_py_both.h	/^SetBufferLineList($/;"	f	signature:( buf_T *buf, PyInt lo, PyInt hi, PyObject *list, PyInt *len_change)
SetConsoleIcon	vim/vim/src/os_win32.c	/^SetConsoleIcon($/;"	f	file:	signature:( HWND hWnd, HICON hIconSmall, HICON hIcon)
SetDimensions	vim/vim/src/gui_at_sb.c	/^SetDimensions(ScrollbarWidget sbw)$/;"	f	file:	signature:(ScrollbarWidget sbw)
SetFont	vim/vim/src/gui_dwrite.cpp	/^    void SetFont(HFONT hFont);$/;"	p	struct:DWriteContext	file:	access:public	signature:(HFONT hFont)
SetFont	vim/vim/src/gui_dwrite.cpp	/^    void SetFont(const LOGFONTW &logFont);$/;"	p	struct:DWriteContext	file:	access:public	signature:(const LOGFONTW &logFont)
SetFont	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetFont(HFONT hFont)$/;"	f	class:DWriteContext	signature:(HFONT hFont)
SetFont	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetFont(const LOGFONTW &logFont)$/;"	f	class:DWriteContext	signature:(const LOGFONTW &logFont)
SetForeground	vim/vim/src/if_ole.cpp	/^    STDMETHOD(SetForeground)(void);$/;"	p	class:FINAL	file:	access:public	signature:(void)
SetForeground	vim/vim/src/if_ole.cpp	/^CVim::SetForeground(void)$/;"	f	class:CVim	signature:(void)
SetForeground	vim/vim/src/if_ole.h	/^	HRESULT ( STDMETHODCALLTYPE __RPC_FAR *SetForeground )($/;"	m	struct:IVimVtbl	access:public
SetKeyAndValue	vim/vim/src/if_ole.cpp	/^static void SetKeyAndValue(const char *key, const char *subkey, const char *value)$/;"	f	file:	signature:(const char *key, const char *subkey, const char *value)
SetKeyAndValue	vim/vim/src/if_ole.cpp	/^static void SetKeyAndValue(const char *path, const char *subkey, const char *value);$/;"	p	file:	signature:(const char *path, const char *subkey, const char *value)
SetLOGFONT	vim/vim/src/gui_dwrite.cpp	/^    HRESULT SetLOGFONT(const LOGFONTW &logFont, float fontSize);$/;"	p	struct:DWriteContext	file:	access:public	signature:(const LOGFONTW &logFont, float fontSize)
SetLOGFONT	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetLOGFONT(const LOGFONTW &logFont, float fontSize)$/;"	f	class:DWriteContext	signature:(const LOGFONTW &logFont, float fontSize)
SetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^    void SetRenderingParams($/;"	p	struct:DWriteContext	file:	access:public	signature:( const DWriteRenderingParams *params)
SetRenderingParams	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::SetRenderingParams($/;"	f	class:DWriteContext	signature:( const DWriteRenderingParams *params)
SetValues	vim/vim/src/gui_at_sb.c	/^SetValues($/;"	f	file:	signature:( Widget current, Widget request UNUSED, Widget desired, ArgList args UNUSED, Cardinal *num_args UNUSED)
SetValues	vim/vim/src/gui_at_sb.c	/^static Boolean SetValues(Widget, Widget, Widget, ArgList, Cardinal *);$/;"	p	file:	signature:(Widget, Widget, Widget, ArgList, Cardinal *)
SetValues	vim/vim/src/gui_xmebw.c	/^SetValues(Widget current,$/;"	f	file:	signature:(Widget current, Widget request UNUSED, Widget new, ArgList args UNUSED, Cardinal *n UNUSED)
SetValues	vim/vim/src/gui_xmebw.c	/^static Boolean SetValues(Widget current, Widget request, Widget new, ArgList args, Cardinal *n);$/;"	p	file:	signature:(Widget current, Widget request, Widget new, ArgList args, Cardinal *n)
SetupSlavePTY	vim/vim/src/pty.c	/^SetupSlavePTY(int fd)$/;"	f	signature:(int fd)
Severity	vim/vim/runtime/tools/ccfilter.c	/^char	       Severity;$/;"	v
Sfdisc_t	vim/vim/src/if_perlsfio.c	22;"	d	file:
Sfio_t	vim/vim/src/if_perlsfio.c	21;"	d	file:
ShS_NEUTRAL	vim/vim/src/gui_beval.h	/^    ShS_NEUTRAL,			\/* nothing showing or pending *\/$/;"	e	enum:__anon67
ShS_PENDING	vim/vim/src/gui_beval.h	/^    ShS_PENDING,			\/* data requested from debugger *\/$/;"	e	enum:__anon67
ShS_SHOWING	vim/vim/src/gui_beval.h	/^    ShS_SHOWING				\/* the balloon is being displayed *\/$/;"	e	enum:__anon67
ShS_UPDATE_PENDING	vim/vim/src/gui_beval.h	/^    ShS_UPDATE_PENDING,			\/* switching information displayed *\/$/;"	e	enum:__anon67
SharedFindReplace	vim/vim/src/gui_gtk.c	/^} SharedFindReplace;$/;"	t	typeref:struct:_SharedFindReplace	file:
SharedFindReplace	vim/vim/src/gui_motif.c	/^} SharedFindReplace;$/;"	t	typeref:struct:_SharedFindReplace	file:
SharedFontSelData	vim/vim/src/gui_xmdlg.c	/^} SharedFontSelData;$/;"	t	typeref:struct:_SharedFontSelData	file:
Show	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	e	enum:__anon69
ShowUsage	vim/vim/runtime/tools/ccfilter.c	/^int ShowUsage( char *szError )$/;"	f	signature:( char *szError )
SpecialKey	vim/vim/src/term.h	/^enum SpecialKey$/;"	g
State	vim/vim/src/globals.h	/^EXTERN int	State INIT(= NORMAL);	\/* This is the current state of the$/;"	v
StaticTableEncoding	vim/vim/src/libvterm/src/encoding.c	/^struct StaticTableEncoding {$/;"	s	file:
StaticTableEncoding::chars	vim/vim/src/libvterm/src/encoding.c	/^  const uint32_t chars[128];$/;"	m	struct:StaticTableEncoding	file:	access:public
StaticTableEncoding::enc	vim/vim/src/libvterm/src/encoding.c	/^  const VTermEncoding enc;$/;"	m	struct:StaticTableEncoding	file:	access:public
Store	vim/vim/src/if_cscope.h	/^    Store,$/;"	e	enum:__anon70
StringToChars	vim/vim/src/if_py_both.h	/^StringToChars(PyObject *obj, PyObject **todecref)$/;"	f	signature:(PyObject *obj, PyObject **todecref)
StringToLine	vim/vim/src/if_py_both.h	/^StringToLine(PyObject *obj)$/;"	f	signature:(PyObject *obj)
StringValuePtr	vim/vim/src/if_ruby.c	153;"	d	file:
T	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
T	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
T	vim/vim/runtime/macros/maze/mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
TAB	vim/vim/src/ascii.h	106;"	d
TAB	vim/vim/src/ascii.h	27;"	d
TABLE_SIZE	vim/vim/src/dosinst.c	51;"	d	file:
TABLINE_HEIGHT	vim/vim/src/gui.h	156;"	d
TABLINE_HEIGHT	vim/vim/src/gui.h	159;"	d
TABLINE_MENU_CLOSE	vim/vim/src/globals.h	477;"	d
TABLINE_MENU_NEW	vim/vim/src/globals.h	478;"	d
TABLINE_MENU_OPEN	vim/vim/src/globals.h	479;"	d
TAB_PYTHON_REF	vim/vim/src/if_python.c	788;"	d	file:
TAB_PYTHON_REF	vim/vim/src/if_python3.c	743;"	d	file:
TAGPRG	vim/vim/src/auto/config.mk	/^TAGPRG		= ctags -I INIT+ --fields=+S$/;"	m
TAGSTACKSIZE	vim/vim/src/structs.h	112;"	d
TAGS_INCL	vim/vim/src/Makefile	/^TAGS_INCL = *.h$/;"	m
TAGS_SRC	vim/vim/src/Makefile	/^TAGS_SRC = *.c *.cpp if_perl.xs$/;"	m
TAG_BREAK	vim/vim/src/if_ruby.c	920;"	d	file:
TAG_CSCOPE	vim/vim/src/vim.h	1187;"	d
TAG_FATAL	vim/vim/src/if_ruby.c	926;"	d	file:
TAG_HELP	vim/vim/src/vim.h	1182;"	d
TAG_INS_COMP	vim/vim/src/vim.h	1190;"	d
TAG_KEEP_LANG	vim/vim/src/vim.h	1191;"	d
TAG_MANY	vim/vim/src/vim.h	1193;"	d
TAG_MASK	vim/vim/src/if_ruby.c	927;"	d	file:
TAG_NAMES	vim/vim/src/vim.h	1183;"	d
TAG_NEXT	vim/vim/src/if_ruby.c	921;"	d	file:
TAG_NOIC	vim/vim/src/vim.h	1185;"	d
TAG_RAISE	vim/vim/src/if_ruby.c	924;"	d	file:
TAG_REDO	vim/vim/src/if_ruby.c	923;"	d	file:
TAG_REGEXP	vim/vim/src/vim.h	1184;"	d
TAG_RETRY	vim/vim/src/if_ruby.c	922;"	d	file:
TAG_RETURN	vim/vim/src/if_ruby.c	919;"	d	file:
TAG_SEP	vim/vim/src/tag.c	2358;"	d	file:
TAG_THROW	vim/vim/src/if_ruby.c	925;"	d	file:
TAG_VERBOSE	vim/vim/src/vim.h	1189;"	d
TARBALL	vim/vim/src/libvterm/Makefile	/^TARBALL=$(DISTDIR).tar.gz$/;"	m
TARGET	vim/vim/src/Make_bc5.mak	/^TARGET = gvim.exe$/;"	m
TARGET	vim/vim/src/Make_bc5.mak	/^TARGET = gvimd.exe$/;"	m
TARGET	vim/vim/src/Make_bc5.mak	/^TARGET = vim.exe$/;"	m
TARGET	vim/vim/src/Make_bc5.mak	/^TARGET = vimd.exe$/;"	m
TARGET	vim/vim/src/Make_cyg_ming.mak	/^TARGET := gvim$(DEBUG_SUFFIX).exe$/;"	m
TARGET	vim/vim/src/Make_cyg_ming.mak	/^TARGET := vim$(DEBUG_SUFFIX).exe$/;"	m
TARGETOS	vim/vim/src/GvimExt/Makefile	/^TARGETOS = WINNT$/;"	m
TARGETOS	vim/vim/src/Make_mvc.mak	/^TARGETOS = WINNT$/;"	m
TARGETS	vim/vim/src/Make_bc5.mak	/^TARGETS = $(DLLTARGET)$/;"	m
TARGETS	vim/vim/src/Make_bc5.mak	/^TARGETS = $(TARGETS) $(TARGET)$/;"	m
TARGET_COMPOUND_TEXT	vim/vim/src/gui_gtk_x11.c	/^    TARGET_COMPOUND_TEXT,$/;"	e	enum:__anon156	file:
TARGET_COUNT	vim/vim/src/dosinst.h	364;"	d
TARGET_HTML	vim/vim/src/gui_gtk_x11.c	/^    TARGET_HTML,$/;"	e	enum:__anon156	file:
TARGET_STRING	vim/vim/src/gui_gtk_x11.c	/^    TARGET_STRING,$/;"	e	enum:__anon156	file:
TARGET_TEXT	vim/vim/src/gui_gtk_x11.c	/^    TARGET_TEXT,$/;"	e	enum:__anon156	file:
TARGET_TEXT_PLAIN	vim/vim/src/gui_gtk_x11.c	/^    TARGET_TEXT_PLAIN,$/;"	e	enum:__anon156	file:
TARGET_TEXT_URI_LIST	vim/vim/src/gui_gtk_x11.c	/^    TARGET_TEXT_URI_LIST,$/;"	e	enum:__anon156	file:
TARGET_TYPE_NONE	vim/vim/src/gui_gtk_x11.c	/^    TARGET_TYPE_NONE,$/;"	e	enum:__anon156	file:
TARGET_UTF8_STRING	vim/vim/src/gui_gtk_x11.c	/^    TARGET_UTF8_STRING,$/;"	e	enum:__anon156	file:
TARGET_VIM	vim/vim/src/gui_gtk_x11.c	/^    TARGET_VIM,$/;"	e	enum:__anon156	file:
TARGET_VIMENC	vim/vim/src/gui_gtk_x11.c	/^    TARGET_VIMENC$/;"	e	enum:__anon156	file:
TASH	vim/vim/src/farsi.h	164;"	d
TBIS_GIANT	vim/vim/src/option.h	895;"	d
TBIS_HUGE	vim/vim/src/option.h	894;"	d
TBIS_LARGE	vim/vim/src/option.h	893;"	d
TBIS_MEDIUM	vim/vim/src/option.h	892;"	d
TBIS_SMALL	vim/vim/src/option.h	891;"	d
TBIS_TINY	vim/vim/src/option.h	890;"	d
TBLFILES	vim/vim/src/libvterm/Makefile	/^TBLFILES=$(sort $(wildcard src\/encoding\/*.tbl))$/;"	m
TBSTYLE_FLAT	vim/vim/src/gui_w32.c	8014;"	d	file:
TBUFFER_LEN	vim/vim/src/menu.c	1382;"	d	file:
TBUFSZ	vim/vim/src/vim.h	1543;"	d
TB_SETUNICODEFORMAT	vim/vim/src/gui_w32.c	2378;"	d	file:
TCL	vim/vim/src/auto/config.mk	/^TCL		= $/;"	m
TCL_CFLAGS	vim/vim/src/auto/config.mk	/^TCL_CFLAGS	= $/;"	m
TCL_DLL	vim/vim/src/Make_mvc.mak	/^TCL_DLL = tcl$(TCL_VER).dll$/;"	m
TCL_INC	vim/vim/src/Make_mvc.mak	/^TCL_INC	= \/I "$(TCL)\\Include" \/I "$(TCL)"$/;"	m
TCL_LIB	vim/vim/src/Make_bc5.mak	/^TCL_LIB = $(TCL)\\lib\\tcl$(TCL_VER).lib$/;"	m
TCL_LIB	vim/vim/src/Make_bc5.mak	/^TCL_LIB = tclstub$(TCL_VER)-bor.lib$/;"	m
TCL_LIB	vim/vim/src/Make_mvc.mak	/^TCL_LIB = "$(TCL)\\lib\\tclstub$(TCL_VER).lib"$/;"	m
TCL_LIB	vim/vim/src/Make_mvc.mak	/^TCL_LIB = $(TCL)\\lib\\tcl$(TCL_VER)vc.lib$/;"	m
TCL_LIBS	vim/vim/src/auto/config.mk	/^TCL_LIBS	= $/;"	m
TCL_LIB_FLAG	vim/vim/src/Make_bc5.mak	/^TCL_LIB_FLAG =$/;"	m
TCL_OBJ	vim/vim/src/Make_mvc.mak	/^TCL_OBJ	= $(OUTDIR)\\if_tcl.obj$/;"	m
TCL_OBJ	vim/vim/src/auto/config.mk	/^TCL_OBJ		= $/;"	m
TCL_PRO	vim/vim/src/auto/config.mk	/^TCL_PRO		= $/;"	m
TCL_PROC	vim/vim/src/if_tcl.c	166;"	d	file:
TCL_PROC	vim/vim/src/if_tcl.c	171;"	d	file:
TCL_SRC	vim/vim/src/auto/config.mk	/^TCL_SRC		= $/;"	m
TCL_VER	vim/vim/src/Make_bc5.mak	/^TCL_VER = 83$/;"	m
TCL_VER	vim/vim/src/Make_cyg_ming.mak	/^TCL_VER = 86$/;"	m
TCL_VER	vim/vim/src/Make_mvc.mak	/^TCL_VER = 86$/;"	m
TCL_VER_LONG	vim/vim/src/Make_cyg_ming.mak	/^TCL_VER_LONG = 8.6$/;"	m
TCL_VER_LONG	vim/vim/src/Make_mvc.mak	/^TCL_VER_LONG = 8.6$/;"	m
TC_FOLLOWIC	vim/vim/src/option.h	834;"	d
TC_FOLLOWSCS	vim/vim/src/option.h	837;"	d
TC_IGNORE	vim/vim/src/option.h	835;"	d
TC_MATCH	vim/vim/src/option.h	836;"	d
TC_SMART	vim/vim/src/option.h	838;"	d
TE	vim/vim/src/farsi.h	114;"	d
TEAROFF_BUTTON_PAD_X	vim/vim/src/gui_w32.c	4220;"	d	file:
TEAROFF_COLUMN_PADDING	vim/vim/src/gui_w32.c	4223;"	d	file:
TEAROFF_MIN_WIDTH	vim/vim/src/gui_w32.c	4221;"	d	file:
TEAROFF_PADDING_X	vim/vim/src/gui_w32.c	4219;"	d	file:
TEAROFF_SUBMENU_LABEL	vim/vim/src/gui_w32.c	4222;"	d	file:
TEAR_LEN	vim/vim/src/gui.h	148;"	d
TEAR_STRING	vim/vim/src/gui.h	147;"	d
TECObjectRef	vim/vim/src/os_mac_conv.c	/^typedef int *TECObjectRef;$/;"	t	file:
TEE	vim/vim/src/farsi.h	143;"	d
TEE_	vim/vim/src/farsi.h	27;"	d
TEMPDIRNAMES	vim/vim/src/os_unix.h	385;"	d
TEMPNAME	vim/vim/src/os_amiga.h	52;"	d
TEMPNAME	vim/vim/src/os_unix.h	381;"	d
TEMPNAMELEN	vim/vim/src/os_amiga.h	53;"	d
TEMPNAMELEN	vim/vim/src/os_unix.h	382;"	d
TEMPNAMELEN	vim/vim/src/os_unix.h	386;"	d
TEMPNAMELEN	vim/vim/src/os_win32.h	122;"	d
TEMP_BUF_SIZE	vim/vim/src/gui_xmdlg.c	87;"	d	file:
TERMCAP2KEY	vim/vim/src/keymap.h	125;"	d
TERMCAPFILE	vim/vim/src/termlib.c	58;"	d	file:
TERMCAPFILE	vim/vim/src/termlib.c	61;"	d	file:
TERMCAPFILE	vim/vim/src/termlib.c	63;"	d	file:
TERMINAL	vim/vim/src/Make_cyg_ming.mak	/^TERMINAL=no$/;"	m
TERMINFO	vim/vim/src/auto/config.h	14;"	d
TERMINFO	vim/vim/src/os_vms_conf.h	11;"	d
TERMLIB	vim/vim/src/Make_dice.mak	/^TERMLIB = o\/termlib.o$/;"	m
TERMLIB	vim/vim/src/Make_manx.mak	/^TERMLIB =$/;"	m
TERMLIB	vim/vim/src/Make_sas.mak	/^TERMLIB =$/;"	m
TERM_ATTR_ENTRY	vim/vim/src/syntax.c	8634;"	d	file:
TERM_DEFS	vim/vim/src/Make_mvc.mak	/^TERM_DEFS = -DFEAT_TERMINAL$/;"	m
TERM_DEPS	vim/vim/src/Make_cyg_ming.mak	/^TERM_DEPS = \\$/;"	m
TERM_DEPS	vim/vim/src/Make_mvc.mak	/^TERM_DEPS = \\$/;"	m
TERM_DEPS	vim/vim/src/Makefile	/^TERM_DEPS = \\$/;"	m
TERM_OBJ	vim/vim/src/Make_mvc.mak	/^TERM_OBJ = \\$/;"	m
TERM_OBJ	vim/vim/src/auto/config.mk	/^TERM_OBJ	= $/;"	m
TERM_SRC	vim/vim/src/auto/config.mk	/^TERM_SRC	= $/;"	m
TERM_STR	vim/vim/src/vim.h	1776;"	d
TEST_COUNT	vim/vim/src/memfile_test.c	26;"	d	file:
TEST_OUTFILES	vim/vim/src/testdir/Make_dos.mak	/^TEST_OUTFILES = $(SCRIPTS_FIRST) $(SCRIPTS) $(SCRIPTS_WIN32) $(SCRIPTS_GUI)$/;"	m
TEXTMETRIC	vim/vim/src/os_mswin.c	/^typedef int TEXTMETRIC;$/;"	t	file:
TEXTMETRIC	vim/vim/src/os_win32.c	/^typedef int TEXTMETRIC;$/;"	t	file:
TEXT_X	vim/vim/src/gui.h	104;"	d
TEXT_X	vim/vim/src/gui.h	97;"	d
TEXT_Y	vim/vim/src/gui.h	107;"	d
TEXT_Y	vim/vim/src/gui.h	98;"	d
TFN_INT	vim/vim/src/vim.h	2475;"	d
TFN_NO_AUTOLOAD	vim/vim/src/vim.h	2477;"	d
TFN_NO_DEREF	vim/vim/src/vim.h	2478;"	d
TFN_QUIET	vim/vim/src/vim.h	2476;"	d
TFN_READ_ONLY	vim/vim/src/vim.h	2479;"	d
TGETENT	vim/vim/src/term.c	157;"	d	file:
TGETENT_ZERO_ERR	vim/vim/src/auto/config.h	152;"	d
TGETENT_ZERO_ERR	vim/vim/src/os_vms_conf.h	98;"	d
TGETSTR	vim/vim/src/term.c	156;"	d	file:
THISROWWIDTH	vim/vim/src/libvterm/src/vterm_internal.h	92;"	d
THIS_FILE	vim/vim/src/VisVim/Commands.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	vim/vim/src/VisVim/Commands.cpp	9;"	d	file:
THIS_FILE	vim/vim/src/VisVim/DSAddIn.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	vim/vim/src/VisVim/DSAddIn.cpp	8;"	d	file:
THIS_FILE	vim/vim/src/VisVim/OleAut.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	vim/vim/src/VisVim/OleAut.cpp	42;"	d	file:
THIS_FILE	vim/vim/src/VisVim/VisVim.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	file:
THIS_FILE	vim/vim/src/VisVim/VisVim.cpp	12;"	d	file:
THROW_ON_ERROR	vim/vim/src/ex_eval.c	62;"	d	file:
THROW_ON_ERROR_TRUE	vim/vim/src/ex_eval.c	63;"	d	file:
THROW_ON_INTERRUPT	vim/vim/src/ex_eval.c	64;"	d	file:
THROW_ON_INTERRUPT_TRUE	vim/vim/src/ex_eval.c	65;"	d	file:
TILDE_REGISTER	vim/vim/src/ops.c	39;"	d	file:
TIME_MSG	vim/vim/src/macros.h	245;"	d
TIME_MSG	vim/vim/src/macros.h	247;"	d
TIME_WITH_SYS_TIME	vim/vim/src/auto/config.h	112;"	d
TIME_WITH_SYS_TIME	vim/vim/src/os_vms_conf.h	66;"	d
TIOCGWINSZ	vim/vim/src/os_unix.c	126;"	d	file:
TMODE_COOK	vim/vim/src/term.h	184;"	d
TMODE_RAW	vim/vim/src/term.h	186;"	d
TMODE_SLEEP	vim/vim/src/term.h	185;"	d
TMPLEN	vim/vim/src/buffer.c	3894;"	d	file:
TMP_LEN	vim/vim/src/message.c	4330;"	d	file:
TOKEN_INFORMATION_CLASS	vim/vim/src/os_win32.c	/^typedef int TOKEN_INFORMATION_CLASS;$/;"	t	file:
TOLOWER_ASC	vim/vim/src/macros.h	89;"	d
TOLOWER_ASC	vim/vim/src/macros.h	92;"	d
TOLOWER_LOC	vim/vim/src/macros.h	75;"	d
TOLOWER_LOC	vim/vim/src/macros.h	79;"	d
TOLOWER_LOC	vim/vim/src/macros.h	82;"	d
TOOLBAR_BITMAP_COUNT	vim/vim/src/gui_w32.c	2391;"	d	file:
TOOLBAR_BORDER_HEIGHT	vim/vim/src/gui.h	153;"	d
TOOLBAR_BUTTON_HEIGHT	vim/vim/src/gui.h	151;"	d
TOOLBAR_BUTTON_WIDTH	vim/vim/src/gui.h	152;"	d
TOOLBAR_HORIZ	vim/vim/src/option.h	882;"	d
TOOLBAR_ICONS	vim/vim/src/option.h	880;"	d
TOOLBAR_NAME_COUNT	vim/vim/src/menu.c	82;"	d	file:
TOOLBAR_TEXT	vim/vim/src/option.h	879;"	d
TOOLBAR_TOOLTIPS	vim/vim/src/option.h	881;"	d
TOOLINFO_NEW	vim/vim/src/gui_w32.c	/^} TOOLINFO_NEW;$/;"	t	typeref:struct:tagTOOLINFOA_NEW	file:
TOOLS	vim/vim/src/Makefile	/^TOOLS = xxd\/xxd$(EXEEXT)$/;"	m
TOOLSSOURCE	vim/vim/src/Makefile	/^TOOLSSOURCE = ..\/runtime\/tools$/;"	m
TOOLSSUBDIR	vim/vim/src/Makefile	/^TOOLSSUBDIR = \/tools$/;"	m
TOOLSSUBLOC	vim/vim/src/Makefile	/^TOOLSSUBLOC	= $(VIMRTLOC)$(TOOLSSUBDIR)$/;"	m
TOP_SHADOW	vim/vim/src/gui_x11_pm.h	91;"	d
TOUPPER_ASC	vim/vim/src/macros.h	88;"	d
TOUPPER_ASC	vim/vim/src/macros.h	91;"	d
TOUPPER_LOC	vim/vim/src/macros.h	74;"	d
TOUPPER_LOC	vim/vim/src/macros.h	78;"	d
TOUPPER_LOC	vim/vim/src/macros.h	81;"	d
TO_OLE_STR	vim/vim/src/VisVim/OleAut.h	56;"	d
TO_OLE_STR	vim/vim/src/VisVim/OleAut.h	64;"	d
TO_OLE_STR_BUF	vim/vim/src/VisVim/OleAut.h	57;"	d
TO_OLE_STR_BUF	vim/vim/src/VisVim/OleAut.h	65;"	d
TO_SPECIAL	vim/vim/src/keymap.h	139;"	d
TPUTSFUNCAST	vim/vim/src/term.c	41;"	d	file:
TPUTSFUNCAST	vim/vim/src/term.c	44;"	d	file:
TPUTSFUNCAST	vim/vim/src/term.c	46;"	d	file:
TRACE	vim/vim/src/os_win32.h	174;"	d
TRACE	vim/vim/src/os_win32.h	189;"	d
TRACE0	vim/vim/src/os_win32.h	175;"	d
TRACE0	vim/vim/src/os_win32.h	190;"	d
TRACE1	vim/vim/src/os_win32.h	176;"	d
TRACE1	vim/vim/src/os_win32.h	191;"	d
TRACE2	vim/vim/src/os_win32.h	177;"	d
TRACE2	vim/vim/src/os_win32.h	192;"	d
TRACE3	vim/vim/src/os_win32.h	178;"	d
TRACE3	vim/vim/src/os_win32.h	193;"	d
TRACE4	vim/vim/src/os_win32.h	179;"	d
TRACE4	vim/vim/src/os_win32.h	194;"	d
TRAMPOLINED_MZVIM_STARTUP	vim/vim/src/if_mzsch.c	63;"	d	file:
TRLBAR	vim/vim/src/ex_cmds.h	42;"	d
TRUE	vim/vim/src/dosinst.h	81;"	d
TRUE	vim/vim/src/libvterm/bin/vterm-ctrl.c	7;"	d	file:
TRUE	vim/vim/src/libvterm/include/vterm.h	16;"	d
TRUE	vim/vim/src/os_amiga.c	22;"	d	file:
TRUE	vim/vim/src/os_amiga.c	66;"	d	file:
TRUE	vim/vim/src/os_amiga.c	67;"	d	file:
TRUE	vim/vim/src/vim.h	1453;"	d
TRUSTEE	vim/vim/src/os_win32.c	/^typedef int TRUSTEE;$/;"	t	file:
TRY_ABORT	vim/vim/src/os_beos.c	35;"	d	file:
TRY_DEEPER	vim/vim/src/spell.c	4319;"	d	file:
TRY_SEEK	vim/vim/src/xxd/xxd.c	205;"	d	file:
TSF_DIDDEL	vim/vim/src/spell.c	323;"	d	file:
TSF_DIDSPLIT	vim/vim/src/spell.c	322;"	d	file:
TSF_PREFIXOK	vim/vim/src/spell.c	321;"	d	file:
TTF_DI_SETITEM	vim/vim/src/gui_w32.c	4304;"	d	file:
TTM_SETMAXTIPWIDTH	vim/vim/src/gui_w32.c	4300;"	d	file:
TTN_GETDISPINFO	vim/vim/src/gui_w32.c	4308;"	d	file:
TTN_GETDISPINFOW	vim/vim/src/gui_w32.c	4343;"	d	file:
TTYM_DEC	vim/vim/src/option.h	906;"	d
TTYM_JSBTERM	vim/vim/src/option.h	908;"	d
TTYM_NETTERM	vim/vim/src/option.h	907;"	d
TTYM_PTERM	vim/vim/src/option.h	909;"	d
TTYM_SGR	vim/vim/src/option.h	911;"	d
TTYM_URXVT	vim/vim/src/option.h	910;"	d
TTYM_XTERM	vim/vim/src/option.h	904;"	d
TTYM_XTERM2	vim/vim/src/option.h	905;"	d
TT_MODE	vim/vim/src/os_vms.c	/^}	TT_MODE;$/;"	t	typeref:struct:__anon23	file:
TUTORSOURCE	vim/vim/src/Makefile	/^TUTORSOURCE = ..\/runtime\/tutor$/;"	m
TUTORSUBDIR	vim/vim/src/Makefile	/^TUTORSUBDIR = \/tutor$/;"	m
TUTORSUBLOC	vim/vim/src/Makefile	/^TUTORSUBLOC	= $(VIMRTLOC)$(TUTORSUBDIR)$/;"	m
TYPEAHEADLEN	vim/vim/src/os_win32.c	1673;"	d	file:
TYPELEN_INIT	vim/vim/src/getchar.c	105;"	d	file:
TYPE_EQUAL	vim/vim/src/eval.c	/^    , TYPE_EQUAL	\/* == *\/$/;"	e	enum:__anon77	file:
TYPE_GEQUAL	vim/vim/src/eval.c	/^    , TYPE_GEQUAL	\/* >= *\/$/;"	e	enum:__anon77	file:
TYPE_GREATER	vim/vim/src/eval.c	/^    , TYPE_GREATER	\/* >  *\/$/;"	e	enum:__anon77	file:
TYPE_MATCH	vim/vim/src/eval.c	/^    , TYPE_MATCH	\/* =~ *\/$/;"	e	enum:__anon77	file:
TYPE_NEQUAL	vim/vim/src/eval.c	/^    , TYPE_NEQUAL	\/* != *\/$/;"	e	enum:__anon77	file:
TYPE_NOMATCH	vim/vim/src/eval.c	/^    , TYPE_NOMATCH	\/* !~ *\/$/;"	e	enum:__anon77	file:
TYPE_SEQUAL	vim/vim/src/eval.c	/^    , TYPE_SEQUAL	\/* <= *\/$/;"	e	enum:__anon77	file:
TYPE_SMALLER	vim/vim/src/eval.c	/^    , TYPE_SMALLER	\/* <  *\/$/;"	e	enum:__anon77	file:
TYPE_UNKNOWN	vim/vim/src/eval.c	/^    TYPE_UNKNOWN = 0$/;"	e	enum:__anon77	file:
T_8B	vim/vim/src/term.h	178;"	d
T_8F	vim/vim/src/term.h	177;"	d
T_AL	vim/vim/src/term.h	117;"	d
T_BC	vim/vim/src/term.h	151;"	d
T_BD	vim/vim/src/term.h	180;"	d
T_BE	vim/vim/src/term.h	179;"	d
T_CAB	vim/vim/src/term.h	160;"	d
T_CAF	vim/vim/src/term.h	159;"	d
T_CAL	vim/vim/src/term.h	118;"	d
T_CCO	vim/vim/src/term.h	153;"	d
T_CCS	vim/vim/src/term.h	152;"	d
T_CD	vim/vim/src/term.h	124;"	d
T_CDL	vim/vim/src/term.h	120;"	d
T_CE	vim/vim/src/term.h	116;"	d
T_CEI	vim/vim/src/term.h	171;"	d
T_CGP	vim/vim/src/term.h	168;"	d
T_CIE	vim/vim/src/term.h	164;"	d
T_CIS	vim/vim/src/term.h	163;"	d
T_CL	vim/vim/src/term.h	123;"	d
T_CM	vim/vim/src/term.h	143;"	d
T_CRI	vim/vim/src/term.h	145;"	d
T_CRV	vim/vim/src/term.h	173;"	d
T_CS	vim/vim/src/term.h	121;"	d
T_CSB	vim/vim/src/term.h	155;"	d
T_CSF	vim/vim/src/term.h	154;"	d
T_CSI	vim/vim/src/term.h	170;"	d
T_CSR	vim/vim/src/term.h	172;"	d
T_CSV	vim/vim/src/term.h	122;"	d
T_CWP	vim/vim/src/term.h	167;"	d
T_CWS	vim/vim/src/term.h	169;"	d
T_CZH	vim/vim/src/term.h	136;"	d
T_CZR	vim/vim/src/term.h	137;"	d
T_DA	vim/vim/src/term.h	126;"	d
T_DB	vim/vim/src/term.h	127;"	d
T_DL	vim/vim/src/term.h	119;"	d
T_FS	vim/vim/src/term.h	166;"	d
T_KE	vim/vim/src/term.h	148;"	d
T_KS	vim/vim/src/term.h	147;"	d
T_LE	vim/vim/src/term.h	161;"	d
T_MB	vim/vim/src/term.h	158;"	d
T_MD	vim/vim/src/term.h	133;"	d
T_ME	vim/vim/src/term.h	131;"	d
T_MR	vim/vim/src/term.h	132;"	d
T_MS	vim/vim/src/term.h	142;"	d
T_NAME	vim/vim/src/term.h	115;"	d
T_ND	vim/vim/src/term.h	162;"	d
T_OP	vim/vim/src/term.h	175;"	d
T_PE	vim/vim/src/term.h	182;"	d
T_PS	vim/vim/src/term.h	181;"	d
T_RBG	vim/vim/src/term.h	174;"	d
T_SE	vim/vim/src/term.h	134;"	d
T_SO	vim/vim/src/term.h	135;"	d
T_SR	vim/vim/src/term.h	144;"	d
T_TE	vim/vim/src/term.h	150;"	d
T_TI	vim/vim/src/term.h	149;"	d
T_TS	vim/vim/src/term.h	165;"	d
T_U7	vim/vim/src/term.h	176;"	d
T_UCE	vim/vim/src/term.h	140;"	d
T_UCS	vim/vim/src/term.h	141;"	d
T_UE	vim/vim/src/term.h	138;"	d
T_US	vim/vim/src/term.h	139;"	d
T_UT	vim/vim/src/term.h	125;"	d
T_VB	vim/vim/src/term.h	146;"	d
T_VE	vim/vim/src/term.h	129;"	d
T_VI	vim/vim/src/term.h	128;"	d
T_VS	vim/vim/src/term.h	130;"	d
T_XN	vim/vim/src/term.h	157;"	d
T_XS	vim/vim/src/term.h	156;"	d
TabListAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods TabListAsSeq;$/;"	v
TabListAsSeq	vim/vim/src/if_python.c	/^static PySequenceMethods TabListAsSeq = {$/;"	v	file:
TabListAsSeq	vim/vim/src/if_python3.c	/^static PySequenceMethods TabListAsSeq = {$/;"	v	file:
TabListItem	vim/vim/src/if_py_both.h	/^TabListItem(PyObject *self UNUSED, PyInt n)$/;"	f	signature:(PyObject *self UNUSED, PyInt n)
TabListLength	vim/vim/src/if_py_both.h	/^TabListLength(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
TabListObject	vim/vim/src/if_py_both.h	/^} TabListObject;$/;"	t	typeref:struct:__anon108
TabListType	vim/vim/src/if_py_both.h	/^static PyTypeObject TabListType;$/;"	v
TabPageAttr	vim/vim/src/if_py_both.h	/^TabPageAttr(TabPageObject *self, char *name)$/;"	f	signature:(TabPageObject *self, char *name)
TabPageAttrValid	vim/vim/src/if_py_both.h	/^TabPageAttrValid(TabPageObject *self, char *name)$/;"	f	signature:(TabPageObject *self, char *name)
TabPageAttrs	vim/vim/src/if_py_both.h	/^static char *TabPageAttrs[] = {$/;"	v
TabPageDestructor	vim/vim/src/if_py_both.h	/^TabPageDestructor(TabPageObject *self)$/;"	f	signature:(TabPageObject *self)
TabPageDir	vim/vim/src/if_py_both.h	/^TabPageDir(PyObject *self)$/;"	f	signature:(PyObject *self)
TabPageGetattr	vim/vim/src/if_python.c	/^TabPageGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
TabPageGetattr	vim/vim/src/if_python.c	/^static PyObject *TabPageGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
TabPageGetattro	vim/vim/src/if_python3.c	/^TabPageGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
TabPageGetattro	vim/vim/src/if_python3.c	/^static PyObject *TabPageGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
TabPageIdxs	vim/vim/src/globals.h	/^EXTERN short	*TabPageIdxs INIT(= NULL);$/;"	v
TabPageMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef TabPageMethods[] = {$/;"	v	typeref:struct:PyMethodDef
TabPageNew	vim/vim/src/if_py_both.h	/^TabPageNew(tabpage_T *tab)$/;"	f	signature:(tabpage_T *tab)
TabPageObject	vim/vim/src/if_py_both.h	/^} TabPageObject;$/;"	t	typeref:struct:__anon107
TabPageRepr	vim/vim/src/if_py_both.h	/^TabPageRepr(TabPageObject *self)$/;"	f	signature:(TabPageObject *self)
TabPageType	vim/vim/src/if_py_both.h	/^static PyTypeObject TabPageType;$/;"	v
TextData	vim/vim/src/gui_at_fs.c	/^} TextData;$/;"	t	typeref:struct:__anon238	file:
TheBufferMap	vim/vim/src/if_py_both.h	/^static BufMapObject TheBufferMap =$/;"	v
TheCurrent	vim/vim/src/if_py_both.h	/^static CurrentObject TheCurrent =$/;"	v
TheTabPageList	vim/vim/src/if_py_both.h	/^static TabListObject TheTabPageList =$/;"	v
TheWindowList	vim/vim/src/if_py_both.h	/^static WinListObject TheWindowList =$/;"	v
ThreadedTCPRequestHandler	vim/vim/runtime/tools/demoserver.py	/^class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):$/;"	c	inherits:socketserver.BaseRequestHandler
ThreadedTCPRequestHandler	vim/vim/src/testdir/test_channel.py	/^class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):$/;"	c	inherits:socketserver.BaseRequestHandler
ThreadedTCPRequestHandler	vim/vim/src/testdir/test_netbeans.py	/^class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):$/;"	c	inherits:socketserver.BaseRequestHandler
ThreadedTCPServer	vim/vim/runtime/tools/demoserver.py	/^class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):$/;"	c	inherits:socketserver.ThreadingMixIn, socketserver.TCPServer
ThreadedTCPServer	vim/vim/src/testdir/test_channel.py	/^class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):$/;"	c	inherits:socketserver.ThreadingMixIn, socketserver.TCPServer
ThreadedTCPServer	vim/vim/src/testdir/test_netbeans.py	/^class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):$/;"	c	inherits:socketserver.ThreadingMixIn, socketserver.TCPServer
Thunk_Info	vim/vim/src/if_mzsch.c	/^} Thunk_Info;$/;"	t	typeref:struct:__anon11	file:
ToInt	vim/vim/src/gui_dwrite.cpp	/^ToInt(DWRITE_PIXEL_GEOMETRY value)$/;"	f	file:	signature:(DWRITE_PIXEL_GEOMETRY value)
ToInt	vim/vim/src/gui_dwrite.cpp	/^ToInt(DWRITE_RENDERING_MODE value)$/;"	f	file:	signature:(DWRITE_RENDERING_MODE value)
ToPixelGeometry	vim/vim/src/gui_dwrite.cpp	/^ToPixelGeometry(int value)$/;"	f	file:	signature:(int value)
ToRenderingMode	vim/vim/src/gui_dwrite.cpp	/^ToRenderingMode(int value)$/;"	f	file:	signature:(int value)
ToTextAntialiasMode	vim/vim/src/gui_dwrite.cpp	/^ToTextAntialiasMode(int value)$/;"	f	file:	signature:(int value)
Trace	vim/vim/src/os_mswin.c	/^Trace($/;"	f	signature:( char *pszFormat, ...)
Trace	vim/vim/src/os_win32.h	/^Trace(char *pszFormat, ...);$/;"	p	signature:(char *pszFormat, ...)
TrackUserActivity	vim/vim/src/gui_w32.c	/^TrackUserActivity(UINT uMsg)$/;"	f	file:	signature:(UINT uMsg)
TrackUserActivity	vim/vim/src/gui_w32.c	/^static void TrackUserActivity(UINT uMsg);$/;"	p	file:	signature:(UINT uMsg)
True	vim/vim/src/xpm/include/simx.h	127;"	d
TtyProto	vim/vim/src/pty.c	/^static char TtyProto[] = "\/dev\/pty\/ttyXY";$/;"	v	file:
TtyProto	vim/vim/src/pty.c	/^static char TtyProto[] = "\/dev\/tt\/XY";$/;"	v	file:
TtyProto	vim/vim/src/pty.c	/^static char TtyProto[] = "\/dev\/ttyXY";$/;"	v	file:
U7_GET	vim/vim/src/term.c	123;"	d	file:
U7_GOT	vim/vim/src/term.c	125;"	d	file:
U7_SENT	vim/vim/src/term.c	124;"	d	file:
UBOUND	vim/vim/src/libvterm/src/state.c	936;"	d	file:
UB_CRYPT	vim/vim/src/memline.c	/^    , UB_CRYPT		\/* update crypt key *\/$/;"	e	enum:__anon247	file:
UB_FNAME	vim/vim/src/memline.c	/^      UB_FNAME = 0	\/* update timestamp and filename *\/$/;"	e	enum:__anon247	file:
UB_SAME_DIR	vim/vim/src/memline.c	/^    , UB_SAME_DIR       \/* update the B0_SAME_DIR flag *\/$/;"	e	enum:__anon247	file:
UCHARAT	vim/vim/src/regexp.c	333;"	d	file:
UC_BUFFER	vim/vim/src/ex_docmd.c	39;"	d	file:
UChar	vim/vim/src/os_win32.c	853;"	d	file:
UChar	vim/vim/src/os_win32.c	855;"	d	file:
UE_MAGIC	vim/vim/src/undo.c	82;"	d	file:
UF2HIKEY	vim/vim/src/userfunc.c	26;"	d	file:
UF_ENTRY_END_MAGIC	vim/vim/src/undo.c	734;"	d	file:
UF_ENTRY_MAGIC	vim/vim/src/undo.c	733;"	d	file:
UF_HEADER_END_MAGIC	vim/vim/src/undo.c	732;"	d	file:
UF_HEADER_MAGIC	vim/vim/src/undo.c	731;"	d	file:
UF_LAST_SAVE_NR	vim/vim/src/undo.c	739;"	d	file:
UF_START_MAGIC	vim/vim/src/undo.c	729;"	d	file:
UF_START_MAGIC_LEN	vim/vim/src/undo.c	730;"	d	file:
UF_VERSION	vim/vim/src/undo.c	735;"	d	file:
UF_VERSION_CRYPT	vim/vim/src/undo.c	736;"	d	file:
UHP_SAVE_NR	vim/vim/src/undo.c	742;"	d	file:
UH_CHANGED	vim/vim/src/structs.h	390;"	d
UH_EMPTYBUF	vim/vim/src/structs.h	391;"	d
UH_MAGIC	vim/vim/src/undo.c	81;"	d	file:
UINT	vim/vim/src/gui_w32.c	/^typedef int UINT;$/;"	t	file:
UINT	vim/vim/src/os_mswin.c	/^typedef int UINT;$/;"	t	file:
UINT	vim/vim/src/winclip.c	/^typedef int UINT;$/;"	t	file:
UINT32_T	vim/vim/src/os_vms_conf.h	54;"	d
UINT32_T	vim/vim/src/vim.h	/^typedef UINT32_TYPEDEF UINT32_T;$/;"	t
UINT32_TYPEDEF	vim/vim/src/vim.h	59;"	d
UINT32_TYPEDEF	vim/vim/src/vim.h	64;"	d
UINT_PTR	vim/vim/src/GvimExt/gvimext.h	49;"	d
UINT_PTR	vim/vim/src/GvimExt/gvimext.h	50;"	d
UINT_PTR	vim/vim/src/gui_w32.c	/^typedef int UINT_PTR;$/;"	t	file:
UINT_PTR	vim/vim/src/gui_w32.c	4239;"	d	file:
UINT_PTR	vim/vim/src/gui_w32.c	4240;"	d	file:
UINT_PTR	vim/vim/src/if_ole.cpp	46;"	d	file:
UINT_PTR	vim/vim/src/if_ole.cpp	47;"	d	file:
UI_MSEC_DELAY	vim/vim/src/if_xcmdsrv.c	569;"	d	file:
UNBLOCK_SIGNALS	vim/vim/src/os_unix.c	217;"	d	file:
UNBLOCK_SIGNALS	vim/vim/src/os_unix.c	221;"	d	file:
UNDER_CYGWIN	vim/vim/src/Make_cyg.mak	/^UNDER_CYGWIN = yes$/;"	m
UNDER_CYGWIN	vim/vim/src/Make_ming.mak	/^UNDER_CYGWIN = no$/;"	m
UNDO_HASH_SIZE	vim/vim/src/vim.h	1552;"	d
UNHIGHLIGHTT	vim/vim/src/gui_xmebw.c	36;"	d	file:
UNICODE_INVALID	vim/vim/src/libvterm/src/encoding.c	3;"	d	file:
UNICODE_LINEFEED	vim/vim/src/libvterm/src/screen.c	10;"	d	file:
UNICODE_SPACE	vim/vim/src/libvterm/src/screen.c	9;"	d	file:
UNITTEST_SRC	vim/vim/src/Makefile	/^UNITTEST_SRC = $(JSON_TEST_SRC) $(KWORD_TEST_SRC) $(MEMFILE_TEST_SRC) $(MESSAGE_TEST_SRC)$/;"	m
UNITTEST_TARGETS	vim/vim/src/Makefile	/^UNITTEST_TARGETS = $(JSON_TEST_TARGET) $(KWORD_TEST_TARGET) $(MEMFILE_TEST_TARGET) $(MESSAGE_TEST_TARGET)$/;"	m
UNIX	vim/vim/src/auto/config.h	38;"	d
UNIX	vim/vim/src/vim.h	99;"	d
UNKNOWN	vim/vim/src/fileio.c	257;"	d	file:
UNKNOWN_CREATOR	vim/vim/src/os_mac.h	309;"	d
UNUSED	vim/vim/src/ex_docmd.c	/^    void	*cookie UNUSED,		\/* argument for fgetline() *\/$/;"	v
UNUSED	vim/vim/src/libvterm/src/vterm_internal.h	10;"	d
UNUSED	vim/vim/src/libvterm/src/vterm_internal.h	13;"	d
UNUSED	vim/vim/src/vim.h	266;"	d
UP	vim/vim/src/term.c	/^char *UP, *BC, PC;$/;"	v
UP	vim/vim/src/termlib.c	/^char	*UP = 0, *BC = 0;     \/* Pointers to UP and BC strings from database *\/$/;"	v
UPDATE_DESKTOP_DATABASE	vim/vim/src/auto/config.mk	/^UPDATE_DESKTOP_DATABASE = \/usr\/bin\/update-desktop-database$/;"	m
UPDATE_KEYS_ZIP	vim/vim/src/crypt_zip.c	77;"	d	file:
UPPER	vim/vim/src/regexp.c	211;"	d	file:
UP_BC_PC_EXTERN	vim/vim/src/os_mac.h	269;"	d
URL_BACKSLASH	vim/vim/src/window.c	72;"	d	file:
URL_SLASH	vim/vim/src/window.c	71;"	d	file:
USAGE	vim/vim/runtime/tools/ccfilter.c	/^const char USAGE[] =$/;"	v
USECTRLV	vim/vim/src/ex_cmds.h	47;"	d
USEDLL	vim/vim/src/GvimExt/Make_bc5.mak	/^USEDLL = no$/;"	m
USEDLL	vim/vim/src/Make_bc5.mak	/^USEDLL = no$/;"	m
USEDLL	vim/vim/src/xxd/Make_ming.mak	/^USEDLL = no$/;"	m
USEMAN_S	vim/vim/src/auto/config.h	64;"	d
USEMEMMOVE	vim/vim/src/auto/config.h	60;"	d
USEMEMMOVE	vim/vim/src/os_vms_conf.h	29;"	d
USER_CMD	vim/vim/src/ex_docmd.c	43;"	d	file:
USER_CMD_GA	vim/vim/src/ex_docmd.c	44;"	d	file:
USER_HIGHLIGHT	vim/vim/src/globals.h	359;"	d
USE_24BIT	vim/vim/src/vim.h	1668;"	d
USE_24BIT	vim/vim/src/vim.h	1674;"	d
USE_24BIT	vim/vim/src/vim.h	1680;"	d
USE_AEVENT	vim/vim/src/gui_mac.c	41;"	d	file:
USE_AEVENT	vim/vim/src/gui_mac.c	46;"	d	file:
USE_ARGV	vim/vim/src/channel.c	4925;"	d	file:
USE_ATSUI_DRAWING	vim/vim/src/gui_mac.c	169;"	d	file:
USE_CARBONIZED	vim/vim/src/gui_mac.c	40;"	d	file:
USE_CARBONKEYHANDLER	vim/vim/src/gui_mac.c	61;"	d	file:
USE_CMD_KEY	vim/vim/src/os_mac.h	73;"	d
USE_CR	vim/vim/src/os_mac.h	103;"	d
USE_CRNL	vim/vim/src/os_dos.h	132;"	d
USE_DLOPEN	vim/vim/src/feature.h	699;"	d
USE_EXE_NAME	vim/vim/src/os_mac.h	90;"	d
USE_EXE_NAME	vim/vim/src/os_win32.h	28;"	d
USE_FILE_CHOOSER	vim/vim/src/vim.h	2313;"	d
USE_FNAME_CASE	vim/vim/src/os_amiga.h	15;"	d
USE_FNAME_CASE	vim/vim/src/os_mac.h	98;"	d
USE_FNAME_CASE	vim/vim/src/os_unix.h	41;"	d
USE_FNAME_CASE	vim/vim/src/os_win32.h	67;"	d
USE_FONTSET	vim/vim/src/os_vms_conf.h	194;"	d
USE_FOPEN_NOINH	vim/vim/src/ex_cmds2.c	4042;"	d	file:
USE_FSTATFS	vim/vim/src/memfile.c	129;"	d	file:
USE_GETCWD	vim/vim/src/os_unix.h	70;"	d
USE_GETCWD	vim/vim/src/os_vms_conf.h	7;"	d
USE_ICONV	vim/vim/src/feature.h	651;"	d
USE_IM_CONTROL	vim/vim/src/vim.h	564;"	d
USE_INPUT_BUF	vim/vim/src/vim.h	1754;"	d
USE_MCH_ACCESS	vim/vim/src/fileio.c	28;"	d	file:
USE_MCH_ERRMSG	vim/vim/src/vim.h	2130;"	d
USE_MP	vim/vim/src/Make_mvc.mak	/^USE_MP = yes$/;"	m
USE_NL	vim/vim/src/screen.c	9719;"	d	file:
USE_OFFSETED_WINDOW	vim/vim/src/gui_mac.c	42;"	d	file:
USE_ON_FLY_SCROLL	vim/vim/src/gui.h	66;"	d
USE_PANEL_GROUP	vim/vim/src/gui_photon.c	47;"	d	file:
USE_REDRAW	vim/vim/src/screen.c	9721;"	d	file:
USE_RUBY_INTEGER	vim/vim/src/if_ruby.c	35;"	d	file:
USE_STDCPLUS	vim/vim/src/Make_cyg_ming.mak	/^USE_STDCPLUS = yes$/;"	m
USE_SYSMENU_FONT	vim/vim/src/gui_w32.c	4356;"	d	file:
USE_SYSTEM	vim/vim/src/os_beos.h	14;"	d
USE_SYSTEM	vim/vim/src/os_vms_conf.h	8;"	d
USE_TCL_STUBS	vim/vim/src/if_tcl.c	73;"	d	file:
USE_TERM_CONSOLE	vim/vim/src/os_amiga.h	16;"	d
USE_TERM_CONSOLE	vim/vim/src/os_beos.h	16;"	d
USE_TERM_CONSOLE	vim/vim/src/os_win32.h	30;"	d
USE_THREAD_FOR_INPUT_WITH_TIMEOUT	vim/vim/src/os_beos.h	15;"	d
USE_TMPNAM	vim/vim/src/os_amiga.h	82;"	d
USE_TMPNAM	vim/vim/src/os_mac.h	113;"	d
USE_TMPNAM	vim/vim/src/os_qnx.h	13;"	d
USE_TYPEDDATA	vim/vim/src/if_ruby.c	143;"	d	file:
USE_T_AL	vim/vim/src/screen.c	9715;"	d	file:
USE_T_CAL	vim/vim/src/screen.c	9713;"	d	file:
USE_T_CD	vim/vim/src/screen.c	9720;"	d	file:
USE_T_CDL	vim/vim/src/screen.c	9714;"	d	file:
USE_T_CE	vim/vim/src/screen.c	9716;"	d	file:
USE_T_DL	vim/vim/src/screen.c	9717;"	d	file:
USE_T_SR	vim/vim/src/screen.c	9718;"	d	file:
USE_UNIXFILENAME	vim/vim/src/os_mac.h	80;"	d
USE_UTF8LOOKUP	vim/vim/src/gui_x11.c	754;"	d	file:
USE_UTF8_STRING	vim/vim/src/os_unix.c	2028;"	d	file:
USE_VIMPTY_GETENV	vim/vim/src/os_mac.h	257;"	d
USE_X11R6_XIM	vim/vim/src/mbyte.c	5758;"	d	file:
USE_XIM	vim/vim/src/feature.h	666;"	d
USE_XSMP	vim/vim/src/feature.h	1033;"	d
USE_XSMP_INTERACT	vim/vim/src/auto/config.h	445;"	d
USE_XSMP_INTERACT	vim/vim/src/feature.h	1036;"	d
USING_FLOAT_STUFF	vim/vim/src/eval.c	13;"	d	file:
USING_FLOAT_STUFF	vim/vim/src/evalfunc.c	13;"	d	file:
USING_FLOAT_STUFF	vim/vim/src/json.c	15;"	d	file:
USING_FLOAT_STUFF	vim/vim/src/message.c	15;"	d	file:
USR_EXRC_FILE	vim/vim/src/os_amiga.h	145;"	d
USR_EXRC_FILE	vim/vim/src/os_dos.h	36;"	d
USR_EXRC_FILE	vim/vim/src/os_mac.h	162;"	d
USR_EXRC_FILE	vim/vim/src/os_unix.h	249;"	d
USR_EXRC_FILE	vim/vim/src/os_unix.h	251;"	d
USR_EXRC_FILE2	vim/vim/src/os_amiga.h	148;"	d
USR_EXRC_FILE2	vim/vim/src/os_dos.h	39;"	d
USR_EXRC_FILE2	vim/vim/src/os_unix.h	256;"	d
USR_GVIMRC_FILE	vim/vim/src/os_amiga.h	171;"	d
USR_GVIMRC_FILE	vim/vim/src/os_dos.h	47;"	d
USR_GVIMRC_FILE	vim/vim/src/os_mac.h	151;"	d
USR_GVIMRC_FILE	vim/vim/src/os_unix.h	282;"	d
USR_GVIMRC_FILE	vim/vim/src/os_unix.h	284;"	d
USR_GVIMRC_FILE2	vim/vim/src/os_amiga.h	174;"	d
USR_GVIMRC_FILE2	vim/vim/src/os_dos.h	50;"	d
USR_GVIMRC_FILE2	vim/vim/src/os_unix.h	290;"	d
USR_GVIMRC_FILE2	vim/vim/src/os_unix.h	292;"	d
USR_GVIMRC_FILE3	vim/vim/src/os_amiga.h	177;"	d
USR_GVIMRC_FILE3	vim/vim/src/os_dos.h	53;"	d
USR_GVIMRC_FILE3	vim/vim/src/os_unix.h	298;"	d
USR_GVIMRC_FILE4	vim/vim/src/os_amiga.h	180;"	d
USR_VIMRC_FILE	vim/vim/src/os_amiga.h	152;"	d
USR_VIMRC_FILE	vim/vim/src/os_dos.h	20;"	d
USR_VIMRC_FILE	vim/vim/src/os_mac.h	158;"	d
USR_VIMRC_FILE	vim/vim/src/os_unix.h	261;"	d
USR_VIMRC_FILE	vim/vim/src/os_unix.h	263;"	d
USR_VIMRC_FILE2	vim/vim/src/os_amiga.h	155;"	d
USR_VIMRC_FILE2	vim/vim/src/os_dos.h	23;"	d
USR_VIMRC_FILE2	vim/vim/src/os_unix.h	270;"	d
USR_VIMRC_FILE2	vim/vim/src/os_unix.h	272;"	d
USR_VIMRC_FILE3	vim/vim/src/os_amiga.h	158;"	d
USR_VIMRC_FILE3	vim/vim/src/os_dos.h	26;"	d
USR_VIMRC_FILE3	vim/vim/src/os_unix.h	277;"	d
USR_VIMRC_FILE4	vim/vim/src/os_amiga.h	161;"	d
UTF8DecoderData	vim/vim/src/libvterm/src/encoding.c	/^struct UTF8DecoderData {$/;"	s	file:
UTF8DecoderData::bytes_remaining	vim/vim/src/libvterm/src/encoding.c	/^  int bytes_remaining;$/;"	m	struct:UTF8DecoderData	file:	access:public
UTF8DecoderData::bytes_total	vim/vim/src/libvterm/src/encoding.c	/^  int bytes_total;$/;"	m	struct:UTF8DecoderData	file:	access:public
UTF8DecoderData::this_cp	vim/vim/src/libvterm/src/encoding.c	/^  int this_cp;$/;"	m	struct:UTF8DecoderData	file:	access:public
UTF_COMPOSINGLIKE	vim/vim/src/macros.h	257;"	d
UTF_COMPOSINGLIKE	vim/vim/src/macros.h	259;"	d
UVARNUM_MAX	vim/vim/src/structs.h	1153;"	d
UVARNUM_MAX	vim/vim/src/structs.h	1159;"	d
UVARNUM_MAX	vim/vim/src/structs.h	1166;"	d
UVARNUM_MAX	vim/vim/src/structs.h	1172;"	d
UVARNUM_MAX	vim/vim/src/structs.h	1181;"	d
UVARNUM_MAX	vim/vim/src/structs.h	1187;"	d
U_ALLOC_LINE	vim/vim/src/undo.c	142;"	d	file:
U_acute	vim/vim/src/regexp_nfa.c	781;"	d	file:
U_circumflex	vim/vim/src/regexp_nfa.c	778;"	d	file:
U_diaeresis	vim/vim/src/regexp_nfa.c	779;"	d	file:
U_grave	vim/vim/src/regexp_nfa.c	780;"	d	file:
UnRegisterTypeLib	vim/vim/src/if_ole.cpp	/^WINOLEAUTAPI UnRegisterTypeLib(REFGUID libID, WORD wVerMajor,$/;"	p	file:	signature:(REFGUID libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
UnadviseFromEvents	vim/vim/src/VisVim/Commands.cpp	/^void CCommands::UnadviseFromEvents()$/;"	f	class:CCommands	signature:()
UniChar	vim/vim/src/os_mac_conv.c	/^typedef int UniChar;$/;"	t	file:
UninitOLE	vim/vim/src/if_ole.cpp	/^extern "C" void UninitOLE()$/;"	f	signature:()
UnregisterMe	vim/vim/src/if_ole.cpp	/^extern "C" void UnregisterMe(int bNotifyUser)$/;"	f	signature:(int bNotifyUser)
VALID	vim/vim/src/vim.h	635;"	d
VALID_BOTLINE	vim/vim/src/vim.h	668;"	d
VALID_BOTLINE_AP	vim/vim/src/vim.h	669;"	d
VALID_CHEIGHT	vim/vim/src/vim.h	666;"	d
VALID_CROW	vim/vim/src/vim.h	667;"	d
VALID_HEAD	vim/vim/src/vim.h	1926;"	d
VALID_NO_UPDATE	vim/vim/src/vim.h	633;"	d
VALID_PATH	vim/vim/src/vim.h	1925;"	d
VALID_STATE	vim/vim/src/syntax.c	361;"	d	file:
VALID_TOPLINE	vim/vim/src/vim.h	670;"	d
VALID_VIRTCOL	vim/vim/src/vim.h	665;"	d
VALID_WCOL	vim/vim/src/vim.h	664;"	d
VALID_WROW	vim/vim/src/vim.h	663;"	d
VALUE	vim/vim/src/if_ruby.c	177;"	d	file:
VARNAME_SIZE	vim/vim/src/if_tcl.c	98;"	d	file:
VARNUM_MAX	vim/vim/src/structs.h	1152;"	d
VARNUM_MAX	vim/vim/src/structs.h	1158;"	d
VARNUM_MAX	vim/vim/src/structs.h	1165;"	d
VARNUM_MAX	vim/vim/src/structs.h	1171;"	d
VARNUM_MAX	vim/vim/src/structs.h	1180;"	d
VARNUM_MAX	vim/vim/src/structs.h	1186;"	d
VARNUM_MIN	vim/vim/src/structs.h	1151;"	d
VARNUM_MIN	vim/vim/src/structs.h	1157;"	d
VARNUM_MIN	vim/vim/src/structs.h	1164;"	d
VARNUM_MIN	vim/vim/src/structs.h	1170;"	d
VARNUM_MIN	vim/vim/src/structs.h	1179;"	d
VARNUM_MIN	vim/vim/src/structs.h	1185;"	d
VAR_CHANNEL	vim/vim/src/structs.h	/^    VAR_CHANNEL	 \/* "v_channel" is used *\/$/;"	e	enum:__anon183
VAR_CURBUF	vim/vim/src/if_tcl.c	93;"	d	file:
VAR_CURLINE	vim/vim/src/if_tcl.c	96;"	d	file:
VAR_CURLNUM	vim/vim/src/if_tcl.c	97;"	d	file:
VAR_CURWIN	vim/vim/src/if_tcl.c	94;"	d	file:
VAR_DEF_SCOPE	vim/vim/src/structs.h	1244;"	d
VAR_DICT	vim/vim/src/structs.h	/^    VAR_DICT,	 \/* "v_dict" is used *\/$/;"	e	enum:__anon183
VAR_FIXED	vim/vim/src/structs.h	1249;"	d
VAR_FLAVOUR_DEFAULT	vim/vim/src/eval.c	/^    VAR_FLAVOUR_DEFAULT,	\/* doesn't start with uppercase *\/$/;"	e	enum:__anon78	file:
VAR_FLAVOUR_SESSION	vim/vim/src/eval.c	/^    VAR_FLAVOUR_SESSION,	\/* starts with uppercase, some lower *\/$/;"	e	enum:__anon78	file:
VAR_FLAVOUR_VIMINFO	vim/vim/src/eval.c	/^    VAR_FLAVOUR_VIMINFO		\/* all uppercase *\/$/;"	e	enum:__anon78	file:
VAR_FLOAT	vim/vim/src/structs.h	/^    VAR_FLOAT,	 \/* "v_float" is used *\/$/;"	e	enum:__anon183
VAR_FUNC	vim/vim/src/structs.h	/^    VAR_FUNC,	 \/* "v_string" is function name *\/$/;"	e	enum:__anon183
VAR_JOB	vim/vim/src/structs.h	/^    VAR_JOB,	 \/* "v_job" is used *\/$/;"	e	enum:__anon183
VAR_LBASE	vim/vim/src/if_tcl.c	95;"	d	file:
VAR_LIST	vim/vim/src/structs.h	/^    VAR_LIST,	 \/* "v_list" is used *\/$/;"	e	enum:__anon183
VAR_LOCKED	vim/vim/src/structs.h	1248;"	d
VAR_NUMBER	vim/vim/src/structs.h	/^    VAR_NUMBER,	 \/* "v_number" is used *\/$/;"	e	enum:__anon183
VAR_PARTIAL	vim/vim/src/structs.h	/^    VAR_PARTIAL, \/* "v_partial" is used *\/$/;"	e	enum:__anon183
VAR_RANGE1	vim/vim/src/if_tcl.c	90;"	d	file:
VAR_RANGE2	vim/vim/src/if_tcl.c	91;"	d	file:
VAR_RANGE3	vim/vim/src/if_tcl.c	92;"	d	file:
VAR_SCOPE	vim/vim/src/structs.h	1243;"	d
VAR_SHORT_LEN	vim/vim/src/structs.h	1385;"	d
VAR_SPECIAL	vim/vim/src/structs.h	/^    VAR_SPECIAL, \/* "v_number" is used *\/$/;"	e	enum:__anon183
VAR_STRING	vim/vim/src/structs.h	/^    VAR_STRING,	 \/* "v_string" is used *\/$/;"	e	enum:__anon183
VAR_TYPE_BOOL	vim/vim/src/vim.h	2025;"	d
VAR_TYPE_CHANNEL	vim/vim/src/vim.h	2028;"	d
VAR_TYPE_DICT	vim/vim/src/vim.h	2023;"	d
VAR_TYPE_FLOAT	vim/vim/src/vim.h	2024;"	d
VAR_TYPE_FUNC	vim/vim/src/vim.h	2021;"	d
VAR_TYPE_JOB	vim/vim/src/vim.h	2027;"	d
VAR_TYPE_LIST	vim/vim/src/vim.h	2022;"	d
VAR_TYPE_NONE	vim/vim/src/vim.h	2026;"	d
VAR_TYPE_NUMBER	vim/vim/src/vim.h	2019;"	d
VAR_TYPE_STRING	vim/vim/src/vim.h	2020;"	d
VAR_UNKNOWN	vim/vim/src/structs.h	/^    VAR_UNKNOWN = 0,$/;"	e	enum:__anon183
VAR_WIN	vim/vim/src/option.c	279;"	d	file:
VCOL_HLC	vim/vim/src/screen.c	3183;"	d	file:
VC_EXTRALEAN	vim/vim/src/VisVim/StdAfx.h	9;"	d
VDOT	vim/vim/Makefile	/^VDOT	= $(MAJOR).$(MINOR)$/;"	m
VERIFY_OK	vim/vim/src/VisVim/StdAfx.h	48;"	d
VERIFY_OK	vim/vim/src/VisVim/StdAfx.h	66;"	d
VERSION	vim/vim/Makefile	/^VERSION = $(MAJOR)$(MINOR)$/;"	m
VERSION	vim/vim/src/Makefile	/^VERSION = $(VIMMAJOR).$(VIMMINOR)$/;"	m
VERSION	vim/vim/src/libvterm/Makefile	/^VERSION=$(VERSION_MAJOR).$(VERSION_MINOR)$/;"	m
VERSION	vim/vim/src/libvterm/Makefile	/^VERSION=0$/;"	m
VERSION_AGE	vim/vim/src/libvterm/Makefile	/^VERSION_AGE=0$/;"	m
VERSION_CURRENT	vim/vim/src/libvterm/Makefile	/^VERSION_CURRENT=0$/;"	m
VERSION_MAJOR	vim/vim/src/libvterm/Makefile	/^VERSION_MAJOR=0$/;"	m
VERSION_MINOR	vim/vim/src/libvterm/Makefile	/^VERSION_MINOR=0$/;"	m
VERSION_REVISION	vim/vim/src/libvterm/Makefile	/^VERSION_REVISION=0$/;"	m
VER_PLATFORM_WIN32_WINDOWS	vim/vim/src/GvimExt/gvimext.cpp	890;"	d	file:
VER_PLATFORM_WIN32_WINDOWS	vim/vim/src/dosinst.h	141;"	d
VER_PLATFORM_WIN32_WINDOWS	vim/vim/src/os_win32.c	677;"	d	file:
VE_ALL	vim/vim/src/option.h	939;"	d
VE_BLOCK	vim/vim/src/option.h	937;"	d
VE_INSERT	vim/vim/src/option.h	938;"	d
VE_ONEMORE	vim/vim/src/option.h	940;"	d
VGR_GLOBAL	vim/vim/src/vim.h	2378;"	d
VGR_NOJUMP	vim/vim/src/vim.h	2379;"	d
VIEWNAME	vim/vim/src/Makefile	/^VIEWNAME = view$/;"	m
VIEWNAME	vim/vim/src/auto/config.mk	/^VIEWNAME	= view$/;"	m
VIEWTARGET	vim/vim/src/Makefile	/^VIEWTARGET	= $(VIEWNAME)$(LNKEXT)$/;"	m
VIF_FORCEIT	vim/vim/src/vim.h	2394;"	d
VIF_GET_OLDFILES	vim/vim/src/vim.h	2395;"	d
VIF_WANT_INFO	vim/vim/src/vim.h	2392;"	d
VIF_WANT_MARKS	vim/vim/src/vim.h	2393;"	d
VIM	vim/vim/Makefile	/^VIM	= vim$/;"	m
VIM	vim/vim/src/Make_ivc.mak	/^VIM=gvim$/;"	m
VIM	vim/vim/src/Make_ivc.mak	/^VIM=gvimd$/;"	m
VIM	vim/vim/src/Make_ivc.mak	/^VIM=vim$/;"	m
VIM	vim/vim/src/Make_ivc.mak	/^VIM=vimd$/;"	m
VIM	vim/vim/src/Make_mvc.mak	/^VIM = g$(VIM)$/;"	m
VIM	vim/vim/src/Make_mvc.mak	/^VIM = vim$/;"	m
VIM	vim/vim/src/Make_mvc.mak	/^VIM = vimd$/;"	m
VIM	vim/vim/src/po/Makefile	/^VIM = ..\/vim$/;"	m
VIMDIFFNAME	vim/vim/src/Makefile	/^VIMDIFFNAME	= $(VIMNAME)diff$/;"	m
VIMDIFFTARGET	vim/vim/src/Makefile	/^VIMDIFFTARGET	= $(VIMDIFFNAME)$(LNKEXT)$/;"	m
VIMDIR	vim/vim/src/Makefile	/^VIMDIR = \/vim$/;"	m
VIMENC_ATOM_NAME	vim/vim/src/vim.h	2036;"	d
VIMERR	vim/vim/src/if_tcl.c	107;"	d	file:
VIMEXE	vim/vim/runtime/doc/Makefile	/^VIMEXE = vim$/;"	m
VIMINFO_FILE	vim/vim/src/os_amiga.h	185;"	d
VIMINFO_FILE	vim/vim/src/os_dos.h	66;"	d
VIMINFO_FILE	vim/vim/src/os_mac.h	202;"	d
VIMINFO_FILE	vim/vim/src/os_unix.h	313;"	d
VIMINFO_FILE	vim/vim/src/os_unix.h	315;"	d
VIMINFO_FILE2	vim/vim/src/os_dos.h	69;"	d
VIMINFO_FILE2	vim/vim/src/os_unix.h	319;"	d
VIMINFO_VERSION	vim/vim/src/vim.h	1144;"	d
VIMINFO_VERSION_WITH_HISTORY	vim/vim/src/vim.h	1145;"	d
VIMINFO_VERSION_WITH_MARKS	vim/vim/src/vim.h	1147;"	d
VIMINFO_VERSION_WITH_REGISTERS	vim/vim/src/vim.h	1146;"	d
VIMLOC	vim/vim/src/Makefile	/^VIMLOC		= $(DATADIR)$(VIMDIR)$/;"	m
VIMMAJOR	vim/vim/src/Makefile	/^VIMMAJOR = 8$/;"	m
VIMMINOR	vim/vim/src/Makefile	/^VIMMINOR = 0$/;"	m
VIMNAME	vim/vim/src/Makefile	/^VIMNAME = vim$/;"	m
VIMNAME	vim/vim/src/auto/config.mk	/^VIMNAME		= vim$/;"	m
VIMOUT	vim/vim/src/if_tcl.c	106;"	d	file:
VIMPACKAGE	vim/vim/src/GvimExt/gvimext.cpp	158;"	d	file:
VIMPACKAGE	vim/vim/src/vim.h	236;"	d
VIMPROG	vim/vim/src/testdir/Make_amiga.mak	/^VIMPROG = \/vim$/;"	m
VIMPROG	vim/vim/src/testdir/Make_dos.mak	/^VIMPROG = ..\\\\vim$/;"	m
VIMPROG	vim/vim/src/testdir/Make_ming.mak	/^VIMPROG = ..$(DIRSLASH)vim$/;"	m
VIMPROG	vim/vim/src/testdir/Makefile	/^VIMPROG = ..\/vim$/;"	m
VIMRCLOC	vim/vim/src/Makefile	/^VIMRCLOC	= $(VIMLOC)$/;"	m
VIMRC_FILE	vim/vim/src/os_amiga.h	194;"	d
VIMRC_FILE	vim/vim/src/os_dos.h	74;"	d
VIMRC_FILE	vim/vim/src/os_mac.h	166;"	d
VIMRC_FILE	vim/vim/src/os_unix.h	328;"	d
VIMRTDIR	vim/vim/Makefile	/^VIMRTDIR = vim$(VERSION)$/;"	m
VIMRTDIR	vim/vim/src/Makefile	/^VIMRTDIR = \/vim$(VIMMAJOR)$(VIMMINOR)$/;"	m
VIMRTLOC	vim/vim/src/Makefile	/^VIMRTLOC	= $(DATADIR)$(VIMDIR)$(VIMRTDIR)$/;"	m
VIMRUNTIME	vim/vim/src/po/Make_cyg.mak	/^VIMRUNTIME = ..\/..\/runtime$/;"	m
VIMRUNTIME	vim/vim/src/po/Make_ming.mak	/^VIMRUNTIME = ..\\..\\runtime$/;"	m
VIMRUNTIME	vim/vim/src/po/Make_mvc.mak	/^VIMRUNTIME = ..\\..\\runtime$/;"	m
VIMSCRAPFLAVOR	vim/vim/src/gui_mac.c	50;"	d	file:
VIMSCRIPTMOD	vim/vim/src/Makefile	/^VIMSCRIPTMOD = 644$/;"	m
VIMSPELLMAGIC	vim/vim/src/spellfile.c	268;"	d	file:
VIMSPELLMAGICL	vim/vim/src/spellfile.c	269;"	d	file:
VIMSPELLVERSION	vim/vim/src/spellfile.c	270;"	d	file:
VIMSUGMAGIC	vim/vim/src/spell.c	90;"	d	file:
VIMSUGMAGIC	vim/vim/src/spell.h	239;"	d
VIMSUGMAGICL	vim/vim/src/spell.c	91;"	d	file:
VIMSUGMAGICL	vim/vim/src/spell.h	240;"	d
VIMSUGVERSION	vim/vim/src/spell.c	92;"	d	file:
VIMSUGVERSION	vim/vim/src/spell.h	241;"	d
VIMTARGET	vim/vim/src/Makefile	/^VIMTARGET	= $(VIMNAME)$(EXEEXT)$/;"	m
VIMVER	vim/vim/Makefile	/^VIMVER	= vim-$(MAJOR).$(MINOR)$/;"	m
VIM_ALL	vim/vim/src/vim.h	1212;"	d
VIM_ATOM_NAME	vim/vim/src/vim.h	2035;"	d
VIM_BACKTICK	vim/vim/src/feature.h	202;"	d
VIM_CANCEL	vim/vim/src/vim.h	1211;"	d
VIM_CLASS	vim/vim/src/gui_w32.c	4359;"	d	file:
VIM_CLASS	vim/vim/src/gui_x11.c	58;"	d	file:
VIM_CLASSNAME	vim/vim/src/os_mswin.c	1970;"	d	file:
VIM_CLASSNAME_LEN	vim/vim/src/os_mswin.c	1971;"	d	file:
VIM_CLASSW	vim/vim/src/gui_w32.c	4360;"	d	file:
VIM_DEFAULT	vim/vim/src/option.c	420;"	d	file:
VIM_DEFAULTS_FILE	vim/vim/src/Makefile	/^VIM_DEFAULTS_FILE = $(DESTDIR)$(SCRIPTLOC)\/defaults.vim$/;"	m
VIM_DEFAULTS_FILE	vim/vim/src/os_amiga.h	164;"	d
VIM_DEFAULTS_FILE	vim/vim/src/os_dos.h	29;"	d
VIM_DEFAULTS_FILE	vim/vim/src/os_mac.h	143;"	d
VIM_DEFAULTS_FILE	vim/vim/src/os_unix.h	303;"	d
VIM_DISCARDALL	vim/vim/src/vim.h	1213;"	d
VIM_ERROR	vim/vim/src/vim.h	1200;"	d
VIM_GENERIC	vim/vim/src/vim.h	1199;"	d
VIM_INFO	vim/vim/src/vim.h	1202;"	d
VIM_ISBREAK	vim/vim/src/macros.h	176;"	d
VIM_ISDIGIT	vim/vim/src/macros.h	114;"	d
VIM_ISWHITE	vim/vim/src/macros.h	52;"	d
VIM_LAST_TYPE	vim/vim/src/vim.h	1204;"	d
VIM_LC_MESSAGES	vim/vim/src/ex_cmds2.c	5226;"	d	file:
VIM_NAME	vim/vim/src/gui_w32.c	4358;"	d	file:
VIM_NAME	vim/vim/src/gui_x11.c	57;"	d	file:
VIM_NO	vim/vim/src/vim.h	1210;"	d
VIM_QUESTION	vim/vim/src/vim.h	1203;"	d
VIM_SIZEOF_INT	vim/vim/src/auto/config.h	41;"	d
VIM_SIZEOF_INT	vim/vim/src/os_vms_conf.h	26;"	d
VIM_SIZEOF_INT	vim/vim/src/vim.h	154;"	d
VIM_SIZEOF_INT	vim/vim/src/vim.h	161;"	d
VIM_SIZEOF_INT	vim/vim/src/vim.h	170;"	d
VIM_SIZEOF_LONG	vim/vim/src/auto/config.h	44;"	d
VIM_STARTMENU	vim/vim/src/dosinst.h	92;"	d
VIM_VERSION_100	vim/vim/src/version.h	20;"	d
VIM_VERSION_BUILD	vim/vim/src/version.h	22;"	d
VIM_VERSION_BUILD_BCD	vim/vim/src/version.h	23;"	d
VIM_VERSION_BUILD_STR	vim/vim/src/version.h	24;"	d
VIM_VERSION_LONG	vim/vim/src/version.h	39;"	d
VIM_VERSION_LONG_DATE	vim/vim/src/version.h	40;"	d
VIM_VERSION_MAJOR	vim/vim/src/version.h	16;"	d
VIM_VERSION_MAJOR_STR	vim/vim/src/version.h	17;"	d
VIM_VERSION_MEDIUM	vim/vim/src/version.h	38;"	d
VIM_VERSION_MINOR	vim/vim/src/version.h	18;"	d
VIM_VERSION_MINOR_STR	vim/vim/src/version.h	19;"	d
VIM_VERSION_NODOT	vim/vim/src/version.h	36;"	d
VIM_VERSION_PATCHLEVEL	vim/vim/src/version.h	25;"	d
VIM_VERSION_PATCHLEVEL_STR	vim/vim/src/version.h	26;"	d
VIM_VERSION_RELEASE	vim/vim/src/version.h	28;"	d
VIM_VERSION_SHORT	vim/vim/src/version.h	37;"	d
VIM_WARNING	vim/vim/src/vim.h	1201;"	d
VIM_YES	vim/vim/src/vim.h	1209;"	d
VIM__H	vim/vim/src/vim.h	10;"	d
VISUAL	vim/vim/src/vim.h	697;"	d
VIS_SEL	vim/vim/src/getchar.c	5248;"	d	file:
VIS_SEL	vim/vim/src/getchar.c	5309;"	d	file:
VI_DEFAULT	vim/vim/src/option.c	419;"	d	file:
VIsual	vim/vim/src/globals.h	/^EXTERN pos_T	VIsual;		\/* start position of active Visual selection *\/$/;"	v
VIsual_active	vim/vim/src/globals.h	/^EXTERN int	VIsual_active INIT(= FALSE);$/;"	v
VIsual_mode	vim/vim/src/globals.h	/^EXTERN int	VIsual_mode INIT(= 'v');$/;"	v
VIsual_mode_orig	vim/vim/src/normal.c	/^static int	VIsual_mode_orig = NUL;		\/* saved Visual mode *\/$/;"	v	file:
VIsual_reselect	vim/vim/src/globals.h	/^EXTERN int	VIsual_reselect;$/;"	v
VIsual_select	vim/vim/src/globals.h	/^EXTERN int	VIsual_select INIT(= FALSE);$/;"	v
VMOUSEZ_CLASSNAME	vim/vim/src/gui_w32.c	4525;"	d	file:
VMOUSEZ_TITLE	vim/vim/src/gui_w32.c	4526;"	d	file:
VMSH_MOUSEWHEEL	vim/vim/src/gui_w32.c	4527;"	d	file:
VMSH_SCROLL_LINES	vim/vim/src/gui_w32.c	4528;"	d	file:
VMS_TEMPNAM	vim/vim/src/os_unix.h	379;"	d
VOID	vim/vim/src/gui_w32.c	/^typedef void VOID;$/;"	t	file:
VOID	vim/vim/src/os_mswin.c	/^typedef void VOID;$/;"	t	file:
VOID	vim/vim/src/os_win32.c	/^typedef void VOID;$/;"	t	file:
VREPLACE	vim/vim/src/vim.h	709;"	d
VREPLACE_FLAG	vim/vim/src/vim.h	708;"	d
VSNPRINTF	vim/vim/src/libvterm/src/vterm.c	/^int VSNPRINTF(char *str, size_t str_m, const char *fmt, va_list ap);$/;"	p	file:	signature:(char *str, size_t str_m, const char *fmt, va_list ap)
VSNPRINTF	vim/vim/src/libvterm/src/vterm.c	134;"	d	file:
VSNPRINTF	vim/vim/src/libvterm/src/vterm.c	135;"	d	file:
VTERM_ATTR_BACKGROUND	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_BACKGROUND  \/* color:  40-49 100-107 *\/$/;"	e	enum:__anon52
VTERM_ATTR_BACKGROUND_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_BACKGROUND_MASK = 1 << 8$/;"	e	enum:__anon65
VTERM_ATTR_BLINK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_BLINK,      \/* bool:   5, 25 *\/$/;"	e	enum:__anon52
VTERM_ATTR_BLINK_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_BLINK_MASK      = 1 << 3,$/;"	e	enum:__anon65
VTERM_ATTR_BOLD	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_BOLD = 1,   \/* bool:   1, 22 *\/$/;"	e	enum:__anon52
VTERM_ATTR_BOLD_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_BOLD_MASK       = 1 << 0,$/;"	e	enum:__anon65
VTERM_ATTR_FONT	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_FONT,       \/* number: 10-19 *\/$/;"	e	enum:__anon52
VTERM_ATTR_FONT_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_FONT_MASK       = 1 << 6,$/;"	e	enum:__anon65
VTERM_ATTR_FOREGROUND	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_FOREGROUND, \/* color:  30-39 90-97 *\/$/;"	e	enum:__anon52
VTERM_ATTR_FOREGROUND_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_FOREGROUND_MASK = 1 << 7,$/;"	e	enum:__anon65
VTERM_ATTR_ITALIC	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_ITALIC,     \/* bool:   3, 23 *\/$/;"	e	enum:__anon52
VTERM_ATTR_ITALIC_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_ITALIC_MASK     = 1 << 2,$/;"	e	enum:__anon65
VTERM_ATTR_REVERSE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_REVERSE,    \/* bool:   7, 27 *\/$/;"	e	enum:__anon52
VTERM_ATTR_REVERSE_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_REVERSE_MASK    = 1 << 4,$/;"	e	enum:__anon65
VTERM_ATTR_STRIKE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_STRIKE,     \/* bool:   9, 29 *\/$/;"	e	enum:__anon52
VTERM_ATTR_STRIKE_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_STRIKE_MASK     = 1 << 5,$/;"	e	enum:__anon65
VTERM_ATTR_UNDERLINE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_UNDERLINE,  \/* number: 4, 21, 24 *\/$/;"	e	enum:__anon52
VTERM_ATTR_UNDERLINE_MASK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_ATTR_UNDERLINE_MASK  = 1 << 1,$/;"	e	enum:__anon65
VTERM_DAMAGE_CELL	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_DAMAGE_CELL,    \/* every cell *\/$/;"	e	enum:__anon64
VTERM_DAMAGE_ROW	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_DAMAGE_ROW,     \/* entire rows *\/$/;"	e	enum:__anon64
VTERM_DAMAGE_SCREEN	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_DAMAGE_SCREEN,  \/* entire screen *\/$/;"	e	enum:__anon64
VTERM_DAMAGE_SCROLL	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_DAMAGE_SCROLL   \/* entire screen + scrollrect *\/$/;"	e	enum:__anon64
VTERM_KEY_BACKSPACE	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_BACKSPACE,$/;"	e	enum:__anon46
VTERM_KEY_DEL	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_DEL,$/;"	e	enum:__anon46
VTERM_KEY_DOWN	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_DOWN,$/;"	e	enum:__anon46
VTERM_KEY_END	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_END,$/;"	e	enum:__anon46
VTERM_KEY_ENTER	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_ENTER,$/;"	e	enum:__anon46
VTERM_KEY_ESCAPE	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_ESCAPE,$/;"	e	enum:__anon46
VTERM_KEY_FUNCTION	vim/vim/src/libvterm/include/vterm_keycodes.h	58;"	d
VTERM_KEY_FUNCTION_0	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_FUNCTION_0   = 256,$/;"	e	enum:__anon46
VTERM_KEY_FUNCTION_MAX	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_FUNCTION_MAX = VTERM_KEY_FUNCTION_0 + 255,$/;"	e	enum:__anon46
VTERM_KEY_HOME	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_HOME,$/;"	e	enum:__anon46
VTERM_KEY_INS	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_INS,$/;"	e	enum:__anon46
VTERM_KEY_KP_0	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_0,$/;"	e	enum:__anon46
VTERM_KEY_KP_1	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_1,$/;"	e	enum:__anon46
VTERM_KEY_KP_2	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_2,$/;"	e	enum:__anon46
VTERM_KEY_KP_3	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_3,$/;"	e	enum:__anon46
VTERM_KEY_KP_4	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_4,$/;"	e	enum:__anon46
VTERM_KEY_KP_5	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_5,$/;"	e	enum:__anon46
VTERM_KEY_KP_6	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_6,$/;"	e	enum:__anon46
VTERM_KEY_KP_7	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_7,$/;"	e	enum:__anon46
VTERM_KEY_KP_8	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_8,$/;"	e	enum:__anon46
VTERM_KEY_KP_9	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_9,$/;"	e	enum:__anon46
VTERM_KEY_KP_COMMA	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_COMMA,$/;"	e	enum:__anon46
VTERM_KEY_KP_DIVIDE	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_DIVIDE,$/;"	e	enum:__anon46
VTERM_KEY_KP_ENTER	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_ENTER,$/;"	e	enum:__anon46
VTERM_KEY_KP_EQUAL	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_EQUAL,$/;"	e	enum:__anon46
VTERM_KEY_KP_MINUS	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_MINUS,$/;"	e	enum:__anon46
VTERM_KEY_KP_MULT	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_MULT,$/;"	e	enum:__anon46
VTERM_KEY_KP_PERIOD	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_PERIOD,$/;"	e	enum:__anon46
VTERM_KEY_KP_PLUS	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_KP_PLUS,$/;"	e	enum:__anon46
VTERM_KEY_LEFT	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_LEFT,$/;"	e	enum:__anon46
VTERM_KEY_MAX	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_MAX \/* Must be last *\/$/;"	e	enum:__anon46
VTERM_KEY_NONE	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_NONE,$/;"	e	enum:__anon46
VTERM_KEY_PAGEDOWN	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_PAGEDOWN,$/;"	e	enum:__anon46
VTERM_KEY_PAGEUP	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_PAGEUP,$/;"	e	enum:__anon46
VTERM_KEY_RIGHT	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_RIGHT,$/;"	e	enum:__anon46
VTERM_KEY_TAB	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_TAB,$/;"	e	enum:__anon46
VTERM_KEY_UP	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_KEY_UP,$/;"	e	enum:__anon46
VTERM_MAX_CHARS_PER_CELL	vim/vim/src/libvterm/include/vterm.h	287;"	d
VTERM_MOD_ALT	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_MOD_ALT   = 0x02,$/;"	e	enum:__anon45
VTERM_MOD_CTRL	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_MOD_CTRL  = 0x04$/;"	e	enum:__anon45
VTERM_MOD_NONE	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_MOD_NONE  = 0x00,$/;"	e	enum:__anon45
VTERM_MOD_SHIFT	vim/vim/src/libvterm/include/vterm_keycodes.h	/^  VTERM_MOD_SHIFT = 0x01,$/;"	e	enum:__anon45
VTERM_PROP_ALTSCREEN	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_ALTSCREEN,         \/* bool *\/$/;"	e	enum:__anon53
VTERM_PROP_CURSORBLINK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_CURSORBLINK,       \/* bool *\/$/;"	e	enum:__anon53
VTERM_PROP_CURSORSHAPE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_CURSORSHAPE,       \/* number *\/$/;"	e	enum:__anon53
VTERM_PROP_CURSORSHAPE_BAR_LEFT	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_CURSORSHAPE_BAR_LEFT$/;"	e	enum:__anon54
VTERM_PROP_CURSORSHAPE_BLOCK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_CURSORSHAPE_BLOCK = 1,$/;"	e	enum:__anon54
VTERM_PROP_CURSORSHAPE_UNDERLINE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_CURSORSHAPE_UNDERLINE,$/;"	e	enum:__anon54
VTERM_PROP_CURSORVISIBLE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_CURSORVISIBLE = 1, \/* bool *\/$/;"	e	enum:__anon53
VTERM_PROP_ICONNAME	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_ICONNAME,          \/* string *\/$/;"	e	enum:__anon53
VTERM_PROP_MOUSE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_MOUSE              \/* number *\/$/;"	e	enum:__anon53
VTERM_PROP_MOUSE_CLICK	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_MOUSE_CLICK,$/;"	e	enum:__anon55
VTERM_PROP_MOUSE_DRAG	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_MOUSE_DRAG,$/;"	e	enum:__anon55
VTERM_PROP_MOUSE_MOVE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_MOUSE_MOVE$/;"	e	enum:__anon55
VTERM_PROP_MOUSE_NONE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_MOUSE_NONE = 0,$/;"	e	enum:__anon55
VTERM_PROP_REVERSE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_REVERSE,           \/* bool *\/$/;"	e	enum:__anon53
VTERM_PROP_TITLE	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_PROP_TITLE,             \/* string *\/$/;"	e	enum:__anon53
VTERM_VALUETYPE_BOOL	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_VALUETYPE_BOOL = 1,$/;"	e	enum:__anon50
VTERM_VALUETYPE_COLOR	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_VALUETYPE_COLOR$/;"	e	enum:__anon50
VTERM_VALUETYPE_INT	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_VALUETYPE_INT,$/;"	e	enum:__anon50
VTERM_VALUETYPE_STRING	vim/vim/src/libvterm/include/vterm.h	/^  VTERM_VALUETYPE_STRING,$/;"	e	enum:__anon50
VTerm	vim/vim/src/libvterm/include/vterm.h	/^typedef struct VTerm VTerm;$/;"	t	typeref:struct:VTerm
VTerm	vim/vim/src/libvterm/src/vterm_internal.h	/^struct VTerm$/;"	s
VTerm::CSI	vim/vim/src/libvterm/src/vterm_internal.h	/^    CSI,$/;"	e	enum:VTerm::VTermParserState
VTerm::DCS	vim/vim/src/libvterm/src/vterm_internal.h	/^    DCS,$/;"	e	enum:VTerm::VTermParserState
VTerm::ESC	vim/vim/src/libvterm/src/vterm_internal.h	/^    ESC,$/;"	e	enum:VTerm::VTermParserState
VTerm::ESC_IN_DCS	vim/vim/src/libvterm/src/vterm_internal.h	/^    ESC_IN_DCS$/;"	e	enum:VTerm::VTermParserState
VTerm::ESC_IN_OSC	vim/vim/src/libvterm/src/vterm_internal.h	/^    ESC_IN_OSC,$/;"	e	enum:VTerm::VTermParserState
VTerm::NORMAL	vim/vim/src/libvterm/src/vterm_internal.h	/^    NORMAL,$/;"	e	enum:VTerm::VTermParserState
VTerm::OSC	vim/vim/src/libvterm/src/vterm_internal.h	/^    OSC,$/;"	e	enum:VTerm::VTermParserState
VTerm::VTermParserState	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum VTermParserState {$/;"	g	struct:VTerm	access:public
VTerm::__anon38::ctrl8bit	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int ctrl8bit:1;$/;"	m	struct:VTerm::__anon38	access:public
VTerm::__anon38::utf8	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int utf8:1;$/;"	m	struct:VTerm::__anon38	access:public
VTerm::allocator	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermAllocatorFunctions *allocator;$/;"	m	struct:VTerm	access:public
VTerm::allocdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *allocdata;$/;"	m	struct:VTerm	access:public
VTerm::cbdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *cbdata;$/;"	m	struct:VTerm	access:public
VTerm::cols	vim/vim/src/libvterm/src/vterm_internal.h	/^  int cols;$/;"	m	struct:VTerm	access:public
VTerm::mode	vim/vim/src/libvterm/src/vterm_internal.h	/^  } mode;$/;"	m	struct:VTerm	typeref:struct:VTerm::__anon38	access:public
VTerm::outbuffer	vim/vim/src/libvterm/src/vterm_internal.h	/^  char  *outbuffer;$/;"	m	struct:VTerm	access:public
VTerm::outbuffer_cur	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t outbuffer_cur;$/;"	m	struct:VTerm	access:public
VTerm::outbuffer_len	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t outbuffer_len;$/;"	m	struct:VTerm	access:public
VTerm::parser_callbacks	vim/vim/src/libvterm/src/vterm_internal.h	/^  const VTermParserCallbacks *parser_callbacks;$/;"	m	struct:VTerm	access:public
VTerm::parser_state	vim/vim/src/libvterm/src/vterm_internal.h	/^  } parser_state;$/;"	m	struct:VTerm	typeref:enum:VTerm::VTermParserState	access:public
VTerm::rows	vim/vim/src/libvterm/src/vterm_internal.h	/^  int rows;$/;"	m	struct:VTerm	access:public
VTerm::screen	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermScreen *screen;$/;"	m	struct:VTerm	access:public
VTerm::state	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermState *state;$/;"	m	struct:VTerm	access:public
VTerm::strbuffer	vim/vim/src/libvterm/src/vterm_internal.h	/^  char  *strbuffer;$/;"	m	struct:VTerm	access:public
VTerm::strbuffer_cur	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t strbuffer_cur;$/;"	m	struct:VTerm	access:public
VTerm::strbuffer_len	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t strbuffer_len;$/;"	m	struct:VTerm	access:public
VTermAllocatorFunctions	vim/vim/src/libvterm/include/vterm.h	/^} VTermAllocatorFunctions;$/;"	t	typeref:struct:__anon58
VTermAttr	vim/vim/src/libvterm/include/vterm.h	/^} VTermAttr;$/;"	t	typeref:enum:__anon52
VTermAttrMask	vim/vim/src/libvterm/include/vterm.h	/^} VTermAttrMask;$/;"	t	typeref:enum:__anon65
VTermColor	vim/vim/src/libvterm/include/vterm.h	/^} VTermColor;$/;"	t	typeref:struct:__anon49
VTermDamageSize	vim/vim/src/libvterm/include/vterm.h	/^} VTermDamageSize;$/;"	t	typeref:enum:__anon64
VTermEncoding	vim/vim/src/libvterm/src/vterm_internal.h	/^struct VTermEncoding {$/;"	s
VTermEncoding	vim/vim/src/libvterm/src/vterm_internal.h	/^typedef struct VTermEncoding VTermEncoding;$/;"	t	typeref:struct:VTermEncoding
VTermEncoding::decode	vim/vim/src/libvterm/src/vterm_internal.h	/^  void (*decode)(VTermEncoding *enc, void *data,$/;"	m	struct:VTermEncoding	access:public
VTermEncoding::init	vim/vim/src/libvterm/src/vterm_internal.h	/^  void (*init) (VTermEncoding *enc, void *data);$/;"	m	struct:VTermEncoding	access:public
VTermEncodingInstance	vim/vim/src/libvterm/src/vterm_internal.h	/^} VTermEncodingInstance;$/;"	t	typeref:struct:__anon33
VTermEncodingType	vim/vim/src/libvterm/src/vterm_internal.h	/^} VTermEncodingType;$/;"	t	typeref:enum:__anon39
VTermGlyphInfo	vim/vim/src/libvterm/include/vterm.h	/^} VTermGlyphInfo;$/;"	t	typeref:struct:__anon56
VTermKey	vim/vim/src/libvterm/include/vterm_keycodes.h	/^} VTermKey;$/;"	t	typeref:enum:__anon46
VTermLineInfo	vim/vim/src/libvterm/include/vterm.h	/^} VTermLineInfo;$/;"	t	typeref:struct:__anon57
VTermModifier	vim/vim/src/libvterm/include/vterm_keycodes.h	/^} VTermModifier;$/;"	t	typeref:enum:__anon45
VTermParserCallbacks	vim/vim/src/libvterm/include/vterm.h	/^} VTermParserCallbacks;$/;"	t	typeref:struct:__anon59
VTermParserState	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum VTermParserState {$/;"	g	struct:VTerm	access:public
VTermPen	vim/vim/src/libvterm/src/vterm_internal.h	/^struct VTermPen$/;"	s
VTermPen::bg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor bg;$/;"	m	struct:VTermPen	access:public
VTermPen::blink	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int blink:1;$/;"	m	struct:VTermPen	access:public
VTermPen::bold	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int bold:1;$/;"	m	struct:VTermPen	access:public
VTermPen::fg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor fg;$/;"	m	struct:VTermPen	access:public
VTermPen::font	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int font:4; \/* To store 0-9 *\/$/;"	m	struct:VTermPen	access:public
VTermPen::italic	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int italic:1;$/;"	m	struct:VTermPen	access:public
VTermPen::reverse	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int reverse:1;$/;"	m	struct:VTermPen	access:public
VTermPen::strike	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int strike:1;$/;"	m	struct:VTermPen	access:public
VTermPen::underline	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int underline:2;$/;"	m	struct:VTermPen	access:public
VTermPos	vim/vim/src/libvterm/include/vterm.h	/^} VTermPos;$/;"	t	typeref:struct:__anon47
VTermProp	vim/vim/src/libvterm/include/vterm.h	/^} VTermProp;$/;"	t	typeref:enum:__anon53
VTermRect	vim/vim/src/libvterm/include/vterm.h	/^} VTermRect;$/;"	t	typeref:struct:__anon48
VTermScreen	vim/vim/src/libvterm/include/vterm.h	/^typedef struct VTermScreen VTermScreen;$/;"	t	typeref:struct:VTermScreen
VTermScreen	vim/vim/src/libvterm/src/screen.c	/^struct VTermScreen$/;"	s	file:
VTermScreen::buffer	vim/vim/src/libvterm/src/screen.c	/^  ScreenCell *buffer;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::buffers	vim/vim/src/libvterm/src/screen.c	/^  ScreenCell *buffers[2];$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::callbacks	vim/vim/src/libvterm/src/screen.c	/^  const VTermScreenCallbacks *callbacks;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::cbdata	vim/vim/src/libvterm/src/screen.c	/^  void *cbdata;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::cols	vim/vim/src/libvterm/src/screen.c	/^  int cols;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::damage_merge	vim/vim/src/libvterm/src/screen.c	/^  VTermDamageSize damage_merge;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::damaged	vim/vim/src/libvterm/src/screen.c	/^  VTermRect damaged;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::global_reverse	vim/vim/src/libvterm/src/screen.c	/^  int global_reverse;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::pen	vim/vim/src/libvterm/src/screen.c	/^  ScreenPen pen;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::pending_scroll_downward	vim/vim/src/libvterm/src/screen.c	/^  int pending_scroll_downward, pending_scroll_rightward;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::pending_scroll_rightward	vim/vim/src/libvterm/src/screen.c	/^  int pending_scroll_downward, pending_scroll_rightward;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::pending_scrollrect	vim/vim/src/libvterm/src/screen.c	/^  VTermRect pending_scrollrect;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::rows	vim/vim/src/libvterm/src/screen.c	/^  int rows;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::sb_buffer	vim/vim/src/libvterm/src/screen.c	/^  VTermScreenCell *sb_buffer;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::state	vim/vim/src/libvterm/src/screen.c	/^  VTermState *state;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreen::vt	vim/vim/src/libvterm/src/screen.c	/^  VTerm *vt;$/;"	m	struct:VTermScreen	file:	access:public
VTermScreenCallbacks	vim/vim/src/libvterm/include/vterm.h	/^} VTermScreenCallbacks;$/;"	t	typeref:struct:__anon63
VTermScreenCell	vim/vim/src/libvterm/include/vterm.h	/^} VTermScreenCell;$/;"	t	typeref:struct:__anon62
VTermScreenCellAttrs	vim/vim/src/libvterm/include/vterm.h	/^} VTermScreenCellAttrs;$/;"	t	typeref:struct:__anon61
VTermState	vim/vim/src/libvterm/include/vterm.h	/^typedef struct VTermState VTermState;$/;"	t	typeref:struct:VTermState
VTermState	vim/vim/src/libvterm/src/vterm_internal.h	/^struct VTermState$/;"	s
VTermState::MOUSE_RXVT	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
VTermState::MOUSE_SGR	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
VTermState::MOUSE_UTF8	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
VTermState::MOUSE_X10	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	e	enum:VTermState::__anon34
VTermState::__anon35::alt_screen	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int alt_screen:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::autowrap	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int autowrap:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::bracketpaste	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int bracketpaste:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::cursor	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::cursor_blink	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor_blink:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::cursor_shape	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor_shape:2;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::cursor_visible	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor_visible:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::insert	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int insert:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::keypad	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int keypad:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::leftrightmargin	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int leftrightmargin:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::newline	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int newline:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::origin	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int origin:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon35::screen	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int screen:1;$/;"	m	struct:VTermState::__anon35	access:public
VTermState::__anon36::__anon37::cursor_blink	vim/vim/src/libvterm/src/vterm_internal.h	/^      int cursor_blink:1;$/;"	m	struct:VTermState::__anon36::__anon37	access:public
VTermState::__anon36::__anon37::cursor_shape	vim/vim/src/libvterm/src/vterm_internal.h	/^      unsigned int cursor_shape:2;$/;"	m	struct:VTermState::__anon36::__anon37	access:public
VTermState::__anon36::__anon37::cursor_visible	vim/vim/src/libvterm/src/vterm_internal.h	/^      int cursor_visible:1;$/;"	m	struct:VTermState::__anon36::__anon37	access:public
VTermState::__anon36::mode	vim/vim/src/libvterm/src/vterm_internal.h	/^    } mode;$/;"	m	struct:VTermState::__anon36	typeref:struct:VTermState::__anon36::__anon37	access:public
VTermState::__anon36::pen	vim/vim/src/libvterm/src/vterm_internal.h	/^    struct VTermPen pen;$/;"	m	struct:VTermState::__anon36	typeref:struct:VTermState::__anon36::VTermPen	access:public
VTermState::__anon36::pos	vim/vim/src/libvterm/src/vterm_internal.h	/^    VTermPos pos;$/;"	m	struct:VTermState::__anon36	access:public
VTermState::at_phantom	vim/vim/src/libvterm/src/vterm_internal.h	/^  int at_phantom; \/* True if we're on the "81st" phantom column to defer a wraparound *\/$/;"	m	struct:VTermState	access:public
VTermState::bg_index	vim/vim/src/libvterm/src/vterm_internal.h	/^  int bg_index;$/;"	m	struct:VTermState	access:public
VTermState::bold_is_highbright	vim/vim/src/libvterm/src/vterm_internal.h	/^  int bold_is_highbright;$/;"	m	struct:VTermState	access:public
VTermState::callbacks	vim/vim/src/libvterm/src/vterm_internal.h	/^  const VTermStateCallbacks *callbacks;$/;"	m	struct:VTermState	access:public
VTermState::cbdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *cbdata;$/;"	m	struct:VTermState	access:public
VTermState::colors	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor colors[16]; \/* Store the 8 ANSI and the 8 ANSI high-brights only *\/$/;"	m	struct:VTermState	access:public
VTermState::cols	vim/vim/src/libvterm/src/vterm_internal.h	/^  int cols;$/;"	m	struct:VTermState	access:public
VTermState::combine_chars	vim/vim/src/libvterm/src/vterm_internal.h	/^  uint32_t *combine_chars;$/;"	m	struct:VTermState	access:public
VTermState::combine_chars_size	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t combine_chars_size; \/* Number of ELEMENTS in the above *\/$/;"	m	struct:VTermState	access:public
VTermState::combine_pos	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermPos combine_pos;   \/* Position before movement *\/$/;"	m	struct:VTermState	access:public
VTermState::combine_width	vim/vim/src/libvterm/src/vterm_internal.h	/^  int combine_width; \/* The width of the glyph above *\/$/;"	m	struct:VTermState	access:public
VTermState::default_bg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor default_bg;$/;"	m	struct:VTermState	access:public
VTermState::default_fg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor default_fg;$/;"	m	struct:VTermState	access:public
VTermState::encoding	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermEncodingInstance encoding[4], encoding_utf8;$/;"	m	struct:VTermState	access:public
VTermState::encoding_utf8	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermEncodingInstance encoding[4], encoding_utf8;$/;"	m	struct:VTermState	access:public
VTermState::fallbacks	vim/vim/src/libvterm/src/vterm_internal.h	/^  const VTermParserCallbacks *fallbacks;$/;"	m	struct:VTermState	access:public
VTermState::fbdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *fbdata;$/;"	m	struct:VTermState	access:public
VTermState::fg_index	vim/vim/src/libvterm/src/vterm_internal.h	/^  int fg_index;$/;"	m	struct:VTermState	access:public
VTermState::gl_set	vim/vim/src/libvterm/src/vterm_internal.h	/^  int gl_set, gr_set, gsingle_set;$/;"	m	struct:VTermState	access:public
VTermState::gr_set	vim/vim/src/libvterm/src/vterm_internal.h	/^  int gl_set, gr_set, gsingle_set;$/;"	m	struct:VTermState	access:public
VTermState::gsingle_set	vim/vim/src/libvterm/src/vterm_internal.h	/^  int gl_set, gr_set, gsingle_set;$/;"	m	struct:VTermState	access:public
VTermState::lineinfo	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermLineInfo *lineinfo;$/;"	m	struct:VTermState	access:public
VTermState::mode	vim/vim/src/libvterm/src/vterm_internal.h	/^  } mode;$/;"	m	struct:VTermState	typeref:struct:VTermState::__anon35	access:public
VTermState::mouse_buttons	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_buttons;$/;"	m	struct:VTermState	access:public
VTermState::mouse_col	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_col, mouse_row;$/;"	m	struct:VTermState	access:public
VTermState::mouse_flags	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_flags;$/;"	m	struct:VTermState	access:public
VTermState::mouse_protocol	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	m	struct:VTermState	typeref:enum:VTermState::__anon34	access:public
VTermState::mouse_row	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_col, mouse_row;$/;"	m	struct:VTermState	access:public
VTermState::pen	vim/vim/src/libvterm/src/vterm_internal.h	/^  struct VTermPen pen;$/;"	m	struct:VTermState	typeref:struct:VTermState::VTermPen	access:public
VTermState::pos	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermPos pos;$/;"	m	struct:VTermState	access:public
VTermState::protected_cell	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int protected_cell : 1;$/;"	m	struct:VTermState	access:public
VTermState::rows	vim/vim/src/libvterm/src/vterm_internal.h	/^  int rows;$/;"	m	struct:VTermState	access:public
VTermState::saved	vim/vim/src/libvterm/src/vterm_internal.h	/^  } saved;$/;"	m	struct:VTermState	typeref:struct:VTermState::__anon36	access:public
VTermState::scrollregion_bottom	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_bottom; \/* -1 means unbounded *\/$/;"	m	struct:VTermState	access:public
VTermState::scrollregion_left	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_left;$/;"	m	struct:VTermState	access:public
VTermState::scrollregion_right	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_right; \/* -1 means unbounded *\/$/;"	m	struct:VTermState	access:public
VTermState::scrollregion_top	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_top;$/;"	m	struct:VTermState	access:public
VTermState::tabstops	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned char *tabstops;$/;"	m	struct:VTermState	access:public
VTermState::vt	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTerm *vt;$/;"	m	struct:VTermState	access:public
VTermStateCallbacks	vim/vim/src/libvterm/include/vterm.h	/^} VTermStateCallbacks;$/;"	t	typeref:struct:__anon60
VTermValue	vim/vim/src/libvterm/include/vterm.h	/^} VTermValue;$/;"	t	typeref:union:__anon51
VTermValueType	vim/vim/src/libvterm/include/vterm.h	/^} VTermValueType;$/;"	t	typeref:enum:__anon50
VVAL_FALSE	vim/vim/src/vim.h	2013;"	d
VVAL_NONE	vim/vim/src/vim.h	2015;"	d
VVAL_NULL	vim/vim/src/vim.h	2016;"	d
VVAL_TRUE	vim/vim/src/vim.h	2014;"	d
VV_BEVAL_BUFNR	vim/vim/src/vim.h	1968;"	d
VV_BEVAL_COL	vim/vim/src/vim.h	1972;"	d
VV_BEVAL_LNUM	vim/vim/src/vim.h	1971;"	d
VV_BEVAL_TEXT	vim/vim/src/vim.h	1973;"	d
VV_BEVAL_WINID	vim/vim/src/vim.h	1970;"	d
VV_BEVAL_WINNR	vim/vim/src/vim.h	1969;"	d
VV_CC_FROM	vim/vim/src/vim.h	1944;"	d
VV_CC_TO	vim/vim/src/vim.h	1945;"	d
VV_CHAR	vim/vim/src/vim.h	1978;"	d
VV_CMDARG	vim/vim/src/vim.h	1950;"	d
VV_CMDBANG	vim/vim/src/vim.h	1961;"	d
VV_COMPAT	vim/vim/src/eval.c	92;"	d	file:
VV_COMPLETED_ITEM	vim/vim/src/vim.h	1989;"	d
VV_COUNT	vim/vim/src/vim.h	1929;"	d
VV_COUNT1	vim/vim/src/vim.h	1930;"	d
VV_CTYPE	vim/vim/src/vim.h	1943;"	d
VV_DYING	vim/vim/src/vim.h	1957;"	d
VV_ERRMSG	vim/vim/src/vim.h	1932;"	d
VV_ERRORS	vim/vim/src/vim.h	1993;"	d
VV_EXCEPTION	vim/vim/src/vim.h	1958;"	d
VV_FALSE	vim/vim/src/vim.h	1994;"	d
VV_FCS_CHOICE	vim/vim/src/vim.h	1967;"	d
VV_FCS_REASON	vim/vim/src/vim.h	1966;"	d
VV_FNAME	vim/vim/src/vim.h	1940;"	d
VV_FNAME_DIFF	vim/vim/src/vim.h	1949;"	d
VV_FNAME_IN	vim/vim/src/vim.h	1946;"	d
VV_FNAME_NEW	vim/vim/src/vim.h	1948;"	d
VV_FNAME_OUT	vim/vim/src/vim.h	1947;"	d
VV_FOLDDASHES	vim/vim/src/vim.h	1953;"	d
VV_FOLDEND	vim/vim/src/vim.h	1952;"	d
VV_FOLDLEVEL	vim/vim/src/vim.h	1954;"	d
VV_FOLDSTART	vim/vim/src/vim.h	1951;"	d
VV_HLSEARCH	vim/vim/src/vim.h	1985;"	d
VV_INSERTMODE	vim/vim/src/vim.h	1962;"	d
VV_KEY	vim/vim/src/vim.h	1964;"	d
VV_LANG	vim/vim/src/vim.h	1941;"	d
VV_LC_TIME	vim/vim/src/vim.h	1942;"	d
VV_LEN	vim/vim/src/vim.h	2010;"	d
VV_LNUM	vim/vim/src/vim.h	1938;"	d
VV_MOUSE_COL	vim/vim/src/vim.h	1982;"	d
VV_MOUSE_LNUM	vim/vim/src/vim.h	1981;"	d
VV_MOUSE_WIN	vim/vim/src/vim.h	1979;"	d
VV_MOUSE_WINID	vim/vim/src/vim.h	1980;"	d
VV_NAME	vim/vim/src/eval.c	96;"	d	file:
VV_NONE	vim/vim/src/vim.h	1997;"	d
VV_NULL	vim/vim/src/vim.h	1996;"	d
VV_OLDFILES	vim/vim/src/vim.h	1986;"	d
VV_OP	vim/vim/src/vim.h	1983;"	d
VV_OPTION_NEW	vim/vim/src/vim.h	1990;"	d
VV_OPTION_OLD	vim/vim/src/vim.h	1991;"	d
VV_OPTION_TYPE	vim/vim/src/vim.h	1992;"	d
VV_PREVCOUNT	vim/vim/src/vim.h	1931;"	d
VV_PROFILING	vim/vim/src/vim.h	1965;"	d
VV_PROGNAME	vim/vim/src/vim.h	1955;"	d
VV_PROGPATH	vim/vim/src/vim.h	1988;"	d
VV_REG	vim/vim/src/vim.h	1960;"	d
VV_RO	vim/vim/src/eval.c	93;"	d	file:
VV_RO_SBX	vim/vim/src/eval.c	94;"	d	file:
VV_SCROLLSTART	vim/vim/src/vim.h	1974;"	d
VV_SEARCHFORWARD	vim/vim/src/vim.h	1984;"	d
VV_SEND_SERVER	vim/vim/src/vim.h	1956;"	d
VV_SHELL_ERROR	vim/vim/src/vim.h	1935;"	d
VV_STATUSMSG	vim/vim/src/vim.h	1934;"	d
VV_SWAPCHOICE	vim/vim/src/vim.h	1976;"	d
VV_SWAPCOMMAND	vim/vim/src/vim.h	1977;"	d
VV_SWAPNAME	vim/vim/src/vim.h	1975;"	d
VV_TERMRESPONSE	vim/vim/src/vim.h	1939;"	d
VV_TESTING	vim/vim/src/vim.h	1999;"	d
VV_THIS_SESSION	vim/vim/src/vim.h	1936;"	d
VV_THROWPOINT	vim/vim/src/vim.h	1959;"	d
VV_TRUE	vim/vim/src/vim.h	1995;"	d
VV_TYPE_BOOL	vim/vim/src/vim.h	2006;"	d
VV_TYPE_CHANNEL	vim/vim/src/vim.h	2009;"	d
VV_TYPE_DICT	vim/vim/src/vim.h	2004;"	d
VV_TYPE_FLOAT	vim/vim/src/vim.h	2005;"	d
VV_TYPE_FUNC	vim/vim/src/vim.h	2002;"	d
VV_TYPE_JOB	vim/vim/src/vim.h	2008;"	d
VV_TYPE_LIST	vim/vim/src/vim.h	2003;"	d
VV_TYPE_NONE	vim/vim/src/vim.h	2007;"	d
VV_TYPE_NUMBER	vim/vim/src/vim.h	2000;"	d
VV_TYPE_STRING	vim/vim/src/vim.h	2001;"	d
VV_VAL	vim/vim/src/vim.h	1963;"	d
VV_VERSION	vim/vim/src/vim.h	1937;"	d
VV_VIM_DID_ENTER	vim/vim/src/vim.h	1998;"	d
VV_WARNINGMSG	vim/vim/src/vim.h	1933;"	d
VV_WINDOWID	vim/vim/src/vim.h	1987;"	d
VW_POS_CENTER	vim/vim/src/gui.h	/^    VW_POS_CENTER,$/;"	e	enum:__anon152
VW_POS_MOUSE	vim/vim/src/gui.h	/^    VW_POS_MOUSE,$/;"	e	enum:__anon152
VW_POS_TOP_CENTER	vim/vim/src/gui.h	/^    VW_POS_TOP_CENTER$/;"	e	enum:__anon152
VerbSense	vim/vim/src/integration.h	/^} VerbSense;$/;"	t	typeref:struct:__anon66
Version	vim/vim/src/version.c	/^char		*Version = VIM_VERSION_SHORT;$/;"	v
Vim	vim/vim/src/if_ole.h	/^typedef class Vim Vim;$/;"	t
Vim	vim/vim/src/if_ole.h	/^typedef struct Vim Vim;$/;"	t	typeref:struct:Vim
VimChangeDir	vim/vim/src/VisVim/Commands.cpp	/^static void VimChangeDir(COleAutomationControl& VimOle, DISPID DispatchId, BSTR& FileName)$/;"	f	file:	signature:(COleAutomationControl& VimOle, DISPID DispatchId, BSTR& FileName)
VimChangeDir	vim/vim/src/VisVim/Commands.cpp	/^static void VimChangeDir(COleAutomationControl& VimOle, DISPID DispatchId, BSTR& FileName);$/;"	p	file:	signature:(COleAutomationControl& VimOle, DISPID DispatchId, BSTR& FileName)
VimChdir	vim/vim/src/if_py_both.h	/^VimChdir(PyObject *self UNUSED, PyObject *args, PyObject *kwargs)$/;"	f	signature:(PyObject *self UNUSED, PyObject *args, PyObject *kwargs)
VimCheckInterrupt	vim/vim/src/if_py_both.h	/^VimCheckInterrupt(void)$/;"	f	signature:(void)
VimClipType_t	vim/vim/src/winclip.c	/^} VimClipType_t;$/;"	t	typeref:struct:__anon22	file:
VimClipboard	vim/vim/src/vim.h	/^typedef int VimClipboard;	\/* This is required for the prototypes. *\/$/;"	t
VimClipboard	vim/vim/src/vim.h	/^typedef struct VimClipboard$/;"	s
VimClipboard	vim/vim/src/vim.h	/^} VimClipboard;$/;"	t	typeref:struct:VimClipboard
VimClipboard::available	vim/vim/src/vim.h	/^    int		available;	\/* Is clipboard available? *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::end	vim/vim/src/vim.h	/^    pos_T	end;		\/* End of selected area *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::format	vim/vim/src/vim.h	/^    int_u	format;		\/* Vim's own special clipboard format *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::format_raw	vim/vim/src/vim.h	/^    int_u	format_raw;	\/* Vim's raw text clipboard format *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::gtk_sel_atom	vim/vim/src/vim.h	/^    GdkAtom     gtk_sel_atom;	\/* PRIMARY\/CLIPBOARD selection ID *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::mode	vim/vim/src/vim.h	/^    short_u	mode;		\/* Select by char, word, or line. *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::origin_end_col	vim/vim/src/vim.h	/^    short_u	origin_end_col;$/;"	m	struct:VimClipboard	access:public
VimClipboard::origin_row	vim/vim/src/vim.h	/^    short_u	origin_row;$/;"	m	struct:VimClipboard	access:public
VimClipboard::origin_start_col	vim/vim/src/vim.h	/^    short_u	origin_start_col;$/;"	m	struct:VimClipboard	access:public
VimClipboard::owned	vim/vim/src/vim.h	/^    int		owned;		\/* Flag: do we own the selection? *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::prev	vim/vim/src/vim.h	/^    pos_T	prev;		\/* Previous position *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::sel_atom	vim/vim/src/vim.h	/^    Atom	sel_atom;	\/* PRIMARY\/CLIPBOARD selection ID *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::start	vim/vim/src/vim.h	/^    pos_T	start;		\/* Start of selected area *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::state	vim/vim/src/vim.h	/^    short_u	state;		\/* Current selection state *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::vmode	vim/vim/src/vim.h	/^    int		vmode;		\/* Visual mode character *\/$/;"	m	struct:VimClipboard	access:public
VimClipboard::word_end_col	vim/vim/src/vim.h	/^    short_u	word_end_col;$/;"	m	struct:VimClipboard	access:public
VimClipboard::word_start_col	vim/vim/src/vim.h	/^    short_u	word_start_col;$/;"	m	struct:VimClipboard	access:public
VimCommand	vim/vim/src/if_py_both.h	/^VimCommand(PyObject *self UNUSED, PyObject *string)$/;"	f	signature:(PyObject *self UNUSED, PyObject *string)
VimErrDiag	vim/vim/src/VisVim/Commands.cpp	/^static void VimErrDiag(COleAutomationControl& VimOle)$/;"	f	file:	signature:(COleAutomationControl& VimOle)
VimErrDiag	vim/vim/src/VisVim/Commands.cpp	/^static void VimErrDiag(COleAutomationControl& VimOle);$/;"	p	file:	signature:(COleAutomationControl& VimOle)
VimError	vim/vim/src/if_py_both.h	/^static PyObject *VimError;$/;"	v
VimEval	vim/vim/src/if_py_both.h	/^VimEval(PyObject *self UNUSED, PyObject *args)$/;"	f	signature:(PyObject *self UNUSED, PyObject *args)
VimEvalPy	vim/vim/src/if_py_both.h	/^VimEvalPy(PyObject *self UNUSED, PyObject *string)$/;"	f	signature:(PyObject *self UNUSED, PyObject *string)
VimFchdir	vim/vim/src/if_py_both.h	/^VimFchdir(PyObject *self UNUSED, PyObject *args, PyObject *kwargs)$/;"	f	signature:(PyObject *self UNUSED, PyObject *args, PyObject *kwargs)
VimForeachRTP	vim/vim/src/if_py_both.h	/^VimForeachRTP(PyObject *self UNUSED, PyObject *callable)$/;"	f	signature:(PyObject *self UNUSED, PyObject *callable)
VimGetDispatchId	vim/vim/src/VisVim/Commands.cpp	/^static DISPID VimGetDispatchId(COleAutomationControl& VimOle, char* Method)$/;"	f	file:	signature:(COleAutomationControl& VimOle, char* Method)
VimGetDispatchId	vim/vim/src/VisVim/Commands.cpp	/^static DISPID VimGetDispatchId(COleAutomationControl& VimOle, char* Method);$/;"	p	file:	signature:(COleAutomationControl& VimOle, char* Method)
VimMain	vim/vim/src/main.c	/^VimMain$/;"	f	signature:(int argc, char **argv)
VimMain	vim/vim/src/os_w32exe.c	/^VimMain$/;"	p	file:	signature:(int argc, char **argv)
VimMenu	vim/vim/src/structs.h	/^struct VimMenu$/;"	s
VimMenu::actext	vim/vim/src/structs.h	/^    char_u	*actext;	    \/* accelerator text (after TAB) *\/$/;"	m	struct:VimMenu	access:public
VimMenu::cb	vim/vim/src/structs.h	/^    void	(*cb)(vimmenu_T *);	    \/* Call-back routine *\/$/;"	m	struct:VimMenu	access:public
VimMenu::children	vim/vim/src/structs.h	/^    vimmenu_T	*children;	    \/* Children of sub-menu *\/$/;"	m	struct:VimMenu	access:public
VimMenu::dname	vim/vim/src/structs.h	/^    char_u	*dname;		    \/* Displayed Name ("name" without '&') *\/$/;"	m	struct:VimMenu	access:public
VimMenu::en_dname	vim/vim/src/structs.h	/^    char_u	*en_dname;	    \/* "dname" untranslated, NULL when "dname"$/;"	m	struct:VimMenu	access:public
VimMenu::en_name	vim/vim/src/structs.h	/^    char_u	*en_name;	    \/* "name" untranslated, NULL when "name"$/;"	m	struct:VimMenu	access:public
VimMenu::enabled	vim/vim/src/structs.h	/^    int		enabled;	    \/* for which modes the menu is enabled *\/$/;"	m	struct:VimMenu	access:public
VimMenu::icon_builtin	vim/vim/src/structs.h	/^    int		icon_builtin;	    \/* icon names is BuiltIn{nr} *\/$/;"	m	struct:VimMenu	access:public
VimMenu::iconfile	vim/vim/src/structs.h	/^    char_u	*iconfile;	    \/* name of file for icon or NULL *\/$/;"	m	struct:VimMenu	access:public
VimMenu::iconidx	vim/vim/src/structs.h	/^    int		iconidx;	    \/* icon index (-1 if not set) *\/$/;"	m	struct:VimMenu	access:public
VimMenu::id	vim/vim/src/structs.h	/^    GtkWidget	*id;		    \/* Manage this to enable item *\/$/;"	m	struct:VimMenu	access:public
VimMenu::id	vim/vim/src/structs.h	/^    PtWidget_t	*id;$/;"	m	struct:VimMenu	access:public
VimMenu::id	vim/vim/src/structs.h	/^    UINT	id;		    \/* Id of menu item *\/$/;"	m	struct:VimMenu	access:public
VimMenu::id	vim/vim/src/structs.h	/^    Widget	id;		    \/* Manage this to enable item *\/$/;"	m	struct:VimMenu	access:public
VimMenu::image	vim/vim/src/structs.h	/^    Pixmap	image;		    \/* Toolbar image *\/$/;"	m	struct:VimMenu	access:public
VimMenu::label	vim/vim/src/structs.h	/^    GtkWidget   *label;		    \/* Used by "set wak=" code. *\/$/;"	m	struct:VimMenu	access:public
VimMenu::menu_handle	vim/vim/src/structs.h	/^    MenuHandle	menu_handle;$/;"	m	struct:VimMenu	access:public
VimMenu::menu_id	vim/vim/src/structs.h	/^    short	menu_id;	    \/* the menu id to which this item belong *\/$/;"	m	struct:VimMenu	access:public
VimMenu::mnemonic	vim/vim/src/structs.h	/^    int		mnemonic;	    \/* mnemonic key (after '&') *\/$/;"	m	struct:VimMenu	access:public
VimMenu::modes	vim/vim/src/structs.h	/^    int		modes;		    \/* Which modes is this menu visible for? *\/$/;"	m	struct:VimMenu	access:public
VimMenu::name	vim/vim/src/structs.h	/^    char_u	*name;		    \/* Name of menu, possibly translated *\/$/;"	m	struct:VimMenu	access:public
VimMenu::next	vim/vim/src/structs.h	/^    vimmenu_T	*next;		    \/* Next item in menu *\/$/;"	m	struct:VimMenu	access:public
VimMenu::noremap	vim/vim/src/structs.h	/^    int		noremap[MENU_MODES]; \/* A REMAP_ flag for each mode *\/$/;"	m	struct:VimMenu	access:public
VimMenu::parent	vim/vim/src/structs.h	/^    vimmenu_T	*parent;	    \/* Parent of menu *\/$/;"	m	struct:VimMenu	access:public
VimMenu::priority	vim/vim/src/structs.h	/^    int		priority;	    \/* Menu order priority *\/$/;"	m	struct:VimMenu	access:public
VimMenu::sensitive	vim/vim/src/structs.h	/^    int		sensitive;	    \/* turn button on\/off *\/$/;"	m	struct:VimMenu	access:public
VimMenu::silent	vim/vim/src/structs.h	/^    char	silent[MENU_MODES]; \/* A silent flag for each mode *\/$/;"	m	struct:VimMenu	access:public
VimMenu::strings	vim/vim/src/structs.h	/^    char_u	*strings[MENU_MODES]; \/* Mapped string for each mode *\/$/;"	m	struct:VimMenu	access:public
VimMenu::submenu_handle	vim/vim/src/structs.h	/^    MenuHandle	submenu_handle;$/;"	m	struct:VimMenu	access:public
VimMenu::submenu_id	vim/vim/src/structs.h	/^    GtkWidget	*submenu_id;	    \/* If this is submenu, add children here *\/$/;"	m	struct:VimMenu	access:public
VimMenu::submenu_id	vim/vim/src/structs.h	/^    HMENU	submenu_id;	    \/* If this is submenu, add children here *\/$/;"	m	struct:VimMenu	access:public
VimMenu::submenu_id	vim/vim/src/structs.h	/^    PtWidget_t	*submenu_id;$/;"	m	struct:VimMenu	access:public
VimMenu::submenu_id	vim/vim/src/structs.h	/^    Widget	submenu_id;	    \/* If this is submenu, add children here *\/$/;"	m	struct:VimMenu	access:public
VimMenu::submenu_id	vim/vim/src/structs.h	/^    short	submenu_id;	    \/* the menu id of the children (could be$/;"	m	struct:VimMenu	access:public
VimMenu::tearoff_handle	vim/vim/src/structs.h	/^    GtkWidget	*tearoff_handle;$/;"	m	struct:VimMenu	access:public
VimMenu::tearoff_handle	vim/vim/src/structs.h	/^    HWND	tearoff_handle;	    \/* hWnd of tearoff if created *\/$/;"	m	struct:VimMenu	access:public
VimMenu::tip	vim/vim/src/structs.h	/^    BalloonEval *tip;		    \/* tooltip for this menu item *\/$/;"	m	struct:VimMenu	access:public
VimMenu::xpm	vim/vim/src/structs.h	/^    char	**xpm;		    \/* pixmap data *\/$/;"	m	struct:VimMenu	access:public
VimMenu::xpm_fname	vim/vim/src/structs.h	/^    char	*xpm_fname;	    \/* file with pixmap data *\/$/;"	m	struct:VimMenu	access:public
VimMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef VimMethods[] = {$/;"	v	typeref:struct:PyMethodDef
VimOpenFile	vim/vim/src/VisVim/Commands.cpp	/^static BOOL VimOpenFile(BSTR& FileName, long LineNr)$/;"	f	file:	signature:(BSTR& FileName, long LineNr)
VimOpenFile	vim/vim/src/VisVim/Commands.cpp	/^static BOOL VimOpenFile(BSTR& FileName, long LineNr);$/;"	p	file:	signature:(BSTR& FileName, long LineNr)
VimPathHook	vim/vim/src/if_py_both.h	/^VimPathHook(PyObject *self UNUSED, PyObject *args)$/;"	f	signature:(PyObject *self UNUSED, PyObject *args)
VimPathHook	vim/vim/src/if_python3.c	/^static PyObject *VimPathHook(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
VimSetEnableState	vim/vim/src/VisVim/Commands.cpp	/^static void VimSetEnableState(BOOL bEnableState)$/;"	f	file:	signature:(BOOL bEnableState)
VimSetEnableState	vim/vim/src/VisVim/Commands.cpp	/^static void VimSetEnableState(BOOL bEnableState);$/;"	p	file:	signature:(BOOL bEnableState)
VimStrwidth	vim/vim/src/if_py_both.h	/^VimStrwidth(PyObject *self UNUSED, PyObject *string)$/;"	f	signature:(PyObject *self UNUSED, PyObject *string)
VimToPython	vim/vim/src/if_py_both.h	/^VimToPython(typval_T *our_tv, int depth, PyObject *lookup_dict)$/;"	f	signature:(typval_T *our_tv, int depth, PyObject *lookup_dict)
VimTryEnd	vim/vim/src/if_py_both.h	/^VimTryEnd(void)$/;"	f	signature:(void)
VimTryStart	vim/vim/src/if_py_both.h	/^VimTryStart(void)$/;"	f	signature:(void)
VimWindow	vim/vim/src/gui.h	/^    WindowPtr	VimWindow;$/;"	m	struct:Gui	access:public
Vim_GetPaths	vim/vim/src/if_py_both.h	/^Vim_GetPaths(PyObject *self UNUSED)$/;"	f	signature:(PyObject *self UNUSED)
Vim_Prim	vim/vim/src/if_mzsch.c	/^} Vim_Prim;$/;"	t	typeref:struct:__anon9	file:
VirtKeyMap	vim/vim/src/os_win32.c	/^} VirtKeyMap[] =$/;"	v	typeref:struct:__anon211	file:
VisVimDialog	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimDialog()$/;"	f	class:CCommands	signature:()
VisVimDisable	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimDisable()$/;"	f	class:CCommands	signature:()
VisVimEnable	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimEnable()$/;"	f	class:CCommands	signature:()
VisVimLoad	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimLoad()$/;"	f	class:CCommands	signature:()
VisVimToggle	vim/vim/src/VisVim/Commands.cpp	/^STDMETHODIMP CCommands::VisVimToggle()$/;"	f	class:CCommands	signature:()
Visual	vim/vim/src/xpm/include/simx.h	/^typedef void *Visual;			\/* not used yet, is for GRAY, COLOR,$/;"	t
WANT_X11	vim/vim/src/feature.h	1020;"	d
WARGCOUNT	vim/vim/src/structs.h	742;"	d
WARGLIST	vim/vim/src/structs.h	738;"	d
WAS_BANNED	vim/vim/src/spell.c	147;"	d	file:
WAW	vim/vim/src/farsi.h	140;"	d
WAW_H	vim/vim/src/farsi.h	167;"	d
WCHAR	vim/vim/src/gui_w32.c	/^typedef int WCHAR;$/;"	t	file:
WCHAR	vim/vim/src/os_mswin.c	/^typedef int WCHAR;$/;"	t	file:
WCHAR	vim/vim/src/os_win32.c	/^typedef int WCHAR;$/;"	t	file:
WC_KEY_OFF	vim/vim/src/spell.c	107;"	d	file:
WEXITSTATUS	vim/vim/src/os_unixx.h	33;"	d
WEXITSTATUS	vim/vim/src/os_unixx.h	35;"	d
WFP_COMPFORBID	vim/vim/src/spell.h	176;"	d
WFP_COMPPERMIT	vim/vim/src/spell.h	175;"	d
WFP_NC	vim/vim/src/spell.h	173;"	d
WFP_RARE	vim/vim/src/spell.h	172;"	d
WFP_UP	vim/vim/src/spell.h	174;"	d
WF_AFX	vim/vim/src/spell.h	159;"	d
WF_ALLCAP	vim/vim/src/spell.h	156;"	d
WF_BANNED	vim/vim/src/spell.h	158;"	d
WF_CAPMASK	vim/vim/src/spell.c	86;"	d	file:
WF_COMPROOT	vim/vim/src/spell.h	167;"	d
WF_FIXCAP	vim/vim/src/spell.h	160;"	d
WF_HAS_AFF	vim/vim/src/spell.h	164;"	d
WF_KEEPCAP	vim/vim/src/spell.h	161;"	d
WF_MIXCAP	vim/vim/src/spell.c	84;"	d	file:
WF_NEEDCOMP	vim/vim/src/spell.h	165;"	d
WF_NOCOMPAFT	vim/vim/src/spell.h	169;"	d
WF_NOCOMPBEF	vim/vim/src/spell.h	168;"	d
WF_NOSUGGEST	vim/vim/src/spell.h	166;"	d
WF_ONECAP	vim/vim/src/spell.h	155;"	d
WF_PFX_COMPFORBID	vim/vim/src/spell.h	185;"	d
WF_PFX_COMPPERMIT	vim/vim/src/spell.h	183;"	d
WF_PFX_NC	vim/vim/src/spell.h	181;"	d
WF_PFX_UP	vim/vim/src/spell.h	182;"	d
WF_RARE	vim/vim/src/spell.h	157;"	d
WF_RAREPFX	vim/vim/src/spell.h	180;"	d
WF_REGION	vim/vim/src/spell.h	154;"	d
WHITE	vim/vim/src/regexp.c	195;"	d	file:
WHITECHAR	vim/vim/src/edit.c	6023;"	d	file:
WHITECHAR	vim/vim/src/edit.c	6025;"	d	file:
WHOLEFOLD	vim/vim/src/ex_cmds.h	39;"	d
WIFEXITED	vim/vim/src/os_unixx.h	41;"	d
WIFEXITED	vim/vim/src/os_unixx.h	43;"	d
WILDCHAR_LIST	vim/vim/src/os_mac.h	242;"	d
WILD_ADD_SLASH	vim/vim/src/vim.h	830;"	d
WILD_ALL	vim/vim/src/vim.h	822;"	d
WILD_ALLLINKS	vim/vim/src/vim.h	835;"	d
WILD_ALL_KEEP	vim/vim/src/vim.h	824;"	d
WILD_ESCAPE	vim/vim/src/vim.h	833;"	d
WILD_EXPAND_FREE	vim/vim/src/vim.h	818;"	d
WILD_EXPAND_KEEP	vim/vim/src/vim.h	819;"	d
WILD_FREE	vim/vim/src/vim.h	817;"	d
WILD_HOME_REPLACE	vim/vim/src/vim.h	827;"	d
WILD_ICASE	vim/vim/src/vim.h	834;"	d
WILD_KEEP_ALL	vim/vim/src/vim.h	831;"	d
WILD_LIST_NOTFOUND	vim/vim/src/vim.h	826;"	d
WILD_LONGEST	vim/vim/src/vim.h	823;"	d
WILD_NEXT	vim/vim/src/vim.h	820;"	d
WILD_NO_BEEP	vim/vim/src/vim.h	829;"	d
WILD_PREV	vim/vim/src/vim.h	821;"	d
WILD_SILENT	vim/vim/src/vim.h	832;"	d
WILD_USE_NL	vim/vim/src/vim.h	828;"	d
WIM_FULL	vim/vim/src/option.h	294;"	d
WIM_LIST	vim/vim/src/option.h	296;"	d
WIM_LONGEST	vim/vim/src/option.h	295;"	d
WIN32	vim/vim/src/mbyte.c	94;"	d	file:
WIN3264	vim/vim/src/dosinst.h	34;"	d
WIN3264	vim/vim/src/vim.h	146;"	d
WIN3264	vim/vim/src/winclip.c	25;"	d	file:
WIN32UNIX	vim/vim/src/os_unix.h	37;"	d
WIN32_LEAN_AND_MEAN	vim/vim/src/glbl_ime.cpp	38;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/gui_dwrite.cpp	12;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/if_cscope.h	16;"	d
WIN32_LEAN_AND_MEAN	vim/vim/src/mbyte.c	84;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/os_unix.c	73;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/os_w32dll.c	16;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/ui.c	22;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/vimrun.c	22;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/winclip.c	26;"	d	file:
WIN32_LEAN_AND_MEAN	vim/vim/src/xpm_w32.c	13;"	d	file:
WINAPI	vim/vim/src/gui_w32.c	/^typedef int WINAPI;$/;"	t	file:
WINAPI	vim/vim/src/gui_w32.c	4104;"	d	file:
WINAPI	vim/vim/src/os_mswin.c	80;"	d	file:
WINAPI	vim/vim/src/os_win32.c	97;"	d	file:
WINAPI	vim/vim/src/winclip.c	36;"	d	file:
WINBASEAPI	vim/vim/src/os_mswin.c	81;"	d	file:
WINBASEAPI	vim/vim/src/winclip.c	37;"	d	file:
WINBYTE	vim/vim/src/mbyte.c	88;"	d	file:
WINBYTE	vim/vim/src/mbyte.c	91;"	d	file:
WINBYTE	vim/vim/src/mbyte.c	97;"	d	file:
WINDOW_REF	vim/vim/src/if_mzsch.c	257;"	d	file:
WINDOW_REF	vim/vim/src/if_mzsch.c	260;"	d	file:
WINDRES	vim/vim/src/GvimExt/Make_ming.mak	/^WINDRES := $(CROSS_COMPILE)windres$/;"	m
WINDRES	vim/vim/src/Make_cyg_ming.mak	/^WINDRES := $(CROSS_COMPILE)windres$/;"	m
WINDRES	vim/vim/src/Make_cyg_ming.mak	/^WINDRES := windres$/;"	m
WINDRES_CC	vim/vim/src/Make_cyg_ming.mak	/^WINDRES_CC = $(CC)$/;"	m
WINDRES_CXX	vim/vim/src/GvimExt/Make_ming.mak	/^WINDRES_CXX = $(CXX)$/;"	m
WINDRES_FLAGS	vim/vim/src/GvimExt/Make_ming.mak	/^WINDRES_FLAGS = --preprocessor="$(WINDRES_CXX) -E -xc" -DRC_INVOKED$/;"	m
WINDRES_FLAGS	vim/vim/src/Make_cyg_ming.mak	/^WINDRES_FLAGS = --preprocessor="$(WINDRES_CC) -E -xc" -DRC_INVOKED$/;"	m
WINNT_RESERVE_BYTES	vim/vim/src/os_win32.c	6181;"	d	file:
WINPTY_DLL	vim/vim/src/terminal.c	1091;"	d	file:
WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN	vim/vim/src/terminal.c	1069;"	d	file:
WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN	vim/vim/src/terminal.c	1070;"	d	file:
WINVER	vim/vim/src/GvimExt/Make_ming.mak	/^WINVER = 0x0501$/;"	m
WINVER	vim/vim/src/Make_bc5.mak	/^WINVER = 0x0400$/;"	m
WINVER	vim/vim/src/Make_cyg_ming.mak	/^WINVER = 0x0501$/;"	m
WINVER	vim/vim/src/Make_mvc.mak	/^WINVER = 0x0501$/;"	m
WIN_HOR	vim/vim/src/structs.h	3263;"	d
WIN_PYTHON_REF	vim/vim/src/if_python.c	786;"	d	file:
WIN_PYTHON_REF	vim/vim/src/if_python3.c	741;"	d	file:
WIN_TABS	vim/vim/src/structs.h	3265;"	d
WIN_VER	vim/vim/src/structs.h	3264;"	d
WITH_NL	vim/vim/src/regexp.c	214;"	d	file:
WITH_OFF	vim/vim/src/screen.c	10816;"	d	file:
WITH_WIDTH	vim/vim/src/screen.c	10817;"	d	file:
WL_BRI	vim/vim/src/screen.c	3154;"	d	file:
WL_CMDLINE	vim/vim/src/screen.c	3138;"	d	file:
WL_FOLD	vim/vim/src/screen.c	3143;"	d	file:
WL_LINE	vim/vim/src/screen.c	3163;"	d	file:
WL_NR	vim/vim/src/screen.c	3152;"	d	file:
WL_SBR	vim/vim/src/screen.c	3159;"	d	file:
WL_SIGN	vim/vim/src/screen.c	3148;"	d	file:
WL_START	vim/vim/src/screen.c	3136;"	d	file:
WM_MOUSEWHEEL	vim/vim/src/gui_w32.c	4228;"	d	file:
WM_OLE	vim/vim/src/vim.h	2049;"	d
WM_SCROLLED	vim/vim/src/globals.h	1136;"	d
WM_SHOWN	vim/vim/src/globals.h	1135;"	d
WM_XBUTTONDBLCLK	vim/vim/src/gui_w32.c	235;"	d	file:
WM_XBUTTONDOWN	vim/vim/src/gui_w32.c	233;"	d	file:
WM_XBUTTONUP	vim/vim/src/gui_w32.c	234;"	d	file:
WNDPROC	vim/vim/src/gui_w32.c	/^typedef int WNDPROC;$/;"	t	file:
WN_MASK	vim/vim/src/spellfile.c	1911;"	d	file:
WORD	vim/vim/src/gui_w32.c	/^typedef int WORD;$/;"	t	file:
WORD	vim/vim/src/os_mswin.c	/^typedef int WORD;$/;"	t	file:
WORD	vim/vim/src/os_win32.c	/^typedef int WORD;$/;"	t	file:
WORD	vim/vim/src/regexp.c	203;"	d	file:
WORD1	vim/vim/src/ex_cmds.h	60;"	d
WORKDIR	vim/vim/src/dosinst.c	1789;"	d	file:
WORKSHOP_H	vim/vim/src/workshop.h	11;"	d
WORKSHOP_OBJ	vim/vim/src/auto/config.mk	/^WORKSHOP_OBJ	= $/;"	m
WORKSHOP_SRC	vim/vim/src/auto/config.mk	/^WORKSHOP_SRC	= $/;"	m
WORST	vim/vim/src/regexp.c	400;"	d	file:
WP64CHECK	vim/vim/src/Make_mvc.mak	/^WP64CHECK = \/Wp64$/;"	m
WPARAM	vim/vim/src/gui_w32.c	/^typedef int WPARAM;$/;"	t	file:
WPARAM	vim/vim/src/os_mswin.c	/^typedef int WPARAM;$/;"	t	file:
WPF_RESTORETOMAXIMIZED	vim/vim/src/gui_w32.c	3364;"	d	file:
WRITEBIN	vim/vim/src/vim.h	1559;"	d
WRITEBIN	vim/vim/src/vim.h	1563;"	d
WSDEBUG_H	vim/vim/src/wsdebug.h	12;"	d
WSDEBUG_TRACE	vim/vim/src/wsdebug.h	37;"	d
WSDLEVEL	vim/vim/src/wsdebug.h	31;"	d
WSInitialized	vim/vim/src/os_mswin.c	/^int WSInitialized = FALSE; \/* WinSock is initialized *\/$/;"	v
WSP_ABOVE	vim/vim/src/vim.h	1224;"	d
WSP_BELOW	vim/vim/src/vim.h	1223;"	d
WSP_BOT	vim/vim/src/vim.h	1221;"	d
WSP_HELP	vim/vim/src/vim.h	1222;"	d
WSP_NEWLOC	vim/vim/src/vim.h	1225;"	d
WSP_ROOM	vim/vim/src/vim.h	1218;"	d
WSP_TOP	vim/vim/src/vim.h	1220;"	d
WSP_VERT	vim/vim/src/vim.h	1219;"	d
WS_DEBUG_ALL	vim/vim/src/wsdebug.h	29;"	d
WS_TRACE	vim/vim/src/wsdebug.h	26;"	d
WS_TRACE_COLONCMD	vim/vim/src/wsdebug.h	28;"	d
WS_TRACE_VERBOSE	vim/vim/src/wsdebug.h	27;"	d
WT_ENV	vim/vim/src/nbdebug.h	/^		WT_ENV = 1,		\/* look for env var if set *\/$/;"	e	enum:__anon122
WT_ENV	vim/vim/src/wsdebug.h	/^		WT_ENV = 1,		\/* look for env var if set *\/$/;"	e	enum:__anon19
WT_STOP	vim/vim/src/nbdebug.h	/^		WT_STOP			\/* look for ~\/.gvimstop if set *\/$/;"	e	enum:__anon122
WT_STOP	vim/vim/src/wsdebug.h	/^		WT_STOP			\/* look for ~\/.gvimstop if set *\/$/;"	e	enum:__anon19
WT_WAIT	vim/vim/src/nbdebug.h	/^		WT_WAIT,		\/* look for ~\/.gvimwait if set *\/$/;"	e	enum:__anon122
WT_WAIT	vim/vim/src/wsdebug.h	/^		WT_WAIT,		\/* look for ~\/.gvimwait if set *\/$/;"	e	enum:__anon19
WV_ARAB	vim/vim/src/option.h	/^    , WV_ARAB$/;"	e	enum:__anon221
WV_BRI	vim/vim/src/option.h	/^    , WV_BRI$/;"	e	enum:__anon221
WV_BRIOPT	vim/vim/src/option.h	/^    , WV_BRIOPT$/;"	e	enum:__anon221
WV_CC	vim/vim/src/option.h	/^    , WV_CC$/;"	e	enum:__anon221
WV_COCU	vim/vim/src/option.h	/^    , WV_COCU$/;"	e	enum:__anon221
WV_COLE	vim/vim/src/option.h	/^    , WV_COLE$/;"	e	enum:__anon221
WV_COUNT	vim/vim/src/option.h	/^    , WV_COUNT	    \/* must be the last one *\/$/;"	e	enum:__anon221
WV_CRBIND	vim/vim/src/option.h	/^    , WV_CRBIND$/;"	e	enum:__anon221
WV_CUC	vim/vim/src/option.h	/^    , WV_CUC$/;"	e	enum:__anon221
WV_CUL	vim/vim/src/option.h	/^    , WV_CUL$/;"	e	enum:__anon221
WV_DIFF	vim/vim/src/option.h	/^    , WV_DIFF$/;"	e	enum:__anon221
WV_FDC	vim/vim/src/option.h	/^    , WV_FDC$/;"	e	enum:__anon221
WV_FDE	vim/vim/src/option.h	/^    , WV_FDE$/;"	e	enum:__anon221
WV_FDI	vim/vim/src/option.h	/^    , WV_FDI$/;"	e	enum:__anon221
WV_FDL	vim/vim/src/option.h	/^    , WV_FDL$/;"	e	enum:__anon221
WV_FDM	vim/vim/src/option.h	/^    , WV_FDM$/;"	e	enum:__anon221
WV_FDN	vim/vim/src/option.h	/^    , WV_FDN$/;"	e	enum:__anon221
WV_FDT	vim/vim/src/option.h	/^    , WV_FDT$/;"	e	enum:__anon221
WV_FEN	vim/vim/src/option.h	/^    , WV_FEN$/;"	e	enum:__anon221
WV_FML	vim/vim/src/option.h	/^    , WV_FML$/;"	e	enum:__anon221
WV_FMR	vim/vim/src/option.h	/^    , WV_FMR$/;"	e	enum:__anon221
WV_LBR	vim/vim/src/option.h	/^    , WV_LBR$/;"	e	enum:__anon221
WV_LIST	vim/vim/src/option.h	/^    WV_LIST = 0$/;"	e	enum:__anon221
WV_NU	vim/vim/src/option.h	/^    , WV_NU$/;"	e	enum:__anon221
WV_NUW	vim/vim/src/option.h	/^    , WV_NUW$/;"	e	enum:__anon221
WV_PVW	vim/vim/src/option.h	/^    , WV_PVW$/;"	e	enum:__anon221
WV_RL	vim/vim/src/option.h	/^    , WV_RL$/;"	e	enum:__anon221
WV_RLC	vim/vim/src/option.h	/^    , WV_RLC$/;"	e	enum:__anon221
WV_RNU	vim/vim/src/option.h	/^    , WV_RNU$/;"	e	enum:__anon221
WV_SCBIND	vim/vim/src/option.h	/^    , WV_SCBIND$/;"	e	enum:__anon221
WV_SCL	vim/vim/src/option.h	/^    , WV_SCL$/;"	e	enum:__anon221
WV_SCROLL	vim/vim/src/option.h	/^    , WV_SCROLL$/;"	e	enum:__anon221
WV_SPELL	vim/vim/src/option.h	/^    , WV_SPELL$/;"	e	enum:__anon221
WV_STL	vim/vim/src/option.h	/^    , WV_STL$/;"	e	enum:__anon221
WV_TK	vim/vim/src/option.h	/^    , WV_TK$/;"	e	enum:__anon221
WV_TMS	vim/vim/src/option.h	/^    , WV_TMS$/;"	e	enum:__anon221
WV_WFH	vim/vim/src/option.h	/^    , WV_WFH$/;"	e	enum:__anon221
WV_WFW	vim/vim/src/option.h	/^    , WV_WFW$/;"	e	enum:__anon221
WV_WRAP	vim/vim/src/option.h	/^    , WV_WRAP$/;"	e	enum:__anon221
WW_ALL	vim/vim/src/option.h	177;"	d
W_CONV	vim/vim/src/farsi.h	183;"	d
W_ENDCOL	vim/vim/src/vim.h	866;"	d
W_ENDCOL	vim/vim/src/vim.h	871;"	d
W_NEXT	vim/vim/src/globals.h	552;"	d
W_NEXT	vim/vim/src/globals.h	570;"	d
W_OK	vim/vim/src/vim.h	1583;"	d
W_R_L	vim/vim/src/farsi.h	184;"	d
W_STATUS_HEIGHT	vim/vim/src/vim.h	875;"	d
W_STATUS_HEIGHT	vim/vim/src/vim.h	878;"	d
W_VSEP_WIDTH	vim/vim/src/vim.h	867;"	d
W_VSEP_WIDTH	vim/vim/src/vim.h	872;"	d
W_WIDTH	vim/vim/src/vim.h	865;"	d
W_WIDTH	vim/vim/src/vim.h	870;"	d
W_WINCOL	vim/vim/src/vim.h	864;"	d
W_WINCOL	vim/vim/src/vim.h	869;"	d
W_WINROW	vim/vim/src/vim.h	876;"	d
W_WINROW	vim/vim/src/vim.h	879;"	d
WaitForChar	vim/vim/src/os_unix.c	/^WaitForChar(long msec, int *interrupted)$/;"	f	file:	signature:(long msec, int *interrupted)
WaitForChar	vim/vim/src/os_unix.c	/^static int  WaitForChar(long msec, int *interrupted);$/;"	p	file:	signature:(long msec, int *interrupted)
WaitForChar	vim/vim/src/os_win32.c	/^WaitForChar(long msec)$/;"	f	file:	signature:(long msec)
WaitForCharOrMouse	vim/vim/src/os_unix.c	/^WaitForCharOrMouse(long msec, int *interrupted)$/;"	f	file:	signature:(long msec, int *interrupted)
WaitForCharOrMouse	vim/vim/src/os_unix.c	/^static int  WaitForCharOrMouse(long msec, int *interrupted);$/;"	p	file:	signature:(long msec, int *interrupted)
WaitForPend	vim/vim/src/if_xcmdsrv.c	/^WaitForPend(void *p)$/;"	f	file:	signature:(void *p)
WaitForPend	vim/vim/src/if_xcmdsrv.c	/^static int	WaitForPend(void *p);$/;"	p	file:	signature:(void *p)
WaitForReply	vim/vim/src/if_xcmdsrv.c	/^WaitForReply(void *p)$/;"	f	file:	signature:(void *p)
WaitForReply	vim/vim/src/if_xcmdsrv.c	/^static int	WaitForReply(void *p);$/;"	p	file:	signature:(void *p)
WaitNextEventWrp	vim/vim/src/gui_mac.c	/^WaitNextEventWrp(EventMask eventMask, EventRecord *theEvent, UInt32 sleep, RgnHandle mouseRgn)$/;"	f	signature:(EventMask eventMask, EventRecord *theEvent, UInt32 sleep, RgnHandle mouseRgn)
WantQueryMouse	vim/vim/src/globals.h	/^EXTERN int	WantQueryMouse INIT(= FALSE);$/;"	v
WcsLen	vim/vim/src/gui_at_fs.c	/^WcsLen(wchar_t *p)$/;"	f	file:	signature:(wchar_t *p)
WideCharToMultiByte_alloc	vim/vim/src/winclip.c	/^WideCharToMultiByte_alloc(UINT cp, DWORD flags,$/;"	f	signature:(UINT cp, DWORD flags, LPCWSTR in, int inlen, LPSTR *out, int *outlen, LPCSTR def, LPBOOL useddef)
Widget	vim/vim/src/proto.h	25;"	d
WinListAsSeq	vim/vim/src/if_py_both.h	/^static PySequenceMethods WinListAsSeq;$/;"	v
WinListAsSeq	vim/vim/src/if_python.c	/^static PySequenceMethods WinListAsSeq = {$/;"	v	file:
WinListAsSeq	vim/vim/src/if_python3.c	/^static PySequenceMethods WinListAsSeq = {$/;"	v	file:
WinListDestructor	vim/vim/src/if_py_both.h	/^WinListDestructor(WinListObject *self)$/;"	f	signature:(WinListObject *self)
WinListItem	vim/vim/src/if_py_both.h	/^WinListItem(WinListObject *self, PyInt n)$/;"	f	signature:(WinListObject *self, PyInt n)
WinListLength	vim/vim/src/if_py_both.h	/^WinListLength(WinListObject *self)$/;"	f	signature:(WinListObject *self)
WinListNew	vim/vim/src/if_py_both.h	/^WinListNew(TabPageObject *tabObject)$/;"	f	signature:(TabPageObject *tabObject)
WinListNew	vim/vim/src/if_py_both.h	/^static PyObject *WinListNew(TabPageObject *tabObject);$/;"	p	signature:(TabPageObject *tabObject)
WinListObject	vim/vim/src/if_py_both.h	/^} WinListObject;$/;"	t	typeref:struct:__anon110
WinListType	vim/vim/src/if_py_both.h	/^static PyTypeObject WinListType;$/;"	v
WinMain	vim/vim/src/os_w32exe.c	/^WinMain($/;"	f	signature:( HINSTANCE hInstance UNUSED, HINSTANCE hPrevInst UNUSED, LPSTR lpszCmdLine, int nCmdShow UNUSED)
Window	vim/vim/src/os_amiga.c	19;"	d	file:
WindowActivate	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WindowActivate(IDispatch * theWindow)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theWindow)
WindowAttr	vim/vim/src/if_py_both.h	/^WindowAttr(WindowObject *self, char *name)$/;"	f	signature:(WindowObject *self, char *name)
WindowAttrValid	vim/vim/src/if_py_both.h	/^WindowAttrValid(WindowObject *self, char *name)$/;"	f	signature:(WindowObject *self, char *name)
WindowAttrs	vim/vim/src/if_py_both.h	/^static char *WindowAttrs[] = {$/;"	v
WindowClear	vim/vim/src/if_py_both.h	/^WindowClear(WindowObject *self)$/;"	f	signature:(WindowObject *self)
WindowDeactivate	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WindowDeactivate(IDispatch * theWindow)$/;"	f	class:CCommands::XApplicationEvents	signature:(IDispatch * theWindow)
WindowDestructor	vim/vim/src/if_py_both.h	/^WindowDestructor(WindowObject *self)$/;"	f	signature:(WindowObject *self)
WindowDir	vim/vim/src/if_py_both.h	/^WindowDir(PyObject *self)$/;"	f	signature:(PyObject *self)
WindowGetattr	vim/vim/src/if_python.c	/^WindowGetattr(PyObject *self, char *name)$/;"	f	file:	signature:(PyObject *self, char *name)
WindowGetattr	vim/vim/src/if_python.c	/^static PyObject *WindowGetattr(PyObject *, char *);$/;"	p	file:	signature:(PyObject *, char *)
WindowGetattro	vim/vim/src/if_python3.c	/^WindowGetattro(PyObject *self, PyObject *nameobj)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj)
WindowGetattro	vim/vim/src/if_python3.c	/^static PyObject *WindowGetattro(PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *)
WindowMethods	vim/vim/src/if_py_both.h	/^static struct PyMethodDef WindowMethods[] = {$/;"	v	typeref:struct:PyMethodDef
WindowNew	vim/vim/src/if_py_both.h	/^WindowNew(win_T *win, tabpage_T *tab)$/;"	f	signature:(win_T *win, tabpage_T *tab)
WindowNew	vim/vim/src/if_py_both.h	/^static PyObject *WindowNew(win_T *, tabpage_T *);$/;"	p	signature:(win_T *, tabpage_T *)
WindowObject	vim/vim/src/if_py_both.h	/^} WindowObject;$/;"	t	typeref:struct:__anon109
WindowRepr	vim/vim/src/if_py_both.h	/^WindowRepr(WindowObject *self)$/;"	f	signature:(WindowObject *self)
WindowSearch	vim/vim/src/gui_mac.c	/^struct WindowSearch \/* for handling class 'KAHL', event 'SRCH', keyDirectObject typeChar*\/$/;"	s	file:
WindowSearch	vim/vim/src/gui_mac.c	/^typedef struct WindowSearch WindowSearch;$/;"	t	typeref:struct:WindowSearch	file:
WindowSearch::theDate	vim/vim/src/gui_mac.c	/^    long *theDate; \/\/ where to put the modification date\/time$/;"	m	struct:WindowSearch	file:	access:public
WindowSearch::theFile	vim/vim/src/gui_mac.c	/^    FSSpec theFile; \/\/ identifies the file$/;"	m	struct:WindowSearch	file:	access:public
WindowSetattr	vim/vim/src/if_py_both.h	/^WindowSetattr(WindowObject *self, char *name, PyObject *valObject)$/;"	f	signature:(WindowObject *self, char *name, PyObject *valObject)
WindowSetattro	vim/vim/src/if_python3.c	/^WindowSetattro(PyObject *self, PyObject *nameobj, PyObject *val)$/;"	f	file:	signature:(PyObject *self, PyObject *nameobj, PyObject *val)
WindowSetattro	vim/vim/src/if_python3.c	/^static int WindowSetattro(PyObject *, PyObject *, PyObject *);$/;"	p	file:	signature:(PyObject *, PyObject *, PyObject *)
WindowTraverse	vim/vim/src/if_py_both.h	/^WindowTraverse(WindowObject *self, visitproc visit, void *arg)$/;"	f	signature:(WindowObject *self, visitproc visit, void *arg)
WindowType	vim/vim/src/if_py_both.h	/^static PyTypeObject WindowType;$/;"	v
WindowType_Check	vim/vim/src/if_python.c	1226;"	d	file:
WindowType_Check	vim/vim/src/if_python3.c	1140;"	d	file:
WindowValid	vim/vim/src/if_xcmdsrv.c	/^WindowValid(Display *dpy, Window w)$/;"	f	file:	signature:(Display *dpy, Window w)
WindowValid	vim/vim/src/if_xcmdsrv.c	/^static int	WindowValid(Display *dpy, Window w);$/;"	p	file:	signature:(Display *dpy, Window w)
WorkspaceClose	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WorkspaceClose()$/;"	f	class:CCommands::XApplicationEvents	signature:()
WorkspaceOpen	vim/vim/src/VisVim/Commands.cpp	/^HRESULT CCommands::XApplicationEvents::WorkspaceOpen()$/;"	f	class:CCommands::XApplicationEvents	signature:()
WriteRegistryInt	vim/vim/src/VisVim/Reg.cpp	/^bool WriteRegistryInt (HKEY hSectionKey, char* Entry, int nValue)$/;"	f	signature:(HKEY hSectionKey, char* Entry, int nValue)
WriteRegistryInt	vim/vim/src/VisVim/VisVim.h	/^bool WriteRegistryInt (HKEY hSectionKey, char* Entry, int nValue);$/;"	p	signature:(HKEY hSectionKey, char* Entry, int nValue)
WtWait	vim/vim/src/nbdebug.h	/^} WtWait;$/;"	t	typeref:enum:__anon122
WtWait	vim/vim/src/wsdebug.h	/^} WtWait;$/;"	t	typeref:enum:__anon19
XAW_LIB	vim/vim/src/Makefile	/^XAW_LIB = -lXaw$/;"	m
XAllocClassHint	vim/vim/src/gui_gtk_vms.h	85;"	d
XAllocColor	vim/vim/src/gui_gtk_vms.h	86;"	d
XAllocColorCells	vim/vim/src/gui_gtk_vms.h	87;"	d
XAllocSizeHints	vim/vim/src/gui_gtk_vms.h	88;"	d
XAllocWMHints	vim/vim/src/gui_gtk_vms.h	89;"	d
XAutoRepeatOff	vim/vim/src/gui_gtk_vms.h	90;"	d
XAutoRepeatOn	vim/vim/src/gui_gtk_vms.h	91;"	d
XBaseFontNameListOfFontSet	vim/vim/src/gui_gtk_vms.h	92;"	d
XBell	vim/vim/src/gui_gtk_vms.h	93;"	d
XBitmapPad	vim/vim/src/gui_gtk_vms.h	94;"	d
XChangeActivePointerGrab	vim/vim/src/gui_gtk_vms.h	95;"	d
XChangeGC	vim/vim/src/gui_gtk_vms.h	96;"	d
XChangeProperty	vim/vim/src/gui_gtk_vms.h	97;"	d
XChangeWindowAttributes	vim/vim/src/gui_gtk_vms.h	98;"	d
XCheckIfEvent	vim/vim/src/gui_gtk_vms.h	99;"	d
XCheckMaskEvent	vim/vim/src/gui_gtk_vms.h	100;"	d
XCheckTypedEvent	vim/vim/src/gui_gtk_vms.h	101;"	d
XCheckTypedWindowEvent	vim/vim/src/gui_gtk_vms.h	102;"	d
XCheckWindowEvent	vim/vim/src/gui_gtk_vms.h	103;"	d
XClearArea	vim/vim/src/gui_gtk_vms.h	104;"	d
XClearWindow	vim/vim/src/gui_gtk_vms.h	105;"	d
XClipBox	vim/vim/src/gui_gtk_vms.h	106;"	d
XCloseDisplay	vim/vim/src/gui_gtk_vms.h	107;"	d
XCloseIM	vim/vim/src/gui_gtk_vms.h	108;"	d
XColor	vim/vim/src/xpm/include/simx.h	/^}      XColor;$/;"	t	typeref:struct:__anon86
XConfigureWindow	vim/vim/src/gui_gtk_vms.h	109;"	d
XConvertSelection	vim/vim/src/gui_gtk_vms.h	110;"	d
XCopyArea	vim/vim/src/gui_gtk_vms.h	111;"	d
XCopyGC	vim/vim/src/gui_gtk_vms.h	112;"	d
XCopyPlane	vim/vim/src/gui_gtk_vms.h	113;"	d
XCreateBitmapFromData	vim/vim/src/gui_gtk_vms.h	114;"	d
XCreateColormap	vim/vim/src/gui_gtk_vms.h	115;"	d
XCreateDataFromPixmap	vim/vim/src/xpm/include/xpm.h	497;"	d
XCreateFontCursor	vim/vim/src/gui_gtk_vms.h	116;"	d
XCreateFontSet	vim/vim/src/gui_gtk_vms.h	117;"	d
XCreateGC	vim/vim/src/gui_gtk_vms.h	118;"	d
XCreateIC	vim/vim/src/gui_gtk_vms.h	119;"	d
XCreateImage	vim/vim/src/gui_gtk_vms.h	120;"	d
XCreatePixmap	vim/vim/src/gui_gtk_vms.h	121;"	d
XCreatePixmapCursor	vim/vim/src/gui_gtk_vms.h	122;"	d
XCreatePixmapFromBitmapData	vim/vim/src/gui_gtk_vms.h	123;"	d
XCreatePixmapFromData	vim/vim/src/xpm/include/xpm.h	495;"	d
XCreateRegion	vim/vim/src/gui_gtk_vms.h	124;"	d
XCreateSimpleWindow	vim/vim/src/gui_gtk_vms.h	125;"	d
XCreateWindow	vim/vim/src/gui_gtk_vms.h	126;"	d
XD_GUI	vim/vim/src/os_unix.c	1740;"	d	file:
XD_HERE	vim/vim/src/os_unix.c	1739;"	d	file:
XD_NONE	vim/vim/src/os_unix.c	1738;"	d	file:
XD_XTERM	vim/vim/src/os_unix.c	1741;"	d	file:
XDefaultRootWindow	vim/vim/src/gui_gtk_vms.h	127;"	d
XDefaultScreenOfDisplay	vim/vim/src/gui_gtk_vms.h	128;"	d
XDefineCursor	vim/vim/src/gui_gtk_vms.h	129;"	d
XDeleteProperty	vim/vim/src/gui_gtk_vms.h	130;"	d
XDestroyIC	vim/vim/src/gui_gtk_vms.h	131;"	d
XDestroyRegion	vim/vim/src/gui_gtk_vms.h	132;"	d
XDestroyWindow	vim/vim/src/gui_gtk_vms.h	133;"	d
XDisplayName	vim/vim/src/gui_gtk_vms.h	134;"	d
XDisplayOfScreen	vim/vim/src/gui_gtk_vms.h	135;"	d
XDisplayString	vim/vim/src/gui_gtk_vms.h	136;"	d
XDrawArc	vim/vim/src/gui_gtk_vms.h	137;"	d
XDrawImageString	vim/vim/src/gui_gtk_vms.h	138;"	d
XDrawImageString16	vim/vim/src/gui_gtk_vms.h	139;"	d
XDrawImageString16	vim/vim/src/gui_x11.c	117;"	d	file:
XDrawLine	vim/vim/src/gui_gtk_vms.h	140;"	d
XDrawLines	vim/vim/src/gui_gtk_vms.h	141;"	d
XDrawPoint	vim/vim/src/gui_gtk_vms.h	142;"	d
XDrawPoints	vim/vim/src/gui_gtk_vms.h	143;"	d
XDrawRectangle	vim/vim/src/gui_gtk_vms.h	144;"	d
XDrawSegments	vim/vim/src/gui_gtk_vms.h	145;"	d
XDrawString	vim/vim/src/gui_gtk_vms.h	146;"	d
XDrawString	vim/vim/src/gui_x11.c	99;"	d	file:
XDrawString16	vim/vim/src/gui_gtk_vms.h	147;"	d
XDrawString16	vim/vim/src/gui_x11.c	108;"	d	file:
XE	vim/vim/src/farsi.h	119;"	d
XEmptyRegion	vim/vim/src/gui_gtk_vms.h	148;"	d
XEqualRegion	vim/vim/src/gui_gtk_vms.h	149;"	d
XEventsQueued	vim/vim/src/gui_gtk_vms.h	150;"	d
XExtentsOfFontSet	vim/vim/src/gui_gtk_vms.h	151;"	d
XFILE	vim/vim/src/ex_cmds.h	36;"	d
XFetchBuffer	vim/vim/src/gui_gtk_vms.h	152;"	d
XFillArc	vim/vim/src/gui_gtk_vms.h	153;"	d
XFillPolygon	vim/vim/src/gui_gtk_vms.h	154;"	d
XFillRectangle	vim/vim/src/gui_gtk_vms.h	155;"	d
XFillRectangles	vim/vim/src/gui_gtk_vms.h	156;"	d
XFilterEvent	vim/vim/src/gui_gtk_vms.h	157;"	d
XFlush	vim/vim/src/gui_gtk_vms.h	158;"	d
XFontsOfFontSet	vim/vim/src/gui_gtk_vms.h	159;"	d
XFree	vim/vim/src/gui_gtk_vms.h	160;"	d
XFreeColormap	vim/vim/src/gui_gtk_vms.h	161;"	d
XFreeColors	vim/vim/src/gui_gtk_vms.h	162;"	d
XFreeCursor	vim/vim/src/gui_gtk_vms.h	163;"	d
XFreeFont	vim/vim/src/gui_gtk_vms.h	164;"	d
XFreeFontInfo	vim/vim/src/gui_gtk_vms.h	165;"	d
XFreeFontNames	vim/vim/src/gui_gtk_vms.h	166;"	d
XFreeFontSet	vim/vim/src/gui_gtk_vms.h	167;"	d
XFreeGC	vim/vim/src/gui_gtk_vms.h	168;"	d
XFreeModifiermap	vim/vim/src/gui_gtk_vms.h	169;"	d
XFreePixmap	vim/vim/src/gui_gtk_vms.h	170;"	d
XFreeStringList	vim/vim/src/gui_gtk_vms.h	171;"	d
XGETTEXT	vim/vim/src/po/Make_cyg.mak	/^XGETTEXT = OLD_PO_FILE_INPUT=yes OLD_PO_FILE_OUTPUT=yes $(GETTEXT_PATH)xgettext$/;"	m
XGETTEXT	vim/vim/src/po/Make_ming.mak	/^XGETTEXT = set OLD_PO_FILE_INPUT=yes && set OLD_PO_FILE_OUTPUT=yes && $(GETTEXT_PATH)xgettext$/;"	m
XGETTEXT	vim/vim/src/po/Make_mvc.mak	/^XGETTEXT = $(GETTEXT_PATH)\\xgettext$/;"	m
XGETTEXT	vim/vim/src/po/Makefile	/^XGETTEXT = OLD_PO_FILE_INPUT=yes OLD_PO_FILE_OUTPUT=yes xgettext$/;"	m
XGetAtomName	vim/vim/src/gui_gtk_vms.h	172;"	d
XGetDefault	vim/vim/src/gui_gtk_vms.h	173;"	d
XGetErrorDatabaseText	vim/vim/src/gui_gtk_vms.h	174;"	d
XGetErrorText	vim/vim/src/gui_gtk_vms.h	175;"	d
XGetFontProperty	vim/vim/src/gui_gtk_vms.h	176;"	d
XGetGCValues	vim/vim/src/gui_gtk_vms.h	177;"	d
XGetGeometry	vim/vim/src/gui_gtk_vms.h	178;"	d
XGetICValues	vim/vim/src/gui_gtk_vms.h	180;"	d
XGetIMValues	vim/vim/src/gui_gtk_vms.h	181;"	d
XGetIconSizes	vim/vim/src/gui_gtk_vms.h	179;"	d
XGetImage	vim/vim/src/gui_gtk_vms.h	182;"	d
XGetKeyboardControl	vim/vim/src/gui_gtk_vms.h	183;"	d
XGetModifierMapping	vim/vim/src/gui_gtk_vms.h	184;"	d
XGetMotionEvents	vim/vim/src/gui_gtk_vms.h	185;"	d
XGetNormalHints	vim/vim/src/gui_gtk_vms.h	186;"	d
XGetSelectionOwner	vim/vim/src/gui_gtk_vms.h	187;"	d
XGetSubImage	vim/vim/src/gui_gtk_vms.h	188;"	d
XGetVisualInfo	vim/vim/src/gui_gtk_vms.h	189;"	d
XGetWMColormapWindows	vim/vim/src/gui_gtk_vms.h	190;"	d
XGetWMHints	vim/vim/src/gui_gtk_vms.h	193;"	d
XGetWMIconName	vim/vim/src/gui_gtk_vms.h	191;"	d
XGetWMName	vim/vim/src/gui_gtk_vms.h	194;"	d
XGetWMNormalHints	vim/vim/src/gui_gtk_vms.h	195;"	d
XGetWMProtocols	vim/vim/src/gui_gtk_vms.h	192;"	d
XGetWindowAttributes	vim/vim/src/gui_gtk_vms.h	196;"	d
XGetWindowProperty	vim/vim/src/gui_gtk_vms.h	197;"	d
XGrabKeyboard	vim/vim/src/gui_gtk_vms.h	198;"	d
XGrabPointer	vim/vim/src/gui_gtk_vms.h	199;"	d
XGrabServer	vim/vim/src/gui_gtk_vms.h	200;"	d
XHeightOfScreen	vim/vim/src/gui_gtk_vms.h	201;"	d
XIconifyWindow	vim/vim/src/gui_gtk_vms.h	202;"	d
XIfEvent	vim/vim/src/gui_gtk_vms.h	203;"	d
XImage	vim/vim/src/proto.h	32;"	d
XImage	vim/vim/src/xpm/include/simx.h	/^}      XImage;$/;"	t	typeref:struct:__anon87
XInternAtom	vim/vim/src/gui_gtk_vms.h	204;"	d
XIntersectRegion	vim/vim/src/gui_gtk_vms.h	205;"	d
XKeycodeToKeysym	vim/vim/src/gui_gtk_vms.h	206;"	d
XKeysymToKeycode	vim/vim/src/gui_gtk_vms.h	207;"	d
XKeysymToString	vim/vim/src/gui_gtk_vms.h	208;"	d
XListFonts	vim/vim/src/gui_gtk_vms.h	209;"	d
XListFontsWithInfo	vim/vim/src/gui_gtk_vms.h	210;"	d
XListPixmapFormats	vim/vim/src/gui_gtk_vms.h	211;"	d
XListProperties	vim/vim/src/gui_gtk_vms.h	212;"	d
XLoadQueryFont	vim/vim/src/gui_gtk_vms.h	213;"	d
XLookupString	vim/vim/src/gui_gtk_vms.h	214;"	d
XLowerWindow	vim/vim/src/gui_gtk_vms.h	215;"	d
XMapRaised	vim/vim/src/gui_gtk_vms.h	216;"	d
XMapWindow	vim/vim/src/gui_gtk_vms.h	217;"	d
XMatchVisualInfo	vim/vim/src/gui_gtk_vms.h	218;"	d
XMoveResizeWindow	vim/vim/src/gui_gtk_vms.h	219;"	d
XMoveWindow	vim/vim/src/gui_gtk_vms.h	220;"	d
XNextEvent	vim/vim/src/gui_gtk_vms.h	221;"	d
XOffsetRegion	vim/vim/src/gui_gtk_vms.h	222;"	d
XOpenDisplay	vim/vim/src/gui_gtk_vms.h	223;"	d
XOpenIM	vim/vim/src/gui_gtk_vms.h	224;"	d
XPM	vim/vim/src/Make_cyg_ming.mak	/^XPM = xpm\/x64$/;"	m
XPM	vim/vim/src/Make_cyg_ming.mak	/^XPM = xpm\/x86$/;"	m
XPM	vim/vim/src/Make_mvc.mak	/^XPM = no$/;"	m
XPM	vim/vim/src/Make_mvc.mak	/^XPM = xpm\\x64$/;"	m
XPM	vim/vim/src/Make_mvc.mak	/^XPM = xpm\\x86$/;"	m
XPM_COLOR	vim/vim/src/xpm/include/xpm.h	288;"	d
XPM_DEFS	vim/vim/src/Make_mvc.mak	/^XPM_DEFS  = -DFEAT_XPM_W32$/;"	m
XPM_GRAY	vim/vim/src/xpm/include/xpm.h	287;"	d
XPM_GRAY4	vim/vim/src/xpm/include/xpm.h	285;"	d
XPM_GREY	vim/vim/src/xpm/include/xpm.h	286;"	d
XPM_GREY4	vim/vim/src/xpm/include/xpm.h	284;"	d
XPM_INC	vim/vim/src/Make_mvc.mak	/^XPM_INC	  = -I $(XPM)\\include -I $(XPM)\\..\\include$/;"	m
XPM_LIB	vim/vim/src/Make_mvc.mak	/^XPM_LIB   = $(XPM)\\lib-vc14\\libXpm.lib$/;"	m
XPM_LIB	vim/vim/src/Make_mvc.mak	/^XPM_LIB   = $(XPM)\\lib\\libXpm.lib$/;"	m
XPM_MONO	vim/vim/src/xpm/include/xpm.h	283;"	d
XPM_OBJ	vim/vim/src/Make_mvc.mak	/^XPM_OBJ   = $(OBJDIR)\/xpm_w32.obj$/;"	m
XPM_h	vim/vim/src/xpm/include/xpm.h	46;"	d
XP_BS_NONE	vim/vim/src/structs.h	558;"	d
XP_BS_ONE	vim/vim/src/structs.h	559;"	d
XP_BS_THREE	vim/vim/src/structs.h	560;"	d
XParseColor	vim/vim/src/gui_gtk_vms.h	225;"	d
XParseGeometry	vim/vim/src/gui_gtk_vms.h	226;"	d
XPeekEvent	vim/vim/src/gui_gtk_vms.h	227;"	d
XPending	vim/vim/src/gui_gtk_vms.h	228;"	d
XPointInRegion	vim/vim/src/gui_gtk_vms.h	229;"	d
XPolygonRegion	vim/vim/src/gui_gtk_vms.h	230;"	d
XPutBackEvent	vim/vim/src/gui_gtk_vms.h	231;"	d
XPutImage	vim/vim/src/gui_gtk_vms.h	232;"	d
XQueryColor	vim/vim/src/gui_gtk_vms.h	234;"	d
XQueryColors	vim/vim/src/gui_gtk_vms.h	235;"	d
XQueryExtension	vim/vim/src/gui_gtk_vms.h	236;"	d
XQueryPointer	vim/vim/src/gui_gtk_vms.h	237;"	d
XQueryTree	vim/vim/src/gui_gtk_vms.h	238;"	d
XRaiseWindow	vim/vim/src/gui_gtk_vms.h	239;"	d
XReadPixmapFile	vim/vim/src/xpm/include/xpm.h	491;"	d
XReconfigureWMWindow	vim/vim/src/gui_gtk_vms.h	240;"	d
XRectInRegion	vim/vim/src/gui_gtk_vms.h	241;"	d
XRefreshKeyboardMapping	vim/vim/src/gui_gtk_vms.h	242;"	d
XReparentWindow	vim/vim/src/gui_gtk_vms.h	243;"	d
XResizeWindow	vim/vim/src/gui_gtk_vms.h	244;"	d
XRestackWindows	vim/vim/src/gui_gtk_vms.h	245;"	d
XRootWindow	vim/vim/src/gui_gtk_vms.h	233;"	d
XRootWindowOfScreen	vim/vim/src/gui_gtk_vms.h	246;"	d
XSUBPP	vim/vim/src/Make_cyg_ming.mak	/^XSUBPP=$(PERLEXE) $(XSUBPPTRY)$/;"	m
XSUBPP	vim/vim/src/Make_cyg_ming.mak	/^XSUBPP=xsubpp$/;"	m
XSUBPP	vim/vim/src/Make_mvc.mak	/^XSUBPP = $(PERL)\\lib\\ExtUtils\\xsubpp$/;"	m
XSUBPP	vim/vim/src/Make_mvc.mak	/^XSUBPP = $(PERL_EXE) $(XSUBPP)$/;"	m
XSUBPP	vim/vim/src/Make_mvc.mak	/^XSUBPP = xsubpp$/;"	m
XSUBPPTRY	vim/vim/src/Make_cyg_ming.mak	/^XSUBPPTRY:=$(shell cygpath -m $(PERLLIB)\/ExtUtils\/xsubpp)$/;"	m
XSUBPPTRY	vim/vim/src/Make_cyg_ming.mak	/^XSUBPPTRY=$(PERLLIB)\/ExtUtils\/xsubpp$/;"	m
XSUBPP_EXISTS	vim/vim/src/Make_cyg_ming.mak	/^XSUBPP_EXISTS=$(shell $(PERLEXE) -e "print 1 unless -e '$(XSUBPPTRY)'")$/;"	m
XSUBPP_TYPEMAP	vim/vim/src/Make_mvc.mak	/^XSUBPP_TYPEMAP = $(PERL)\\lib\\ExtUtils\\typemap$/;"	m
XScreenNumberOfScreen	vim/vim/src/gui_gtk_vms.h	247;"	d
XSelectAsyncEvent	vim/vim/src/gui_gtk_vms.h	248;"	d
XSelectAsyncInput	vim/vim/src/gui_gtk_vms.h	249;"	d
XSelectInput	vim/vim/src/gui_gtk_vms.h	250;"	d
XSendEvent	vim/vim/src/gui_gtk_vms.h	251;"	d
XServerVendor	vim/vim/src/gui_gtk_vms.h	252;"	d
XSetBackground	vim/vim/src/gui_gtk_vms.h	253;"	d
XSetClassHint	vim/vim/src/gui_gtk_vms.h	254;"	d
XSetClipMask	vim/vim/src/gui_gtk_vms.h	255;"	d
XSetClipOrigin	vim/vim/src/gui_gtk_vms.h	256;"	d
XSetClipRectangles	vim/vim/src/gui_gtk_vms.h	257;"	d
XSetCloseDownMode	vim/vim/src/gui_gtk_vms.h	258;"	d
XSetCommand	vim/vim/src/gui_gtk_vms.h	259;"	d
XSetDashes	vim/vim/src/gui_gtk_vms.h	260;"	d
XSetErrorHandler	vim/vim/src/gui_gtk_vms.h	261;"	d
XSetFillStyle	vim/vim/src/gui_gtk_vms.h	262;"	d
XSetFont	vim/vim/src/gui_gtk_vms.h	263;"	d
XSetForeground	vim/vim/src/gui_gtk_vms.h	264;"	d
XSetFunction	vim/vim/src/gui_gtk_vms.h	265;"	d
XSetGraphicsExposures	vim/vim/src/gui_gtk_vms.h	266;"	d
XSetICFocus	vim/vim/src/gui_gtk_vms.h	267;"	d
XSetICValues	vim/vim/src/gui_gtk_vms.h	268;"	d
XSetIOErrorHandler	vim/vim/src/gui_gtk_vms.h	269;"	d
XSetInputFocus	vim/vim/src/gui_gtk_vms.h	270;"	d
XSetLineAttributes	vim/vim/src/gui_gtk_vms.h	271;"	d
XSetLocaleModifiers	vim/vim/src/gui_gtk_vms.h	272;"	d
XSetNormalHints	vim/vim/src/gui_gtk_vms.h	273;"	d
XSetRegion	vim/vim/src/gui_gtk_vms.h	274;"	d
XSetSelectionOwner	vim/vim/src/gui_gtk_vms.h	275;"	d
XSetStipple	vim/vim/src/gui_gtk_vms.h	276;"	d
XSetSubwindowMode	vim/vim/src/gui_gtk_vms.h	277;"	d
XSetTSOrigin	vim/vim/src/gui_gtk_vms.h	278;"	d
XSetTile	vim/vim/src/gui_gtk_vms.h	279;"	d
XSetTransientForHint	vim/vim/src/gui_gtk_vms.h	280;"	d
XSetWMColormapWindows	vim/vim/src/gui_gtk_vms.h	281;"	d
XSetWMHints	vim/vim/src/gui_gtk_vms.h	282;"	d
XSetWMIconName	vim/vim/src/gui_gtk_vms.h	283;"	d
XSetWMName	vim/vim/src/gui_gtk_vms.h	284;"	d
XSetWMNormalHints	vim/vim/src/gui_gtk_vms.h	285;"	d
XSetWMProperties	vim/vim/src/gui_gtk_vms.h	286;"	d
XSetWMProtocols	vim/vim/src/gui_gtk_vms.h	287;"	d
XSetWindowBackground	vim/vim/src/gui_gtk_vms.h	288;"	d
XSetWindowBackgroundPixmap	vim/vim/src/gui_gtk_vms.h	289;"	d
XSetWindowColormap	vim/vim/src/gui_gtk_vms.h	290;"	d
XShapeCombineMask	vim/vim/src/gui_gtk_vms.h	291;"	d
XShapeCombineRectangles	vim/vim/src/gui_gtk_vms.h	292;"	d
XShapeGetRectangles	vim/vim/src/gui_gtk_vms.h	293;"	d
XShrinkRegion	vim/vim/src/gui_gtk_vms.h	294;"	d
XStoreBuffer	vim/vim/src/gui_gtk_vms.h	295;"	d
XStoreColor	vim/vim/src/gui_gtk_vms.h	296;"	d
XStoreColors	vim/vim/src/gui_gtk_vms.h	297;"	d
XStoreName	vim/vim/src/gui_gtk_vms.h	298;"	d
XStringToKeysym	vim/vim/src/gui_gtk_vms.h	299;"	d
XSubtractRegion	vim/vim/src/gui_gtk_vms.h	300;"	d
XSupportsLocale	vim/vim/src/gui_gtk_vms.h	301;"	d
XSync	vim/vim/src/gui_gtk_vms.h	302;"	d
XSynchronize	vim/vim/src/gui_gtk_vms.h	303;"	d
XTFREE	vim/vim/src/gui_gtk_vms.h	/^extern void XTFREE(char*);$/;"	p	signature:(char*)
XT_LEN	vim/vim/src/term.c	6002;"	d	file:
XT_TRACE_DELAY	vim/vim/src/os_unix.c	188;"	d	file:
XTextExtents	vim/vim/src/gui_gtk_vms.h	304;"	d
XTextExtents16	vim/vim/src/gui_gtk_vms.h	305;"	d
XTextWidth	vim/vim/src/gui_gtk_vms.h	306;"	d
XTextWidth16	vim/vim/src/gui_gtk_vms.h	307;"	d
XTranslateCoordinates	vim/vim/src/gui_gtk_vms.h	308;"	d
XUndefineCursor	vim/vim/src/gui_gtk_vms.h	309;"	d
XUngrabKeyboard	vim/vim/src/gui_gtk_vms.h	310;"	d
XUngrabPointer	vim/vim/src/gui_gtk_vms.h	311;"	d
XUngrabServer	vim/vim/src/gui_gtk_vms.h	312;"	d
XUnionRectWithRegion	vim/vim/src/gui_gtk_vms.h	313;"	d
XUnionRegion	vim/vim/src/gui_gtk_vms.h	314;"	d
XUnmapWindow	vim/vim/src/gui_gtk_vms.h	315;"	d
XUnsetICFocus	vim/vim/src/gui_gtk_vms.h	317;"	d
XVaCreateNestedList	vim/vim/src/gui_gtk_vms.h	318;"	d
XVisualIDFromVisual	vim/vim/src/gui_gtk_vms.h	319;"	d
XWarpPointer	vim/vim/src/gui_gtk_vms.h	320;"	d
XWidthOfScreen	vim/vim/src/gui_gtk_vms.h	321;"	d
XWindowEvent	vim/vim/src/gui_gtk_vms.h	322;"	d
XWithdrawWindow	vim/vim/src/gui_gtk_vms.h	323;"	d
XWritePixmapFile	vim/vim/src/xpm/include/xpm.h	493;"	d
XXorRegion	vim/vim/src/gui_gtk_vms.h	324;"	d
XYBitmap	vim/vim/src/xpm/include/simx.h	124;"	d
X_2_COL	vim/vim/src/gui.h	101;"	d
X_2_COL	vim/vim/src/gui.h	106;"	d
X_CFLAGS	vim/vim/src/auto/config.mk	/^X_CFLAGS	=  $/;"	m
X_DISPLAY	vim/vim/src/vim.h	2295;"	d
X_DISPLAY	vim/vim/src/vim.h	2297;"	d
X_DISPLAY	vim/vim/src/vim.h	2302;"	d
X_DISPLAY	vim/vim/src/vim.h	2304;"	d
X_DISPLAY	vim/vim/src/vim.h	2307;"	d
X_EXTRA_LIBS	vim/vim/src/auto/config.mk	/^X_EXTRA_LIBS	=  -lXdmcp -lSM -lICE$/;"	m
X_LIBS	vim/vim/src/auto/config.mk	/^X_LIBS		= -lXt -lX11$/;"	m
X_LIBS_DIR	vim/vim/src/auto/config.mk	/^X_LIBS_DIR	=  $/;"	m
X_LOCALE	vim/vim/src/os_vms_conf.h	195;"	d
X_PRE_LIBS	vim/vim/src/auto/config.mk	/^X_PRE_LIBS	=  -lSM -lICE$/;"	m
XgCreateEPushButtonWidget	vim/vim/src/gui_xmebw.h	/^extern Widget XgCreateEPushButtonWidget(Widget, char *, ArgList, Cardinal);$/;"	p	signature:(Widget, char *, ArgList, Cardinal)
XmAddProtocolCallback	vim/vim/src/gui_gtk_vms.h	325;"	d
XmAddProtocols	vim/vim/src/gui_gtk_vms.h	326;"	d
XmBOTTOM	vim/vim/src/gui_xmebw.h	58;"	d
XmCLocation	vim/vim/src/gui_xmebw.h	38;"	d
XmCShift	vim/vim/src/gui_xmebw.h	31;"	d
XmChangeColor	vim/vim/src/gui_gtk_vms.h	327;"	d
XmClipboardCopy	vim/vim/src/gui_gtk_vms.h	328;"	d
XmClipboardEndCopy	vim/vim/src/gui_gtk_vms.h	329;"	d
XmClipboardInquireLength	vim/vim/src/gui_gtk_vms.h	330;"	d
XmClipboardLock	vim/vim/src/gui_gtk_vms.h	331;"	d
XmClipboardRetrieve	vim/vim/src/gui_gtk_vms.h	332;"	d
XmClipboardStartCopy	vim/vim/src/gui_gtk_vms.h	333;"	d
XmClipboardUnlock	vim/vim/src/gui_gtk_vms.h	334;"	d
XmCreateArrowButton	vim/vim/src/gui_gtk_vms.h	335;"	d
XmCreateArrowButtonGadget	vim/vim/src/gui_gtk_vms.h	336;"	d
XmCreateCascadeButton	vim/vim/src/gui_gtk_vms.h	337;"	d
XmCreateDialogShell	vim/vim/src/gui_gtk_vms.h	338;"	d
XmCreateDragIcon	vim/vim/src/gui_gtk_vms.h	339;"	d
XmCreateDrawingArea	vim/vim/src/gui_gtk_vms.h	340;"	d
XmCreateDrawnButton	vim/vim/src/gui_gtk_vms.h	341;"	d
XmCreateFileSelectionBox	vim/vim/src/gui_gtk_vms.h	342;"	d
XmCreateFileSelectionDialog	vim/vim/src/gui_gtk_vms.h	343;"	d
XmCreateForm	vim/vim/src/gui_gtk_vms.h	344;"	d
XmCreateFormDialog	vim/vim/src/gui_gtk_vms.h	345;"	d
XmCreateFrame	vim/vim/src/gui_gtk_vms.h	346;"	d
XmCreateInformationDialog	vim/vim/src/gui_gtk_vms.h	347;"	d
XmCreateLabelGadget	vim/vim/src/gui_gtk_vms.h	348;"	d
XmCreateMainWindow	vim/vim/src/gui_gtk_vms.h	349;"	d
XmCreateMenuBar	vim/vim/src/gui_gtk_vms.h	350;"	d
XmCreateMessageBox	vim/vim/src/gui_gtk_vms.h	351;"	d
XmCreateMessageDialog	vim/vim/src/gui_gtk_vms.h	352;"	d
XmCreateOptionMenu	vim/vim/src/gui_gtk_vms.h	353;"	d
XmCreatePanedWindow	vim/vim/src/gui_gtk_vms.h	354;"	d
XmCreatePopupMenu	vim/vim/src/gui_gtk_vms.h	355;"	d
XmCreatePromptDialog	vim/vim/src/gui_gtk_vms.h	356;"	d
XmCreatePulldownMenu	vim/vim/src/gui_gtk_vms.h	357;"	d
XmCreatePushButton	vim/vim/src/gui_gtk_vms.h	358;"	d
XmCreatePushButtonGadget	vim/vim/src/gui_gtk_vms.h	359;"	d
XmCreateQuestionDialog	vim/vim/src/gui_gtk_vms.h	360;"	d
XmCreateRadioBox	vim/vim/src/gui_gtk_vms.h	361;"	d
XmCreateRowColumn	vim/vim/src/gui_gtk_vms.h	362;"	d
XmCreateScale	vim/vim/src/gui_gtk_vms.h	363;"	d
XmCreateScrollBar	vim/vim/src/gui_gtk_vms.h	364;"	d
XmCreateScrolledList	vim/vim/src/gui_gtk_vms.h	365;"	d
XmCreateScrolledText	vim/vim/src/gui_gtk_vms.h	366;"	d
XmCreateScrolledWindow	vim/vim/src/gui_gtk_vms.h	367;"	d
XmCreateSelectionDialog	vim/vim/src/gui_gtk_vms.h	368;"	d
XmCreateSeparator	vim/vim/src/gui_gtk_vms.h	369;"	d
XmCreateSeparatorGadget	vim/vim/src/gui_gtk_vms.h	370;"	d
XmCreateTemplateDialog	vim/vim/src/gui_gtk_vms.h	371;"	d
XmCreateText	vim/vim/src/gui_gtk_vms.h	372;"	d
XmCreateTextField	vim/vim/src/gui_gtk_vms.h	373;"	d
XmCreateToggleButton	vim/vim/src/gui_gtk_vms.h	374;"	d
XmCreateToggleButtonGadget	vim/vim/src/gui_gtk_vms.h	375;"	d
XmDragStart	vim/vim/src/gui_gtk_vms.h	376;"	d
XmDropSiteRegister	vim/vim/src/gui_gtk_vms.h	377;"	d
XmDropSiteUnregister	vim/vim/src/gui_gtk_vms.h	378;"	d
XmDropSiteUpdate	vim/vim/src/gui_gtk_vms.h	379;"	d
XmDropTransferStart	vim/vim/src/gui_gtk_vms.h	380;"	d
XmEnhancedButtonClassPart	vim/vim/src/gui_xmebwp.h	/^} XmEnhancedButtonClassPart;$/;"	t	typeref:struct:_XmEnhancedButtonClassPart
XmEnhancedButtonClassRec	vim/vim/src/gui_xmebwp.h	/^} XmEnhancedButtonClassRec;$/;"	t	typeref:struct:__anon4
XmEnhancedButtonPart	vim/vim/src/gui_xmebwp.h	/^} XmEnhancedButtonPart;$/;"	t	typeref:struct:_XmEnhancedButtonPart
XmEnhancedButtonRec	vim/vim/src/gui_xmebwp.h	/^} XmEnhancedButtonRec;$/;"	t	typeref:struct:_XmEnhancedButtonRec
XmEnhancedButtonWidget	vim/vim/src/gui_xmebw.h	/^typedef struct _XmEnhancedButtonRec *XmEnhancedButtonWidget;$/;"	t	typeref:struct:_XmEnhancedButtonRec
XmEnhancedButtonWidgetClass	vim/vim/src/gui_xmebw.h	/^typedef struct _XmEnhancedButtonClassRec *XmEnhancedButtonWidgetClass;$/;"	t	typeref:struct:_XmEnhancedButtonClassRec
XmFOCUS_IGNORE	vim/vim/src/gui_xmebw.c	73;"	d	file:
XmFileSelectionBoxGetChild	vim/vim/src/gui_gtk_vms.h	381;"	d
XmFileSelectionDoSearch	vim/vim/src/gui_gtk_vms.h	382;"	d
XmFontListAppendEntry	vim/vim/src/gui_gtk_vms.h	383;"	d
XmFontListCopy	vim/vim/src/gui_gtk_vms.h	384;"	d
XmFontListCreate	vim/vim/src/gui_gtk_vms.h	385;"	d
XmFontListEntryCreate	vim/vim/src/gui_gtk_vms.h	386;"	d
XmFontListEntryFree	vim/vim/src/gui_gtk_vms.h	387;"	d
XmFontListEntryGetFont	vim/vim/src/gui_gtk_vms.h	388;"	d
XmFontListEntryGetTag	vim/vim/src/gui_gtk_vms.h	389;"	d
XmFontListEntryLoad	vim/vim/src/gui_gtk_vms.h	390;"	d
XmFontListFree	vim/vim/src/gui_gtk_vms.h	391;"	d
XmFontListFreeFontContext	vim/vim/src/gui_gtk_vms.h	392;"	d
XmFontListGetNextFont	vim/vim/src/gui_gtk_vms.h	393;"	d
XmFontListInitFontContext	vim/vim/src/gui_gtk_vms.h	394;"	d
XmFontListNextEntry	vim/vim/src/gui_gtk_vms.h	395;"	d
XmGetColors	vim/vim/src/gui_gtk_vms.h	396;"	d
XmGetFocusWidget	vim/vim/src/gui_gtk_vms.h	397;"	d
XmGetMenuCursor	vim/vim/src/gui_gtk_vms.h	398;"	d
XmGetPixmapByDepth	vim/vim/src/gui_gtk_vms.h	399;"	d
XmGetTearOffControl	vim/vim/src/gui_gtk_vms.h	400;"	d
XmGetXmDisplay	vim/vim/src/gui_gtk_vms.h	401;"	d
XmImMbLookupString	vim/vim/src/gui_gtk_vms.h	402;"	d
XmImRegister	vim/vim/src/gui_gtk_vms.h	403;"	d
XmImSetFocusValues	vim/vim/src/gui_gtk_vms.h	404;"	d
XmImSetValues	vim/vim/src/gui_gtk_vms.h	405;"	d
XmImUnregister	vim/vim/src/gui_gtk_vms.h	406;"	d
XmImUnsetFocus	vim/vim/src/gui_gtk_vms.h	407;"	d
XmInternAtom	vim/vim/src/gui_gtk_vms.h	408;"	d
XmIsEnhancedButton	vim/vim/src/gui_xmebw.h	61;"	d
XmIsMotifWMRunning	vim/vim/src/gui_gtk_vms.h	409;"	d
XmLEFT	vim/vim/src/gui_xmebw.h	55;"	d
XmListAddItem	vim/vim/src/gui_gtk_vms.h	410;"	d
XmListAddItemUnselected	vim/vim/src/gui_gtk_vms.h	411;"	d
XmListAddItemsUnselected	vim/vim/src/gui_gtk_vms.h	412;"	d
XmListDeleteAllItems	vim/vim/src/gui_gtk_vms.h	413;"	d
XmListDeleteItemsPos	vim/vim/src/gui_gtk_vms.h	414;"	d
XmListDeletePos	vim/vim/src/gui_gtk_vms.h	415;"	d
XmListDeselectAllItems	vim/vim/src/gui_gtk_vms.h	416;"	d
XmListDeselectPos	vim/vim/src/gui_gtk_vms.h	417;"	d
XmListGetKbdItemPos	vim/vim/src/gui_gtk_vms.h	418;"	d
XmListGetMatchPos	vim/vim/src/gui_gtk_vms.h	419;"	d
XmListGetSelectedPos	vim/vim/src/gui_gtk_vms.h	420;"	d
XmListPosSelected	vim/vim/src/gui_gtk_vms.h	421;"	d
XmListSelectItem	vim/vim/src/gui_gtk_vms.h	422;"	d
XmListSelectPos	vim/vim/src/gui_gtk_vms.h	423;"	d
XmListSetBottomPos	vim/vim/src/gui_gtk_vms.h	424;"	d
XmListSetItem	vim/vim/src/gui_gtk_vms.h	425;"	d
XmListSetKbdItemPos	vim/vim/src/gui_gtk_vms.h	426;"	d
XmListSetPos	vim/vim/src/gui_gtk_vms.h	427;"	d
XmMainWindowSetAreas	vim/vim/src/gui_gtk_vms.h	428;"	d
XmMenuPosition	vim/vim/src/gui_gtk_vms.h	429;"	d
XmMessageBoxGetChild	vim/vim/src/gui_gtk_vms.h	430;"	d
XmNlabelLocation	vim/vim/src/gui_xmebw.h	35;"	d
XmNpixmapData	vim/vim/src/gui_xmebw.h	42;"	d
XmNpixmapFile	vim/vim/src/gui_xmebw.h	46;"	d
XmNshift	vim/vim/src/gui_xmebw.h	28;"	d
XmOptionButtonGadget	vim/vim/src/gui_gtk_vms.h	431;"	d
XmOptionLabelGadget	vim/vim/src/gui_gtk_vms.h	432;"	d
XmProcessTraversal	vim/vim/src/gui_gtk_vms.h	433;"	d
XmQmotif	vim/vim/src/gui_gtk_vms.h	434;"	d
XmRIGHT	vim/vim/src/gui_xmebw.h	56;"	d
XmRemoveProtocolCallback	vim/vim/src/gui_gtk_vms.h	435;"	d
XmRepTypeGetId	vim/vim/src/gui_gtk_vms.h	436;"	d
XmRepTypeGetRecord	vim/vim/src/gui_gtk_vms.h	437;"	d
XmRepTypeRegister	vim/vim/src/gui_gtk_vms.h	438;"	d
XmRepTypeValidValue	vim/vim/src/gui_gtk_vms.h	439;"	d
XmScrollBarSetValues	vim/vim/src/gui_gtk_vms.h	440;"	d
XmScrolledWindowSetAreas	vim/vim/src/gui_gtk_vms.h	441;"	d
XmSelectionBoxGetChild	vim/vim/src/gui_gtk_vms.h	442;"	d
XmStringByteCompare	vim/vim/src/gui_gtk_vms.h	443;"	d
XmStringCompare	vim/vim/src/gui_gtk_vms.h	444;"	d
XmStringConcat	vim/vim/src/gui_gtk_vms.h	445;"	d
XmStringCopy	vim/vim/src/gui_gtk_vms.h	446;"	d
XmStringCreate	vim/vim/src/gui_gtk_vms.h	447;"	d
XmStringCreateLocalized	vim/vim/src/gui_gtk_vms.h	448;"	d
XmStringCreateLtoR	vim/vim/src/gui_gtk_vms.h	449;"	d
XmStringCreateSimple	vim/vim/src/gui_gtk_vms.h	450;"	d
XmStringDraw	vim/vim/src/gui_gtk_vms.h	451;"	d
XmStringDrawUnderline	vim/vim/src/gui_gtk_vms.h	452;"	d
XmStringExtent	vim/vim/src/gui_gtk_vms.h	453;"	d
XmStringFree	vim/vim/src/gui_gtk_vms.h	454;"	d
XmStringFreeContext	vim/vim/src/gui_gtk_vms.h	455;"	d
XmStringGetLtoR	vim/vim/src/gui_gtk_vms.h	456;"	d
XmStringGetNextComponent	vim/vim/src/gui_gtk_vms.h	457;"	d
XmStringGetNextSegment	vim/vim/src/gui_gtk_vms.h	458;"	d
XmStringInitContext	vim/vim/src/gui_gtk_vms.h	459;"	d
XmStringLength	vim/vim/src/gui_gtk_vms.h	460;"	d
XmStringLtoRCreate	vim/vim/src/gui_gtk_vms.h	461;"	d
XmStringNConcat	vim/vim/src/gui_gtk_vms.h	462;"	d
XmStringSegmentCreate	vim/vim/src/gui_gtk_vms.h	463;"	d
XmStringWidth	vim/vim/src/gui_gtk_vms.h	464;"	d
XmTOP	vim/vim/src/gui_xmebw.h	57;"	d
XmTextClearSelection	vim/vim/src/gui_gtk_vms.h	465;"	d
XmTextFieldGetEditable	vim/vim/src/gui_gtk_vms.h	466;"	d
XmTextFieldGetInsertionPosition	vim/vim/src/gui_gtk_vms.h	467;"	d
XmTextFieldGetLastPosition	vim/vim/src/gui_gtk_vms.h	468;"	d
XmTextFieldGetSelection	vim/vim/src/gui_gtk_vms.h	469;"	d
XmTextFieldGetString	vim/vim/src/gui_gtk_vms.h	470;"	d
XmTextFieldInsert	vim/vim/src/gui_gtk_vms.h	471;"	d
XmTextFieldRemove	vim/vim/src/gui_gtk_vms.h	472;"	d
XmTextFieldSetSelection	vim/vim/src/gui_gtk_vms.h	473;"	d
XmTextFieldSetString	vim/vim/src/gui_gtk_vms.h	474;"	d
XmTextGetCursorPosition	vim/vim/src/gui_gtk_vms.h	475;"	d
XmTextGetInsertionPosition	vim/vim/src/gui_gtk_vms.h	476;"	d
XmTextGetLastPosition	vim/vim/src/gui_gtk_vms.h	477;"	d
XmTextGetMaxLength	vim/vim/src/gui_gtk_vms.h	478;"	d
XmTextGetSelection	vim/vim/src/gui_gtk_vms.h	479;"	d
XmTextGetSelectionPosition	vim/vim/src/gui_gtk_vms.h	480;"	d
XmTextGetString	vim/vim/src/gui_gtk_vms.h	481;"	d
XmTextInsert	vim/vim/src/gui_gtk_vms.h	482;"	d
XmTextRemove	vim/vim/src/gui_gtk_vms.h	483;"	d
XmTextReplace	vim/vim/src/gui_gtk_vms.h	484;"	d
XmTextSetCursorPosition	vim/vim/src/gui_gtk_vms.h	485;"	d
XmTextSetHighlight	vim/vim/src/gui_gtk_vms.h	486;"	d
XmTextSetInsertionPosition	vim/vim/src/gui_gtk_vms.h	487;"	d
XmTextSetSelection	vim/vim/src/gui_gtk_vms.h	488;"	d
XmTextSetString	vim/vim/src/gui_gtk_vms.h	489;"	d
XmToggleButtonGadgetGetState	vim/vim/src/gui_gtk_vms.h	490;"	d
XmToggleButtonGadgetSetState	vim/vim/src/gui_gtk_vms.h	491;"	d
XmToggleButtonGetState	vim/vim/src/gui_gtk_vms.h	492;"	d
XmToggleButtonSetState	vim/vim/src/gui_gtk_vms.h	493;"	d
XmUpdateDisplay	vim/vim/src/gui_gtk_vms.h	494;"	d
XmVaCreateSimpleRadioBox	vim/vim/src/gui_gtk_vms.h	495;"	d
XmbDrawString	vim/vim/src/gui_gtk_vms.h	496;"	d
XmbLookupString	vim/vim/src/gui_gtk_vms.h	497;"	d
XmbResetIC	vim/vim/src/gui_gtk_vms.h	498;"	d
XmbSetWMProperties	vim/vim/src/gui_gtk_vms.h	499;"	d
XmbTextEscapement	vim/vim/src/gui_gtk_vms.h	500;"	d
XmbTextExtents	vim/vim/src/gui_gtk_vms.h	501;"	d
XmbTextListToTextProperty	vim/vim/src/gui_gtk_vms.h	502;"	d
XmbTextPropertyToTextList	vim/vim/src/gui_gtk_vms.h	503;"	d
XmeClearBorder	vim/vim/src/gui_xmebw.c	61;"	d	file:
XmeDrawHighlight	vim/vim/src/gui_xmebw.c	63;"	d	file:
XmeDrawShadows	vim/vim/src/gui_xmebw.c	62;"	d	file:
XmuClientWindow	vim/vim/src/gui_gtk_vms.h	504;"	d
XmuPrintDefaultErrorMessage	vim/vim/src/gui_gtk_vms.h	505;"	d
XpmAllocCloseColors	vim/vim/src/xpm/include/xpm.h	259;"	d
XpmAllocColor	vim/vim/src/xpm/include/xpm.h	262;"	d
XpmAllocColorFunc	vim/vim/src/xpm/include/xpm.h	/^typedef int (*XpmAllocColorFunc)($/;"	t
XpmAttributes	vim/vim/src/xpm/include/xpm.h	/^}      XpmAttributes;$/;"	t	typeref:struct:__anon93
XpmBitmapFormat	vim/vim/src/xpm/include/xpm.h	260;"	d
XpmCharsPerPixel	vim/vim/src/xpm/include/xpm.h	239;"	d
XpmCloseness	vim/vim/src/xpm/include/xpm.h	251;"	d
XpmColor	vim/vim/src/xpm/include/xpm.h	/^}      XpmColor;$/;"	t	typeref:struct:__anon90
XpmColorClosure	vim/vim/src/xpm/include/xpm.h	264;"	d
XpmColorError	vim/vim/src/xpm/include/xpm.h	103;"	d
XpmColorFailed	vim/vim/src/xpm/include/xpm.h	108;"	d
XpmColorKey	vim/vim/src/xpm/include/xpm.h	253;"	d
XpmColorSymbol	vim/vim/src/xpm/include/xpm.h	/^}      XpmColorSymbol;$/;"	t	typeref:struct:__anon88
XpmColorSymbols	vim/vim/src/xpm/include/xpm.h	240;"	d
XpmColorTable	vim/vim/src/xpm/include/xpm.h	255;"	d
XpmColormap	vim/vim/src/xpm/include/xpm.h	235;"	d
XpmComments	vim/vim/src/xpm/include/xpm.h	268;"	d
XpmDepth	vim/vim/src/xpm/include/xpm.h	236;"	d
XpmExactColors	vim/vim/src/xpm/include/xpm.h	250;"	d
XpmExtension	vim/vim/src/xpm/include/xpm.h	/^}      XpmExtension;$/;"	t	typeref:struct:__anon89
XpmExtensions	vim/vim/src/xpm/include/xpm.h	247;"	d
XpmFileInvalid	vim/vim/src/xpm/include/xpm.h	106;"	d
XpmFormat	vim/vim/src/xpm/include/xpm.h	60;"	d
XpmFreeColors	vim/vim/src/xpm/include/xpm.h	263;"	d
XpmFreeColorsFunc	vim/vim/src/xpm/include/xpm.h	/^typedef int (*XpmFreeColorsFunc)($/;"	t
XpmHotspot	vim/vim/src/xpm/include/xpm.h	238;"	d
XpmImage	vim/vim/src/xpm/include/xpm.h	/^}      XpmImage;$/;"	t	typeref:struct:__anon91
XpmIncludeVersion	vim/vim/src/xpm/include/xpm.h	63;"	d
XpmInfo	vim/vim/src/xpm/include/xpm.h	/^}      XpmInfo;$/;"	t	typeref:struct:__anon92
XpmInfos	vim/vim/src/xpm/include/xpm.h	243;"	d
XpmNoMemory	vim/vim/src/xpm/include/xpm.h	107;"	d
XpmOpenFailed	vim/vim/src/xpm/include/xpm.h	105;"	d
XpmPixmapColorError	vim/vim/src/xpm/include/xpm.h	469;"	d
XpmPixmapColorFailed	vim/vim/src/xpm/include/xpm.h	474;"	d
XpmPixmapFileInvalid	vim/vim/src/xpm/include/xpm.h	472;"	d
XpmPixmapNoMemory	vim/vim/src/xpm/include/xpm.h	473;"	d
XpmPixmapOpenFailed	vim/vim/src/xpm/include/xpm.h	471;"	d
XpmPixmapSuccess	vim/vim/src/xpm/include/xpm.h	470;"	d
XpmRGBCloseness	vim/vim/src/xpm/include/xpm.h	252;"	d
XpmReadPixmapFile	vim/vim/src/xpm/include/xpm.h	476;"	d
XpmReturnAllocPixels	vim/vim/src/xpm/include/xpm.h	258;"	d
XpmReturnColorTable	vim/vim/src/xpm/include/xpm.h	256;"	d
XpmReturnComments	vim/vim/src/xpm/include/xpm.h	269;"	d
XpmReturnExtensions	vim/vim/src/xpm/include/xpm.h	248;"	d
XpmReturnInfos	vim/vim/src/xpm/include/xpm.h	244;"	d
XpmReturnPixels	vim/vim/src/xpm/include/xpm.h	246;"	d
XpmRevision	vim/vim/src/xpm/include/xpm.h	62;"	d
XpmRgbFilename	vim/vim/src/xpm/include/xpm.h	241;"	d
XpmSize	vim/vim/src/xpm/include/xpm.h	237;"	d
XpmSuccess	vim/vim/src/xpm/include/xpm.h	104;"	d
XpmUndefPixel	vim/vim/src/xpm/include/xpm.h	273;"	d
XpmUndefPixel	vim/vim/src/xpm/include/xpm.h	276;"	d
XpmVersion	vim/vim/src/xpm/include/xpm.h	61;"	d
XpmVisual	vim/vim/src/xpm/include/xpm.h	234;"	d
XpmWritePixmapFile	vim/vim/src/xpm/include/xpm.h	478;"	d
XrmGetDatabase	vim/vim/src/gui_gtk_vms.h	506;"	d
XrmGetResource	vim/vim/src/gui_gtk_vms.h	507;"	d
XrmInitialize	vim/vim/src/auto/configure	/^XrmInitialize ()$/;"	f
XrmPutStringResource	vim/vim/src/gui_gtk_vms.h	508;"	d
XrmQuarkToString	vim/vim/src/gui_gtk_vms.h	509;"	d
XrmStringToQuark	vim/vim/src/gui_gtk_vms.h	510;"	d
XtAddCallback	vim/vim/src/gui_gtk_vms.h	511;"	d
XtAddCallbacks	vim/vim/src/gui_gtk_vms.h	512;"	d
XtAddEventHandler	vim/vim/src/gui_gtk_vms.h	513;"	d
XtAddGrab	vim/vim/src/gui_gtk_vms.h	514;"	d
XtAllocateGC	vim/vim/src/gui_gtk_vms.h	515;"	d
XtAppAddActions	vim/vim/src/gui_gtk_vms.h	516;"	d
XtAppAddInput	vim/vim/src/gui_gtk_vms.h	517;"	d
XtAppAddTimeOut	vim/vim/src/gui_gtk_vms.h	518;"	d
XtAppCreateShell	vim/vim/src/gui_gtk_vms.h	519;"	d
XtAppInitialize	vim/vim/src/gui_gtk_vms.h	520;"	d
XtAppNextEvent	vim/vim/src/gui_gtk_vms.h	521;"	d
XtAppPeekEvent	vim/vim/src/gui_gtk_vms.h	522;"	d
XtAppPending	vim/vim/src/gui_gtk_vms.h	523;"	d
XtAppProcessEvent	vim/vim/src/gui_gtk_vms.h	524;"	d
XtAppSetErrorHandler	vim/vim/src/gui_gtk_vms.h	525;"	d
XtAppSetFallbackResources	vim/vim/src/gui_gtk_vms.h	526;"	d
XtAppSetWarningHandler	vim/vim/src/gui_gtk_vms.h	527;"	d
XtAppSetWarningMsgHandler	vim/vim/src/gui_gtk_vms.h	528;"	d
XtAppWarning	vim/vim/src/gui_gtk_vms.h	529;"	d
XtCBoldFont	vim/vim/src/gui_x11.c	265;"	d	file:
XtCBoldItalicFont	vim/vim/src/gui_x11.c	269;"	d	file:
XtCBottomShadowPixel	vim/vim/src/gui_at_sb.h	81;"	d
XtCItalicFont	vim/vim/src/gui_x11.c	267;"	d	file:
XtCLimitThumb	vim/vim/src/gui_at_sb.h	82;"	d
XtCMaxOfThumb	vim/vim/src/gui_at_sb.h	78;"	d
XtCMenuBackground	vim/vim/src/gui_x11.c	282;"	d	file:
XtCMenuFont	vim/vim/src/gui_x11.c	275;"	d	file:
XtCMenuFontSet	vim/vim/src/gui_x11.c	277;"	d	file:
XtCMenuForeground	vim/vim/src/gui_x11.c	284;"	d	file:
XtCMenuHeight	vim/vim/src/gui_x11.c	273;"	d	file:
XtCMinimumThumb	vim/vim/src/gui_at_sb.h	75;"	d
XtCScrollBackground	vim/vim/src/gui_x11.c	288;"	d	file:
XtCScrollForeground	vim/vim/src/gui_x11.c	290;"	d	file:
XtCScrollbarWidth	vim/vim/src/gui_x11.c	271;"	d	file:
XtCShadowWidth	vim/vim/src/gui_at_sb.h	79;"	d
XtCShown	vim/vim/src/gui_at_sb.h	76;"	d
XtCTooltipBackground	vim/vim/src/gui_x11.c	294;"	d	file:
XtCTooltipFont	vim/vim/src/gui_x11.c	298;"	d	file:
XtCTooltipForeground	vim/vim/src/gui_x11.c	296;"	d	file:
XtCTopOfThumb	vim/vim/src/gui_at_sb.h	77;"	d
XtCTopShadowPixel	vim/vim/src/gui_at_sb.h	80;"	d
XtCallActionProc	vim/vim/src/gui_gtk_vms.h	530;"	d
XtCallCallbackList	vim/vim/src/gui_gtk_vms.h	531;"	d
XtCallCallbacks	vim/vim/src/gui_gtk_vms.h	532;"	d
XtConfigureWidget	vim/vim/src/gui_gtk_vms.h	533;"	d
XtConvertAndStore	vim/vim/src/gui_gtk_vms.h	534;"	d
XtCreateApplicationContext	vim/vim/src/gui_gtk_vms.h	535;"	d
XtCreateManagedWidget	vim/vim/src/gui_gtk_vms.h	536;"	d
XtCreatePopupShell	vim/vim/src/gui_gtk_vms.h	537;"	d
XtCreateWidget	vim/vim/src/gui_gtk_vms.h	538;"	d
XtDatabase	vim/vim/src/gui_gtk_vms.h	539;"	d
XtDestroyWidget	vim/vim/src/gui_gtk_vms.h	540;"	d
XtDisownSelection	vim/vim/src/gui_gtk_vms.h	541;"	d
XtDispatchEvent	vim/vim/src/gui_gtk_vms.h	542;"	d
XtDisplayOfObject	vim/vim/src/gui_gtk_vms.h	543;"	d
XtDisplayStringConvWarning	vim/vim/src/gui_gtk_vms.h	544;"	d
XtDisplayToApplicationContext	vim/vim/src/gui_gtk_vms.h	545;"	d
XtFree	vim/vim/src/gui_gtk_vms.h	/^extern void XtFree(char*);$/;"	p	signature:(char*)
XtFree	vim/vim/src/gui_gtk_vms.h	546;"	d
XtGetActionKeysym	vim/vim/src/gui_gtk_vms.h	547;"	d
XtGetActionList	vim/vim/src/gui_gtk_vms.h	548;"	d
XtGetApplicationNameAndClass	vim/vim/src/gui_gtk_vms.h	549;"	d
XtGetApplicationResources	vim/vim/src/gui_gtk_vms.h	550;"	d
XtGetGC	vim/vim/src/gui_gtk_vms.h	551;"	d
XtGetMultiClickTime	vim/vim/src/gui_gtk_vms.h	552;"	d
XtGetSelectionValue	vim/vim/src/gui_gtk_vms.h	553;"	d
XtGetSelectionValues	vim/vim/src/gui_gtk_vms.h	554;"	d
XtGetSubresources	vim/vim/src/gui_gtk_vms.h	555;"	d
XtGetValues	vim/vim/src/gui_gtk_vms.h	556;"	d
XtGrabKeyboard	vim/vim/src/gui_gtk_vms.h	557;"	d
XtGrabPointer	vim/vim/src/gui_gtk_vms.h	558;"	d
XtHasCallbacks	vim/vim/src/gui_gtk_vms.h	559;"	d
XtInitializeWidgetClass	vim/vim/src/gui_gtk_vms.h	560;"	d
XtInsertEventHandler	vim/vim/src/gui_gtk_vms.h	561;"	d
XtIsManaged	vim/vim/src/gui_gtk_vms.h	562;"	d
XtIsObject	vim/vim/src/gui_gtk_vms.h	563;"	d
XtIsSensitive	vim/vim/src/gui_gtk_vms.h	564;"	d
XtIsSubclass	vim/vim/src/gui_gtk_vms.h	565;"	d
XtLastTimestampProcessed	vim/vim/src/gui_gtk_vms.h	566;"	d
XtMakeGeometryRequest	vim/vim/src/gui_gtk_vms.h	567;"	d
XtMakeResizeRequest	vim/vim/src/gui_gtk_vms.h	568;"	d
XtMalloc	vim/vim/src/gui_gtk_vms.h	569;"	d
XtManageChild	vim/vim/src/gui_gtk_vms.h	570;"	d
XtManageChildren	vim/vim/src/gui_gtk_vms.h	571;"	d
XtMergeArgLists	vim/vim/src/gui_gtk_vms.h	572;"	d
XtMoveWidget	vim/vim/src/gui_gtk_vms.h	573;"	d
XtName	vim/vim/src/gui_gtk_vms.h	574;"	d
XtNameToWidget	vim/vim/src/gui_gtk_vms.h	575;"	d
XtNboldFont	vim/vim/src/gui_x11.c	264;"	d	file:
XtNboldItalicFont	vim/vim/src/gui_x11.c	268;"	d	file:
XtNbottomShadowPixel	vim/vim/src/gui_at_sb.h	89;"	d
XtNitalicFont	vim/vim/src/gui_x11.c	266;"	d	file:
XtNlimitThumb	vim/vim/src/gui_at_sb.h	90;"	d
XtNmaxOfThumb	vim/vim/src/gui_at_sb.h	86;"	d
XtNmenuBackground	vim/vim/src/gui_x11.c	281;"	d	file:
XtNmenuFont	vim/vim/src/gui_x11.c	274;"	d	file:
XtNmenuFontSet	vim/vim/src/gui_x11.c	276;"	d	file:
XtNmenuForeground	vim/vim/src/gui_x11.c	283;"	d	file:
XtNmenuHeight	vim/vim/src/gui_x11.c	272;"	d	file:
XtNminimumThumb	vim/vim/src/gui_at_sb.h	84;"	d
XtNscrollBackground	vim/vim/src/gui_x11.c	287;"	d	file:
XtNscrollForeground	vim/vim/src/gui_x11.c	289;"	d	file:
XtNscrollbarWidth	vim/vim/src/gui_x11.c	270;"	d	file:
XtNshadowWidth	vim/vim/src/gui_at_sb.h	87;"	d
XtNtooltipBackground	vim/vim/src/gui_x11.c	293;"	d	file:
XtNtooltipFont	vim/vim/src/gui_x11.c	297;"	d	file:
XtNtooltipForeground	vim/vim/src/gui_x11.c	295;"	d	file:
XtNtopOfThumb	vim/vim/src/gui_at_sb.h	85;"	d
XtNtopShadowPixel	vim/vim/src/gui_at_sb.h	88;"	d
XtOpenDisplay	vim/vim/src/gui_gtk_vms.h	576;"	d
XtOverrideTranslations	vim/vim/src/gui_gtk_vms.h	577;"	d
XtOwnSelection	vim/vim/src/gui_gtk_vms.h	578;"	d
XtParent	vim/vim/src/gui_gtk_vms.h	579;"	d
XtParseTranslationTable	vim/vim/src/gui_gtk_vms.h	580;"	d
XtPopdown	vim/vim/src/gui_gtk_vms.h	581;"	d
XtPopup	vim/vim/src/gui_gtk_vms.h	582;"	d
XtQueryGeometry	vim/vim/src/gui_gtk_vms.h	583;"	d
XtRealizeWidget	vim/vim/src/gui_gtk_vms.h	584;"	d
XtRealloc	vim/vim/src/gui_gtk_vms.h	585;"	d
XtRegisterDrawable	vim/vim/src/gui_gtk_vms.h	738;"	d
XtReleaseGC	vim/vim/src/gui_gtk_vms.h	586;"	d
XtRemoveAllCallbacks	vim/vim/src/gui_gtk_vms.h	587;"	d
XtRemoveCallback	vim/vim/src/gui_gtk_vms.h	588;"	d
XtRemoveEventHandler	vim/vim/src/gui_gtk_vms.h	589;"	d
XtRemoveGrab	vim/vim/src/gui_gtk_vms.h	590;"	d
XtRemoveInput	vim/vim/src/gui_gtk_vms.h	591;"	d
XtRemoveTimeOut	vim/vim/src/gui_gtk_vms.h	592;"	d
XtResizeWidget	vim/vim/src/gui_gtk_vms.h	593;"	d
XtResolvePathname	vim/vim/src/gui_gtk_vms.h	594;"	d
XtSetKeyboardFocus	vim/vim/src/gui_gtk_vms.h	595;"	d
XtSetMappedWhenManaged	vim/vim/src/gui_gtk_vms.h	596;"	d
XtSetSensitive	vim/vim/src/gui_gtk_vms.h	597;"	d
XtSetTypeConverter	vim/vim/src/gui_gtk_vms.h	598;"	d
XtSetValues	vim/vim/src/gui_gtk_vms.h	599;"	d
XtShellStrings	vim/vim/src/gui_gtk_vms.h	600;"	d
XtStrings	vim/vim/src/gui_gtk_vms.h	601;"	d
XtToolkitInitialize	vim/vim/src/gui_gtk_vms.h	602;"	d
XtTranslateCoords	vim/vim/src/gui_gtk_vms.h	603;"	d
XtTranslateKeycode	vim/vim/src/gui_gtk_vms.h	604;"	d
XtUngrabKeyboard	vim/vim/src/gui_gtk_vms.h	605;"	d
XtUngrabPointer	vim/vim/src/gui_gtk_vms.h	606;"	d
XtUnmanageChild	vim/vim/src/gui_gtk_vms.h	607;"	d
XtUnmanageChildren	vim/vim/src/gui_gtk_vms.h	608;"	d
XtUnrealizeWidget	vim/vim/src/gui_gtk_vms.h	609;"	d
XtUnregisterDrawable	vim/vim/src/gui_gtk_vms.h	739;"	d
XtVaAppCreateShell	vim/vim/src/gui_gtk_vms.h	610;"	d
XtVaCreateManagedWidget	vim/vim/src/gui_gtk_vms.h	611;"	d
XtVaCreatePopupShell	vim/vim/src/gui_gtk_vms.h	612;"	d
XtVaCreateWidget	vim/vim/src/gui_gtk_vms.h	613;"	d
XtVaGetValues	vim/vim/src/gui_gtk_vms.h	614;"	d
XtVaSetValues	vim/vim/src/gui_gtk_vms.h	615;"	d
XtWarning	vim/vim/src/gui_gtk_vms.h	616;"	d
XtWidgetToApplicationContext	vim/vim/src/gui_gtk_vms.h	617;"	d
XtWindow	vim/vim/src/gui_gtk_vms.h	618;"	d
XtWindowOfObject	vim/vim/src/gui_gtk_vms.h	619;"	d
XtWindowToWidget	vim/vim/src/gui_gtk_vms.h	620;"	d
XwcDrawString	vim/vim/src/gui_gtk_vms.h	621;"	d
XwcFreeStringList	vim/vim/src/gui_gtk_vms.h	622;"	d
XwcTextEscapement	vim/vim/src/gui_gtk_vms.h	623;"	d
XwcTextExtents	vim/vim/src/gui_gtk_vms.h	624;"	d
XwcTextListToTextProperty	vim/vim/src/gui_gtk_vms.h	625;"	d
XwcTextPropertyToTextList	vim/vim/src/gui_gtk_vms.h	626;"	d
YE	vim/vim/src/farsi.h	142;"	d
YEE	vim/vim/src/farsi.h	145;"	d
YEE_	vim/vim/src/farsi.h	63;"	d
YE_	vim/vim/src/farsi.h	64;"	d
Y_2_ROW	vim/vim/src/gui.h	102;"	d
Y_2_ROW	vim/vim/src/gui.h	110;"	d
Y_acute	vim/vim/src/regexp_nfa.c	782;"	d	file:
Z	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
Z	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
Z	vim/vim/runtime/macros/maze/mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
ZAD	vim/vim/src/farsi.h	128;"	d
ZAL	vim/vim/src/farsi.h	121;"	d
ZCLOSE	vim/vim/src/regexp.c	226;"	d	file:
ZE	vim/vim/src/farsi.h	123;"	d
ZEROR	vim/vim/src/ex_cmds.h	46;"	d
ZERO_BL	vim/vim/src/memline.c	/^typedef struct block0		ZERO_BL;    \/* contents of the first block *\/$/;"	t	typeref:struct:block0	file:
ZOPEN	vim/vim/src/regexp.c	224;"	d	file:
ZPixmap	vim/vim/src/xpm/include/simx.h	123;"	d
ZREF	vim/vim/src/regexp.c	227;"	d	file:
_	vim/vim/src/GvimExt/gvimext.cpp	155;"	d	file:
_	vim/vim/src/GvimExt/gvimext.cpp	157;"	d	file:
_	vim/vim/src/gui_gtk.c	52;"	d	file:
_	vim/vim/src/gui_gtk_x11.c	36;"	d	file:
_	vim/vim/src/if_ruby.c	127;"	d	file:
_	vim/vim/src/vim.h	2347;"	d
_	vim/vim/src/vim.h	590;"	d
_	vim/vim/src/vim.h	603;"	d
_	vim/vim/src/vim.h	612;"	d
_APS_NEXT_COMMAND_VALUE	vim/vim/src/GvimExt/resource.h	11;"	d
_APS_NEXT_COMMAND_VALUE	vim/vim/src/VisVim/Resource.h	26;"	d
_APS_NEXT_CONTROL_VALUE	vim/vim/src/GvimExt/resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	vim/vim/src/VisVim/Resource.h	27;"	d
_APS_NEXT_RESOURCE_VALUE	vim/vim/src/GvimExt/resource.h	10;"	d
_APS_NEXT_RESOURCE_VALUE	vim/vim/src/VisVim/Resource.h	25;"	d
_APS_NEXT_SYMED_VALUE	vim/vim/src/GvimExt/resource.h	13;"	d
_APS_NEXT_SYMED_VALUE	vim/vim/src/VisVim/Resource.h	28;"	d
_AYN	vim/vim/src/farsi.h	42;"	d
_AYN_	vim/vim/src/farsi.h	43;"	d
_BE	vim/vim/src/farsi.h	30;"	d
_CHE	vim/vim/src/farsi.h	35;"	d
_CRT_NONSTDC_NO_DEPRECATE	vim/vim/src/GvimExt/gvimext.h	39;"	d
_CRT_NONSTDC_NO_DEPRECATE	vim/vim/src/dosinst.h	16;"	d
_CRT_NONSTDC_NO_DEPRECATE	vim/vim/src/os_win32.h	24;"	d
_CRT_NONSTDC_NO_DEPRECATE	vim/vim/src/vim.h	135;"	d
_CRT_NONSTDC_NO_DEPRECATE	vim/vim/src/vimio.h	13;"	d
_CRT_NONSTDC_NO_DEPRECATE	vim/vim/src/xxd/xxd.c	71;"	d	file:
_CRT_SECURE_NO_DEPRECATE	vim/vim/src/GvimExt/gvimext.h	38;"	d
_CRT_SECURE_NO_DEPRECATE	vim/vim/src/dosinst.h	15;"	d
_CRT_SECURE_NO_DEPRECATE	vim/vim/src/os_win32.h	23;"	d
_CRT_SECURE_NO_DEPRECATE	vim/vim/src/vim.h	134;"	d
_CRT_SECURE_NO_DEPRECATE	vim/vim/src/vimio.h	12;"	d
_CRT_SECURE_NO_DEPRECATE	vim/vim/src/xxd/xxd.c	70;"	d	file:
_ConvertFromPyObject	vim/vim/src/if_py_both.h	/^_ConvertFromPyObject(PyObject *obj, typval_T *tv, PyObject *lookup_dict)$/;"	f	signature:(PyObject *obj, typval_T *tv, PyObject *lookup_dict)
_ConvertFromPyObject	vim/vim/src/if_py_both.h	/^static int _ConvertFromPyObject(PyObject *, typval_T *, PyObject *);$/;"	p	signature:(PyObject *, typval_T *, PyObject *)
_DEBUG	vim/vim/src/if_python.c	43;"	d	file:
_DEBUG	vim/vim/src/if_python3.c	47;"	d	file:
_DEBUG	vim/vim/src/vim.h	2353;"	d
_DialogInfo	vim/vim/src/gui_gtk.c	/^typedef struct _DialogInfo$/;"	s	file:
_DialogInfo::dialog	vim/vim/src/gui_gtk.c	/^    GtkDialog	*dialog;	    \/* Widget of the dialog *\/$/;"	m	struct:_DialogInfo	file:	access:public
_DialogInfo::ignore_enter	vim/vim/src/gui_gtk.c	/^    int		ignore_enter;	    \/* no default button, ignore "Enter" *\/$/;"	m	struct:_DialogInfo	file:	access:public
_DialogInfo::noalt	vim/vim/src/gui_gtk.c	/^    int		noalt;		    \/* accept accelerators without Alt *\/$/;"	m	struct:_DialogInfo	file:	access:public
_DictionaryItem	vim/vim/src/if_py_both.h	/^_DictionaryItem(DictionaryObject *self, PyObject *args, int flags)$/;"	f	signature:(DictionaryObject *self, PyObject *args, int flags)
_DllVersionInfo	vim/vim/src/gui_w32.c	/^typedef struct _DllVersionInfo$/;"	s	file:
_DllVersionInfo::cbSize	vim/vim/src/gui_w32.c	/^    DWORD cbSize;$/;"	m	struct:_DllVersionInfo	file:	access:public
_DllVersionInfo::dwBuildNumber	vim/vim/src/gui_w32.c	/^    DWORD dwBuildNumber;$/;"	m	struct:_DllVersionInfo	file:	access:public
_DllVersionInfo::dwMajorVersion	vim/vim/src/gui_w32.c	/^    DWORD dwMajorVersion;$/;"	m	struct:_DllVersionInfo	file:	access:public
_DllVersionInfo::dwMinorVersion	vim/vim/src/gui_w32.c	/^    DWORD dwMinorVersion;$/;"	m	struct:_DllVersionInfo	file:	access:public
_DllVersionInfo::dwPlatformID	vim/vim/src/gui_w32.c	/^    DWORD dwPlatformID;$/;"	m	struct:_DllVersionInfo	file:	access:public
_DuringSizing	vim/vim/src/gui_w32.c	/^_DuringSizing($/;"	f	file:	signature:( UINT fwSide, LPRECT lprc)
_FE	vim/vim/src/farsi.h	48;"	d
_GAF	vim/vim/src/farsi.h	51;"	d
_GHAF	vim/vim/src/farsi.h	49;"	d
_GHAYN	vim/vim/src/farsi.h	45;"	d
_GHAYN_	vim/vim/src/farsi.h	46;"	d
_GtkForm	vim/vim/src/gui_gtk_f.h	/^struct _GtkForm$/;"	s
_GtkForm::bin_window	vim/vim/src/gui_gtk_f.h	/^    GdkWindow *bin_window;$/;"	m	struct:_GtkForm	access:public
_GtkForm::children	vim/vim/src/gui_gtk_f.h	/^    GList *children;$/;"	m	struct:_GtkForm	access:public
_GtkForm::container	vim/vim/src/gui_gtk_f.h	/^    GtkContainer container;$/;"	m	struct:_GtkForm	access:public
_GtkForm::freeze_count	vim/vim/src/gui_gtk_f.h	/^    gint freeze_count;$/;"	m	struct:_GtkForm	access:public
_GtkFormChild	vim/vim/src/gui_gtk_f.c	/^struct _GtkFormChild$/;"	s	file:
_GtkFormChild::mapped	vim/vim/src/gui_gtk_f.c	/^    gint mapped;$/;"	m	struct:_GtkFormChild	file:	access:public
_GtkFormChild::widget	vim/vim/src/gui_gtk_f.c	/^    GtkWidget *widget;$/;"	m	struct:_GtkFormChild	file:	access:public
_GtkFormChild::window	vim/vim/src/gui_gtk_f.c	/^    GdkWindow *window;$/;"	m	struct:_GtkFormChild	file:	access:public
_GtkFormChild::x	vim/vim/src/gui_gtk_f.c	/^    gint x;		\/* relative subwidget x position *\/$/;"	m	struct:_GtkFormChild	file:	access:public
_GtkFormChild::y	vim/vim/src/gui_gtk_f.c	/^    gint y;		\/* relative subwidget y position *\/$/;"	m	struct:_GtkFormChild	file:	access:public
_GtkFormClass	vim/vim/src/gui_gtk_f.h	/^struct _GtkFormClass$/;"	s
_GtkFormClass::parent_class	vim/vim/src/gui_gtk_f.h	/^    GtkContainerClass parent_class;$/;"	m	struct:_GtkFormClass	access:public
_HE	vim/vim/src/farsi.h	56;"	d
_HE_	vim/vim/src/farsi.h	57;"	d
_HE_J	vim/vim/src/farsi.h	36;"	d
_IE	vim/vim/src/farsi.h	59;"	d
_IF_MZSCH_H_	vim/vim/src/if_mzsch.h	6;"	d
_IID	vim/vim/src/iid_ole.c	/^typedef struct _IID$/;"	s	file:
_IID::c	vim/vim/src/iid_ole.c	/^    unsigned char  c[8];$/;"	m	struct:_IID	file:	access:public
_IID::s1	vim/vim/src/iid_ole.c	/^    unsigned short s1;$/;"	m	struct:_IID	file:	access:public
_IID::s2	vim/vim/src/iid_ole.c	/^    unsigned short s2;$/;"	m	struct:_IID	file:	access:public
_IID::x	vim/vim/src/iid_ole.c	/^    unsigned long x;$/;"	m	struct:_IID	file:	access:public
_INC_GLOBAL_IME	vim/vim/src/glbl_ime.h	11;"	d
_INTEGRATION_H	vim/vim/src/integration.h	15;"	d
_IO_PTEM_H	vim/vim/src/os_unixx.h	101;"	d
_ISCYGPTY_H	vim/vim/src/iscygpty.h	31;"	d
_JIM	vim/vim/src/farsi.h	34;"	d
_KAF	vim/vim/src/farsi.h	50;"	d
_KAF_H	vim/vim/src/farsi.h	144;"	d
_LAM	vim/vim/src/farsi.h	52;"	d
_MIM	vim/vim/src/farsi.h	54;"	d
_Module	vim/vim/src/VisVim/VisVim.cpp	/^CComModule _Module;$/;"	v
_NOON	vim/vim/src/farsi.h	55;"	d
_NO_PROTO	vim/vim/src/os_unix.h	48;"	d
_OnActivateApp	vim/vim/src/gui_w32.c	/^_OnActivateApp($/;"	f	file:	signature:( HWND hwnd, BOOL fActivate, DWORD dwThreadId)
_OnBlinkTimer	vim/vim/src/gui_w32.c	/^_OnBlinkTimer($/;"	f	file:	signature:( HWND hwnd, UINT uMsg UNUSED, UINT idEvent, DWORD dwTime UNUSED)
_OnChar	vim/vim/src/gui_w32.c	/^_OnChar($/;"	f	file:	signature:( HWND hwnd UNUSED, UINT ch, int cRepeat UNUSED)
_OnClose	vim/vim/src/gui_w32.c	/^_OnClose(HWND hwnd UNUSED)$/;"	f	file:	signature:(HWND hwnd UNUSED)
_OnDeadChar	vim/vim/src/gui_w32.c	/^_OnDeadChar($/;"	f	file:	signature:( HWND hwnd UNUSED, UINT ch UNUSED, int cRepeat UNUSED)
_OnDestroy	vim/vim/src/gui_w32.c	/^_OnDestroy(HWND hwnd)$/;"	f	file:	signature:(HWND hwnd)
_OnDropFiles	vim/vim/src/gui_w32.c	/^_OnDropFiles($/;"	f	file:	signature:( HWND hwnd UNUSED, HDROP hDrop)
_OnEndSession	vim/vim/src/gui_w32.c	/^_OnEndSession(void)$/;"	f	file:	signature:(void)
_OnFindRepl	vim/vim/src/gui_w32.c	/^_OnFindRepl(void)$/;"	f	file:	signature:(void)
_OnImeComposition	vim/vim/src/gui_w32.c	/^_OnImeComposition(HWND hwnd, WPARAM dbcs UNUSED, LPARAM param)$/;"	f	file:	signature:(HWND hwnd, WPARAM dbcs UNUSED, LPARAM param)
_OnImeComposition	vim/vim/src/gui_w32.c	/^static LRESULT _OnImeComposition(HWND hwnd, WPARAM dbcs, LPARAM param);$/;"	p	file:	signature:(HWND hwnd, WPARAM dbcs, LPARAM param)
_OnImeNotify	vim/vim/src/gui_w32.c	/^_OnImeNotify(HWND hWnd, DWORD dwCommand, DWORD dwData UNUSED)$/;"	f	file:	signature:(HWND hWnd, DWORD dwCommand, DWORD dwData UNUSED)
_OnImeNotify	vim/vim/src/gui_w32.c	/^static LRESULT _OnImeNotify(HWND hWnd, DWORD dwCommand, DWORD dwData);$/;"	p	file:	signature:(HWND hWnd, DWORD dwCommand, DWORD dwData)
_OnKillFocus	vim/vim/src/gui_w32.c	/^_OnKillFocus($/;"	f	file:	signature:( HWND hwnd, HWND hwndNewFocus)
_OnMenu	vim/vim/src/gui_w32.c	/^_OnMenu($/;"	f	file:	signature:( HWND hwnd UNUSED, int id, HWND hwndCtl UNUSED, UINT codeNotify UNUSED)
_OnMouseButtonDown	vim/vim/src/gui_w32.c	/^_OnMouseButtonDown($/;"	f	file:	signature:( HWND hwnd UNUSED, BOOL fDoubleClick UNUSED, int x, int y, UINT keyFlags)
_OnMouseEvent	vim/vim/src/gui_w32.c	/^_OnMouseEvent($/;"	f	file:	signature:( int button, int x, int y, int repeated_click, UINT keyFlags)
_OnMouseMoveOrRelease	vim/vim/src/gui_w32.c	/^_OnMouseMoveOrRelease($/;"	f	file:	signature:( HWND hwnd UNUSED, int x, int y, UINT keyFlags)
_OnMouseWheel	vim/vim/src/gui_w32.c	/^_OnMouseWheel($/;"	f	file:	signature:( HWND hwnd, short zDelta)
_OnPaint	vim/vim/src/gui_w32.c	/^_OnPaint($/;"	f	file:	signature:( HWND hwnd)
_OnPaint	vim/vim/src/gui_w32.c	/^static void _OnPaint( HWND hwnd);$/;"	p	file:	signature:( HWND hwnd)
_OnScroll	vim/vim/src/gui_w32.c	/^_OnScroll($/;"	f	file:	signature:( HWND hwnd UNUSED, HWND hwndCtl, UINT code, int pos)
_OnSetFocus	vim/vim/src/gui_w32.c	/^_OnSetFocus($/;"	f	file:	signature:( HWND hwnd, HWND hwndOldFocus)
_OnSettingChange	vim/vim/src/gui_w32.c	/^_OnSettingChange(UINT n)$/;"	f	file:	signature:(UINT n)
_OnSize	vim/vim/src/gui_w32.c	/^_OnSize($/;"	f	file:	signature:( HWND hwnd, UINT state UNUSED, int cx, int cy)
_OnSysChar	vim/vim/src/gui_w32.c	/^_OnSysChar($/;"	f	file:	signature:( HWND hwnd UNUSED, UINT cch, int cRepeat UNUSED)
_OnTimer	vim/vim/src/gui_w32.c	/^_OnTimer($/;"	f	file:	signature:( HWND hwnd, UINT uMsg UNUSED, UINT idEvent, DWORD dwTime UNUSED)
_OnWindowPosChanged	vim/vim/src/gui_w32.c	/^_OnWindowPosChanged($/;"	f	file:	signature:( HWND hwnd, const LPWINDOWPOS lpwpos)
_PE	vim/vim/src/farsi.h	31;"	d
_POSIX_C_SOURCE	vim/vim/src/if_python.c	59;"	d	file:
_POSIX_C_SOURCE	vim/vim/src/if_python3.c	67;"	d	file:
_POSIX_THREADS	vim/vim/src/if_python.c	35;"	d	file:
_POSIX_THREADS	vim/vim/src/if_python3.c	39;"	d	file:
_PROTO_H	vim/vim/src/proto.h	298;"	d
_PyObject_CallFunction_SizeT	vim/vim/src/if_python3.c	203;"	d	file:
_PyObject_DebugFree	vim/vim/src/if_python.c	294;"	d	file:
_PyObject_DebugFree	vim/vim/src/if_python3.c	259;"	d	file:
_PyObject_DebugMalloc	vim/vim/src/if_python.c	293;"	d	file:
_PyObject_DebugMalloc	vim/vim/src/if_python3.c	258;"	d	file:
_PyObject_GC_Del	vim/vim/src/if_python.c	268;"	d	file:
_PyObject_GC_New	vim/vim/src/if_python.c	265;"	d	file:
_PyObject_GC_New	vim/vim/src/if_python3.c	264;"	d	file:
_PyObject_GC_UnTrack	vim/vim/src/if_python.c	269;"	d	file:
_PyObject_New	vim/vim/src/if_python.c	264;"	d	file:
_PyObject_NextNotImplemented	vim/vim/src/if_python.c	275;"	d	file:
_PyObject_NextNotImplemented	vim/vim/src/if_python3.c	220;"	d	file:
_PyUnicode_AsString	vim/vim/src/if_python3.c	225;"	d	file:
_PyUnicode_AsString	vim/vim/src/if_python3.c	226;"	d	file:
_PyUnicode_AsString	vim/vim/src/if_python3.c	228;"	d	file:
_Py_Dealloc	vim/vim/src/if_python.c	288;"	d	file:
_Py_Dealloc	vim/vim/src/if_python3.c	252;"	d	file:
_Py_FalseStruct	vim/vim/src/if_python3.c	218;"	d	file:
_Py_NegativeRefcount	vim/vim/src/if_python.c	286;"	d	file:
_Py_NegativeRefcount	vim/vim/src/if_python3.c	250;"	d	file:
_Py_NoneStruct	vim/vim/src/if_python.c	277;"	d	file:
_Py_NoneStruct	vim/vim/src/if_python3.c	217;"	d	file:
_Py_RefTotal	vim/vim/src/if_python.c	287;"	d	file:
_Py_RefTotal	vim/vim/src/if_python3.c	251;"	d	file:
_Py_TrueStruct	vim/vim/src/if_python.c	279;"	d	file:
_Py_TrueStruct	vim/vim/src/if_python3.c	219;"	d	file:
_Py_ZeroStruct	vim/vim/src/if_python.c	/^static PyObject* _Py_ZeroStruct;$/;"	v	file:
_Py_ZeroStruct	vim/vim/src/if_python.c	278;"	d	file:
_REGEXP_H	vim/vim/src/regexp.h	14;"	d
_SAD	vim/vim/src/farsi.h	40;"	d
_SE	vim/vim/src/farsi.h	33;"	d
_SHIN	vim/vim/src/farsi.h	39;"	d
_SIMX_H	vim/vim/src/xpm/include/simx.h	38;"	d
_SIN	vim/vim/src/farsi.h	38;"	d
_ScrollbarClassRec	vim/vim/src/gui_at_sb.h	/^typedef struct _ScrollbarClassRec {$/;"	s
_ScrollbarClassRec::core_class	vim/vim/src/gui_at_sb.h	/^    CoreClassPart		core_class;$/;"	m	struct:_ScrollbarClassRec	access:public
_ScrollbarClassRec::scrollbar_class	vim/vim/src/gui_at_sb.h	/^    ScrollbarClassPart		scrollbar_class;$/;"	m	struct:_ScrollbarClassRec	access:public
_ScrollbarClassRec::simple_class	vim/vim/src/gui_at_sb.h	/^    SimpleClassPart		simple_class;$/;"	m	struct:_ScrollbarClassRec	access:public
_ScrollbarRec	vim/vim/src/gui_at_sb.h	/^typedef struct _ScrollbarRec {$/;"	s
_ScrollbarRec::core	vim/vim/src/gui_at_sb.h	/^    CorePart		core;$/;"	m	struct:_ScrollbarRec	access:public
_ScrollbarRec::scrollbar	vim/vim/src/gui_at_sb.h	/^    ScrollbarPart	scrollbar;$/;"	m	struct:_ScrollbarRec	access:public
_ScrollbarRec::simple	vim/vim/src/gui_at_sb.h	/^    SimplePart		simple;$/;"	m	struct:_ScrollbarRec	access:public
_Scrollbar_h	vim/vim/src/gui_at_sb.h	60;"	d
_SharedFindReplace	vim/vim/src/gui_gtk.c	/^typedef struct _SharedFindReplace$/;"	s	file:
_SharedFindReplace	vim/vim/src/gui_motif.c	/^typedef struct _SharedFindReplace$/;"	s	file:
_SharedFindReplace::all	vim/vim/src/gui_gtk.c	/^    GtkWidget *all;	\/* 'Replace All' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::all	vim/vim/src/gui_motif.c	/^    Widget all;		\/* 'Replace All' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::cancel	vim/vim/src/gui_motif.c	/^    Widget cancel;$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::dialog	vim/vim/src/gui_gtk.c	/^    GtkWidget *dialog;	\/* the main dialog widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::dialog	vim/vim/src/gui_motif.c	/^    Widget dialog;	\/* the main dialog widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::down	vim/vim/src/gui_gtk.c	/^    GtkWidget *down;	\/* search direction 'Down' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::down	vim/vim/src/gui_motif.c	/^    Widget down;	\/* search direction 'Down' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::find	vim/vim/src/gui_gtk.c	/^    GtkWidget *find;	\/* 'Find Next' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::find	vim/vim/src/gui_motif.c	/^    Widget find;	\/* 'Find Next' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::mcase	vim/vim/src/gui_gtk.c	/^    GtkWidget *mcase;	\/* 'Match case' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::mcase	vim/vim/src/gui_motif.c	/^    Widget mcase;	\/* 'match case' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::replace	vim/vim/src/gui_gtk.c	/^    GtkWidget *replace;	\/* 'Replace With' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::replace	vim/vim/src/gui_motif.c	/^    Widget replace;	\/* 'Replace With' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::undo	vim/vim/src/gui_motif.c	/^    Widget undo;	\/* 'Undo' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::up	vim/vim/src/gui_gtk.c	/^    GtkWidget *up;	\/* search direction 'Up' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::up	vim/vim/src/gui_motif.c	/^    Widget up;		\/* search direction 'Up' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::what	vim/vim/src/gui_gtk.c	/^    GtkWidget *what;	\/* 'Find what' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::what	vim/vim/src/gui_motif.c	/^    Widget what;	\/* 'Find what' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::with	vim/vim/src/gui_gtk.c	/^    GtkWidget *with;	\/* 'Replace with' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::with	vim/vim/src/gui_motif.c	/^    Widget with;	\/* 'Replace with' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::wword	vim/vim/src/gui_gtk.c	/^    GtkWidget *wword;	\/* 'Whole word only' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFindReplace::wword	vim/vim/src/gui_motif.c	/^    Widget wword;	\/* 'Exact match' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
_SharedFontSelData	vim/vim/src/gui_xmdlg.c	/^typedef struct _SharedFontSelData$/;"	s	file:
_SharedFontSelData::cancel	vim/vim/src/gui_xmdlg.c	/^    Widget	cancel;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::dialog	vim/vim/src/gui_xmdlg.c	/^    Widget	dialog;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::encoding_menu	vim/vim/src/gui_xmdlg.c	/^    Widget	encoding_menu;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::encoding_pulldown	vim/vim/src/gui_xmdlg.c	/^    Widget	encoding_pulldown;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::exit	vim/vim/src/gui_xmdlg.c	/^    Boolean	exit;		\/* used for program exit control *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::font_name	vim/vim/src/gui_xmdlg.c	/^    char	*font_name;	\/* current font name *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::in_pixels	vim/vim/src/gui_xmdlg.c	/^    Boolean	in_pixels;	\/* toggle state - size in pixels  *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::list	vim/vim/src/gui_xmdlg.c	/^    Widget	list[NONE];$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::name	vim/vim/src/gui_xmdlg.c	/^    Widget	name;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::names	vim/vim/src/gui_xmdlg.c	/^    char	**names;	\/* font name array of arrays *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::num	vim/vim/src/gui_xmdlg.c	/^    int		num;		\/* number of font names *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::ok	vim/vim/src/gui_xmdlg.c	/^    Widget	ok;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::old	vim/vim/src/gui_xmdlg.c	/^    XFontStruct	*old;		\/* font data structure for sample display *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::old_list	vim/vim/src/gui_xmdlg.c	/^    XmFontList	old_list;	\/* font data structure for sample display *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::sample	vim/vim/src/gui_xmdlg.c	/^    Widget	sample;$/;"	m	struct:_SharedFontSelData	file:	access:public
_SharedFontSelData::sel	vim/vim/src/gui_xmdlg.c	/^    String	sel[NONE];	\/* selection category *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
_TA	vim/vim/src/farsi.h	129;"	d
_TANDEM_SOURCE	vim/vim/src/vim.h	75;"	d
_TE	vim/vim/src/farsi.h	32;"	d
_TextAreaWndProc	vim/vim/src/gui_w32.c	/^_TextAreaWndProc($/;"	f	file:	signature:( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
_VimChdir	vim/vim/src/if_py_both.h	/^_VimChdir(PyObject *_chdir, PyObject *args, PyObject *kwargs)$/;"	f	signature:(PyObject *_chdir, PyObject *args, PyObject *kwargs)
_WIN32_WINNT	vim/vim/src/if_ruby.c	83;"	d	file:
_WndProc	vim/vim/src/gui_w32.c	/^_WndProc($/;"	f	file:	signature:( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
_XE	vim/vim/src/farsi.h	37;"	d
_XOPEN_SOURCE	vim/vim/src/if_python.c	62;"	d	file:
_XOPEN_SOURCE	vim/vim/src/if_python3.c	70;"	d	file:
_XOPEN_SOURCE	vim/vim/src/libvterm/bin/vterm-ctrl.c	1;"	d	file:
_XOPEN_SOURCE	vim/vim/src/libvterm/bin/vterm-dump.c	2;"	d	file:
_XRegisterFilterByType	vim/vim/src/gui_gtk_vms.h	83;"	d
_XUnregisterFilter	vim/vim/src/gui_gtk_vms.h	316;"	d
_Xaw3dDrawShadows	vim/vim/src/gui_at_sb.c	/^_Xaw3dDrawShadows($/;"	f	file:	signature:( Widget gw, XEvent *event UNUSED, Region region, int out)
_Xaw3dDrawShadows	vim/vim/src/gui_at_sb.c	/^static void _Xaw3dDrawShadows(Widget, XEvent *, Region, int);$/;"	p	file:	signature:(Widget, XEvent *, Region, int)
_XmBottomShadowColorDefault	vim/vim/src/gui_gtk_vms.h	627;"	d
_XmCalcLabelDimensions	vim/vim/src/gui_xmebw.c	/^extern void _XmCalcLabelDimensions(Widget wid);$/;"	p	file:	signature:(Widget wid)
_XmClearBorder	vim/vim/src/gui_gtk_vms.h	628;"	d
_XmConfigureObject	vim/vim/src/gui_gtk_vms.h	629;"	d
_XmDestroyParentCallback	vim/vim/src/gui_gtk_vms.h	630;"	d
_XmDrawArrow	vim/vim/src/gui_gtk_vms.h	631;"	d
_XmDrawShadows	vim/vim/src/gui_gtk_vms.h	632;"	d
_XmEnhancedButtonClassPart	vim/vim/src/gui_xmebwp.h	/^typedef struct _XmEnhancedButtonClassPart$/;"	s
_XmEnhancedButtonClassPart::stipple_bitmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap stipple_bitmap;$/;"	m	struct:_XmEnhancedButtonClassPart	access:public
_XmEnhancedButtonPart	vim/vim/src/gui_xmebwp.h	/^typedef struct _XmEnhancedButtonPart$/;"	s
_XmEnhancedButtonPart::armed_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap armed_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::doing_destroy	vim/vim/src/gui_xmebwp.h	/^    int doing_destroy;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::doing_setvalues	vim/vim/src/gui_xmebwp.h	/^    int doing_setvalues;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::highlight_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap highlight_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::insensitive_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap insensitive_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::label_location	vim/vim/src/gui_xmebwp.h	/^    int label_location;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::normal_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap normal_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::pixmap_data	vim/vim/src/gui_xmebwp.h	/^    String pixmap_data;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::pixmap_depth	vim/vim/src/gui_xmebwp.h	/^    int pixmap_depth;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::pixmap_file	vim/vim/src/gui_xmebwp.h	/^    String pixmap_file;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::pixmap_height	vim/vim/src/gui_xmebwp.h	/^    Dimension pixmap_height;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::pixmap_width	vim/vim/src/gui_xmebwp.h	/^    Dimension pixmap_width;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonPart::spacing	vim/vim/src/gui_xmebwp.h	/^    Dimension spacing;$/;"	m	struct:_XmEnhancedButtonPart	access:public
_XmEnhancedButtonRec	vim/vim/src/gui_xmebwp.h	/^typedef struct _XmEnhancedButtonRec$/;"	s
_XmEnhancedButtonRec::core	vim/vim/src/gui_xmebwp.h	/^    CorePart core;$/;"	m	struct:_XmEnhancedButtonRec	access:public
_XmEnhancedButtonRec::enhancedbutton	vim/vim/src/gui_xmebwp.h	/^    XmEnhancedButtonPart enhancedbutton;$/;"	m	struct:_XmEnhancedButtonRec	access:public
_XmEnhancedButtonRec::label	vim/vim/src/gui_xmebwp.h	/^    XmLabelPart label;$/;"	m	struct:_XmEnhancedButtonRec	access:public
_XmEnhancedButtonRec::primitive	vim/vim/src/gui_xmebwp.h	/^    XmPrimitivePart primitive;$/;"	m	struct:_XmEnhancedButtonRec	access:public
_XmEnhancedButtonRec::pushbutton	vim/vim/src/gui_xmebwp.h	/^    XmPushButtonPart pushbutton;$/;"	m	struct:_XmEnhancedButtonRec	access:public
_XmFontListGetDefaultFont	vim/vim/src/gui_gtk_vms.h	633;"	d
_XmFromHorizontalPixels	vim/vim/src/gui_gtk_vms.h	634;"	d
_XmFromVerticalPixels	vim/vim/src/gui_gtk_vms.h	635;"	d
_XmGetClassExtensionPtr	vim/vim/src/gui_gtk_vms.h	636;"	d
_XmGetDefaultFontList	vim/vim/src/gui_gtk_vms.h	637;"	d
_XmGetInDragMode	vim/vim/src/gui_xmebw.c	/^extern Boolean _XmGetInDragMode(Widget widget);$/;"	p	file:	signature:(Widget widget)
_XmGetTextualDragIcon	vim/vim/src/gui_gtk_vms.h	638;"	d
_XmGetWidgetExtData	vim/vim/src/gui_gtk_vms.h	639;"	d
_XmGrabKeyboard	vim/vim/src/gui_gtk_vms.h	640;"	d
_XmGrabPointer	vim/vim/src/gui_gtk_vms.h	641;"	d
_XmInheritClass	vim/vim/src/gui_gtk_vms.h	642;"	d
_XmInputInGadget	vim/vim/src/gui_gtk_vms.h	643;"	d
_XmMakeGeometryRequest	vim/vim/src/gui_gtk_vms.h	644;"	d
_XmMenuPopDown	vim/vim/src/gui_gtk_vms.h	645;"	d
_XmMoveObject	vim/vim/src/gui_gtk_vms.h	646;"	d
_XmNavigChangeManaged	vim/vim/src/gui_gtk_vms.h	647;"	d
_XmOSBuildFileList	vim/vim/src/gui_gtk_vms.h	648;"	d
_XmOSFileCompare	vim/vim/src/gui_gtk_vms.h	649;"	d
_XmOSFindPatternPart	vim/vim/src/gui_gtk_vms.h	650;"	d
_XmOSQualifyFileSpec	vim/vim/src/gui_gtk_vms.h	651;"	d
_XmPostPopupMenu	vim/vim/src/gui_gtk_vms.h	652;"	d
_XmPrimitiveEnter	vim/vim/src/gui_gtk_vms.h	653;"	d
_XmPrimitiveEnter	vim/vim/src/gui_xmebw.c	/^extern void _XmPrimitiveEnter(Widget wid,$/;"	p	file:	signature:(Widget wid, XEvent * event, String * params, Cardinal * num_params)
_XmPrimitiveLeave	vim/vim/src/gui_gtk_vms.h	654;"	d
_XmPrimitiveLeave	vim/vim/src/gui_xmebw.c	/^extern void _XmPrimitiveLeave(Widget wid,$/;"	p	file:	signature:(Widget wid, XEvent * event, String * params, Cardinal * num_params)
_XmRedisplayGadgets	vim/vim/src/gui_gtk_vms.h	655;"	d
_XmSetFocusFlag	vim/vim/src/gui_xmebw.c	/^extern void _XmSetFocusFlag(Widget w, unsigned int mask, Boolean value);$/;"	p	file:	signature:(Widget w, unsigned int mask, Boolean value)
_XmShellIsExclusive	vim/vim/src/gui_gtk_vms.h	656;"	d
_XmStringDraw	vim/vim/src/gui_gtk_vms.h	657;"	d
_XmStringGetTextConcat	vim/vim/src/gui_gtk_vms.h	658;"	d
_XmStrings	vim/vim/src/gui_gtk_vms.h	659;"	d
_XmToHorizontalPixels	vim/vim/src/gui_gtk_vms.h	660;"	d
_XmToVerticalPixels	vim/vim/src/gui_gtk_vms.h	661;"	d
_XmTopShadowColorDefault	vim/vim/src/gui_gtk_vms.h	662;"	d
_Xm_fastPtr	vim/vim/src/gui_gtk_vms.h	663;"	d
_XtCheckSubclassFlag	vim/vim/src/gui_gtk_vms.h	664;"	d
_XtInherit	vim/vim/src/gui_gtk_vms.h	665;"	d
_XtInheritTranslations	vim/vim/src/gui_gtk_vms.h	666;"	d
_XtRegisterWindow	vim/vim/src/gui_gtk_vms.h	723;"	d
_XtUnregisterWindow	vim/vim/src/gui_gtk_vms.h	724;"	d
_YE	vim/vim/src/farsi.h	58;"	d
_YEE	vim/vim/src/farsi.h	62;"	d
_ZA	vim/vim/src/farsi.h	130;"	d
_ZAD	vim/vim/src/farsi.h	41;"	d
__CCFILTER_C__	vim/vim/runtime/tools/ccfilter.c	14;"	d	file:
__CYGWIN32__	vim/vim/src/if_mzsch.h	25;"	d
__CYGWIN32__	vim/vim/src/if_mzsch.h	9;"	d
__GTK_FORM_H__	vim/vim/src/gui_gtk_f.h	10;"	d
__IID_DEFINED__	vim/vim/src/iid_ole.c	25;"	d	file:
__IID_DEFINED__	vim/vim/src/iid_ole.c	30;"	d	file:
__IVim_FWD_DEFINED__	vim/vim/src/if_ole.h	29;"	d
__IVim_INTERFACE_DEFINED__	vim/vim/src/if_ole.h	56;"	d
__MIDL_user_allocate_free_DEFINED__	vim/vim/src/if_ole.h	50;"	d
__OLEAUT_H__	vim/vim/src/VisVim/OleAut.h	2;"	d
__OPENTRANSPORTPROTOCOL__	vim/vim/src/if_ruby.c	132;"	d	file:
__OPENTRANSPORTPROVIDERS__	vim/vim/src/if_ruby.c	133;"	d	file:
__OPENTRANSPORT__	vim/vim/src/if_ruby.c	131;"	d	file:
__P	vim/vim/src/xxd/xxd.c	123;"	d	file:
__P	vim/vim/src/xxd/xxd.c	192;"	d	file:
__P	vim/vim/src/xxd/xxd.c	194;"	d	file:
__SUSV3	vim/vim/src/os_unixx.h	109;"	d
__USE_FIXED_PROTOTYPES__	vim/vim/src/xxd/xxd.c	110;"	d	file:
__VTERM_H__	vim/vim/src/libvterm/include/vterm.h	5;"	d
__VTERM_INPUT_H__	vim/vim/src/libvterm/include/vterm_keycodes.h	2;"	d
__VTERM_INTERNAL_H__	vim/vim/src/libvterm/src/vterm_internal.h	2;"	d
__Vim_FWD_DEFINED__	vim/vim/src/if_ole.h	35;"	d
__Vim_LIBRARY_DEFINED__	vim/vim/src/if_ole.h	258;"	d
__anon100::dict	vim/vim/src/if_py_both.h	/^    dict_T	*dict;$/;"	m	struct:__anon100	access:public
__anon100::ref	vim/vim/src/if_py_both.h	/^    pylinkedlist_T	ref;$/;"	m	struct:__anon100	access:public
__anon101::hi	vim/vim/src/if_py_both.h	/^    hashitem_T	*hi;$/;"	m	struct:__anon101	access:public
__anon101::ht	vim/vim/src/if_py_both.h	/^    hashtab_T	*ht;$/;"	m	struct:__anon101	access:public
__anon101::ht_array	vim/vim/src/if_py_both.h	/^    hashitem_T	*ht_array;$/;"	m	struct:__anon101	access:public
__anon101::ht_used	vim/vim/src/if_py_both.h	/^    long_u	ht_used;$/;"	m	struct:__anon101	access:public
__anon101::todo	vim/vim/src/if_py_both.h	/^    long_u	todo;$/;"	m	struct:__anon101	access:public
__anon102::list	vim/vim/src/if_py_both.h	/^    list_T	*list;$/;"	m	struct:__anon102	access:public
__anon102::ref	vim/vim/src/if_py_both.h	/^    pylinkedlist_T	ref;$/;"	m	struct:__anon102	access:public
__anon103::list	vim/vim/src/if_py_both.h	/^    list_T	*list;$/;"	m	struct:__anon103	access:public
__anon103::lw	vim/vim/src/if_py_both.h	/^    listwatch_T	lw;$/;"	m	struct:__anon103	access:public
__anon104::argc	vim/vim/src/if_py_both.h	/^    int		argc;$/;"	m	struct:__anon104	access:public
__anon104::argv	vim/vim/src/if_py_both.h	/^    typval_T	*argv;$/;"	m	struct:__anon104	access:public
__anon104::auto_rebind	vim/vim/src/if_py_both.h	/^    int		auto_rebind;$/;"	m	struct:__anon104	access:public
__anon104::name	vim/vim/src/if_py_both.h	/^    char_u	*name;$/;"	m	struct:__anon104	access:public
__anon104::ref	vim/vim/src/if_py_both.h	/^    pylinkedlist_T	ref;$/;"	m	struct:__anon104	access:public
__anon104::self	vim/vim/src/if_py_both.h	/^    dict_T	*self;$/;"	m	struct:__anon104	access:public
__anon105::Check	vim/vim/src/if_py_both.h	/^    checkfun	Check;$/;"	m	struct:__anon105	access:public
__anon105::from	vim/vim/src/if_py_both.h	/^    void	*from;$/;"	m	struct:__anon105	access:public
__anon105::fromObj	vim/vim/src/if_py_both.h	/^    PyObject	*fromObj;$/;"	m	struct:__anon105	access:public
__anon105::opt_type	vim/vim/src/if_py_both.h	/^    int		opt_type;$/;"	m	struct:__anon105	access:public
__anon106::lastoption	vim/vim/src/if_py_both.h	/^    void	*lastoption;$/;"	m	struct:__anon106	access:public
__anon106::opt_type	vim/vim/src/if_py_both.h	/^    int		opt_type;$/;"	m	struct:__anon106	access:public
__anon107::tab	vim/vim/src/if_py_both.h	/^    tabpage_T	*tab;$/;"	m	struct:__anon107	access:public
__anon109::tabObject	vim/vim/src/if_py_both.h	/^    TabPageObject	*tabObject;$/;"	m	struct:__anon109	access:public
__anon109::win	vim/vim/src/if_py_both.h	/^    win_T	*win;$/;"	m	struct:__anon109	access:public
__anon10::name	vim/vim/src/if_mzsch.c	/^    char	    *name;$/;"	m	struct:__anon10	file:	access:public
__anon10::port	vim/vim/src/if_mzsch.c	/^    Scheme_Object   *port;$/;"	m	struct:__anon10	file:	access:public
__anon110::tabObject	vim/vim/src/if_py_both.h	/^    TabPageObject	*tabObject;$/;"	m	struct:__anon110	access:public
__anon111::buf	vim/vim/src/if_py_both.h	/^    buf_T *buf;$/;"	m	struct:__anon111	access:public
__anon112::buf	vim/vim/src/if_py_both.h	/^    BufferObject *buf;$/;"	m	struct:__anon112	access:public
__anon112::end	vim/vim/src/if_py_both.h	/^    PyInt end;$/;"	m	struct:__anon112	access:public
__anon112::start	vim/vim/src/if_py_both.h	/^    PyInt start;$/;"	m	struct:__anon112	access:public
__anon116::__anon117::line	vim/vim/src/regexp_nfa.c	/^	} line[NSUBEXP];$/;"	m	union:__anon116::__anon117	typeref:struct:__anon116::__anon117::linepos	file:	access:public
__anon116::__anon117::linepos	vim/vim/src/regexp_nfa.c	/^	struct linepos$/;"	s	union:__anon116::__anon117	file:	access:public
__anon116::__anon117::linepos::end	vim/vim/src/regexp_nfa.c	/^	    char_u	*end;$/;"	m	struct:__anon116::__anon117::linepos	file:	access:public
__anon116::__anon117::linepos::start	vim/vim/src/regexp_nfa.c	/^	    char_u	*start;$/;"	m	struct:__anon116::__anon117::linepos	file:	access:public
__anon116::__anon117::multi	vim/vim/src/regexp_nfa.c	/^	} multi[NSUBEXP];$/;"	m	union:__anon116::__anon117	typeref:struct:__anon116::__anon117::multipos	file:	access:public
__anon116::__anon117::multipos	vim/vim/src/regexp_nfa.c	/^	struct multipos$/;"	s	union:__anon116::__anon117	file:	access:public
__anon116::__anon117::multipos::end_col	vim/vim/src/regexp_nfa.c	/^	    colnr_T	end_col;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
__anon116::__anon117::multipos::end_lnum	vim/vim/src/regexp_nfa.c	/^	    linenr_T	end_lnum;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
__anon116::__anon117::multipos::start_col	vim/vim/src/regexp_nfa.c	/^	    colnr_T	start_col;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
__anon116::__anon117::multipos::start_lnum	vim/vim/src/regexp_nfa.c	/^	    linenr_T	start_lnum;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
__anon116::in_use	vim/vim/src/regexp_nfa.c	/^    int	    in_use; \/* number of subexpr with useful info *\/$/;"	m	struct:__anon116	file:	access:public
__anon116::list	vim/vim/src/regexp_nfa.c	/^    } list;$/;"	m	struct:__anon116	typeref:union:__anon116::__anon117	file:	access:public
__anon118::norm	vim/vim/src/regexp_nfa.c	/^    regsub_T	norm; \/* \\( .. \\) matches *\/$/;"	m	struct:__anon118	file:	access:public
__anon118::synt	vim/vim/src/regexp_nfa.c	/^    regsub_T	synt; \/* \\z( .. \\) matches *\/$/;"	m	struct:__anon118	file:	access:public
__anon11::name	vim/vim/src/if_mzsch.c	/^    char    *name;$/;"	m	struct:__anon11	file:	access:public
__anon11::ptr	vim/vim/src/if_mzsch.c	/^    void    **ptr;$/;"	m	struct:__anon11	file:	access:public
__anon120::count	vim/vim/src/regexp_nfa.c	/^    int		count;$/;"	m	struct:__anon120	file:	access:public
__anon120::pim	vim/vim/src/regexp_nfa.c	/^    nfa_pim_T	pim;		\/* if pim.result != NFA_PIM_UNUSED: postponed$/;"	m	struct:__anon120	file:	access:public
__anon120::state	vim/vim/src/regexp_nfa.c	/^    nfa_state_T	*state;$/;"	m	struct:__anon120	file:	access:public
__anon120::subs	vim/vim/src/regexp_nfa.c	/^    regsubs_T	subs;		\/* submatch info, only party used *\/$/;"	m	struct:__anon120	file:	access:public
__anon121::has_pim	vim/vim/src/regexp_nfa.c	/^    int		    has_pim;	\/* TRUE when any state has a PIM *\/$/;"	m	struct:__anon121	file:	access:public
__anon121::id	vim/vim/src/regexp_nfa.c	/^    int		    id;		\/* ID of the list *\/$/;"	m	struct:__anon121	file:	access:public
__anon121::len	vim/vim/src/regexp_nfa.c	/^    int		    len;	\/* max nr of states in "t" *\/$/;"	m	struct:__anon121	file:	access:public
__anon121::n	vim/vim/src/regexp_nfa.c	/^    int		    n;		\/* nr of states currently in "t" *\/$/;"	m	struct:__anon121	file:	access:public
__anon121::t	vim/vim/src/regexp_nfa.c	/^    nfa_thread_T    *t;		\/* allocated array of states *\/$/;"	m	struct:__anon121	file:	access:public
__anon124::at_start	vim/vim/src/regexp.c	/^     int	at_start;$/;"	m	struct:__anon124	file:	access:public
__anon124::curchr	vim/vim/src/regexp.c	/^     int	curchr;$/;"	m	struct:__anon124	file:	access:public
__anon124::nextchr	vim/vim/src/regexp.c	/^     int	nextchr;$/;"	m	struct:__anon124	file:	access:public
__anon124::prev_at_start	vim/vim/src/regexp.c	/^     int	prev_at_start;$/;"	m	struct:__anon124	file:	access:public
__anon124::prevchr	vim/vim/src/regexp.c	/^     int	prevchr;$/;"	m	struct:__anon124	file:	access:public
__anon124::prevchr_len	vim/vim/src/regexp.c	/^     int	prevchr_len;$/;"	m	struct:__anon124	file:	access:public
__anon124::prevprevchr	vim/vim/src/regexp.c	/^     int	prevprevchr;$/;"	m	struct:__anon124	file:	access:public
__anon124::regnpar	vim/vim/src/regexp.c	/^     int	regnpar;$/;"	m	struct:__anon124	file:	access:public
__anon124::regparse	vim/vim/src/regexp.c	/^     char_u	*regparse;$/;"	m	struct:__anon124	file:	access:public
__anon125::__anon126::pos	vim/vim/src/regexp.c	/^	lpos_T	pos;	\/* reginput pos, for multi-line regexp *\/$/;"	m	union:__anon125::__anon126	file:	access:public
__anon125::__anon126::ptr	vim/vim/src/regexp.c	/^	char_u	*ptr;	\/* reginput pointer, for single-line regexp *\/$/;"	m	union:__anon125::__anon126	file:	access:public
__anon125::rs_len	vim/vim/src/regexp.c	/^    int		rs_len;$/;"	m	struct:__anon125	file:	access:public
__anon125::rs_u	vim/vim/src/regexp.c	/^    } rs_u;$/;"	m	struct:__anon125	typeref:union:__anon125::__anon126	file:	access:public
__anon127::__anon128::pos	vim/vim/src/regexp.c	/^	lpos_T	pos;$/;"	m	union:__anon127::__anon128	file:	access:public
__anon127::__anon128::ptr	vim/vim/src/regexp.c	/^	char_u	*ptr;$/;"	m	union:__anon127::__anon128	file:	access:public
__anon127::se_u	vim/vim/src/regexp.c	/^    } se_u;$/;"	m	struct:__anon127	typeref:union:__anon127::__anon128	file:	access:public
__anon129::reg_buf	vim/vim/src/regexp.c	/^    buf_T		*reg_buf;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_endp	vim/vim/src/regexp.c	/^    char_u		**reg_endp;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_endpos	vim/vim/src/regexp.c	/^    lpos_T		*reg_endpos;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_firstlnum	vim/vim/src/regexp.c	/^    linenr_T		reg_firstlnum;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_ic	vim/vim/src/regexp.c	/^    int			reg_ic;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_icombine	vim/vim/src/regexp.c	/^    int			reg_icombine;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_line_lbr	vim/vim/src/regexp.c	/^    int			reg_line_lbr;	\/* "\\n" in string is line break *\/$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_match	vim/vim/src/regexp.c	/^    regmatch_T		*reg_match;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_maxcol	vim/vim/src/regexp.c	/^    colnr_T		reg_maxcol;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_maxline	vim/vim/src/regexp.c	/^    linenr_T		reg_maxline;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_mmatch	vim/vim/src/regexp.c	/^    regmmatch_T		*reg_mmatch;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_startp	vim/vim/src/regexp.c	/^    char_u		**reg_startp;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_startpos	vim/vim/src/regexp.c	/^    lpos_T		*reg_startpos;$/;"	m	struct:__anon129	file:	access:public
__anon129::reg_win	vim/vim/src/regexp.c	/^    win_T		*reg_win;$/;"	m	struct:__anon129	file:	access:public
__anon131::a	vim/vim/src/regexp.c	/^    int a, b, c;$/;"	m	struct:__anon131	file:	access:public
__anon131::b	vim/vim/src/regexp.c	/^    int a, b, c;$/;"	m	struct:__anon131	file:	access:public
__anon131::c	vim/vim/src/regexp.c	/^    int a, b, c;$/;"	m	struct:__anon131	file:	access:public
__anon132::sm_firstlnum	vim/vim/src/regexp.c	/^    linenr_T	sm_firstlnum;$/;"	m	struct:__anon132	file:	access:public
__anon132::sm_line_lbr	vim/vim/src/regexp.c	/^    int		sm_line_lbr;$/;"	m	struct:__anon132	file:	access:public
__anon132::sm_match	vim/vim/src/regexp.c	/^    regmatch_T	*sm_match;$/;"	m	struct:__anon132	file:	access:public
__anon132::sm_maxline	vim/vim/src/regexp.c	/^    linenr_T	sm_maxline;$/;"	m	struct:__anon132	file:	access:public
__anon132::sm_mmatch	vim/vim/src/regexp.c	/^    regmmatch_T	*sm_mmatch;$/;"	m	struct:__anon132	file:	access:public
__anon137::cont_in_list	vim/vim/src/syntax.c	/^    short	*cont_in_list;	\/* group IDs for "containedin" argument *\/$/;"	m	struct:__anon137	file:	access:public
__anon137::cont_list	vim/vim/src/syntax.c	/^    short	*cont_list;	\/* group IDs for "contains" argument *\/$/;"	m	struct:__anon137	file:	access:public
__anon137::flags	vim/vim/src/syntax.c	/^    int		flags;		\/* flags for contained and transparent *\/$/;"	m	struct:__anon137	file:	access:public
__anon137::has_cont_list	vim/vim/src/syntax.c	/^    char	has_cont_list;	\/* TRUE if "cont_list" can be used *\/$/;"	m	struct:__anon137	file:	access:public
__anon137::keyword	vim/vim/src/syntax.c	/^    int		keyword;	\/* TRUE for ":syn keyword" *\/$/;"	m	struct:__anon137	file:	access:public
__anon137::next_list	vim/vim/src/syntax.c	/^    short	*next_list;	\/* group IDs for "nextgroup" argument *\/$/;"	m	struct:__anon137	file:	access:public
__anon137::sync_idx	vim/vim/src/syntax.c	/^    int		*sync_idx;	\/* syntax item for "grouphere" argument, NULL$/;"	m	struct:__anon137	file:	access:public
__anon139::average	vim/vim/src/syntax.c	/^    proftime_T	average;$/;"	m	struct:__anon139	file:	access:public
__anon139::count	vim/vim/src/syntax.c	/^    int		count;$/;"	m	struct:__anon139	file:	access:public
__anon139::id	vim/vim/src/syntax.c	/^    int		id;$/;"	m	struct:__anon139	file:	access:public
__anon139::match	vim/vim/src/syntax.c	/^    int		match;$/;"	m	struct:__anon139	file:	access:public
__anon139::pattern	vim/vim/src/syntax.c	/^    char_u	*pattern;$/;"	m	struct:__anon139	file:	access:public
__anon139::slowest	vim/vim/src/syntax.c	/^    proftime_T	slowest;$/;"	m	struct:__anon139	file:	access:public
__anon139::total	vim/vim/src/syntax.c	/^    proftime_T	total;$/;"	m	struct:__anon139	file:	access:public
__anon13::buf	vim/vim/src/quickfix.c	/^    buf_T	*buf;$/;"	m	struct:__anon13	file:	access:public
__anon13::buflnum	vim/vim/src/quickfix.c	/^    linenr_T	buflnum;$/;"	m	struct:__anon13	file:	access:public
__anon13::fd	vim/vim/src/quickfix.c	/^    FILE	*fd;$/;"	m	struct:__anon13	file:	access:public
__anon13::growbuf	vim/vim/src/quickfix.c	/^    char_u	*growbuf;$/;"	m	struct:__anon13	file:	access:public
__anon13::growbufsiz	vim/vim/src/quickfix.c	/^    int		growbufsiz;$/;"	m	struct:__anon13	file:	access:public
__anon13::linebuf	vim/vim/src/quickfix.c	/^    char_u	*linebuf;$/;"	m	struct:__anon13	file:	access:public
__anon13::linelen	vim/vim/src/quickfix.c	/^    int		linelen;$/;"	m	struct:__anon13	file:	access:public
__anon13::lnumlast	vim/vim/src/quickfix.c	/^    linenr_T	lnumlast;$/;"	m	struct:__anon13	file:	access:public
__anon13::p_li	vim/vim/src/quickfix.c	/^    listitem_T	*p_li;$/;"	m	struct:__anon13	file:	access:public
__anon13::p_str	vim/vim/src/quickfix.c	/^    char_u	*p_str;$/;"	m	struct:__anon13	file:	access:public
__anon13::tv	vim/vim/src/quickfix.c	/^    typval_T	*tv;$/;"	m	struct:__anon13	file:	access:public
__anon13::vc	vim/vim/src/quickfix.c	/^    vimconv_T	vc;$/;"	m	struct:__anon13	file:	access:public
__anon140::curbuf	vim/vim/src/if_tcl.c	/^    char *curbuf, *curwin;$/;"	m	struct:__anon140	file:	access:public
__anon140::curwin	vim/vim/src/if_tcl.c	/^    char *curbuf, *curwin;$/;"	m	struct:__anon140	file:	access:public
__anon140::exitvalue	vim/vim/src/if_tcl.c	/^    int exitvalue;$/;"	m	struct:__anon140	file:	access:public
__anon140::interp	vim/vim/src/if_tcl.c	/^    Tcl_Interp *interp;$/;"	m	struct:__anon140	file:	access:public
__anon140::lbase	vim/vim/src/if_tcl.c	/^    int lbase;$/;"	m	struct:__anon140	file:	access:public
__anon140::range_end	vim/vim/src/if_tcl.c	/^    int range_start, range_end;$/;"	m	struct:__anon140	file:	access:public
__anon140::range_start	vim/vim/src/if_tcl.c	/^    int range_start, range_end;$/;"	m	struct:__anon140	file:	access:public
__anon141::name	vim/vim/src/if_tcl.c	/^    char* name;$/;"	m	struct:__anon141	file:	access:public
__anon141::ptr	vim/vim/src/if_tcl.c	/^    TCL_PROC* ptr;$/;"	m	struct:__anon141	file:	access:public
__anon142::batname	vim/vim/src/dosinst.h	/^    char	*batname;	\/* batch file name *\/$/;"	m	struct:__anon142	access:public
__anon142::batpath	vim/vim/src/dosinst.h	/^    char	batpath[BUFSIZE];  \/* path of batch file to create; not$/;"	m	struct:__anon142	access:public
__anon142::exearg	vim/vim/src/dosinst.h	/^    char	*exearg;	\/* argument for vim.exe or gvim.exe *\/$/;"	m	struct:__anon142	access:public
__anon142::exename	vim/vim/src/dosinst.h	/^    char	*exename;	\/* exe file name *\/$/;"	m	struct:__anon142	access:public
__anon142::exenamearg	vim/vim/src/dosinst.h	/^    char	*exenamearg;	\/* exe file name when using exearg *\/$/;"	m	struct:__anon142	access:public
__anon142::lnkname	vim/vim/src/dosinst.h	/^    char	*lnkname;	\/* shortcut file name *\/$/;"	m	struct:__anon142	access:public
__anon142::name	vim/vim/src/dosinst.h	/^    char	*name;		\/* Vim exe name (without .exe) *\/$/;"	m	struct:__anon142	access:public
__anon142::oldbat	vim/vim/src/dosinst.h	/^    char	*oldbat;	\/* path to existing xxx.bat or NULL *\/$/;"	m	struct:__anon142	access:public
__anon142::oldexe	vim/vim/src/dosinst.h	/^    char	*oldexe;	\/* path to existing xxx.exe or NULL *\/$/;"	m	struct:__anon142	access:public
__anon143::engine	vim/vim/src/regexp.h	/^    regengine_T		*engine;$/;"	m	struct:__anon143	access:public
__anon143::program	vim/vim/src/regexp.h	/^    char_u		program[1];	\/* actually longer.. *\/$/;"	m	struct:__anon143	access:public
__anon143::re_engine	vim/vim/src/regexp.h	/^    unsigned		re_engine;$/;"	m	struct:__anon143	access:public
__anon143::re_flags	vim/vim/src/regexp.h	/^    unsigned		re_flags;    \/* second argument for vim_regcomp() *\/$/;"	m	struct:__anon143	access:public
__anon143::reganch	vim/vim/src/regexp.h	/^    char_u		reganch;$/;"	m	struct:__anon143	access:public
__anon143::regflags	vim/vim/src/regexp.h	/^    unsigned		regflags;$/;"	m	struct:__anon143	access:public
__anon143::reghasz	vim/vim/src/regexp.h	/^    char_u		reghasz;$/;"	m	struct:__anon143	access:public
__anon143::regmlen	vim/vim/src/regexp.h	/^    int			regmlen;$/;"	m	struct:__anon143	access:public
__anon143::regmust	vim/vim/src/regexp.h	/^    char_u		*regmust;$/;"	m	struct:__anon143	access:public
__anon143::regstart	vim/vim/src/regexp.h	/^    int			regstart;$/;"	m	struct:__anon143	access:public
__anon144::engine	vim/vim/src/regexp.h	/^    regengine_T		*engine;$/;"	m	struct:__anon144	access:public
__anon144::has_backref	vim/vim/src/regexp.h	/^    int			has_backref;	\/* pattern contains \\1 .. \\9 *\/$/;"	m	struct:__anon144	access:public
__anon144::has_zend	vim/vim/src/regexp.h	/^    int			has_zend;	\/* pattern contains \\ze *\/$/;"	m	struct:__anon144	access:public
__anon144::match_text	vim/vim/src/regexp.h	/^    char_u		*match_text;	\/* plain text to match with *\/$/;"	m	struct:__anon144	access:public
__anon144::nstate	vim/vim/src/regexp.h	/^    int			nstate;$/;"	m	struct:__anon144	access:public
__anon144::nsubexp	vim/vim/src/regexp.h	/^    int			nsubexp;	\/* number of () *\/$/;"	m	struct:__anon144	access:public
__anon144::pattern	vim/vim/src/regexp.h	/^    char_u		*pattern;$/;"	m	struct:__anon144	access:public
__anon144::re_engine	vim/vim/src/regexp.h	/^    unsigned		re_engine;$/;"	m	struct:__anon144	access:public
__anon144::re_flags	vim/vim/src/regexp.h	/^    unsigned		re_flags;    \/* second argument for vim_regcomp() *\/$/;"	m	struct:__anon144	access:public
__anon144::reganch	vim/vim/src/regexp.h	/^    int			reganch;	\/* pattern starts with ^ *\/$/;"	m	struct:__anon144	access:public
__anon144::regflags	vim/vim/src/regexp.h	/^    unsigned		regflags;$/;"	m	struct:__anon144	access:public
__anon144::reghasz	vim/vim/src/regexp.h	/^    int			reghasz;$/;"	m	struct:__anon144	access:public
__anon144::regstart	vim/vim/src/regexp.h	/^    int			regstart;	\/* char at start of pattern *\/$/;"	m	struct:__anon144	access:public
__anon144::start	vim/vim/src/regexp.h	/^    nfa_state_T		*start;		\/* points into state[] *\/$/;"	m	struct:__anon144	access:public
__anon144::state	vim/vim/src/regexp.h	/^    nfa_state_T		state[1];	\/* actually longer.. *\/$/;"	m	struct:__anon144	access:public
__anon145::endp	vim/vim/src/regexp.h	/^    char_u		*endp[NSUBEXP];$/;"	m	struct:__anon145	access:public
__anon145::regprog	vim/vim/src/regexp.h	/^    regprog_T		*regprog;$/;"	m	struct:__anon145	access:public
__anon145::rm_ic	vim/vim/src/regexp.h	/^    int			rm_ic;$/;"	m	struct:__anon145	access:public
__anon145::startp	vim/vim/src/regexp.h	/^    char_u		*startp[NSUBEXP];$/;"	m	struct:__anon145	access:public
__anon146::endpos	vim/vim/src/regexp.h	/^    lpos_T		endpos[NSUBEXP];$/;"	m	struct:__anon146	access:public
__anon146::regprog	vim/vim/src/regexp.h	/^    regprog_T		*regprog;$/;"	m	struct:__anon146	access:public
__anon146::rmm_ic	vim/vim/src/regexp.h	/^    int			rmm_ic;$/;"	m	struct:__anon146	access:public
__anon146::rmm_maxcol	vim/vim/src/regexp.h	/^    colnr_T		rmm_maxcol;	\/* when not zero: maximum column *\/$/;"	m	struct:__anon146	access:public
__anon146::startpos	vim/vim/src/regexp.h	/^    lpos_T		startpos[NSUBEXP];$/;"	m	struct:__anon146	access:public
__anon147::matches	vim/vim/src/regexp.h	/^    char_u		*matches[NSUBEXP];$/;"	m	struct:__anon147	access:public
__anon147::refcnt	vim/vim/src/regexp.h	/^    short		refcnt;$/;"	m	struct:__anon147	access:public
__anon148::found	vim/vim/src/misc1.c	/^    int	    found;$/;"	m	struct:__anon148	file:	access:public
__anon148::lpos	vim/vim/src/misc1.c	/^    lpos_T  lpos;$/;"	m	struct:__anon148	file:	access:public
__anon14::col	vim/vim/src/quickfix.c	/^    int		col;$/;"	m	struct:__anon14	file:	access:public
__anon14::enr	vim/vim/src/quickfix.c	/^    int		enr;$/;"	m	struct:__anon14	file:	access:public
__anon14::errmsg	vim/vim/src/quickfix.c	/^    char_u	*errmsg;$/;"	m	struct:__anon14	file:	access:public
__anon14::errmsglen	vim/vim/src/quickfix.c	/^    int		errmsglen;$/;"	m	struct:__anon14	file:	access:public
__anon14::lnum	vim/vim/src/quickfix.c	/^    long	lnum;$/;"	m	struct:__anon14	file:	access:public
__anon14::namebuf	vim/vim/src/quickfix.c	/^    char_u	*namebuf;$/;"	m	struct:__anon14	file:	access:public
__anon14::pattern	vim/vim/src/quickfix.c	/^    char_u	*pattern;$/;"	m	struct:__anon14	file:	access:public
__anon14::type	vim/vim/src/quickfix.c	/^    int		type;$/;"	m	struct:__anon14	file:	access:public
__anon14::use_viscol	vim/vim/src/quickfix.c	/^    char_u	use_viscol;$/;"	m	struct:__anon14	file:	access:public
__anon14::valid	vim/vim/src/quickfix.c	/^    int		valid;$/;"	m	struct:__anon14	file:	access:public
__anon150::jd_key	vim/vim/src/json.c	/^    char_u	  *jd_key;$/;"	m	struct:__anon150	file:	access:public
__anon150::jd_key_tv	vim/vim/src/json.c	/^    typval_T	  jd_key_tv;$/;"	m	struct:__anon150	file:	access:public
__anon150::jd_tv	vim/vim/src/json.c	/^    typval_T	  jd_tv;	\/* the list or dict *\/$/;"	m	struct:__anon150	file:	access:public
__anon150::jd_type	vim/vim/src/json.c	/^    json_decode_T jd_type;$/;"	m	struct:__anon150	file:	access:public
__anon151::fill	vim/vim/src/move.c	/^    int		    fill;	\/* filler lines *\/$/;"	m	struct:__anon151	file:	access:public
__anon151::height	vim/vim/src/move.c	/^    int		    height;	\/* height of added line *\/$/;"	m	struct:__anon151	file:	access:public
__anon151::lnum	vim/vim/src/move.c	/^    linenr_T	    lnum;	\/* line number *\/$/;"	m	struct:__anon151	file:	access:public
__anon153::from	vim/vim/src/digraph.c	/^    char_u	*from;$/;"	m	struct:__anon153	file:	access:public
__anon153::to	vim/vim/src/digraph.c	/^    char_u	*to;$/;"	m	struct:__anon153	file:	access:public
__anon154::keys	vim/vim/src/crypt_zip.c	/^    u32_T keys[3];$/;"	m	struct:__anon154	file:	access:public
__anon155::head	vim/vim/src/tag.c	/^    char_u	*head;		\/* start of pattern head *\/$/;"	m	struct:__anon155	file:	access:public
__anon155::headlen	vim/vim/src/tag.c	/^    int		headlen;	\/* length of head[] *\/$/;"	m	struct:__anon155	file:	access:public
__anon155::len	vim/vim/src/tag.c	/^    int		len;		\/* length of pat[] *\/$/;"	m	struct:__anon155	file:	access:public
__anon155::pat	vim/vim/src/tag.c	/^    char_u	*pat;		\/* the pattern *\/$/;"	m	struct:__anon155	file:	access:public
__anon155::regmatch	vim/vim/src/tag.c	/^    regmatch_T	regmatch;	\/* regexp program, may be NULL *\/$/;"	m	struct:__anon155	file:	access:public
__anon157::flags	vim/vim/src/gui_gtk_x11.c	/^    unsigned int    flags;$/;"	m	struct:__anon157	file:	access:public
__anon157::name	vim/vim/src/gui_gtk_x11.c	/^    const char	    *name;$/;"	m	struct:__anon157	file:	access:public
__anon160::from	vim/vim/src/option.c	/^    int	    from;$/;"	m	struct:__anon160	file:	access:public
__anon160::to	vim/vim/src/option.c	/^    int     to;$/;"	m	struct:__anon160	file:	access:public
__anon161::col	vim/vim/src/structs.h	/^    colnr_T	col;	\/* column number *\/$/;"	m	struct:__anon161	access:public
__anon161::coladd	vim/vim/src/structs.h	/^    colnr_T	coladd;$/;"	m	struct:__anon161	access:public
__anon161::lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* line number *\/$/;"	m	struct:__anon161	access:public
__anon162::col	vim/vim/src/structs.h	/^    colnr_T	col;	\/* column number *\/$/;"	m	struct:__anon162	access:public
__anon162::lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* line number *\/$/;"	m	struct:__anon162	access:public
__anon163::br_buf	vim/vim/src/structs.h	/^    buf_T   *br_buf;$/;"	m	struct:__anon163	access:public
__anon163::br_buf_free_count	vim/vim/src/structs.h	/^    int	    br_buf_free_count;$/;"	m	struct:__anon163	access:public
__anon163::br_fnum	vim/vim/src/structs.h	/^    int	    br_fnum;$/;"	m	struct:__anon163	access:public
__anon164::wo_arab	vim/vim/src/structs.h	/^    int		wo_arab;$/;"	m	struct:__anon164	access:public
__anon164::wo_bri	vim/vim/src/structs.h	/^    int		wo_bri;$/;"	m	struct:__anon164	access:public
__anon164::wo_briopt	vim/vim/src/structs.h	/^    char_u	*wo_briopt;$/;"	m	struct:__anon164	access:public
__anon164::wo_cc	vim/vim/src/structs.h	/^    char_u	*wo_cc;$/;"	m	struct:__anon164	access:public
__anon164::wo_cocu	vim/vim/src/structs.h	/^    char_u	*wo_cocu;		\/* 'concealcursor' *\/$/;"	m	struct:__anon164	access:public
__anon164::wo_cole	vim/vim/src/structs.h	/^    long	wo_cole;		\/* 'conceallevel' *\/$/;"	m	struct:__anon164	access:public
__anon164::wo_crb	vim/vim/src/structs.h	/^    int		wo_crb;$/;"	m	struct:__anon164	access:public
__anon164::wo_crb_save	vim/vim/src/structs.h	/^    int		wo_crb_save;	\/* 'cursorbind' state saved for diff mode*\/$/;"	m	struct:__anon164	access:public
__anon164::wo_cuc	vim/vim/src/structs.h	/^    int		wo_cuc;$/;"	m	struct:__anon164	access:public
__anon164::wo_cul	vim/vim/src/structs.h	/^    int		wo_cul;$/;"	m	struct:__anon164	access:public
__anon164::wo_diff	vim/vim/src/structs.h	/^    int		wo_diff;$/;"	m	struct:__anon164	access:public
__anon164::wo_diff_saved	vim/vim/src/structs.h	/^    int		wo_diff_saved; \/* options were saved for starting diff mode *\/$/;"	m	struct:__anon164	access:public
__anon164::wo_fdc	vim/vim/src/structs.h	/^    long	wo_fdc;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdc_save	vim/vim/src/structs.h	/^    int		wo_fdc_save;$/;"	m	struct:__anon164	access:public
__anon164::wo_fde	vim/vim/src/structs.h	/^    char_u	*wo_fde;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdi	vim/vim/src/structs.h	/^    char_u	*wo_fdi;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdl	vim/vim/src/structs.h	/^    long	wo_fdl;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdl_save	vim/vim/src/structs.h	/^    int		wo_fdl_save;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdm	vim/vim/src/structs.h	/^    char_u	*wo_fdm;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdm_save	vim/vim/src/structs.h	/^    char_u	*wo_fdm_save;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdn	vim/vim/src/structs.h	/^    long	wo_fdn;$/;"	m	struct:__anon164	access:public
__anon164::wo_fdt	vim/vim/src/structs.h	/^    char_u	*wo_fdt;$/;"	m	struct:__anon164	access:public
__anon164::wo_fen	vim/vim/src/structs.h	/^    int		wo_fen;$/;"	m	struct:__anon164	access:public
__anon164::wo_fen_save	vim/vim/src/structs.h	/^    int		wo_fen_save;$/;"	m	struct:__anon164	access:public
__anon164::wo_fml	vim/vim/src/structs.h	/^    long	wo_fml;$/;"	m	struct:__anon164	access:public
__anon164::wo_fmr	vim/vim/src/structs.h	/^    char_u	*wo_fmr;$/;"	m	struct:__anon164	access:public
__anon164::wo_lbr	vim/vim/src/structs.h	/^    int		wo_lbr;$/;"	m	struct:__anon164	access:public
__anon164::wo_list	vim/vim/src/structs.h	/^    int		wo_list;$/;"	m	struct:__anon164	access:public
__anon164::wo_nu	vim/vim/src/structs.h	/^    int		wo_nu;$/;"	m	struct:__anon164	access:public
__anon164::wo_nuw	vim/vim/src/structs.h	/^    long	wo_nuw;$/;"	m	struct:__anon164	access:public
__anon164::wo_pvw	vim/vim/src/structs.h	/^    int		wo_pvw;$/;"	m	struct:__anon164	access:public
__anon164::wo_rl	vim/vim/src/structs.h	/^    int		wo_rl;$/;"	m	struct:__anon164	access:public
__anon164::wo_rlc	vim/vim/src/structs.h	/^    char_u	*wo_rlc;$/;"	m	struct:__anon164	access:public
__anon164::wo_rnu	vim/vim/src/structs.h	/^    int		wo_rnu;$/;"	m	struct:__anon164	access:public
__anon164::wo_scb	vim/vim/src/structs.h	/^    int		wo_scb;$/;"	m	struct:__anon164	access:public
__anon164::wo_scb_save	vim/vim/src/structs.h	/^    int		wo_scb_save;	\/* 'scrollbind' saved for diff mode*\/$/;"	m	struct:__anon164	access:public
__anon164::wo_scl	vim/vim/src/structs.h	/^    char_u	*wo_scl;$/;"	m	struct:__anon164	access:public
__anon164::wo_scr	vim/vim/src/structs.h	/^    long	wo_scr;$/;"	m	struct:__anon164	access:public
__anon164::wo_scriptID	vim/vim/src/structs.h	/^    int		wo_scriptID[WV_COUNT];	\/* SIDs for window-local options *\/$/;"	m	struct:__anon164	access:public
__anon164::wo_spell	vim/vim/src/structs.h	/^    int		wo_spell;$/;"	m	struct:__anon164	access:public
__anon164::wo_stl	vim/vim/src/structs.h	/^    char_u	*wo_stl;$/;"	m	struct:__anon164	access:public
__anon164::wo_tk	vim/vim/src/structs.h	/^    char_u	*wo_tk;$/;"	m	struct:__anon164	access:public
__anon164::wo_tms	vim/vim/src/structs.h	/^    char_u	*wo_tms;$/;"	m	struct:__anon164	access:public
__anon164::wo_wfh	vim/vim/src/structs.h	/^    int		wo_wfh;$/;"	m	struct:__anon164	access:public
__anon164::wo_wfw	vim/vim/src/structs.h	/^    int		wo_wfw;$/;"	m	struct:__anon164	access:public
__anon164::wo_wrap	vim/vim/src/structs.h	/^    int		wo_wrap;$/;"	m	struct:__anon164	access:public
__anon164::wo_wrap_save	vim/vim/src/structs.h	/^    int		wo_wrap_save;	\/* 'wrap' state saved for diff mode*\/$/;"	m	struct:__anon164	access:public
__anon165::vi_curswant	vim/vim/src/structs.h	/^    colnr_T	vi_curswant;	\/* MAXCOL from w_curswant *\/$/;"	m	struct:__anon165	access:public
__anon165::vi_end	vim/vim/src/structs.h	/^    pos_T	vi_end;		\/* end position of last VIsual *\/$/;"	m	struct:__anon165	access:public
__anon165::vi_mode	vim/vim/src/structs.h	/^    int		vi_mode;	\/* VIsual_mode of last VIsual *\/$/;"	m	struct:__anon165	access:public
__anon165::vi_start	vim/vim/src/structs.h	/^    pos_T	vi_start;	\/* start pos of last VIsual *\/$/;"	m	struct:__anon165	access:public
__anon16::line	vim/vim/src/ex_docmd.c	/^    char_u	*line;		\/* command line *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::lnum	vim/vim/src/ex_docmd.c	/^    linenr_T	lnum;		\/* sourcing_lnum of the line *\/$/;"	m	struct:__anon16	file:	access:public
__anon170::sr_old_redobuff	vim/vim/src/structs.h	/^    buffheader_T sr_old_redobuff;$/;"	m	struct:__anon170	access:public
__anon170::sr_redobuff	vim/vim/src/structs.h	/^    buffheader_T sr_redobuff;$/;"	m	struct:__anon170	access:public
__anon171::browse	vim/vim/src/structs.h	/^    int		browse;			\/* TRUE to invoke file dialog *\/$/;"	m	struct:__anon171	access:public
__anon171::confirm	vim/vim/src/structs.h	/^    int		confirm;		\/* TRUE to invoke yes\/no dialog *\/$/;"	m	struct:__anon171	access:public
__anon171::filter_force	vim/vim/src/structs.h	/^    int		filter_force;		\/* set for :filter! *\/$/;"	m	struct:__anon171	access:public
__anon171::filter_regmatch	vim/vim/src/structs.h	/^    regmatch_T	filter_regmatch;	\/* set by :filter \/pat\/ *\/$/;"	m	struct:__anon171	access:public
__anon171::hide	vim/vim/src/structs.h	/^    int		hide;			\/* TRUE when ":hide" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::keepalt	vim/vim/src/structs.h	/^    int		keepalt;		\/* TRUE when ":keepalt" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::keepjumps	vim/vim/src/structs.h	/^    int		keepjumps;		\/* TRUE when ":keepjumps" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::keepmarks	vim/vim/src/structs.h	/^    int		keepmarks;		\/* TRUE when ":keepmarks" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::keeppatterns	vim/vim/src/structs.h	/^    int		keeppatterns;		\/* TRUE when ":keeppatterns" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::lockmarks	vim/vim/src/structs.h	/^    int		lockmarks;		\/* TRUE when ":lockmarks" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::noswapfile	vim/vim/src/structs.h	/^    int		noswapfile;		\/* TRUE when ":noswapfile" was used *\/$/;"	m	struct:__anon171	access:public
__anon171::save_ei	vim/vim/src/structs.h	/^    char_u	*save_ei;		\/* saved value of 'eventignore' *\/$/;"	m	struct:__anon171	access:public
__anon171::split	vim/vim/src/structs.h	/^    int		split;			\/* flags for win_split() *\/$/;"	m	struct:__anon171	access:public
__anon171::tab	vim/vim/src/structs.h	/^    int		tab;			\/* > 0 when ":tab" was used *\/$/;"	m	struct:__anon171	access:public
__anon179::tb_buf	vim/vim/src/structs.h	/^    char_u	*tb_buf;	\/* buffer for typed characters *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_buflen	vim/vim/src/structs.h	/^    int		tb_buflen;	\/* size of tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_change_cnt	vim/vim/src/structs.h	/^    int		tb_change_cnt;	\/* nr of time tb_buf was changed; never zero *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_len	vim/vim/src/structs.h	/^    int		tb_len;		\/* number of valid bytes in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_maplen	vim/vim/src/structs.h	/^    int		tb_maplen;	\/* nr of mapped bytes in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_no_abbr_cnt	vim/vim/src/structs.h	/^    int		tb_no_abbr_cnt; \/* nr of bytes without abbrev. in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_noremap	vim/vim/src/structs.h	/^    char_u	*tb_noremap;	\/* mapping flags for characters in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_off	vim/vim/src/structs.h	/^    int		tb_off;		\/* current position in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon179::tb_silent	vim/vim/src/structs.h	/^    int		tb_silent;	\/* nr of silently mapped bytes in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
__anon17::expand	vim/vim/src/ex_docmd.c	/^    int	    expand;$/;"	m	struct:__anon17	file:	access:public
__anon17::name	vim/vim/src/ex_docmd.c	/^    char    *name;$/;"	m	struct:__anon17	file:	access:public
__anon180::old_char	vim/vim/src/structs.h	/^    int			old_char;$/;"	m	struct:__anon180	access:public
__anon180::old_mod_mask	vim/vim/src/structs.h	/^    int			old_mod_mask;$/;"	m	struct:__anon180	access:public
__anon180::save_inputbuf	vim/vim/src/structs.h	/^    char_u		*save_inputbuf;$/;"	m	struct:__anon180	access:public
__anon180::save_readbuf1	vim/vim/src/structs.h	/^    buffheader_T	save_readbuf1;$/;"	m	struct:__anon180	access:public
__anon180::save_readbuf2	vim/vim/src/structs.h	/^    buffheader_T	save_readbuf2;$/;"	m	struct:__anon180	access:public
__anon180::save_typebuf	vim/vim/src/structs.h	/^    typebuf_T		save_typebuf;$/;"	m	struct:__anon180	access:public
__anon180::typebuf_valid	vim/vim/src/structs.h	/^    int			typebuf_valid;	    \/* TRUE when save_typebuf valid *\/$/;"	m	struct:__anon180	access:public
__anon181::vc_cpfrom	vim/vim/src/structs.h	/^    int		vc_cpfrom;	\/* codepage to convert from (CONV_CODEPAGE) *\/$/;"	m	struct:__anon181	access:public
__anon181::vc_cpto	vim/vim/src/structs.h	/^    int		vc_cpto;	\/* codepage to convert to (CONV_CODEPAGE) *\/$/;"	m	struct:__anon181	access:public
__anon181::vc_factor	vim/vim/src/structs.h	/^    int		vc_factor;	\/* max. expansion factor *\/$/;"	m	struct:__anon181	access:public
__anon181::vc_fail	vim/vim/src/structs.h	/^    int		vc_fail;	\/* fail for invalid char, don't use '?' *\/$/;"	m	struct:__anon181	access:public
__anon181::vc_fd	vim/vim/src/structs.h	/^    iconv_t	vc_fd;		\/* for CONV_ICONV *\/$/;"	m	struct:__anon181	access:public
__anon181::vc_type	vim/vim/src/structs.h	/^    int		vc_type;	\/* zero or one of the CONV_ values *\/$/;"	m	struct:__anon181	access:public
__anon182::vir_barlines	vim/vim/src/structs.h	/^    garray_T	vir_barlines;	\/* lines starting with | *\/$/;"	m	struct:__anon182	access:public
__anon182::vir_conv	vim/vim/src/structs.h	/^    vimconv_T	vir_conv;	\/* encoding conversion *\/$/;"	m	struct:__anon182	access:public
__anon182::vir_fd	vim/vim/src/structs.h	/^    FILE	*vir_fd;	\/* file descriptor *\/$/;"	m	struct:__anon182	access:public
__anon182::vir_line	vim/vim/src/structs.h	/^    char_u	*vir_line;	\/* text of the current line *\/$/;"	m	struct:__anon182	access:public
__anon182::vir_version	vim/vim/src/structs.h	/^    int		vir_version;	\/* viminfo version detected or -1 *\/$/;"	m	struct:__anon182	access:public
__anon184::__anon185::v_channel	vim/vim/src/structs.h	/^	channel_T	*v_channel;	\/* channel value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_dict	vim/vim/src/structs.h	/^	dict_T		*v_dict;	\/* dict value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_float	vim/vim/src/structs.h	/^	float_T		v_float;	\/* floating number value *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_job	vim/vim/src/structs.h	/^	job_T		*v_job;		\/* job value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_list	vim/vim/src/structs.h	/^	list_T		*v_list;	\/* list value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_number	vim/vim/src/structs.h	/^	varnumber_T	v_number;	\/* number value *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_partial	vim/vim/src/structs.h	/^	partial_T	*v_partial;	\/* closure: function with args *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::__anon185::v_string	vim/vim/src/structs.h	/^	char_u		*v_string;	\/* string value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
__anon184::v_lock	vim/vim/src/structs.h	/^    char	v_lock;	    \/* see below: VAR_LOCKED, VAR_FIXED *\/$/;"	m	struct:__anon184	access:public
__anon184::v_type	vim/vim/src/structs.h	/^    vartype_T	v_type;$/;"	m	struct:__anon184	access:public
__anon184::vval	vim/vim/src/structs.h	/^    }		vval;$/;"	m	struct:__anon184	typeref:union:__anon184::__anon185	access:public
__anon186::sl_items	vim/vim/src/structs.h	/^    listitem_T	sl_items[10];$/;"	m	struct:__anon186	access:public
__anon186::sl_list	vim/vim/src/structs.h	/^    list_T	sl_list;	\/* must be first *\/$/;"	m	struct:__anon186	access:public
__anon187::uf_args	vim/vim/src/structs.h	/^    garray_T	uf_args;	\/* arguments *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_calls	vim/vim/src/structs.h	/^    int		uf_calls;	\/* nr of active calls *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_cleared	vim/vim/src/structs.h	/^    int		uf_cleared;	\/* func_clear() was already called *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_flags	vim/vim/src/structs.h	/^    int		uf_flags;$/;"	m	struct:__anon187	access:public
__anon187::uf_lines	vim/vim/src/structs.h	/^    garray_T	uf_lines;	\/* function lines *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_name	vim/vim/src/structs.h	/^    char_u	uf_name[1];	\/* name of function (actually longer); can$/;"	m	struct:__anon187	access:public
__anon187::uf_profiling	vim/vim/src/structs.h	/^    int		uf_profiling;	\/* TRUE when func is being profiled *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_refcount	vim/vim/src/structs.h	/^    int		uf_refcount;	\/* reference count, see func_name_refcount() *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_scoped	vim/vim/src/structs.h	/^    funccall_T	*uf_scoped;	\/* l: local variables for closure *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_script_ID	vim/vim/src/structs.h	/^    scid_T	uf_script_ID;	\/* ID of script where function was defined,$/;"	m	struct:__anon187	access:public
__anon187::uf_tm_children	vim/vim/src/structs.h	/^    proftime_T	uf_tm_children;	\/* time spent in children this call *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tm_count	vim/vim/src/structs.h	/^    int		uf_tm_count;	\/* nr of calls *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tm_self	vim/vim/src/structs.h	/^    proftime_T	uf_tm_self;	\/* time spent in function itself *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tm_total	vim/vim/src/structs.h	/^    proftime_T	uf_tm_total;	\/* time spent in function + children *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_children	vim/vim/src/structs.h	/^    proftime_T	uf_tml_children; \/* time spent in children for this line *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_count	vim/vim/src/structs.h	/^    int		*uf_tml_count;	\/* nr of times line was executed *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_execed	vim/vim/src/structs.h	/^    int		uf_tml_execed;	\/* line being timed was executed *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_idx	vim/vim/src/structs.h	/^    int		uf_tml_idx;	\/* index of line being timed; -1 if none *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_self	vim/vim/src/structs.h	/^    proftime_T	*uf_tml_self;	\/* time spent in a line itself *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_start	vim/vim/src/structs.h	/^    proftime_T	uf_tml_start;	\/* start time for current line *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_total	vim/vim/src/structs.h	/^    proftime_T	*uf_tml_total;	\/* time spent in a line + children *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_tml_wait	vim/vim/src/structs.h	/^    proftime_T	uf_tml_wait;	\/* start wait time for current line *\/$/;"	m	struct:__anon187	access:public
__anon187::uf_varargs	vim/vim/src/structs.h	/^    int		uf_varargs;	\/* variable nr of arguments *\/$/;"	m	struct:__anon187	access:public
__anon189::fd_di	vim/vim/src/structs.h	/^    dictitem_T	*fd_di;		\/* Dictionary item used *\/$/;"	m	struct:__anon189	access:public
__anon189::fd_dict	vim/vim/src/structs.h	/^    dict_T	*fd_dict;	\/* Dictionary used *\/$/;"	m	struct:__anon189	access:public
__anon189::fd_newkey	vim/vim/src/structs.h	/^    char_u	*fd_newkey;	\/* new key in "dict" in allocated memory *\/$/;"	m	struct:__anon189	access:public
__anon18::expand	vim/vim/src/ex_docmd.c	/^    int	    expand;$/;"	m	struct:__anon18	file:	access:public
__anon18::name	vim/vim/src/ex_docmd.c	/^    char    *name;$/;"	m	struct:__anon18	file:	access:public
__anon190::dummy	vim/vim/src/structs.h	/^    int	    dummy;$/;"	m	struct:__anon190	access:public
__anon191::dummy	vim/vim/src/structs.h	/^    int	    dummy;$/;"	m	struct:__anon191	access:public
__anon196::ch_block_id	vim/vim/src/structs.h	/^    int		ch_block_id;	\/* ID that channel_read_json_block() is$/;"	m	struct:__anon196	access:public
__anon196::ch_block_write	vim/vim/src/structs.h	/^    int		ch_block_write;	\/* for testing: 0 when not used, -1 when write$/;"	m	struct:__anon196	access:public
__anon196::ch_buf_append	vim/vim/src/structs.h	/^    int		ch_buf_append;	\/* write appended lines instead top-bot *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_buf_bot	vim/vim/src/structs.h	/^    linenr_T	ch_buf_bot;	\/* last line to send *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_buf_top	vim/vim/src/structs.h	/^    linenr_T	ch_buf_top;	\/* next line to send *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_bufref	vim/vim/src/structs.h	/^    bufref_T	ch_bufref;	\/* buffer to read from or write to *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_callback	vim/vim/src/structs.h	/^    char_u	*ch_callback;	\/* call when a msg is not handled *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_cb_head	vim/vim/src/structs.h	/^    cbq_T	ch_cb_head;	\/* dummy node for per-request callbacks *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_deadline	vim/vim/src/structs.h	/^    DWORD	ch_deadline;$/;"	m	struct:__anon196	access:public
__anon196::ch_deadline	vim/vim/src/structs.h	/^    struct timeval ch_deadline;$/;"	m	struct:__anon196	typeref:struct:__anon196::timeval	access:public
__anon196::ch_fd	vim/vim/src/structs.h	/^    sock_T	ch_fd;	    \/* socket\/stdin\/stdout\/stderr, -1 if not used *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_head	vim/vim/src/structs.h	/^    readq_T	ch_head;	\/* header for circular raw read queue *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_inputHandler	vim/vim/src/structs.h	/^    XtInputId	ch_inputHandler; \/* Cookie for input *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_inputHandler	vim/vim/src/structs.h	/^    gint	ch_inputHandler; \/* Cookie for input *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_io	vim/vim/src/structs.h	/^    job_io_T	ch_io;$/;"	m	struct:__anon196	access:public
__anon196::ch_json_head	vim/vim/src/structs.h	/^    jsonq_T	ch_json_head;	\/* header for circular json read queue *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_mode	vim/vim/src/structs.h	/^    ch_mode_T	ch_mode;$/;"	m	struct:__anon196	access:public
__anon196::ch_nomod_error	vim/vim/src/structs.h	/^    int		ch_nomod_error;	\/* TRUE when e_modifiable was given *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_nomodifiable	vim/vim/src/structs.h	/^    int		ch_nomodifiable; \/* TRUE when buffer can be 'nomodifiable' *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_partial	vim/vim/src/structs.h	/^    partial_T	*ch_partial;$/;"	m	struct:__anon196	access:public
__anon196::ch_poll_idx	vim/vim/src/structs.h	/^    int		ch_poll_idx;	\/* used by channel_poll_setup() *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_timeout	vim/vim/src/structs.h	/^    int		ch_timeout;	\/* request timeout in msec *\/$/;"	m	struct:__anon196	access:public
__anon196::ch_wait_len	vim/vim/src/structs.h	/^    size_t	ch_wait_len;$/;"	m	struct:__anon196	access:public
__anon197::jo_block_write	vim/vim/src/structs.h	/^    int		jo_block_write;	\/* for testing only *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_callback	vim/vim/src/structs.h	/^    char_u	*jo_callback;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_channel	vim/vim/src/structs.h	/^    channel_T	*jo_channel;$/;"	m	struct:__anon197	access:public
__anon197::jo_close_cb	vim/vim/src/structs.h	/^    char_u	*jo_close_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_close_partial	vim/vim/src/structs.h	/^    partial_T	*jo_close_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_drop_never	vim/vim/src/structs.h	/^    int		jo_drop_never;$/;"	m	struct:__anon197	access:public
__anon197::jo_err_cb	vim/vim/src/structs.h	/^    char_u	*jo_err_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_err_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_err_mode;$/;"	m	struct:__anon197	access:public
__anon197::jo_err_partial	vim/vim/src/structs.h	/^    partial_T	*jo_err_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_err_timeout	vim/vim/src/structs.h	/^    int		jo_err_timeout;$/;"	m	struct:__anon197	access:public
__anon197::jo_exit_cb	vim/vim/src/structs.h	/^    char_u	*jo_exit_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_exit_partial	vim/vim/src/structs.h	/^    partial_T	*jo_exit_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_id	vim/vim/src/structs.h	/^    int		jo_id;$/;"	m	struct:__anon197	access:public
__anon197::jo_in_bot	vim/vim/src/structs.h	/^    linenr_T	jo_in_bot;$/;"	m	struct:__anon197	access:public
__anon197::jo_in_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_in_mode;$/;"	m	struct:__anon197	access:public
__anon197::jo_in_top	vim/vim/src/structs.h	/^    linenr_T	jo_in_top;$/;"	m	struct:__anon197	access:public
__anon197::jo_io	vim/vim/src/structs.h	/^    job_io_T	jo_io[4];	\/* PART_OUT, PART_ERR, PART_IN *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_io_buf	vim/vim/src/structs.h	/^    int		jo_io_buf[4];$/;"	m	struct:__anon197	access:public
__anon197::jo_io_name	vim/vim/src/structs.h	/^    char_u	*jo_io_name[4];	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_io_name_buf	vim/vim/src/structs.h	/^    char_u	jo_io_name_buf[4][NUMBUFLEN];$/;"	m	struct:__anon197	access:public
__anon197::jo_message	vim/vim/src/structs.h	/^    int		jo_message[4];$/;"	m	struct:__anon197	access:public
__anon197::jo_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_mode;$/;"	m	struct:__anon197	access:public
__anon197::jo_modifiable	vim/vim/src/structs.h	/^    int		jo_modifiable[4];$/;"	m	struct:__anon197	access:public
__anon197::jo_out_cb	vim/vim/src/structs.h	/^    char_u	*jo_out_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_out_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_out_mode;$/;"	m	struct:__anon197	access:public
__anon197::jo_out_partial	vim/vim/src/structs.h	/^    partial_T	*jo_out_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_out_timeout	vim/vim/src/structs.h	/^    int		jo_out_timeout;$/;"	m	struct:__anon197	access:public
__anon197::jo_part	vim/vim/src/structs.h	/^    int		jo_part;$/;"	m	struct:__anon197	access:public
__anon197::jo_partial	vim/vim/src/structs.h	/^    partial_T	*jo_partial;	\/* not referenced! *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_pty	vim/vim/src/structs.h	/^    int		jo_pty;$/;"	m	struct:__anon197	access:public
__anon197::jo_set	vim/vim/src/structs.h	/^    int		jo_set;		\/* JO_ bits for values that were set *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_set2	vim/vim/src/structs.h	/^    int		jo_set2;	\/* JO2_ bits for values that were set *\/$/;"	m	struct:__anon197	access:public
__anon197::jo_soe_buf	vim/vim/src/structs.h	/^    char_u	jo_soe_buf[NUMBUFLEN];$/;"	m	struct:__anon197	access:public
__anon197::jo_stoponexit	vim/vim/src/structs.h	/^    char_u	*jo_stoponexit;$/;"	m	struct:__anon197	access:public
__anon197::jo_term_cols	vim/vim/src/structs.h	/^    int		jo_term_cols;$/;"	m	struct:__anon197	access:public
__anon197::jo_term_rows	vim/vim/src/structs.h	/^    int		jo_term_rows;$/;"	m	struct:__anon197	access:public
__anon197::jo_timeout	vim/vim/src/structs.h	/^    int		jo_timeout;$/;"	m	struct:__anon197	access:public
__anon197::jo_waittime	vim/vim/src/structs.h	/^    int		jo_waittime;$/;"	m	struct:__anon197	access:public
__anon198::count	vim/vim/src/structs.h	/^    long	count;		\/* nr of times used *\/$/;"	m	struct:__anon198	access:public
__anon198::match	vim/vim/src/structs.h	/^    long	match;		\/* nr of times matched *\/$/;"	m	struct:__anon198	access:public
__anon198::slowest	vim/vim/src/structs.h	/^    proftime_T	slowest;	\/* time of slowest call *\/$/;"	m	struct:__anon198	access:public
__anon198::total	vim/vim/src/structs.h	/^    proftime_T	total;		\/* total time used *\/$/;"	m	struct:__anon198	access:public
__anon199::method_nr	vim/vim/src/structs.h	/^    int	    method_nr;$/;"	m	struct:__anon199	access:public
__anon199::method_state	vim/vim/src/structs.h	/^    void    *method_state;  \/* method-specific state information *\/$/;"	m	struct:__anon199	access:public
__anon1::codepage	vim/vim/src/mbyte.c	/^{   char *name;		int prop;		int codepage;}$/;"	m	struct:__anon1	file:	access:public
__anon1::name	vim/vim/src/mbyte.c	/^{   char *name;		int prop;		int codepage;}$/;"	m	struct:__anon1	file:	access:public
__anon1::prop	vim/vim/src/mbyte.c	/^{   char *name;		int prop;		int codepage;}$/;"	m	struct:__anon1	file:	access:public
__anon200::b_cap_prog	vim/vim/src/structs.h	/^    regprog_T	*b_cap_prog;	\/* program for 'spellcapcheck' *\/$/;"	m	struct:__anon200	access:public
__anon200::b_cjk	vim/vim/src/structs.h	/^    int		b_cjk;		\/* all CJK letters as OK *\/$/;"	m	struct:__anon200	access:public
__anon200::b_keywtab	vim/vim/src/structs.h	/^    hashtab_T	b_keywtab;		\/* syntax keywords hash table *\/$/;"	m	struct:__anon200	access:public
__anon200::b_keywtab_ic	vim/vim/src/structs.h	/^    hashtab_T	b_keywtab_ic;		\/* idem, ignore case *\/$/;"	m	struct:__anon200	access:public
__anon200::b_langp	vim/vim/src/structs.h	/^    garray_T	b_langp;	\/* list of pointers to slang_T, see spell.c *\/$/;"	m	struct:__anon200	access:public
__anon200::b_nospell_cluster_id	vim/vim/src/structs.h	/^    int		b_nospell_cluster_id;	\/* @NoSpell cluster ID or 0 *\/$/;"	m	struct:__anon200	access:public
__anon200::b_p_spc	vim/vim/src/structs.h	/^    char_u	*b_p_spc;	\/* 'spellcapcheck' *\/$/;"	m	struct:__anon200	access:public
__anon200::b_p_spf	vim/vim/src/structs.h	/^    char_u	*b_p_spf;	\/* 'spellfile' *\/$/;"	m	struct:__anon200	access:public
__anon200::b_p_spl	vim/vim/src/structs.h	/^    char_u	*b_p_spl;	\/* 'spelllang' *\/$/;"	m	struct:__anon200	access:public
__anon200::b_spell_cluster_id	vim/vim/src/structs.h	/^    int		b_spell_cluster_id;	\/* @Spell cluster ID or 0 *\/$/;"	m	struct:__anon200	access:public
__anon200::b_spell_ismw	vim/vim/src/structs.h	/^    char_u	b_spell_ismw[256];\/* flags: is midword char *\/$/;"	m	struct:__anon200	access:public
__anon200::b_spell_ismw_mb	vim/vim/src/structs.h	/^    char_u	*b_spell_ismw_mb; \/* multi-byte midword chars *\/$/;"	m	struct:__anon200	access:public
__anon200::b_sst_array	vim/vim/src/structs.h	/^    synstate_T	*b_sst_array;$/;"	m	struct:__anon200	access:public
__anon200::b_sst_check_lnum	vim/vim/src/structs.h	/^    linenr_T	b_sst_check_lnum;$/;"	m	struct:__anon200	access:public
__anon200::b_sst_first	vim/vim/src/structs.h	/^    synstate_T	*b_sst_first;$/;"	m	struct:__anon200	access:public
__anon200::b_sst_firstfree	vim/vim/src/structs.h	/^    synstate_T	*b_sst_firstfree;$/;"	m	struct:__anon200	access:public
__anon200::b_sst_freecount	vim/vim/src/structs.h	/^    int		b_sst_freecount;$/;"	m	struct:__anon200	access:public
__anon200::b_sst_lasttick	vim/vim/src/structs.h	/^    short_u	b_sst_lasttick;	\/* last display tick *\/$/;"	m	struct:__anon200	access:public
__anon200::b_sst_len	vim/vim/src/structs.h	/^    int		b_sst_len;$/;"	m	struct:__anon200	access:public
__anon200::b_syn_chartab	vim/vim/src/structs.h	/^    char_u	b_syn_chartab[32];	\/* syntax iskeyword option *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_clusters	vim/vim/src/structs.h	/^    garray_T	b_syn_clusters;		\/* table for syntax clusters *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_conceal	vim/vim/src/structs.h	/^    int		b_syn_conceal;		\/* auto-conceal for :syn cmds *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_containedin	vim/vim/src/structs.h	/^    int		b_syn_containedin;	\/* TRUE when there is an item with a$/;"	m	struct:__anon200	access:public
__anon200::b_syn_error	vim/vim/src/structs.h	/^    int		b_syn_error;		\/* TRUE when error occurred in HL *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_folditems	vim/vim/src/structs.h	/^    int		b_syn_folditems;	\/* number of patterns with the HL_FOLD$/;"	m	struct:__anon200	access:public
__anon200::b_syn_ic	vim/vim/src/structs.h	/^    int		b_syn_ic;		\/* ignore case for :syn cmds *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_isk	vim/vim/src/structs.h	/^    char_u	*b_syn_isk;		\/* iskeyword option *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_linecont_ic	vim/vim/src/structs.h	/^    int		b_syn_linecont_ic;	\/* ignore-case flag for above *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_linecont_pat	vim/vim/src/structs.h	/^    char_u	*b_syn_linecont_pat;	\/* line continuation pattern *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_linecont_prog	vim/vim/src/structs.h	/^    regprog_T	*b_syn_linecont_prog;	\/* line continuation program *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_linecont_time	vim/vim/src/structs.h	/^    syn_time_T  b_syn_linecont_time;$/;"	m	struct:__anon200	access:public
__anon200::b_syn_patterns	vim/vim/src/structs.h	/^    garray_T	b_syn_patterns;		\/* table for syntax patterns *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_slow	vim/vim/src/structs.h	/^    int		b_syn_slow;		\/* TRUE when 'redrawtime' reached *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_spell	vim/vim/src/structs.h	/^    int		b_syn_spell;		\/* SYNSPL_ values *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_sync_flags	vim/vim/src/structs.h	/^    int		b_syn_sync_flags;	\/* flags about how to sync *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_sync_id	vim/vim/src/structs.h	/^    short	b_syn_sync_id;		\/* group to sync on *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_sync_linebreaks	vim/vim/src/structs.h	/^    long	b_syn_sync_linebreaks;	\/* offset for multi-line pattern *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_sync_maxlines	vim/vim/src/structs.h	/^    long	b_syn_sync_maxlines;	\/* maximal sync lines offset *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_sync_minlines	vim/vim/src/structs.h	/^    long	b_syn_sync_minlines;	\/* minimal sync lines offset *\/$/;"	m	struct:__anon200	access:public
__anon200::b_syn_topgrp	vim/vim/src/structs.h	/^    int		b_syn_topgrp;		\/* for ":syntax include" *\/$/;"	m	struct:__anon200	access:public
__anon200::dummy	vim/vim/src/structs.h	/^    int		dummy;$/;"	m	struct:__anon200	access:public
__anon201::attr	vim/vim/src/structs.h	/^    int		attr;	\/* attributes to be used for a match *\/$/;"	m	struct:__anon201	access:public
__anon201::attr_cur	vim/vim/src/structs.h	/^    int		attr_cur; \/* attributes currently active in win_line() *\/$/;"	m	struct:__anon201	access:public
__anon201::buf	vim/vim/src/structs.h	/^    buf_T	*buf;	\/* the buffer to search for a match *\/$/;"	m	struct:__anon201	access:public
__anon201::endcol	vim/vim/src/structs.h	/^    colnr_T	endcol;	 \/* in win_line() points to char where HL ends *\/$/;"	m	struct:__anon201	access:public
__anon201::first_lnum	vim/vim/src/structs.h	/^    linenr_T	first_lnum;	\/* first lnum to search for multi-line pat *\/$/;"	m	struct:__anon201	access:public
__anon201::is_addpos	vim/vim/src/structs.h	/^    int		is_addpos;	\/* position specified directly by$/;"	m	struct:__anon201	access:public
__anon201::lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* the line to search for a match *\/$/;"	m	struct:__anon201	access:public
__anon201::rm	vim/vim/src/structs.h	/^    regmmatch_T	rm;	\/* points to the regexp program; contains last found$/;"	m	struct:__anon201	access:public
__anon201::startcol	vim/vim/src/structs.h	/^    colnr_T	startcol; \/* in win_line() points to char where HL starts *\/$/;"	m	struct:__anon201	access:public
__anon201::tm	vim/vim/src/structs.h	/^    proftime_T	tm;	\/* for a time limit *\/$/;"	m	struct:__anon201	access:public
__anon202::col	vim/vim/src/structs.h	/^    colnr_T	col;	\/* column number *\/$/;"	m	struct:__anon202	access:public
__anon202::len	vim/vim/src/structs.h	/^    int		len;	\/* length: 0 - to the end of line *\/$/;"	m	struct:__anon202	access:public
__anon202::lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* line number *\/$/;"	m	struct:__anon202	access:public
__anon203::globaldir	vim/vim/src/structs.h	/^    char_u	*globaldir;	\/* saved value of globaldir *\/$/;"	m	struct:__anon203	access:public
__anon203::new_curbuf	vim/vim/src/structs.h	/^    bufref_T	new_curbuf;	\/* new curbuf *\/$/;"	m	struct:__anon203	access:public
__anon203::new_curwin	vim/vim/src/structs.h	/^    win_T	*new_curwin;	\/* new curwin *\/$/;"	m	struct:__anon203	access:public
__anon203::save_curbuf	vim/vim/src/structs.h	/^    buf_T	*save_curbuf;	\/* saved curbuf *\/$/;"	m	struct:__anon203	access:public
__anon203::save_curwin	vim/vim/src/structs.h	/^    win_T	*save_curwin;	\/* saved curwin *\/$/;"	m	struct:__anon203	access:public
__anon203::use_aucmd_win	vim/vim/src/structs.h	/^    int		use_aucmd_win;	\/* using aucmd_win *\/$/;"	m	struct:__anon203	access:public
__anon204::hasnum	vim/vim/src/structs.h	/^    int		hasnum;$/;"	m	struct:__anon204	access:public
__anon204::name	vim/vim/src/structs.h	/^    const char	*name;$/;"	m	struct:__anon204	access:public
__anon204::number	vim/vim/src/structs.h	/^    long	number;$/;"	m	struct:__anon204	access:public
__anon204::present	vim/vim/src/structs.h	/^    int		present;$/;"	m	struct:__anon204	access:public
__anon204::string	vim/vim/src/structs.h	/^    char_u	*string;	\/* points into option string *\/$/;"	m	struct:__anon204	access:public
__anon204::strlen	vim/vim/src/structs.h	/^    int		strlen;$/;"	m	struct:__anon204	access:public
__anon205::bg_color	vim/vim/src/structs.h	/^    long_u	bg_color;$/;"	m	struct:__anon205	access:public
__anon205::bold	vim/vim/src/structs.h	/^    int		bold;$/;"	m	struct:__anon205	access:public
__anon205::fg_color	vim/vim/src/structs.h	/^    long_u	fg_color;$/;"	m	struct:__anon205	access:public
__anon205::italic	vim/vim/src/structs.h	/^    int		italic;$/;"	m	struct:__anon205	access:public
__anon205::undercurl	vim/vim/src/structs.h	/^    int		undercurl;$/;"	m	struct:__anon205	access:public
__anon205::underline	vim/vim/src/structs.h	/^    int		underline;$/;"	m	struct:__anon205	access:public
__anon206::arguments	vim/vim/src/structs.h	/^    char_u	*arguments;$/;"	m	struct:__anon206	access:public
__anon206::chars_per_line	vim/vim/src/structs.h	/^    int		chars_per_line;$/;"	m	struct:__anon206	access:public
__anon206::do_syntax	vim/vim/src/structs.h	/^    int		do_syntax;$/;"	m	struct:__anon206	access:public
__anon206::duplex	vim/vim/src/structs.h	/^    int		duplex;$/;"	m	struct:__anon206	access:public
__anon206::has_color	vim/vim/src/structs.h	/^    int		has_color;$/;"	m	struct:__anon206	access:public
__anon206::jobname	vim/vim/src/structs.h	/^    char_u	*jobname;$/;"	m	struct:__anon206	access:public
__anon206::lines_per_page	vim/vim/src/structs.h	/^    int		lines_per_page;$/;"	m	struct:__anon206	access:public
__anon206::modec	vim/vim/src/structs.h	/^    int		modec;$/;"	m	struct:__anon206	access:public
__anon206::n_collated_copies	vim/vim/src/structs.h	/^    int		n_collated_copies;$/;"	m	struct:__anon206	access:public
__anon206::n_uncollated_copies	vim/vim/src/structs.h	/^    int		n_uncollated_copies;$/;"	m	struct:__anon206	access:public
__anon206::number	vim/vim/src/structs.h	/^    prt_text_attr_T number;$/;"	m	struct:__anon206	access:public
__anon206::outfile	vim/vim/src/structs.h	/^    char_u	*outfile;$/;"	m	struct:__anon206	access:public
__anon206::user_abort	vim/vim/src/structs.h	/^    int		user_abort;$/;"	m	struct:__anon206	access:public
__anon207::pum_extra	vim/vim/src/structs.h	/^    char_u	*pum_extra;	\/* extra menu text (may be truncated) *\/$/;"	m	struct:__anon207	access:public
__anon207::pum_info	vim/vim/src/structs.h	/^    char_u	*pum_info;	\/* extra info *\/$/;"	m	struct:__anon207	access:public
__anon207::pum_kind	vim/vim/src/structs.h	/^    char_u	*pum_kind;	\/* extra kind text (may be truncated) *\/$/;"	m	struct:__anon207	access:public
__anon207::pum_text	vim/vim/src/structs.h	/^    char_u	*pum_text;	\/* main menu text *\/$/;"	m	struct:__anon207	access:public
__anon208::tn_did_filefind_init	vim/vim/src/structs.h	/^    int		tn_did_filefind_init;$/;"	m	struct:__anon208	access:public
__anon208::tn_hf_idx	vim/vim/src/structs.h	/^    int		tn_hf_idx;$/;"	m	struct:__anon208	access:public
__anon208::tn_np	vim/vim/src/structs.h	/^    char_u	*tn_np;		\/* current position in tn_tags *\/$/;"	m	struct:__anon208	access:public
__anon208::tn_search_ctx	vim/vim/src/structs.h	/^    void	*tn_search_ctx;$/;"	m	struct:__anon208	access:public
__anon208::tn_tags	vim/vim/src/structs.h	/^    char_u	*tn_tags;	\/* value of 'tags' when starting *\/$/;"	m	struct:__anon208	access:public
__anon209::buffer	vim/vim/src/structs.h	/^  char_u   buffer[64];$/;"	m	struct:__anon209	access:public
__anon209::state	vim/vim/src/structs.h	/^  UINT32_T state[8];$/;"	m	struct:__anon209	access:public
__anon209::total	vim/vim/src/structs.h	/^  UINT32_T total[2];$/;"	m	struct:__anon209	access:public
__anon210::argc	vim/vim/src/structs.h	/^    int		argc;$/;"	m	struct:__anon210	access:public
__anon210::argv	vim/vim/src/structs.h	/^    char	**argv;$/;"	m	struct:__anon210	access:public
__anon210::ask_for_key	vim/vim/src/structs.h	/^    int		ask_for_key;		\/* -x argument *\/$/;"	m	struct:__anon210	access:public
__anon210::cmds_tofree	vim/vim/src/structs.h	/^    char_u	cmds_tofree[MAX_ARG_CMDS];   \/* commands that need free() *\/$/;"	m	struct:__anon210	access:public
__anon210::commands	vim/vim/src/structs.h	/^    char_u	*commands[MAX_ARG_CMDS];     \/* commands from + or -c arg. *\/$/;"	m	struct:__anon210	access:public
__anon210::diff_mode	vim/vim/src/structs.h	/^    int		diff_mode;		\/* start with 'diff' set *\/$/;"	m	struct:__anon210	access:public
__anon210::edit_type	vim/vim/src/structs.h	/^    int		edit_type;		\/* type of editing to do *\/$/;"	m	struct:__anon210	access:public
__anon210::evim_mode	vim/vim/src/structs.h	/^    int		evim_mode;		\/* started as "evim" *\/$/;"	m	struct:__anon210	access:public
__anon210::fname	vim/vim/src/structs.h	/^    char_u	*fname;			\/* first file to edit *\/$/;"	m	struct:__anon210	access:public
__anon210::full_path	vim/vim/src/structs.h	/^    int		full_path;		\/* file name argument was full path *\/$/;"	m	struct:__anon210	access:public
__anon210::literal	vim/vim/src/structs.h	/^    int		literal;		\/* don't expand file names *\/$/;"	m	struct:__anon210	access:public
__anon210::n_commands	vim/vim/src/structs.h	/^    int		n_commands;		     \/* no. of commands from + or -c *\/$/;"	m	struct:__anon210	access:public
__anon210::n_pre_commands	vim/vim/src/structs.h	/^    int		n_pre_commands;		     \/* no. of commands from --cmd *\/$/;"	m	struct:__anon210	access:public
__anon210::no_swap_file	vim/vim/src/structs.h	/^    int		no_swap_file;		\/* "-n" argument used *\/$/;"	m	struct:__anon210	access:public
__anon210::not_a_term	vim/vim/src/structs.h	/^    int		not_a_term;		\/* no warning for missing term? *\/$/;"	m	struct:__anon210	access:public
__anon210::pre_commands	vim/vim/src/structs.h	/^    char_u	*pre_commands[MAX_ARG_CMDS]; \/* commands from --cmd argument *\/$/;"	m	struct:__anon210	access:public
__anon210::serverArg	vim/vim/src/structs.h	/^    int		serverArg;		\/* TRUE when argument for a server *\/$/;"	m	struct:__anon210	access:public
__anon210::serverName_arg	vim/vim/src/structs.h	/^    char_u	*serverName_arg;	\/* cmdline arg for server name *\/$/;"	m	struct:__anon210	access:public
__anon210::serverStr	vim/vim/src/structs.h	/^    char_u	*serverStr;		\/* remote server command *\/$/;"	m	struct:__anon210	access:public
__anon210::serverStrEnc	vim/vim/src/structs.h	/^    char_u	*serverStrEnc;		\/* encoding of serverStr *\/$/;"	m	struct:__anon210	access:public
__anon210::servername	vim/vim/src/structs.h	/^    char_u	*servername;		\/* allocated name for our server *\/$/;"	m	struct:__anon210	access:public
__anon210::tagname	vim/vim/src/structs.h	/^    char_u	*tagname;		\/* tag from -t argument *\/$/;"	m	struct:__anon210	access:public
__anon210::term	vim/vim/src/structs.h	/^    char_u	*term;			\/* specified terminal name *\/$/;"	m	struct:__anon210	access:public
__anon210::tty_fail	vim/vim/src/structs.h	/^    int		tty_fail;		\/* exit if not a tty *\/$/;"	m	struct:__anon210	access:public
__anon210::use_debug_break_level	vim/vim/src/structs.h	/^    int		use_debug_break_level;$/;"	m	struct:__anon210	access:public
__anon210::use_ef	vim/vim/src/structs.h	/^    char_u	*use_ef;		\/* 'errorfile' from -q argument *\/$/;"	m	struct:__anon210	access:public
__anon210::use_vimrc	vim/vim/src/structs.h	/^    char_u	*use_vimrc;		\/* vimrc from -u argument *\/$/;"	m	struct:__anon210	access:public
__anon210::want_full_screen	vim/vim/src/structs.h	/^    int		want_full_screen;$/;"	m	struct:__anon210	access:public
__anon210::window_count	vim/vim/src/structs.h	/^    int		window_count;		\/* number of windows to use *\/$/;"	m	struct:__anon210	access:public
__anon210::window_layout	vim/vim/src/structs.h	/^    int		window_layout;		\/* 0, WIN_HOR, WIN_VER or WIN_TABS *\/$/;"	m	struct:__anon210	access:public
__anon211::chAlone	vim/vim/src/os_win32.c	/^    int	    chAlone;$/;"	m	struct:__anon211	file:	access:public
__anon211::chAlt	vim/vim/src/os_win32.c	/^    int	    chAlt;$/;"	m	struct:__anon211	file:	access:public
__anon211::chCtrl	vim/vim/src/os_win32.c	/^    int	    chCtrl;$/;"	m	struct:__anon211	file:	access:public
__anon211::chShift	vim/vim/src/os_win32.c	/^    int	    chShift;$/;"	m	struct:__anon211	file:	access:public
__anon211::fAnsiKey	vim/vim/src/os_win32.c	/^    BOOL    fAnsiKey;$/;"	m	struct:__anon211	file:	access:public
__anon211::wVirtKey	vim/vim/src/os_win32.c	/^    WORD    wVirtKey;$/;"	m	struct:__anon211	file:	access:public
__anon212::bytes_printed	vim/vim/src/hardcopy.c	/^    long_u	bytes_printed;	    \/* bytes printed so far *\/$/;"	m	struct:__anon212	file:	access:public
__anon212::column	vim/vim/src/hardcopy.c	/^    colnr_T	column;		    \/* byte column *\/$/;"	m	struct:__anon212	file:	access:public
__anon212::ff	vim/vim/src/hardcopy.c	/^    int		ff;		    \/* seen form feed character *\/$/;"	m	struct:__anon212	file:	access:public
__anon212::file_line	vim/vim/src/hardcopy.c	/^    linenr_T	file_line;	    \/* line nr in the buffer *\/$/;"	m	struct:__anon212	file:	access:public
__anon212::lead_spaces	vim/vim/src/hardcopy.c	/^    int		lead_spaces;	    \/* remaining spaces for a TAB *\/$/;"	m	struct:__anon212	file:	access:public
__anon212::print_pos	vim/vim/src/hardcopy.c	/^    int		print_pos;	    \/* virtual column for computing TABs *\/$/;"	m	struct:__anon212	file:	access:public
__anon213::from	vim/vim/src/menu.c	/^    char_u	*from;		\/* English name *\/$/;"	m	struct:__anon213	file:	access:public
__anon213::from_noamp	vim/vim/src/menu.c	/^    char_u	*from_noamp;	\/* same, without '&' *\/$/;"	m	struct:__anon213	file:	access:public
__anon213::to	vim/vim/src/menu.c	/^    char_u	*to;		\/* translated name *\/$/;"	m	struct:__anon213	file:	access:public
__anon214::decode_buffer_fn	vim/vim/src/crypt.c	/^    long (*decode_buffer_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
__anon214::decode_fn	vim/vim/src/crypt.c	/^    void (*decode_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
__anon214::decode_inplace_fn	vim/vim/src/crypt.c	/^    void (*decode_inplace_fn)(cryptstate_T *state, char_u *p1, size_t len,$/;"	m	struct:__anon214	file:	access:public
__anon214::encode_buffer_fn	vim/vim/src/crypt.c	/^    long (*encode_buffer_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
__anon214::encode_fn	vim/vim/src/crypt.c	/^    void (*encode_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
__anon214::encode_inplace_fn	vim/vim/src/crypt.c	/^    void (*encode_inplace_fn)(cryptstate_T *state, char_u *p1, size_t len,$/;"	m	struct:__anon214	file:	access:public
__anon214::init_fn	vim/vim/src/crypt.c	/^    void (* init_fn)(cryptstate_T *state, char_u *key,$/;"	m	struct:__anon214	file:	access:public
__anon214::magic	vim/vim/src/crypt.c	/^    char    *magic;	\/* magic bytes stored in file header *\/$/;"	m	struct:__anon214	file:	access:public
__anon214::name	vim/vim/src/crypt.c	/^    char    *name;	\/* encryption name as used in 'cryptmethod' *\/$/;"	m	struct:__anon214	file:	access:public
__anon214::salt_len	vim/vim/src/crypt.c	/^    int	    salt_len;	\/* length of salt, or 0 when not using salt *\/$/;"	m	struct:__anon214	file:	access:public
__anon214::seed_len	vim/vim/src/crypt.c	/^    int	    seed_len;	\/* length of seed, or 0 when not using salt *\/$/;"	m	struct:__anon214	file:	access:public
__anon214::self_test_fn	vim/vim/src/crypt.c	/^    int (* self_test_fn)();$/;"	m	struct:__anon214	file:	access:public
__anon214::whole_undofile	vim/vim/src/crypt.c	/^    int	    whole_undofile; \/* whole undo file is encrypted *\/$/;"	m	struct:__anon214	file:	access:public
__anon214::works_inplace	vim/vim/src/crypt.c	/^    int	    works_inplace; \/* encryption\/decryption can be done in-place *\/$/;"	m	struct:__anon214	file:	access:public
__anon215::__anon216::__anon217::end_col_nr	vim/vim/src/ex_cmds.c	/^	    varnumber_T	end_col_nr;		\/* ending column number *\/$/;"	m	struct:__anon215::__anon216::__anon217	file:	access:public
__anon215::__anon216::__anon217::start_col_nr	vim/vim/src/ex_cmds.c	/^	    varnumber_T	start_col_nr;		\/* starting column number *\/$/;"	m	struct:__anon215::__anon216::__anon217	file:	access:public
__anon215::__anon216::line	vim/vim/src/ex_cmds.c	/^	} line;$/;"	m	union:__anon215::__anon216	typeref:struct:__anon215::__anon216::__anon217	file:	access:public
__anon215::__anon216::value	vim/vim/src/ex_cmds.c	/^	varnumber_T	value;		\/* value if sorting by integer *\/$/;"	m	union:__anon215::__anon216	file:	access:public
__anon215::__anon216::value_flt	vim/vim/src/ex_cmds.c	/^	float_T value_flt;	\/* value if sorting by float *\/$/;"	m	union:__anon215::__anon216	file:	access:public
__anon215::lnum	vim/vim/src/ex_cmds.c	/^    linenr_T	lnum;			\/* line number *\/$/;"	m	struct:__anon215	file:	access:public
__anon215::st_u	vim/vim/src/ex_cmds.c	/^    } st_u;$/;"	m	struct:__anon215	typeref:union:__anon215::__anon216	file:	access:public
__anon218::do_all	vim/vim/src/ex_cmds.c	/^    int	do_all;		\/* do multiple substitutions per line *\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_ask	vim/vim/src/ex_cmds.c	/^    int	do_ask;		\/* ask for confirmation *\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_count	vim/vim/src/ex_cmds.c	/^    int	do_count;	\/* count only *\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_error	vim/vim/src/ex_cmds.c	/^    int	do_error;	\/* if false, ignore errors *\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_ic	vim/vim/src/ex_cmds.c	/^    int	do_ic;		\/* ignore case flag *\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_list	vim/vim/src/ex_cmds.c	/^    int	do_list;	\/* list last line with subs. *\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_number	vim/vim/src/ex_cmds.c	/^    int	do_number;	\/* list last line with line nr*\/$/;"	m	struct:__anon218	file:	access:public
__anon218::do_print	vim/vim/src/ex_cmds.c	/^    int	do_print;	\/* print last line with subs. *\/$/;"	m	struct:__anon218	file:	access:public
__anon21::expr_result	vim/vim/src/os_mswin.c	/^    int		expr_result;	\/* 0 for REPLY, 1 for RESULT 2 for error *\/$/;"	m	struct:__anon21	file:	access:public
__anon21::reply	vim/vim/src/os_mswin.c	/^    char_u	*reply;		\/* reply string *\/$/;"	m	struct:__anon21	file:	access:public
__anon21::server	vim/vim/src/os_mswin.c	/^    HWND	server;		\/* server window *\/$/;"	m	struct:__anon21	file:	access:public
__anon222::name	vim/vim/src/if_python3.c	/^    char *name;$/;"	m	struct:__anon222	file:	access:public
__anon222::ptr	vim/vim/src/if_python3.c	/^    PYTHON_PROC *ptr;$/;"	m	struct:__anon222	file:	access:public
__anon223::family	vim/vim/src/gui_mac.c	/^    FMFontFamily family;$/;"	m	struct:__anon223	file:	access:public
__anon223::isPanelVisible	vim/vim/src/gui_mac.c	/^    Boolean isPanelVisible;$/;"	m	struct:__anon223	file:	access:public
__anon223::size	vim/vim/src/gui_mac.c	/^    FMFontSize size;$/;"	m	struct:__anon223	file:	access:public
__anon223::style	vim/vim/src/gui_mac.c	/^    FMFontStyle style;$/;"	m	struct:__anon223	file:	access:public
__anon224::key_sym	vim/vim/src/gui_mac.c	/^    KeySym  key_sym;$/;"	m	struct:__anon224	file:	access:public
__anon224::vim_code0	vim/vim/src/gui_mac.c	/^    char_u  vim_code0;$/;"	m	struct:__anon224	file:	access:public
__anon224::vim_code1	vim/vim/src/gui_mac.c	/^    char_u  vim_code1;$/;"	m	struct:__anon224	file:	access:public
__anon225::box	vim/vim/src/gui_mac.c	/^    Rect    box;$/;"	m	struct:__anon225	file:	access:public
__anon225::idx	vim/vim/src/gui_mac.c	/^    short   idx;$/;"	m	struct:__anon225	file:	access:public
__anon225::width	vim/vim/src/gui_mac.c	/^    short   width;	\/* Size of the text in pixel *\/$/;"	m	struct:__anon225	file:	access:public
__anon229::bi_avail	vim/vim/src/undo.c	/^    size_t	bi_avail;   \/* bytes available in bi_buffer *\/$/;"	m	struct:__anon229	file:	access:public
__anon229::bi_buf	vim/vim/src/undo.c	/^    buf_T	*bi_buf;$/;"	m	struct:__anon229	file:	access:public
__anon229::bi_buffer	vim/vim/src/undo.c	/^    char_u	*bi_buffer; \/* CRYPT_BUF_SIZE, NULL when not buffering *\/$/;"	m	struct:__anon229	file:	access:public
__anon229::bi_fp	vim/vim/src/undo.c	/^    FILE	*bi_fp;$/;"	m	struct:__anon229	file:	access:public
__anon229::bi_state	vim/vim/src/undo.c	/^    cryptstate_T *bi_state;$/;"	m	struct:__anon229	file:	access:public
__anon229::bi_used	vim/vim/src/undo.c	/^    size_t	bi_used;    \/* bytes written to\/read from bi_buffer *\/$/;"	m	struct:__anon229	file:	access:public
__anon22::rawlen	vim/vim/src/winclip.c	/^    int rawlen;		\/* length of clip_star.format_raw, including encoding,$/;"	m	struct:__anon22	file:	access:public
__anon22::txtlen	vim/vim/src/winclip.c	/^    int txtlen;		\/* length of CF_TEXT in bytes *\/$/;"	m	struct:__anon22	file:	access:public
__anon22::type	vim/vim/src/winclip.c	/^    int type;		\/* MCHAR, MBLOCK or MLINE *\/$/;"	m	struct:__anon22	file:	access:public
__anon22::ucslen	vim/vim/src/winclip.c	/^    int ucslen;		\/* length of CF_UNICODETEXT in words *\/$/;"	m	struct:__anon22	file:	access:public
__anon233::accel	vim/vim/src/workshop.c	/^    char	*accel;			\/* optional accelerator key *\/$/;"	m	struct:__anon233	file:	access:public
__anon233::name	vim/vim/src/workshop.c	/^    char	*name;			\/* name of the menu *\/$/;"	m	struct:__anon233	file:	access:public
__anon233::verb	vim/vim/src/workshop.c	/^    char	*verb;			\/* menu verb *\/$/;"	m	struct:__anon233	file:	access:public
__anon234::name	vim/vim/src/if_ruby.c	/^    char *name;$/;"	m	struct:__anon234	file:	access:public
__anon234::ptr	vim/vim/src/if_ruby.c	/^    RUBY_PROC *ptr;$/;"	m	struct:__anon234	file:	access:public
__anon235::real	vim/vim/src/gui_at_fs.c	/^    char	*real;$/;"	m	struct:__anon235	file:	access:public
__anon235::shown	vim/vim/src/gui_at_fs.c	/^    char	*shown;$/;"	m	struct:__anon235	file:	access:public
__anon235::statDone	vim/vim/src/gui_at_fs.c	/^    int		statDone;$/;"	m	struct:__anon235	file:	access:public
__anon236::beginSelection	vim/vim/src/gui_at_fs.c	/^    int		beginSelection;$/;"	m	struct:__anon236	file:	access:public
__anon236::changed	vim/vim/src/gui_at_fs.c	/^    int		changed;$/;"	m	struct:__anon236	file:	access:public
__anon236::dir	vim/vim/src/gui_at_fs.c	/^    char	*dir;$/;"	m	struct:__anon236	file:	access:public
__anon236::endSelection	vim/vim/src/gui_at_fs.c	/^    int		endSelection;$/;"	m	struct:__anon236	file:	access:public
__anon236::entries	vim/vim/src/gui_at_fs.c	/^    SFEntry	*entries;$/;"	m	struct:__anon236	file:	access:public
__anon236::hOrigin	vim/vim/src/gui_at_fs.c	/^    int		hOrigin;$/;"	m	struct:__anon236	file:	access:public
__anon236::mtime	vim/vim/src/gui_at_fs.c	/^    time_t	mtime;$/;"	m	struct:__anon236	file:	access:public
__anon236::nChars	vim/vim/src/gui_at_fs.c	/^    int		nChars;$/;"	m	struct:__anon236	file:	access:public
__anon236::nEntries	vim/vim/src/gui_at_fs.c	/^    int		nEntries;$/;"	m	struct:__anon236	file:	access:public
__anon236::path	vim/vim/src/gui_at_fs.c	/^    char	*path;$/;"	m	struct:__anon236	file:	access:public
__anon236::vOrigin	vim/vim/src/gui_at_fs.c	/^    int		vOrigin;$/;"	m	struct:__anon236	file:	access:public
__anon237::dir	vim/vim/src/gui_at_fs.c	/^    char	*dir;$/;"	m	struct:__anon237	file:	access:public
__anon237::name	vim/vim/src/gui_at_fs.c	/^    char	*name;$/;"	m	struct:__anon237	file:	access:public
__anon238::fontname	vim/vim/src/gui_at_fs.c	/^    char *fontname;$/;"	m	struct:__anon238	file:	access:public
__anon23::__anon24::__anon25::_basic	vim/vim/src/os_vms.c	/^	    char	_basic[3];$/;"	m	struct:__anon23::__anon24::__anon25	file:	access:public
__anon23::__anon24::__anon25::length	vim/vim/src/os_vms.c	/^	    char	length;$/;"	m	struct:__anon23::__anon24::__anon25	file:	access:public
__anon23::__anon24::basic	vim/vim/src/os_vms.c	/^	int	basic;$/;"	m	union:__anon23::__anon24	file:	access:public
__anon23::__anon24::y	vim/vim/src/os_vms.c	/^	}	y;$/;"	m	union:__anon23::__anon24	typeref:struct:__anon23::__anon24::__anon25	file:	access:public
__anon23::class	vim/vim/src/os_vms.c	/^    char	class;$/;"	m	struct:__anon23	file:	access:public
__anon23::extended	vim/vim/src/os_vms.c	/^    int		extended;$/;"	m	struct:__anon23	file:	access:public
__anon23::type	vim/vim/src/os_vms.c	/^    char	type;$/;"	m	struct:__anon23	file:	access:public
__anon23::width	vim/vim/src/os_vms.c	/^    short	width;$/;"	m	struct:__anon23	file:	access:public
__anon23::x	vim/vim/src/os_vms.c	/^    }	x;$/;"	m	struct:__anon23	typeref:union:__anon23::__anon24	file:	access:public
__anon240::key_sym	vim/vim/src/gui_photon.c	/^    int	    key_sym;$/;"	m	struct:__anon240	file:	access:public
__anon240::vim_code0	vim/vim/src/gui_photon.c	/^    char_u  vim_code0;$/;"	m	struct:__anon240	file:	access:public
__anon240::vim_code1	vim/vim/src/gui_photon.c	/^    char_u  vim_code1;$/;"	m	struct:__anon240	file:	access:public
__anon242::bv_allocated	vim/vim/src/vim.h	/^    int		bv_allocated;	\/* bv_string was allocated *\/$/;"	m	struct:__anon242	access:public
__anon242::bv_len	vim/vim/src/vim.h	/^    int		bv_len;		\/* length of bv_string *\/$/;"	m	struct:__anon242	access:public
__anon242::bv_nr	vim/vim/src/vim.h	/^    long	bv_nr;$/;"	m	struct:__anon242	access:public
__anon242::bv_string	vim/vim/src/vim.h	/^    char_u	*bv_string;$/;"	m	struct:__anon242	access:public
__anon242::bv_type	vim/vim/src/vim.h	/^    btype_T	bv_type;$/;"	m	struct:__anon242	access:public
__anon246::key_sym	vim/vim/src/gui_w32.c	/^    UINT    key_sym;$/;"	m	struct:__anon246	file:	access:public
__anon246::vim_code0	vim/vim/src/gui_w32.c	/^    char_u  vim_code0;$/;"	m	struct:__anon246	file:	access:public
__anon246::vim_code1	vim/vim/src/gui_w32.c	/^    char_u  vim_code1;$/;"	m	struct:__anon246	file:	access:public
__anon249::name	vim/vim/src/if_python.c	/^    char *name;$/;"	m	struct:__anon249	file:	access:public
__anon249::ptr	vim/vim/src/if_python.c	/^    PYTHON_PROC *ptr;$/;"	m	struct:__anon249	file:	access:public
__anon251::idx	vim/vim/src/evalfunc.c	/^    int		idx;$/;"	m	struct:__anon251	file:	access:public
__anon251::item	vim/vim/src/evalfunc.c	/^    listitem_T	*item;$/;"	m	struct:__anon251	file:	access:public
__anon252::item_compare_float	vim/vim/src/evalfunc.c	/^    int		item_compare_float;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_func	vim/vim/src/evalfunc.c	/^    char_u	*item_compare_func;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_func_err	vim/vim/src/evalfunc.c	/^    int		item_compare_func_err;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_ic	vim/vim/src/evalfunc.c	/^    int		item_compare_ic;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_keep_zero	vim/vim/src/evalfunc.c	/^    int		item_compare_keep_zero;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_numbers	vim/vim/src/evalfunc.c	/^    int		item_compare_numbers;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_numeric	vim/vim/src/evalfunc.c	/^    int		item_compare_numeric;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_partial	vim/vim/src/evalfunc.c	/^    partial_T	*item_compare_partial;$/;"	m	struct:__anon252	file:	access:public
__anon252::item_compare_selfdict	vim/vim/src/evalfunc.c	/^    dict_T	*item_compare_selfdict;$/;"	m	struct:__anon252	file:	access:public
__anon26::bufadrs	vim/vim/src/os_vms.c	/^    char	*bufadrs;$/;"	m	struct:__anon26	file:	access:public
__anon26::buflen	vim/vim/src/os_vms.c	/^    short	buflen;$/;"	m	struct:__anon26	file:	access:public
__anon26::itemcode	vim/vim/src/os_vms.c	/^    short	itemcode;$/;"	m	struct:__anon26	file:	access:public
__anon26::retlen	vim/vim/src/os_vms.c	/^    int		*retlen;$/;"	m	struct:__anon26	file:	access:public
__anon27::equ	vim/vim/src/os_vms.c	/^    ITEM	equ;$/;"	m	struct:__anon27	file:	access:public
__anon27::nul	vim/vim/src/os_vms.c	/^    int		nul;$/;"	m	struct:__anon27	file:	access:public
__anon28::index	vim/vim/src/os_vms.c	/^    ITEM	index;$/;"	m	struct:__anon28	file:	access:public
__anon28::nul	vim/vim/src/os_vms.c	/^    int	nul;$/;"	m	struct:__anon28	file:	access:public
__anon28::string	vim/vim/src/os_vms.c	/^    ITEM	string;$/;"	m	struct:__anon28	file:	access:public
__anon29::bg	vim/vim/src/libvterm/src/screen.c	/^  VTermColor   fg, bg;$/;"	m	struct:__anon29	file:	access:public
__anon29::blink	vim/vim/src/libvterm/src/screen.c	/^  unsigned int blink     : 1;$/;"	m	struct:__anon29	file:	access:public
__anon29::bold	vim/vim/src/libvterm/src/screen.c	/^  unsigned int bold      : 1;$/;"	m	struct:__anon29	file:	access:public
__anon29::dhl	vim/vim/src/libvterm/src/screen.c	/^  unsigned int dhl            : 2; \/* on a DECDHL line (1=top 2=bottom) *\/$/;"	m	struct:__anon29	file:	access:public
__anon29::dwl	vim/vim/src/libvterm/src/screen.c	/^  unsigned int dwl            : 1; \/* on a DECDWL or DECDHL line *\/$/;"	m	struct:__anon29	file:	access:public
__anon29::fg	vim/vim/src/libvterm/src/screen.c	/^  VTermColor   fg, bg;$/;"	m	struct:__anon29	file:	access:public
__anon29::font	vim/vim/src/libvterm/src/screen.c	/^  unsigned int font      : 4; \/* 0 to 9 *\/$/;"	m	struct:__anon29	file:	access:public
__anon29::italic	vim/vim/src/libvterm/src/screen.c	/^  unsigned int italic    : 1;$/;"	m	struct:__anon29	file:	access:public
__anon29::protected_cell	vim/vim/src/libvterm/src/screen.c	/^  unsigned int protected_cell : 1;$/;"	m	struct:__anon29	file:	access:public
__anon29::reverse	vim/vim/src/libvterm/src/screen.c	/^  unsigned int reverse   : 1;$/;"	m	struct:__anon29	file:	access:public
__anon29::strike	vim/vim/src/libvterm/src/screen.c	/^  unsigned int strike    : 1;$/;"	m	struct:__anon29	file:	access:public
__anon29::underline	vim/vim/src/libvterm/src/screen.c	/^  unsigned int underline : 2;$/;"	m	struct:__anon29	file:	access:public
__anon2::canon	vim/vim/src/mbyte.c	/^{   char *name;		int canon;}$/;"	m	struct:__anon2	file:	access:public
__anon2::name	vim/vim/src/mbyte.c	/^{   char *name;		int canon;}$/;"	m	struct:__anon2	file:	access:public
__anon30::chars	vim/vim/src/libvterm/src/screen.c	/^  uint32_t chars[VTERM_MAX_CHARS_PER_CELL];$/;"	m	struct:__anon30	file:	access:public
__anon30::pen	vim/vim/src/libvterm/src/screen.c	/^  ScreenPen pen;$/;"	m	struct:__anon30	file:	access:public
__anon31::KEYCODE_CSI	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_CSI,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_CSINUM	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_CSINUM,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_CSI_CURSOR	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_CSI_CURSOR,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_ENTER	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_ENTER,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_KEYPAD	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_KEYPAD$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_LITERAL	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_LITERAL,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_NONE	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_NONE,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_SS3	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_SS3,$/;"	e	enum:__anon31::__anon32	file:
__anon31::KEYCODE_TAB	vim/vim/src/libvterm/src/keyboard.c	/^    KEYCODE_TAB,$/;"	e	enum:__anon31::__anon32	file:
__anon31::csinum	vim/vim/src/libvterm/src/keyboard.c	/^  int csinum;$/;"	m	struct:__anon31	file:	access:public
__anon31::literal	vim/vim/src/libvterm/src/keyboard.c	/^  char literal;$/;"	m	struct:__anon31	file:	access:public
__anon31::type	vim/vim/src/libvterm/src/keyboard.c	/^  } type;$/;"	m	struct:__anon31	typeref:enum:__anon31::__anon32	file:	access:public
__anon33::data	vim/vim/src/libvterm/src/vterm_internal.h	/^  char           data[4*sizeof(uint32_t)];$/;"	m	struct:__anon33	access:public
__anon33::enc	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermEncoding *enc;$/;"	m	struct:__anon33	access:public
__anon3::offset	vim/vim/src/mbyte.c	/^    int offset;$/;"	m	struct:__anon3	file:	access:public
__anon3::rangeEnd	vim/vim/src/mbyte.c	/^    int rangeEnd;$/;"	m	struct:__anon3	file:	access:public
__anon3::rangeStart	vim/vim/src/mbyte.c	/^    int rangeStart;$/;"	m	struct:__anon3	file:	access:public
__anon3::step	vim/vim/src/mbyte.c	/^    int step;$/;"	m	struct:__anon3	file:	access:public
__anon41::designation	vim/vim/src/libvterm/src/encoding.c	/^  char designation;$/;"	m	struct:__anon41	file:	access:public
__anon41::enc	vim/vim/src/libvterm/src/encoding.c	/^  VTermEncoding *enc;$/;"	m	struct:__anon41	file:	access:public
__anon41::type	vim/vim/src/libvterm/src/encoding.c	/^  VTermEncodingType type;$/;"	m	struct:__anon41	file:	access:public
__anon42::background	vim/vim/src/libvterm/t/harness.c	/^  VTermColor background;$/;"	m	struct:__anon42	file:	access:public
__anon42::blink	vim/vim/src/libvterm/t/harness.c	/^  int blink;$/;"	m	struct:__anon42	file:	access:public
__anon42::bold	vim/vim/src/libvterm/t/harness.c	/^  int bold;$/;"	m	struct:__anon42	file:	access:public
__anon42::font	vim/vim/src/libvterm/t/harness.c	/^  int font;$/;"	m	struct:__anon42	file:	access:public
__anon42::foreground	vim/vim/src/libvterm/t/harness.c	/^  VTermColor foreground;$/;"	m	struct:__anon42	file:	access:public
__anon42::italic	vim/vim/src/libvterm/t/harness.c	/^  int italic;$/;"	m	struct:__anon42	file:	access:public
__anon42::reverse	vim/vim/src/libvterm/t/harness.c	/^  int reverse;$/;"	m	struct:__anon42	file:	access:public
__anon42::strike	vim/vim/src/libvterm/t/harness.c	/^  int strike;$/;"	m	struct:__anon42	file:	access:public
__anon42::underline	vim/vim/src/libvterm/t/harness.c	/^  int underline;$/;"	m	struct:__anon42	file:	access:public
__anon47::col	vim/vim/src/libvterm/include/vterm.h	/^  int col;$/;"	m	struct:__anon47	access:public
__anon47::row	vim/vim/src/libvterm/include/vterm.h	/^  int row;$/;"	m	struct:__anon47	access:public
__anon48::end_col	vim/vim/src/libvterm/include/vterm.h	/^  int end_col;$/;"	m	struct:__anon48	access:public
__anon48::end_row	vim/vim/src/libvterm/include/vterm.h	/^  int end_row;$/;"	m	struct:__anon48	access:public
__anon48::start_col	vim/vim/src/libvterm/include/vterm.h	/^  int start_col;$/;"	m	struct:__anon48	access:public
__anon48::start_row	vim/vim/src/libvterm/include/vterm.h	/^  int start_row;$/;"	m	struct:__anon48	access:public
__anon49::blue	vim/vim/src/libvterm/include/vterm.h	/^  uint8_t red, green, blue;$/;"	m	struct:__anon49	access:public
__anon49::green	vim/vim/src/libvterm/include/vterm.h	/^  uint8_t red, green, blue;$/;"	m	struct:__anon49	access:public
__anon49::red	vim/vim/src/libvterm/include/vterm.h	/^  uint8_t red, green, blue;$/;"	m	struct:__anon49	access:public
__anon4::core_class	vim/vim/src/gui_xmebwp.h	/^    CoreClassPart core_class;$/;"	m	struct:__anon4	access:public
__anon4::enhancedbutton_class	vim/vim/src/gui_xmebwp.h	/^    XmEnhancedButtonClassPart enhancedbutton_class;$/;"	m	struct:__anon4	access:public
__anon4::label_class	vim/vim/src/gui_xmebwp.h	/^    XmLabelClassPart label_class;$/;"	m	struct:__anon4	access:public
__anon4::primitive_class	vim/vim/src/gui_xmebwp.h	/^    XmPrimitiveClassPart primitive_class;$/;"	m	struct:__anon4	access:public
__anon4::pushbutton_class	vim/vim/src/gui_xmebwp.h	/^    XmPushButtonClassPart pushbutton_class;$/;"	m	struct:__anon4	access:public
__anon51::boolean	vim/vim/src/libvterm/include/vterm.h	/^  int boolean;$/;"	m	union:__anon51	access:public
__anon51::color	vim/vim/src/libvterm/include/vterm.h	/^  VTermColor color;$/;"	m	union:__anon51	access:public
__anon51::number	vim/vim/src/libvterm/include/vterm.h	/^  int number;$/;"	m	union:__anon51	access:public
__anon51::string	vim/vim/src/libvterm/include/vterm.h	/^  char *string;$/;"	m	union:__anon51	access:public
__anon56::chars	vim/vim/src/libvterm/include/vterm.h	/^  const uint32_t *chars;$/;"	m	struct:__anon56	access:public
__anon56::dhl	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    dhl:2;             \/* DECDHL double-height line (1=top 2=bottom) *\/$/;"	m	struct:__anon56	access:public
__anon56::dwl	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    dwl:1;             \/* DECDWL or DECDHL double-width line *\/$/;"	m	struct:__anon56	access:public
__anon56::protected_cell	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    protected_cell:1;  \/* DECSCA-protected against DECSEL\/DECSED *\/$/;"	m	struct:__anon56	access:public
__anon56::width	vim/vim/src/libvterm/include/vterm.h	/^  int             width;$/;"	m	struct:__anon56	access:public
__anon57::doubleheight	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    doubleheight:2;    \/* DECDHL line (1=top 2=bottom) *\/$/;"	m	struct:__anon57	access:public
__anon57::doublewidth	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    doublewidth:1;     \/* DECDWL or DECDHL line *\/$/;"	m	struct:__anon57	access:public
__anon58::free	vim/vim/src/libvterm/include/vterm.h	/^  void  (*free)(void *ptr, void *allocdata);$/;"	m	struct:__anon58	access:public
__anon58::malloc	vim/vim/src/libvterm/include/vterm.h	/^  void *(*malloc)(size_t size, void *allocdata);$/;"	m	struct:__anon58	access:public
__anon59::control	vim/vim/src/libvterm/include/vterm.h	/^  int (*control)(unsigned char control, void *user);$/;"	m	struct:__anon59	access:public
__anon59::csi	vim/vim/src/libvterm/include/vterm.h	/^  int (*csi)(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user);$/;"	m	struct:__anon59	access:public
__anon59::dcs	vim/vim/src/libvterm/include/vterm.h	/^  int (*dcs)(const char *command, size_t cmdlen, void *user);$/;"	m	struct:__anon59	access:public
__anon59::escape	vim/vim/src/libvterm/include/vterm.h	/^  int (*escape)(const char *bytes, size_t len, void *user);$/;"	m	struct:__anon59	access:public
__anon59::osc	vim/vim/src/libvterm/include/vterm.h	/^  int (*osc)(const char *command, size_t cmdlen, void *user);$/;"	m	struct:__anon59	access:public
__anon59::resize	vim/vim/src/libvterm/include/vterm.h	/^  int (*resize)(int rows, int cols, void *user);$/;"	m	struct:__anon59	access:public
__anon59::text	vim/vim/src/libvterm/include/vterm.h	/^  int (*text)(const char *bytes, size_t len, void *user);$/;"	m	struct:__anon59	access:public
__anon60::bell	vim/vim/src/libvterm/include/vterm.h	/^  int (*bell)(void *user);$/;"	m	struct:__anon60	access:public
__anon60::erase	vim/vim/src/libvterm/include/vterm.h	/^  int (*erase)(VTermRect rect, int selective, void *user);$/;"	m	struct:__anon60	access:public
__anon60::initpen	vim/vim/src/libvterm/include/vterm.h	/^  int (*initpen)(void *user);$/;"	m	struct:__anon60	access:public
__anon60::movecursor	vim/vim/src/libvterm/include/vterm.h	/^  int (*movecursor)(VTermPos pos, VTermPos oldpos, int visible, void *user);$/;"	m	struct:__anon60	access:public
__anon60::moverect	vim/vim/src/libvterm/include/vterm.h	/^  int (*moverect)(VTermRect dest, VTermRect src, void *user);$/;"	m	struct:__anon60	access:public
__anon60::putglyph	vim/vim/src/libvterm/include/vterm.h	/^  int (*putglyph)(VTermGlyphInfo *info, VTermPos pos, void *user);$/;"	m	struct:__anon60	access:public
__anon60::resize	vim/vim/src/libvterm/include/vterm.h	/^  int (*resize)(int rows, int cols, VTermPos *delta, void *user);$/;"	m	struct:__anon60	access:public
__anon60::scrollrect	vim/vim/src/libvterm/include/vterm.h	/^  int (*scrollrect)(VTermRect rect, int downward, int rightward, void *user);$/;"	m	struct:__anon60	access:public
__anon60::setlineinfo	vim/vim/src/libvterm/include/vterm.h	/^  int (*setlineinfo)(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user);$/;"	m	struct:__anon60	access:public
__anon60::setpenattr	vim/vim/src/libvterm/include/vterm.h	/^  int (*setpenattr)(VTermAttr attr, VTermValue *val, void *user);$/;"	m	struct:__anon60	access:public
__anon60::settermprop	vim/vim/src/libvterm/include/vterm.h	/^  int (*settermprop)(VTermProp prop, VTermValue *val, void *user);$/;"	m	struct:__anon60	access:public
__anon61::blink	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int blink     : 1;$/;"	m	struct:__anon61	access:public
__anon61::bold	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int bold      : 1;$/;"	m	struct:__anon61	access:public
__anon61::dhl	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int dhl       : 2; \/* On a DECDHL line (1=top 2=bottom) *\/$/;"	m	struct:__anon61	access:public
__anon61::dwl	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int dwl       : 1; \/* On a DECDWL or DECDHL line *\/$/;"	m	struct:__anon61	access:public
__anon61::font	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int font      : 4; \/* 0 to 9 *\/$/;"	m	struct:__anon61	access:public
__anon61::italic	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int italic    : 1;$/;"	m	struct:__anon61	access:public
__anon61::reverse	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int reverse   : 1;$/;"	m	struct:__anon61	access:public
__anon61::strike	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int strike    : 1;$/;"	m	struct:__anon61	access:public
__anon61::underline	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int underline : 2;$/;"	m	struct:__anon61	access:public
__anon62::attrs	vim/vim/src/libvterm/include/vterm.h	/^  VTermScreenCellAttrs attrs;$/;"	m	struct:__anon62	access:public
__anon62::bg	vim/vim/src/libvterm/include/vterm.h	/^  VTermColor fg, bg;$/;"	m	struct:__anon62	access:public
__anon62::chars	vim/vim/src/libvterm/include/vterm.h	/^  uint32_t chars[VTERM_MAX_CHARS_PER_CELL];$/;"	m	struct:__anon62	access:public
__anon62::fg	vim/vim/src/libvterm/include/vterm.h	/^  VTermColor fg, bg;$/;"	m	struct:__anon62	access:public
__anon62::width	vim/vim/src/libvterm/include/vterm.h	/^  char     width;$/;"	m	struct:__anon62	access:public
__anon63::bell	vim/vim/src/libvterm/include/vterm.h	/^  int (*bell)(void *user);$/;"	m	struct:__anon63	access:public
__anon63::damage	vim/vim/src/libvterm/include/vterm.h	/^  int (*damage)(VTermRect rect, void *user);$/;"	m	struct:__anon63	access:public
__anon63::movecursor	vim/vim/src/libvterm/include/vterm.h	/^  int (*movecursor)(VTermPos pos, VTermPos oldpos, int visible, void *user);$/;"	m	struct:__anon63	access:public
__anon63::moverect	vim/vim/src/libvterm/include/vterm.h	/^  int (*moverect)(VTermRect dest, VTermRect src, void *user);$/;"	m	struct:__anon63	access:public
__anon63::resize	vim/vim/src/libvterm/include/vterm.h	/^  int (*resize)(int rows, int cols, void *user);$/;"	m	struct:__anon63	access:public
__anon63::sb_popline	vim/vim/src/libvterm/include/vterm.h	/^  int (*sb_popline)(int cols, VTermScreenCell *cells, void *user);$/;"	m	struct:__anon63	access:public
__anon63::sb_pushline	vim/vim/src/libvterm/include/vterm.h	/^  int (*sb_pushline)(int cols, const VTermScreenCell *cells, void *user);$/;"	m	struct:__anon63	access:public
__anon63::settermprop	vim/vim/src/libvterm/include/vterm.h	/^  int (*settermprop)(VTermProp prop, VTermValue *val, void *user);$/;"	m	struct:__anon63	access:public
__anon66::sense	vim/vim/src/integration.h	/^	Boolean		sense;$/;"	m	struct:__anon66	access:public
__anon66::verb	vim/vim/src/integration.h	/^	char		*verb;$/;"	m	struct:__anon66	access:public
__anon68::cansplit	vim/vim/src/if_cscope.h	/^    int	    cansplit;		\/* if supports splitting window *\/$/;"	m	struct:__anon68	access:public
__anon68::func	vim/vim/src/if_cscope.h	/^    int     (*func)(exarg_T *eap);$/;"	m	struct:__anon68	access:public
__anon68::help	vim/vim/src/if_cscope.h	/^    char *  help;$/;"	m	struct:__anon68	access:public
__anon68::name	vim/vim/src/if_cscope.h	/^    char *  name;$/;"	m	struct:__anon68	access:public
__anon68::usage	vim/vim/src/if_cscope.h	/^    char *  usage;$/;"	m	struct:__anon68	access:public
__anon71::uc	vim/vim/src/blowfish.c	/^    char_u   uc[8];$/;"	m	union:__anon71	file:	access:public
__anon71::ul	vim/vim/src/blowfish.c	/^    UINT32_T ul[2];$/;"	m	union:__anon71	file:	access:public
__anon72::cfb_buffer	vim/vim/src/blowfish.c	/^    char_u	cfb_buffer[BF_MAX_CFB_LEN]; \/* up to 64 bytes used *\/$/;"	m	struct:__anon72	file:	access:public
__anon72::cfb_len	vim/vim/src/blowfish.c	/^    int		cfb_len;	    \/* size of cfb_buffer actually used *\/$/;"	m	struct:__anon72	file:	access:public
__anon72::pax	vim/vim/src/blowfish.c	/^    UINT32_T	pax[18];	    \/* P-array *\/$/;"	m	struct:__anon72	file:	access:public
__anon72::randbyte_offset	vim/vim/src/blowfish.c	/^    int		randbyte_offset;$/;"	m	struct:__anon72	file:	access:public
__anon72::sbx	vim/vim/src/blowfish.c	/^    UINT32_T	sbx[4][256];	    \/* S-boxes *\/$/;"	m	struct:__anon72	file:	access:public
__anon72::update_offset	vim/vim/src/blowfish.c	/^    int		update_offset;$/;"	m	struct:__anon72	file:	access:public
__anon73::badcryptxt	vim/vim/src/blowfish.c	/^    char_u   badcryptxt[9]; \/* cryptxt when big\/little endian is wrong *\/$/;"	m	struct:__anon73	file:	access:public
__anon73::cryptxt	vim/vim/src/blowfish.c	/^    char_u   cryptxt[9];$/;"	m	struct:__anon73	file:	access:public
__anon73::keysum	vim/vim/src/blowfish.c	/^    UINT32_T keysum;$/;"	m	struct:__anon73	file:	access:public
__anon73::password	vim/vim/src/blowfish.c	/^    char_u   password[64];$/;"	m	struct:__anon73	file:	access:public
__anon73::plaintxt	vim/vim/src/blowfish.c	/^    char_u   plaintxt[9];$/;"	m	struct:__anon73	file:	access:public
__anon73::salt	vim/vim/src/blowfish.c	/^    char_u   salt[9];$/;"	m	struct:__anon73	file:	access:public
__anon74::clientid	vim/vim/src/os_unix.c	/^    char *clientid;	    \/* The client ID for the current smc session *\/$/;"	m	struct:__anon74	file:	access:public
__anon74::iceconn	vim/vim/src/os_unix.c	/^    IceConn iceconn;	    \/* The ICE connection ID *\/$/;"	m	struct:__anon74	file:	access:public
__anon74::save_yourself	vim/vim/src/os_unix.c	/^    Bool save_yourself;     \/* If we're in the middle of a save_yourself *\/$/;"	m	struct:__anon74	file:	access:public
__anon74::shutdown	vim/vim/src/os_unix.c	/^    Bool shutdown;	    \/* If we're in shutdown mode *\/$/;"	m	struct:__anon74	file:	access:public
__anon74::smcconn	vim/vim/src/os_unix.c	/^    SmcConn smcconn;	    \/* The SM connection ID *\/$/;"	m	struct:__anon74	file:	access:public
__anon75::sv_dict	vim/vim/src/eval.c	/^    dict_T	sv_dict;$/;"	m	struct:__anon75	file:	access:public
__anon75::sv_var	vim/vim/src/eval.c	/^    dictitem_T	sv_var;$/;"	m	struct:__anon75	file:	access:public
__anon76::fi_list	vim/vim/src/eval.c	/^    list_T	*fi_list;	\/* list being used *\/$/;"	m	struct:__anon76	file:	access:public
__anon76::fi_lw	vim/vim/src/eval.c	/^    listwatch_T	fi_lw;		\/* keep an eye on the item used. *\/$/;"	m	struct:__anon76	file:	access:public
__anon76::fi_semicolon	vim/vim/src/eval.c	/^    int		fi_semicolon;	\/* TRUE if ending in '; var]' *\/$/;"	m	struct:__anon76	file:	access:public
__anon76::fi_varcount	vim/vim/src/eval.c	/^    int		fi_varcount;	\/* nr of variables in the list *\/$/;"	m	struct:__anon76	file:	access:public
__anon79::y_array	vim/vim/src/ops.c	/^    char_u	**y_array;	\/* pointer to array of line pointers *\/$/;"	m	struct:__anon79	file:	access:public
__anon79::y_size	vim/vim/src/ops.c	/^    linenr_T	y_size;		\/* number of lines in y_array *\/$/;"	m	struct:__anon79	file:	access:public
__anon79::y_time_set	vim/vim/src/ops.c	/^    time_t	y_time_set;$/;"	m	struct:__anon79	file:	access:public
__anon79::y_type	vim/vim/src/ops.c	/^    char_u	y_type;		\/* MLINE, MCHAR or MBLOCK *\/$/;"	m	struct:__anon79	file:	access:public
__anon79::y_width	vim/vim/src/ops.c	/^    colnr_T	y_width;	\/* only set if y_type == MBLOCK *\/$/;"	m	struct:__anon79	file:	access:public
__anon7::buf	vim/vim/src/if_mzsch.c	/^    buf_T	    *buf;$/;"	m	struct:__anon7	file:	access:public
__anon7::so	vim/vim/src/if_mzsch.c	/^    Scheme_Object   so;$/;"	m	struct:__anon7	file:	access:public
__anon80::func	vim/vim/src/if_lua.c	/^    luaV_function func;$/;"	m	struct:__anon80	file:	access:public
__anon80::name	vim/vim/src/if_lua.c	/^    const char *name;$/;"	m	struct:__anon80	file:	access:public
__anon82::sft_score	vim/vim/src/spell.c	/^    short	sft_score;	\/* lowest score used *\/$/;"	m	struct:__anon82	file:	access:public
__anon82::sft_word	vim/vim/src/spell.c	/^    char_u	sft_word[1];    \/* soundfolded word, actually longer *\/$/;"	m	struct:__anon82	file:	access:public
__anon83::badi	vim/vim/src/spell.c	/^    int		badi;$/;"	m	struct:__anon83	file:	access:public
__anon83::goodi	vim/vim/src/spell.c	/^    int		goodi;$/;"	m	struct:__anon83	file:	access:public
__anon83::score	vim/vim/src/spell.c	/^    int		score;$/;"	m	struct:__anon83	file:	access:public
__anon84::bot_shadow_GC	vim/vim/src/gui_at_sb.h	/^    GC		bot_shadow_GC;$/;"	m	struct:__anon84	access:public
__anon84::bot_shadow_contrast	vim/vim/src/gui_at_sb.h	/^    int		bot_shadow_contrast;$/;"	m	struct:__anon84	access:public
__anon84::bot_shadow_pixel	vim/vim/src/gui_at_sb.h	/^    Pixel	bot_shadow_pixel;$/;"	m	struct:__anon84	access:public
__anon84::foreground	vim/vim/src/gui_at_sb.h	/^    Pixel	  foreground;	\/* thumb foreground color *\/$/;"	m	struct:__anon84	access:public
__anon84::gc	vim/vim/src/gui_at_sb.h	/^    GC		  gc;		\/* a (shared) gc *\/$/;"	m	struct:__anon84	access:public
__anon84::jumpProc	vim/vim/src/gui_at_sb.h	/^    XtCallbackList jumpProc;	\/* same as thumbProc but pass data by ref *\/$/;"	m	struct:__anon84	access:public
__anon84::length	vim/vim/src/gui_at_sb.h	/^    Dimension	  length;	\/* either height or width *\/$/;"	m	struct:__anon84	access:public
__anon84::limit_thumb	vim/vim/src/gui_at_sb.h	/^    Bool	limit_thumb;	\/* limit thumb to inside scrollbar *\/$/;"	m	struct:__anon84	access:public
__anon84::max	vim/vim/src/gui_at_sb.h	/^    float	  max;		\/* Maximum value for top *\/$/;"	m	struct:__anon84	access:public
__anon84::min_thumb	vim/vim/src/gui_at_sb.h	/^    Dimension	  min_thumb;	\/* minimum size for the thumb. *\/$/;"	m	struct:__anon84	access:public
__anon84::orientation	vim/vim/src/gui_at_sb.h	/^    XtOrientation orientation;	\/* horizontal or vertical *\/$/;"	m	struct:__anon84	access:public
__anon84::scrollProc	vim/vim/src/gui_at_sb.h	/^    XtCallbackList scrollProc;	\/* proportional scroll *\/$/;"	m	struct:__anon84	access:public
__anon84::scroll_mode	vim/vim/src/gui_at_sb.h	/^    char	  scroll_mode;	\/* see below *\/$/;"	m	struct:__anon84	access:public
__anon84::scroll_off	vim/vim/src/gui_at_sb.h	/^    float	  scroll_off;	\/* offset from event to top of thumb *\/$/;"	m	struct:__anon84	access:public
__anon84::shadow_width	vim/vim/src/gui_at_sb.h	/^    Dimension	shadow_width;$/;"	m	struct:__anon84	access:public
__anon84::shown	vim/vim/src/gui_at_sb.h	/^    float	  shown;	\/* What percent is shown in the win *\/$/;"	m	struct:__anon84	access:public
__anon84::shownLength	vim/vim/src/gui_at_sb.h	/^    Dimension	  shownLength;	\/* Num pixels corresponding to shown *\/$/;"	m	struct:__anon84	access:public
__anon84::thickness	vim/vim/src/gui_at_sb.h	/^    Dimension	  thickness;	\/* either width or height *\/$/;"	m	struct:__anon84	access:public
__anon84::thumb	vim/vim/src/gui_at_sb.h	/^    Pixmap	  thumb;	\/* thumb color *\/$/;"	m	struct:__anon84	access:public
__anon84::thumbProc	vim/vim/src/gui_at_sb.h	/^    XtCallbackList thumbProc;	\/* jump (to position) scroll *\/$/;"	m	struct:__anon84	access:public
__anon84::timer_id	vim/vim/src/gui_at_sb.h	/^    XtIntervalId  timer_id;	\/* autorepeat timer; remove on destruction *\/$/;"	m	struct:__anon84	access:public
__anon84::top	vim/vim/src/gui_at_sb.h	/^    float	  top;		\/* What percent is above the win's top *\/$/;"	m	struct:__anon84	access:public
__anon84::topLoc	vim/vim/src/gui_at_sb.h	/^    Position	  topLoc;	\/* Pixel that corresponds to top *\/$/;"	m	struct:__anon84	access:public
__anon84::top_shadow_GC	vim/vim/src/gui_at_sb.h	/^    GC		top_shadow_GC;$/;"	m	struct:__anon84	access:public
__anon84::top_shadow_contrast	vim/vim/src/gui_at_sb.h	/^    int		top_shadow_contrast;$/;"	m	struct:__anon84	access:public
__anon84::top_shadow_pixel	vim/vim/src/gui_at_sb.h	/^    Pixel	top_shadow_pixel;$/;"	m	struct:__anon84	access:public
__anon85::empty	vim/vim/src/gui_at_sb.h	/^typedef struct {int empty;} ScrollbarClassPart;$/;"	m	struct:__anon85	access:public
__anon86::blue	vim/vim/src/xpm/include/simx.h	/^    BYTE red, green, blue;$/;"	m	struct:__anon86	access:public
__anon86::green	vim/vim/src/xpm/include/simx.h	/^    BYTE red, green, blue;$/;"	m	struct:__anon86	access:public
__anon86::pixel	vim/vim/src/xpm/include/simx.h	/^    Pixel pixel;$/;"	m	struct:__anon86	access:public
__anon86::red	vim/vim/src/xpm/include/simx.h	/^    BYTE red, green, blue;$/;"	m	struct:__anon86	access:public
__anon87::bitmap	vim/vim/src/xpm/include/simx.h	/^    HBITMAP bitmap;$/;"	m	struct:__anon87	access:public
__anon87::depth	vim/vim/src/xpm/include/simx.h	/^    unsigned int depth;$/;"	m	struct:__anon87	access:public
__anon87::height	vim/vim/src/xpm/include/simx.h	/^    unsigned int height;$/;"	m	struct:__anon87	access:public
__anon87::width	vim/vim/src/xpm/include/simx.h	/^    unsigned int width;$/;"	m	struct:__anon87	access:public
__anon88::name	vim/vim/src/xpm/include/xpm.h	/^    char *name;			\/* Symbolic color name *\/$/;"	m	struct:__anon88	access:public
__anon88::pixel	vim/vim/src/xpm/include/xpm.h	/^    Pixel pixel;		\/* Color pixel *\/$/;"	m	struct:__anon88	access:public
__anon88::value	vim/vim/src/xpm/include/xpm.h	/^    char *value;		\/* Color value *\/$/;"	m	struct:__anon88	access:public
__anon89::lines	vim/vim/src/xpm/include/xpm.h	/^    char **lines;		\/* pointer to the extension array of strings *\/$/;"	m	struct:__anon89	access:public
__anon89::name	vim/vim/src/xpm/include/xpm.h	/^    char *name;			\/* name of the extension *\/$/;"	m	struct:__anon89	access:public
__anon89::nlines	vim/vim/src/xpm/include/xpm.h	/^    unsigned int nlines;	\/* number of lines in this extension *\/$/;"	m	struct:__anon89	access:public
__anon8::so	vim/vim/src/if_mzsch.c	/^    Scheme_Object   so;$/;"	m	struct:__anon8	file:	access:public
__anon8::win	vim/vim/src/if_mzsch.c	/^    win_T	    *win;$/;"	m	struct:__anon8	file:	access:public
__anon90::c_color	vim/vim/src/xpm/include/xpm.h	/^    char *c_color;		\/* color default *\/$/;"	m	struct:__anon90	access:public
__anon90::g4_color	vim/vim/src/xpm/include/xpm.h	/^    char *g4_color;		\/* 4 level grayscale default *\/$/;"	m	struct:__anon90	access:public
__anon90::g_color	vim/vim/src/xpm/include/xpm.h	/^    char *g_color;		\/* other level grayscale default *\/$/;"	m	struct:__anon90	access:public
__anon90::m_color	vim/vim/src/xpm/include/xpm.h	/^    char *m_color;		\/* monochrom default *\/$/;"	m	struct:__anon90	access:public
__anon90::string	vim/vim/src/xpm/include/xpm.h	/^    char *string;		\/* characters string *\/$/;"	m	struct:__anon90	access:public
__anon90::symbolic	vim/vim/src/xpm/include/xpm.h	/^    char *symbolic;		\/* symbolic name *\/$/;"	m	struct:__anon90	access:public
__anon91::colorTable	vim/vim/src/xpm/include/xpm.h	/^    XpmColor *colorTable;	\/* list of related colors *\/$/;"	m	struct:__anon91	access:public
__anon91::cpp	vim/vim/src/xpm/include/xpm.h	/^    unsigned int cpp;		\/* number of characters per pixel *\/$/;"	m	struct:__anon91	access:public
__anon91::data	vim/vim/src/xpm/include/xpm.h	/^    unsigned int *data;		\/* image data *\/$/;"	m	struct:__anon91	access:public
__anon91::height	vim/vim/src/xpm/include/xpm.h	/^    unsigned int height;	\/* image height *\/$/;"	m	struct:__anon91	access:public
__anon91::ncolors	vim/vim/src/xpm/include/xpm.h	/^    unsigned int ncolors;	\/* number of colors *\/$/;"	m	struct:__anon91	access:public
__anon91::width	vim/vim/src/xpm/include/xpm.h	/^    unsigned int width;		\/* image width *\/$/;"	m	struct:__anon91	access:public
__anon92::colors_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *colors_cmt;		\/* Comment of the colors section *\/$/;"	m	struct:__anon92	access:public
__anon92::extensions	vim/vim/src/xpm/include/xpm.h	/^    XpmExtension *extensions;	\/* pointer to array of extensions *\/$/;"	m	struct:__anon92	access:public
__anon92::hints_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *hints_cmt;		\/* Comment of the hints section *\/$/;"	m	struct:__anon92	access:public
__anon92::nextensions	vim/vim/src/xpm/include/xpm.h	/^    unsigned int nextensions;	\/* number of extensions *\/$/;"	m	struct:__anon92	access:public
__anon92::pixels_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *pixels_cmt;		\/* Comment of the pixels section *\/$/;"	m	struct:__anon92	access:public
__anon92::valuemask	vim/vim/src/xpm/include/xpm.h	/^    unsigned long valuemask;	\/* Specifies which attributes are defined *\/$/;"	m	struct:__anon92	access:public
__anon92::x_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int x_hotspot;	\/* Returns the x hotspot's coordinate *\/$/;"	m	struct:__anon92	access:public
__anon92::y_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int y_hotspot;	\/* Returns the y hotspot's coordinate *\/$/;"	m	struct:__anon92	access:public
__anon93::alloc_close_colors	vim/vim/src/xpm/include/xpm.h	/^    Bool alloc_close_colors;    	\/* Specify whether close colors should$/;"	m	struct:__anon93	access:public
__anon93::alloc_color	vim/vim/src/xpm/include/xpm.h	/^    XpmAllocColorFunc alloc_color;	\/* Application color allocator *\/$/;"	m	struct:__anon93	access:public
__anon93::alloc_pixels	vim/vim/src/xpm/include/xpm.h	/^    Pixel *alloc_pixels;		\/* Returns the list of alloc'ed color$/;"	m	struct:__anon93	access:public
__anon93::bitmap_format	vim/vim/src/xpm/include/xpm.h	/^    int bitmap_format;			\/* Specify the format of 1bit depth$/;"	m	struct:__anon93	access:public
__anon93::blue_closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int blue_closeness;	\/* Allowable blue deviation *\/$/;"	m	struct:__anon93	access:public
__anon93::closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int closeness;		\/* Allowable RGB deviation *\/$/;"	m	struct:__anon93	access:public
__anon93::colorTable	vim/vim/src/xpm/include/xpm.h	/^    XpmColor *colorTable;               \/* List of colors *\/$/;"	m	struct:__anon93	access:public
__anon93::color_closure	vim/vim/src/xpm/include/xpm.h	/^    void *color_closure;		\/* Application private data to pass to$/;"	m	struct:__anon93	access:public
__anon93::color_key	vim/vim/src/xpm/include/xpm.h	/^    int color_key;			\/* Use colors from this color set *\/$/;"	m	struct:__anon93	access:public
__anon93::colormap	vim/vim/src/xpm/include/xpm.h	/^    Colormap colormap;			\/* Specifies the colormap to use *\/$/;"	m	struct:__anon93	access:public
__anon93::colors_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *colors_cmt;                   \/* Comment of the colors section *\/$/;"	m	struct:__anon93	access:public
__anon93::colorsymbols	vim/vim/src/xpm/include/xpm.h	/^    XpmColorSymbol *colorsymbols;	\/* List of color symbols to override *\/$/;"	m	struct:__anon93	access:public
__anon93::cpp	vim/vim/src/xpm/include/xpm.h	/^    unsigned int cpp;			\/* Specifies the number of char per$/;"	m	struct:__anon93	access:public
__anon93::depth	vim/vim/src/xpm/include/xpm.h	/^    unsigned int depth;			\/* Specifies the depth *\/$/;"	m	struct:__anon93	access:public
__anon93::exactColors	vim/vim/src/xpm/include/xpm.h	/^    Bool exactColors;			\/* Only use exact colors for visual *\/$/;"	m	struct:__anon93	access:public
__anon93::extensions	vim/vim/src/xpm/include/xpm.h	/^    XpmExtension *extensions;		\/* List of extensions *\/$/;"	m	struct:__anon93	access:public
__anon93::free_colors	vim/vim/src/xpm/include/xpm.h	/^    XpmFreeColorsFunc free_colors;	\/* Application color de-allocator *\/$/;"	m	struct:__anon93	access:public
__anon93::green_closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int green_closeness;	\/* Allowable green deviation *\/$/;"	m	struct:__anon93	access:public
__anon93::height	vim/vim/src/xpm/include/xpm.h	/^    unsigned int height;		\/* Returns the height of the created$/;"	m	struct:__anon93	access:public
__anon93::hints_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *hints_cmt;                    \/* Comment of the hints section *\/$/;"	m	struct:__anon93	access:public
__anon93::mask_pixel	vim/vim/src/xpm/include/xpm.h	/^    unsigned int mask_pixel;            \/* Color table index of transparent$/;"	m	struct:__anon93	access:public
__anon93::nalloc_pixels	vim/vim/src/xpm/include/xpm.h	/^    int nalloc_pixels;			\/* Returns the number of alloc'ed$/;"	m	struct:__anon93	access:public
__anon93::ncolors	vim/vim/src/xpm/include/xpm.h	/^    unsigned int ncolors;               \/* Number of colors *\/$/;"	m	struct:__anon93	access:public
__anon93::nextensions	vim/vim/src/xpm/include/xpm.h	/^    unsigned int nextensions;		\/* Number of extensions *\/$/;"	m	struct:__anon93	access:public
__anon93::npixels	vim/vim/src/xpm/include/xpm.h	/^    unsigned int npixels;		\/* Number of used pixels *\/$/;"	m	struct:__anon93	access:public
__anon93::numsymbols	vim/vim/src/xpm/include/xpm.h	/^    unsigned int numsymbols;		\/* Number of symbols *\/$/;"	m	struct:__anon93	access:public
__anon93::pixels	vim/vim/src/xpm/include/xpm.h	/^    Pixel *pixels;			\/* List of used color pixels *\/$/;"	m	struct:__anon93	access:public
__anon93::pixels_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *pixels_cmt;                   \/* Comment of the pixels section *\/$/;"	m	struct:__anon93	access:public
__anon93::red_closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int red_closeness;		\/* Allowable red deviation *\/$/;"	m	struct:__anon93	access:public
__anon93::rgb_fname	vim/vim/src/xpm/include/xpm.h	/^    char *rgb_fname;			\/* RGB text file name *\/$/;"	m	struct:__anon93	access:public
__anon93::valuemask	vim/vim/src/xpm/include/xpm.h	/^    unsigned long valuemask;		\/* Specifies which attributes are$/;"	m	struct:__anon93	access:public
__anon93::visual	vim/vim/src/xpm/include/xpm.h	/^    Visual *visual;			\/* Specifies the visual to use *\/$/;"	m	struct:__anon93	access:public
__anon93::width	vim/vim/src/xpm/include/xpm.h	/^    unsigned int width;			\/* Returns the width of the created$/;"	m	struct:__anon93	access:public
__anon93::x_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int x_hotspot;		\/* Returns the x hotspot's$/;"	m	struct:__anon93	access:public
__anon93::y_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int y_hotspot;		\/* Returns the y hotspot's$/;"	m	struct:__anon93	access:public
__anon94::fd_flags	vim/vim/src/fold.c	/^    char	fd_flags;	\/* see below *\/$/;"	m	struct:__anon94	file:	access:public
__anon94::fd_len	vim/vim/src/fold.c	/^    linenr_T	fd_len;		\/* number of lines in the fold *\/$/;"	m	struct:__anon94	file:	access:public
__anon94::fd_nested	vim/vim/src/fold.c	/^    garray_T	fd_nested;	\/* array of nested folds *\/$/;"	m	struct:__anon94	file:	access:public
__anon94::fd_small	vim/vim/src/fold.c	/^    char	fd_small;	\/* TRUE, FALSE or MAYBE: fold smaller than$/;"	m	struct:__anon94	file:	access:public
__anon94::fd_top	vim/vim/src/fold.c	/^    linenr_T	fd_top;		\/* first line of fold; for nested fold$/;"	m	struct:__anon94	file:	access:public
__anon95::end	vim/vim/src/fold.c	/^    int		end;		\/* level of fold that is forced to end below$/;"	m	struct:__anon95	file:	access:public
__anon95::had_end	vim/vim/src/fold.c	/^    int		had_end;	\/* level of fold that is forced to end above$/;"	m	struct:__anon95	file:	access:public
__anon95::lnum	vim/vim/src/fold.c	/^    linenr_T	lnum;		\/* current line number *\/$/;"	m	struct:__anon95	file:	access:public
__anon95::lnum_save	vim/vim/src/fold.c	/^    linenr_T	lnum_save;	\/* line nr used by foldUpdateIEMSRecurse() *\/$/;"	m	struct:__anon95	file:	access:public
__anon95::lvl	vim/vim/src/fold.c	/^    int		lvl;		\/* current level (-1 for undefined) *\/$/;"	m	struct:__anon95	file:	access:public
__anon95::lvl_next	vim/vim/src/fold.c	/^    int		lvl_next;	\/* level used for next line *\/$/;"	m	struct:__anon95	file:	access:public
__anon95::off	vim/vim/src/fold.c	/^    linenr_T	off;		\/* offset between lnum and real line number *\/$/;"	m	struct:__anon95	file:	access:public
__anon95::start	vim/vim/src/fold.c	/^    int		start;		\/* number of folds that are forced to start at$/;"	m	struct:__anon95	file:	access:public
__anon95::wp	vim/vim/src/fold.c	/^    win_T	*wp;		\/* window *\/$/;"	m	struct:__anon95	file:	access:public
__anon96::error	vim/vim/src/if_py_both.h	/^    long error;$/;"	m	struct:__anon96	access:public
__anon96::softspace	vim/vim/src/if_py_both.h	/^    long softspace;$/;"	m	struct:__anon96	access:public
__anon97::module	vim/vim/src/if_py_both.h	/^    PyObject	*module;$/;"	m	struct:__anon97	access:public
__anon98::callable	vim/vim/src/if_py_both.h	/^    PyObject	*callable;$/;"	m	struct:__anon98	access:public
__anon98::result	vim/vim/src/if_py_both.h	/^    PyObject	*result;$/;"	m	struct:__anon98	access:public
__anon99::clear	vim/vim/src/if_py_both.h	/^    clearfun clear;$/;"	m	struct:__anon99	access:public
__anon99::cur	vim/vim/src/if_py_both.h	/^    void *cur;$/;"	m	struct:__anon99	access:public
__anon99::destruct	vim/vim/src/if_py_both.h	/^    destructorfun destruct;$/;"	m	struct:__anon99	access:public
__anon99::next	vim/vim/src/if_py_both.h	/^    nextfun next;$/;"	m	struct:__anon99	access:public
__anon99::traverse	vim/vim/src/if_py_both.h	/^    traversefun traverse;$/;"	m	struct:__anon99	access:public
__anon9::maxa	vim/vim/src/if_mzsch.c	/^    int		maxa;$/;"	m	struct:__anon9	file:	access:public
__anon9::mina	vim/vim/src/if_mzsch.c	/^    int		mina;	\/* arity information *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::name	vim/vim/src/if_mzsch.c	/^    char	*name;$/;"	m	struct:__anon9	file:	access:public
__anon9::prim	vim/vim/src/if_mzsch.c	/^    Scheme_Closed_Prim	*prim;$/;"	m	struct:__anon9	file:	access:public
__chkabort	vim/vim/src/os_amiga.c	/^void __regargs __chkabort(void)$/;"	f	signature:(void)
__chkabort	vim/vim/src/os_amiga.c	/^void __regargs __chkabort(void);$/;"	p	file:	signature:(void)
__if_ole_h__	vim/vim/src/if_ole.h	20;"	d
__in	vim/vim/src/gui_dwrite.cpp	32;"	d	file:
__in	vim/vim/src/iscygpty.c	39;"	d	file:
__in_opt	vim/vim/src/iscygpty.c	40;"	d	file:
__maybenull	vim/vim/src/gui_dwrite.cpp	31;"	d	file:
__out	vim/vim/src/gui_dwrite.cpp	33;"	d	file:
__out	vim/vim/src/iscygpty.c	38;"	d	file:
__stdcall	vim/vim/src/os_win32.c	145;"	d	file:
__thread	vim/vim/src/if_mzsch.h	15;"	d
__w64	vim/vim/src/vim.h	380;"	d
_addfmt	vim/vim/src/termlib.c	/^_addfmt(char *buf, char *fmt, int val)$/;"	f	file:	signature:(char *buf, char *fmt, int val)
_addfmt	vim/vim/src/termlib.c	/^static char *_addfmt(char *, char *, int);$/;"	p	file:	signature:(char *, char *, int)
_apply_thunk_catch_exceptions	vim/vim/src/if_mzsch.c	/^_apply_thunk_catch_exceptions(Scheme_Object *f, Scheme_Object **exn)$/;"	f	file:	signature:(Scheme_Object *f, Scheme_Object **exn)
_apply_thunk_catch_exceptions	vim/vim/src/if_mzsch.c	/^static Scheme_Object *_apply_thunk_catch_exceptions($/;"	p	file:	signature:( Scheme_Object *, Scheme_Object **)
_basic	vim/vim/src/os_vms.c	/^	    char	_basic[3];$/;"	m	struct:__anon23::__anon24::__anon25	file:	access:public
_bauds	vim/vim/src/termlib.c	/^long _bauds[16]={$/;"	v
_cdecl	vim/vim/src/gui_w32.c	250;"	d	file:
_cdecl	vim/vim/src/gui_w32.c	251;"	d	file:
_cdecl	vim/vim/src/gui_w32.c	4113;"	d	file:
_cdecl	vim/vim/src/misc1.c	9850;"	d	file:
_cdecl	vim/vim/src/misc1.c	9853;"	d	file:
_cdecl	vim/vim/src/os_w32exe.c	19;"	d	file:
_chdrive	vim/vim/src/os_mswin.c	/^int _chdrive(int drive)$/;"	f	signature:(int drive)
_filbuf	vim/vim/src/auto/osdef.h	/^extern int	_filbuf(FILE *);$/;"	p	signature:(FILE *)
_filbuf	vim/vim/src/xxd/xxd.c	/^extern int _filbuf __P((FILE *));$/;"	p	file:	signature:(FILE *)
_find	vim/vim/src/termlib.c	/^_find(char *s, char *set)$/;"	f	file:	signature:(char *s, char *set)
_find	vim/vim/src/termlib.c	/^static char *_find(char *, char *);$/;"	p	file:	signature:(char *, char *)
_flsbuf	vim/vim/src/auto/osdef.h	/^extern int	_flsbuf(int, FILE *);$/;"	p	signature:(int, FILE *)
_flsbuf	vim/vim/src/xxd/xxd.c	/^extern int _flsbuf __P((unsigned char, FILE *));$/;"	p	file:	signature:(unsigned char, FILE *)
_fstat	vim/vim/src/os_mswin.c	466;"	d	file:
_fstat	vim/vim/src/os_mswin.c	470;"	d	file:
_fullpath	vim/vim/src/os_mswin.c	/^char * _fullpath(char *buf, char *fname, int len)$/;"	f	signature:(char *buf, char *fname, int len)
_generic_64	vim/vim/src/os_vms.c	/^typedef struct _generic_64 {$/;"	s	file:
_generic_64::gen64$r_quad_overlay	vim/vim/src/os_vms.c	/^    } gen64$r_quad_overlay;$/;"	m	struct:_generic_64	file:	access:public
_get_chars	vim/vim/src/libvterm/src/screen.c	/^static size_t _get_chars(const VTermScreen *screen, const int utf8, void *buffer, size_t len, const VTermRect rect)$/;"	f	file:	signature:(const VTermScreen *screen, const int utf8, void *buffer, size_t len, const VTermRect rect)
_getch	vim/vim/src/vimrun.c	28;"	d	file:
_kbhit	vim/vim/src/vimrun.c	27;"	d	file:
_match	vim/vim/src/termlib.c	/^_match(char *s1, char *s2)$/;"	f	file:	signature:(char *s1, char *s2)
_match	vim/vim/src/termlib.c	/^static int  _match(char *, char *);$/;"	p	file:	signature:(char *, char *)
_memory_h	vim/vim/src/if_perlsfio.c	13;"	d	file:
_signicon_t	vim/vim/src/gui_w32.c	/^typedef struct _signicon_t$/;"	s	file:
_signicon_t::hImage	vim/vim/src/gui_w32.c	/^    HANDLE	hImage;$/;"	m	struct:_signicon_t	file:	access:public
_signicon_t::hShape	vim/vim/src/gui_w32.c	/^    HANDLE	hShape;	\/* Mask bitmap handle *\/$/;"	m	struct:_signicon_t	file:	access:public
_signicon_t::uType	vim/vim/src/gui_w32.c	/^    UINT	uType;$/;"	m	struct:_signicon_t	file:	access:public
_stat	vim/vim/src/os_mswin.c	464;"	d	file:
_stat	vim/vim/src/os_mswin.c	468;"	d	file:
_stati64	vim/vim/src/vim.h	2366;"	d
_stricoll	vim/vim/src/os_mswin.c	/^int _stricoll(char *a, char *b)$/;"	f	signature:(char *a, char *b)
_stricoll	vim/vim/src/proto.h	/^extern int _stricoll(char *a, char *b);$/;"	p	signature:(char *a, char *b)
_strnicmp	vim/vim/src/GvimExt/gvimext.cpp	22;"	d	file:
_tls_index	vim/vim/src/if_mzsch.c	/^static intptr_t _tls_index = 0;$/;"	v	file:
_wstat	vim/vim/src/os_mswin.c	465;"	d	file:
_wstat	vim/vim/src/os_mswin.c	469;"	d	file:
_xsmp_xtinputid	vim/vim/src/gui_x11.c	/^static XtInputId _xsmp_xtinputid;$/;"	v	file:
a	vim/vim/runtime/tutor/tutor.cs	/^  4. Pokud si tyto kroky spolehlivì pamatuje¹, vykonej kroky 1 a¾ 3, èím¾$/;"	p
a	vim/vim/src/if_python.c	/^struct PyMethodDef { Py_ssize_t a; };$/;"	m	struct:PyMethodDef	file:	access:public
a	vim/vim/src/regexp.c	/^    int a, b, c;$/;"	m	struct:__anon131	file:	access:public
a_AIN	vim/vim/src/arabic.h	59;"	d
a_ALEF	vim/vim/src/arabic.h	41;"	d
a_ALEF_HAMZA_ABOVE	vim/vim/src/arabic.h	37;"	d
a_ALEF_HAMZA_BELOW	vim/vim/src/arabic.h	39;"	d
a_ALEF_MADDA	vim/vim/src/arabic.h	36;"	d
a_ALEF_MAKSURA	vim/vim/src/arabic.h	70;"	d
a_BEH	vim/vim/src/arabic.h	42;"	d
a_BYTE_ORDER_MARK	vim/vim/src/arabic.h	255;"	d
a_COMMA	vim/vim/src/arabic.h	32;"	d
a_DAD	vim/vim/src/arabic.h	56;"	d
a_DAL	vim/vim/src/arabic.h	49;"	d
a_DAMMA	vim/vim/src/arabic.h	77;"	d
a_DAMMATAN	vim/vim/src/arabic.h	74;"	d
a_DECIMAL	vim/vim/src/arabic.h	97;"	d
a_EIGHT	vim/vim/src/arabic.h	94;"	d
a_FATHA	vim/vim/src/arabic.h	76;"	d
a_FATHATAN	vim/vim/src/arabic.h	73;"	d
a_FEH	vim/vim/src/arabic.h	62;"	d
a_FIVE	vim/vim/src/arabic.h	91;"	d
a_FOUR	vim/vim/src/arabic.h	90;"	d
a_GHAIN	vim/vim/src/arabic.h	60;"	d
a_HAH	vim/vim/src/arabic.h	47;"	d
a_HAMZA	vim/vim/src/arabic.h	35;"	d
a_HAMZA_ABOVE	vim/vim/src/arabic.h	83;"	d
a_HAMZA_BELOW	vim/vim/src/arabic.h	84;"	d
a_HEH	vim/vim/src/arabic.h	68;"	d
a_JEEM	vim/vim/src/arabic.h	46;"	d
a_KAF	vim/vim/src/arabic.h	64;"	d
a_KASRA	vim/vim/src/arabic.h	78;"	d
a_KASRATAN	vim/vim/src/arabic.h	75;"	d
a_KHAH	vim/vim/src/arabic.h	48;"	d
a_LAM	vim/vim/src/arabic.h	65;"	d
a_MADDA_ABOVE	vim/vim/src/arabic.h	82;"	d
a_MEEM	vim/vim/src/arabic.h	66;"	d
a_MINI_ALEF	vim/vim/src/arabic.h	100;"	d
a_NINE	vim/vim/src/arabic.h	95;"	d
a_NOON	vim/vim/src/arabic.h	67;"	d
a_ONE	vim/vim/src/arabic.h	87;"	d
a_PERCENT	vim/vim/src/arabic.h	96;"	d
a_QAF	vim/vim/src/arabic.h	63;"	d
a_QUESTION	vim/vim/src/arabic.h	34;"	d
a_REH	vim/vim/src/arabic.h	51;"	d
a_SAD	vim/vim/src/arabic.h	55;"	d
a_SEEN	vim/vim/src/arabic.h	53;"	d
a_SEMICOLON	vim/vim/src/arabic.h	33;"	d
a_SEVEN	vim/vim/src/arabic.h	93;"	d
a_SHADDA	vim/vim/src/arabic.h	79;"	d
a_SHEEN	vim/vim/src/arabic.h	54;"	d
a_SIX	vim/vim/src/arabic.h	92;"	d
a_STAR	vim/vim/src/arabic.h	99;"	d
a_SUKUN	vim/vim/src/arabic.h	80;"	d
a_TAH	vim/vim/src/arabic.h	57;"	d
a_TATWEEL	vim/vim/src/arabic.h	61;"	d
a_TEH	vim/vim/src/arabic.h	44;"	d
a_TEH_MARBUTA	vim/vim/src/arabic.h	43;"	d
a_THAL	vim/vim/src/arabic.h	50;"	d
a_THEH	vim/vim/src/arabic.h	45;"	d
a_THOUSANDS	vim/vim/src/arabic.h	98;"	d
a_THREE	vim/vim/src/arabic.h	89;"	d
a_TWO	vim/vim/src/arabic.h	88;"	d
a_WAW	vim/vim/src/arabic.h	69;"	d
a_WAW_HAMZA	vim/vim/src/arabic.h	38;"	d
a_YEH	vim/vim/src/arabic.h	71;"	d
a_YEH_HAMZA	vim/vim/src/arabic.h	40;"	d
a_ZAH	vim/vim/src/arabic.h	58;"	d
a_ZAIN	vim/vim/src/arabic.h	52;"	d
a_ZERO	vim/vim/src/arabic.h	86;"	d
a_acute	vim/vim/src/regexp_nfa.c	784;"	d	file:
a_circumflex	vim/vim/src/regexp_nfa.c	785;"	d	file:
a_cur_menu	vim/vim/src/gui_athena.c	/^static vimmenu_T *a_cur_menu = NULL;$/;"	v	file:
a_diaeresis	vim/vim/src/regexp_nfa.c	787;"	d	file:
a_f_AIN	vim/vim/src/arabic.h	203;"	d
a_f_ALEF	vim/vim/src/arabic.h	143;"	d
a_f_ALEF_HAMZA_ABOVE	vim/vim/src/arabic.h	133;"	d
a_f_ALEF_HAMZA_BELOW	vim/vim/src/arabic.h	137;"	d
a_f_ALEF_MADDA	vim/vim/src/arabic.h	131;"	d
a_f_ALEF_MAKSURA	vim/vim/src/arabic.h	241;"	d
a_f_BEH	vim/vim/src/arabic.h	145;"	d
a_f_DAD	vim/vim/src/arabic.h	191;"	d
a_f_DAL	vim/vim/src/arabic.h	171;"	d
a_f_FEH	vim/vim/src/arabic.h	211;"	d
a_f_GHAIN	vim/vim/src/arabic.h	207;"	d
a_f_HAH	vim/vim/src/arabic.h	163;"	d
a_f_HEH	vim/vim/src/arabic.h	235;"	d
a_f_JEEM	vim/vim/src/arabic.h	159;"	d
a_f_KAF	vim/vim/src/arabic.h	219;"	d
a_f_KHAH	vim/vim/src/arabic.h	167;"	d
a_f_LAM	vim/vim/src/arabic.h	223;"	d
a_f_LAM_ALEF	vim/vim/src/arabic.h	253;"	d
a_f_LAM_ALEF_HAMZA_ABOVE	vim/vim/src/arabic.h	249;"	d
a_f_LAM_ALEF_HAMZA_BELOW	vim/vim/src/arabic.h	251;"	d
a_f_LAM_ALEF_MADDA_ABOVE	vim/vim/src/arabic.h	247;"	d
a_f_MEEM	vim/vim/src/arabic.h	227;"	d
a_f_NOON	vim/vim/src/arabic.h	231;"	d
a_f_QAF	vim/vim/src/arabic.h	215;"	d
a_f_REH	vim/vim/src/arabic.h	175;"	d
a_f_SAD	vim/vim/src/arabic.h	187;"	d
a_f_SEEN	vim/vim/src/arabic.h	179;"	d
a_f_SHEEN	vim/vim/src/arabic.h	183;"	d
a_f_TAH	vim/vim/src/arabic.h	195;"	d
a_f_TEH	vim/vim/src/arabic.h	151;"	d
a_f_TEH_MARBUTA	vim/vim/src/arabic.h	149;"	d
a_f_THAL	vim/vim/src/arabic.h	173;"	d
a_f_THEH	vim/vim/src/arabic.h	155;"	d
a_f_WAW	vim/vim/src/arabic.h	239;"	d
a_f_WAW_HAMZA	vim/vim/src/arabic.h	135;"	d
a_f_YEH	vim/vim/src/arabic.h	243;"	d
a_f_YEH_HAMZA	vim/vim/src/arabic.h	139;"	d
a_f_ZAH	vim/vim/src/arabic.h	199;"	d
a_f_ZAIN	vim/vim/src/arabic.h	177;"	d
a_grave	vim/vim/src/regexp_nfa.c	783;"	d	file:
a_i_AIN	vim/vim/src/arabic.h	204;"	d
a_i_BEH	vim/vim/src/arabic.h	146;"	d
a_i_DAD	vim/vim/src/arabic.h	192;"	d
a_i_FEH	vim/vim/src/arabic.h	212;"	d
a_i_GHAIN	vim/vim/src/arabic.h	208;"	d
a_i_HAH	vim/vim/src/arabic.h	164;"	d
a_i_HEH	vim/vim/src/arabic.h	236;"	d
a_i_JEEM	vim/vim/src/arabic.h	160;"	d
a_i_KAF	vim/vim/src/arabic.h	220;"	d
a_i_KHAH	vim/vim/src/arabic.h	168;"	d
a_i_LAM	vim/vim/src/arabic.h	224;"	d
a_i_MEEM	vim/vim/src/arabic.h	228;"	d
a_i_NOON	vim/vim/src/arabic.h	232;"	d
a_i_QAF	vim/vim/src/arabic.h	216;"	d
a_i_SAD	vim/vim/src/arabic.h	188;"	d
a_i_SEEN	vim/vim/src/arabic.h	180;"	d
a_i_SHEEN	vim/vim/src/arabic.h	184;"	d
a_i_TAH	vim/vim/src/arabic.h	196;"	d
a_i_TEH	vim/vim/src/arabic.h	152;"	d
a_i_THEH	vim/vim/src/arabic.h	156;"	d
a_i_YEH	vim/vim/src/arabic.h	244;"	d
a_i_YEH_HAMZA	vim/vim/src/arabic.h	140;"	d
a_i_ZAH	vim/vim/src/arabic.h	200;"	d
a_m_AIN	vim/vim/src/arabic.h	205;"	d
a_m_BEH	vim/vim/src/arabic.h	147;"	d
a_m_DAD	vim/vim/src/arabic.h	193;"	d
a_m_DAMMA	vim/vim/src/arabic.h	121;"	d
a_m_FATHA	vim/vim/src/arabic.h	119;"	d
a_m_FEH	vim/vim/src/arabic.h	213;"	d
a_m_GHAIN	vim/vim/src/arabic.h	209;"	d
a_m_HAH	vim/vim/src/arabic.h	165;"	d
a_m_HEH	vim/vim/src/arabic.h	237;"	d
a_m_JEEM	vim/vim/src/arabic.h	161;"	d
a_m_KAF	vim/vim/src/arabic.h	221;"	d
a_m_KASRA	vim/vim/src/arabic.h	123;"	d
a_m_KHAH	vim/vim/src/arabic.h	169;"	d
a_m_LAM	vim/vim/src/arabic.h	225;"	d
a_m_MEEM	vim/vim/src/arabic.h	229;"	d
a_m_NOON	vim/vim/src/arabic.h	233;"	d
a_m_QAF	vim/vim/src/arabic.h	217;"	d
a_m_SAD	vim/vim/src/arabic.h	189;"	d
a_m_SEEN	vim/vim/src/arabic.h	181;"	d
a_m_SHADDA	vim/vim/src/arabic.h	125;"	d
a_m_SHEEN	vim/vim/src/arabic.h	185;"	d
a_m_SUKUN	vim/vim/src/arabic.h	127;"	d
a_m_TAH	vim/vim/src/arabic.h	197;"	d
a_m_TATWEEL_FATHATAN	vim/vim/src/arabic.h	113;"	d
a_m_TEH	vim/vim/src/arabic.h	153;"	d
a_m_THEH	vim/vim/src/arabic.h	157;"	d
a_m_YEH	vim/vim/src/arabic.h	245;"	d
a_m_YEH_HAMZA	vim/vim/src/arabic.h	141;"	d
a_m_ZAH	vim/vim/src/arabic.h	201;"	d
a_ring	vim/vim/src/regexp_nfa.c	788;"	d	file:
a_s_AIN	vim/vim/src/arabic.h	202;"	d
a_s_ALEF	vim/vim/src/arabic.h	142;"	d
a_s_ALEF_HAMZA_ABOVE	vim/vim/src/arabic.h	132;"	d
a_s_ALEF_HAMZA_BELOW	vim/vim/src/arabic.h	136;"	d
a_s_ALEF_MADDA	vim/vim/src/arabic.h	130;"	d
a_s_ALEF_MAKSURA	vim/vim/src/arabic.h	240;"	d
a_s_BEH	vim/vim/src/arabic.h	144;"	d
a_s_DAD	vim/vim/src/arabic.h	190;"	d
a_s_DAL	vim/vim/src/arabic.h	170;"	d
a_s_DAMMA	vim/vim/src/arabic.h	120;"	d
a_s_DAMMATAN	vim/vim/src/arabic.h	114;"	d
a_s_FATHA	vim/vim/src/arabic.h	118;"	d
a_s_FATHATAN	vim/vim/src/arabic.h	112;"	d
a_s_FEH	vim/vim/src/arabic.h	210;"	d
a_s_GHAIN	vim/vim/src/arabic.h	206;"	d
a_s_HAH	vim/vim/src/arabic.h	162;"	d
a_s_HAMZA	vim/vim/src/arabic.h	129;"	d
a_s_HEH	vim/vim/src/arabic.h	234;"	d
a_s_JEEM	vim/vim/src/arabic.h	158;"	d
a_s_KAF	vim/vim/src/arabic.h	218;"	d
a_s_KASRA	vim/vim/src/arabic.h	122;"	d
a_s_KASRATAN	vim/vim/src/arabic.h	116;"	d
a_s_KHAH	vim/vim/src/arabic.h	166;"	d
a_s_LAM	vim/vim/src/arabic.h	222;"	d
a_s_LAM_ALEF	vim/vim/src/arabic.h	252;"	d
a_s_LAM_ALEF_HAMZA_ABOVE	vim/vim/src/arabic.h	248;"	d
a_s_LAM_ALEF_HAMZA_BELOW	vim/vim/src/arabic.h	250;"	d
a_s_LAM_ALEF_MADDA_ABOVE	vim/vim/src/arabic.h	246;"	d
a_s_MEEM	vim/vim/src/arabic.h	226;"	d
a_s_NOON	vim/vim/src/arabic.h	230;"	d
a_s_QAF	vim/vim/src/arabic.h	214;"	d
a_s_REH	vim/vim/src/arabic.h	174;"	d
a_s_SAD	vim/vim/src/arabic.h	186;"	d
a_s_SEEN	vim/vim/src/arabic.h	178;"	d
a_s_SHADDA	vim/vim/src/arabic.h	124;"	d
a_s_SHEEN	vim/vim/src/arabic.h	182;"	d
a_s_SUKUN	vim/vim/src/arabic.h	126;"	d
a_s_TAH	vim/vim/src/arabic.h	194;"	d
a_s_TEH	vim/vim/src/arabic.h	150;"	d
a_s_TEH_MARBUTA	vim/vim/src/arabic.h	148;"	d
a_s_THAL	vim/vim/src/arabic.h	172;"	d
a_s_THEH	vim/vim/src/arabic.h	154;"	d
a_s_WAW	vim/vim/src/arabic.h	238;"	d
a_s_WAW_HAMZA	vim/vim/src/arabic.h	134;"	d
a_s_YEH	vim/vim/src/arabic.h	242;"	d
a_s_YEH_HAMZA	vim/vim/src/arabic.h	138;"	d
a_s_ZAH	vim/vim/src/arabic.h	198;"	d
a_s_ZAIN	vim/vim/src/arabic.h	176;"	d
a_virguilla	vim/vim/src/regexp_nfa.c	786;"	d	file:
aborted_in_try	vim/vim/src/ex_eval.c	/^aborted_in_try(void)$/;"	f	signature:(void)
aborting	vim/vim/src/ex_eval.c	/^aborting(void)$/;"	f	signature:(void)
abs_mouse	vim/vim/src/gui_photon.c	/^static PhPoint_t    abs_mouse;$/;"	v	file:
abs_restart_command	vim/vim/src/gui_gtk_x11.c	/^static       char *abs_restart_command = NULL;$/;"	v	file:
ac_fn_c_check_func	vim/vim/src/auto/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	vim/vim/src/auto/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	vim/vim/src/auto/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	vim/vim/src/auto/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_compute_int	vim/vim/src/auto/configure	/^ac_fn_c_compute_int ()$/;"	f
ac_fn_c_find_uintX_t	vim/vim/src/auto/configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	vim/vim/src/auto/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	vim/vim/src/auto/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	vim/vim/src/auto/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	vim/vim/src/auto/configure	/^ac_fn_c_try_run ()$/;"	f
accel	vim/vim/src/workshop.c	/^    char	*accel;			\/* optional accelerator key *\/$/;"	m	struct:__anon233	file:	access:public
accel_group	vim/vim/src/gui.h	/^    GtkAccelGroup *accel_group;$/;"	m	struct:Gui	access:public
acl_cnt	vim/vim/src/os_unix.c	/^    int acl_cnt;$/;"	m	struct:vim_acl_solaris_T	file:	access:public
acl_entry	vim/vim/src/os_unix.c	/^    aclent_t *acl_entry;$/;"	m	struct:vim_acl_solaris_T	file:	access:public
aco_save_T	vim/vim/src/structs.h	/^} aco_save_T;$/;"	t	typeref:struct:__anon203
acp_to_enc	vim/vim/src/winclip.c	/^acp_to_enc($/;"	f	signature:( char_u *str, int str_size, char_u **out, int *outlen)
actext	vim/vim/src/structs.h	/^    char_u	*actext;	    \/* accelerator text (after TAB) *\/$/;"	m	struct:VimMenu	access:public
actions	vim/vim/src/gui_at_fs.c	/^static XtActionsRec actions[] =$/;"	v	file:
actions	vim/vim/src/gui_at_sb.c	/^static XtActionsRec actions[] =$/;"	v	file:
actionsList	vim/vim/src/gui_xmebw.c	/^static XtActionsRec actionsList[] =$/;"	v	file:
activate_dialog_mnemonics	vim/vim/src/gui_motif.c	/^activate_dialog_mnemonics(Widget dialog)$/;"	f	file:	signature:(Widget dialog)
active	vim/vim/src/dosinst.c	/^    int	    active;			\/* non-zero when choice is active *\/$/;"	m	struct:choice	file:	access:public
active_apc_list	vim/vim/src/fileio.c	/^static AutoPatCmd *active_apc_list = NULL; \/* stack of active autocommands *\/$/;"	v	file:
addEventHandler	vim/vim/src/gui_beval.c	/^addEventHandler(GtkWidget *target, BalloonEval *beval)$/;"	f	file:	signature:(GtkWidget *target, BalloonEval *beval)
addEventHandler	vim/vim/src/gui_beval.c	/^addEventHandler(Widget target, BalloonEval *beval)$/;"	f	file:	signature:(Widget target, BalloonEval *beval)
addEventHandler	vim/vim/src/gui_beval.c	/^static void addEventHandler(GtkWidget *, BalloonEval *);$/;"	p	file:	signature:(GtkWidget *, BalloonEval *)
addEventHandler	vim/vim/src/gui_beval.c	/^static void addEventHandler(Widget, BalloonEval *);$/;"	p	file:	signature:(Widget, BalloonEval *)
addMenu	vim/vim/src/workshop.c	/^addMenu($/;"	f	file:	signature:( char *menu, char *accel, char *verb)
addMenu	vim/vim/src/workshop.c	/^static void	 addMenu(char *, char *, char *);$/;"	p	file:	signature:(char *, char *, char *)
addUniqueMnemonic	vim/vim/src/workshop.c	/^addUniqueMnemonic($/;"	f	file:	signature:( char *mnemonics, char *label)
addUniqueMnemonic	vim/vim/src/workshop.c	/^static char	*addUniqueMnemonic(char *, char *);$/;"	p	file:	signature:(char *, char *)
add_b0_fenc	vim/vim/src/memline.c	/^add_b0_fenc($/;"	f	file:	signature:( ZERO_BL *b0p, buf_T *buf)
add_b0_fenc	vim/vim/src/memline.c	/^static void add_b0_fenc(ZERO_BL *b0p, buf_T *buf);$/;"	p	file:	signature:(ZERO_BL *b0p, buf_T *buf)
add_banned	vim/vim/src/spell.c	/^add_banned($/;"	f	file:	signature:( suginfo_T *su, char_u *word)
add_banned	vim/vim/src/spell.c	/^static void add_banned(suginfo_T *su, char_u *word);$/;"	p	file:	signature:(suginfo_T *su, char_u *word)
add_buff	vim/vim/src/getchar.c	/^add_buff($/;"	f	file:	signature:( buffheader_T *buf, char_u *s, long slen)
add_buff	vim/vim/src/getchar.c	/^static void	add_buff(buffheader_T *, char_u *, long n);$/;"	p	file:	signature:(buffheader_T *, char_u *, long n)
add_bufnum	vim/vim/src/ex_cmds2.c	/^add_bufnum(int *bufnrs, int *bufnump, int nr)$/;"	f	file:	signature:(int *bufnrs, int *bufnump, int nr)
add_bufnum	vim/vim/src/ex_cmds2.c	/^static void add_bufnum(int *bufnrs, int *bufnump, int nr);$/;"	p	file:	signature:(int *bufnrs, int *bufnump, int nr)
add_cancel_action	vim/vim/src/gui_xmdlg.c	/^add_cancel_action(Widget shell, XtCallbackProc close_callback, void *arg)$/;"	f	file:	signature:(Widget shell, XtCallbackProc close_callback, void *arg)
add_channel	vim/vim/src/channel.c	/^add_channel(void)$/;"	f	signature:(void)
add_char2buf	vim/vim/src/edit.c	/^add_char2buf(int c, char_u *s)$/;"	f	signature:(int c, char_u *s)
add_char_buff	vim/vim/src/getchar.c	/^add_char_buff(buffheader_T *buf, int c)$/;"	f	file:	signature:(buffheader_T *buf, int c)
add_char_buff	vim/vim/src/getchar.c	/^static void	add_char_buff(buffheader_T *, int);$/;"	p	file:	signature:(buffheader_T *, int)
add_cmd_modifier	vim/vim/src/ex_docmd.c	/^add_cmd_modifier(char_u *buf, char *mod_str, int *multi_mods)$/;"	f	file:	signature:(char_u *buf, char *mod_str, int *multi_mods)
add_dialog_element	vim/vim/src/gui_w32.c	/^add_dialog_element($/;"	f	file:	signature:( PWORD p, DWORD lStyle, WORD x, WORD y, WORD w, WORD h, WORD Id, WORD clss, const char *caption)
add_dialog_element	vim/vim/src/gui_w32.c	/^add_dialog_element($/;"	p	file:	signature:( PWORD p, DWORD lStyle, WORD x, WORD y, WORD w, WORD h, WORD Id, WORD clss, const char *caption)
add_dummy_choice	vim/vim/src/dosinst.c	/^add_dummy_choice(void)$/;"	f	file:	signature:(void)
add_fromto	vim/vim/src/spellfile.c	/^add_fromto($/;"	f	file:	signature:( spellinfo_T *spin, garray_T *gap, char_u *from, char_u *to)
add_fromto	vim/vim/src/spellfile.c	/^static void add_fromto(spellinfo_T *spin, garray_T *gap, char_u	*from, char_u *to);$/;"	p	file:	signature:(spellinfo_T *spin, garray_T *gap, char_u *from, char_u *to)
add_keyword	vim/vim/src/syntax.c	/^add_keyword($/;"	f	file:	signature:( char_u *name, int id, int flags, short *cont_in_list, short *next_list, int conceal_char)
add_keyword	vim/vim/src/syntax.c	/^static void add_keyword(char_u *name, int id, int flags, short *cont_in_list, short *next_list, int conceal_char);$/;"	p	file:	signature:(char_u *name, int id, int flags, short *cont_in_list, short *next_list, int conceal_char)
add_long	vim/vim/src/gui_w32.c	6835;"	d	file:
add_long_to_buf	vim/vim/src/term.c	/^add_long_to_buf(long_u val, char_u *dst)$/;"	f	signature:(long_u val, char_u *dst)
add_map	vim/vim/src/getchar.c	/^add_map(char_u *map, int mode)$/;"	f	signature:(char_u *map, int mode)
add_menu_path	vim/vim/src/menu.c	/^add_menu_path($/;"	f	file:	signature:( char_u *menu_path, vimmenu_T *menuarg, int *pri_tab, char_u *call_data , int addtearoff )
add_menu_path	vim/vim/src/menu.c	/^static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *);$/;"	p	file:	signature:(char_u *, vimmenu_T *, int *, char_u *)
add_menu_path	vim/vim/src/menu.c	/^static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *, int);$/;"	p	file:	signature:(char_u *, vimmenu_T *, int *, char_u *, int)
add_mnemonic_grabs	vim/vim/src/gui_motif.c	/^add_mnemonic_grabs(Widget dialog, Widget w)$/;"	f	file:	signature:(Widget dialog, Widget w)
add_msg_hist	vim/vim/src/message.c	/^add_msg_hist($/;"	f	file:	signature:( char_u *s, int len, int attr)
add_msg_hist	vim/vim/src/message.c	/^static void add_msg_hist(char_u *s, int len, int attr);$/;"	p	file:	signature:(char_u *s, int len, int attr)
add_nr_var	vim/vim/src/userfunc.c	/^add_nr_var($/;"	f	file:	signature:( dict_T *dp, dictitem_T *v, char *name, varnumber_T nr)
add_num_buff	vim/vim/src/getchar.c	/^add_num_buff(buffheader_T *buf, long n)$/;"	f	file:	signature:(buffheader_T *buf, long n)
add_num_buff	vim/vim/src/getchar.c	/^static void	add_num_buff(buffheader_T *, long);$/;"	p	file:	signature:(buffheader_T *, long)
add_pack_plugin	vim/vim/src/ex_cmds2.c	/^add_pack_plugin(char_u *fname, void *cookie)$/;"	f	file:	signature:(char_u *fname, void *cookie)
add_pack_start_dirs	vim/vim/src/ex_cmds2.c	/^add_pack_start_dirs(void)$/;"	f	signature:(void)
add_pathsep	vim/vim/src/dosinst.h	/^add_pathsep(char *name)$/;"	f	signature:(char *name)
add_pathsep	vim/vim/src/misc1.c	/^add_pathsep(char_u *p)$/;"	f	signature:(char_u *p)
add_pixmap_args	vim/vim/src/gui_motif.c	/^add_pixmap_args(vimmenu_T *menu, Arg *args, int n)$/;"	f	file:	signature:(vimmenu_T *menu, Arg *args, int n)
add_pixmap_args	vim/vim/src/gui_motif.c	/^static int add_pixmap_args(vimmenu_T *menu, Arg *args, int n);$/;"	p	file:	signature:(vimmenu_T *menu, Arg *args, int n)
add_sound_suggest	vim/vim/src/spell.c	/^add_sound_suggest($/;"	f	file:	signature:( suginfo_T *su, char_u *goodword, int score, langp_T *lp)
add_sound_suggest	vim/vim/src/spell.c	/^static void add_sound_suggest(suginfo_T *su, char_u *goodword, int score, langp_T *lp);$/;"	p	file:	signature:(suginfo_T *su, char_u *goodword, int score, langp_T *lp)
add_stock_icon	vim/vim/src/gui_gtk.c	/^add_stock_icon(GtkIconFactory	*factory,$/;"	f	file:	signature:(GtkIconFactory *factory, const char *stock_id, const guint8 *inline_data, int data_length)
add_string	vim/vim/src/gui_w32.c	6833;"	d	file:
add_string	vim/vim/src/if_py_both.h	/^add_string(PyObject *list, char *s)$/;"	f	signature:(PyObject *list, char *s)
add_suggestion	vim/vim/src/spell.c	/^add_suggestion($/;"	f	file:	signature:( suginfo_T *su, garray_T *gap, char_u *goodword, int badlenarg, int score, int altscore, int had_bonus, slang_T *slang, int maxsf)
add_suggestion	vim/vim/src/spell.c	/^static void add_suggestion(suginfo_T *su, garray_T *gap, char_u *goodword, int badlen, int score, int altscore, int had_bonus, slang_T *slang, int maxsf);$/;"	p	file:	signature:(suginfo_T *su, garray_T *gap, char_u *goodword, int badlen, int score, int altscore, int had_bonus, slang_T *slang, int maxsf)
add_tabline_menu_item	vim/vim/src/gui_gtk_x11.c	/^add_tabline_menu_item(GtkWidget *menu, char_u *text, int resp)$/;"	f	file:	signature:(GtkWidget *menu, char_u *text, int resp)
add_tabline_popup_menu_entry	vim/vim/src/gui_w32.c	/^add_tabline_popup_menu_entry(HMENU pmenu, UINT item_id, char_u *item_text)$/;"	f	file:	signature:(HMENU pmenu, UINT item_id, char_u *item_text)
add_tag_field	vim/vim/src/tag.c	/^add_tag_field($/;"	f	file:	signature:( dict_T *dict, char *field_name, char_u *start, char_u *end)
add_tag_field	vim/vim/src/tag.c	/^static int add_tag_field(dict_T *dict, char *field_name, char_u *start, char_u *end);$/;"	p	file:	signature:(dict_T *dict, char *field_name, char_u *start, char_u *end)
add_termcap_entry	vim/vim/src/term.c	/^add_termcap_entry(char_u *name, int force)$/;"	f	signature:(char_u *name, int force)
add_termcode	vim/vim/src/term.c	/^add_termcode(char_u *name, char_u *string, int flags)$/;"	f	signature:(char_u *name, char_u *string, int flags)
add_timer_info	vim/vim/src/ex_cmds2.c	/^add_timer_info(typval_T *rettv, timer_T *timer)$/;"	f	signature:(typval_T *rettv, timer_T *timer)
add_timer_info_all	vim/vim/src/ex_cmds2.c	/^add_timer_info_all(typval_T *rettv)$/;"	f	signature:(typval_T *rettv)
add_to_history	vim/vim/src/ex_getln.c	/^add_to_history($/;"	f	signature:( int histype, char_u *new_entry, int in_map, int sep)
add_to_input_buf	vim/vim/src/ui.c	/^add_to_input_buf(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
add_to_input_buf_csi	vim/vim/src/ui.c	/^add_to_input_buf_csi(char_u *str, int len)$/;"	f	signature:(char_u *str, int len)
add_to_list	vim/vim/src/gui_xmdlg.c	/^add_to_list(char **buf, char *item, int *count)$/;"	f	file:	signature:(char **buf, char *item, int *count)
add_to_showcmd	vim/vim/src/normal.c	/^add_to_showcmd(int c)$/;"	f	signature:(int c)
add_to_showcmd_c	vim/vim/src/normal.c	/^add_to_showcmd_c(int c)$/;"	f	signature:(int c)
add_word	vim/vim/src/gui_w32.c	6834;"	d	file:
addfile	vim/vim/src/misc1.c	/^addfile($/;"	f	signature:( garray_T *gap, char_u *f, int flags)
addr	vim/vim/src/quickfix.c	/^    char_u	    addr[FMT_PATTERNS]; \/* indices of used % patterns *\/$/;"	m	struct:efm_S	file:	access:public
addr_count	vim/vim/src/ex_cmds.h	/^    int		addr_count;	\/* the number of addresses given *\/$/;"	m	struct:exarg	access:public
addr_type	vim/vim/src/ex_cmds.h	/^    int		addr_type;	\/* type of the count\/range *\/$/;"	m	struct:exarg	access:public
addr_type_complete	vim/vim/src/ex_docmd.c	/^} addr_type_complete[] =$/;"	v	typeref:struct:__anon17	file:
addsigntype	vim/vim/src/netbeans.c	/^addsigntype($/;"	f	file:	signature:( nbbuf_T *buf, int typeNum, char_u *typeName, char_u *tooltip UNUSED, char_u *glyphFile, char_u *fg, char_u *bg)
addsigntype	vim/vim/src/netbeans.c	/^static void addsigntype(nbbuf_T *, int localsigntype, char_u *typeName,$/;"	p	file:	signature:(nbbuf_T *, int localsigntype, char_u *typeName, char_u *tooltip, char_u *glyphfile, char_u *fg, char_u *bg)
addstar	vim/vim/src/ex_getln.c	/^addstar($/;"	f	signature:( char_u *fname, int len, int context)
addstate	vim/vim/src/regexp_nfa.c	/^addstate($/;"	f	file:	signature:( nfa_list_T *l, nfa_state_T *state, regsubs_T *subs_arg, nfa_pim_T *pim, int off_arg)
addstate	vim/vim/src/regexp_nfa.c	/^static regsubs_T *addstate(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs_arg, nfa_pim_T *pim, int off);$/;"	p	file:	signature:(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs_arg, nfa_pim_T *pim, int off)
addstate_here	vim/vim/src/regexp_nfa.c	/^addstate_here($/;"	f	file:	signature:( nfa_list_T *l, nfa_state_T *state, regsubs_T *subs, nfa_pim_T *pim, int *ip)
addstate_here	vim/vim/src/regexp_nfa.c	/^static void addstate_here(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs, nfa_pim_T *pim, int *ip);$/;"	p	file:	signature:(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs, nfa_pim_T *pim, int *ip)
adjustToCell	vim/vim/src/gui_dwrite.cpp	/^    static FLOAT adjustToCell(FLOAT value, FLOAT cellWidth)$/;"	f	class:AdjustedGlyphRun	access:public	signature:(FLOAT value, FLOAT cellWidth)
adjust_clip_reg	vim/vim/src/ops.c	/^adjust_clip_reg(int *rp)$/;"	f	signature:(int *rp)
adjust_cursor	vim/vim/src/normal.c	/^adjust_cursor(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
adjust_cursor	vim/vim/src/normal.c	/^static void	adjust_cursor(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
adjust_cursor_col	vim/vim/src/misc2.c	/^adjust_cursor_col(void)$/;"	f	signature:(void)
adjust_cursor_eol	vim/vim/src/ops.c	/^adjust_cursor_eol(void)$/;"	f	signature:(void)
adjust_for_sel	vim/vim/src/normal.c	/^adjust_for_sel(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
adjust_for_sel	vim/vim/src/normal.c	/^static void	adjust_for_sel(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
adjust_sign_name	vim/vim/src/integration.c	/^adjust_sign_name(char *filename)$/;"	f	signature:(char *filename)
adjust_sign_name	vim/vim/src/integration.c	/^static void adjust_sign_name(char *filename);$/;"	p	file:	signature:(char *filename)
adjustment_value_changed	vim/vim/src/gui_gtk.c	/^adjustment_value_changed(GtkAdjustment *adjustment, gpointer data)$/;"	f	file:	signature:(GtkAdjustment *adjustment, gpointer data)
advance_color_col	vim/vim/src/screen.c	/^advance_color_col(int vcol, int **color_cols)$/;"	f	file:	signature:(int vcol, int **color_cols)
advance_color_col	vim/vim/src/screen.c	/^static int advance_color_col(int vcol, int **color_cols);$/;"	p	file:	signature:(int vcol, int **color_cols)
ae_add	vim/vim/src/spellfile.c	/^    char_u	*ae_add;	\/* text to add to basic word (can be NULL) *\/$/;"	m	struct:affentry_S	file:	access:public
ae_attr	vim/vim/src/structs.h	/^    short	    ae_attr;		\/* HL_BOLD, etc. *\/$/;"	m	struct:attr_entry	access:public
ae_chop	vim/vim/src/spellfile.c	/^    char_u	*ae_chop;	\/* text to chop off basic word (can be NULL) *\/$/;"	m	struct:affentry_S	file:	access:public
ae_compforbid	vim/vim/src/spellfile.c	/^    char	ae_compforbid;	\/* COMPOUNDFORBIDFLAG found *\/$/;"	m	struct:affentry_S	file:	access:public
ae_comppermit	vim/vim/src/spellfile.c	/^    char	ae_comppermit;	\/* COMPOUNDPERMITFLAG found *\/$/;"	m	struct:affentry_S	file:	access:public
ae_cond	vim/vim/src/spellfile.c	/^    char_u	*ae_cond;	\/* condition (NULL for ".") *\/$/;"	m	struct:affentry_S	file:	access:public
ae_flags	vim/vim/src/spellfile.c	/^    char_u	*ae_flags;	\/* flags on the affix (can be NULL) *\/$/;"	m	struct:affentry_S	file:	access:public
ae_fname	vim/vim/src/structs.h	/^    char_u	*ae_fname;	\/* file name as specified *\/$/;"	m	struct:argentry	access:public
ae_fnum	vim/vim/src/structs.h	/^    int		ae_fnum;	\/* buffer number with expanded file name *\/$/;"	m	struct:argentry	access:public
ae_next	vim/vim/src/spellfile.c	/^    affentry_T	*ae_next;	\/* next affix with same name\/number *\/$/;"	m	struct:affentry_S	file:	access:public
ae_prog	vim/vim/src/spellfile.c	/^    regprog_T	*ae_prog;	\/* regexp program for ae_cond or NULL *\/$/;"	m	struct:affentry_S	file:	access:public
ae_u	vim/vim/src/structs.h	/^    } ae_u;$/;"	m	struct:attr_entry	typeref:union:attr_entry::__anon175	access:public
aentry_T	vim/vim/src/structs.h	/^} aentry_T;$/;"	t	typeref:struct:argentry
af_bad	vim/vim/src/spellfile.c	/^    unsigned	af_bad;		\/* BAD ID for banned word *\/$/;"	m	struct:afffile_S	file:	access:public
af_circumfix	vim/vim/src/spellfile.c	/^    unsigned	af_circumfix;	\/* CIRCUMFIX ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_comp	vim/vim/src/spellfile.c	/^    hashtab_T	af_comp;	\/* hashtable for compound flags, compitem_T *\/$/;"	m	struct:afffile_S	file:	access:public
af_compforbid	vim/vim/src/spellfile.c	/^    unsigned	af_compforbid;	\/* COMPOUNDFORBIDFLAG ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_comppermit	vim/vim/src/spellfile.c	/^    unsigned	af_comppermit;	\/* COMPOUNDPERMITFLAG ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_comproot	vim/vim/src/spellfile.c	/^    unsigned	af_comproot;	\/* COMPOUNDROOT ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_enc	vim/vim/src/spellfile.c	/^    char_u	*af_enc;	\/* "SET", normalized, alloc'ed string or NULL *\/$/;"	m	struct:afffile_S	file:	access:public
af_flagtype	vim/vim/src/spellfile.c	/^    int		af_flagtype;	\/* AFT_CHAR, AFT_LONG, AFT_NUM or AFT_CAPLONG *\/$/;"	m	struct:afffile_S	file:	access:public
af_ignoreextra	vim/vim/src/spellfile.c	/^    int		af_ignoreextra;	\/* IGNOREEXTRA present *\/$/;"	m	struct:afffile_S	file:	access:public
af_keepcase	vim/vim/src/spellfile.c	/^    unsigned	af_keepcase;	\/* KEEPCASE ID for keep-case word *\/$/;"	m	struct:afffile_S	file:	access:public
af_needaffix	vim/vim/src/spellfile.c	/^    unsigned	af_needaffix;	\/* NEEDAFFIX ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_needcomp	vim/vim/src/spellfile.c	/^    unsigned	af_needcomp;	\/* NEEDCOMPOUND ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_nosuggest	vim/vim/src/spellfile.c	/^    unsigned	af_nosuggest;	\/* NOSUGGEST ID *\/$/;"	m	struct:afffile_S	file:	access:public
af_pfxpostpone	vim/vim/src/spellfile.c	/^    int		af_pfxpostpone;	\/* postpone prefixes without chop string and$/;"	m	struct:afffile_S	file:	access:public
af_pref	vim/vim/src/spellfile.c	/^    hashtab_T	af_pref;	\/* hashtable for prefixes, affheader_T *\/$/;"	m	struct:afffile_S	file:	access:public
af_rare	vim/vim/src/spellfile.c	/^    unsigned	af_rare;	\/* RARE ID for rare word *\/$/;"	m	struct:afffile_S	file:	access:public
af_suff	vim/vim/src/spellfile.c	/^    hashtab_T	af_suff;	\/* hashtable for suffixes, affheader_T *\/$/;"	m	struct:afffile_S	file:	access:public
aff_check_number	vim/vim/src/spellfile.c	/^aff_check_number(int spinval, int affval, char *name)$/;"	f	file:	signature:(int spinval, int affval, char *name)
aff_check_number	vim/vim/src/spellfile.c	/^static void aff_check_number(int spinval, int affval, char *name);$/;"	p	file:	signature:(int spinval, int affval, char *name)
aff_check_string	vim/vim/src/spellfile.c	/^aff_check_string(char_u *spinval, char_u *affval, char *name)$/;"	f	file:	signature:(char_u *spinval, char_u *affval, char *name)
aff_check_string	vim/vim/src/spellfile.c	/^static void aff_check_string(char_u *spinval, char_u *affval, char *name);$/;"	p	file:	signature:(char_u *spinval, char_u *affval, char *name)
aff_process_flags	vim/vim/src/spellfile.c	/^aff_process_flags(afffile_T *affile, affentry_T *entry)$/;"	f	file:	signature:(afffile_T *affile, affentry_T *entry)
aff_process_flags	vim/vim/src/spellfile.c	/^static void aff_process_flags(afffile_T *affile, affentry_T *entry);$/;"	p	file:	signature:(afffile_T *affile, affentry_T *entry)
affentry_S	vim/vim/src/spellfile.c	/^struct affentry_S$/;"	s	file:
affentry_S::ae_add	vim/vim/src/spellfile.c	/^    char_u	*ae_add;	\/* text to add to basic word (can be NULL) *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_chop	vim/vim/src/spellfile.c	/^    char_u	*ae_chop;	\/* text to chop off basic word (can be NULL) *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_compforbid	vim/vim/src/spellfile.c	/^    char	ae_compforbid;	\/* COMPOUNDFORBIDFLAG found *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_comppermit	vim/vim/src/spellfile.c	/^    char	ae_comppermit;	\/* COMPOUNDPERMITFLAG found *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_cond	vim/vim/src/spellfile.c	/^    char_u	*ae_cond;	\/* condition (NULL for ".") *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_flags	vim/vim/src/spellfile.c	/^    char_u	*ae_flags;	\/* flags on the affix (can be NULL) *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_next	vim/vim/src/spellfile.c	/^    affentry_T	*ae_next;	\/* next affix with same name\/number *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_S::ae_prog	vim/vim/src/spellfile.c	/^    regprog_T	*ae_prog;	\/* regexp program for ae_cond or NULL *\/$/;"	m	struct:affentry_S	file:	access:public
affentry_T	vim/vim/src/spellfile.c	/^typedef struct affentry_S affentry_T;$/;"	t	typeref:struct:affentry_S	file:
afffile_S	vim/vim/src/spellfile.c	/^typedef struct afffile_S$/;"	s	file:
afffile_S::af_bad	vim/vim/src/spellfile.c	/^    unsigned	af_bad;		\/* BAD ID for banned word *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_circumfix	vim/vim/src/spellfile.c	/^    unsigned	af_circumfix;	\/* CIRCUMFIX ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_comp	vim/vim/src/spellfile.c	/^    hashtab_T	af_comp;	\/* hashtable for compound flags, compitem_T *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_compforbid	vim/vim/src/spellfile.c	/^    unsigned	af_compforbid;	\/* COMPOUNDFORBIDFLAG ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_comppermit	vim/vim/src/spellfile.c	/^    unsigned	af_comppermit;	\/* COMPOUNDPERMITFLAG ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_comproot	vim/vim/src/spellfile.c	/^    unsigned	af_comproot;	\/* COMPOUNDROOT ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_enc	vim/vim/src/spellfile.c	/^    char_u	*af_enc;	\/* "SET", normalized, alloc'ed string or NULL *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_flagtype	vim/vim/src/spellfile.c	/^    int		af_flagtype;	\/* AFT_CHAR, AFT_LONG, AFT_NUM or AFT_CAPLONG *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_ignoreextra	vim/vim/src/spellfile.c	/^    int		af_ignoreextra;	\/* IGNOREEXTRA present *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_keepcase	vim/vim/src/spellfile.c	/^    unsigned	af_keepcase;	\/* KEEPCASE ID for keep-case word *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_needaffix	vim/vim/src/spellfile.c	/^    unsigned	af_needaffix;	\/* NEEDAFFIX ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_needcomp	vim/vim/src/spellfile.c	/^    unsigned	af_needcomp;	\/* NEEDCOMPOUND ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_nosuggest	vim/vim/src/spellfile.c	/^    unsigned	af_nosuggest;	\/* NOSUGGEST ID *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_pfxpostpone	vim/vim/src/spellfile.c	/^    int		af_pfxpostpone;	\/* postpone prefixes without chop string and$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_pref	vim/vim/src/spellfile.c	/^    hashtab_T	af_pref;	\/* hashtable for prefixes, affheader_T *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_rare	vim/vim/src/spellfile.c	/^    unsigned	af_rare;	\/* RARE ID for rare word *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_S::af_suff	vim/vim/src/spellfile.c	/^    hashtab_T	af_suff;	\/* hashtable for suffixes, affheader_T *\/$/;"	m	struct:afffile_S	file:	access:public
afffile_T	vim/vim/src/spellfile.c	/^} afffile_T;$/;"	t	typeref:struct:afffile_S	file:
affheader_S	vim/vim/src/spellfile.c	/^typedef struct affheader_S$/;"	s	file:
affheader_S::ah_combine	vim/vim/src/spellfile.c	/^    int		ah_combine;	\/* suffix may combine with prefix *\/$/;"	m	struct:affheader_S	file:	access:public
affheader_S::ah_first	vim/vim/src/spellfile.c	/^    affentry_T	*ah_first;	\/* first affix entry *\/$/;"	m	struct:affheader_S	file:	access:public
affheader_S::ah_flag	vim/vim/src/spellfile.c	/^    unsigned	ah_flag;	\/* affix name as number, uses "af_flagtype" *\/$/;"	m	struct:affheader_S	file:	access:public
affheader_S::ah_follows	vim/vim/src/spellfile.c	/^    int		ah_follows;	\/* another affix block should be following *\/$/;"	m	struct:affheader_S	file:	access:public
affheader_S::ah_key	vim/vim/src/spellfile.c	/^    char_u	ah_key[AH_KEY_LEN]; \/* key for hashtab == name of affix *\/$/;"	m	struct:affheader_S	file:	access:public
affheader_S::ah_newID	vim/vim/src/spellfile.c	/^    int		ah_newID;	\/* prefix ID after renumbering; 0 if not used *\/$/;"	m	struct:affheader_S	file:	access:public
affheader_T	vim/vim/src/spellfile.c	/^} affheader_T;$/;"	t	typeref:struct:affheader_S	file:
affitem2flag	vim/vim/src/spellfile.c	/^affitem2flag($/;"	f	file:	signature:( int flagtype, char_u *item, char_u *fname, int lnum)
affitem2flag	vim/vim/src/spellfile.c	/^static unsigned affitem2flag(int flagtype, char_u *item, char_u	*fname, int lnum);$/;"	p	file:	signature:(int flagtype, char_u *item, char_u *fname, int lnum)
after_label	vim/vim/src/misc1.c	/^after_label(char_u *l)$/;"	f	file:	signature:(char_u *l)
after_label	vim/vim/src/misc1.c	/^static char_u	*after_label(char_u *l);$/;"	p	file:	signature:(char_u *l)
after_pathsep	vim/vim/src/misc2.c	/^after_pathsep(char_u *b, char_u *p)$/;"	f	signature:(char_u *b, char_u *p)
after_pathsep	vim/vim/src/vim.h	2134;"	d
ah_combine	vim/vim/src/spellfile.c	/^    int		ah_combine;	\/* suffix may combine with prefix *\/$/;"	m	struct:affheader_S	file:	access:public
ah_first	vim/vim/src/spellfile.c	/^    affentry_T	*ah_first;	\/* first affix entry *\/$/;"	m	struct:affheader_S	file:	access:public
ah_flag	vim/vim/src/spellfile.c	/^    unsigned	ah_flag;	\/* affix name as number, uses "af_flagtype" *\/$/;"	m	struct:affheader_S	file:	access:public
ah_follows	vim/vim/src/spellfile.c	/^    int		ah_follows;	\/* another affix block should be following *\/$/;"	m	struct:affheader_S	file:	access:public
ah_key	vim/vim/src/spellfile.c	/^    char_u	ah_key[AH_KEY_LEN]; \/* key for hashtab == name of affix *\/$/;"	m	struct:affheader_S	file:	access:public
ah_newID	vim/vim/src/spellfile.c	/^    int		ah_newID;	\/* prefix ID after renumbering; 0 if not used *\/$/;"	m	struct:affheader_S	file:	access:public
ai_col	vim/vim/src/globals.h	/^EXTERN colnr_T	ai_col INIT(= 0);$/;"	v
aid_last	vim/vim/src/alloc.h	/^	aid_last$/;"	e	enum:__anon250
aid_none	vim/vim/src/alloc.h	/^	aid_none = 0,$/;"	e	enum:__anon250
aid_qf_dirname_now	vim/vim/src/alloc.h	/^	aid_qf_dirname_now,$/;"	e	enum:__anon250
aid_qf_dirname_start	vim/vim/src/alloc.h	/^	aid_qf_dirname_start,$/;"	e	enum:__anon250
aid_qf_errmsg	vim/vim/src/alloc.h	/^	aid_qf_errmsg,$/;"	e	enum:__anon250
aid_qf_namebuf	vim/vim/src/alloc.h	/^	aid_qf_namebuf,$/;"	e	enum:__anon250
aid_qf_pattern	vim/vim/src/alloc.h	/^	aid_qf_pattern,$/;"	e	enum:__anon250
aixhack	vim/vim/src/pty.c	/^int aixhack = -1;$/;"	v
al_ga	vim/vim/src/structs.h	/^    garray_T	al_ga;		\/* growarray with the array of file names *\/$/;"	m	struct:arglist	access:public
al_refcount	vim/vim/src/structs.h	/^    int		al_refcount;	\/* number of windows using this arglist *\/$/;"	m	struct:arglist	access:public
alist_T	vim/vim/src/structs.h	/^} alist_T;$/;"	t	typeref:struct:arglist
alist_add	vim/vim/src/ex_docmd.c	/^alist_add($/;"	f	signature:( alist_T *al, char_u *fname, int set_fnum)
alist_add_list	vim/vim/src/ex_cmds2.c	/^alist_add_list($/;"	f	file:	signature:( int count, char_u **files, int after)
alist_add_list	vim/vim/src/ex_cmds2.c	/^static int	alist_add_list(int count, char_u **files, int after);$/;"	p	file:	signature:(int count, char_u **files, int after)
alist_check_arg_idx	vim/vim/src/ex_cmds2.c	/^alist_check_arg_idx(void)$/;"	f	file:	signature:(void)
alist_check_arg_idx	vim/vim/src/ex_cmds2.c	/^static void	alist_check_arg_idx(void);$/;"	p	file:	signature:(void)
alist_clear	vim/vim/src/ex_docmd.c	/^alist_clear(alist_T *al)$/;"	f	signature:(alist_T *al)
alist_expand	vim/vim/src/ex_docmd.c	/^alist_expand(int *fnum_list, int fnum_len)$/;"	f	signature:(int *fnum_list, int fnum_len)
alist_init	vim/vim/src/ex_docmd.c	/^alist_init(alist_T *al)$/;"	f	signature:(alist_T *al)
alist_name	vim/vim/src/buffer.c	/^alist_name(aentry_T *aep)$/;"	f	signature:(aentry_T *aep)
alist_new	vim/vim/src/ex_docmd.c	/^alist_new(void)$/;"	f	signature:(void)
alist_set	vim/vim/src/ex_docmd.c	/^alist_set($/;"	f	signature:( alist_T *al, int count, char_u **files, int use_curbuf, int *fnum_list, int fnum_len)
alist_slash_adjust	vim/vim/src/ex_docmd.c	/^alist_slash_adjust(void)$/;"	f	signature:(void)
alist_unlink	vim/vim/src/ex_docmd.c	/^alist_unlink(alist_T *al)$/;"	f	signature:(alist_T *al)
all	vim/vim/src/gui_gtk.c	/^    GtkWidget *all;	\/* 'Replace All' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
all	vim/vim/src/gui_motif.c	/^    Widget all;		\/* 'Replace All' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
all_cflags	vim/vim/src/Make_bc5.mak	/^char_u *all_cflags = (char_u *)"$(CC:\\=\\\\) $(CFLAGS:\\=\\\\) $(DEFINES) $(MBDEFINES) $(INTERP_DEFINES_ESC) $(OPT) $(EXETYPE) $(CPUARG) $(ALIGNARG) $(DEBUG_FLAG) $(CODEGUARD_FLAG)";$/;"	m
all_cflags	vim/vim/src/Makefile	/^	-@echo 'char_u *all_cflags = (char_u *)"$(CC) -c -I$(srcdir) $(ALL_CFLAGS)";' | $(QUOTESED) >>  $@$/;"	m
all_cflags	vim/vim/src/auto/pathdef.c	/^char_u *all_cflags = (char_u *)"gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I\/usr\/include\/gtk-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/gtk-2.0\/include -I\/usr\/include\/atk-1.0 -I\/usr\/include\/cairo -I\/usr\/include\/gdk-pixbuf-2.0 -I\/usr\/include\/pango-1.0 -I\/usr\/include\/gio-unix-2.0\/ -I\/usr\/include\/freetype2 -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include -I\/usr\/include\/pixman-1 -I\/usr\/include\/libpng12 -I\/usr\/include\/harfbuzz     -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1       ";$/;"	v
all_lflags	vim/vim/src/Make_bc5.mak	/^char_u *all_lflags = (char_u *)"$(LINK:\\=\\\\) $(LFLAGS:\\=\\\\)";$/;"	m
all_lflags	vim/vim/src/Makefile	/^	-@echo 'char_u *all_lflags = (char_u *)"$(CC) $(ALL_LIB_DIRS) $(LDFLAGS) -o $(VIMTARGET) $(ALL_LIBS) ";' | $(QUOTESED) >>  $@$/;"	m
all_lflags	vim/vim/src/auto/pathdef.c	/^char_u *all_lflags = (char_u *)"gcc   -L\/usr\/local\/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lgobject-2.0 -lglib-2.0 -lfreetype   -lSM -lICE -lXt -lX11 -lXdmcp -lSM -lICE  -lm -ltinfo -lnsl   -ldl    -L\/usr\/lib\/python2.7\/config-x86_64-linux-gnu\/ -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions       ";$/;"	v
allbuf_lock	vim/vim/src/globals.h	/^EXTERN int	allbuf_lock INIT(= 0);$/;"	v
allbuf_locked	vim/vim/src/ex_getln.c	/^allbuf_locked(void)$/;"	f	signature:(void)
allcap_copy	vim/vim/src/spell.c	/^allcap_copy(char_u *word, char_u *wcopy)$/;"	f	file:	signature:(char_u *word, char_u *wcopy)
allcap_copy	vim/vim/src/spell.c	/^static void allcap_copy(char_u *word, char_u *wcopy);$/;"	p	file:	signature:(char_u *word, char_u *wcopy)
alloc	vim/vim/src/dosinst.h	/^alloc(int len)$/;"	f	signature:(int len)
alloc	vim/vim/src/misc2.c	/^alloc(unsigned size)$/;"	f	signature:(unsigned size)
alloc_check	vim/vim/src/misc2.c	/^alloc_check(unsigned size)$/;"	f	signature:(unsigned size)
alloc_clear	vim/vim/src/misc2.c	/^alloc_clear(unsigned size)$/;"	f	signature:(unsigned size)
alloc_close_colors	vim/vim/src/xpm/include/xpm.h	/^    Bool alloc_close_colors;    	\/* Specify whether close colors should$/;"	m	struct:__anon93	access:public
alloc_cmdbuff	vim/vim/src/ex_getln.c	/^alloc_cmdbuff(int len)$/;"	f	file:	signature:(int len)
alloc_cmdbuff	vim/vim/src/ex_getln.c	/^static void	alloc_cmdbuff(int len);$/;"	p	file:	signature:(int len)
alloc_color	vim/vim/src/gui_xmebw.c	/^alloc_color(Display	*display,$/;"	f	file:	signature:(Display *display, Colormap colormap, char *colorname, XColor *xcolor, void *closure UNUSED)
alloc_color	vim/vim/src/xpm/include/xpm.h	/^    XpmAllocColorFunc alloc_color;	\/* Application color allocator *\/$/;"	m	struct:__anon93	access:public
alloc_does_fail	vim/vim/src/misc2.c	/^alloc_does_fail(long_u size)$/;"	f	file:	signature:(long_u size)
alloc_does_fail	vim/vim/src/misc2.c	/^static int alloc_does_fail(long_u size);$/;"	p	file:	signature:(long_u size)
alloc_fail_countdown	vim/vim/src/globals.h	/^EXTERN int  alloc_fail_countdown INIT(= -1);$/;"	v
alloc_fail_id	vim/vim/src/globals.h	/^EXTERN alloc_id_T  alloc_fail_id INIT(= aid_none);$/;"	v
alloc_fail_repeat	vim/vim/src/globals.h	/^EXTERN int  alloc_fail_repeat INIT(= 0);$/;"	v
alloc_id	vim/vim/src/misc2.c	/^alloc_id(unsigned size, alloc_id_T id UNUSED)$/;"	f	signature:(unsigned size, alloc_id_T id UNUSED)
alloc_id_T	vim/vim/src/alloc.h	/^} alloc_id_T;$/;"	t	typeref:enum:__anon250
alloc_pixels	vim/vim/src/xpm/include/xpm.h	/^    Pixel *alloc_pixels;		\/* Returns the list of alloc'ed color$/;"	m	struct:__anon93	access:public
alloc_state	vim/vim/src/regexp_nfa.c	/^alloc_state(int c, nfa_state_T *out, nfa_state_T *out1)$/;"	f	file:	signature:(int c, nfa_state_T *out, nfa_state_T *out1)
alloc_state	vim/vim/src/regexp_nfa.c	/^static nfa_state_T *alloc_state(int c, nfa_state_T *out, nfa_state_T *out1);$/;"	p	file:	signature:(int c, nfa_state_T *out, nfa_state_T *out1)
alloc_string_tv	vim/vim/src/eval.c	/^alloc_string_tv(char_u *s)$/;"	f	file:	signature:(char_u *s)
alloc_string_tv	vim/vim/src/eval.c	/^static typval_T *alloc_string_tv(char_u *string);$/;"	p	file:	signature:(char_u *string)
alloc_tabpage	vim/vim/src/window.c	/^alloc_tabpage(void)$/;"	f	file:	signature:(void)
alloc_tabpage	vim/vim/src/window.c	/^static tabpage_T *alloc_tabpage(void);$/;"	p	file:	signature:(void)
alloc_text	vim/vim/src/dosinst.c	/^alloc_text(int idx, char *fmt, char *arg)$/;"	f	file:	signature:(int idx, char *fmt, char *arg)
alloc_tv	vim/vim/src/eval.c	/^alloc_tv(void)$/;"	f	signature:(void)
alloc_typebuf	vim/vim/src/getchar.c	/^alloc_typebuf(void)$/;"	f	signature:(void)
allocator	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermAllocatorFunctions *allocator;$/;"	m	struct:VTerm	access:public
allocdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *allocdata;$/;"	m	struct:VTerm	access:public
allow_dirs	vim/vim/src/fileio.c	/^    char	    allow_dirs;		\/* Pattern may match whole path *\/$/;"	m	struct:AutoPat	file:	access:public
allow_keys	vim/vim/src/globals.h	/^EXTERN int allow_keys INIT(= FALSE);	\/* allow key codes when no_mapping$/;"	v
allow_scrollbar	vim/vim/src/gui_mac.c	/^static int allow_scrollbar = FALSE;$/;"	v	file:
allow_scrollbar	vim/vim/src/gui_w32.c	/^static int allow_scrollbar = FALSE;$/;"	v	file:
already_warned	vim/vim/src/fileio.c	/^static int already_warned = FALSE;$/;"	v	file:
alt_screen	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int alt_screen:1;$/;"	m	struct:VTermState::__anon35	access:public
alt_tabpage	vim/vim/src/window.c	/^alt_tabpage(void)$/;"	f	file:	signature:(void)
alt_tabpage	vim/vim/src/window.c	/^static tabpage_T *alt_tabpage(void);$/;"	p	file:	signature:(void)
altname_buf_ptr	vim/vim/src/os_mswin.c	/^static char_u *altname_buf_ptr = NULL;$/;"	v	file:
ambiguous	vim/vim/src/mbyte.c	/^static struct interval ambiguous[] =$/;"	v	typeref:struct:interval	file:
amount	vim/vim/src/ex_cmds.h	/^    int		amount;		\/* number of '>' or '<' for shift command *\/$/;"	m	struct:exarg	access:public
ansi_colors	vim/vim/src/libvterm/src/pen.c	/^static const VTermColor ansi_colors[] = {$/;"	v	file:
ap	vim/vim/src/evalfunc.c	/^static va_list	ap;$/;"	v	file:
app	vim/vim/src/if_ole.cpp	/^static CVim *app = 0;$/;"	v	file:
app_context	vim/vim/src/globals.h	/^EXTERN XtAppContext app_context INIT(= (XtAppContext)NULL);$/;"	v
app_id	vim/vim/src/if_ole.cpp	/^static unsigned long app_id = 0;$/;"	v	file:
append	vim/vim/src/ex_cmds.h	/^    int		append;		\/* TRUE with ":w >>file" command *\/$/;"	m	struct:exarg	access:public
append	vim/vim/src/regexp_nfa.c	/^append(Ptrlist *l1, Ptrlist *l2)$/;"	f	file:	signature:(Ptrlist *l1, Ptrlist *l2)
append	vim/vim/src/regexp_nfa.c	/^static Ptrlist *append(Ptrlist *l1, Ptrlist *l2);$/;"	p	file:	signature:(Ptrlist *l1, Ptrlist *l2)
append_arg_number	vim/vim/src/buffer.c	/^append_arg_number($/;"	f	file:	signature:( win_T *wp, char_u *buf, int buflen, int add_file)
append_arg_number	vim/vim/src/buffer.c	/^static int	append_arg_number(win_T *wp, char_u *buf, int buflen, int add_file);$/;"	p	file:	signature:(win_T *wp, char_u *buf, int buflen, int add_file)
append_command	vim/vim/src/ex_docmd.c	/^append_command(char_u *cmd)$/;"	f	file:	signature:(char_u *cmd)
append_command	vim/vim/src/ex_docmd.c	/^static void	append_command(char_u *cmd);$/;"	p	file:	signature:(char_u *cmd)
append_ga_line	vim/vim/src/misc2.c	/^append_ga_line(garray_T *gap)$/;"	f	signature:(garray_T *gap)
append_indent	vim/vim/src/ex_cmds.c	/^static int append_indent = 0;	    \/* autoindent for first line *\/$/;"	v	file:
append_redir	vim/vim/src/ex_cmds.c	/^append_redir($/;"	f	signature:( char_u *buf, int buflen, char_u *opt, char_u *fname)
append_selection	vim/vim/src/workshop.c	/^append_selection($/;"	f	file:	signature:( int lnum, char *sp, int *size, int *slen)
append_selection	vim/vim/src/workshop.c	/^static char	*append_selection(int, char *, int *, int *);$/;"	p	file:	signature:(int, char *, int *, int *)
append_strbuffer	vim/vim/src/libvterm/src/parser.c	/^static void append_strbuffer(VTerm *vt, const char *str, size_t len)$/;"	f	file:	signature:(VTerm *vt, const char *str, size_t len)
append_to_buffer	vim/vim/src/channel.c	/^append_to_buffer(buf_T *buffer, char_u *msg, channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(buf_T *buffer, char_u *msg, channel_T *channel, ch_part_T part)
appended_lines	vim/vim/src/misc1.c	/^appended_lines(linenr_T lnum, long count)$/;"	f	signature:(linenr_T lnum, long count)
appended_lines_mark	vim/vim/src/misc1.c	/^appended_lines_mark(linenr_T lnum, long count)$/;"	f	signature:(linenr_T lnum, long count)
applicationShellWidgetClass	vim/vim/src/gui_gtk_vms.h	667;"	d
apply_autocmds	vim/vim/src/fileio.c	/^apply_autocmds($/;"	f	signature:( event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf)
apply_autocmds_exarg	vim/vim/src/fileio.c	/^apply_autocmds_exarg($/;"	f	file:	signature:( event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf, exarg_T *eap)
apply_autocmds_exarg	vim/vim/src/fileio.c	/^static int apply_autocmds_exarg(event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf, exarg_T *eap);$/;"	p	file:	signature:(event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf, exarg_T *eap)
apply_autocmds_group	vim/vim/src/fileio.c	/^apply_autocmds_group($/;"	f	file:	signature:( event_T event, char_u *fname, char_u *fname_io, int force, int group, buf_T *buf, exarg_T *eap)
apply_autocmds_group	vim/vim/src/fileio.c	/^static int apply_autocmds_group(event_T event, char_u *fname, char_u *fname_io, int force, int group, buf_T *buf, exarg_T *eap);$/;"	p	file:	signature:(event_T event, char_u *fname, char_u *fname_io, int force, int group, buf_T *buf, exarg_T *eap)
apply_autocmds_retval	vim/vim/src/fileio.c	/^apply_autocmds_retval($/;"	f	signature:( event_T event, char_u *fname, char_u *fname_io, int force, buf_T *buf, int *retval)
apply_fontlist	vim/vim/src/gui_xmdlg.c	44;"	d	file:
apply_fontlist	vim/vim/src/gui_xmdlg.c	46;"	d	file:
apply_wide_font_attr	vim/vim/src/gui_gtk_x11.c	/^apply_wide_font_attr(char_u *s, int len, PangoAttrList *attr_list)$/;"	f	file:	signature:(char_u *s, int len, PangoAttrList *attr_list)
approximate_botline_win	vim/vim/src/move.c	/^approximate_botline_win($/;"	f	signature:( win_T *wp)
arabic_combine	vim/vim/src/mbyte.c	/^arabic_combine($/;"	f	signature:( int one, int two)
arabic_maycombine	vim/vim/src/mbyte.c	/^arabic_maycombine(int two)$/;"	f	signature:(int two)
arabic_shape	vim/vim/src/arabic.c	/^arabic_shape($/;"	f	signature:( int c, int *ccp, int *c1p, int prev_c, int prev_c1, int next_c)
arg	vim/vim/src/dosinst.c	/^    int	    arg;			\/* argument for function *\/$/;"	m	struct:choice	file:	access:public
arg	vim/vim/src/ex_cmds.h	/^    char_u	*arg;		\/* argument of the command *\/$/;"	m	struct:exarg	access:public
arg	vim/vim/src/getchar.c	/^    char_u	*arg;$/;"	m	struct:initmap	file:	access:public
arg	vim/vim/src/structs.h	/^    int		arg;		\/* extra argument from nv_cmds[] *\/$/;"	m	struct:cmdarg_S	access:public
arg_all	vim/vim/src/ex_docmd.c	/^arg_all(void)$/;"	f	file:	signature:(void)
arg_all	vim/vim/src/ex_docmd.c	/^static char_u	*arg_all(void);$/;"	p	file:	signature:(void)
arg_bufnr	vim/vim/src/fileio.c	/^    int		arg_bufnr;	\/* initially equal to <abuf>, set to zero when$/;"	m	struct:AutoPatCmd	file:	access:public
arg_had_last	vim/vim/src/globals.h	/^EXTERN int	arg_had_last INIT(= FALSE); \/* accessed last file in$/;"	v
argc	vim/vim/src/if_py_both.h	/^    int		argc;$/;"	m	struct:__anon104	access:public
argc	vim/vim/src/structs.h	/^    int		argc;$/;"	m	struct:__anon210	access:public
argentry	vim/vim/src/structs.h	/^typedef struct argentry$/;"	s
argentry::ae_fname	vim/vim/src/structs.h	/^    char_u	*ae_fname;	\/* file name as specified *\/$/;"	m	struct:argentry	access:public
argentry::ae_fnum	vim/vim/src/structs.h	/^    int		ae_fnum;	\/* buffer number with expanded file name *\/$/;"	m	struct:argentry	access:public
arglist	vim/vim/src/structs.h	/^typedef struct arglist$/;"	s
arglist::al_ga	vim/vim/src/structs.h	/^    garray_T	al_ga;		\/* growarray with the array of file names *\/$/;"	m	struct:arglist	access:public
arglist::al_refcount	vim/vim/src/structs.h	/^    int		al_refcount;	\/* number of windows using this arglist *\/$/;"	m	struct:arglist	access:public
arglist::id	vim/vim/src/structs.h	/^    int		id;		\/* id of this arglist *\/$/;"	m	struct:arglist	access:public
args	vim/vim/src/gui_motif.c	/^    char *  args;   \/* not used right now *\/$/;"	m	struct:dialog_callback_arg	file:	access:public
argt	vim/vim/src/ex_cmds.h	/^    long	argt;		\/* flags for the command *\/$/;"	m	struct:exarg	access:public
arguments	vim/vim/src/structs.h	/^    char_u	*arguments;$/;"	m	struct:__anon206	access:public
argv	vim/vim/src/if_py_both.h	/^    typval_T	*argv;$/;"	m	struct:__anon104	access:public
argv	vim/vim/src/structs.h	/^    char	**argv;$/;"	m	struct:__anon210	access:public
armed_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap armed_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
arrow_used	vim/vim/src/globals.h	/^EXTERN int arrow_used;			\/* Normally FALSE, set to TRUE after$/;"	v
arshape_buf	vim/vim/src/ex_getln.c	/^static char_u	*arshape_buf = NULL;$/;"	v	file:
as	vim/vim/runtime/tutor/tutor.cs	/^      5)  Hodinky ukazují èas,$/;"	p
as_fn_append	vim/vim/src/auto/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	vim/vim/src/auto/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	vim/vim/src/auto/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	vim/vim/src/auto/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	vim/vim/src/auto/config.status	/^as_fn_error ()$/;"	f
as_fn_error	vim/vim/src/auto/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	vim/vim/src/auto/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	vim/vim/src/auto/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	vim/vim/src/auto/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	vim/vim/src/auto/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	vim/vim/src/auto/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	vim/vim/src/auto/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	vim/vim/src/auto/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	vim/vim/src/auto/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	vim/vim/src/auto/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	vim/vim/src/auto/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	vim/vim/src/auto/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	vim/vim/src/auto/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	vim/vim/src/auto/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	vim/vim/src/auto/configure	/^as_fn_unset ()$/;"	f
ascii_enc	vim/vim/src/hardcopy.c	/^    char			*ascii_enc;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
ascii_font	vim/vim/src/gui.h	/^    PangoFont	     *ascii_font;   \/* cached font for ASCII strings *\/$/;"	m	struct:Gui	access:public
ascii_glyph_table_init	vim/vim/src/gui_gtk_x11.c	/^ascii_glyph_table_init(void)$/;"	f	file:	signature:(void)
ascii_glyphs	vim/vim/src/gui.h	/^    PangoGlyphString *ascii_glyphs; \/* cached code point -> glyph map *\/$/;"	m	struct:Gui	access:public
ask_for_key	vim/vim/src/structs.h	/^    int		ask_for_key;		\/* -x argument *\/$/;"	m	struct:__anon210	access:public
ask_yesno	vim/vim/src/misc1.c	/^ask_yesno(char_u *str, int direct)$/;"	f	signature:(char_u *str, int direct)
assert_bool	vim/vim/src/eval.c	/^assert_bool(typval_T *argvars, int isTrue)$/;"	f	signature:(typval_T *argvars, int isTrue)
assert_equal_common	vim/vim/src/eval.c	/^assert_equal_common(typval_T *argvars, assert_type_T atype)$/;"	f	signature:(typval_T *argvars, assert_type_T atype)
assert_error	vim/vim/src/eval.c	/^assert_error(garray_T *gap)$/;"	f	signature:(garray_T *gap)
assert_exception	vim/vim/src/eval.c	/^assert_exception(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
assert_fails	vim/vim/src/eval.c	/^assert_fails(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
assert_inrange	vim/vim/src/eval.c	/^assert_inrange(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
assert_match_common	vim/vim/src/eval.c	/^assert_match_common(typval_T *argvars, assert_type_T atype)$/;"	f	signature:(typval_T *argvars, assert_type_T atype)
assert_report	vim/vim/src/eval.c	/^assert_report(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
assert_type_T	vim/vim/src/vim.h	/^} assert_type_T;$/;"	t	typeref:enum:__anon244
at_phantom	vim/vim/src/libvterm/src/vterm_internal.h	/^  int at_phantom; \/* True if we're on the "81st" phantom column to defer a wraparound *\/$/;"	m	struct:VTermState	access:public
at_start	vim/vim/src/regexp.c	/^     int	at_start;$/;"	m	struct:__anon124	file:	access:public
at_start	vim/vim/src/regexp.c	/^static int	at_start;	\/* True when on the first character *\/$/;"	v	file:
athena_calculate_ins_pos	vim/vim/src/gui_athena.c	/^athena_calculate_ins_pos(Widget widget)$/;"	f	file:	signature:(Widget widget)
athena_calculate_ins_pos	vim/vim/src/gui_athena.c	/^static Cardinal	athena_calculate_ins_pos(Widget);$/;"	p	file:
attachDump	vim/vim/src/gui_motif.c	/^static void attachDump(Widget, char *);$/;"	p	file:	signature:(Widget, char *)
attention_message	vim/vim/src/memline.c	/^attention_message($/;"	f	file:	signature:( buf_T *buf, char_u *fname)
attention_message	vim/vim/src/memline.c	/^static void attention_message(buf_T *buf, char_u *fname);$/;"	p	file:	signature:(buf_T *buf, char_u *fname)
attr	vim/vim/src/message.c	/^    int			attr;$/;"	m	struct:msg_hist	file:	access:public
attr	vim/vim/src/structs.h	/^    int		attr;	\/* attributes to be used for a match *\/$/;"	m	struct:__anon201	access:public
attr_cur	vim/vim/src/structs.h	/^    int		attr_cur; \/* attributes currently active in win_line() *\/$/;"	m	struct:__anon201	access:public
attr_entry	vim/vim/src/structs.h	/^typedef struct attr_entry$/;"	s
attr_entry::__anon175::__anon176::start	vim/vim/src/structs.h	/^	    char_u	    *start;	\/* start escape sequence *\/$/;"	m	struct:attr_entry::__anon175::__anon176	access:public
attr_entry::__anon175::__anon176::stop	vim/vim/src/structs.h	/^	    char_u	    *stop;	\/* stop escape sequence *\/$/;"	m	struct:attr_entry::__anon175::__anon176	access:public
attr_entry::__anon175::__anon177::bg_color	vim/vim/src/structs.h	/^	    short_u	    bg_color;	\/* background color number *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
attr_entry::__anon175::__anon177::bg_rgb	vim/vim/src/structs.h	/^	    guicolor_T	    bg_rgb;	\/* background color RGB *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
attr_entry::__anon175::__anon177::fg_color	vim/vim/src/structs.h	/^	    short_u	    fg_color;	\/* foreground color number *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
attr_entry::__anon175::__anon177::fg_rgb	vim/vim/src/structs.h	/^	    guicolor_T	    fg_rgb;	\/* foreground color RGB *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
attr_entry::__anon175::__anon178::bg_color	vim/vim/src/structs.h	/^	    guicolor_T	    bg_color;	\/* background color handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
attr_entry::__anon175::__anon178::fg_color	vim/vim/src/structs.h	/^	    guicolor_T	    fg_color;	\/* foreground color handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
attr_entry::__anon175::__anon178::font	vim/vim/src/structs.h	/^	    GuiFont	    font;	\/* font handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
attr_entry::__anon175::__anon178::fontset	vim/vim/src/structs.h	/^	    GuiFontset	    fontset;	\/* fontset handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
attr_entry::__anon175::__anon178::sp_color	vim/vim/src/structs.h	/^	    guicolor_T	    sp_color;	\/* special color handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
attr_entry::__anon175::cterm	vim/vim/src/structs.h	/^	} cterm;$/;"	m	union:attr_entry::__anon175	typeref:struct:attr_entry::__anon175::__anon177	access:public
attr_entry::__anon175::gui	vim/vim/src/structs.h	/^	} gui;$/;"	m	union:attr_entry::__anon175	typeref:struct:attr_entry::__anon175::__anon178	access:public
attr_entry::__anon175::term	vim/vim/src/structs.h	/^	} term;$/;"	m	union:attr_entry::__anon175	typeref:struct:attr_entry::__anon175::__anon176	access:public
attr_entry::ae_attr	vim/vim/src/structs.h	/^    short	    ae_attr;		\/* HL_BOLD, etc. *\/$/;"	m	struct:attr_entry	access:public
attr_entry::ae_u	vim/vim/src/structs.h	/^    } ae_u;$/;"	m	struct:attr_entry	typeref:union:attr_entry::__anon175	access:public
attrentry_T	vim/vim/src/structs.h	/^} attrentry_T;$/;"	t	typeref:struct:attr_entry
attrs	vim/vim/src/libvterm/include/vterm.h	/^  VTermScreenCellAttrs attrs;$/;"	m	struct:__anon62	access:public
attrs_differ	vim/vim/src/libvterm/src/screen.c	/^static int attrs_differ(VTermAttrMask attrs, ScreenCell *a, ScreenCell *b)$/;"	f	file:	signature:(VTermAttrMask attrs, ScreenCell *a, ScreenCell *b)
au_cleanup	vim/vim/src/fileio.c	/^au_cleanup(void)$/;"	f	file:	signature:(void)
au_cleanup	vim/vim/src/fileio.c	/^static void au_cleanup(void);$/;"	p	file:	signature:(void)
au_del_group	vim/vim/src/fileio.c	/^au_del_group(char_u *name)$/;"	f	file:	signature:(char_u *name)
au_del_group	vim/vim/src/fileio.c	/^static void au_del_group(char_u *name);$/;"	p	file:	signature:(char_u *name)
au_did_filetype	vim/vim/src/fileio.c	/^static int au_did_filetype INIT(= FALSE);$/;"	v	file:
au_event_disable	vim/vim/src/fileio.c	/^au_event_disable(char *what)$/;"	f	signature:(char *what)
au_event_restore	vim/vim/src/fileio.c	/^au_event_restore(char_u *old_ei)$/;"	f	signature:(char_u *old_ei)
au_exists	vim/vim/src/fileio.c	/^au_exists(char_u *arg)$/;"	f	signature:(char_u *arg)
au_find_group	vim/vim/src/fileio.c	/^au_find_group(char_u *name)$/;"	f	file:	signature:(char_u *name)
au_find_group	vim/vim/src/fileio.c	/^static int au_find_group(char_u *name);$/;"	p	file:	signature:(char_u *name)
au_get_grouparg	vim/vim/src/fileio.c	/^au_get_grouparg(char_u **argp)$/;"	f	file:	signature:(char_u **argp)
au_get_grouparg	vim/vim/src/fileio.c	/^static int au_get_grouparg(char_u **argp);$/;"	p	file:	signature:(char_u **argp)
au_has_group	vim/vim/src/fileio.c	/^au_has_group(char_u *name)$/;"	f	signature:(char_u *name)
au_need_clean	vim/vim/src/fileio.c	/^static int au_need_clean = FALSE;   \/* need to delete marked patterns *\/$/;"	v	file:
au_new_curbuf	vim/vim/src/globals.h	/^EXTERN bufref_T	au_new_curbuf INIT(= {NULL COMMA 0 COMMA 0});$/;"	v
au_new_group	vim/vim/src/fileio.c	/^au_new_group(char_u *name)$/;"	f	file:	signature:(char_u *name)
au_new_group	vim/vim/src/fileio.c	/^static int au_new_group(char_u *name);$/;"	p	file:	signature:(char_u *name)
au_pending_free_buf	vim/vim/src/globals.h	/^EXTERN buf_T	*au_pending_free_buf INIT(= NULL);$/;"	v
au_pending_free_win	vim/vim/src/globals.h	/^EXTERN win_T	*au_pending_free_win INIT(= NULL);$/;"	v
au_remove_cmds	vim/vim/src/fileio.c	/^au_remove_cmds(AutoPat *ap)$/;"	f	file:	signature:(AutoPat *ap)
au_remove_cmds	vim/vim/src/fileio.c	/^static void au_remove_cmds(AutoPat *ap);$/;"	p	file:	signature:(AutoPat *ap)
au_remove_pat	vim/vim/src/fileio.c	/^au_remove_pat(AutoPat *ap)$/;"	f	file:	signature:(AutoPat *ap)
au_remove_pat	vim/vim/src/fileio.c	/^static void au_remove_pat(AutoPat *ap);$/;"	p	file:	signature:(AutoPat *ap)
aubuflocal_remove	vim/vim/src/fileio.c	/^aubuflocal_remove(buf_T *buf)$/;"	f	signature:(buf_T *buf)
aucmd_prepbuf	vim/vim/src/fileio.c	/^aucmd_prepbuf($/;"	f	signature:( aco_save_T *aco, buf_T *buf)
aucmd_restbuf	vim/vim/src/fileio.c	/^aucmd_restbuf($/;"	f	signature:( aco_save_T *aco)
aucmd_win	vim/vim/src/globals.h	/^EXTERN win_T	*aucmd_win;	\/* window used in aucmd_prepbuf() *\/$/;"	v
aucmd_win_used	vim/vim/src/globals.h	/^EXTERN int	aucmd_win_used INIT(= FALSE);	\/* aucmd_win is being used *\/$/;"	v
augroups	vim/vim/src/fileio.c	/^static garray_T augroups = {0, 0, sizeof(char_u *), 10, NULL};$/;"	v	file:
auto	vim/vim/runtime/tutor/tutor.cs	/^      4)  Mám auto,$/;"	p
auto_event	vim/vim/src/vim.h	/^enum auto_event$/;"	g
auto_format	vim/vim/src/edit.c	/^auto_format($/;"	f	signature:( int trailblank, int prev_line)
auto_next_pat	vim/vim/src/fileio.c	/^auto_next_pat($/;"	f	file:	signature:( AutoPatCmd *apc, int stop_at_last)
auto_next_pat	vim/vim/src/fileio.c	/^static void auto_next_pat(AutoPatCmd *apc, int stop_at_last);$/;"	p	file:	signature:(AutoPatCmd *apc, int stop_at_last)
auto_rebind	vim/vim/src/if_py_both.h	/^    int		auto_rebind;$/;"	m	struct:__anon104	access:public
autocmd_blocked	vim/vim/src/fileio.c	/^static int	autocmd_blocked = 0;	\/* block all autocmds *\/$/;"	v	file:
autocmd_bufnr	vim/vim/src/globals.h	/^EXTERN int	autocmd_bufnr INIT(= 0);     \/* fnum for <abuf> on cmdline *\/$/;"	v
autocmd_busy	vim/vim/src/globals.h	/^EXTERN int	autocmd_busy INIT(= FALSE);	\/* Is apply_autocmds() busy? *\/$/;"	v
autocmd_fname	vim/vim/src/globals.h	/^EXTERN char_u	*autocmd_fname INIT(= NULL); \/* fname for <afile> on cmdline *\/$/;"	v
autocmd_fname_full	vim/vim/src/globals.h	/^EXTERN int	autocmd_fname_full;	     \/* autocmd_fname is full path *\/$/;"	v
autocmd_match	vim/vim/src/globals.h	/^EXTERN char_u	*autocmd_match INIT(= NULL); \/* name for <amatch> on cmdline *\/$/;"	v
autocmd_nested	vim/vim/src/fileio.c	/^static int	autocmd_nested = FALSE;$/;"	v	file:
autocmd_no_enter	vim/vim/src/globals.h	/^EXTERN int	autocmd_no_enter INIT(= FALSE); \/* *Enter autocmds disabled *\/$/;"	v
autocmd_no_leave	vim/vim/src/globals.h	/^EXTERN int	autocmd_no_leave INIT(= FALSE); \/* *Leave autocmds disabled *\/$/;"	v
autocmd_supported	vim/vim/src/fileio.c	/^autocmd_supported(char_u *name)$/;"	f	signature:(char_u *name)
autoload_name	vim/vim/src/eval.c	/^autoload_name(char_u *name)$/;"	f	signature:(char_u *name)
autowrap	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int autowrap:1;$/;"	m	struct:VTermState::__anon35	access:public
autowrite	vim/vim/src/ex_cmds2.c	/^autowrite(buf_T *buf, int forceit)$/;"	f	signature:(buf_T *buf, int forceit)
autowrite_all	vim/vim/src/ex_cmds2.c	/^autowrite_all(void)$/;"	f	signature:(void)
available	vim/vim/src/vim.h	/^    int		available;	\/* Is clipboard available? *\/$/;"	m	struct:VimClipboard	access:public
average	vim/vim/src/syntax.c	/^    proftime_T	average;$/;"	m	struct:__anon139	file:	access:public
await_c1	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static void await_c1(int c1)$/;"	f	file:	signature:(int c1)
awkpath	vim/vim/src/Makefile	/^	awkpath=`.\/which.sh nawk` && sed -e "s+\/usr\/bin\/nawk+$$awkpath+" $(TOOLSSOURCE)\/mve.awk >$(DEST_TOOLS)\/mve.awk; if test -z "$$awkpath"; then \\$/;"	m
b	vim/vim/src/regexp.c	/^    int a, b, c;$/;"	m	struct:__anon131	file:	access:public
b0_dirty	vim/vim/src/memline.c	185;"	d	file:
b0_flags	vim/vim/src/memline.c	190;"	d	file:
b0_fname	vim/vim/src/memline.c	/^    char_u	b0_fname[B0_FNAME_SIZE_ORG]; \/* name of file being edited *\/$/;"	m	struct:block0	file:	access:public
b0_hname	vim/vim/src/memline.c	/^    char_u	b0_hname[B0_HNAME_SIZE]; \/* host name (if it has a name) *\/$/;"	m	struct:block0	file:	access:public
b0_id	vim/vim/src/memline.c	/^    char_u	b0_id[2];	\/* id for block 0: BLOCK0_ID0 and BLOCK0_ID1,$/;"	m	struct:block0	file:	access:public
b0_ino	vim/vim/src/memline.c	/^    char_u	b0_ino[4];	\/* inode of b0_fname *\/$/;"	m	struct:block0	file:	access:public
b0_magic_char	vim/vim/src/memline.c	/^    char_u	b0_magic_char;	\/* check for last char *\/$/;"	m	struct:block0	file:	access:public
b0_magic_int	vim/vim/src/memline.c	/^    int		b0_magic_int;	\/* check for byte order of int *\/$/;"	m	struct:block0	file:	access:public
b0_magic_long	vim/vim/src/memline.c	/^    long	b0_magic_long;	\/* check for byte order of long *\/$/;"	m	struct:block0	file:	access:public
b0_magic_short	vim/vim/src/memline.c	/^    short	b0_magic_short;	\/* check for byte order of short *\/$/;"	m	struct:block0	file:	access:public
b0_magic_wrong	vim/vim/src/memline.c	/^b0_magic_wrong(ZERO_BL *b0p)$/;"	f	file:	signature:(ZERO_BL *b0p)
b0_magic_wrong	vim/vim/src/memline.c	/^static int b0_magic_wrong(ZERO_BL *);$/;"	p	file:	signature:(ZERO_BL *)
b0_mtime	vim/vim/src/memline.c	/^    char_u	b0_mtime[4];	\/* last modification time of file *\/$/;"	m	struct:block0	file:	access:public
b0_page_size	vim/vim/src/memline.c	/^    char_u	b0_page_size[4];\/* number of bytes per page *\/$/;"	m	struct:block0	file:	access:public
b0_pid	vim/vim/src/memline.c	/^    char_u	b0_pid[4];	\/* process id of creator (or 0) *\/$/;"	m	struct:block0	file:	access:public
b0_seed	vim/vim/src/memline.c	196;"	d	file:
b0_uname	vim/vim/src/memline.c	/^    char_u	b0_uname[B0_UNAME_SIZE]; \/* name of user (uid if no name) *\/$/;"	m	struct:block0	file:	access:public
b0_version	vim/vim/src/memline.c	/^    char_u	b0_version[10];	\/* Vim version string *\/$/;"	m	struct:block0	file:	access:public
bUserAbort	vim/vim/src/os_mswin.c	/^static int		*bUserAbort = NULL;$/;"	v	file:
b_FSSpec	vim/vim/src/structs.h	/^    FSSpec	b_FSSpec;	\/* MacOS File Identification *\/$/;"	m	struct:file_buffer	access:public
b_bad_char	vim/vim/src/structs.h	/^    int		b_bad_char;	\/* "++bad=" argument when edit started or 0 *\/$/;"	m	struct:file_buffer	access:public
b_bkc_flags	vim/vim/src/structs.h	/^    unsigned	b_bkc_flags;    \/* flags for 'backupcopy' *\/$/;"	m	struct:file_buffer	access:public
b_bufvar	vim/vim/src/structs.h	/^    dictitem_T	b_bufvar;	\/* variable for "b:" Dictionary *\/$/;"	m	struct:file_buffer	access:public
b_cap_prog	vim/vim/src/structs.h	/^    regprog_T	*b_cap_prog;	\/* program for 'spellcapcheck' *\/$/;"	m	struct:__anon200	access:public
b_changed	vim/vim/src/structs.h	/^    int		b_changed;	\/* 'modified': Set to TRUE if something in the$/;"	m	struct:file_buffer	access:public
b_changelist	vim/vim/src/structs.h	/^    pos_T	b_changelist[JUMPLISTSIZE];$/;"	m	struct:file_buffer	access:public
b_changelistlen	vim/vim/src/structs.h	/^    int		b_changelistlen;	\/* number of active entries *\/$/;"	m	struct:file_buffer	access:public
b_chartab	vim/vim/src/structs.h	/^    char_u	b_chartab[32];$/;"	m	struct:file_buffer	access:public
b_cjk	vim/vim/src/structs.h	/^    int		b_cjk;		\/* all CJK letters as OK *\/$/;"	m	struct:__anon200	access:public
b_cryptstate	vim/vim/src/structs.h	/^    cryptstate_T *b_cryptstate;	\/* Encryption state while reading or writing$/;"	m	struct:file_buffer	access:public
b_ct_di	vim/vim/src/structs.h	/^    dictitem16_T b_ct_di;	\/* holds the b:changedtick value in$/;"	m	struct:file_buffer	access:public
b_dev	vim/vim/src/structs.h	/^    dev_t	b_dev;		\/* device number *\/$/;"	m	struct:file_buffer	access:public
b_dev_valid	vim/vim/src/structs.h	/^    int		b_dev_valid;	\/* TRUE when b_dev has a valid number *\/$/;"	m	struct:file_buffer	access:public
b_did_warn	vim/vim/src/structs.h	/^    int		b_did_warn;	\/* Set to 1 if user has been warned on first$/;"	m	struct:file_buffer	access:public
b_fab_mrs	vim/vim/src/structs.h	/^    unsigned int b_fab_mrs;	\/* Max record size  *\/$/;"	m	struct:file_buffer	access:public
b_fab_rat	vim/vim/src/structs.h	/^    char	 b_fab_rat;	\/* Record attribute *\/$/;"	m	struct:file_buffer	access:public
b_fab_rfm	vim/vim/src/structs.h	/^    char	 b_fab_rfm;	\/* Record format    *\/$/;"	m	struct:file_buffer	access:public
b_ffname	vim/vim/src/structs.h	/^    char_u	*b_ffname;	\/* full path file name *\/$/;"	m	struct:file_buffer	access:public
b_first_abbr	vim/vim/src/structs.h	/^    mapblock_T	*b_first_abbr;$/;"	m	struct:file_buffer	access:public
b_flags	vim/vim/src/structs.h	/^    int		b_flags;	\/* various BF_ flags *\/$/;"	m	struct:file_buffer	access:public
b_fname	vim/vim/src/structs.h	/^    char_u	*b_fname;	\/* current file name *\/$/;"	m	struct:file_buffer	access:public
b_fnum	vim/vim/src/structs.h	/^    int		b_fnum;		\/* buffer number for this file. *\/$/;"	m	struct:file_buffer	access:public
b_has_qf_entry	vim/vim/src/structs.h	/^    int		b_has_qf_entry;$/;"	m	struct:file_buffer	access:public
b_has_sign_column	vim/vim/src/structs.h	/^    int		b_has_sign_column; \/* Flag that is set when a first sign is$/;"	m	struct:file_buffer	access:public
b_help	vim/vim/src/structs.h	/^    int		b_help;		\/* TRUE for help file buffer (when set b_p_bt$/;"	m	struct:file_buffer	access:public
b_ind_case	vim/vim/src/structs.h	/^    int		b_ind_case;$/;"	m	struct:file_buffer	access:public
b_ind_case_break	vim/vim/src/structs.h	/^    int		b_ind_case_break;$/;"	m	struct:file_buffer	access:public
b_ind_case_code	vim/vim/src/structs.h	/^    int		b_ind_case_code;$/;"	m	struct:file_buffer	access:public
b_ind_close_extra	vim/vim/src/structs.h	/^    int		b_ind_close_extra;$/;"	m	struct:file_buffer	access:public
b_ind_comment	vim/vim/src/structs.h	/^    int		b_ind_comment;$/;"	m	struct:file_buffer	access:public
b_ind_continuation	vim/vim/src/structs.h	/^    int		b_ind_continuation;$/;"	m	struct:file_buffer	access:public
b_ind_cpp_baseclass	vim/vim/src/structs.h	/^    int		b_ind_cpp_baseclass;$/;"	m	struct:file_buffer	access:public
b_ind_cpp_extern_c	vim/vim/src/structs.h	/^    int		b_ind_cpp_extern_c;$/;"	m	struct:file_buffer	access:public
b_ind_cpp_namespace	vim/vim/src/structs.h	/^    int		b_ind_cpp_namespace;$/;"	m	struct:file_buffer	access:public
b_ind_first_open	vim/vim/src/structs.h	/^    int		b_ind_first_open;$/;"	m	struct:file_buffer	access:public
b_ind_func_type	vim/vim/src/structs.h	/^    int		b_ind_func_type;$/;"	m	struct:file_buffer	access:public
b_ind_hash_comment	vim/vim/src/structs.h	/^    int		b_ind_hash_comment;$/;"	m	struct:file_buffer	access:public
b_ind_if_for_while	vim/vim/src/structs.h	/^    int		b_ind_if_for_while;$/;"	m	struct:file_buffer	access:public
b_ind_in_comment	vim/vim/src/structs.h	/^    int		b_ind_in_comment;$/;"	m	struct:file_buffer	access:public
b_ind_in_comment2	vim/vim/src/structs.h	/^    int		b_ind_in_comment2;$/;"	m	struct:file_buffer	access:public
b_ind_java	vim/vim/src/structs.h	/^    int		b_ind_java;$/;"	m	struct:file_buffer	access:public
b_ind_js	vim/vim/src/structs.h	/^    int		b_ind_js;$/;"	m	struct:file_buffer	access:public
b_ind_jump_label	vim/vim/src/structs.h	/^    int		b_ind_jump_label;$/;"	m	struct:file_buffer	access:public
b_ind_keep_case_label	vim/vim/src/structs.h	/^    int		b_ind_keep_case_label;$/;"	m	struct:file_buffer	access:public
b_ind_level	vim/vim/src/structs.h	/^    int		b_ind_level;$/;"	m	struct:file_buffer	access:public
b_ind_matching_paren	vim/vim/src/structs.h	/^    int		b_ind_matching_paren;$/;"	m	struct:file_buffer	access:public
b_ind_maxcomment	vim/vim/src/structs.h	/^    int		b_ind_maxcomment;$/;"	m	struct:file_buffer	access:public
b_ind_maxparen	vim/vim/src/structs.h	/^    int		b_ind_maxparen;$/;"	m	struct:file_buffer	access:public
b_ind_no_brace	vim/vim/src/structs.h	/^    int		b_ind_no_brace;$/;"	m	struct:file_buffer	access:public
b_ind_open_extra	vim/vim/src/structs.h	/^    int		b_ind_open_extra;$/;"	m	struct:file_buffer	access:public
b_ind_open_imag	vim/vim/src/structs.h	/^    int		b_ind_open_imag;$/;"	m	struct:file_buffer	access:public
b_ind_open_left_imag	vim/vim/src/structs.h	/^    int		b_ind_open_left_imag;$/;"	m	struct:file_buffer	access:public
b_ind_param	vim/vim/src/structs.h	/^    int		b_ind_param;$/;"	m	struct:file_buffer	access:public
b_ind_paren_prev	vim/vim/src/structs.h	/^    int		b_ind_paren_prev;$/;"	m	struct:file_buffer	access:public
b_ind_scopedecl	vim/vim/src/structs.h	/^    int		b_ind_scopedecl;$/;"	m	struct:file_buffer	access:public
b_ind_scopedecl_code	vim/vim/src/structs.h	/^    int		b_ind_scopedecl_code;$/;"	m	struct:file_buffer	access:public
b_ind_unclosed	vim/vim/src/structs.h	/^    int		b_ind_unclosed;$/;"	m	struct:file_buffer	access:public
b_ind_unclosed2	vim/vim/src/structs.h	/^    int		b_ind_unclosed2;$/;"	m	struct:file_buffer	access:public
b_ind_unclosed_noignore	vim/vim/src/structs.h	/^    int		b_ind_unclosed_noignore;$/;"	m	struct:file_buffer	access:public
b_ind_unclosed_whiteok	vim/vim/src/structs.h	/^    int		b_ind_unclosed_whiteok;$/;"	m	struct:file_buffer	access:public
b_ind_unclosed_wrapped	vim/vim/src/structs.h	/^    int		b_ind_unclosed_wrapped;$/;"	m	struct:file_buffer	access:public
b_ino	vim/vim/src/structs.h	/^    ino_t	b_ino;		\/* inode number *\/$/;"	m	struct:file_buffer	access:public
b_key	vim/vim/src/structs.h	/^    char_u	b_key[VIM_SIZEOF_INT * 2 + 1];$/;"	m	struct:file_buffer	access:public
b_keywtab	vim/vim/src/structs.h	/^    hashtab_T	b_keywtab;		\/* syntax keywords hash table *\/$/;"	m	struct:__anon200	access:public
b_keywtab_ic	vim/vim/src/structs.h	/^    hashtab_T	b_keywtab_ic;		\/* idem, ignore case *\/$/;"	m	struct:__anon200	access:public
b_kmap_ga	vim/vim/src/structs.h	/^    garray_T	b_kmap_ga;	\/* the keymap table *\/$/;"	m	struct:file_buffer	access:public
b_kmap_state	vim/vim/src/structs.h	/^    short	b_kmap_state;	\/* using "lmap" mappings *\/$/;"	m	struct:file_buffer	access:public
b_langp	vim/vim/src/structs.h	/^    garray_T	b_langp;	\/* list of pointers to slang_T, see spell.c *\/$/;"	m	struct:__anon200	access:public
b_last_change	vim/vim/src/structs.h	/^    pos_T	b_last_change;	\/* position of last change: '. mark *\/$/;"	m	struct:file_buffer	access:public
b_last_cursor	vim/vim/src/structs.h	/^    pos_T	b_last_cursor;	\/* cursor position when last unloading this$/;"	m	struct:file_buffer	access:public
b_last_insert	vim/vim/src/structs.h	/^    pos_T	b_last_insert;	\/* where Insert mode was left *\/$/;"	m	struct:file_buffer	access:public
b_last_used	vim/vim/src/structs.h	/^    time_T	b_last_used;	\/* time when the buffer was last used; used$/;"	m	struct:file_buffer	access:public
b_locked	vim/vim/src/structs.h	/^    int		b_locked;	\/* Buffer is being closed or referenced, don't$/;"	m	struct:file_buffer	access:public
b_maphash	vim/vim/src/structs.h	/^    mapblock_T	*(b_maphash[256]);$/;"	m	struct:file_buffer	access:public
b_mapped_ctrl_c	vim/vim/src/structs.h	/^    int		b_mapped_ctrl_c; \/* modes where CTRL-C is mapped *\/$/;"	m	struct:file_buffer	access:public
b_marks_read	vim/vim/src/structs.h	/^    int		b_marks_read;	\/* Have we read viminfo marks yet? *\/$/;"	m	struct:file_buffer	access:public
b_may_swap	vim/vim/src/structs.h	/^    int		b_may_swap;$/;"	m	struct:file_buffer	access:public
b_ml	vim/vim/src/structs.h	/^    memline_T	b_ml;		\/* associated memline (also contains line$/;"	m	struct:file_buffer	access:public
b_mod_bot	vim/vim/src/structs.h	/^    linenr_T	b_mod_bot;	\/* lnum below last changed line, AFTER the$/;"	m	struct:file_buffer	access:public
b_mod_set	vim/vim/src/structs.h	/^    int		b_mod_set;	\/* TRUE when there are changes since the last$/;"	m	struct:file_buffer	access:public
b_mod_top	vim/vim/src/structs.h	/^    linenr_T	b_mod_top;	\/* topmost lnum that was changed *\/$/;"	m	struct:file_buffer	access:public
b_mod_xlines	vim/vim/src/structs.h	/^    long	b_mod_xlines;	\/* number of extra buffer lines inserted;$/;"	m	struct:file_buffer	access:public
b_mtime	vim/vim/src/structs.h	/^    long	b_mtime;	\/* last change time of original file *\/$/;"	m	struct:file_buffer	access:public
b_mtime_read	vim/vim/src/structs.h	/^    long	b_mtime_read;	\/* last change time when reading *\/$/;"	m	struct:file_buffer	access:public
b_mzscheme_ref	vim/vim/src/structs.h	/^    void	*b_mzscheme_ref; \/* The MzScheme reference to this buffer *\/$/;"	m	struct:file_buffer	access:public
b_namedm	vim/vim/src/structs.h	/^    pos_T	b_namedm[NMARKS]; \/* current named marks (mark.c) *\/$/;"	m	struct:file_buffer	access:public
b_netbeans_file	vim/vim/src/structs.h	/^    int		b_netbeans_file;    \/* TRUE when buffer is owned by NetBeans *\/$/;"	m	struct:file_buffer	access:public
b_new_change	vim/vim/src/structs.h	/^    int		b_new_change;		\/* set by u_savecommon() *\/$/;"	m	struct:file_buffer	access:public
b_next	vim/vim/src/structs.h	/^    buf_T	*b_next;	\/* links in list of buffers *\/$/;"	m	struct:file_buffer	access:public
b_next	vim/vim/src/structs.h	/^    buffblock_T	*b_next;	\/* pointer to next buffblock *\/$/;"	m	struct:buffblock	access:public
b_no_eol_lnum	vim/vim/src/structs.h	/^    linenr_T	b_no_eol_lnum;	\/* non-zero lnum when last line of next binary$/;"	m	struct:file_buffer	access:public
b_nospell_cluster_id	vim/vim/src/structs.h	/^    int		b_nospell_cluster_id;	\/* @NoSpell cluster ID or 0 *\/$/;"	m	struct:__anon200	access:public
b_nwindows	vim/vim/src/structs.h	/^    int		b_nwindows;	\/* nr of windows open on this buffer *\/$/;"	m	struct:file_buffer	access:public
b_op_end	vim/vim/src/structs.h	/^    pos_T	b_op_end;$/;"	m	struct:file_buffer	access:public
b_op_start	vim/vim/src/structs.h	/^    pos_T	b_op_start;$/;"	m	struct:file_buffer	access:public
b_op_start_orig	vim/vim/src/structs.h	/^    pos_T	b_op_start_orig;  \/* used for Insstart_orig *\/$/;"	m	struct:file_buffer	access:public
b_orig_mode	vim/vim/src/structs.h	/^    int		b_orig_mode;	\/* mode of original file *\/$/;"	m	struct:file_buffer	access:public
b_orig_size	vim/vim/src/structs.h	/^    off_T	b_orig_size;	\/* size of original file in bytes *\/$/;"	m	struct:file_buffer	access:public
b_p_ai	vim/vim/src/structs.h	/^    int		b_p_ai;		\/* 'autoindent' *\/$/;"	m	struct:file_buffer	access:public
b_p_ai_nopaste	vim/vim/src/structs.h	/^    int		b_p_ai_nopaste;	\/* b_p_ai saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
b_p_ar	vim/vim/src/structs.h	/^    int		b_p_ar;		\/* 'autoread' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_bexpr	vim/vim/src/structs.h	/^    char_u	*b_p_bexpr;	\/* 'balloonexpr' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_bexpr_flags	vim/vim/src/structs.h	/^    long_u	b_p_bexpr_flags;\/* flags for 'balloonexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_bh	vim/vim/src/structs.h	/^    char_u	*b_p_bh;	\/* 'bufhidden' *\/$/;"	m	struct:file_buffer	access:public
b_p_bin	vim/vim/src/structs.h	/^    int		b_p_bin;	\/* 'binary' *\/$/;"	m	struct:file_buffer	access:public
b_p_bkc	vim/vim/src/structs.h	/^    char_u	*b_p_bkc;	\/* 'backupcopy' *\/$/;"	m	struct:file_buffer	access:public
b_p_bl	vim/vim/src/structs.h	/^    int		b_p_bl;		\/* 'buflisted' *\/$/;"	m	struct:file_buffer	access:public
b_p_bomb	vim/vim/src/structs.h	/^    int		b_p_bomb;	\/* 'bomb' *\/$/;"	m	struct:file_buffer	access:public
b_p_bt	vim/vim/src/structs.h	/^    char_u	*b_p_bt;	\/* 'buftype' *\/$/;"	m	struct:file_buffer	access:public
b_p_cfu	vim/vim/src/structs.h	/^    char_u	*b_p_cfu;	\/* 'completefunc' *\/$/;"	m	struct:file_buffer	access:public
b_p_ci	vim/vim/src/structs.h	/^    int		b_p_ci;		\/* 'copyindent' *\/$/;"	m	struct:file_buffer	access:public
b_p_cin	vim/vim/src/structs.h	/^    int		b_p_cin;	\/* 'cindent' *\/$/;"	m	struct:file_buffer	access:public
b_p_cink	vim/vim/src/structs.h	/^    char_u	*b_p_cink;	\/* 'cinkeys' *\/$/;"	m	struct:file_buffer	access:public
b_p_cino	vim/vim/src/structs.h	/^    char_u	*b_p_cino;	\/* 'cinoptions' *\/$/;"	m	struct:file_buffer	access:public
b_p_cinw	vim/vim/src/structs.h	/^    char_u	*b_p_cinw;	\/* 'cinwords' *\/$/;"	m	struct:file_buffer	access:public
b_p_cm	vim/vim/src/structs.h	/^    char_u	*b_p_cm;	\/* 'cryptmethod' *\/$/;"	m	struct:file_buffer	access:public
b_p_cms	vim/vim/src/structs.h	/^    char_u	*b_p_cms;	\/* 'commentstring' *\/$/;"	m	struct:file_buffer	access:public
b_p_com	vim/vim/src/structs.h	/^    char_u	*b_p_com;	\/* 'comments' *\/$/;"	m	struct:file_buffer	access:public
b_p_cpt	vim/vim/src/structs.h	/^    char_u	*b_p_cpt;	\/* 'complete' *\/$/;"	m	struct:file_buffer	access:public
b_p_def	vim/vim/src/structs.h	/^    char_u	*b_p_def;	\/* 'define' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_dict	vim/vim/src/structs.h	/^    char_u	*b_p_dict;	\/* 'dictionary' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_efm	vim/vim/src/structs.h	/^    char_u	*b_p_efm;	\/* 'errorformat' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_eol	vim/vim/src/structs.h	/^    int		b_p_eol;	\/* 'endofline' *\/$/;"	m	struct:file_buffer	access:public
b_p_ep	vim/vim/src/structs.h	/^    char_u	*b_p_ep;	\/* 'equalprg' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_et	vim/vim/src/structs.h	/^    int		b_p_et;		\/* 'expandtab' *\/$/;"	m	struct:file_buffer	access:public
b_p_et_nobin	vim/vim/src/structs.h	/^    int		b_p_et_nobin;	\/* b_p_et saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
b_p_et_nopaste	vim/vim/src/structs.h	/^    int	        b_p_et_nopaste; \/* b_p_et saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
b_p_fenc	vim/vim/src/structs.h	/^    char_u	*b_p_fenc;	\/* 'fileencoding' *\/$/;"	m	struct:file_buffer	access:public
b_p_fex	vim/vim/src/structs.h	/^    char_u	*b_p_fex;	\/* 'formatexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_fex_flags	vim/vim/src/structs.h	/^    long_u	b_p_fex_flags;	\/* flags for 'formatexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_ff	vim/vim/src/structs.h	/^    char_u	*b_p_ff;	\/* 'fileformat' *\/$/;"	m	struct:file_buffer	access:public
b_p_fixeol	vim/vim/src/structs.h	/^    int		b_p_fixeol;	\/* 'fixendofline' *\/$/;"	m	struct:file_buffer	access:public
b_p_flp	vim/vim/src/structs.h	/^    char_u	*b_p_flp;	\/* 'formatlistpat' *\/$/;"	m	struct:file_buffer	access:public
b_p_fo	vim/vim/src/structs.h	/^    char_u	*b_p_fo;	\/* 'formatoptions' *\/$/;"	m	struct:file_buffer	access:public
b_p_fp	vim/vim/src/structs.h	/^    char_u	*b_p_fp;	\/* 'formatprg' *\/$/;"	m	struct:file_buffer	access:public
b_p_ft	vim/vim/src/structs.h	/^    char_u	*b_p_ft;	\/* 'filetype' *\/$/;"	m	struct:file_buffer	access:public
b_p_gp	vim/vim/src/structs.h	/^    char_u	*b_p_gp;	\/* 'grepprg' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_iminsert	vim/vim/src/structs.h	/^    long	b_p_iminsert;	\/* input mode for insert *\/$/;"	m	struct:file_buffer	access:public
b_p_imsearch	vim/vim/src/structs.h	/^    long	b_p_imsearch;	\/* input mode for search *\/$/;"	m	struct:file_buffer	access:public
b_p_inc	vim/vim/src/structs.h	/^    char_u	*b_p_inc;	\/* 'include' *\/$/;"	m	struct:file_buffer	access:public
b_p_inde	vim/vim/src/structs.h	/^    char_u	*b_p_inde;	\/* 'indentexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_inde_flags	vim/vim/src/structs.h	/^    long_u	b_p_inde_flags;	\/* flags for 'indentexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_indk	vim/vim/src/structs.h	/^    char_u	*b_p_indk;	\/* 'indentkeys' *\/$/;"	m	struct:file_buffer	access:public
b_p_inex	vim/vim/src/structs.h	/^    char_u	*b_p_inex;	\/* 'includeexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_inex_flags	vim/vim/src/structs.h	/^    long_u	b_p_inex_flags;	\/* flags for 'includeexpr' *\/$/;"	m	struct:file_buffer	access:public
b_p_inf	vim/vim/src/structs.h	/^    int		b_p_inf;	\/* 'infercase' *\/$/;"	m	struct:file_buffer	access:public
b_p_initialized	vim/vim/src/structs.h	/^    int		b_p_initialized;	\/* set when options initialized *\/$/;"	m	struct:file_buffer	access:public
b_p_isk	vim/vim/src/structs.h	/^    char_u	*b_p_isk;	\/* 'iskeyword' *\/$/;"	m	struct:file_buffer	access:public
b_p_key	vim/vim/src/structs.h	/^    char_u	*b_p_key;	\/* 'key' *\/$/;"	m	struct:file_buffer	access:public
b_p_keymap	vim/vim/src/structs.h	/^    char_u	*b_p_keymap;	\/* 'keymap' *\/$/;"	m	struct:file_buffer	access:public
b_p_kp	vim/vim/src/structs.h	/^    char_u	*b_p_kp;	\/* 'keywordprg' *\/$/;"	m	struct:file_buffer	access:public
b_p_lisp	vim/vim/src/structs.h	/^    int		b_p_lisp;	\/* 'lisp' *\/$/;"	m	struct:file_buffer	access:public
b_p_lw	vim/vim/src/structs.h	/^    char_u	*b_p_lw;	\/* 'lispwords' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_ma	vim/vim/src/structs.h	/^    int		b_p_ma;		\/* 'modifiable' *\/$/;"	m	struct:file_buffer	access:public
b_p_menc	vim/vim/src/structs.h	/^    char_u	*b_p_menc;	\/* 'makeencoding' *\/$/;"	m	struct:file_buffer	access:public
b_p_ml	vim/vim/src/structs.h	/^    int		b_p_ml;		\/* 'modeline' *\/$/;"	m	struct:file_buffer	access:public
b_p_ml_nobin	vim/vim/src/structs.h	/^    int		b_p_ml_nobin;	\/* b_p_ml saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
b_p_mp	vim/vim/src/structs.h	/^    char_u	*b_p_mp;	\/* 'makeprg' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_mps	vim/vim/src/structs.h	/^    char_u	*b_p_mps;	\/* 'matchpairs' *\/$/;"	m	struct:file_buffer	access:public
b_p_nf	vim/vim/src/structs.h	/^    char_u	*b_p_nf;	\/* 'nrformats' *\/$/;"	m	struct:file_buffer	access:public
b_p_ofu	vim/vim/src/structs.h	/^    char_u	*b_p_ofu;	\/* 'omnifunc' *\/$/;"	m	struct:file_buffer	access:public
b_p_path	vim/vim/src/structs.h	/^    char_u	*b_p_path;	\/* 'path' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_pi	vim/vim/src/structs.h	/^    int		b_p_pi;		\/* 'preserveindent' *\/$/;"	m	struct:file_buffer	access:public
b_p_qe	vim/vim/src/structs.h	/^    char_u	*b_p_qe;	\/* 'quoteescape' *\/$/;"	m	struct:file_buffer	access:public
b_p_ro	vim/vim/src/structs.h	/^    int		b_p_ro;		\/* 'readonly' *\/$/;"	m	struct:file_buffer	access:public
b_p_scriptID	vim/vim/src/structs.h	/^    int		b_p_scriptID[BV_COUNT];	\/* SIDs for buffer-local options *\/$/;"	m	struct:file_buffer	access:public
b_p_si	vim/vim/src/structs.h	/^    int		b_p_si;		\/* 'smartindent' *\/$/;"	m	struct:file_buffer	access:public
b_p_smc	vim/vim/src/structs.h	/^    long	b_p_smc;	\/* 'synmaxcol' *\/$/;"	m	struct:file_buffer	access:public
b_p_sn	vim/vim/src/structs.h	/^    int		b_p_sn;		\/* 'shortname' *\/$/;"	m	struct:file_buffer	access:public
b_p_spc	vim/vim/src/structs.h	/^    char_u	*b_p_spc;	\/* 'spellcapcheck' *\/$/;"	m	struct:__anon200	access:public
b_p_spf	vim/vim/src/structs.h	/^    char_u	*b_p_spf;	\/* 'spellfile' *\/$/;"	m	struct:__anon200	access:public
b_p_spl	vim/vim/src/structs.h	/^    char_u	*b_p_spl;	\/* 'spelllang' *\/$/;"	m	struct:__anon200	access:public
b_p_sts	vim/vim/src/structs.h	/^    long	b_p_sts;	\/* 'softtabstop' *\/$/;"	m	struct:file_buffer	access:public
b_p_sts_nopaste	vim/vim/src/structs.h	/^    long	b_p_sts_nopaste; \/* b_p_sts saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
b_p_sua	vim/vim/src/structs.h	/^    char_u	*b_p_sua;	\/* 'suffixesadd' *\/$/;"	m	struct:file_buffer	access:public
b_p_sw	vim/vim/src/structs.h	/^    long	b_p_sw;		\/* 'shiftwidth' *\/$/;"	m	struct:file_buffer	access:public
b_p_swf	vim/vim/src/structs.h	/^    int		b_p_swf;	\/* 'swapfile' *\/$/;"	m	struct:file_buffer	access:public
b_p_syn	vim/vim/src/structs.h	/^    char_u	*b_p_syn;	\/* 'syntax' *\/$/;"	m	struct:file_buffer	access:public
b_p_tags	vim/vim/src/structs.h	/^    char_u	*b_p_tags;	\/* 'tags' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_tc	vim/vim/src/structs.h	/^    char_u	*b_p_tc;	\/* 'tagcase' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_ts	vim/vim/src/structs.h	/^    long	b_p_ts;		\/* 'tabstop' *\/$/;"	m	struct:file_buffer	access:public
b_p_tsr	vim/vim/src/structs.h	/^    char_u	*b_p_tsr;	\/* 'thesaurus' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_tw	vim/vim/src/structs.h	/^    long	b_p_tw;		\/* 'textwidth' *\/$/;"	m	struct:file_buffer	access:public
b_p_tw_nobin	vim/vim/src/structs.h	/^    long	b_p_tw_nobin;	\/* b_p_tw saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
b_p_tw_nopaste	vim/vim/src/structs.h	/^    long	b_p_tw_nopaste;	\/* b_p_tw saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
b_p_tx	vim/vim/src/structs.h	/^    int		b_p_tx;		\/* 'textmode' *\/$/;"	m	struct:file_buffer	access:public
b_p_udf	vim/vim/src/structs.h	/^    int		b_p_udf;	\/* 'undofile' *\/$/;"	m	struct:file_buffer	access:public
b_p_ul	vim/vim/src/structs.h	/^    long	b_p_ul;		\/* 'undolevels' local value *\/$/;"	m	struct:file_buffer	access:public
b_p_wm	vim/vim/src/structs.h	/^    long	b_p_wm;		\/* 'wrapmargin' *\/$/;"	m	struct:file_buffer	access:public
b_p_wm_nobin	vim/vim/src/structs.h	/^    long	b_p_wm_nobin;	\/* b_p_wm saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
b_p_wm_nopaste	vim/vim/src/structs.h	/^    long	b_p_wm_nopaste;	\/* b_p_wm saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
b_perl_private	vim/vim/src/structs.h	/^    void	*b_perl_private;$/;"	m	struct:file_buffer	access:public
b_prev	vim/vim/src/structs.h	/^    buf_T	*b_prev;$/;"	m	struct:file_buffer	access:public
b_python3_ref	vim/vim/src/structs.h	/^    void	*b_python3_ref;	\/* The Python3 reference to this buffer *\/$/;"	m	struct:file_buffer	access:public
b_python_ref	vim/vim/src/structs.h	/^    void	*b_python_ref;	\/* The Python reference to this buffer *\/$/;"	m	struct:file_buffer	access:public
b_ruby_ref	vim/vim/src/structs.h	/^    void	*b_ruby_ref;$/;"	m	struct:file_buffer	access:public
b_s	vim/vim/src/structs.h	/^    synblock_T	b_s;		\/* Info related to syntax highlighting.  w_s$/;"	m	struct:file_buffer	access:public
b_saving	vim/vim/src/structs.h	/^    int		b_saving;	\/* Set to TRUE if we are in the middle of$/;"	m	struct:file_buffer	access:public
b_scanned	vim/vim/src/structs.h	/^    int		b_scanned;	\/* ^N\/^P have scanned this buffer *\/$/;"	m	struct:file_buffer	access:public
b_sfname	vim/vim/src/structs.h	/^    char_u	*b_sfname;	\/* short file name *\/$/;"	m	struct:file_buffer	access:public
b_shortname	vim/vim/src/structs.h	/^    int		b_shortname;	\/* this file has an 8.3 file name *\/$/;"	m	struct:file_buffer	access:public
b_signlist	vim/vim/src/structs.h	/^    signlist_T	*b_signlist;	\/* list of signs to draw *\/$/;"	m	struct:file_buffer	access:public
b_spell	vim/vim/src/structs.h	/^    int		b_spell;	\/* TRUE for a spell file buffer, most fields$/;"	m	struct:file_buffer	access:public
b_spell_cluster_id	vim/vim/src/structs.h	/^    int		b_spell_cluster_id;	\/* @Spell cluster ID or 0 *\/$/;"	m	struct:__anon200	access:public
b_spell_ismw	vim/vim/src/structs.h	/^    char_u	b_spell_ismw[256];\/* flags: is midword char *\/$/;"	m	struct:__anon200	access:public
b_spell_ismw_mb	vim/vim/src/structs.h	/^    char_u	*b_spell_ismw_mb; \/* multi-byte midword chars *\/$/;"	m	struct:__anon200	access:public
b_sst_array	vim/vim/src/structs.h	/^    synstate_T	*b_sst_array;$/;"	m	struct:__anon200	access:public
b_sst_check_lnum	vim/vim/src/structs.h	/^    linenr_T	b_sst_check_lnum;$/;"	m	struct:__anon200	access:public
b_sst_first	vim/vim/src/structs.h	/^    synstate_T	*b_sst_first;$/;"	m	struct:__anon200	access:public
b_sst_firstfree	vim/vim/src/structs.h	/^    synstate_T	*b_sst_firstfree;$/;"	m	struct:__anon200	access:public
b_sst_freecount	vim/vim/src/structs.h	/^    int		b_sst_freecount;$/;"	m	struct:__anon200	access:public
b_sst_lasttick	vim/vim/src/structs.h	/^    short_u	b_sst_lasttick;	\/* last display tick *\/$/;"	m	struct:__anon200	access:public
b_sst_len	vim/vim/src/structs.h	/^    int		b_sst_len;$/;"	m	struct:__anon200	access:public
b_start_bomb	vim/vim/src/structs.h	/^    int		b_start_bomb;	\/* 'bomb' when it was read *\/$/;"	m	struct:file_buffer	access:public
b_start_eol	vim/vim/src/structs.h	/^    int		b_start_eol;	\/* last line had eol when it was read *\/$/;"	m	struct:file_buffer	access:public
b_start_fenc	vim/vim/src/structs.h	/^    char_u	*b_start_fenc;	\/* 'fileencoding' when edit started or NULL *\/$/;"	m	struct:file_buffer	access:public
b_start_ffc	vim/vim/src/structs.h	/^    int		b_start_ffc;	\/* first char of 'ff' when edit started *\/$/;"	m	struct:file_buffer	access:public
b_str	vim/vim/src/structs.h	/^    char_u	b_str[1];	\/* contents (actually longer) *\/$/;"	m	struct:buffblock	access:public
b_syn_chartab	vim/vim/src/structs.h	/^    char_u	b_syn_chartab[32];	\/* syntax iskeyword option *\/$/;"	m	struct:__anon200	access:public
b_syn_clusters	vim/vim/src/structs.h	/^    garray_T	b_syn_clusters;		\/* table for syntax clusters *\/$/;"	m	struct:__anon200	access:public
b_syn_conceal	vim/vim/src/structs.h	/^    int		b_syn_conceal;		\/* auto-conceal for :syn cmds *\/$/;"	m	struct:__anon200	access:public
b_syn_containedin	vim/vim/src/structs.h	/^    int		b_syn_containedin;	\/* TRUE when there is an item with a$/;"	m	struct:__anon200	access:public
b_syn_error	vim/vim/src/structs.h	/^    int		b_syn_error;		\/* TRUE when error occurred in HL *\/$/;"	m	struct:__anon200	access:public
b_syn_folditems	vim/vim/src/structs.h	/^    int		b_syn_folditems;	\/* number of patterns with the HL_FOLD$/;"	m	struct:__anon200	access:public
b_syn_ic	vim/vim/src/structs.h	/^    int		b_syn_ic;		\/* ignore case for :syn cmds *\/$/;"	m	struct:__anon200	access:public
b_syn_isk	vim/vim/src/structs.h	/^    char_u	*b_syn_isk;		\/* iskeyword option *\/$/;"	m	struct:__anon200	access:public
b_syn_linecont_ic	vim/vim/src/structs.h	/^    int		b_syn_linecont_ic;	\/* ignore-case flag for above *\/$/;"	m	struct:__anon200	access:public
b_syn_linecont_pat	vim/vim/src/structs.h	/^    char_u	*b_syn_linecont_pat;	\/* line continuation pattern *\/$/;"	m	struct:__anon200	access:public
b_syn_linecont_prog	vim/vim/src/structs.h	/^    regprog_T	*b_syn_linecont_prog;	\/* line continuation program *\/$/;"	m	struct:__anon200	access:public
b_syn_linecont_time	vim/vim/src/structs.h	/^    syn_time_T  b_syn_linecont_time;$/;"	m	struct:__anon200	access:public
b_syn_patterns	vim/vim/src/structs.h	/^    garray_T	b_syn_patterns;		\/* table for syntax patterns *\/$/;"	m	struct:__anon200	access:public
b_syn_slow	vim/vim/src/structs.h	/^    int		b_syn_slow;		\/* TRUE when 'redrawtime' reached *\/$/;"	m	struct:__anon200	access:public
b_syn_spell	vim/vim/src/structs.h	/^    int		b_syn_spell;		\/* SYNSPL_ values *\/$/;"	m	struct:__anon200	access:public
b_syn_sync_flags	vim/vim/src/structs.h	/^    int		b_syn_sync_flags;	\/* flags about how to sync *\/$/;"	m	struct:__anon200	access:public
b_syn_sync_id	vim/vim/src/structs.h	/^    short	b_syn_sync_id;		\/* group to sync on *\/$/;"	m	struct:__anon200	access:public
b_syn_sync_linebreaks	vim/vim/src/structs.h	/^    long	b_syn_sync_linebreaks;	\/* offset for multi-line pattern *\/$/;"	m	struct:__anon200	access:public
b_syn_sync_maxlines	vim/vim/src/structs.h	/^    long	b_syn_sync_maxlines;	\/* maximal sync lines offset *\/$/;"	m	struct:__anon200	access:public
b_syn_sync_minlines	vim/vim/src/structs.h	/^    long	b_syn_sync_minlines;	\/* minimal sync lines offset *\/$/;"	m	struct:__anon200	access:public
b_syn_topgrp	vim/vim/src/structs.h	/^    int		b_syn_topgrp;		\/* for ":syntax include" *\/$/;"	m	struct:__anon200	access:public
b_tc_flags	vim/vim/src/structs.h	/^    unsigned	b_tc_flags;     \/* flags for 'tagcase' *\/$/;"	m	struct:file_buffer	access:public
b_tcl_ref	vim/vim/src/structs.h	/^    void	*b_tcl_ref;$/;"	m	struct:file_buffer	access:public
b_term	vim/vim/src/structs.h	/^    term_T	*b_term;	\/* When not NULL this buffer is for a terminal$/;"	m	struct:file_buffer	access:public
b_u_curhead	vim/vim/src/structs.h	/^    u_header_T	*b_u_curhead;	\/* pointer to current header *\/$/;"	m	struct:file_buffer	access:public
b_u_line_colnr	vim/vim/src/structs.h	/^    colnr_T	b_u_line_colnr;	\/* optional column number *\/$/;"	m	struct:file_buffer	access:public
b_u_line_lnum	vim/vim/src/structs.h	/^    linenr_T	b_u_line_lnum;	\/* line number of line in u_line *\/$/;"	m	struct:file_buffer	access:public
b_u_line_ptr	vim/vim/src/structs.h	/^    char_u	*b_u_line_ptr;	\/* saved line for "U" command *\/$/;"	m	struct:file_buffer	access:public
b_u_newhead	vim/vim/src/structs.h	/^    u_header_T	*b_u_newhead;	\/* pointer to newest header; may not be valid$/;"	m	struct:file_buffer	access:public
b_u_numhead	vim/vim/src/structs.h	/^    int		b_u_numhead;	\/* current number of headers *\/$/;"	m	struct:file_buffer	access:public
b_u_oldhead	vim/vim/src/structs.h	/^    u_header_T	*b_u_oldhead;	\/* pointer to oldest header *\/$/;"	m	struct:file_buffer	access:public
b_u_save_nr_cur	vim/vim/src/structs.h	/^    long	b_u_save_nr_cur; \/* file write nr after which we are now *\/$/;"	m	struct:file_buffer	access:public
b_u_save_nr_last	vim/vim/src/structs.h	/^    long	b_u_save_nr_last; \/* counter for last file write *\/$/;"	m	struct:file_buffer	access:public
b_u_seq_cur	vim/vim/src/structs.h	/^    long	b_u_seq_cur;	\/* hu_seq of header below which we are now *\/$/;"	m	struct:file_buffer	access:public
b_u_seq_last	vim/vim/src/structs.h	/^    long	b_u_seq_last;	\/* last used undo sequence number *\/$/;"	m	struct:file_buffer	access:public
b_u_synced	vim/vim/src/structs.h	/^    int		b_u_synced;	\/* entry lists are synced *\/$/;"	m	struct:file_buffer	access:public
b_u_time_cur	vim/vim/src/structs.h	/^    time_T	b_u_time_cur;	\/* uh_time of header below which we are now *\/$/;"	m	struct:file_buffer	access:public
b_ucmds	vim/vim/src/structs.h	/^    garray_T	b_ucmds;$/;"	m	struct:file_buffer	access:public
b_vars	vim/vim/src/structs.h	/^    dict_T	*b_vars;	\/* internal variables, local to buffer *\/$/;"	m	struct:file_buffer	access:public
b_visual	vim/vim/src/structs.h	/^    visualinfo_T b_visual;$/;"	m	struct:file_buffer	access:public
b_visual_mode_eval	vim/vim/src/structs.h	/^    int		b_visual_mode_eval;  \/* b_visual.vi_mode for visualmode() *\/$/;"	m	struct:file_buffer	access:public
b_was_netbeans_file	vim/vim/src/structs.h	/^    int		b_was_netbeans_file;\/* TRUE if b_netbeans_file was once set *\/$/;"	m	struct:file_buffer	access:public
b_wininfo	vim/vim/src/structs.h	/^    wininfo_T	*b_wininfo;	\/* list of last used info for each window *\/$/;"	m	struct:file_buffer	access:public
b_write_to_channel	vim/vim/src/structs.h	/^    int		b_write_to_channel; \/* TRUE when appended lines are written to$/;"	m	struct:file_buffer	access:public
back_gc	vim/vim/src/gui.h	/^    GC		back_gc;$/;"	m	struct:Gui	access:public
back_in_line	vim/vim/src/search.c	/^back_in_line(void)$/;"	f	file:	signature:(void)
back_in_line	vim/vim/src/search.c	/^static void back_in_line(void);$/;"	p	file:	signature:(void)
back_pixel	vim/vim/src/gui.h	/^    guicolor_T	back_pixel;	    \/* Color of background *\/$/;"	m	struct:Gui	access:public
background	vim/vim/src/libvterm/t/harness.c	/^  VTermColor background;$/;"	m	struct:__anon42	file:	access:public
background_argument	vim/vim/src/globals.h	/^EXTERN char	*background_argument INIT(= NULL);$/;"	v
backpos	vim/vim/src/regexp.c	/^static garray_T	backpos = {0, 0, 0, 0, NULL};$/;"	v	file:
backpos_S	vim/vim/src/regexp.c	/^typedef struct backpos_S$/;"	s	file:
backpos_S::bp_pos	vim/vim/src/regexp.c	/^    regsave_T	bp_pos;		\/* last input position *\/$/;"	m	struct:backpos_S	file:	access:public
backpos_S::bp_scan	vim/vim/src/regexp.c	/^    char_u	*bp_scan;	\/* "scan" where BACK was encountered *\/$/;"	m	struct:backpos_S	file:	access:public
backpos_T	vim/vim/src/regexp.c	/^} backpos_T;$/;"	t	typeref:struct:backpos_S	file:
backslash_halve	vim/vim/src/charset.c	/^backslash_halve(char_u *p)$/;"	f	signature:(char_u *p)
backslash_halve_save	vim/vim/src/charset.c	/^backslash_halve_save(char_u *p)$/;"	f	signature:(char_u *p)
backslash_trans	vim/vim/src/regexp.c	/^backslash_trans(int c)$/;"	f	file:	signature:(int c)
backslash_trans	vim/vim/src/regexp.c	/^static int	backslash_trans(int c);$/;"	p	file:	signature:(int c)
backspace_until_column	vim/vim/src/edit.c	/^backspace_until_column(int col)$/;"	f	signature:(int col)
bad_char	vim/vim/src/ex_cmds.h	/^    int		bad_char;	\/* BAD_KEEP, BAD_DROP or replacement byte *\/$/;"	m	struct:exarg	access:public
bad_param_handler	vim/vim/src/os_win32.c	/^bad_param_handler(const wchar_t *expression,$/;"	f	file:	signature:(const wchar_t *expression, const wchar_t *function, const wchar_t *file, unsigned int line, uintptr_t pReserved)
badcryptxt	vim/vim/src/blowfish.c	/^    char_u   badcryptxt[9]; \/* cryptxt when big\/little endian is wrong *\/$/;"	m	struct:__anon73	file:	access:public
badi	vim/vim/src/spell.c	/^    int		badi;$/;"	m	struct:__anon83	file:	access:public
badword_captype	vim/vim/src/spell.c	/^badword_captype(char_u *word, char_u *end)$/;"	f	file:	signature:(char_u *word, char_u *end)
badword_captype	vim/vim/src/spell.c	/^static int badword_captype(char_u *word, char_u *end);$/;"	p	file:	signature:(char_u *word, char_u *end)
balloonEval	vim/vim/src/globals.h	/^EXTERN BalloonEval	*balloonEval INIT(= NULL);$/;"	v
balloonLabel	vim/vim/src/gui_beval.h	/^    GtkWidget		*balloonLabel;$/;"	m	struct:BalloonEvalStruct	access:public
balloonShell	vim/vim/src/gui_beval.h	/^    GtkWidget		*balloonShell;$/;"	m	struct:BalloonEvalStruct	access:public
balloon_draw_event_cb	vim/vim/src/gui_beval.c	/^balloon_draw_event_cb(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, cairo_t *cr, gpointer data UNUSED)
balloon_draw_event_cb	vim/vim/src/gui_beval.c	/^static gboolean balloon_draw_event_cb (GtkWidget *, cairo_t *, gpointer);$/;"	p	file:	signature:(GtkWidget *, cairo_t *, gpointer)
balloon_expose_event_cb	vim/vim/src/gui_beval.c	/^balloon_expose_event_cb(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventExpose *event, gpointer data UNUSED)
balloon_expose_event_cb	vim/vim/src/gui_beval.c	/^static gint balloon_expose_event_cb (GtkWidget *, GdkEventExpose *, gpointer);$/;"	p	file:	signature:(GtkWidget *, GdkEventExpose *, gpointer)
bangredo	vim/vim/src/globals.h	/^EXTERN int	bangredo INIT(= FALSE);	    \/* set to TRUE with ! command *\/$/;"	v
barline_parse	vim/vim/src/ex_cmds.c	/^barline_parse(vir_T *virp, char_u *text, garray_T *values)$/;"	f	file:	signature:(vir_T *virp, char_u *text, garray_T *values)
barline_writestring	vim/vim/src/ex_cmds.c	/^barline_writestring(FILE *fd, char_u *s, int remaining_start)$/;"	f	signature:(FILE *fd, char_u *s, int remaining_start)
basic	vim/vim/src/os_vms.c	/^	int	basic;$/;"	m	union:__anon23::__anon24	file:	access:public
bat_text_no	vim/vim/src/dosinst.c	/^char *bat_text_no = "do NOT install .bat files to use Vim at the command line";$/;"	v
bat_text_yes	vim/vim/src/dosinst.c	/^char *bat_text_yes = "Install .bat files to use Vim at the command line:";$/;"	v
batfile_thisversion	vim/vim/src/uninstal.c	/^batfile_thisversion(char *path)$/;"	f	file:	signature:(char *path)
batname	vim/vim/src/dosinst.h	/^    char	*batname;	\/* batch file name *\/$/;"	m	struct:__anon142	access:public
batpath	vim/vim/src/dosinst.h	/^    char	batpath[BUFSIZE];  \/* path of batch file to create; not$/;"	m	struct:__anon142	access:public
bbox_max_y	vim/vim/src/hardcopy.c	/^    int		bbox_max_y;$/;"	m	struct:prt_ps_font_S	file:	access:public
bbox_min_y	vim/vim/src/hardcopy.c	/^    int		bbox_min_y;$/;"	m	struct:prt_ps_font_S	file:	access:public
bck_word	vim/vim/src/search.c	/^bck_word(long count, int bigword, int stop)$/;"	f	signature:(long count, int bigword, int stop)
bckend_word	vim/vim/src/search.c	/^bckend_word($/;"	f	signature:( long count, int bigword, int eol)
beep_flush	vim/vim/src/misc1.c	/^beep_flush(void)$/;"	f	signature:(void)
beepcmd	vim/vim/src/if_tcl.c	/^beepcmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
before_blocking	vim/vim/src/getchar.c	/^before_blocking(void)$/;"	f	signature:(void)
beginSelection	vim/vim/src/gui_at_fs.c	/^    int		beginSelection;$/;"	m	struct:__anon236	file:	access:public
beginline	vim/vim/src/edit.c	/^beginline(int flags)$/;"	f	signature:(int flags)
behind_pos	vim/vim/src/regexp.c	/^static regsave_T behind_pos;$/;"	v	file:
bell	vim/vim/src/libvterm/include/vterm.h	/^  int (*bell)(void *user);$/;"	m	struct:__anon60	access:public
bell	vim/vim/src/libvterm/include/vterm.h	/^  int (*bell)(void *user);$/;"	m	struct:__anon63	access:public
bell	vim/vim/src/libvterm/src/screen.c	/^static int bell(void *user)$/;"	f	file:	signature:(void *user)
beos_cleanup_read_thread	vim/vim/src/os_beos.c	/^beos_cleanup_read_thread(void)$/;"	f	signature:(void)
beos_select	vim/vim/src/os_beos.c	/^beos_select(int nbits,$/;"	f	signature:(int nbits, struct fd_set *rbits, struct fd_set *wbits, struct fd_set *ebits, struct timeval *timeout)
bevalServers	vim/vim/src/globals.h	/^EXTERN int bevalServers INIT(= 0);$/;"	v
bf_cfb_init	vim/vim/src/blowfish.c	/^bf_cfb_init($/;"	f	file:	signature:( bf_state_T *bfs, char_u *seed, int seed_len)
bf_cfb_init	vim/vim/src/blowfish.c	/^static void bf_cfb_init(bf_state_T *state, char_u *seed, int seed_len);$/;"	p	file:	signature:(bf_state_T *state, char_u *seed, int seed_len)
bf_check_tables	vim/vim/src/blowfish.c	/^bf_check_tables($/;"	f	file:	signature:( UINT32_T pax[18], UINT32_T sbx[4][256], UINT32_T val)
bf_check_tables	vim/vim/src/blowfish.c	/^static int bf_check_tables(UINT32_T pax[18], UINT32_T sbx[4][256], UINT32_T val);$/;"	p	file:	signature:(UINT32_T pax[18], UINT32_T sbx[4][256], UINT32_T val)
bf_e_block	vim/vim/src/blowfish.c	/^bf_e_block($/;"	f	file:	signature:( bf_state_T *bfs, UINT32_T *p_xl, UINT32_T *p_xr)
bf_e_block	vim/vim/src/blowfish.c	/^static void bf_e_block(bf_state_T *state, UINT32_T *p_xl, UINT32_T *p_xr);$/;"	p	file:	signature:(bf_state_T *state, UINT32_T *p_xl, UINT32_T *p_xr)
bf_e_cblock	vim/vim/src/blowfish.c	/^bf_e_cblock($/;"	f	file:	signature:( bf_state_T *bfs, char_u *block)
bf_e_cblock	vim/vim/src/blowfish.c	/^static void bf_e_cblock(bf_state_T *state, char_u *block);$/;"	p	file:	signature:(bf_state_T *state, char_u *block)
bf_key_init	vim/vim/src/blowfish.c	/^bf_key_init($/;"	f	file:	signature:( bf_state_T *bfs, char_u *password, char_u *salt, int salt_len)
bf_key_init	vim/vim/src/blowfish.c	/^static void bf_key_init(bf_state_T *state, char_u *password, char_u *salt, int salt_len);$/;"	p	file:	signature:(bf_state_T *state, char_u *password, char_u *salt, int salt_len)
bf_self_test	vim/vim/src/blowfish.c	/^bf_self_test(void)$/;"	f	file:	signature:(void)
bf_self_test	vim/vim/src/blowfish.c	/^static int bf_self_test(void);$/;"	p	file:	signature:(void)
bf_state_T	vim/vim/src/blowfish.c	/^} bf_state_T;$/;"	t	typeref:struct:__anon72	file:
bf_test_data	vim/vim/src/blowfish.c	/^static struct_bf_test_data bf_test_data[] = {$/;"	v	file:
bg	vim/vim/src/libvterm/include/vterm.h	/^  VTermColor fg, bg;$/;"	m	struct:__anon62	access:public
bg	vim/vim/src/libvterm/src/screen.c	/^  VTermColor   fg, bg;$/;"	m	struct:__anon29	file:	access:public
bg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor bg;$/;"	m	struct:VTermPen	access:public
bg_color	vim/vim/src/structs.h	/^	    guicolor_T	    bg_color;	\/* background color handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
bg_color	vim/vim/src/structs.h	/^	    short_u	    bg_color;	\/* background color number *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
bg_color	vim/vim/src/structs.h	/^    long_u	bg_color;$/;"	m	struct:__anon205	access:public
bg_index	vim/vim/src/libvterm/src/vterm_internal.h	/^  int bg_index;$/;"	m	struct:VTermState	access:public
bg_rgb	vim/vim/src/structs.h	/^	    guicolor_T	    bg_rgb;	\/* background color RGB *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
bgcolor	vim/vim/src/gui.h	/^    GdkColor	*bgcolor;	    \/* GDK-styled background color *\/$/;"	m	struct:Gui	access:public
bgcolor	vim/vim/src/gui.h	/^    GdkRGBA	*bgcolor;	    \/* GDK-styled background color *\/$/;"	m	struct:Gui	access:public
bh_bnum	vim/vim/src/structs.h	475;"	d
bh_curr	vim/vim/src/structs.h	/^    buffblock_T	*bh_curr;	\/* buffblock for appending *\/$/;"	m	struct:buffheader	access:public
bh_data	vim/vim/src/structs.h	/^    char_u	*bh_data;	    \/* pointer to memory (for used block) *\/$/;"	m	struct:block_hdr	access:public
bh_first	vim/vim/src/structs.h	/^    buffblock_T	bh_first;	\/* first (dummy) block of list *\/$/;"	m	struct:buffheader	access:public
bh_flags	vim/vim/src/structs.h	/^    char	bh_flags;	    \/* BH_DIRTY or BH_LOCKED *\/$/;"	m	struct:block_hdr	access:public
bh_hashitem	vim/vim/src/structs.h	/^    mf_hashitem_T bh_hashitem;      \/* header for hash table and key *\/$/;"	m	struct:block_hdr	access:public
bh_index	vim/vim/src/structs.h	/^    int		bh_index;	\/* index for reading *\/$/;"	m	struct:buffheader	access:public
bh_next	vim/vim/src/structs.h	/^    bhdr_T	*bh_next;	    \/* next block_hdr in free or used list *\/$/;"	m	struct:block_hdr	access:public
bh_page_count	vim/vim/src/structs.h	/^    int		bh_page_count;	    \/* number of pages in this block *\/$/;"	m	struct:block_hdr	access:public
bh_prev	vim/vim/src/structs.h	/^    bhdr_T	*bh_prev;	    \/* previous block_hdr in used list *\/$/;"	m	struct:block_hdr	access:public
bh_space	vim/vim/src/structs.h	/^    int		bh_space;	\/* space in bh_curr for appending *\/$/;"	m	struct:buffheader	access:public
bhdr_T	vim/vim/src/structs.h	/^typedef struct block_hdr    bhdr_T;$/;"	t	typeref:struct:block_hdr
bi_avail	vim/vim/src/undo.c	/^    size_t	bi_avail;   \/* bytes available in bi_buffer *\/$/;"	m	struct:__anon229	file:	access:public
bi_buf	vim/vim/src/undo.c	/^    buf_T	*bi_buf;$/;"	m	struct:__anon229	file:	access:public
bi_buffer	vim/vim/src/undo.c	/^    char_u	*bi_buffer; \/* CRYPT_BUF_SIZE, NULL when not buffering *\/$/;"	m	struct:__anon229	file:	access:public
bi_fp	vim/vim/src/undo.c	/^    FILE	*bi_fp;$/;"	m	struct:__anon229	file:	access:public
bi_state	vim/vim/src/undo.c	/^    cryptstate_T *bi_state;$/;"	m	struct:__anon229	file:	access:public
bi_used	vim/vim/src/undo.c	/^    size_t	bi_used;    \/* bytes written to\/read from bi_buffer *\/$/;"	m	struct:__anon229	file:	access:public
bin_window	vim/vim/src/gui_gtk_f.h	/^    GdkWindow *bin_window;$/;"	m	struct:_GtkForm	access:public
bind_textdomain_codeset	vim/vim/src/gui_gtk.c	64;"	d	file:
bind_textdomain_codeset	vim/vim/src/gui_gtk_x11.c	48;"	d	file:
bind_textdomain_codeset	vim/vim/src/vim.h	594;"	d
bind_textdomain_codeset	vim/vim/src/vim.h	620;"	d
bind_textdomain_codeset	vim/vim/src/vim.h	622;"	d
bindtextdomain	vim/vim/src/gui_gtk.c	61;"	d	file:
bindtextdomain	vim/vim/src/gui_gtk_x11.c	45;"	d	file:
bindtextdomain	vim/vim/src/vim.h	593;"	d
bindtextdomain	vim/vim/src/vim.h	616;"	d
bindtextdomain	vim/vim/src/vim.h	618;"	d
bisearch	vim/vim/src/libvterm/src/unicode.c	/^static int bisearch(uint32_t ucs, const struct interval *table, int max) {$/;"	f	file:	signature:(uint32_t ucs, const struct interval *table, int max)
bitmap	vim/vim/src/xpm/include/simx.h	/^    HBITMAP bitmap;$/;"	m	struct:__anon87	access:public
bitmap_format	vim/vim/src/xpm/include/xpm.h	/^    int bitmap_format;			\/* Specify the format of 1bit depth$/;"	m	struct:__anon93	access:public
bkc_flags	vim/vim/src/option.h	/^EXTERN unsigned	bkc_flags;	\/* flags from 'backupcopy' *\/$/;"	v
bl_maxval	vim/vim/src/regexp.c	/^static long	bl_maxval;$/;"	v	file:
bl_minval	vim/vim/src/regexp.c	/^static long	bl_minval;$/;"	v	file:
blank_pointer	vim/vim/src/gui.h	/^    Cursor	blank_pointer;	    \/* Blank pointer *\/$/;"	m	struct:Gui	access:public
blank_pointer	vim/vim/src/gui.h	/^    GdkCursor	*blank_pointer;	    \/* Blank pointer *\/$/;"	m	struct:Gui	access:public
blank_xpm	vim/vim/src/gui_xmebw.c	/^static char * blank_xpm[] =$/;"	v	file:
blink	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int blink     : 1;$/;"	m	struct:__anon61	access:public
blink	vim/vim/src/libvterm/src/screen.c	/^  unsigned int blink     : 1;$/;"	m	struct:__anon29	file:	access:public
blink	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int blink:1;$/;"	m	struct:VTermPen	access:public
blink	vim/vim/src/libvterm/t/harness.c	/^  int blink;$/;"	m	struct:__anon42	file:	access:public
blink_cb	vim/vim/src/gui_gtk_x11.c	/^blink_cb(gpointer data UNUSED)$/;"	f	file:	signature:(gpointer data UNUSED)
blink_mode	vim/vim/src/gui_gtk_x11.c	/^static gboolean blink_mode = TRUE;$/;"	v	file:
blink_offtime	vim/vim/src/gui_gtk_x11.c	/^static long_u blink_offtime = 250;$/;"	v	file:
blink_offtime	vim/vim/src/gui_photon.c	/^static long_u	blink_offtime	= 250;$/;"	v	file:
blink_offtime	vim/vim/src/gui_w32.c	/^static long_u		blink_offtime = 250;$/;"	v	file:
blink_offtime	vim/vim/src/gui_x11.c	/^static long_u		blink_offtime = 250;$/;"	v	file:
blink_ontime	vim/vim/src/gui_gtk_x11.c	/^static long_u blink_ontime = 400;$/;"	v	file:
blink_ontime	vim/vim/src/gui_photon.c	/^static long_u	blink_ontime	= 400;$/;"	v	file:
blink_ontime	vim/vim/src/gui_w32.c	/^static long_u		blink_ontime = 400;$/;"	v	file:
blink_ontime	vim/vim/src/gui_x11.c	/^static long_u		blink_ontime = 400;$/;"	v	file:
blink_state	vim/vim/src/gui_gtk_x11.c	/^static int blink_state = BLINK_NONE;$/;"	v	file:
blink_state	vim/vim/src/gui_photon.c	/^} blink_state = BLINK_NONE;$/;"	v	typeref:enum:__anon239	file:
blink_state	vim/vim/src/gui_w32.c	/^static int		blink_state = BLINK_NONE;$/;"	v	file:
blink_state	vim/vim/src/gui_x11.c	/^static int		blink_state = BLINK_NONE;$/;"	v	file:
blink_timer	vim/vim/src/gui_gtk_x11.c	/^static guint blink_timer = 0;$/;"	v	file:
blink_timer	vim/vim/src/gui_w32.c	/^static UINT		blink_timer = 0;$/;"	v	file:
blink_timer	vim/vim/src/gui_x11.c	/^static XtIntervalId	blink_timer = (XtIntervalId)0;$/;"	v	file:
blink_waittime	vim/vim/src/gui_gtk_x11.c	/^static long_u blink_waittime = 700;$/;"	v	file:
blink_waittime	vim/vim/src/gui_photon.c	/^static long_u	blink_waittime	= 700;$/;"	v	file:
blink_waittime	vim/vim/src/gui_w32.c	/^static long_u		blink_waittime = 700;$/;"	v	file:
blink_waittime	vim/vim/src/gui_x11.c	/^static long_u		blink_waittime = 700;$/;"	v	file:
blinkoff	vim/vim/src/structs.h	/^    long	blinkoff;	\/* blinking, off time *\/$/;"	m	struct:cursor_entry	access:public
blinkon	vim/vim/src/structs.h	/^    long	blinkon;	\/* blinking, on time *\/$/;"	m	struct:cursor_entry	access:public
blinkwait	vim/vim/src/structs.h	/^    long	blinkwait;	\/* blinking, wait time before blinking starts *\/$/;"	m	struct:cursor_entry	access:public
block0	vim/vim/src/memline.c	/^struct block0$/;"	s	file:
block0::b0_fname	vim/vim/src/memline.c	/^    char_u	b0_fname[B0_FNAME_SIZE_ORG]; \/* name of file being edited *\/$/;"	m	struct:block0	file:	access:public
block0::b0_hname	vim/vim/src/memline.c	/^    char_u	b0_hname[B0_HNAME_SIZE]; \/* host name (if it has a name) *\/$/;"	m	struct:block0	file:	access:public
block0::b0_id	vim/vim/src/memline.c	/^    char_u	b0_id[2];	\/* id for block 0: BLOCK0_ID0 and BLOCK0_ID1,$/;"	m	struct:block0	file:	access:public
block0::b0_ino	vim/vim/src/memline.c	/^    char_u	b0_ino[4];	\/* inode of b0_fname *\/$/;"	m	struct:block0	file:	access:public
block0::b0_magic_char	vim/vim/src/memline.c	/^    char_u	b0_magic_char;	\/* check for last char *\/$/;"	m	struct:block0	file:	access:public
block0::b0_magic_int	vim/vim/src/memline.c	/^    int		b0_magic_int;	\/* check for byte order of int *\/$/;"	m	struct:block0	file:	access:public
block0::b0_magic_long	vim/vim/src/memline.c	/^    long	b0_magic_long;	\/* check for byte order of long *\/$/;"	m	struct:block0	file:	access:public
block0::b0_magic_short	vim/vim/src/memline.c	/^    short	b0_magic_short;	\/* check for byte order of short *\/$/;"	m	struct:block0	file:	access:public
block0::b0_mtime	vim/vim/src/memline.c	/^    char_u	b0_mtime[4];	\/* last modification time of file *\/$/;"	m	struct:block0	file:	access:public
block0::b0_page_size	vim/vim/src/memline.c	/^    char_u	b0_page_size[4];\/* number of bytes per page *\/$/;"	m	struct:block0	file:	access:public
block0::b0_pid	vim/vim/src/memline.c	/^    char_u	b0_pid[4];	\/* process id of creator (or 0) *\/$/;"	m	struct:block0	file:	access:public
block0::b0_uname	vim/vim/src/memline.c	/^    char_u	b0_uname[B0_UNAME_SIZE]; \/* name of user (uid if no name) *\/$/;"	m	struct:block0	file:	access:public
block0::b0_version	vim/vim/src/memline.c	/^    char_u	b0_version[10];	\/* Vim version string *\/$/;"	m	struct:block0	file:	access:public
block8	vim/vim/src/blowfish.c	/^} block8;$/;"	t	typeref:union:__anon71	file:
block_autocmds	vim/vim/src/fileio.c	/^block_autocmds(void)$/;"	f	signature:(void)
block_def	vim/vim/src/ops.c	/^struct block_def$/;"	s	file:
block_def::end_char_vcols	vim/vim/src/ops.c	/^    colnr_T	end_char_vcols;	\/* number of vcols of post-block char *\/$/;"	m	struct:block_def	file:	access:public
block_def::end_vcol	vim/vim/src/ops.c	/^    colnr_T	end_vcol;	\/* start col of 1st char wholly after block *\/$/;"	m	struct:block_def	file:	access:public
block_def::endspaces	vim/vim/src/ops.c	/^    int		endspaces;	\/* 'extra' cols after last char *\/$/;"	m	struct:block_def	file:	access:public
block_def::is_MAX	vim/vim/src/ops.c	/^    int		is_MAX;		\/* TRUE if curswant==MAXCOL when starting *\/$/;"	m	struct:block_def	file:	access:public
block_def::is_oneChar	vim/vim/src/ops.c	/^    int		is_oneChar;	\/* TRUE if block within one character *\/$/;"	m	struct:block_def	file:	access:public
block_def::is_short	vim/vim/src/ops.c	/^    int		is_short;	\/* TRUE if line is too short to fit in block *\/$/;"	m	struct:block_def	file:	access:public
block_def::pre_whitesp	vim/vim/src/ops.c	/^    int		pre_whitesp;	\/* screen cols of ws before block *\/$/;"	m	struct:block_def	file:	access:public
block_def::pre_whitesp_c	vim/vim/src/ops.c	/^    int		pre_whitesp_c;	\/* chars of ws before block *\/$/;"	m	struct:block_def	file:	access:public
block_def::start_char_vcols	vim/vim/src/ops.c	/^    colnr_T	start_char_vcols; \/* number of vcols of pre-block char *\/$/;"	m	struct:block_def	file:	access:public
block_def::start_vcol	vim/vim/src/ops.c	/^    colnr_T	start_vcol;	\/* start col of 1st char wholly inside block *\/$/;"	m	struct:block_def	file:	access:public
block_def::startspaces	vim/vim/src/ops.c	/^    int		startspaces;	\/* 'extra' cols before first char *\/$/;"	m	struct:block_def	file:	access:public
block_def::textcol	vim/vim/src/ops.c	/^    colnr_T	textcol;	\/* index of chars (partially) in block *\/$/;"	m	struct:block_def	file:	access:public
block_def::textlen	vim/vim/src/ops.c	/^    int		textlen;	\/* chars in block *\/$/;"	m	struct:block_def	file:	access:public
block_def::textstart	vim/vim/src/ops.c	/^    char_u	*textstart;	\/* pointer to 1st char (partially) in block *\/$/;"	m	struct:block_def	file:	access:public
block_hdr	vim/vim/src/structs.h	/^struct block_hdr$/;"	s
block_hdr::bh_data	vim/vim/src/structs.h	/^    char_u	*bh_data;	    \/* pointer to memory (for used block) *\/$/;"	m	struct:block_hdr	access:public
block_hdr::bh_flags	vim/vim/src/structs.h	/^    char	bh_flags;	    \/* BH_DIRTY or BH_LOCKED *\/$/;"	m	struct:block_hdr	access:public
block_hdr::bh_hashitem	vim/vim/src/structs.h	/^    mf_hashitem_T bh_hashitem;      \/* header for hash table and key *\/$/;"	m	struct:block_hdr	access:public
block_hdr::bh_next	vim/vim/src/structs.h	/^    bhdr_T	*bh_next;	    \/* next block_hdr in free or used list *\/$/;"	m	struct:block_hdr	access:public
block_hdr::bh_page_count	vim/vim/src/structs.h	/^    int		bh_page_count;	    \/* number of pages in this block *\/$/;"	m	struct:block_hdr	access:public
block_hdr::bh_prev	vim/vim/src/structs.h	/^    bhdr_T	*bh_prev;	    \/* previous block_hdr in used list *\/$/;"	m	struct:block_hdr	access:public
block_insert	vim/vim/src/ops.c	/^block_insert($/;"	f	file:	signature:( oparg_T *oap, char_u *s, int b_insert, struct block_def *bdp)
block_insert	vim/vim/src/ops.c	/^static void block_insert(oparg_T *oap, char_u *s, int b_insert, struct block_def*bdp);$/;"	p	file:	signature:(oparg_T *oap, char_u *s, int b_insert, struct block_def*bdp)
block_mode	vim/vim/src/structs.h	/^    int		block_mode;	\/* current operator is Visual block mode *\/$/;"	m	struct:oparg_S	access:public
block_prep	vim/vim/src/ops.c	/^block_prep($/;"	f	file:	signature:( oparg_T *oap, struct block_def *bdp, linenr_T lnum, int is_del)
block_prep	vim/vim/src/ops.c	/^static void	block_prep(oparg_T *oap, struct block_def *, linenr_T, int);$/;"	p	file:	signature:(oparg_T *oap, struct block_def *, linenr_T, int)
block_redo	vim/vim/src/getchar.c	/^static int	block_redo = FALSE;$/;"	v	file:
block_signals	vim/vim/src/os_unix.c	/^block_signals(sigset_t *set)$/;"	f	file:	signature:(sigset_t *set)
blocknr_T	vim/vim/src/structs.h	/^typedef long		    blocknr_T;$/;"	t
blowfish_self_test	vim/vim/src/blowfish.c	/^blowfish_self_test(void)$/;"	f	signature:(void)
blue	vim/vim/src/libvterm/include/vterm.h	/^  uint8_t red, green, blue;$/;"	m	struct:__anon49	access:public
blue	vim/vim/src/xpm/include/simx.h	/^    BYTE red, green, blue;$/;"	m	struct:__anon86	access:public
blue_closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int blue_closeness;	\/* Allowable blue deviation *\/$/;"	m	struct:__anon93	access:public
bo_flags	vim/vim/src/option.h	/^EXTERN unsigned	bo_flags;$/;"	v
bold	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int bold      : 1;$/;"	m	struct:__anon61	access:public
bold	vim/vim/src/libvterm/src/screen.c	/^  unsigned int bold      : 1;$/;"	m	struct:__anon29	file:	access:public
bold	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int bold:1;$/;"	m	struct:VTermPen	access:public
bold	vim/vim/src/libvterm/t/harness.c	/^  int bold;$/;"	m	struct:__anon42	file:	access:public
bold	vim/vim/src/structs.h	/^    int		bold;$/;"	m	struct:__anon205	access:public
bold_font	vim/vim/src/gui.h	/^    GuiFont	bold_font;	    \/* Bold font *\/$/;"	m	struct:Gui	access:public
bold_is_highbright	vim/vim/src/libvterm/src/vterm_internal.h	/^  int bold_is_highbright;$/;"	m	struct:VTermState	access:public
boldface	vim/vim/src/os_mswin.c	/^static const int	boldface[2] = {FW_REGULAR, FW_BOLD};$/;"	v	file:
boldital_font	vim/vim/src/gui.h	/^    GuiFont	boldital_font;	    \/* Bold-Italic font *\/$/;"	m	struct:Gui	access:public
bomb_size	vim/vim/src/mbyte.c	/^bomb_size(void)$/;"	f	signature:(void)
bonobo_dock_item_set_behavior	vim/vim/src/gui_gtk_x11.c	/^extern void bonobo_dock_item_set_behavior(BonoboDockItem *dock_item, BonoboDockItemBehavior beh);$/;"	p	file:	signature:(BonoboDockItem *dock_item, BonoboDockItemBehavior beh)
bool	vim/vim/src/if_perl_msvc/stdbool.h	3;"	d
bool	vim/vim/src/vim.h	2361;"	d
boolean	vim/vim/src/libvterm/include/vterm.h	/^  int boolean;$/;"	m	union:__anon51	access:public
border_offset	vim/vim/src/gui.h	/^    int		border_offset;	    \/* Total pixel offset for all borders *\/$/;"	m	struct:Gui	access:public
border_width	vim/vim/src/gui.h	/^    int		border_width;	    \/* Width of our border around text area *\/$/;"	m	struct:Gui	access:public
botRight	vim/vim/src/gui_mac.c	127;"	d	file:
bot_shadow_GC	vim/vim/src/gui_at_sb.h	/^    GC		bot_shadow_GC;$/;"	m	struct:__anon84	access:public
bot_shadow_contrast	vim/vim/src/gui_at_sb.h	/^    int		bot_shadow_contrast;$/;"	m	struct:__anon84	access:public
bot_shadow_pixel	vim/vim/src/gui_at_sb.h	/^    Pixel	bot_shadow_pixel;$/;"	m	struct:__anon84	access:public
bot_top_msg	vim/vim/src/globals.h	/^EXTERN char bot_top_msg[] INIT(= N_("search hit BOTTOM, continuing at TOP"));$/;"	v
botline_forw	vim/vim/src/move.c	/^botline_forw(lineoff_T *lp)$/;"	f	file:	signature:(lineoff_T *lp)
botline_forw	vim/vim/src/move.c	/^static void botline_forw(lineoff_T *lp);$/;"	p	file:	signature:(lineoff_T *lp)
botline_topline	vim/vim/src/move.c	/^botline_topline(lineoff_T *lp)$/;"	f	file:	signature:(lineoff_T *lp)
botline_topline	vim/vim/src/move.c	/^static void botline_topline(lineoff_T *lp);$/;"	p	file:	signature:(lineoff_T *lp)
botlnum	vim/vim/src/structs.h	/^    linenr_T	botlnum;		\/* bottom buffer line *\/$/;"	m	struct:posmatch	access:public
bottom_sbar	vim/vim/src/gui.h	/^    scrollbar_T bottom_sbar;	    \/* Bottom scrollbar *\/$/;"	m	struct:Gui	access:public
bottommsg	vim/vim/src/tag.c	/^static char_u *bottommsg = (char_u *)N_("E555: at bottom of tag stack");$/;"	v	file:
box	vim/vim/src/gui_mac.c	/^    Rect    box;$/;"	m	struct:__anon225	file:	access:public
bp_pos	vim/vim/src/regexp.c	/^    regsave_T	bp_pos;		\/* last input position *\/$/;"	m	struct:backpos_S	file:	access:public
bp_scan	vim/vim/src/regexp.c	/^    char_u	*bp_scan;	\/* "scan" where BACK was encountered *\/$/;"	m	struct:backpos_S	file:	access:public
br_buf	vim/vim/src/structs.h	/^    buf_T   *br_buf;$/;"	m	struct:__anon163	access:public
br_buf_free_count	vim/vim/src/structs.h	/^    int	    br_buf_free_count;$/;"	m	struct:__anon163	access:public
br_fnum	vim/vim/src/structs.h	/^    int	    br_fnum;$/;"	m	struct:__anon163	access:public
brace_count	vim/vim/src/regexp.c	/^static int	brace_count[10]; \/* Current counts for complex brace repeats *\/$/;"	v	file:
brace_max	vim/vim/src/regexp.c	/^static long	brace_max[10];	\/* Maximums for complex brace repeats *\/$/;"	v	file:
brace_min	vim/vim/src/regexp.c	/^static long	brace_min[10];	\/* Minimums for complex brace repeats *\/$/;"	v	file:
bracketed_paste	vim/vim/src/edit.c	/^bracketed_paste(paste_mode_T mode, int drop, garray_T *gap)$/;"	f	signature:(paste_mode_T mode, int drop, garray_T *gap)
bracketpaste	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int bracketpaste:1;$/;"	m	struct:VTermState::__anon35	access:public
breakat_flags	vim/vim/src/globals.h	/^EXTERN char	breakat_flags[256];	\/* which characters are in 'breakat' *\/$/;"	v
breakcheck_count	vim/vim/src/misc1.c	/^static int	breakcheck_count = 0;$/;"	v	file:
breakpoint	vim/vim/src/ex_cmds2.c	/^    linenr_T	breakpoint;	\/* next line with breakpoint or zero *\/$/;"	m	struct:source_cookie	file:	access:public
breakpoint	vim/vim/src/structs.h	/^    linenr_T	breakpoint;	\/* next line with breakpoint or zero *\/$/;"	m	struct:funccall_S	access:public
briopt_check	vim/vim/src/option.c	/^briopt_check(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
briopt_check	vim/vim/src/option.c	/^static int briopt_check(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
browse	vim/vim/src/structs.h	/^    int		browse;			\/* TRUE to invoke file dialog *\/$/;"	m	struct:__anon171	access:public
browse_cancel_cb	vim/vim/src/gui_gtk.c	/^browse_cancel_cb(GtkWidget *widget UNUSED, gpointer cbdata)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer cbdata)
browse_destroy_cb	vim/vim/src/gui_gtk.c	/^browse_destroy_cb(GtkWidget *widget UNUSED)$/;"	f	file:	signature:(GtkWidget *widget UNUSED)
browse_fname	vim/vim/src/gui.h	/^    char_u	*browse_fname;	    \/* file name from filedlg *\/$/;"	m	struct:Gui	access:public
browse_fname	vim/vim/src/gui_motif.c	/^static char *browse_fname = NULL;$/;"	v	file:
browse_ok_cb	vim/vim/src/gui_gtk.c	/^browse_ok_cb(GtkWidget *widget UNUSED, gpointer cbdata)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer cbdata)
browse_save_fname	vim/vim/src/ex_cmds2.c	/^browse_save_fname(buf_T *buf)$/;"	f	signature:(buf_T *buf)
bs_cchar	vim/vim/src/structs.h	/^    int		    bs_cchar;	 \/* stores si_cchar *\/$/;"	m	struct:buf_state	access:public
bs_extmatch	vim/vim/src/structs.h	/^    reg_extmatch_T *bs_extmatch; \/* external matches from start pattern *\/$/;"	m	struct:buf_state	access:public
bs_flags	vim/vim/src/structs.h	/^    int		    bs_flags;	 \/* flags for pattern *\/$/;"	m	struct:buf_state	access:public
bs_idx	vim/vim/src/structs.h	/^    int		    bs_idx;	 \/* index of pattern *\/$/;"	m	struct:buf_state	access:public
bs_seqnr	vim/vim/src/structs.h	/^    int		    bs_seqnr;	 \/* stores si_seqnr *\/$/;"	m	struct:buf_state	access:public
bt_dontwrite	vim/vim/src/buffer.c	/^bt_dontwrite(buf_T *buf)$/;"	f	signature:(buf_T *buf)
bt_dontwrite_msg	vim/vim/src/buffer.c	/^bt_dontwrite_msg(buf_T *buf)$/;"	f	signature:(buf_T *buf)
bt_entry	vim/vim/src/term.c	/^    int		bt_entry;$/;"	m	struct:builtin_term	file:	access:public
bt_nofile	vim/vim/src/buffer.c	/^bt_nofile(buf_T *buf)$/;"	f	signature:(buf_T *buf)
bt_quickfix	vim/vim/src/buffer.c	/^bt_quickfix(buf_T *buf)$/;"	f	signature:(buf_T *buf)
bt_regcomp	vim/vim/src/regexp.c	/^bt_regcomp(char_u *expr, int re_flags)$/;"	f	file:	signature:(char_u *expr, int re_flags)
bt_regcomp	vim/vim/src/regexp.c	/^static regprog_T  *bt_regcomp(char_u *expr, int re_flags);$/;"	p	file:	signature:(char_u *expr, int re_flags)
bt_regengine	vim/vim/src/regexp.c	/^static regengine_T bt_regengine =$/;"	v	file:
bt_regengine	vim/vim/src/regexp.c	/^static regengine_T bt_regengine;$/;"	v	file:
bt_regexec_both	vim/vim/src/regexp.c	/^bt_regexec_both($/;"	f	file:	signature:( char_u *line, colnr_T col, proftime_T *tm, int *timed_out)
bt_regexec_both	vim/vim/src/regexp.c	/^static long	bt_regexec_both(char_u *line, colnr_T col, proftime_T *tm, int *timed_out);$/;"	p	file:	signature:(char_u *line, colnr_T col, proftime_T *tm, int *timed_out)
bt_regexec_multi	vim/vim/src/regexp.c	/^bt_regexec_multi($/;"	f	file:	signature:( regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm, int *timed_out)
bt_regexec_nl	vim/vim/src/regexp.c	/^bt_regexec_nl($/;"	f	file:	signature:( regmatch_T *rmp, char_u *line, colnr_T col, int line_lbr)
bt_regfree	vim/vim/src/regexp.c	/^bt_regfree(regprog_T *prog)$/;"	f	file:	signature:(regprog_T *prog)
bt_regfree	vim/vim/src/regexp.c	/^static void bt_regfree(regprog_T *prog);$/;"	p	file:	signature:(regprog_T *prog)
bt_regprog_T	vim/vim/src/regexp.h	/^} bt_regprog_T;$/;"	t	typeref:struct:__anon143
bt_string	vim/vim/src/term.c	/^    char	*bt_string;$/;"	m	struct:builtin_term	file:	access:public
bt_terminal	vim/vim/src/buffer.c	/^bt_terminal(buf_T *buf)$/;"	f	signature:(buf_T *buf)
btype_T	vim/vim/src/vim.h	/^} btype_T;$/;"	t	typeref:enum:__anon241
buf	vim/vim/src/if_mzsch.c	/^    buf_T	    *buf;$/;"	m	struct:__anon7	file:	access:public
buf	vim/vim/src/if_py_both.h	/^    BufferObject *buf;$/;"	m	struct:__anon112	access:public
buf	vim/vim/src/if_py_both.h	/^    buf_T *buf;$/;"	m	struct:__anon111	access:public
buf	vim/vim/src/quickfix.c	/^    buf_T	*buf;$/;"	m	struct:__anon13	file:	access:public
buf	vim/vim/src/structs.h	/^    buf_T	*buf;	\/* the buffer to search for a match *\/$/;"	m	struct:__anon201	access:public
bufIsChanged	vim/vim/src/undo.c	/^bufIsChanged(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_T	vim/vim/src/os_unixx.h	51;"	d
buf_T	vim/vim/src/os_unixx.h	55;"	d
buf_T	vim/vim/src/pty.c	61;"	d	file:
buf_T	vim/vim/src/pty.c	65;"	d	file:
buf_T	vim/vim/src/structs.h	/^typedef struct file_buffer	buf_T;  \/* forward declaration *\/$/;"	t	typeref:struct:file_buffer
buf_addsign	vim/vim/src/buffer.c	/^buf_addsign($/;"	f	signature:( buf_T *buf, int id, linenr_T lnum, int typenr)
buf_change_sign_type	vim/vim/src/buffer.c	/^buf_change_sign_type($/;"	f	signature:( buf_T *buf, int markId, int typenr)
buf_check_timestamp	vim/vim/src/fileio.c	/^buf_check_timestamp($/;"	f	signature:( buf_T *buf, int focus UNUSED)
buf_clear_file	vim/vim/src/buffer.c	/^buf_clear_file(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_compare	vim/vim/src/mark.c	/^buf_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
buf_contents_changed	vim/vim/src/buffer.c	/^buf_contents_changed(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_copy_options	vim/vim/src/option.c	/^buf_copy_options(buf_T *buf, int flags)$/;"	f	signature:(buf_T *buf, int flags)
buf_delete_all_signs	vim/vim/src/buffer.c	/^buf_delete_all_signs(void)$/;"	f	signature:(void)
buf_delete_signs	vim/vim/src/buffer.c	/^buf_delete_signs(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_delsign	vim/vim/src/buffer.c	/^buf_delsign($/;"	f	signature:( buf_T *buf, int id)
buf_findsign	vim/vim/src/buffer.c	/^buf_findsign($/;"	f	signature:( buf_T *buf, int id)
buf_findsign_id	vim/vim/src/buffer.c	/^buf_findsign_id($/;"	f	signature:( buf_T *buf, linenr_T lnum)
buf_findsigntype_id	vim/vim/src/buffer.c	/^buf_findsigntype_id($/;"	f	signature:( buf_T *buf, linenr_T lnum, int typenr)
buf_free_count	vim/vim/src/buffer.c	/^static int	buf_free_count = 0;$/;"	v	file:
buf_freeall	vim/vim/src/buffer.c	/^buf_freeall(buf_T *buf, int flags)$/;"	f	signature:(buf_T *buf, int flags)
buf_getsigntype	vim/vim/src/buffer.c	/^buf_getsigntype($/;"	f	signature:( buf_T *buf, linenr_T lnum, int type)
buf_hashtab	vim/vim/src/buffer.c	/^static hashtab_T buf_hashtab;$/;"	v	file:
buf_hashtab_add	vim/vim/src/buffer.c	/^buf_hashtab_add(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
buf_hashtab_remove	vim/vim/src/buffer.c	/^buf_hashtab_remove(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
buf_hide	vim/vim/src/buffer.c	/^buf_hide(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_init_chartab	vim/vim/src/charset.c	/^buf_init_chartab($/;"	f	signature:( buf_T *buf, int global)
buf_jump_open_tab	vim/vim/src/window.c	/^buf_jump_open_tab(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_jump_open_win	vim/vim/src/window.c	/^buf_jump_open_win(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_list	vim/vim/src/netbeans.c	/^static nbbuf_T *buf_list = NULL;$/;"	v	file:
buf_list_size	vim/vim/src/netbeans.c	/^static int buf_list_size = 0;	\/* size of buf_list *\/$/;"	v	file:
buf_list_used	vim/vim/src/netbeans.c	/^static int buf_list_used = 0;	\/* nr of entries in buf_list actually in use *\/$/;"	v	file:
buf_modname	vim/vim/src/fileio.c	/^buf_modname($/;"	f	signature:( int shortname, char_u *fname, char_u *ext, int prepend_dot)
buf_name_changed	vim/vim/src/buffer.c	/^buf_name_changed(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_reload	vim/vim/src/fileio.c	/^buf_reload(buf_T *buf, int orig_mode)$/;"	f	signature:(buf_T *buf, int orig_mode)
buf_same_ino	vim/vim/src/buffer.c	/^buf_same_ino($/;"	f	file:	signature:( buf_T *buf, stat_T *stp)
buf_same_ino	vim/vim/src/buffer.c	/^static int	buf_same_ino(buf_T *buf, stat_T *stp);$/;"	p	file:	signature:(buf_T *buf, stat_T *stp)
buf_set_name	vim/vim/src/buffer.c	/^buf_set_name(int fnum, char_u *name)$/;"	f	signature:(int fnum, char_u *name)
buf_setino	vim/vim/src/buffer.c	/^buf_setino(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_signcount	vim/vim/src/buffer.c	/^buf_signcount(buf_T *buf, linenr_T lnum)$/;"	f	signature:(buf_T *buf, linenr_T lnum)
buf_spname	vim/vim/src/buffer.c	/^buf_spname(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_state	vim/vim/src/structs.h	/^typedef struct buf_state$/;"	s
buf_state::bs_cchar	vim/vim/src/structs.h	/^    int		    bs_cchar;	 \/* stores si_cchar *\/$/;"	m	struct:buf_state	access:public
buf_state::bs_extmatch	vim/vim/src/structs.h	/^    reg_extmatch_T *bs_extmatch; \/* external matches from start pattern *\/$/;"	m	struct:buf_state	access:public
buf_state::bs_flags	vim/vim/src/structs.h	/^    int		    bs_flags;	 \/* flags for pattern *\/$/;"	m	struct:buf_state	access:public
buf_state::bs_idx	vim/vim/src/structs.h	/^    int		    bs_idx;	 \/* index of pattern *\/$/;"	m	struct:buf_state	access:public
buf_state::bs_seqnr	vim/vim/src/structs.h	/^    int		    bs_seqnr;	 \/* stores si_seqnr *\/$/;"	m	struct:buf_state	access:public
buf_store_time	vim/vim/src/fileio.c	/^buf_store_time(buf_T *buf, stat_T *st, char_u *fname UNUSED)$/;"	f	signature:(buf_T *buf, stat_T *st, char_u *fname UNUSED)
buf_valid	vim/vim/src/buffer.c	/^buf_valid(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buf_win_common	vim/vim/src/evalfunc.c	/^buf_win_common(typval_T *argvars, typval_T *rettv, int get_nr)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int get_nr)
buf_write	vim/vim/src/fileio.c	/^buf_write($/;"	f	signature:( buf_T *buf, char_u *fname, char_u *sfname, linenr_T start, linenr_T end, exarg_T *eap, int append, int forceit, int reset_changed, int filtering)
buf_write_all	vim/vim/src/ex_cmds2.c	/^buf_write_all(buf_T *buf, int forceit)$/;"	f	signature:(buf_T *buf, int forceit)
buf_write_bytes	vim/vim/src/fileio.c	/^buf_write_bytes(struct bw_info *ip)$/;"	f	file:	signature:(struct bw_info *ip)
buf_write_bytes	vim/vim/src/fileio.c	/^static int  buf_write_bytes(struct bw_info *ip);$/;"	p	file:	signature:(struct bw_info *ip)
bufadrs	vim/vim/src/os_vms.c	/^    char	*bufadrs;$/;"	m	struct:__anon26	file:	access:public
buffblock	vim/vim/src/structs.h	/^struct buffblock$/;"	s
buffblock::b_next	vim/vim/src/structs.h	/^    buffblock_T	*b_next;	\/* pointer to next buffblock *\/$/;"	m	struct:buffblock	access:public
buffblock::b_str	vim/vim/src/structs.h	/^    char_u	b_str[1];	\/* contents (actually longer) *\/$/;"	m	struct:buffblock	access:public
buffblock_T	vim/vim/src/structs.h	/^typedef struct buffblock buffblock_T;$/;"	t	typeref:struct:buffblock
buffer	vim/vim/src/hardcopy.c	/^    char_u  buffer[PRT_FILE_BUFFER_LEN];$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
buffer	vim/vim/src/libvterm/src/screen.c	/^  ScreenCell *buffer;$/;"	m	struct:VTermScreen	file:	access:public
buffer	vim/vim/src/structs.h	/^  char_u   buffer[64];$/;"	m	struct:__anon209	access:public
buffer_append	vim/vim/src/if_ruby.c	/^static VALUE buffer_append(VALUE self, VALUE num, VALUE str)$/;"	f	file:	signature:(VALUE self, VALUE num, VALUE str)
buffer_aref	vim/vim/src/if_ruby.c	/^static VALUE buffer_aref(VALUE self, VALUE num)$/;"	f	file:	signature:(VALUE self, VALUE num)
buffer_aset	vim/vim/src/if_ruby.c	/^static VALUE buffer_aset(VALUE self, VALUE num, VALUE str)$/;"	f	file:	signature:(VALUE self, VALUE num, VALUE str)
buffer_count	vim/vim/src/if_ruby.c	/^static VALUE buffer_count(VALUE self)$/;"	f	file:	signature:(VALUE self)
buffer_delete	vim/vim/src/if_ruby.c	/^static VALUE buffer_delete(VALUE self, VALUE num)$/;"	f	file:	signature:(VALUE self, VALUE num)
buffer_dsize	vim/vim/src/if_ruby.c	/^static size_t buffer_dsize(const void *buf UNUSED)$/;"	f	file:	signature:(const void *buf UNUSED)
buffer_dsize	vim/vim/src/if_ruby.c	/^static size_t buffer_dsize(const void *buf);$/;"	p	file:	signature:(const void *buf)
buffer_fixup_proc	vim/vim/src/if_mzsch.c	/^static int buffer_fixup_proc(void *obj)$/;"	f	file:	signature:(void *obj)
buffer_mark_proc	vim/vim/src/if_mzsch.c	/^static int buffer_mark_proc(void *obj)$/;"	f	file:	signature:(void *obj)
buffer_name	vim/vim/src/if_ruby.c	/^static VALUE buffer_name(VALUE self)$/;"	f	file:	signature:(VALUE self)
buffer_new	vim/vim/src/if_mzsch.c	/^buffer_new(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
buffer_new	vim/vim/src/if_mzsch.c	/^static Scheme_Object *buffer_new(buf_T *buf);$/;"	p	file:	signature:(buf_T *buf)
buffer_new	vim/vim/src/if_ruby.c	/^static VALUE buffer_new(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
buffer_number	vim/vim/src/if_ruby.c	/^static VALUE buffer_number(VALUE self)$/;"	f	file:	signature:(VALUE self)
buffer_s_aref	vim/vim/src/if_ruby.c	/^static VALUE buffer_s_aref(VALUE self UNUSED, VALUE num)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE num)
buffer_s_count	vim/vim/src/if_ruby.c	/^static VALUE buffer_s_count(void)$/;"	f	file:	signature:(void)
buffer_s_current	vim/vim/src/if_ruby.c	/^static VALUE buffer_s_current(void)$/;"	f	file:	signature:(void)
buffer_size_proc	vim/vim/src/if_mzsch.c	/^static int buffer_size_proc(void *obj UNUSED)$/;"	f	file:	signature:(void *obj UNUSED)
buffer_type	vim/vim/src/if_ruby.c	/^static const rb_data_type_t buffer_type = {$/;"	v	file:
buffercmd	vim/vim/src/if_tcl.c	/^buffercmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
buffers	vim/vim/src/libvterm/src/screen.c	/^  ScreenCell *buffers[2];$/;"	m	struct:VTermScreen	file:	access:public
buffheader	vim/vim/src/structs.h	/^struct buffheader$/;"	s
buffheader::bh_curr	vim/vim/src/structs.h	/^    buffblock_T	*bh_curr;	\/* buffblock for appending *\/$/;"	m	struct:buffheader	access:public
buffheader::bh_first	vim/vim/src/structs.h	/^    buffblock_T	bh_first;	\/* first (dummy) block of list *\/$/;"	m	struct:buffheader	access:public
buffheader::bh_index	vim/vim/src/structs.h	/^    int		bh_index;	\/* index for reading *\/$/;"	m	struct:buffheader	access:public
buffheader::bh_space	vim/vim/src/structs.h	/^    int		bh_space;	\/* space in bh_curr for appending *\/$/;"	m	struct:buffheader	access:public
buffheader_T	vim/vim/src/structs.h	/^typedef struct buffheader buffheader_T;$/;"	t	typeref:struct:buffheader
bufinfo_T	vim/vim/src/undo.c	/^} bufinfo_T;$/;"	t	typeref:struct:__anon229	file:
buflen	vim/vim/src/os_vms.c	/^    short	buflen;$/;"	m	struct:__anon26	file:	access:public
buflist_add	vim/vim/src/buffer.c	/^buflist_add(char_u *fname, int flags)$/;"	f	signature:(char_u *fname, int flags)
buflist_altfpos	vim/vim/src/buffer.c	/^buflist_altfpos(win_T *win)$/;"	f	signature:(win_T *win)
buflist_find_by_name	vim/vim/src/evalfunc.c	/^buflist_find_by_name(char_u *name, int curtab_only)$/;"	f	signature:(char_u *name, int curtab_only)
buflist_findfpos	vim/vim/src/buffer.c	/^buflist_findfpos(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buflist_findlnum	vim/vim/src/buffer.c	/^buflist_findlnum(buf_T *buf)$/;"	f	signature:(buf_T *buf)
buflist_findname	vim/vim/src/buffer.c	/^buflist_findname(char_u *ffname)$/;"	f	signature:(char_u *ffname)
buflist_findname_exp	vim/vim/src/buffer.c	/^buflist_findname_exp(char_u *fname)$/;"	f	signature:(char_u *fname)
buflist_findname_stat	vim/vim/src/buffer.c	/^buflist_findname_stat($/;"	f	file:	signature:( char_u *ffname, stat_T *stp)
buflist_findname_stat	vim/vim/src/buffer.c	/^static buf_T	*buflist_findname_stat(char_u *ffname, stat_T *st);$/;"	p	file:	signature:(char_u *ffname, stat_T *st)
buflist_findnr	vim/vim/src/buffer.c	/^buflist_findnr(int nr)$/;"	f	signature:(int nr)
buflist_findpat	vim/vim/src/buffer.c	/^buflist_findpat($/;"	f	signature:( char_u *pattern, char_u *pattern_end, int unlisted, int diffmode UNUSED, int curtab_only)
buflist_getfile	vim/vim/src/buffer.c	/^buflist_getfile($/;"	f	signature:( int n, linenr_T lnum, int options, int forceit)
buflist_getfpos	vim/vim/src/buffer.c	/^buflist_getfpos(void)$/;"	f	signature:(void)
buflist_list	vim/vim/src/buffer.c	/^buflist_list(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
buflist_list	vim/vim/src/ex_docmd.c	108;"	d	file:
buflist_match	vim/vim/src/buffer.c	/^buflist_match($/;"	f	file:	signature:( regmatch_T *rmp, buf_T *buf, int ignore_case)
buflist_match	vim/vim/src/buffer.c	/^static char_u	*buflist_match(regmatch_T *rmp, buf_T *buf, int ignore_case);$/;"	p	file:	signature:(regmatch_T *rmp, buf_T *buf, int ignore_case)
buflist_name_nr	vim/vim/src/buffer.c	/^buflist_name_nr($/;"	f	signature:( int fnum, char_u **fname, linenr_T *lnum)
buflist_new	vim/vim/src/buffer.c	/^buflist_new($/;"	f	signature:( char_u *ffname, char_u *sfname, linenr_T lnum, int flags)
buflist_nr2name	vim/vim/src/buffer.c	/^buflist_nr2name($/;"	f	signature:( int n, int fullname, int helptail)
buflist_setfpos	vim/vim/src/buffer.c	/^buflist_setfpos($/;"	f	file:	signature:( buf_T *buf, win_T *win, linenr_T lnum, colnr_T col, int copy_options)
buflist_setfpos	vim/vim/src/buffer.c	/^static void	buflist_setfpos(buf_T *buf, win_T *win, linenr_T lnum, colnr_T col, int copy_options);$/;"	p	file:	signature:(buf_T *buf, win_T *win, linenr_T lnum, colnr_T col, int copy_options)
buflist_slash_adjust	vim/vim/src/buffer.c	/^buflist_slash_adjust(void)$/;"	f	signature:(void)
buflnum	vim/vim/src/quickfix.c	/^    linenr_T	buflnum;$/;"	m	struct:__anon13	file:	access:public
buflocal_nr	vim/vim/src/fileio.c	/^    int		    buflocal_nr;	\/* !=0 for buffer-local AutoPat *\/$/;"	m	struct:AutoPat	file:	access:public
bufp	vim/vim/src/netbeans.c	/^    buf_T		*bufp;$/;"	m	struct:nbbuf_struct	file:	access:public
bufref_T	vim/vim/src/structs.h	/^} bufref_T;$/;"	t	typeref:struct:__anon163
bufref_valid	vim/vim/src/buffer.c	/^bufref_valid(bufref_T *bufref)$/;"	f	signature:(bufref_T *bufref)
bufselfcmd	vim/vim/src/if_tcl.c	/^bufselfcmd($/;"	f	file:	signature:( ClientData ref, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
bufstate_T	vim/vim/src/structs.h	/^} bufstate_T;$/;"	t	typeref:struct:buf_state
build_all_help	build_all.sh	/^function build_all_help()$/;"	f
build_drop_cmd	vim/vim/src/main.c	/^build_drop_cmd($/;"	f	file:	signature:( int filec, char **filev, int tabs, int sendReply)
build_drop_cmd	vim/vim/src/main.c	/^static char_u *build_drop_cmd(int filec, char **filev, int tabs, int sendReply);$/;"	p	file:	signature:(int filec, char **filev, int tabs, int sendReply)
build_link_name	vim/vim/src/dosinst.c	/^build_link_name($/;"	f	signature:( char *link_path, const char *link_name, const char *shell_folder_name)
build_shortcut	vim/vim/src/dosinst.c	/^build_shortcut($/;"	f	file:	signature:( const char *name, const char *exename, const char *args, const char *shell_folder, const char *workingdir)
build_stl_str_hl	vim/vim/src/buffer.c	/^build_stl_str_hl($/;"	f	signature:( win_T *wp, char_u *out, size_t outlen, char_u *fmt, int use_sandbox UNUSED, int fillchar, int maxwidth, struct stl_hlrec *hltab, struct stl_hlrec *tabtab)
build_vimconf_dir	build_all.sh	/^function build_vimconf_dir()$/;"	f
built_in_pixmaps	vim/vim/src/gui_x11_pm.h	/^static char **(built_in_pixmaps[]) =$/;"	v
builtin_function	vim/vim/src/userfunc.c	/^builtin_function(char_u *name, int len)$/;"	f	file:	signature:(char_u *name, int len)
builtin_term	vim/vim/src/term.c	/^struct builtin_term$/;"	s	file:
builtin_term::bt_entry	vim/vim/src/term.c	/^    int		bt_entry;$/;"	m	struct:builtin_term	file:	access:public
builtin_term::bt_string	vim/vim/src/term.c	/^    char	*bt_string;$/;"	m	struct:builtin_term	file:	access:public
builtin_termcaps	vim/vim/src/term.c	/^static struct builtin_term builtin_termcaps[] =$/;"	v	typeref:struct:builtin_term	file:
bump_color	vim/vim/src/gui_xmebw.c	/^bump_color(unsigned short value)$/;"	f	file:	signature:(unsigned short value)
butproc	vim/vim/src/gui_athena.c	/^butproc($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
butproc	vim/vim/src/gui_athena.c	/^static void butproc(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
butproc	vim/vim/src/gui_motif.c	/^butproc($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
butproc	vim/vim/src/gui_motif.c	/^static void butproc(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
button	vim/vim/src/misc2.c	/^    int	    button;		\/* Which mouse button is it? *\/$/;"	m	struct:mousetable	file:	access:public
button_equal	vim/vim/src/gui_gtk.c	/^button_equal(const char *a, const char *b)$/;"	f	file:	signature:(const char *a, const char *b)
button_press_event	vim/vim/src/gui_gtk_x11.c	/^button_press_event(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, gpointer data UNUSED)
button_release_event	vim/vim/src/gui_gtk_x11.c	/^button_release_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventButton *event, gpointer data UNUSED)
bv_allocated	vim/vim/src/vim.h	/^    int		bv_allocated;	\/* bv_string was allocated *\/$/;"	m	struct:__anon242	access:public
bv_len	vim/vim/src/vim.h	/^    int		bv_len;		\/* length of bv_string *\/$/;"	m	struct:__anon242	access:public
bv_nr	vim/vim/src/vim.h	/^    long	bv_nr;$/;"	m	struct:__anon242	access:public
bv_string	vim/vim/src/vim.h	/^    char_u	*bv_string;$/;"	m	struct:__anon242	access:public
bv_type	vim/vim/src/vim.h	/^    btype_T	bv_type;$/;"	m	struct:__anon242	access:public
bval_T	vim/vim/src/vim.h	/^} bval_T;$/;"	t	typeref:struct:__anon242
bw_buf	vim/vim/src/fileio.c	/^    char_u	*bw_buf;	\/* buffer with data to be written *\/$/;"	m	struct:bw_info	file:	access:public
bw_buffer	vim/vim/src/fileio.c	/^    buf_T	*bw_buffer;	\/* buffer being written *\/$/;"	m	struct:bw_info	file:	access:public
bw_conv_buf	vim/vim/src/fileio.c	/^    char_u	*bw_conv_buf;	\/* buffer for writing converted chars *\/$/;"	m	struct:bw_info	file:	access:public
bw_conv_buflen	vim/vim/src/fileio.c	/^    int		bw_conv_buflen; \/* size of bw_conv_buf *\/$/;"	m	struct:bw_info	file:	access:public
bw_conv_error	vim/vim/src/fileio.c	/^    int		bw_conv_error;	\/* set for conversion error *\/$/;"	m	struct:bw_info	file:	access:public
bw_conv_error_lnum	vim/vim/src/fileio.c	/^    linenr_T	bw_conv_error_lnum;  \/* first line with error or zero *\/$/;"	m	struct:bw_info	file:	access:public
bw_fd	vim/vim/src/fileio.c	/^    int		bw_fd;		\/* file descriptor *\/$/;"	m	struct:bw_info	file:	access:public
bw_first	vim/vim/src/fileio.c	/^    int		bw_first;	\/* first write call *\/$/;"	m	struct:bw_info	file:	access:public
bw_flags	vim/vim/src/fileio.c	/^    int		bw_flags;	\/* FIO_ flags *\/$/;"	m	struct:bw_info	file:	access:public
bw_iconv_fd	vim/vim/src/fileio.c	/^    iconv_t	bw_iconv_fd;	\/* descriptor for iconv() or -1 *\/$/;"	m	struct:bw_info	file:	access:public
bw_info	vim/vim/src/fileio.c	/^struct bw_info$/;"	s	file:
bw_info::bw_buf	vim/vim/src/fileio.c	/^    char_u	*bw_buf;	\/* buffer with data to be written *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_buffer	vim/vim/src/fileio.c	/^    buf_T	*bw_buffer;	\/* buffer being written *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_conv_buf	vim/vim/src/fileio.c	/^    char_u	*bw_conv_buf;	\/* buffer for writing converted chars *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_conv_buflen	vim/vim/src/fileio.c	/^    int		bw_conv_buflen; \/* size of bw_conv_buf *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_conv_error	vim/vim/src/fileio.c	/^    int		bw_conv_error;	\/* set for conversion error *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_conv_error_lnum	vim/vim/src/fileio.c	/^    linenr_T	bw_conv_error_lnum;  \/* first line with error or zero *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_fd	vim/vim/src/fileio.c	/^    int		bw_fd;		\/* file descriptor *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_first	vim/vim/src/fileio.c	/^    int		bw_first;	\/* first write call *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_flags	vim/vim/src/fileio.c	/^    int		bw_flags;	\/* FIO_ flags *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_iconv_fd	vim/vim/src/fileio.c	/^    iconv_t	bw_iconv_fd;	\/* descriptor for iconv() or -1 *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_len	vim/vim/src/fileio.c	/^    int		bw_len;		\/* length of data *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_rest	vim/vim/src/fileio.c	/^    char_u	bw_rest[CONV_RESTLEN]; \/* not converted bytes *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_restlen	vim/vim/src/fileio.c	/^    int		bw_restlen;	\/* nr of bytes in bw_rest[] *\/$/;"	m	struct:bw_info	file:	access:public
bw_info::bw_start_lnum	vim/vim/src/fileio.c	/^    linenr_T	bw_start_lnum;  \/* line number at start of buffer *\/$/;"	m	struct:bw_info	file:	access:public
bw_len	vim/vim/src/fileio.c	/^    int		bw_len;		\/* length of data *\/$/;"	m	struct:bw_info	file:	access:public
bw_rest	vim/vim/src/fileio.c	/^    char_u	bw_rest[CONV_RESTLEN]; \/* not converted bytes *\/$/;"	m	struct:bw_info	file:	access:public
bw_restlen	vim/vim/src/fileio.c	/^    int		bw_restlen;	\/* nr of bytes in bw_rest[] *\/$/;"	m	struct:bw_info	file:	access:public
bw_start_lnum	vim/vim/src/fileio.c	/^    linenr_T	bw_start_lnum;  \/* line number at start of buffer *\/$/;"	m	struct:bw_info	file:	access:public
by_signal	vim/vim/src/gui.h	/^    gboolean	     by_signal;     \/* cause of draw operation *\/$/;"	m	struct:Gui	access:public
byte2cells	vim/vim/src/charset.c	/^byte2cells(int b)$/;"	f	signature:(int b)
byte_in_str	vim/vim/src/spell.c	/^byte_in_str(char_u *str, int n)$/;"	f	signature:(char_u *str, int n)
byteidx	vim/vim/src/evalfunc.c	/^byteidx(typval_T *argvars, typval_T *rettv, int comp UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int comp UNUSED)
byteidx	vim/vim/src/evalfunc.c	/^static void byteidx(typval_T *argvars, typval_T *rettv, int comp);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv, int comp)
bytes2offset	vim/vim/src/spell.c	/^bytes2offset(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
bytes_printed	vim/vim/src/hardcopy.c	/^    long_u	bytes_printed;	    \/* bytes printed so far *\/$/;"	m	struct:__anon212	file:	access:public
bytes_remaining	vim/vim/src/libvterm/src/encoding.c	/^  int bytes_remaining;$/;"	m	struct:UTF8DecoderData	file:	access:public
bytes_total	vim/vim/src/libvterm/src/encoding.c	/^  int bytes_total;$/;"	m	struct:UTF8DecoderData	file:	access:public
c	vim/vim/src/iid_ole.c	/^    unsigned char  c[8];$/;"	m	struct:_IID	file:	access:public
c	vim/vim/src/regexp.c	/^    int a, b, c;$/;"	m	struct:__anon131	file:	access:public
c	vim/vim/src/regexp.h	/^    int			c;$/;"	m	struct:nfa_state	access:public
cBuffer	vim/vim/src/if_ruby.c	/^static VALUE cBuffer;$/;"	v	file:
cRefCount_	vim/vim/src/gui_dwrite.cpp	/^    long cRefCount_;$/;"	m	class:FINAL	file:	access:private
cVimWindow	vim/vim/src/if_ruby.c	/^static VALUE cVimWindow;$/;"	v	file:
c_cedilla	vim/vim/src/regexp_nfa.c	789;"	d	file:
c_color	vim/vim/src/xpm/include/xpm.h	/^    char *c_color;		\/* color default *\/$/;"	m	struct:__anon90	access:public
calc_hist_idx	vim/vim/src/ex_getln.c	/^calc_hist_idx(int histype, int num)$/;"	f	file:	signature:(int histype, int num)
calc_hist_idx	vim/vim/src/ex_getln.c	/^static int	calc_hist_idx(int histype, int num);$/;"	p	file:	signature:(int histype, int num)
call_PyObject_Free	vim/vim/src/if_python3.c	/^call_PyObject_Free(void *p)$/;"	f	file:	signature:(void *p)
call_PyType_GenericAlloc	vim/vim/src/if_python3.c	/^call_PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)$/;"	f	file:	signature:(PyTypeObject *type, Py_ssize_t nitems)
call_PyType_GenericNew	vim/vim/src/if_python3.c	/^call_PyType_GenericNew(PyTypeObject *type, PyObject *args, PyObject *kwds)$/;"	f	file:	signature:(PyTypeObject *type, PyObject *args, PyObject *kwds)
call_func	vim/vim/src/userfunc.c	/^call_func($/;"	f	signature:( char_u *funcname, int len, typval_T *rettv, int argcount_in, typval_T *argvars_in, int (* argv_func)(int, typval_T *, int), linenr_T firstline, linenr_T lastline, int *doesrange, int evaluate, partial_T *partial, dict_T *selfdict_in)
call_func_retlist	vim/vim/src/eval.c	/^call_func_retlist($/;"	f	signature:( char_u *func, int argc, char_u **argv, int safe)
call_func_retnr	vim/vim/src/eval.c	/^call_func_retnr($/;"	f	signature:( char_u *func, int argc, char_u **argv, int safe)
call_func_retstr	vim/vim/src/eval.c	/^call_func_retstr($/;"	f	signature:( char_u *func, int argc, char_u **argv, int safe)
call_internal_func	vim/vim/src/evalfunc.c	/^call_internal_func($/;"	f	signature:( char_u *name, int argcount, typval_T *argvars, typval_T *rettv)
call_load_module	vim/vim/src/if_py_both.h	/^call_load_module(char *name, int len, PyObject *find_module_result)$/;"	f	signature:(char *name, int len, PyObject *find_module_result)
call_shell	vim/vim/src/misc2.c	/^call_shell(char_u *cmd, int opt)$/;"	f	signature:(char_u *cmd, int opt)
call_user_expand_func	vim/vim/src/ex_getln.c	/^call_user_expand_func($/;"	f	file:	signature:( void *(*user_expand_func)(char_u *, int, char_u **, int), expand_T *xp, int *num_file, char_u ***file)
call_user_expand_func	vim/vim/src/ex_getln.c	/^static void * call_user_expand_func(void *(*user_expand_func)(char_u *, int, char_u **, int), expand_T	*xp, int *num_file, char_u ***file);$/;"	p	file:	signature:(void *(*user_expand_func)(char_u *, int, char_u **, int), expand_T *xp, int *num_file, char_u ***file)
call_user_func	vim/vim/src/userfunc.c	/^call_user_func($/;"	f	file:	signature:( ufunc_T *fp, int argcount, typval_T *argvars, typval_T *rettv, linenr_T firstline, linenr_T lastline, dict_T *selfdict)
call_vim_function	vim/vim/src/eval.c	/^call_vim_function($/;"	f	signature:( char_u *func, int argc, char_u **argv, int safe, int str_arg_only, typval_T *rettv)
callable	vim/vim/src/if_py_both.h	/^    PyObject	*callable;$/;"	m	struct:__anon98	access:public
callbacks	vim/vim/src/libvterm/src/screen.c	/^  const VTermScreenCallbacks *callbacks;$/;"	m	struct:VTermScreen	file:	access:public
callbacks	vim/vim/src/libvterm/src/vterm_internal.h	/^  const VTermStateCallbacks *callbacks;$/;"	m	struct:VTermState	access:public
called_emsg	vim/vim/src/globals.h	/^EXTERN int	called_emsg;		    \/* always set by emsg() *\/$/;"	v
caller	vim/vim/src/structs.h	/^    funccall_T	*caller;	\/* calling function or NULL *\/$/;"	m	struct:funccall_S	access:public
canF_Ljoin	vim/vim/src/farsi.c	/^canF_Ljoin(int c)$/;"	f	file:	signature:(int c)
canF_Rjoin	vim/vim/src/farsi.c	/^canF_Rjoin(int c)$/;"	f	file:	signature:(int c)
can_abandon	vim/vim/src/ex_cmds2.c	/^can_abandon(buf_T *buf, int forceit)$/;"	f	signature:(buf_T *buf, int forceit)
can_be_compound	vim/vim/src/spell.c	/^can_be_compound($/;"	f	file:	signature:( trystate_T *sp, slang_T *slang, char_u *compflags, int flag)
can_be_compound	vim/vim/src/spell.c	/^static int can_be_compound(trystate_T *sp, slang_T *slang, char_u *compflags, int flag);$/;"	p	file:	signature:(trystate_T *sp, slang_T *slang, char_u *compflags, int flag)
can_bs	vim/vim/src/option.c	/^can_bs($/;"	f	signature:( int what)
can_cindent	vim/vim/src/edit.c	/^static int	can_cindent;		\/* may do cindenting on this line *\/$/;"	v	file:
can_clear	vim/vim/src/screen.c	/^can_clear(char_u *p)$/;"	f	signature:(char_u *p)
can_compound	vim/vim/src/spell.c	/^can_compound(slang_T *slang, char_u *word, char_u *flags)$/;"	f	file:	signature:(slang_T *slang, char_u *word, char_u *flags)
can_compound	vim/vim/src/spell.c	/^static int can_compound(slang_T *slang, char_u *word, char_u *flags);$/;"	p	file:	signature:(slang_T *slang, char_u *word, char_u *flags)
can_f_submatch	vim/vim/src/regexp.c	/^static int can_f_submatch = FALSE;	\/* TRUE when submatch() can be used *\/$/;"	v	file:
can_free_funccal	vim/vim/src/userfunc.c	/^can_free_funccal(funccall_T *fc, int copyID)$/;"	f	file:	signature:(funccall_T *fc, int copyID)
can_get_termresponse	vim/vim/src/term.c	/^can_get_termresponse()$/;"	f	file:
can_si	vim/vim/src/globals.h	/^EXTERN int	can_si INIT(= FALSE);$/;"	v
can_si_back	vim/vim/src/globals.h	/^EXTERN int	can_si_back INIT(= FALSE);$/;"	v
can_update_cursor	vim/vim/src/gui.c	/^static int can_update_cursor = TRUE; \/* can display the cursor *\/$/;"	v	file:
can_write_buf_line	vim/vim/src/channel.c	/^can_write_buf_line(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
cancel	vim/vim/src/gui_motif.c	/^    Widget cancel;$/;"	m	struct:_SharedFindReplace	file:	access:public
cancel	vim/vim/src/gui_xmdlg.c	/^    Widget	cancel;$/;"	m	struct:_SharedFontSelData	file:	access:public
cancelBalloon	vim/vim/src/gui_beval.c	/^cancelBalloon(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
cancelBalloon	vim/vim/src/gui_beval.c	/^static void cancelBalloon(BalloonEval *);$/;"	p	file:	signature:(BalloonEval *)
cancel_callback	vim/vim/src/gui_xmdlg.c	/^cancel_callback(Widget w UNUSED,$/;"	f	file:	signature:(Widget w UNUSED, SharedFontSelData *data, XmListCallbackStruct *call_data UNUSED)
canon	vim/vim/src/mbyte.c	/^{   char *name;		int canon;}$/;"	m	struct:__anon2	file:	access:public
cansplit	vim/vim/src/if_cscope.h	/^    int	    cansplit;		\/* if supports splitting window *\/$/;"	m	struct:__anon68	access:public
captype	vim/vim/src/spell.c	/^captype($/;"	f	signature:( char_u *word, char_u *end)
cat_func_name	vim/vim/src/userfunc.c	/^cat_func_name(char_u *buf, ufunc_T *fp)$/;"	f	file:	signature:(char_u *buf, ufunc_T *fp)
cat_prefix_varname	vim/vim/src/eval.c	/^cat_prefix_varname(int prefix, char_u *name)$/;"	f	file:	signature:(int prefix, char_u *name)
cat_prefix_varname	vim/vim/src/eval.c	/^static char_u *cat_prefix_varname(int prefix, char_u *name);$/;"	p	file:	signature:(int prefix, char_u *name)
catch_exception	vim/vim/src/ex_eval.c	/^catch_exception(except_T *excp)$/;"	f	file:	signature:(except_T *excp)
catch_exception	vim/vim/src/ex_eval.c	/^static void	catch_exception(except_T *excp);$/;"	p	file:	signature:(except_T *excp)
catch_int_signal	vim/vim/src/os_unix.c	/^catch_int_signal(void)$/;"	f	file:	signature:(void)
catch_int_signal	vim/vim/src/os_unix.c	/^static void catch_int_signal(void);$/;"	p	file:	signature:(void)
catch_signals	vim/vim/src/os_unix.c	/^catch_signals($/;"	f	file:	signature:( RETSIGTYPE (func_deadly)), RETSIGTYPE (*func_other)())
catch_signals	vim/vim/src/os_unix.c	/^static void catch_signals(RETSIGTYPE (*func_deadly)(), RETSIGTYPE (*func_other)());$/;"	p	file:	signature:(RETSIGTYPE (func_deadly)), RETSIGTYPE (*func_other)())
caught	vim/vim/src/structs.h	/^    except_T		*caught;	\/* next exception on the caught stack *\/$/;"	m	struct:vim_exception	access:public
caught_stack	vim/vim/src/ex_docmd.c	/^    except_T	*caught_stack;$/;"	m	struct:dbg_stuff	file:	access:public
caught_stack	vim/vim/src/globals.h	/^EXTERN except_T *caught_stack INIT(= NULL);$/;"	v
cause_abort	vim/vim/src/ex_eval.c	/^static int cause_abort = FALSE;$/;"	v	file:
cause_errthrow	vim/vim/src/ex_eval.c	/^cause_errthrow($/;"	f	signature:( char_u *mesg, int severe, int *ignore)
cb	vim/vim/src/structs.h	/^    void	(*cb)(vimmenu_T *);	    \/* Call-back routine *\/$/;"	m	struct:VimMenu	access:public
cbFiles	vim/vim/src/GvimExt/gvimext.cpp	/^UINT cbFiles = 0;$/;"	v
cbSize	vim/vim/src/gui_w32.c	/^	UINT cbSize;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
cbSize	vim/vim/src/gui_w32.c	/^    DWORD cbSize;$/;"	m	struct:_DllVersionInfo	file:	access:public
cb_screen	vim/vim/src/libvterm/bin/unterm.c	/^static VTermScreenCallbacks cb_screen = {$/;"	v	file:
cbdata	vim/vim/src/libvterm/src/screen.c	/^  void *cbdata;$/;"	m	struct:VTermScreen	file:	access:public
cbdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *cbdata;$/;"	m	struct:VTerm	access:public
cbdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *cbdata;$/;"	m	struct:VTermState	access:public
cbq_S	vim/vim/src/structs.h	/^struct cbq_S$/;"	s
cbq_S::cq_callback	vim/vim/src/structs.h	/^    char_u	*cq_callback;$/;"	m	struct:cbq_S	access:public
cbq_S::cq_next	vim/vim/src/structs.h	/^    cbq_T	*cq_next;$/;"	m	struct:cbq_S	access:public
cbq_S::cq_partial	vim/vim/src/structs.h	/^    partial_T	*cq_partial;$/;"	m	struct:cbq_S	access:public
cbq_S::cq_prev	vim/vim/src/structs.h	/^    cbq_T	*cq_prev;$/;"	m	struct:cbq_S	access:public
cbq_S::cq_seq_nr	vim/vim/src/structs.h	/^    int		cq_seq_nr;$/;"	m	struct:cbq_S	access:public
cbq_T	vim/vim/src/structs.h	/^typedef struct cbq_S cbq_T;$/;"	t	typeref:struct:cbq_S
ccheck_abbr	vim/vim/src/ex_getln.c	/^ccheck_abbr(int c)$/;"	f	file:	signature:(int c)
ccheck_abbr	vim/vim/src/ex_getln.c	/^static int	ccheck_abbr(int);$/;"	p	file:	signature:(int)
ccline	vim/vim/src/ex_getln.c	/^static struct cmdline_info ccline;$/;"	v	typeref:struct:cmdline_info	file:
cedit_key	vim/vim/src/globals.h	/^EXTERN int	cedit_key INIT(= -1);	\/* key value of 'cedit' option *\/$/;"	v
cell2attr	vim/vim/src/terminal.c	/^cell2attr(VTermScreenCell *cell)$/;"	f	file:	signature:(VTermScreenCell *cell)
cellWidth	vim/vim/src/gui_dwrite.cpp	/^    FLOAT cellWidth;$/;"	m	struct:GdiTextRendererContext	file:	access:public
cf	vim/vim/src/if_ole.cpp	/^static CVimCF *cf = 0;$/;"	v	file:
cf_id	vim/vim/src/if_ole.cpp	/^static unsigned long cf_id = 0;$/;"	v	file:
cfb_buffer	vim/vim/src/blowfish.c	/^    char_u	cfb_buffer[BF_MAX_CFB_LEN]; \/* up to 64 bytes used *\/$/;"	m	struct:__anon72	file:	access:public
cfb_len	vim/vim/src/blowfish.c	/^    int		cfb_len;	    \/* size of cfb_buffer actually used *\/$/;"	m	struct:__anon72	file:	access:public
cflags	vim/vim/src/GvimExt/Makefile	/^cflags = $(cflags) $(CPUARG)$/;"	m
chAlone	vim/vim/src/os_win32.c	/^    int	    chAlone;$/;"	m	struct:__anon211	file:	access:public
chAlt	vim/vim/src/os_win32.c	/^    int	    chAlt;$/;"	m	struct:__anon211	file:	access:public
chCtrl	vim/vim/src/os_win32.c	/^    int	    chCtrl;$/;"	m	struct:__anon211	file:	access:public
chShift	vim/vim/src/os_win32.c	/^    int	    chShift;$/;"	m	struct:__anon211	file:	access:public
ch_block_id	vim/vim/src/structs.h	/^    int		ch_block_id;	\/* ID that channel_read_json_block() is$/;"	m	struct:__anon196	access:public
ch_block_write	vim/vim/src/structs.h	/^    int		ch_block_write;	\/* for testing: 0 when not used, -1 when write$/;"	m	struct:__anon196	access:public
ch_buf_append	vim/vim/src/structs.h	/^    int		ch_buf_append;	\/* write appended lines instead top-bot *\/$/;"	m	struct:__anon196	access:public
ch_buf_bot	vim/vim/src/structs.h	/^    linenr_T	ch_buf_bot;	\/* last line to send *\/$/;"	m	struct:__anon196	access:public
ch_buf_top	vim/vim/src/structs.h	/^    linenr_T	ch_buf_top;	\/* next line to send *\/$/;"	m	struct:__anon196	access:public
ch_bufref	vim/vim/src/structs.h	/^    bufref_T	ch_bufref;	\/* buffer to read from or write to *\/$/;"	m	struct:__anon196	access:public
ch_callback	vim/vim/src/structs.h	/^    char_u	*ch_callback;	\/* call when a msg is not handled *\/$/;"	m	struct:__anon196	access:public
ch_callback	vim/vim/src/structs.h	/^    char_u	*ch_callback;	\/* call when any msg is not handled *\/$/;"	m	struct:channel_S	access:public
ch_cb_head	vim/vim/src/structs.h	/^    cbq_T	ch_cb_head;	\/* dummy node for per-request callbacks *\/$/;"	m	struct:__anon196	access:public
ch_close_cb	vim/vim/src/structs.h	/^    char_u	*ch_close_cb;	\/* call when channel is closed *\/$/;"	m	struct:channel_S	access:public
ch_close_part	vim/vim/src/channel.c	/^ch_close_part(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
ch_close_part_on_error	vim/vim/src/channel.c	/^ch_close_part_on_error($/;"	f	file:	signature:( channel_T *channel, ch_part_T part, int is_err, char *func)
ch_close_partial	vim/vim/src/structs.h	/^    partial_T	*ch_close_partial;$/;"	m	struct:channel_S	access:public
ch_copyID	vim/vim/src/structs.h	/^    int		ch_copyID;$/;"	m	struct:channel_S	access:public
ch_deadline	vim/vim/src/structs.h	/^    DWORD	ch_deadline;$/;"	m	struct:__anon196	access:public
ch_deadline	vim/vim/src/structs.h	/^    struct timeval ch_deadline;$/;"	m	struct:__anon196	typeref:struct:__anon196::timeval	access:public
ch_drop_never	vim/vim/src/structs.h	/^    int		ch_drop_never;$/;"	m	struct:channel_S	access:public
ch_error	vim/vim/src/channel.c	/^ch_error(channel_T *ch, char *msg)$/;"	f	file:	signature:(channel_T *ch, char *msg)
ch_error	vim/vim/src/structs.h	/^    int		ch_error;	\/* When TRUE an error was reported.  Avoids$/;"	m	struct:channel_S	access:public
ch_errorn	vim/vim/src/channel.c	/^ch_errorn(channel_T *ch, char *msg, int nr)$/;"	f	file:	signature:(channel_T *ch, char *msg, int nr)
ch_errors	vim/vim/src/channel.c	/^ch_errors(channel_T *ch, char *msg, char *arg)$/;"	f	file:	signature:(channel_T *ch, char *msg, char *arg)
ch_expr_common	vim/vim/src/channel.c	/^ch_expr_common(typval_T *argvars, typval_T *rettv, int eval)$/;"	f	signature:(typval_T *argvars, typval_T *rettv, int eval)
ch_fd	vim/vim/src/structs.h	/^    sock_T	ch_fd;	    \/* socket\/stdin\/stdout\/stderr, -1 if not used *\/$/;"	m	struct:__anon196	access:public
ch_head	vim/vim/src/structs.h	/^    readq_T	ch_head;	\/* header for circular raw read queue *\/$/;"	m	struct:__anon196	access:public
ch_hostname	vim/vim/src/structs.h	/^    char	*ch_hostname;	\/* only for socket, allocated *\/$/;"	m	struct:channel_S	access:public
ch_id	vim/vim/src/structs.h	/^    int		ch_id;		\/* ID of the channel *\/$/;"	m	struct:channel_S	access:public
ch_inputHandler	vim/vim/src/structs.h	/^    XtInputId	ch_inputHandler; \/* Cookie for input *\/$/;"	m	struct:__anon196	access:public
ch_inputHandler	vim/vim/src/structs.h	/^    gint	ch_inputHandler; \/* Cookie for input *\/$/;"	m	struct:__anon196	access:public
ch_io	vim/vim/src/structs.h	/^    job_io_T	ch_io;$/;"	m	struct:__anon196	access:public
ch_job	vim/vim/src/structs.h	/^    job_T	*ch_job;	\/* Job that uses this channel; this does not$/;"	m	struct:channel_S	access:public
ch_job_killed	vim/vim/src/structs.h	/^    int		ch_job_killed;	\/* TRUE when there was a job and it was killed$/;"	m	struct:channel_S	access:public
ch_json_head	vim/vim/src/structs.h	/^    jsonq_T	ch_json_head;	\/* header for circular json read queue *\/$/;"	m	struct:__anon196	access:public
ch_last_msg_id	vim/vim/src/structs.h	/^    int		ch_last_msg_id;	\/* ID of the last message *\/$/;"	m	struct:channel_S	access:public
ch_log	vim/vim/src/channel.c	/^ch_log(channel_T *ch, char *msg)$/;"	f	signature:(channel_T *ch, char *msg)
ch_log_active	vim/vim/src/channel.c	/^ch_log_active(void)$/;"	f	signature:(void)
ch_log_lead	vim/vim/src/channel.c	/^ch_log_lead(char *what, channel_T *ch)$/;"	f	file:	signature:(char *what, channel_T *ch)
ch_logfile	vim/vim/src/channel.c	/^ch_logfile(char_u *fname, char_u *opt)$/;"	f	signature:(char_u *fname, char_u *opt)
ch_logn	vim/vim/src/channel.c	/^ch_logn(channel_T *ch, char *msg, int nr)$/;"	f	signature:(channel_T *ch, char *msg, int nr)
ch_logs	vim/vim/src/channel.c	/^ch_logs(channel_T *ch, char *msg, char *name)$/;"	f	signature:(channel_T *ch, char *msg, char *name)
ch_logsn	vim/vim/src/channel.c	/^ch_logsn(channel_T *ch, char *msg, char *name, int nr)$/;"	f	file:	signature:(channel_T *ch, char *msg, char *name, int nr)
ch_mode	vim/vim/src/structs.h	/^    ch_mode_T	ch_mode;$/;"	m	struct:__anon196	access:public
ch_mode_T	vim/vim/src/structs.h	/^} ch_mode_T;$/;"	t	typeref:enum:__anon193
ch_nb_close_cb	vim/vim/src/structs.h	/^    void	(*ch_nb_close_cb)(void);$/;"	m	struct:channel_S	access:public
ch_next	vim/vim/src/structs.h	/^    channel_T	*ch_next;$/;"	m	struct:channel_S	access:public
ch_nomod_error	vim/vim/src/structs.h	/^    int		ch_nomod_error;	\/* TRUE when e_modifiable was given *\/$/;"	m	struct:__anon196	access:public
ch_nomodifiable	vim/vim/src/structs.h	/^    int		ch_nomodifiable; \/* TRUE when buffer can be 'nomodifiable' *\/$/;"	m	struct:__anon196	access:public
ch_part	vim/vim/src/structs.h	/^    chanpart_T	ch_part[PART_COUNT]; \/* info for socket, out, err and in *\/$/;"	m	struct:channel_S	access:public
ch_part_T	vim/vim/src/structs.h	/^} ch_part_T;$/;"	t	typeref:enum:__anon195
ch_partial	vim/vim/src/structs.h	/^    partial_T	*ch_partial;$/;"	m	struct:__anon196	access:public
ch_partial	vim/vim/src/structs.h	/^    partial_T	*ch_partial;$/;"	m	struct:channel_S	access:public
ch_poll_idx	vim/vim/src/structs.h	/^    int		ch_poll_idx;	\/* used by channel_poll_setup() *\/$/;"	m	struct:__anon196	access:public
ch_port	vim/vim/src/structs.h	/^    int		ch_port;	\/* only for socket *\/$/;"	m	struct:channel_S	access:public
ch_prev	vim/vim/src/structs.h	/^    channel_T	*ch_prev;$/;"	m	struct:channel_S	access:public
ch_raw_common	vim/vim/src/channel.c	/^ch_raw_common(typval_T *argvars, typval_T *rettv, int eval)$/;"	f	signature:(typval_T *argvars, typval_T *rettv, int eval)
ch_refcount	vim/vim/src/structs.h	/^    int		ch_refcount;	\/* reference count *\/$/;"	m	struct:channel_S	access:public
ch_timeout	vim/vim/src/structs.h	/^    int		ch_timeout;	\/* request timeout in msec *\/$/;"	m	struct:__anon196	access:public
ch_to_be_closed	vim/vim/src/structs.h	/^    int		ch_to_be_closed; \/* bitset of readable fds to be closed.$/;"	m	struct:channel_S	access:public
ch_to_be_freed	vim/vim/src/structs.h	/^    int		ch_to_be_freed; \/* When TRUE channel must be freed when it's$/;"	m	struct:channel_S	access:public
ch_wait_len	vim/vim/src/structs.h	/^    size_t	ch_wait_len;$/;"	m	struct:__anon196	access:public
change_bat_choice	vim/vim/src/dosinst.c	/^change_bat_choice(int idx)$/;"	f	file:	signature:(int idx)
change_compatible	vim/vim/src/option.c	/^change_compatible(int on)$/;"	f	signature:(int on)
change_directories_choice	vim/vim/src/dosinst.c	/^change_directories_choice(int idx)$/;"	f	file:	signature:(int idx)
change_drive	vim/vim/src/dosinst.h	/^change_drive(int drive)$/;"	f	signature:(int drive)
change_indent	vim/vim/src/edit.c	/^change_indent($/;"	f	signature:( int type, int amount, int round, int replaced, int call_changed_bytes)
change_main_bat_choice	vim/vim/src/dosinst.c	/^change_main_bat_choice(int idx)$/;"	f	file:	signature:(int idx)
change_mouse_choice	vim/vim/src/dosinst.c	/^change_mouse_choice(int idx)$/;"	f	file:	signature:(int idx)
change_openwith_choice	vim/vim/src/dosinst.c	/^change_openwith_choice(int idx)$/;"	f	file:	signature:(int idx)
change_popup_choice	vim/vim/src/dosinst.c	/^change_popup_choice(int idx)$/;"	f	file:	signature:(int idx)
change_remap_choice	vim/vim/src/dosinst.c	/^change_remap_choice(int idx)$/;"	f	file:	signature:(int idx)
change_run_choice	vim/vim/src/dosinst.c	/^change_run_choice(int idx)$/;"	f	file:	signature:(int idx)
change_vimrc_choice	vim/vim/src/dosinst.c	/^change_vimrc_choice(int idx)$/;"	f	file:	signature:(int idx)
change_warning	vim/vim/src/misc1.c	/^change_warning($/;"	f	signature:( int col)
changed	vim/vim/src/gui_at_fs.c	/^    int		changed;$/;"	m	struct:__anon236	file:	access:public
changed	vim/vim/src/misc1.c	/^changed(void)$/;"	f	signature:(void)
changedOneline	vim/vim/src/misc1.c	/^changedOneline(buf_T *buf, linenr_T lnum)$/;"	f	file:	signature:(buf_T *buf, linenr_T lnum)
changedOneline	vim/vim/src/misc1.c	/^static void changedOneline(buf_T *buf, linenr_T lnum);$/;"	p	file:	signature:(buf_T *buf, linenr_T lnum)
changed_bytes	vim/vim/src/misc1.c	/^changed_bytes(linenr_T lnum, colnr_T col)$/;"	f	signature:(linenr_T lnum, colnr_T col)
changed_cline_bef_curs	vim/vim/src/move.c	/^changed_cline_bef_curs(void)$/;"	f	signature:(void)
changed_cline_bef_curs_win	vim/vim/src/move.c	/^changed_cline_bef_curs_win(win_T *wp)$/;"	f	signature:(win_T *wp)
changed_common	vim/vim/src/misc1.c	/^changed_common($/;"	f	file:	signature:( linenr_T lnum, colnr_T col, linenr_T lnume, long xtra)
changed_common	vim/vim/src/misc1.c	/^static void changed_common(linenr_T lnum, colnr_T col, linenr_T lnume, long xtra);$/;"	p	file:	signature:(linenr_T lnum, colnr_T col, linenr_T lnume, long xtra)
changed_int	vim/vim/src/misc1.c	/^changed_int(void)$/;"	f	signature:(void)
changed_line_abv_curs	vim/vim/src/move.c	/^changed_line_abv_curs(void)$/;"	f	signature:(void)
changed_line_abv_curs_win	vim/vim/src/move.c	/^changed_line_abv_curs_win(win_T *wp)$/;"	f	signature:(win_T *wp)
changed_lines	vim/vim/src/misc1.c	/^changed_lines($/;"	f	signature:( linenr_T lnum, colnr_T col, linenr_T lnume, long xtra)
changed_lines_buf	vim/vim/src/misc1.c	/^changed_lines_buf($/;"	f	file:	signature:( buf_T *buf, linenr_T lnum, linenr_T lnume, long xtra)
changed_lines_buf	vim/vim/src/misc1.c	/^static void changed_lines_buf(buf_T *buf, linenr_T lnum, linenr_T lnume, long xtra);$/;"	p	file:	signature:(buf_T *buf, linenr_T lnum, linenr_T lnume, long xtra)
changed_window_setting	vim/vim/src/move.c	/^changed_window_setting(void)$/;"	f	signature:(void)
changed_window_setting_win	vim/vim/src/move.c	/^changed_window_setting_win(win_T *wp)$/;"	f	signature:(win_T *wp)
changefunc	vim/vim/src/dosinst.c	/^    void    (*changefunc)(int idx);	\/* function to change this choice *\/$/;"	m	struct:choice	file:	access:public
channel_S	vim/vim/src/structs.h	/^struct channel_S {$/;"	s
channel_S::ch_callback	vim/vim/src/structs.h	/^    char_u	*ch_callback;	\/* call when any msg is not handled *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_close_cb	vim/vim/src/structs.h	/^    char_u	*ch_close_cb;	\/* call when channel is closed *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_close_partial	vim/vim/src/structs.h	/^    partial_T	*ch_close_partial;$/;"	m	struct:channel_S	access:public
channel_S::ch_copyID	vim/vim/src/structs.h	/^    int		ch_copyID;$/;"	m	struct:channel_S	access:public
channel_S::ch_drop_never	vim/vim/src/structs.h	/^    int		ch_drop_never;$/;"	m	struct:channel_S	access:public
channel_S::ch_error	vim/vim/src/structs.h	/^    int		ch_error;	\/* When TRUE an error was reported.  Avoids$/;"	m	struct:channel_S	access:public
channel_S::ch_hostname	vim/vim/src/structs.h	/^    char	*ch_hostname;	\/* only for socket, allocated *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_id	vim/vim/src/structs.h	/^    int		ch_id;		\/* ID of the channel *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_job	vim/vim/src/structs.h	/^    job_T	*ch_job;	\/* Job that uses this channel; this does not$/;"	m	struct:channel_S	access:public
channel_S::ch_job_killed	vim/vim/src/structs.h	/^    int		ch_job_killed;	\/* TRUE when there was a job and it was killed$/;"	m	struct:channel_S	access:public
channel_S::ch_last_msg_id	vim/vim/src/structs.h	/^    int		ch_last_msg_id;	\/* ID of the last message *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_nb_close_cb	vim/vim/src/structs.h	/^    void	(*ch_nb_close_cb)(void);$/;"	m	struct:channel_S	access:public
channel_S::ch_next	vim/vim/src/structs.h	/^    channel_T	*ch_next;$/;"	m	struct:channel_S	access:public
channel_S::ch_part	vim/vim/src/structs.h	/^    chanpart_T	ch_part[PART_COUNT]; \/* info for socket, out, err and in *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_partial	vim/vim/src/structs.h	/^    partial_T	*ch_partial;$/;"	m	struct:channel_S	access:public
channel_S::ch_port	vim/vim/src/structs.h	/^    int		ch_port;	\/* only for socket *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_prev	vim/vim/src/structs.h	/^    channel_T	*ch_prev;$/;"	m	struct:channel_S	access:public
channel_S::ch_refcount	vim/vim/src/structs.h	/^    int		ch_refcount;	\/* reference count *\/$/;"	m	struct:channel_S	access:public
channel_S::ch_to_be_closed	vim/vim/src/structs.h	/^    int		ch_to_be_closed; \/* bitset of readable fds to be closed.$/;"	m	struct:channel_S	access:public
channel_S::ch_to_be_freed	vim/vim/src/structs.h	/^    int		ch_to_be_freed; \/* When TRUE channel must be freed when it's$/;"	m	struct:channel_S	access:public
channel_T	vim/vim/src/structs.h	/^typedef struct channel_S channel_T;$/;"	t	typeref:struct:channel_S
channel_any_readahead	vim/vim/src/channel.c	/^channel_any_readahead(void)$/;"	f	signature:(void)
channel_buffer_free	vim/vim/src/channel.c	/^channel_buffer_free(buf_T *buf)$/;"	f	signature:(buf_T *buf)
channel_can_write_to	vim/vim/src/channel.c	/^channel_can_write_to(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_clear	vim/vim/src/channel.c	/^channel_clear(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_clear_one	vim/vim/src/channel.c	/^channel_clear_one(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
channel_close	vim/vim/src/channel.c	/^channel_close(channel_T *channel, int invoke_close_cb)$/;"	f	signature:(channel_T *channel, int invoke_close_cb)
channel_close_in	vim/vim/src/channel.c	/^channel_close_in(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_close_now	vim/vim/src/channel.c	/^channel_close_now(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_collapse	vim/vim/src/channel.c	/^channel_collapse(channel_T *channel, ch_part_T part, int want_nl)$/;"	f	signature:(channel_T *channel, ch_part_T part, int want_nl)
channel_consume	vim/vim/src/channel.c	/^channel_consume(channel_T *channel, ch_part_T part, int len)$/;"	f	signature:(channel_T *channel, ch_part_T part, int len)
channel_exe_cmd	vim/vim/src/channel.c	/^channel_exe_cmd(channel_T *channel, ch_part_T part, typval_T *argv)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part, typval_T *argv)
channel_fd2channel	vim/vim/src/channel.c	/^channel_fd2channel(sock_T fd, ch_part_T *partp)$/;"	f	signature:(sock_T fd, ch_part_T *partp)
channel_fill	vim/vim/src/channel.c	/^channel_fill(js_read_T *reader)$/;"	f	file:	signature:(js_read_T *reader)
channel_fill_poll_write	vim/vim/src/channel.c	/^channel_fill_poll_write(int nfd_in, struct pollfd *fds)$/;"	f	file:	signature:(int nfd_in, struct pollfd *fds)
channel_fill_wfds	vim/vim/src/channel.c	/^channel_fill_wfds(int maxfd_arg, fd_set *wfds)$/;"	f	file:	signature:(int maxfd_arg, fd_set *wfds)
channel_first_nl	vim/vim/src/channel.c	/^channel_first_nl(readq_T *node)$/;"	f	signature:(readq_T *node)
channel_free	vim/vim/src/channel.c	/^channel_free(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_free_all	vim/vim/src/channel.c	/^channel_free_all(void)$/;"	f	signature:(void)
channel_free_channel	vim/vim/src/channel.c	/^channel_free_channel(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_free_contents	vim/vim/src/channel.c	/^channel_free_contents(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_get	vim/vim/src/channel.c	/^channel_get(channel_T *channel, ch_part_T part)$/;"	f	signature:(channel_T *channel, ch_part_T part)
channel_get_all	vim/vim/src/channel.c	/^channel_get_all(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
channel_get_json	vim/vim/src/channel.c	/^channel_get_json($/;"	f	file:	signature:( channel_T *channel, ch_part_T part, int id, int without_callback, typval_T **rettv)
channel_get_mode	vim/vim/src/channel.c	/^channel_get_mode(channel_T *channel, ch_part_T part)$/;"	f	signature:(channel_T *channel, ch_part_T part)
channel_get_timeout	vim/vim/src/channel.c	/^channel_get_timeout(channel_T *channel, ch_part_T part)$/;"	f	signature:(channel_T *channel, ch_part_T part)
channel_gui_register	vim/vim/src/channel.c	/^channel_gui_register(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_gui_register_all	vim/vim/src/channel.c	/^channel_gui_register_all(void)$/;"	f	signature:(void)
channel_gui_register_one	vim/vim/src/channel.c	/^channel_gui_register_one(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
channel_gui_unregister	vim/vim/src/channel.c	/^channel_gui_unregister(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_gui_unregister_one	vim/vim/src/channel.c	/^channel_gui_unregister_one(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
channel_handle_events	vim/vim/src/channel.c	/^channel_handle_events(void)$/;"	f	signature:(void)
channel_has_readahead	vim/vim/src/channel.c	/^channel_has_readahead(channel_T *channel, ch_part_T part)$/;"	f	signature:(channel_T *channel, ch_part_T part)
channel_info	vim/vim/src/channel.c	/^channel_info(channel_T *channel, dict_T *dict)$/;"	f	signature:(channel_T *channel, dict_T *dict)
channel_init_winsock	vim/vim/src/os_mswin.c	/^channel_init_winsock(void)$/;"	f	signature:(void)
channel_is_open	vim/vim/src/channel.c	/^channel_is_open(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_may_free	vim/vim/src/channel.c	/^channel_may_free(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_need_redraw	vim/vim/src/channel.c	/^static int channel_need_redraw = FALSE;$/;"	v	file:
channel_open	vim/vim/src/channel.c	/^channel_open($/;"	f	signature:( char *hostname, int port_in, int waittime, void (*nb_close_cb)(void))
channel_open_func	vim/vim/src/channel.c	/^channel_open_func(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
channel_parse_json	vim/vim/src/channel.c	/^channel_parse_json(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
channel_parse_messages	vim/vim/src/channel.c	/^channel_parse_messages(void)$/;"	f	signature:(void)
channel_part_info	vim/vim/src/channel.c	/^channel_part_info(channel_T *channel, dict_T *dict, char *name, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, dict_T *dict, char *name, ch_part_T part)
channel_part_read	vim/vim/src/channel.c	/^channel_part_read(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_part_send	vim/vim/src/channel.c	/^channel_part_send(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_peek	vim/vim/src/channel.c	/^channel_peek(channel_T *channel, ch_part_T part)$/;"	f	signature:(channel_T *channel, ch_part_T part)
channel_poll_check	vim/vim/src/channel.c	/^channel_poll_check(int ret_in, void *fds_in)$/;"	f	signature:(int ret_in, void *fds_in)
channel_poll_setup	vim/vim/src/channel.c	/^channel_poll_setup(int nfd_in, void *fds_in)$/;"	f	signature:(int nfd_in, void *fds_in)
channel_push_json	vim/vim/src/channel.c	/^channel_push_json(channel_T *channel, ch_part_T part, typval_T *rettv)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part, typval_T *rettv)
channel_read	vim/vim/src/channel.c	/^channel_read(channel_T *channel, ch_part_T part, char *func)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part, char *func)
channel_read	vim/vim/src/channel.c	/^static void channel_read(channel_T *channel, ch_part_T part, char *func);$/;"	p	file:	signature:(channel_T *channel, ch_part_T part, char *func)
channel_read_block	vim/vim/src/channel.c	/^channel_read_block(channel_T *channel, ch_part_T part, int timeout)$/;"	f	signature:(channel_T *channel, ch_part_T part, int timeout)
channel_read_fd	vim/vim/src/channel.c	/^channel_read_fd(int fd)$/;"	f	file:	signature:(int fd)
channel_read_json_block	vim/vim/src/channel.c	/^channel_read_json_block($/;"	f	file:	signature:( channel_T *channel, ch_part_T part, int timeout_arg, int id, typval_T **rettv)
channel_save	vim/vim/src/channel.c	/^channel_save(channel_T *channel, ch_part_T part, char_u *buf, int len,$/;"	f	file:	signature:(channel_T *channel, ch_part_T part, char_u *buf, int len, int prepend, char *lead)
channel_select_check	vim/vim/src/channel.c	/^channel_select_check(int ret_in, void *rfds_in, void *wfds_in)$/;"	f	signature:(int ret_in, void *rfds_in, void *wfds_in)
channel_select_setup	vim/vim/src/channel.c	/^channel_select_setup(int maxfd_in, void *rfds_in, void *wfds_in)$/;"	f	signature:(int maxfd_in, void *rfds_in, void *wfds_in)
channel_send	vim/vim/src/channel.c	/^channel_send($/;"	f	signature:( channel_T *channel, ch_part_T part, char_u *buf, int len, char *fun)
channel_set_job	vim/vim/src/channel.c	/^channel_set_job(channel_T *channel, job_T *job, jobopt_T *options)$/;"	f	signature:(channel_T *channel, job_T *job, jobopt_T *options)
channel_set_options	vim/vim/src/channel.c	/^channel_set_options(channel_T *channel, jobopt_T *opt)$/;"	f	signature:(channel_T *channel, jobopt_T *opt)
channel_set_pipes	vim/vim/src/channel.c	/^channel_set_pipes(channel_T *channel, sock_T in, sock_T out, sock_T err)$/;"	f	signature:(channel_T *channel, sock_T in, sock_T out, sock_T err)
channel_set_req_callback	vim/vim/src/channel.c	/^channel_set_req_callback($/;"	f	signature:( channel_T *channel, ch_part_T part, char_u *callback, partial_T *partial, int id)
channel_status	vim/vim/src/channel.c	/^channel_status(channel_T *channel, int req_part)$/;"	f	signature:(channel_T *channel, int req_part)
channel_still_useful	vim/vim/src/channel.c	/^channel_still_useful(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_unref	vim/vim/src/channel.c	/^channel_unref(channel_T *channel)$/;"	f	signature:(channel_T *channel)
channel_wait	vim/vim/src/channel.c	/^channel_wait(channel_T *channel, sock_T fd, int timeout)$/;"	f	file:	signature:(channel_T *channel, sock_T fd, int timeout)
channel_wait_result	vim/vim/src/channel.c	/^} channel_wait_result;$/;"	t	typeref:enum:__anon158	file:
channel_write_any_lines	vim/vim/src/channel.c	/^channel_write_any_lines(void)$/;"	f	signature:(void)
channel_write_in	vim/vim/src/channel.c	/^channel_write_in(channel_T *channel)$/;"	f	file:	signature:(channel_T *channel)
channel_write_new_lines	vim/vim/src/channel.c	/^channel_write_new_lines(buf_T *buf)$/;"	f	signature:(buf_T *buf)
chanpart_T	vim/vim/src/structs.h	/^} chanpart_T;$/;"	t	typeref:struct:__anon196
char1	vim/vim/src/digraph.c	/^    char_u	char1;$/;"	m	struct:digraph	file:	access:public
char2	vim/vim/src/digraph.c	/^    char_u	char2;$/;"	m	struct:digraph	file:	access:public
char2cells	vim/vim/src/charset.c	/^char2cells(int c)$/;"	f	signature:(int c)
char_ascent	vim/vim/src/gui.h	/^    int		char_ascent;	    \/* Ascent of char in pixels *\/$/;"	m	struct:Gui	access:public
char_avail	vim/vim/src/getchar.c	/^char_avail(void)$/;"	f	signature:(void)
char_height	vim/vim/src/gui.h	/^    int		char_height;	    \/* Height of char cell in pixels, includes$/;"	m	struct:Gui	access:public
char_needs_redraw	vim/vim/src/screen.c	/^char_needs_redraw(int off_from, int off_to, int cols)$/;"	f	file:	signature:(int off_from, int off_to, int cols)
char_needs_redraw	vim/vim/src/screen.c	/^static int char_needs_redraw(int off_from, int off_to, int cols);$/;"	p	file:	signature:(int off_from, int off_to, int cols)
char_to_long	vim/vim/src/memline.c	/^char_to_long(char_u *s)$/;"	f	file:	signature:(char_u *s)
char_to_long	vim/vim/src/memline.c	/^static long char_to_long(char_u *);$/;"	p	file:	signature:(char_u *)
char_to_string	vim/vim/src/gui_w32.c	/^char_to_string(int ch, char_u *string, int slen, int had_alt)$/;"	f	file:	signature:(int ch, char_u *string, int slen, int had_alt)
char_u	vim/vim/src/term.h	/^typedef unsigned char char_u;$/;"	t
char_u	vim/vim/src/vim.h	/^typedef unsigned char	char_u;$/;"	t
char_width	vim/vim/src/gui.h	/^    int		char_width;	    \/* Width of char cell in pixels *\/$/;"	m	struct:Gui	access:public
character_present	vim/vim/src/os_beos.c	/^sem_id character_present;$/;"	v
character_wanted	vim/vim/src/os_beos.c	/^sem_id character_wanted;$/;"	v
charbuf	vim/vim/src/os_beos.c	/^char_u charbuf;$/;"	v
charcount	vim/vim/src/os_beos.c	/^signed char charcount;$/;"	v
chars	vim/vim/src/libvterm/include/vterm.h	/^  const uint32_t *chars;$/;"	m	struct:__anon56	access:public
chars	vim/vim/src/libvterm/include/vterm.h	/^  uint32_t chars[VTERM_MAX_CHARS_PER_CELL];$/;"	m	struct:__anon62	access:public
chars	vim/vim/src/libvterm/src/encoding.c	/^  const uint32_t chars[128];$/;"	m	struct:StaticTableEncoding	file:	access:public
chars	vim/vim/src/libvterm/src/screen.c	/^  uint32_t chars[VTERM_MAX_CHARS_PER_CELL];$/;"	m	struct:__anon30	file:	access:public
chars_per_line	vim/vim/src/structs.h	/^    int		chars_per_line;$/;"	m	struct:__anon206	access:public
charset	vim/vim/src/gui_motif.c	/^static XmStringCharSet charset = (XmStringCharSet) XmSTRING_DEFAULT_CHARSET;$/;"	v	file:
charset	vim/vim/src/hardcopy.c	/^    char	*charset;$/;"	m	struct:prt_ps_charset_S	file:	access:public
charset	vim/vim/src/os_mswin.c	/^    BYTE	charset;$/;"	m	struct:charset_pair	file:	access:public
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=ISO-8859-2\/charset=cp1250\/' -e 's\/# Original translations\/# Generated from cs.po, DO NOT EDIT\/' > cs.cp1250.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=ISO-8859-2\/charset=cp1250\/' -e 's\/# Original translations\/# Generated from pl.po, DO NOT EDIT\/' > pl.cp1250.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=ISO-8859-2\/charset=cp1250\/' -e 's\/# Original translations\/# Generated from sk.po, DO NOT EDIT\/' > sk.cp1250.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=ISO-8859-2\/charset=utf-8\/' -e 's\/# Original translations\/# Generated from pl.po, DO NOT EDIT\/' > pl.UTF-8.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=UTF-8\/charset=euc-kr\/' \\$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=utf-8\/charset=cp1251\/' -e 's\/# Original translations\/# Generated from ru.po, DO NOT EDIT\/' > ru.cp1251.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=utf-8\/charset=cp1251\/' -e 's\/# Original translations\/# Generated from uk.po, DO NOT EDIT\/' > uk.cp1251.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=utf-8\/charset=euc-jp\/' -e 's\/# Original translations\/# Generated from ja.po, DO NOT EDIT\/' > ja.euc-jp.po$/;"	m
charset	vim/vim/src/po/Makefile	/^		sed -e 's\/charset=utf-8\/charset=gbk\/' -e 's\/# Original translations\/# Generated from zh_CN.UTF-8.po, DO NOT EDIT\/' > zh_CN.cp936.po$/;"	m
charset_id2name	vim/vim/src/os_mswin.c	/^charset_id2name(int id)$/;"	f	signature:(int id)
charset_pair	vim/vim/src/os_mswin.c	/^struct charset_pair$/;"	s	file:
charset_pair::charset	vim/vim/src/os_mswin.c	/^    BYTE	charset;$/;"	m	struct:charset_pair	file:	access:public
charset_pair::name	vim/vim/src/os_mswin.c	/^    char	*name;$/;"	m	struct:charset_pair	file:	access:public
charset_pairs	vim/vim/src/os_mswin.c	/^charset_pairs[] =$/;"	v	typeref:struct:charset_pair	file:
charset_translate	vim/vim/src/gui_photon.c	/^static struct PxTransCtrl *charset_translate;$/;"	v	typeref:struct:PxTransCtrl	file:
charsets	vim/vim/src/hardcopy.c	/^    struct prt_ps_charset_S	*charsets;$/;"	m	struct:prt_ps_mbfont_S	typeref:struct:prt_ps_mbfont_S::prt_ps_charset_S	file:	access:public
chartab_initialized	vim/vim/src/charset.c	/^static int    chartab_initialized = FALSE;$/;"	v	file:
chartabsize	vim/vim/src/charset.c	/^chartabsize(char_u *p, colnr_T col)$/;"	f	signature:(char_u *p, colnr_T col)
chdir	vim/vim/src/os_mswin.c	25;"	d	file:
chdir	vim/vim/src/os_win32.c	38;"	d	file:
checkCloseRec	vim/vim/src/fold.c	/^checkCloseRec(garray_T *gap, linenr_T lnum, int level)$/;"	f	file:	signature:(garray_T *gap, linenr_T lnum, int level)
checkCloseRec	vim/vim/src/fold.c	/^static int checkCloseRec(garray_T *gap, linenr_T lnum, int level);$/;"	p	file:	signature:(garray_T *gap, linenr_T lnum, int level)
checkSmall	vim/vim/src/fold.c	/^checkSmall($/;"	f	file:	signature:( win_T *wp, fold_T *fp, linenr_T lnum_off)
checkSmall	vim/vim/src/fold.c	/^static void checkSmall(win_T *wp, fold_T *fp, linenr_T lnum_off);$/;"	p	file:	signature:(win_T *wp, fold_T *fp, linenr_T lnum_off)
check_abbr	vim/vim/src/getchar.c	/^check_abbr($/;"	f	signature:( int c, char_u *ptr, int col, int mincol)
check_access	build_all.sh	/^function check_access()$/;"	f
check_arg_idx	vim/vim/src/ex_cmds2.c	/^check_arg_idx(win_T *win)$/;"	f	signature:(win_T *win)
check_auto_format	vim/vim/src/edit.c	/^check_auto_format($/;"	f	file:	signature:( int end_insert)
check_auto_format	vim/vim/src/edit.c	/^static void check_auto_format(int);$/;"	p	file:	signature:(int)
check_buf_options	vim/vim/src/option.c	/^check_buf_options(buf_T *buf)$/;"	f	signature:(buf_T *buf)
check_cedit	vim/vim/src/option.c	/^check_cedit(void)$/;"	f	file:	signature:(void)
check_cedit	vim/vim/src/option.c	/^static char_u *check_cedit(void);$/;"	p	file:	signature:(void)
check_changed	vim/vim/src/ex_cmds2.c	/^check_changed(buf_T *buf, int flags)$/;"	f	signature:(buf_T *buf, int flags)
check_changed_any	vim/vim/src/ex_cmds2.c	/^check_changed_any($/;"	f	signature:( int hidden, int unload)
check_char_class	vim/vim/src/regexp_nfa.c	/^check_char_class(int class, int c)$/;"	f	file:	signature:(int class, int c)
check_char_class	vim/vim/src/regexp_nfa.c	/^static int check_char_class(int class, int c);$/;"	p	file:	signature:(int class, int c)
check_clipboard_option	vim/vim/src/option.c	/^check_clipboard_option(void)$/;"	f	file:	signature:(void)
check_clipboard_option	vim/vim/src/option.c	/^static char_u *check_clipboard_option(void);$/;"	p	file:	signature:(void)
check_closed	vim/vim/src/fold.c	/^check_closed($/;"	f	file:	signature:( win_T *win, fold_T *fp, int *use_levelp, int level, int *maybe_smallp, linenr_T lnum_off)
check_closed	vim/vim/src/fold.c	/^static int check_closed(win_T *win, fold_T *fp, int *use_levelp, int level, int *maybe_smallp, linenr_T lnum_off);$/;"	p	file:	signature:(win_T *win, fold_T *fp, int *use_levelp, int level, int *maybe_smallp, linenr_T lnum_off)
check_col	vim/vim/src/ui.c	/^check_col(int col)$/;"	f	signature:(int col)
check_colorcolumn	vim/vim/src/option.c	/^check_colorcolumn(win_T *wp)$/;"	f	signature:(win_T *wp)
check_connection	vim/vim/src/evalfunc.c	/^check_connection(void)$/;"	f	file:	signature:(void)
check_connection	vim/vim/src/evalfunc.c	/^static int check_connection(void);$/;"	p	file:	signature:(void)
check_copy_area	vim/vim/src/gui_gtk_x11.c	/^check_copy_area(void)$/;"	f	file:	signature:(void)
check_cstack	vim/vim/src/ex_docmd.c	/^    int		check_cstack;$/;"	m	struct:dbg_stuff	file:	access:public
check_cstack	vim/vim/src/globals.h	/^EXTERN int check_cstack INIT(= FALSE);$/;"	v
check_cursor	vim/vim/src/misc2.c	/^check_cursor(void)$/;"	f	signature:(void)
check_cursor_col	vim/vim/src/misc2.c	/^check_cursor_col(void)$/;"	f	signature:(void)
check_cursor_col_win	vim/vim/src/misc2.c	/^check_cursor_col_win(win_T *win)$/;"	f	signature:(win_T *win)
check_cursor_lnum	vim/vim/src/misc2.c	/^check_cursor_lnum(void)$/;"	f	signature:(void)
check_cursor_moved	vim/vim/src/move.c	/^check_cursor_moved(win_T *wp)$/;"	f	signature:(win_T *wp)
check_due_timer	vim/vim/src/ex_cmds2.c	/^check_due_timer(void)$/;"	f	signature:(void)
check_ei	vim/vim/src/fileio.c	/^check_ei(void)$/;"	f	signature:(void)
check_ff_value	vim/vim/src/option.c	/^check_ff_value(char_u *p)$/;"	f	signature:(char_u *p)
check_file_readonly	vim/vim/src/fileio.c	/^check_file_readonly($/;"	f	signature:( char_u *fname, int perm)
check_fname	vim/vim/src/ex_cmds2.c	/^check_fname(void)$/;"	f	signature:(void)
check_fontset_sanity	vim/vim/src/gui_x11.c	/^check_fontset_sanity(XFontSet fs)$/;"	f	file:	signature:(XFontSet fs)
check_fontset_sanity	vim/vim/src/gui_x11.c	/^static int check_fontset_sanity(XFontSet fs);$/;"	p	file:	signature:(XFontSet fs)
check_for_bom	vim/vim/src/fileio.c	/^check_for_bom($/;"	f	file:	signature:( char_u *p, long size, int *lenp, int flags)
check_for_bom	vim/vim/src/fileio.c	/^static char_u *check_for_bom(char_u *p, long size, int *lenp, int flags);$/;"	p	file:	signature:(char_u *p, long size, int *lenp, int flags)
check_for_codes	vim/vim/src/term.c	/^static int	check_for_codes = FALSE;    \/* check for key code response *\/$/;"	v	file:
check_for_codes_from_term	vim/vim/src/term.c	/^check_for_codes_from_term(void)$/;"	f	file:	signature:(void)
check_for_codes_from_term	vim/vim/src/term.c	/^static void check_for_codes_from_term(void);$/;"	p	file:	signature:(void)
check_for_cryptkey	vim/vim/src/fileio.c	/^check_for_cryptkey($/;"	f	file:	signature:( char_u *cryptkey, char_u *ptr, long *sizep, off_T *filesizep, int newfile, char_u *fname, int *did_ask)
check_for_cryptkey	vim/vim/src/fileio.c	/^static char_u *check_for_cryptkey(char_u *cryptkey, char_u *ptr, long *sizep, off_T *filesizep, int newfile, char_u *fname, int *did_ask);$/;"	p	file:	signature:(char_u *cryptkey, char_u *ptr, long *sizep, off_T *filesizep, int newfile, char_u *fname, int *did_ask)
check_for_delay	vim/vim/src/screen.c	/^check_for_delay(int check_msg_scroll)$/;"	f	signature:(int check_msg_scroll)
check_help_lang	vim/vim/src/ex_cmds.c	/^check_help_lang(char_u *arg)$/;"	f	signature:(char_u *arg)
check_keepend	vim/vim/src/syntax.c	/^check_keepend(void)$/;"	f	file:	signature:(void)
check_keepend	vim/vim/src/syntax.c	/^static void check_keepend(void);$/;"	p	file:	signature:(void)
check_keyword_id	vim/vim/src/syntax.c	/^check_keyword_id($/;"	f	file:	signature:( char_u *line, int startcol, int *endcolp, long *flagsp, short **next_listp, stateitem_T *cur_si, int *ccharp UNUSED)
check_keyword_id	vim/vim/src/syntax.c	/^static int check_keyword_id(char_u *line, int startcol, int *endcol, long *flags, short **next_list, stateitem_T *cur_si, int *ccharp);$/;"	p	file:	signature:(char_u *line, int startcol, int *endcol, long *flags, short **next_list, stateitem_T *cur_si, int *ccharp)
check_line_range	vim/vim/src/if_mzsch.c	/^check_line_range(linenr_T lnum, buf_T *buf)$/;"	f	file:	signature:(linenr_T lnum, buf_T *buf)
check_line_range	vim/vim/src/if_mzsch.c	/^static void check_line_range(linenr_T, buf_T *);$/;"	p	file:	signature:(linenr_T, buf_T *)
check_linecomment	vim/vim/src/search.c	/^check_linecomment(char_u *line)$/;"	f	file:	signature:(char_u *line)
check_linecomment	vim/vim/src/search.c	/^static int check_linecomment(char_u *line);$/;"	p	file:	signature:(char_u *line)
check_lnums	vim/vim/src/window.c	/^check_lnums(int do_curwin)$/;"	f	signature:(int do_curwin)
check_map	vim/vim/src/getchar.c	/^check_map($/;"	f	signature:( char_u *keys, int mode, int exact, int ign_mod, int abbr, mapblock_T **mp_ptr, int *local_ptr)
check_map_keycodes	vim/vim/src/getchar.c	/^check_map_keycodes(void)$/;"	f	signature:(void)
check_mark	vim/vim/src/mark.c	/^check_mark(pos_T *pos)$/;"	f	signature:(pos_T *pos)
check_marks_read	vim/vim/src/fileio.c	/^check_marks_read(void)$/;"	f	file:	signature:(void)
check_marks_read	vim/vim/src/fileio.c	/^static void check_marks_read(void);$/;"	p	file:	signature:(void)
check_menu_pointer	vim/vim/src/menu.c	/^check_menu_pointer(vimmenu_T *root, vimmenu_T *menu_to_check)$/;"	f	signature:(vimmenu_T *root, vimmenu_T *menu_to_check)
check_more	vim/vim/src/ex_docmd.c	/^check_more($/;"	f	file:	signature:( int message, int forceit)
check_more	vim/vim/src/ex_docmd.c	/^static int	check_more(int, int);$/;"	p	file:	signature:(int, int)
check_mouse_termcode	vim/vim/src/os_unix.c	/^check_mouse_termcode(void)$/;"	f	signature:(void)
check_mtime	vim/vim/src/fileio.c	/^check_mtime(buf_T *buf, stat_T *st)$/;"	f	file:	signature:(buf_T *buf, stat_T *st)
check_mtime	vim/vim/src/fileio.c	/^static int check_mtime(buf_T *buf, stat_T *s);$/;"	p	file:	signature:(buf_T *buf, stat_T *s)
check_need_cap	vim/vim/src/spell.c	/^check_need_cap(linenr_T lnum, colnr_T col)$/;"	f	file:	signature:(linenr_T lnum, colnr_T col)
check_need_cap	vim/vim/src/spell.c	/^static int check_need_cap(linenr_T lnum, colnr_T col);$/;"	p	file:	signature:(linenr_T lnum, colnr_T col)
check_need_swap	vim/vim/src/memline.c	/^check_need_swap($/;"	f	signature:( int newfile)
check_nextcmd	vim/vim/src/ex_docmd.c	/^check_nextcmd(char_u *p)$/;"	f	signature:(char_u *p)
check_nomodeline	vim/vim/src/fileio.c	/^check_nomodeline(char_u **argp)$/;"	f	signature:(char_u **argp)
check_opt_strings	vim/vim/src/option.c	/^check_opt_strings($/;"	f	file:	signature:( char_u *val, char **values, int list)
check_opt_strings	vim/vim/src/option.c	/^static int check_opt_strings(char_u *val, char **values, int);$/;"	p	file:	signature:(char_u *val, char **values, int)
check_opt_wim	vim/vim/src/option.c	/^check_opt_wim(void)$/;"	f	file:	signature:(void)
check_opt_wim	vim/vim/src/option.c	/^static int check_opt_wim(void);$/;"	p	file:	signature:(void)
check_options	vim/vim/src/option.c	/^check_options(void)$/;"	f	signature:(void)
check_overwrite	vim/vim/src/ex_cmds.c	/^check_overwrite($/;"	f	signature:( exarg_T *eap, buf_T *buf, char_u *fname, char_u *ffname, int other)
check_pos	vim/vim/src/misc2.c	/^check_pos(buf_T *buf, pos_T *pos)$/;"	f	signature:(buf_T *buf, pos_T *pos)
check_prevcol	vim/vim/src/search.c	/^check_prevcol($/;"	f	file:	signature:( char_u *linep, int col, int ch, int *prevcol)
check_prevcol	vim/vim/src/search.c	/^static int check_prevcol(char_u *linep, int col, int ch, int *prevcol);$/;"	p	file:	signature:(char_u *linep, int col, int ch, int *prevcol)
check_readonly	vim/vim/src/ex_cmds.c	/^check_readonly(int *forceit, buf_T *buf)$/;"	f	file:	signature:(int *forceit, buf_T *buf)
check_readonly	vim/vim/src/ex_cmds.c	/^static int check_readonly(int *forceit, buf_T *buf);$/;"	p	file:	signature:(int *forceit, buf_T *buf)
check_redraw	vim/vim/src/option.c	/^check_redraw(long_u flags)$/;"	f	file:	signature:(long_u flags)
check_redraw	vim/vim/src/option.c	/^static void check_redraw(long_u flags);$/;"	p	file:	signature:(long_u flags)
check_renumber	vim/vim/src/spellfile.c	/^check_renumber(spellinfo_T *spin)$/;"	f	file:	signature:(spellinfo_T *spin)
check_renumber	vim/vim/src/spellfile.c	/^static void check_renumber(spellinfo_T *spin);$/;"	p	file:	signature:(spellinfo_T *spin)
check_restricted	vim/vim/src/ex_cmds.c	/^check_restricted(void)$/;"	f	signature:(void)
check_row	vim/vim/src/ui.c	/^check_row(int row)$/;"	f	signature:(int row)
check_scrollbind	vim/vim/src/normal.c	/^check_scrollbind(linenr_T topline_diff, long leftcol_diff)$/;"	f	signature:(linenr_T topline_diff, long leftcol_diff)
check_secure	vim/vim/src/ex_cmds.c	/^check_secure(void)$/;"	f	signature:(void)
check_shellsize	vim/vim/src/term.c	/^check_shellsize(void)$/;"	f	signature:(void)
check_snapshot_rec	vim/vim/src/window.c	/^check_snapshot_rec(frame_T *sn, frame_T *fr)$/;"	f	file:	signature:(frame_T *sn, frame_T *fr)
check_snapshot_rec	vim/vim/src/window.c	/^static int check_snapshot_rec(frame_T *sn, frame_T *fr);$/;"	p	file:	signature:(frame_T *sn, frame_T *fr)
check_spell_redraw	vim/vim/src/edit.c	/^check_spell_redraw(void)$/;"	f	file:	signature:(void)
check_spell_redraw	vim/vim/src/edit.c	/^static void check_spell_redraw(void);$/;"	p	file:	signature:(void)
check_stack_growth	vim/vim/src/os_unix.c	/^check_stack_growth(char *p)$/;"	f	file:	signature:(char *p)
check_stack_growth	vim/vim/src/os_unix.c	/^static void check_stack_growth(char *p);$/;"	p	file:	signature:(char *p)
check_startup_plug_hints	vim/vim/src/gui_gtk_x11.c	/^check_startup_plug_hints(gpointer data UNUSED)$/;"	f	file:	signature:(gpointer data UNUSED)
check_state_ends	vim/vim/src/syntax.c	/^check_state_ends(void)$/;"	f	file:	signature:(void)
check_state_ends	vim/vim/src/syntax.c	/^static void check_state_ends(void);$/;"	p	file:	signature:(void)
check_status	vim/vim/src/misc1.c	/^check_status(buf_T *buf)$/;"	f	signature:(buf_T *buf)
check_stl_option	vim/vim/src/option.c	/^check_stl_option(char_u *s)$/;"	f	signature:(char_u *s)
check_str_len	vim/vim/src/os_mswin.c	/^check_str_len(char_u *str)$/;"	f	file:	signature:(char_u *str)
check_string_option	vim/vim/src/option.c	/^check_string_option(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
check_string_option	vim/vim/src/option.c	/^static void check_string_option(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
check_suggestions	vim/vim/src/spell.c	/^check_suggestions($/;"	f	file:	signature:( suginfo_T *su, garray_T *gap)
check_suggestions	vim/vim/src/spell.c	/^static void check_suggestions(suginfo_T *su, garray_T *gap);$/;"	p	file:	signature:(suginfo_T *su, garray_T *gap)
check_swap_exists_action	vim/vim/src/main.c	/^check_swap_exists_action(void)$/;"	f	file:	signature:(void)
check_swap_exists_action	vim/vim/src/main.c	/^static void check_swap_exists_action(void);$/;"	p	file:	signature:(void)
check_termcode	vim/vim/src/term.c	/^check_termcode($/;"	f	signature:( int max_offset, char_u *buf, int bufsize, int *buflen)
check_timestamps	vim/vim/src/fileio.c	/^check_timestamps($/;"	f	signature:( int focus)
check_top_offset	vim/vim/src/move.c	/^check_top_offset(void)$/;"	f	file:	signature:(void)
check_top_offset	vim/vim/src/move.c	/^static int check_top_offset(void);$/;"	p	file:	signature:(void)
check_topfill	vim/vim/src/move.c	/^check_topfill($/;"	f	signature:( win_T *wp, int down)
check_tty	vim/vim/src/main.c	/^check_tty(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
check_tty	vim/vim/src/main.c	/^static void check_tty(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
check_unpack	vim/vim/src/dosinst.c	/^check_unpack(void)$/;"	f	file:	signature:(void)
check_vars	vim/vim/src/eval.c	/^check_vars(char_u *name, int len)$/;"	f	file:	signature:(char_u *name, int len)
check_vars	vim/vim/src/eval.c	/^static void check_vars(char_u *name, int len);$/;"	p	file:	signature:(char_u *name, int len)
check_visual_highlight	vim/vim/src/normal.c	/^check_visual_highlight(void)$/;"	f	signature:(void)
check_win_options	vim/vim/src/option.c	/^check_win_options(win_T *win)$/;"	f	signature:(win_T *win)
check_winopt	vim/vim/src/option.c	/^check_winopt(winopt_T *wop UNUSED)$/;"	f	file:	signature:(winopt_T *wop UNUSED)
check_winopt	vim/vim/src/option.c	/^static void check_winopt(winopt_T *wop);$/;"	p	file:	signature:(winopt_T *wop)
check_xpm	vim/vim/src/gui_motif.c	/^check_xpm(char_u *path)$/;"	f	file:	signature:(char_u *path)
check_xpm	vim/vim/src/gui_motif.c	/^static int check_xpm(char_u *path);$/;"	p	file:	signature:(char_u *path)
checkclearop	vim/vim/src/normal.c	/^checkclearop(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
checkclearop	vim/vim/src/normal.c	/^static int	checkclearop(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
checkclearopq	vim/vim/src/normal.c	/^checkclearopq(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
checkclearopq	vim/vim/src/normal.c	/^static int	checkclearopq(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
checkforcmd	vim/vim/src/ex_docmd.c	/^checkforcmd($/;"	f	signature:( char_u **pp, char *cmd, int len)
checkfun	vim/vim/src/if_py_both.h	/^typedef int (*checkfun)(void *);$/;"	t
checkpcmark	vim/vim/src/mark.c	/^checkpcmark(void)$/;"	f	signature:(void)
checkupdate	vim/vim/src/fold.c	/^checkupdate(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
checkupdate	vim/vim/src/fold.c	/^static void checkupdate(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
chg_c_a2f	vim/vim/src/arabic.c	/^chg_c_a2f(int cur_c)$/;"	f	file:	signature:(int cur_c)
chg_c_a2f	vim/vim/src/arabic.c	/^static int  chg_c_a2f(int cur_c);$/;"	p	file:	signature:(int cur_c)
chg_c_a2i	vim/vim/src/arabic.c	/^chg_c_a2i(int cur_c)$/;"	f	file:	signature:(int cur_c)
chg_c_a2i	vim/vim/src/arabic.c	/^static int  chg_c_a2i(int cur_c);$/;"	p	file:	signature:(int cur_c)
chg_c_a2m	vim/vim/src/arabic.c	/^chg_c_a2m(int cur_c)$/;"	f	file:	signature:(int cur_c)
chg_c_a2m	vim/vim/src/arabic.c	/^static int  chg_c_a2m(int cur_c);$/;"	p	file:	signature:(int cur_c)
chg_c_a2s	vim/vim/src/arabic.c	/^chg_c_a2s(int cur_c)$/;"	f	file:	signature:(int cur_c)
chg_c_a2s	vim/vim/src/arabic.c	/^static int  chg_c_a2s(int cur_c);$/;"	p	file:	signature:(int cur_c)
chg_c_f2m	vim/vim/src/arabic.c	/^chg_c_f2m(int cur_c)$/;"	f	file:	signature:(int cur_c)
chg_c_f2m	vim/vim/src/arabic.c	/^static int  chg_c_f2m(int cur_c);$/;"	p	file:	signature:(int cur_c)
chg_c_laa2f	vim/vim/src/arabic.c	/^chg_c_laa2f(int hid_c)$/;"	f	file:	signature:(int hid_c)
chg_c_laa2f	vim/vim/src/arabic.c	/^static int  chg_c_laa2f(int hid_c);$/;"	p	file:	signature:(int hid_c)
chg_c_laa2i	vim/vim/src/arabic.c	/^chg_c_laa2i(int hid_c)$/;"	f	file:	signature:(int hid_c)
chg_c_laa2i	vim/vim/src/arabic.c	/^static int  chg_c_laa2i(int hid_c);$/;"	p	file:	signature:(int hid_c)
chg_c_toX_orX	vim/vim/src/farsi.c	/^chg_c_toX_orX(void)$/;"	f	file:	signature:(void)
chg_c_to_X_orX_	vim/vim/src/farsi.c	/^chg_c_to_X_orX_(void)$/;"	f	file:	signature:(void)
chg_c_to_X_or_X	vim/vim/src/farsi.c	/^chg_c_to_X_or_X(void)$/;"	f	file:	signature:(void)
chg_l_toXor_X	vim/vim/src/farsi.c	/^chg_l_toXor_X(void)$/;"	f	file:	signature:(void)
chg_l_to_X_orX_	vim/vim/src/farsi.c	/^chg_l_to_X_orX_(void)$/;"	f	file:	signature:(void)
chg_r_to_Xor_X_	vim/vim/src/farsi.c	/^chg_r_to_Xor_X_(void)$/;"	f	file:	signature:(void)
children	vim/vim/src/gui_gtk_f.h	/^    GList *children;$/;"	m	struct:_GtkForm	access:public
children	vim/vim/src/structs.h	/^    vimmenu_T	*children;	    \/* Children of sub-menu *\/$/;"	m	struct:VimMenu	access:public
chk_modeline	vim/vim/src/buffer.c	/^chk_modeline($/;"	f	file:	signature:( linenr_T lnum, int flags)
chk_modeline	vim/vim/src/buffer.c	/^static int  chk_modeline(linenr_T, int);$/;"	p	file:	signature:(linenr_T, int)
choice	vim/vim/src/dosinst.c	/^struct choice$/;"	s	file:
choice::active	vim/vim/src/dosinst.c	/^    int	    active;			\/* non-zero when choice is active *\/$/;"	m	struct:choice	file:	access:public
choice::arg	vim/vim/src/dosinst.c	/^    int	    arg;			\/* argument for function *\/$/;"	m	struct:choice	file:	access:public
choice::changefunc	vim/vim/src/dosinst.c	/^    void    (*changefunc)(int idx);	\/* function to change this choice *\/$/;"	m	struct:choice	file:	access:public
choice::installfunc	vim/vim/src/dosinst.c	/^    void    (*installfunc)(int idx);	\/* function to install this choice *\/$/;"	m	struct:choice	file:	access:public
choice::text	vim/vim/src/dosinst.c	/^    char    *text;			\/* text displayed for this choice *\/$/;"	m	struct:choice	file:	access:public
choice_count	vim/vim/src/dosinst.c	/^int		choice_count = 0;	\/* number of choices available *\/$/;"	v
choices	vim/vim/src/dosinst.c	/^struct choice	choices[30];		\/* choices the user can make *\/$/;"	v	typeref:struct:choice
chunksize_T	vim/vim/src/structs.h	/^} chunksize_T;$/;"	t	typeref:struct:ml_chunksize
chyba	vim/vim/runtime/tutor/tutor.cs	/^---> "chhybba" není zpùsob, jak hláskovat chyba; chhybba je chyba.$/;"	p
ci_flag	vim/vim/src/spellfile.c	/^    unsigned	ci_flag;	\/* affix name as number, uses "af_flagtype" *\/$/;"	m	struct:compitem_S	file:	access:public
ci_key	vim/vim/src/spellfile.c	/^    char_u	ci_key[AH_KEY_LEN]; \/* key for hashtab == name of compound *\/$/;"	m	struct:compitem_S	file:	access:public
ci_newID	vim/vim/src/spellfile.c	/^    int		ci_newID;	\/* affix ID after renumbering. *\/$/;"	m	struct:compitem_S	file:	access:public
cin_ends_in	vim/vim/src/misc1.c	/^cin_ends_in(char_u *s, char_u *find, char_u *ignore)$/;"	f	file:	signature:(char_u *s, char_u *find, char_u *ignore)
cin_ends_in	vim/vim/src/misc1.c	/^static int	cin_ends_in(char_u *, char_u *, char_u *);$/;"	p	file:	signature:(char_u *, char_u *, char_u *)
cin_first_id_amount	vim/vim/src/misc1.c	/^cin_first_id_amount(void)$/;"	f	file:	signature:(void)
cin_first_id_amount	vim/vim/src/misc1.c	/^static int	cin_first_id_amount(void);$/;"	p	file:	signature:(void)
cin_get_equal_amount	vim/vim/src/misc1.c	/^cin_get_equal_amount(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
cin_get_equal_amount	vim/vim/src/misc1.c	/^static int	cin_get_equal_amount(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
cin_has_js_key	vim/vim/src/misc1.c	/^cin_has_js_key(char_u *text)$/;"	f	file:	signature:(char_u *text)
cin_has_js_key	vim/vim/src/misc1.c	/^static int	cin_has_js_key(char_u *text);$/;"	p	file:	signature:(char_u *text)
cin_is_cinword	vim/vim/src/misc1.c	/^cin_is_cinword(char_u *line)$/;"	f	file:	signature:(char_u *line)
cin_is_cinword	vim/vim/src/misc1.c	/^static int cin_is_cinword(char_u *line);$/;"	p	file:	signature:(char_u *line)
cin_is_cpp_baseclass	vim/vim/src/misc1.c	/^cin_is_cpp_baseclass($/;"	f	file:	signature:( cpp_baseclass_cache_T *cached)
cin_is_cpp_baseclass	vim/vim/src/misc1.c	/^static int	cin_is_cpp_baseclass(cpp_baseclass_cache_T *cached);$/;"	p	file:	signature:(cpp_baseclass_cache_T *cached)
cin_is_cpp_extern_c	vim/vim/src/misc1.c	/^cin_is_cpp_extern_c(char_u *s)$/;"	f	file:	signature:(char_u *s)
cin_is_cpp_namespace	vim/vim/src/misc1.c	/^cin_is_cpp_namespace(char_u *s)$/;"	f	file:	signature:(char_u *s)
cin_is_cpp_namespace	vim/vim/src/misc1.c	/^static int	cin_is_cpp_namespace(char_u *);$/;"	p	file:	signature:(char_u *)
cin_is_if_for_while_before_offset	vim/vim/src/misc1.c	/^cin_is_if_for_while_before_offset(char_u *line, int *poffset)$/;"	f	file:	signature:(char_u *line, int *poffset)
cin_is_if_for_while_before_offset	vim/vim/src/misc1.c	/^static int	cin_is_if_for_while_before_offset(char_u *line, int *poffset);$/;"	p	file:	signature:(char_u *line, int *poffset)
cin_isbreak	vim/vim/src/misc1.c	/^cin_isbreak(char_u *p)$/;"	f	file:	signature:(char_u *p)
cin_isbreak	vim/vim/src/misc1.c	/^static int	cin_isbreak(char_u *);$/;"	p	file:	signature:(char_u *)
cin_iscase	vim/vim/src/misc1.c	/^cin_iscase($/;"	f	signature:( char_u *s, int strict)
cin_iscomment	vim/vim/src/misc1.c	/^cin_iscomment(char_u *p)$/;"	f	file:	signature:(char_u *p)
cin_iscomment	vim/vim/src/misc1.c	/^static int	cin_iscomment(char_u *);$/;"	p	file:	signature:(char_u *)
cin_isdefault	vim/vim/src/misc1.c	/^cin_isdefault(char_u *s)$/;"	f	file:	signature:(char_u *s)
cin_isdefault	vim/vim/src/misc1.c	/^static int	cin_isdefault(char_u *);$/;"	p	file:	signature:(char_u *)
cin_isdo	vim/vim/src/misc1.c	/^cin_isdo(char_u *p)$/;"	f	file:	signature:(char_u *p)
cin_isdo	vim/vim/src/misc1.c	/^static int	cin_isdo(char_u *);$/;"	p	file:	signature:(char_u *)
cin_iselse	vim/vim/src/misc1.c	/^cin_iselse($/;"	f	file:	signature:( char_u *p)
cin_iselse	vim/vim/src/misc1.c	/^static int	cin_iselse(char_u *);$/;"	p	file:	signature:(char_u *)
cin_isfuncdecl	vim/vim/src/misc1.c	/^cin_isfuncdecl($/;"	f	file:	signature:( char_u **sp, linenr_T first_lnum, linenr_T min_lnum)
cin_isfuncdecl	vim/vim/src/misc1.c	/^static int	cin_isfuncdecl(char_u **, linenr_T, linenr_T);$/;"	p	file:	signature:(char_u **, linenr_T, linenr_T)
cin_isif	vim/vim/src/misc1.c	/^cin_isif(char_u *p)$/;"	f	file:	signature:(char_u *p)
cin_isif	vim/vim/src/misc1.c	/^static int	cin_isif(char_u *);$/;"	p	file:	signature:(char_u *)
cin_isinit	vim/vim/src/misc1.c	/^cin_isinit(void)$/;"	f	file:	signature:(void)
cin_isinit	vim/vim/src/misc1.c	/^static int	cin_isinit(void);$/;"	p	file:	signature:(void)
cin_islabel	vim/vim/src/misc1.c	/^cin_islabel(void)		\/* XXX *\/$/;"	f	signature:(void)
cin_islabel_skip	vim/vim/src/misc1.c	/^cin_islabel_skip(char_u **s)$/;"	f	file:	signature:(char_u **s)
cin_islabel_skip	vim/vim/src/misc1.c	/^static int	cin_islabel_skip(char_u **);$/;"	p	file:	signature:(char_u **)
cin_islinecomment	vim/vim/src/misc1.c	/^cin_islinecomment(char_u *p)$/;"	f	file:	signature:(char_u *p)
cin_islinecomment	vim/vim/src/misc1.c	/^static int	cin_islinecomment(char_u *);$/;"	p	file:	signature:(char_u *)
cin_ispreproc	vim/vim/src/misc1.c	/^cin_ispreproc(char_u *s)$/;"	f	file:	signature:(char_u *s)
cin_ispreproc	vim/vim/src/misc1.c	/^static int	cin_ispreproc(char_u *);$/;"	p	file:	signature:(char_u *)
cin_ispreproc_cont	vim/vim/src/misc1.c	/^cin_ispreproc_cont(char_u **pp, linenr_T *lnump, int *amount)$/;"	f	file:	signature:(char_u **pp, linenr_T *lnump, int *amount)
cin_isscopedecl	vim/vim/src/misc1.c	/^cin_isscopedecl(char_u *s)$/;"	f	signature:(char_u *s)
cin_isterminated	vim/vim/src/misc1.c	/^cin_isterminated($/;"	f	file:	signature:( char_u *s, int incl_open, int incl_comma)
cin_isterminated	vim/vim/src/misc1.c	/^static int	cin_isterminated(char_u *, int, int);$/;"	p	file:	signature:(char_u *, int, int)
cin_iswhileofdo	vim/vim/src/misc1.c	/^cin_iswhileofdo (char_u *p, linenr_T lnum)	\/* XXX *\/$/;"	f	file:	signature:(char_u *p, linenr_T lnum)
cin_iswhileofdo	vim/vim/src/misc1.c	/^static int	cin_iswhileofdo(char_u *, linenr_T);$/;"	p	file:	signature:(char_u *, linenr_T)
cin_iswhileofdo_end	vim/vim/src/misc1.c	/^cin_iswhileofdo_end(int terminated)$/;"	f	file:	signature:(int terminated)
cin_iswhileofdo_end	vim/vim/src/misc1.c	/^static int	cin_iswhileofdo_end(int terminated);$/;"	p	file:	signature:(int terminated)
cin_nocode	vim/vim/src/misc1.c	/^cin_nocode(char_u *s)$/;"	f	file:	signature:(char_u *s)
cin_nocode	vim/vim/src/misc1.c	/^static int	cin_nocode(char_u *);$/;"	p	file:	signature:(char_u *)
cin_skip2pos	vim/vim/src/misc1.c	/^cin_skip2pos(pos_T *trypos)$/;"	f	file:	signature:(pos_T *trypos)
cin_skip2pos	vim/vim/src/misc1.c	/^static int	cin_skip2pos(pos_T *trypos);$/;"	p	file:	signature:(pos_T *trypos)
cin_skipcomment	vim/vim/src/misc1.c	/^cin_skipcomment(char_u *s)$/;"	f	file:	signature:(char_u *s)
cin_skipcomment	vim/vim/src/misc1.c	/^static char_u	*cin_skipcomment(char_u *);$/;"	p	file:	signature:(char_u *)
cin_starts_with	vim/vim/src/misc1.c	/^cin_starts_with(char_u *s, char *word)$/;"	f	file:	signature:(char_u *s, char *word)
cin_starts_with	vim/vim/src/misc1.c	/^static int	cin_starts_with(char_u *s, char *word);$/;"	p	file:	signature:(char_u *s, char *word)
cindent_on	vim/vim/src/edit.c	/^cindent_on(void)$/;"	f	file:	signature:(void)
cindent_on	vim/vim/src/edit.c	/^static int cindent_on(void);$/;"	p	file:	signature:(void)
class	vim/vim/src/os_vms.c	/^    char	class;$/;"	m	struct:__anon23	file:	access:public
class_tab	vim/vim/src/regexp.c	/^static short	class_tab[256];$/;"	v	file:
classchars	vim/vim/src/regexp.c	/^static char_u	*classchars = (char_u *)".iIkKfFpPsSdDxXoOwWhHaAlLuU";$/;"	v	file:
classcodes	vim/vim/src/regexp.c	/^static int	classcodes[] = {$/;"	v	file:
cleanup_T	vim/vim/src/structs.h	/^typedef struct cleanup_stuff cleanup_T;$/;"	t	typeref:struct:cleanup_stuff
cleanup_conditionals	vim/vim/src/ex_eval.c	/^cleanup_conditionals($/;"	f	signature:( struct condstack *cstack, int searched_cond, int inclusive)
cleanup_function_call	vim/vim/src/userfunc.c	/^cleanup_function_call(funccall_T *fc)$/;"	f	file:	signature:(funccall_T *fc)
cleanup_help_tags	vim/vim/src/ex_getln.c	/^cleanup_help_tags(int num_file, char_u **file)$/;"	f	file:	signature:(int num_file, char_u **file)
cleanup_help_tags	vim/vim/src/ex_getln.c	/^static void	cleanup_help_tags(int num_file, char_u **file);$/;"	p	file:	signature:(int num_file, char_u **file)
cleanup_jumplist	vim/vim/src/mark.c	/^cleanup_jumplist(void)$/;"	f	file:	signature:(void)
cleanup_jumplist	vim/vim/src/mark.c	/^static void cleanup_jumplist(void);$/;"	p	file:	signature:(void)
cleanup_stuff	vim/vim/src/structs.h	/^struct cleanup_stuff$/;"	s
cleanup_stuff::exception	vim/vim/src/structs.h	/^    except_T *exception;	\/* exception value *\/$/;"	m	struct:cleanup_stuff	access:public
cleanup_stuff::pending	vim/vim/src/structs.h	/^    int pending;		\/* error\/interrupt\/exception state *\/$/;"	m	struct:cleanup_stuff	access:public
cleanup_subexpr	vim/vim/src/regexp.c	/^cleanup_subexpr(void)$/;"	f	file:	signature:(void)
cleanup_subexpr	vim/vim/src/regexp.c	/^static void	cleanup_subexpr(void);$/;"	p	file:	signature:(void)
cleanup_suggestions	vim/vim/src/spell.c	/^cleanup_suggestions($/;"	f	file:	signature:( garray_T *gap, int maxscore, int keep)
cleanup_suggestions	vim/vim/src/spell.c	/^static int cleanup_suggestions(garray_T *gap, int maxscore, int keep);$/;"	p	file:	signature:(garray_T *gap, int maxscore, int keep)
cleanup_zsubexpr	vim/vim/src/regexp.c	/^cleanup_zsubexpr(void)$/;"	f	file:	signature:(void)
cleanup_zsubexpr	vim/vim/src/regexp.c	/^static void	cleanup_zsubexpr(void);$/;"	p	file:	signature:(void)
clear	vim/vim/src/if_py_both.h	/^    clearfun clear;$/;"	m	struct:__anon99	access:public
clear	vim/vim/src/if_py_both.h	1405;"	d
clearFolding	vim/vim/src/fold.c	/^clearFolding(win_T *win)$/;"	f	signature:(win_T *win)
clearTypeLevel	vim/vim/src/gui_dwrite.h	/^    float clearTypeLevel;$/;"	m	struct:DWriteRenderingParams	access:public
clear_chars	vim/vim/src/os_win32.c	/^clear_chars($/;"	f	file:	signature:( COORD coord, DWORD n)
clear_chars	vim/vim/src/os_win32.c	/^static void clear_chars(COORD coord, DWORD n);$/;"	p	file:	signature:(COORD coord, DWORD n)
clear_cmdline	vim/vim/src/globals.h	/^EXTERN int	clear_cmdline INIT(= FALSE);	\/* cmdline must be cleared *\/$/;"	v
clear_col_tabstop	vim/vim/src/libvterm/src/state.c	/^static void clear_col_tabstop(VTermState *state, int col)$/;"	f	file:	signature:(VTermState *state, int col)
clear_csinfo	vim/vim/src/if_cscope.c	/^clear_csinfo(int i)$/;"	f	file:	signature:(int i)
clear_csinfo	vim/vim/src/if_cscope.c	/^static void	    clear_csinfo(int i);$/;"	p	file:	signature:(int i)
clear_current_funccal	vim/vim/src/userfunc.c	/^clear_current_funccal()$/;"	f
clear_current_state	vim/vim/src/syntax.c	/^clear_current_state(void)$/;"	f	file:	signature:(void)
clear_current_state	vim/vim/src/syntax.c	/^static void clear_current_state(void);$/;"	p	file:	signature:(void)
clear_hist_entry	vim/vim/src/ex_getln.c	/^clear_hist_entry(histentry_T *hisptr)$/;"	f	file:	signature:(histentry_T *hisptr)
clear_hist_entry	vim/vim/src/ex_getln.c	/^static void	clear_hist_entry(histentry_T *hisptr);$/;"	p	file:	signature:(histentry_T *hisptr)
clear_hl_tables	vim/vim/src/syntax.c	/^clear_hl_tables(void)$/;"	f	signature:(void)
clear_job_options	vim/vim/src/channel.c	/^clear_job_options(jobopt_T *opt)$/;"	f	signature:(jobopt_T *opt)
clear_keywtab	vim/vim/src/syntax.c	/^clear_keywtab(hashtab_T *ht)$/;"	f	file:	signature:(hashtab_T *ht)
clear_keywtab	vim/vim/src/syntax.c	/^static void clear_keywtab(hashtab_T *ht);$/;"	p	file:	signature:(hashtab_T *ht)
clear_lval	vim/vim/src/eval.c	/^clear_lval(lval_T *lp)$/;"	f	signature:(lval_T *lp)
clear_matches	vim/vim/src/window.c	/^clear_matches(win_T *wp)$/;"	f	signature:(win_T *wp)
clear_midword	vim/vim/src/spell.c	/^clear_midword(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
clear_midword	vim/vim/src/spell.c	/^static void clear_midword(win_T *buf);$/;"	p	file:	signature:(win_T *buf)
clear_node	vim/vim/src/spellfile.c	/^clear_node(wordnode_T *node)$/;"	f	file:	signature:(wordnode_T *node)
clear_node	vim/vim/src/spellfile.c	/^static void clear_node(wordnode_T *node);$/;"	p	file:	signature:(wordnode_T *node)
clear_oparg	vim/vim/src/ops.c	/^clear_oparg(oparg_T *oap)$/;"	f	signature:(oparg_T *oap)
clear_rect	vim/vim/src/gui_w32.c	/^clear_rect(RECT *rcp)$/;"	f	file:	signature:(RECT *rcp)
clear_rect	vim/vim/src/gui_w32.c	/^static void clear_rect(RECT *rcp);$/;"	p	file:	signature:(RECT *rcp)
clear_registers	vim/vim/src/ops.c	/^clear_registers(void)$/;"	f	signature:(void)
clear_sb_text	vim/vim/src/message.c	/^clear_sb_text(int all)$/;"	f	signature:(int all)
clear_screen	vim/vim/src/os_win32.c	/^clear_screen(void)$/;"	f	file:	signature:(void)
clear_screen	vim/vim/src/os_win32.c	/^static void clear_screen(void);$/;"	p	file:	signature:(void)
clear_showcmd	vim/vim/src/normal.c	/^clear_showcmd(void)$/;"	f	signature:(void)
clear_snapshot	vim/vim/src/window.c	/^clear_snapshot(tabpage_T *tp, int idx)$/;"	f	file:	signature:(tabpage_T *tp, int idx)
clear_snapshot	vim/vim/src/window.c	/^static void clear_snapshot(tabpage_T *tp, int idx);$/;"	p	file:	signature:(tabpage_T *tp, int idx)
clear_snapshot_rec	vim/vim/src/window.c	/^clear_snapshot_rec(frame_T *fr)$/;"	f	file:	signature:(frame_T *fr)
clear_snapshot_rec	vim/vim/src/window.c	/^static void clear_snapshot_rec(frame_T *fr);$/;"	p	file:	signature:(frame_T *fr)
clear_spell_chartab	vim/vim/src/spell.c	/^clear_spell_chartab(spelltab_T *sp)$/;"	f	signature:(spelltab_T *sp)
clear_string_option	vim/vim/src/option.c	/^clear_string_option(char_u **pp)$/;"	f	signature:(char_u **pp)
clear_sub	vim/vim/src/regexp_nfa.c	/^clear_sub(regsub_T *sub)$/;"	f	file:	signature:(regsub_T *sub)
clear_sub	vim/vim/src/regexp_nfa.c	/^static void clear_sub(regsub_T *sub);$/;"	p	file:	signature:(regsub_T *sub)
clear_submatch_list	vim/vim/src/regexp.c	/^clear_submatch_list(staticList10_T *sl)$/;"	f	file:	signature:(staticList10_T *sl)
clear_syn_state	vim/vim/src/syntax.c	/^clear_syn_state(synstate_T *p)$/;"	f	file:	signature:(synstate_T *p)
clear_syn_state	vim/vim/src/syntax.c	/^static void clear_syn_state(synstate_T *p);$/;"	p	file:	signature:(synstate_T *p)
clear_termcodes	vim/vim/src/term.c	/^clear_termcodes(void)$/;"	f	signature:(void)
clear_termoptions	vim/vim/src/option.c	/^clear_termoptions(void)$/;"	f	signature:(void)
clear_to_end_of_display	vim/vim/src/os_win32.c	/^clear_to_end_of_display(void)$/;"	f	file:	signature:(void)
clear_to_end_of_display	vim/vim/src/os_win32.c	/^static void clear_to_end_of_display(void);$/;"	p	file:	signature:(void)
clear_to_end_of_line	vim/vim/src/os_win32.c	/^clear_to_end_of_line(void)$/;"	f	file:	signature:(void)
clear_to_end_of_line	vim/vim/src/os_win32.c	/^static void clear_to_end_of_line(void);$/;"	p	file:	signature:(void)
clear_tv	vim/vim/src/eval.c	/^clear_tv(typval_T *varp)$/;"	f	signature:(typval_T *varp)
clear_wininfo	vim/vim/src/buffer.c	/^clear_wininfo(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
clear_wininfo	vim/vim/src/buffer.c	/^static void	clear_wininfo(buf_T *buf);$/;"	p	file:	signature:(buf_T *buf)
clear_winopt	vim/vim/src/option.c	/^clear_winopt(winopt_T *wop UNUSED)$/;"	f	signature:(winopt_T *wop UNUSED)
clear_xterm_clip	vim/vim/src/os_unix.c	/^clear_xterm_clip(void)$/;"	f	signature:(void)
clearfun	vim/vim/src/if_py_both.h	/^typedef int (*clearfun)(void **);$/;"	t
clearmode	vim/vim/src/screen.c	/^clearmode(void)$/;"	f	signature:(void)
clearop	vim/vim/src/normal.c	/^clearop(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
clearop	vim/vim/src/normal.c	/^static void	clearop(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
clearopbeep	vim/vim/src/normal.c	/^clearopbeep(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
clearopbeep	vim/vim/src/normal.c	/^static void	clearopbeep(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
clickIsPopup	vim/vim/src/gui_mac.c	/^static short clickIsPopup;$/;"	v	file:
clicked_page	vim/vim/src/gui_gtk_x11.c	/^static int clicked_page;	    \/* page clicked in tab line *\/$/;"	v	file:
clientData	vim/vim/src/gui_beval.h	/^    void		*clientData;	\/* For callback *\/$/;"	m	struct:BalloonEvalStruct	access:public
clientWindow	vim/vim/src/globals.h	/^EXTERN HWND	clientWindow INIT(= 0);$/;"	v
clientWindow	vim/vim/src/globals.h	/^EXTERN Window	clientWindow INIT(= None);$/;"	v
client_enc	vim/vim/src/os_mswin.c	/^static char_u	*client_enc = NULL;$/;"	v	file:
clientid	vim/vim/src/os_unix.c	/^    char *clientid;	    \/* The client ID for the current smc session *\/$/;"	m	struct:__anon74	file:	access:public
clip_auto_select	vim/vim/src/ui.c	/^clip_auto_select(void)$/;"	f	signature:(void)
clip_autoselect_plus	vim/vim/src/globals.h	/^EXTERN int	clip_autoselect_plus INIT(= FALSE);$/;"	v
clip_autoselect_star	vim/vim/src/globals.h	/^EXTERN int	clip_autoselect_star INIT(= FALSE);$/;"	v
clip_autoselectml	vim/vim/src/globals.h	/^EXTERN int	clip_autoselectml INIT(= FALSE);$/;"	v
clip_clear_selection	vim/vim/src/ui.c	/^clip_clear_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_compare_pos	vim/vim/src/ui.c	/^clip_compare_pos($/;"	f	file:	signature:( int row1, int col1, int row2, int col2)
clip_compare_pos	vim/vim/src/ui.c	/^static int clip_compare_pos(int row1, int col1, int row2, int col2);$/;"	p	file:	signature:(int row1, int col1, int row2, int col2)
clip_convert_selection	vim/vim/src/ops.c	/^clip_convert_selection(char_u **str, long_u *len, VimClipboard *cbd)$/;"	f	signature:(char_u **str, long_u *len, VimClipboard *cbd)
clip_copy_modeless_selection	vim/vim/src/ui.c	/^clip_copy_modeless_selection(int both UNUSED)$/;"	f	signature:(int both UNUSED)
clip_copy_selection	vim/vim/src/ui.c	/^clip_copy_selection(VimClipboard *clip)$/;"	f	file:	signature:(VimClipboard *clip)
clip_did_set_selection	vim/vim/src/ui.c	/^static int clip_did_set_selection = TRUE;$/;"	v	file:
clip_exclude_prog	vim/vim/src/globals.h	/^EXTERN regprog_T *clip_exclude_prog INIT(= NULL);$/;"	v
clip_free_selection	vim/vim/src/ops.c	/^clip_free_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_gen_lose_selection	vim/vim/src/ui.c	/^clip_gen_lose_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_gen_own_selection	vim/vim/src/ui.c	/^clip_gen_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_gen_owner_exists	vim/vim/src/ui.c	/^clip_gen_owner_exists(VimClipboard *cbd UNUSED)$/;"	f	signature:(VimClipboard *cbd UNUSED)
clip_gen_request_selection	vim/vim/src/ui.c	/^clip_gen_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_gen_set_selection	vim/vim/src/ui.c	/^clip_gen_set_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_get_line_end	vim/vim/src/ui.c	/^clip_get_line_end(int row)$/;"	f	file:	signature:(int row)
clip_get_line_end	vim/vim/src/ui.c	/^static int  clip_get_line_end(int);$/;"	p	file:	signature:(int)
clip_get_selection	vim/vim/src/ops.c	/^clip_get_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_get_word_boundaries	vim/vim/src/ui.c	/^clip_get_word_boundaries(VimClipboard *cb, int row, int col)$/;"	f	file:	signature:(VimClipboard *cb, int row, int col)
clip_get_word_boundaries	vim/vim/src/ui.c	/^static void clip_get_word_boundaries(VimClipboard *, int, int);$/;"	p	file:	signature:(VimClipboard *, int, int)
clip_gtk_owner_exists	vim/vim/src/gui_gtk_x11.c	/^clip_gtk_owner_exists(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_html	vim/vim/src/globals.h	/^EXTERN int	clip_html INIT(= FALSE);$/;"	v
clip_init	vim/vim/src/ui.c	/^clip_init(int can_use)$/;"	f	signature:(int can_use)
clip_invert_area	vim/vim/src/ui.c	/^clip_invert_area($/;"	f	file:	signature:( int row1, int col1, int row2, int col2, int how)
clip_invert_area	vim/vim/src/ui.c	/^static void clip_invert_area(int, int, int, int, int how);$/;"	p	file:	signature:(int, int, int, int, int how)
clip_invert_rectangle	vim/vim/src/ui.c	/^clip_invert_rectangle($/;"	f	file:	signature:( int row, int col, int height, int width, int invert)
clip_invert_rectangle	vim/vim/src/ui.c	/^static void clip_invert_rectangle(int row, int col, int height, int width, int invert);$/;"	p	file:	signature:(int row, int col, int height, int width, int invert)
clip_isautosel_plus	vim/vim/src/ui.c	/^clip_isautosel_plus(void)$/;"	f	signature:(void)
clip_isautosel_star	vim/vim/src/ui.c	/^clip_isautosel_star(void)$/;"	f	signature:(void)
clip_lose_selection	vim/vim/src/ui.c	/^clip_lose_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_may_clear_selection	vim/vim/src/ui.c	/^clip_may_clear_selection(int row1, int row2)$/;"	f	signature:(int row1, int row2)
clip_may_redraw_selection	vim/vim/src/ui.c	/^clip_may_redraw_selection(int row, int col, int len)$/;"	f	signature:(int row, int col, int len)
clip_mch_lose_selection	vim/vim/src/gui_gtk_x11.c	/^clip_mch_lose_selection(VimClipboard *cbd UNUSED)$/;"	f	signature:(VimClipboard *cbd UNUSED)
clip_mch_lose_selection	vim/vim/src/gui_mac.c	/^clip_mch_lose_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_lose_selection	vim/vim/src/gui_x11.c	/^clip_mch_lose_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_lose_selection	vim/vim/src/os_qnx.c	/^clip_mch_lose_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_lose_selection	vim/vim/src/proto.h	/^void clip_mch_lose_selection(VimClipboard *cbd);$/;"	p	signature:(VimClipboard *cbd)
clip_mch_lose_selection	vim/vim/src/winclip.c	/^clip_mch_lose_selection(VimClipboard *cbd UNUSED)$/;"	f	signature:(VimClipboard *cbd UNUSED)
clip_mch_own_selection	vim/vim/src/gui_gtk_x11.c	/^clip_mch_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_own_selection	vim/vim/src/gui_mac.c	/^clip_mch_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_own_selection	vim/vim/src/gui_x11.c	/^clip_mch_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_own_selection	vim/vim/src/os_qnx.c	/^clip_mch_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_own_selection	vim/vim/src/proto.h	/^int clip_mch_own_selection(VimClipboard *cbd);$/;"	p	signature:(VimClipboard *cbd)
clip_mch_own_selection	vim/vim/src/winclip.c	/^clip_mch_own_selection(VimClipboard *cbd UNUSED)$/;"	f	signature:(VimClipboard *cbd UNUSED)
clip_mch_request_selection	vim/vim/src/gui_gtk_x11.c	/^clip_mch_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_request_selection	vim/vim/src/gui_mac.c	/^clip_mch_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_request_selection	vim/vim/src/gui_x11.c	/^clip_mch_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_request_selection	vim/vim/src/os_qnx.c	/^clip_mch_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_request_selection	vim/vim/src/proto.h	/^void clip_mch_request_selection(VimClipboard *cbd);$/;"	p	signature:(VimClipboard *cbd)
clip_mch_request_selection	vim/vim/src/winclip.c	/^clip_mch_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_set_selection	vim/vim/src/gui_gtk_x11.c	/^clip_mch_set_selection(VimClipboard *cbd UNUSED)$/;"	f	signature:(VimClipboard *cbd UNUSED)
clip_mch_set_selection	vim/vim/src/gui_mac.c	/^clip_mch_set_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_set_selection	vim/vim/src/gui_x11.c	/^clip_mch_set_selection($/;"	f	signature:( VimClipboard *cbd)
clip_mch_set_selection	vim/vim/src/os_qnx.c	/^clip_mch_set_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_mch_set_selection	vim/vim/src/proto.h	/^void clip_mch_set_selection(VimClipboard *cbd);$/;"	p	signature:(VimClipboard *cbd)
clip_mch_set_selection	vim/vim/src/winclip.c	/^clip_mch_set_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_modeless	vim/vim/src/ui.c	/^clip_modeless(int button, int is_click, int is_drag)$/;"	f	signature:(int button, int is_click, int is_drag)
clip_own_selection	vim/vim/src/ui.c	/^clip_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_plus	vim/vim/src/globals.h	/^EXTERN VimClipboard clip_plus;	\/* CLIPBOARD selection in X11 *\/$/;"	v
clip_plus	vim/vim/src/globals.h	525;"	d
clip_plus_save	vim/vim/src/os_unix.c	/^static void *clip_plus_save = NULL;$/;"	v	file:
clip_process_selection	vim/vim/src/ui.c	/^clip_process_selection($/;"	f	signature:( int button, int col, int row, int_u repeated_click)
clip_scroll_selection	vim/vim/src/ui.c	/^clip_scroll_selection($/;"	f	signature:( int rows)
clip_star	vim/vim/src/globals.h	/^EXTERN VimClipboard clip_star;	\/* PRIMARY selection in X11 *\/$/;"	v
clip_star_save	vim/vim/src/os_unix.c	/^static void *clip_star_save = NULL;$/;"	v	file:
clip_start_selection	vim/vim/src/ui.c	/^clip_start_selection(int col, int row, int repeated_click)$/;"	f	signature:(int col, int row, int repeated_click)
clip_unnamed	vim/vim/src/globals.h	/^EXTERN int	clip_unnamed INIT(= 0); \/* above two values or'ed *\/$/;"	v
clip_unnamed_saved	vim/vim/src/globals.h	/^EXTERN int	clip_unnamed_saved INIT(= 0);$/;"	v
clip_update	vim/vim/src/os_unix.c	/^clip_update(void)$/;"	f	file:	signature:(void)
clip_update	vim/vim/src/os_unix.c	/^static void clip_update(void);$/;"	p	file:	signature:(void)
clip_update_modeless_selection	vim/vim/src/ui.c	/^clip_update_modeless_selection($/;"	f	file:	signature:( VimClipboard *cb, int row1, int col1, int row2, int col2)
clip_update_modeless_selection	vim/vim/src/ui.c	/^static void clip_update_modeless_selection(VimClipboard *, int, int,$/;"	p	file:	signature:(VimClipboard *, int, int, int, int)
clip_update_selection	vim/vim/src/ui.c	/^clip_update_selection(VimClipboard *clip)$/;"	f	signature:(VimClipboard *clip)
clip_x11_convert_selection_cb	vim/vim/src/ui.c	/^clip_x11_convert_selection_cb($/;"	f	file:	signature:( Widget w UNUSED, Atom *sel_atom, Atom *target, Atom *type, XtPointer *value, long_u *length, int *format)
clip_x11_convert_selection_cb	vim/vim/src/ui.c	/^static Boolean	clip_x11_convert_selection_cb(Widget w, Atom *sel_atom, Atom *target, Atom *type, XtPointer *value, long_u *length, int *format);$/;"	p	file:	signature:(Widget w, Atom *sel_atom, Atom *target, Atom *type, XtPointer *value, long_u *length, int *format)
clip_x11_lose_ownership_cb	vim/vim/src/ui.c	/^clip_x11_lose_ownership_cb(Widget w UNUSED, Atom *sel_atom)$/;"	f	file:	signature:(Widget w UNUSED, Atom *sel_atom)
clip_x11_lose_ownership_cb	vim/vim/src/ui.c	/^static void clip_x11_lose_ownership_cb(Widget w, Atom *sel_atom);$/;"	p	file:	signature:(Widget w, Atom *sel_atom)
clip_x11_lose_selection	vim/vim/src/ui.c	/^clip_x11_lose_selection(Widget myShell, VimClipboard *cbd)$/;"	f	signature:(Widget myShell, VimClipboard *cbd)
clip_x11_notify_cb	vim/vim/src/ui.c	/^clip_x11_notify_cb(Widget w UNUSED, Atom *sel_atom UNUSED, Atom *target UNUSED)$/;"	f	file:	signature:(Widget w UNUSED, Atom *sel_atom UNUSED, Atom *target UNUSED)
clip_x11_notify_cb	vim/vim/src/ui.c	/^static void clip_x11_notify_cb(Widget w, Atom *sel_atom, Atom *target);$/;"	p	file:	signature:(Widget w, Atom *sel_atom, Atom *target)
clip_x11_own_selection	vim/vim/src/ui.c	/^clip_x11_own_selection(Widget myShell, VimClipboard *cbd)$/;"	f	signature:(Widget myShell, VimClipboard *cbd)
clip_x11_owner_exists	vim/vim/src/ui.c	/^clip_x11_owner_exists(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_x11_request_selection	vim/vim/src/ui.c	/^clip_x11_request_selection($/;"	f	signature:( Widget myShell, Display *dpy, VimClipboard *cbd)
clip_x11_request_selection_cb	vim/vim/src/ui.c	/^clip_x11_request_selection_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer success, Atom *sel_atom, Atom *type, XtPointer value, long_u *length, int *format)
clip_x11_request_selection_cb	vim/vim/src/ui.c	/^static void clip_x11_request_selection_cb(Widget w, XtPointer success, Atom *sel_atom, Atom *type, XtPointer value, long_u *length, int *format);$/;"	p	file:	signature:(Widget w, XtPointer success, Atom *sel_atom, Atom *type, XtPointer value, long_u *length, int *format)
clip_x11_set_selection	vim/vim/src/ui.c	/^clip_x11_set_selection(VimClipboard *cbd UNUSED)$/;"	f	signature:(VimClipboard *cbd UNUSED)
clip_x11_timestamp_cb	vim/vim/src/ui.c	/^clip_x11_timestamp_cb($/;"	f	file:	signature:( Widget w, XtPointer n UNUSED, XEvent *event, Boolean *cont UNUSED)
clip_x11_timestamp_cb	vim/vim/src/ui.c	/^static void clip_x11_timestamp_cb(Widget w, XtPointer n, XEvent *event, Boolean *cont);$/;"	p	file:	signature:(Widget w, XtPointer n, XEvent *event, Boolean *cont)
clip_xterm_lose_selection	vim/vim/src/os_unix.c	/^clip_xterm_lose_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_xterm_own_selection	vim/vim/src/os_unix.c	/^clip_xterm_own_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_xterm_request_selection	vim/vim/src/os_unix.c	/^clip_xterm_request_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_xterm_set_selection	vim/vim/src/os_unix.c	/^clip_xterm_set_selection(VimClipboard *cbd)$/;"	f	signature:(VimClipboard *cbd)
clip_yank_selection	vim/vim/src/ops.c	/^clip_yank_selection($/;"	f	signature:( int type, char_u *str, long len, VimClipboard *cbd)
clipboard_needs_update	vim/vim/src/ui.c	/^static int clipboard_needs_update = FALSE; \/* clipboard needs to be updated *\/$/;"	v	file:
cloneFoldGrowArray	vim/vim/src/fold.c	/^cloneFoldGrowArray(garray_T *from, garray_T *to)$/;"	f	signature:(garray_T *from, garray_T *to)
closeFold	vim/vim/src/fold.c	/^closeFold(linenr_T lnum, long count)$/;"	f	signature:(linenr_T lnum, long count)
closeFoldRecurse	vim/vim/src/fold.c	/^closeFoldRecurse(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
close_all_scripts	vim/vim/src/getchar.c	/^close_all_scripts(void)$/;"	f	signature:(void)
close_buffer	vim/vim/src/buffer.c	/^close_buffer($/;"	f	signature:( win_T *win, buf_T *buf, int action, int abort_if_last UNUSED)
close_dll	vim/vim/src/if_lua.c	76;"	d	file:
close_dll	vim/vim/src/if_lua.c	80;"	d	file:
close_dll	vim/vim/src/if_python.c	141;"	d	file:
close_dll	vim/vim/src/if_python.c	145;"	d	file:
close_dll	vim/vim/src/if_python3.c	133;"	d	file:
close_dll	vim/vim/src/if_python3.c	137;"	d	file:
close_dll	vim/vim/src/if_ruby.c	71;"	d	file:
close_dll	vim/vim/src/if_ruby.c	76;"	d	file:
close_dll	vim/vim/src/if_tcl.c	169;"	d	file:
close_dll	vim/vim/src/if_tcl.c	174;"	d	file:
close_last_window_tabpage	vim/vim/src/window.c	/^close_last_window_tabpage($/;"	f	file:	signature:( win_T *win, int free_buf, tabpage_T *prev_curtab)
close_last_window_tabpage	vim/vim/src/window.c	/^static int close_last_window_tabpage(win_T *win, int free_buf, tabpage_T *prev_curtab);$/;"	p	file:	signature:(win_T *win, int free_buf, tabpage_T *prev_curtab)
close_others	vim/vim/src/window.c	/^close_others($/;"	f	signature:( int message, int forceit)
close_redir	vim/vim/src/ex_docmd.c	/^close_redir(void)$/;"	f	file:	signature:(void)
close_redir	vim/vim/src/ex_docmd.c	/^static void	close_redir(void);$/;"	p	file:	signature:(void)
close_signicon_image	vim/vim/src/gui_w32.c	/^close_signicon_image(signicon_t *sign)$/;"	f	file:	signature:(signicon_t *sign)
close_spellbuf	vim/vim/src/spell.c	/^close_spellbuf(buf_T *buf)$/;"	f	signature:(buf_T *buf)
close_tabpage	vim/vim/src/window.c	/^close_tabpage(tabpage_T *tab)$/;"	f	signature:(tabpage_T *tab)
close_win	vim/vim/src/os_amiga.c	/^static int		close_win = FALSE;  \/* set if Vim opened the window *\/$/;"	v	file:
close_windows	vim/vim/src/window.c	/^close_windows($/;"	f	signature:( buf_T *buf, int keep_curwin)
closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int closeness;		\/* Allowable RGB deviation *\/$/;"	m	struct:__anon93	access:public
closescript	vim/vim/src/getchar.c	/^closescript(void)$/;"	f	file:	signature:(void)
closescript	vim/vim/src/getchar.c	/^static void	closescript(void);$/;"	p	file:	signature:(void)
clr_history	vim/vim/src/ex_getln.c	/^clr_history(int histype)$/;"	f	signature:(int histype)
clrallmarks	vim/vim/src/mark.c	/^clrallmarks(buf_T *buf)$/;"	f	signature:(buf_T *buf)
cls	vim/vim/src/search.c	/^cls(void)$/;"	f	file:	signature:(void)
cls	vim/vim/src/search.c	/^static int cls(void);$/;"	p	file:	signature:(void)
cls_bigword	vim/vim/src/search.c	/^static int	cls_bigword;	\/* TRUE for "W", "B" or "E" *\/$/;"	v	file:
cmap_charset	vim/vim/src/hardcopy.c	/^    char	*cmap_charset;$/;"	m	struct:prt_ps_charset_S	file:	access:public
cmap_encoding	vim/vim/src/hardcopy.c	/^    char	*cmap_encoding;$/;"	m	struct:prt_ps_encoding_S	file:	access:public
cmd	vim/vim/src/ex_cmds.h	/^    char_u	*cmd;		\/* the name of the command (except for :make) *\/$/;"	m	struct:exarg	access:public
cmd	vim/vim/src/fileio.c	/^    char_u	    *cmd;		\/* The command to be executed (NULL$/;"	m	struct:AutoCmd	file:	access:public
cmd	vim/vim/src/if_tcl.c	/^    Tcl_Command cmd;	    \/* Tcl command that represents this object *\/$/;"	m	struct:ref	file:	access:public
cmd_addr_type	vim/vim/src/ex_cmds.h	/^    int		cmd_addr_type;	\/* flag for address type *\/$/;"	m	struct:cmdname	access:public
cmd_arg	vim/vim/src/normal.c	/^    short	cmd_arg;	\/* value for ca.arg *\/$/;"	m	struct:nv_cmd	file:	access:public
cmd_argt	vim/vim/src/ex_cmds.h	/^    long_u	cmd_argt;	\/* flags declared above *\/$/;"	m	struct:cmdname	access:public
cmd_char	vim/vim/src/normal.c	/^    int		cmd_char;	\/* (first) command character *\/$/;"	m	struct:nv_cmd	file:	access:public
cmd_exists	vim/vim/src/ex_docmd.c	/^cmd_exists(char_u *name)$/;"	f	signature:(char_u *name)
cmd_fkmap	vim/vim/src/ex_getln.c	/^static int	cmd_fkmap = 0;	\/* Farsi mapping during command line *\/$/;"	v	file:
cmd_flags	vim/vim/src/normal.c	/^    short_u	cmd_flags;	\/* NV_ flags *\/$/;"	m	struct:nv_cmd	file:	access:public
cmd_func	vim/vim/src/ex_cmds.h	/^    ex_func_T   cmd_func;	\/* function for this command *\/$/;"	m	struct:cmdname	access:public
cmd_func	vim/vim/src/normal.c	/^    nv_func_T   cmd_func;	\/* function for this command *\/$/;"	m	struct:nv_cmd	file:	access:public
cmd_gchar	vim/vim/src/ex_getln.c	/^cmd_gchar(int offset)$/;"	f	signature:(int offset)
cmd_hkmap	vim/vim/src/ex_getln.c	/^static int	cmd_hkmap = 0;	\/* Hebrew mapping during command line *\/$/;"	v	file:
cmd_name	vim/vim/src/ex_cmds.h	/^    char_u	*cmd_name;	\/* name of the command *\/$/;"	m	struct:cmdname	access:public
cmd_pchar	vim/vim/src/ex_getln.c	/^cmd_pchar(int c, int offset)$/;"	f	signature:(int c, int offset)
cmd_showtail	vim/vim/src/ex_getln.c	/^static int	cmd_showtail;		\/* Only show path tail in lists ? *\/$/;"	v	file:
cmd_silent	vim/vim/src/globals.h	/^EXTERN int	cmd_silent INIT(= FALSE); \/* don't echo the command line *\/$/;"	v
cmd_source	vim/vim/src/ex_cmds2.c	/^cmd_source(char_u *fname, exarg_T *eap)$/;"	f	file:	signature:(char_u *fname, exarg_T *eap)
cmd_source	vim/vim/src/ex_cmds2.c	/^static void	cmd_source(char_u *fname, exarg_T *eap);$/;"	p	file:	signature:(char_u *fname, exarg_T *eap)
cmd_with_count	vim/vim/src/window.c	/^cmd_with_count($/;"	f	file:	signature:( char *cmd, char_u *bufp, size_t bufsize, long Prenum)
cmd_with_count	vim/vim/src/window.c	/^static void cmd_with_count(char *cmd, char_u *bufp, size_t bufsize, long Prenum);$/;"	p	file:	signature:(char *cmd, char_u *bufp, size_t bufsize, long Prenum)
cmdarg_S	vim/vim/src/structs.h	/^typedef struct cmdarg_S$/;"	s
cmdarg_S::arg	vim/vim/src/structs.h	/^    int		arg;		\/* extra argument from nv_cmds[] *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::cmdchar	vim/vim/src/structs.h	/^    int		cmdchar;	\/* command character *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::count0	vim/vim/src/structs.h	/^    long	count0;		\/* count before command, default 0 *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::count1	vim/vim/src/structs.h	/^    long	count1;		\/* count before command, default 1 *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::extra_char	vim/vim/src/structs.h	/^    int		extra_char;	\/* yet another character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::nchar	vim/vim/src/structs.h	/^    int		nchar;		\/* next command character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::ncharC1	vim/vim/src/structs.h	/^    int		ncharC1;	\/* first composing character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::ncharC2	vim/vim/src/structs.h	/^    int		ncharC2;	\/* second composing character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::oap	vim/vim/src/structs.h	/^    oparg_T	*oap;		\/* Operator arguments *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::opcount	vim/vim/src/structs.h	/^    long	opcount;	\/* count before an operator *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::prechar	vim/vim/src/structs.h	/^    int		prechar;	\/* prefix character (optional, always 'g') *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::retval	vim/vim/src/structs.h	/^    int		retval;		\/* return: CA_* values *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_S::searchbuf	vim/vim/src/structs.h	/^    char_u	*searchbuf;	\/* return: pointer to search pattern or NULL *\/$/;"	m	struct:cmdarg_S	access:public
cmdarg_T	vim/vim/src/structs.h	/^} cmdarg_T;$/;"	t	typeref:struct:cmdarg_S
cmdattr	vim/vim/src/ex_getln.c	/^    int		cmdattr;	\/* attributes for prompt *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdbuff	vim/vim/src/ex_getln.c	/^    char_u	*cmdbuff;	\/* pointer to command line buffer *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdbufflen	vim/vim/src/ex_getln.c	/^    int		cmdbufflen;	\/* length of cmdbuff *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdchar	vim/vim/src/structs.h	/^    int		cmdchar;	\/* command character *\/$/;"	m	struct:cmdarg_S	access:public
cmdcomplete_str_to_type	vim/vim/src/ex_docmd.c	/^cmdcomplete_str_to_type(char_u *complete_str)$/;"	f	signature:(char_u *complete_str)
cmdfirstc	vim/vim/src/ex_getln.c	/^    int		cmdfirstc;	\/* ':', '\/', '?', '=', '>' or NUL *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdidx	vim/vim/src/ex_cmds.h	/^    cmdidx_T	cmdidx;		\/* the index for the command *\/$/;"	m	struct:exarg	access:public
cmdidx_T	vim/vim/src/ex_cmds.h	/^typedef enum CMD_index cmdidx_T;$/;"	t	typeref:enum:CMD_index
cmdidxs1	vim/vim/src/ex_cmdidxs.h	/^static const unsigned short cmdidxs1[26] =$/;"	v
cmdidxs2	vim/vim/src/ex_cmdidxs.h	/^static const unsigned char cmdidxs2[26][26] =$/;"	v
cmdindent	vim/vim/src/ex_getln.c	/^    int		cmdindent;	\/* number of spaces before cmdline *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdl_fkmap	vim/vim/src/farsi.c	/^cmdl_fkmap(int c)$/;"	f	signature:(int c)
cmdlen	vim/vim/src/ex_getln.c	/^    int		cmdlen;		\/* number of chars in command line *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_at_end	vim/vim/src/ex_getln.c	/^cmdline_at_end(void)$/;"	f	signature:(void)
cmdline_charsize	vim/vim/src/ex_getln.c	/^cmdline_charsize(int idx)$/;"	f	file:	signature:(int idx)
cmdline_charsize	vim/vim/src/ex_getln.c	/^static int	cmdline_charsize(int idx);$/;"	p	file:	signature:(int idx)
cmdline_del	vim/vim/src/ex_getln.c	/^cmdline_del(int from)$/;"	f	file:	signature:(int from)
cmdline_del	vim/vim/src/ex_getln.c	/^static void	cmdline_del(int from);$/;"	p	file:	signature:(int from)
cmdline_getvcol_cursor	vim/vim/src/ex_getln.c	/^cmdline_getvcol_cursor(void)$/;"	f	signature:(void)
cmdline_info	vim/vim/src/ex_getln.c	/^struct cmdline_info$/;"	s	file:
cmdline_info::cmdattr	vim/vim/src/ex_getln.c	/^    int		cmdattr;	\/* attributes for prompt *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdbuff	vim/vim/src/ex_getln.c	/^    char_u	*cmdbuff;	\/* pointer to command line buffer *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdbufflen	vim/vim/src/ex_getln.c	/^    int		cmdbufflen;	\/* length of cmdbuff *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdfirstc	vim/vim/src/ex_getln.c	/^    int		cmdfirstc;	\/* ':', '\/', '?', '=', '>' or NUL *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdindent	vim/vim/src/ex_getln.c	/^    int		cmdindent;	\/* number of spaces before cmdline *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdlen	vim/vim/src/ex_getln.c	/^    int		cmdlen;		\/* number of chars in command line *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdpos	vim/vim/src/ex_getln.c	/^    int		cmdpos;		\/* current cursor position *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdprompt	vim/vim/src/ex_getln.c	/^    char_u	*cmdprompt;	\/* message in front of cmdline *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::cmdspos	vim/vim/src/ex_getln.c	/^    int		cmdspos;	\/* cursor column on screen *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::input_fn	vim/vim/src/ex_getln.c	/^    int		input_fn;	\/* when TRUE Invoked for input() function *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::overstrike	vim/vim/src/ex_getln.c	/^    int		overstrike;	\/* Typing mode on the command line.  Shared by$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::xp_arg	vim/vim/src/ex_getln.c	/^    char_u	*xp_arg;	\/* user-defined expansion arg *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::xp_context	vim/vim/src/ex_getln.c	/^    int		xp_context;	\/* type of expansion *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdline_info::xpc	vim/vim/src/ex_getln.c	/^    expand_T	*xpc;		\/* struct being used for expansion, xp_pattern$/;"	m	struct:cmdline_info	file:	access:public
cmdline_option_T	vim/vim/src/gui_gtk_x11.c	/^cmdline_option_T;$/;"	t	typeref:struct:__anon157	file:
cmdline_options	vim/vim/src/gui_gtk_x11.c	/^static const cmdline_option_T cmdline_options[] =$/;"	v	file:
cmdline_options	vim/vim/src/gui_x11.c	/^static XrmOptionDescRec cmdline_options[] =$/;"	v	file:
cmdline_overstrike	vim/vim/src/ex_getln.c	/^cmdline_overstrike(void)$/;"	f	signature:(void)
cmdline_paste	vim/vim/src/ex_getln.c	/^cmdline_paste($/;"	f	file:	signature:( int regname, int literally, int remcr)
cmdline_paste	vim/vim/src/ex_getln.c	/^static int	cmdline_paste(int regname, int literally, int remcr);$/;"	p	file:	signature:(int regname, int literally, int remcr)
cmdline_paste_reg	vim/vim/src/ops.c	/^cmdline_paste_reg($/;"	f	signature:( int regname, int literally, int remcr)
cmdline_paste_str	vim/vim/src/ex_getln.c	/^cmdline_paste_str(char_u *s, int literally)$/;"	f	signature:(char_u *s, int literally)
cmdline_row	vim/vim/src/globals.h	/^EXTERN int	cmdline_row;$/;"	v
cmdline_star	vim/vim/src/globals.h	/^EXTERN int	cmdline_star INIT(= FALSE);	\/* cmdline is crypted *\/$/;"	v
cmdlinep	vim/vim/src/ex_cmds.h	/^    char_u	**cmdlinep;	\/* pointer to pointer of allocated cmdline *\/$/;"	m	struct:exarg	access:public
cmdmod	vim/vim/src/ex_docmd.c	/^static struct cmdmod$/;"	s	file:
cmdmod	vim/vim/src/globals.h	/^EXTERN cmdmod_T	cmdmod;			\/* Ex command modifiers *\/$/;"	v
cmdmod::has_count	vim/vim/src/ex_docmd.c	/^    int		has_count;  \/* :123verbose  :3tab *\/$/;"	m	struct:cmdmod	file:	access:public
cmdmod::minlen	vim/vim/src/ex_docmd.c	/^    int		minlen;$/;"	m	struct:cmdmod	file:	access:public
cmdmod::name	vim/vim/src/ex_docmd.c	/^    char	*name;$/;"	m	struct:cmdmod	file:	access:public
cmdmod_T	vim/vim/src/structs.h	/^} cmdmod_T;$/;"	t	typeref:struct:__anon171
cmdmods	vim/vim/src/ex_docmd.c	/^} cmdmods[] = {$/;"	v	typeref:struct:cmdmod	file:
cmdmsg_rl	vim/vim/src/globals.h	/^EXTERN int	cmdmsg_rl INIT(= FALSE);    \/* cmdline is drawn right to left *\/$/;"	v
cmdname	vim/vim/src/ex_cmds.h	/^static struct cmdname$/;"	s
cmdname::cmd_addr_type	vim/vim/src/ex_cmds.h	/^    int		cmd_addr_type;	\/* flag for address type *\/$/;"	m	struct:cmdname	access:public
cmdname::cmd_argt	vim/vim/src/ex_cmds.h	/^    long_u	cmd_argt;	\/* flags declared above *\/$/;"	m	struct:cmdname	access:public
cmdname::cmd_func	vim/vim/src/ex_cmds.h	/^    ex_func_T   cmd_func;	\/* function for this command *\/$/;"	m	struct:cmdname	access:public
cmdname::cmd_name	vim/vim/src/ex_cmds.h	/^    char_u	*cmd_name;	\/* name of the command *\/$/;"	m	struct:cmdname	access:public
cmdnames	vim/vim/src/ex_cmds.h	/^} cmdnames[] =$/;"	v	typeref:struct:cmdname
cmdpos	vim/vim/src/ex_getln.c	/^    int		cmdpos;		\/* current cursor position *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdprompt	vim/vim/src/ex_getln.c	/^    char_u	*cmdprompt;	\/* message in front of cmdline *\/$/;"	m	struct:cmdline_info	file:	access:public
cmds	vim/vim/src/ex_cmds.c	/^static char *cmds[] = {$/;"	v	file:
cmds	vim/vim/src/fileio.c	/^    AutoCmd	    *cmds;		\/* list of commands to do *\/$/;"	m	struct:AutoPat	file:	access:public
cmds_tofree	vim/vim/src/structs.h	/^    char_u	cmds_tofree[MAX_ARG_CMDS];   \/* commands that need free() *\/$/;"	m	struct:__anon210	access:public
cmdspos	vim/vim/src/ex_getln.c	/^    int		cmdspos;	\/* cursor column on screen *\/$/;"	m	struct:cmdline_info	file:	access:public
cmdsrv_main	vim/vim/src/main.c	/^cmdsrv_main($/;"	f	file:	signature:( int *argc, char **argv, char_u *serverName_arg, char_u **serverStr)
cmdsrv_main	vim/vim/src/main.c	/^static void cmdsrv_main(int *argc, char **argv, char_u *serverName_arg, char_u **serverStr);$/;"	p	file:	signature:(int *argc, char **argv, char_u *serverName_arg, char_u **serverStr)
cmdwin_result	vim/vim/src/globals.h	/^EXTERN int	cmdwin_result INIT(= 0); \/* result of cmdline window or 0 *\/$/;"	v
cmdwin_type	vim/vim/src/globals.h	/^EXTERN int	cmdwin_type INIT(= 0);	\/* type of cmdline window or 0 *\/$/;"	v
cmp_flags	vim/vim/src/option.h	/^EXTERN unsigned	cmp_flags;$/;"	v
code	vim/vim/src/if_xcmdsrv.c	/^    int	    code;	\/* Result Code. 0 is OK *\/$/;"	m	struct:PendingCommand	file:	access:public
code	vim/vim/src/regexp_nfa.c	/^static char_u code[50];$/;"	v	file:
code	vim/vim/src/term.c	/^    char_u  *code;	    \/* terminal code (in allocated memory) *\/$/;"	m	struct:termcode	file:	access:public
code0	vim/vim/src/gui_gtk_x11.c	/^    char_u code0;$/;"	m	struct:special_key	file:	access:public
code1	vim/vim/src/gui_gtk_x11.c	/^    char_u code1;$/;"	m	struct:special_key	file:	access:public
code_hdr	vim/vim/src/if_py_both.h	/^static const char	*code_hdr = "def " DOPY_FUNC "(line, linenr):\\n ";$/;"	v
code_hdr_len	vim/vim/src/if_py_both.h	/^static int		code_hdr_len = 30;$/;"	v
codepage	vim/vim/src/mbyte.c	/^{   char *name;		int prop;		int codepage;}$/;"	m	struct:__anon1	file:	access:public
col	vim/vim/src/gui.h	/^    int		col;		    \/* Current cursor column in GUI display *\/$/;"	m	struct:Gui	access:public
col	vim/vim/src/libvterm/include/vterm.h	/^  int col;$/;"	m	struct:__anon47	access:public
col	vim/vim/src/quickfix.c	/^    int		col;$/;"	m	struct:__anon14	file:	access:public
col	vim/vim/src/structs.h	/^    colnr_T	col;	\/* column number *\/$/;"	m	struct:__anon161	access:public
col	vim/vim/src/structs.h	/^    colnr_T	col;	\/* column number *\/$/;"	m	struct:__anon162	access:public
col	vim/vim/src/structs.h	/^    colnr_T	col;	\/* column number *\/$/;"	m	struct:__anon202	access:public
col2index	vim/vim/src/libvterm/bin/unterm.c	/^static int col2index(VTermColor target)$/;"	f	file:	signature:(VTermColor target)
col2tcl	vim/vim/src/if_tcl.c	102;"	d	file:
col2vim	vim/vim/src/if_tcl.c	103;"	d	file:
col_adjust	vim/vim/src/mark.c	1213;"	d	file:
col_print	vim/vim/src/buffer.c	/^col_print($/;"	f	signature:( char_u *buf, size_t buflen, int col, int vcol)
coladd	vim/vim/src/structs.h	/^    colnr_T	coladd;$/;"	m	struct:__anon161	access:public
coladvance	vim/vim/src/misc2.c	/^coladvance(colnr_T wcol)$/;"	f	signature:(colnr_T wcol)
coladvance2	vim/vim/src/misc2.c	/^coladvance2($/;"	f	file:	signature:( pos_T *pos, int addspaces, int finetune, colnr_T wcol)
coladvance2	vim/vim/src/misc2.c	/^static int coladvance2(pos_T *pos, int addspaces, int finetune, colnr_T wcol);$/;"	p	file:	signature:(pos_T *pos, int addspaces, int finetune, colnr_T wcol)
coladvance_force	vim/vim/src/misc2.c	/^coladvance_force(colnr_T wcol)$/;"	f	signature:(colnr_T wcol)
coll_get_char	vim/vim/src/regexp.c	/^coll_get_char(void)$/;"	f	file:	signature:(void)
coll_get_char	vim/vim/src/regexp.c	/^static int	coll_get_char(void);$/;"	p	file:	signature:(void)
colnr_T	vim/vim/src/structs.h	/^typedef int		colnr_T;$/;"	t
colnr_T	vim/vim/src/vim.h	/^typedef int	colnr_T;		\/* column number type *\/$/;"	t
coloncmd	vim/vim/src/netbeans.c	/^coloncmd(char *cmd, ...)$/;"	f	file:	signature:(char *cmd, ...)
coloncmd	vim/vim/src/netbeans.c	/^static void coloncmd(char *cmd, ...);$/;"	p	file:	signature:(char *cmd, ...)
coloncmd	vim/vim/src/workshop.c	/^coloncmd($/;"	f	file:	signature:( char *cmd, Boolean force)
coloncmd	vim/vim/src/workshop.c	/^static void	 coloncmd(char *, Boolean);$/;"	p	file:	signature:(char *, Boolean)
color	vim/vim/src/gui_dwrite.cpp	/^    COLORREF color;$/;"	m	struct:GdiTextRendererContext	file:	access:public
color	vim/vim/src/libvterm/include/vterm.h	/^  VTermColor color;$/;"	m	union:__anon51	access:public
color2index	vim/vim/src/terminal.c	/^color2index(VTermColor *color)$/;"	f	file:	signature:(VTermColor *color)
colorTable	vim/vim/src/xpm/include/xpm.h	/^    XpmColor *colorTable;	\/* list of related colors *\/$/;"	m	struct:__anon91	access:public
colorTable	vim/vim/src/xpm/include/xpm.h	/^    XpmColor *colorTable;               \/* List of colors *\/$/;"	m	struct:__anon93	access:public
color_approx	vim/vim/src/gui.h	/^    Bool	color_approx;	    \/* Some color was approximated *\/$/;"	m	struct:Gui	access:public
color_closure	vim/vim/src/xpm/include/xpm.h	/^    void *color_closure;		\/* Application private data to pass to$/;"	m	struct:__anon93	access:public
color_key	vim/vim/src/xpm/include/xpm.h	/^    int color_key;			\/* Use colors from this color set *\/$/;"	m	struct:__anon93	access:public
color_name2handle	vim/vim/src/syntax.c	/^color_name2handle(char_u *name)$/;"	f	file:	signature:(char_u *name)
color_name2handle	vim/vim/src/syntax.c	/^static guicolor_T color_name2handle(char_u *name);$/;"	p	file:	signature:(char_u *name)
color_to_rgba	vim/vim/src/gui_gtk_x11.c	/^color_to_rgba(guicolor_T color)$/;"	f	file:	signature:(guicolor_T color)
colormap	vim/vim/src/xpm/include/xpm.h	/^    Colormap colormap;			\/* Specifies the colormap to use *\/$/;"	m	struct:__anon93	access:public
colors	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor colors[16]; \/* Store the 8 ANSI and the 8 ANSI high-brights only *\/$/;"	m	struct:VTermState	access:public
colors_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *colors_cmt;		\/* Comment of the colors section *\/$/;"	m	struct:__anon92	access:public
colors_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *colors_cmt;                   \/* Comment of the colors section *\/$/;"	m	struct:__anon93	access:public
colorsymbols	vim/vim/src/xpm/include/xpm.h	/^    XpmColorSymbol *colorsymbols;	\/* List of color symbols to override *\/$/;"	m	struct:__anon93	access:public
cols	vim/vim/src/libvterm/bin/unterm.c	/^static int cols;$/;"	v	file:
cols	vim/vim/src/libvterm/src/screen.c	/^  int cols;$/;"	m	struct:VTermScreen	file:	access:public
cols	vim/vim/src/libvterm/src/vterm_internal.h	/^  int cols;$/;"	m	struct:VTerm	access:public
cols	vim/vim/src/libvterm/src/vterm_internal.h	/^  int cols;$/;"	m	struct:VTermState	access:public
column	vim/vim/src/hardcopy.c	/^    colnr_T	column;		    \/* byte column *\/$/;"	m	struct:__anon212	file:	access:public
combine_chars	vim/vim/src/libvterm/src/vterm_internal.h	/^  uint32_t *combine_chars;$/;"	m	struct:VTermState	access:public
combine_chars_size	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t combine_chars_size; \/* Number of ELEMENTS in the above *\/$/;"	m	struct:VTermState	access:public
combine_pos	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermPos combine_pos;   \/* Position before movement *\/$/;"	m	struct:VTermState	access:public
combine_width	vim/vim/src/libvterm/src/vterm_internal.h	/^  int combine_width; \/* The width of the glyph above *\/$/;"	m	struct:VTermState	access:public
combining	vim/vim/src/libvterm/src/unicode.c	/^static const struct interval combining[] = {$/;"	v	typeref:struct:interval	file:
comcon2	vim/vim/src/hangulin.c	/^comcon2(int k, int c)$/;"	f	file:	signature:(int k, int c)
comcon3	vim/vim/src/hangulin.c	/^comcon3(int k, int c)$/;"	f	file:	signature:(int k, int c)
comfcon3	vim/vim/src/hangulin.c	/^comfcon3(int v, int c)$/;"	f	file:	signature:(int v, int c)
commProperty	vim/vim/runtime/tools/xcmdsrv_client.c	/^static Atom	commProperty = None;$/;"	v	file:
commProperty	vim/vim/src/globals.h	/^EXTERN Atom	commProperty INIT(= None);$/;"	v
commWindow	vim/vim/runtime/tools/xcmdsrv_client.c	/^static Window	commWindow = None;$/;"	v	file:
commWindow	vim/vim/src/globals.h	/^EXTERN Window	commWindow INIT(= None);$/;"	v
command	vim/vim/src/tag.c	/^    char_u	*command;	\/* first char of command *\/$/;"	m	struct:tag_pointers	file:	access:public
command_complete	vim/vim/src/ex_docmd.c	/^} command_complete[] =$/;"	v	typeref:struct:__anon18	file:
command_count	vim/vim/src/ex_cmdidxs.h	/^static const int command_count = 540;$/;"	v
command_end	vim/vim/src/tag.c	/^    char_u	*command_end;	\/* first char after command *\/$/;"	m	struct:tag_pointers	file:	access:public
command_height	vim/vim/src/window.c	/^command_height(void)$/;"	f	signature:(void)
command_line_scan	vim/vim/src/main.c	/^command_line_scan(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
command_line_scan	vim/vim/src/main.c	/^static void command_line_scan(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
command_line_setup_choices	vim/vim/src/dosinst.c	/^command_line_setup_choices(int argc, char **argv)$/;"	f	file:	signature:(int argc, char **argv)
commandcmd	vim/vim/src/if_tcl.c	/^commandcmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
commands	vim/vim/src/structs.h	/^    char_u	*commands[MAX_ARG_CMDS];     \/* commands from + or -c arg. *\/$/;"	m	struct:__anon210	access:public
common_channel_read	vim/vim/src/channel.c	/^common_channel_read(typval_T *argvars, typval_T *rettv, int raw)$/;"	f	signature:(typval_T *argvars, typval_T *rettv, int raw)
common_function	vim/vim/src/evalfunc.c	/^common_function(typval_T *argvars, typval_T *rettv, int is_funcref)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int is_funcref)
common_init	vim/vim/src/main.c	/^common_init(mparm_T *paramp)$/;"	f	signature:(mparm_T *paramp)
comp_botline	vim/vim/src/move.c	/^comp_botline(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
comp_botline	vim/vim/src/move.c	/^static void comp_botline(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
comp_char_differs	vim/vim/src/screen.c	/^comp_char_differs(int off_from, int off_to)$/;"	f	file:	signature:(int off_from, int off_to)
comp_char_differs	vim/vim/src/screen.c	/^static int comp_char_differs(int, int);$/;"	p	file:	signature:(int, int)
comp_col	vim/vim/src/option.c	/^comp_col(void)$/;"	f	signature:(void)
comp_textwidth	vim/vim/src/edit.c	/^comp_textwidth($/;"	f	signature:( int ff)
compare_func_name	vim/vim/src/eval.c	/^compare_func_name(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
compat_all_enhancements	vim/vim/src/dosinst.c	/^    compat_all_enhancements$/;"	e	enum:__anon133	file:
compat_choice	vim/vim/src/dosinst.c	/^int	compat_choice = (int)compat_all_enhancements;$/;"	v
compat_choices	vim/vim/src/dosinst.c	/^char	*(compat_choices[]) =$/;"	v
compat_hashtab	vim/vim/src/eval.c	/^static hashtab_T	compat_hashtab;$/;"	v	file:
compat_some_enhancements	vim/vim/src/dosinst.c	/^    compat_some_enhancements,$/;"	e	enum:__anon133	file:
compat_text	vim/vim/src/dosinst.c	/^char	*compat_text = "- run Vim %s";$/;"	v
compat_vi	vim/vim/src/dosinst.c	/^    compat_vi = 1,$/;"	e	enum:__anon133	file:
compatible_set	vim/vim/src/option.c	/^compatible_set(void)$/;"	f	file:	signature:(void)
compatible_set	vim/vim/src/option.c	/^static void compatible_set(void);$/;"	p	file:	signature:(void)
compile_cap_prog	vim/vim/src/option.c	/^compile_cap_prog(synblock_T *synblock)$/;"	f	file:	signature:(synblock_T *synblock)
compile_cap_prog	vim/vim/src/option.c	/^static char_u *compile_cap_prog(synblock_T *synblock);$/;"	p	file:	signature:(synblock_T *synblock)
compiled_sys	vim/vim/src/Make_bc5.mak	/^char_u *compiled_sys = (char_u *)"$(USERDOMAIN)";$/;"	m
compiled_sys	vim/vim/src/Makefile	/^	-@echo 'char_u *compiled_sys = (char_u *)"' | tr -d $(NL) >> $@$/;"	m
compiled_sys	vim/vim/src/auto/pathdef.c	/^char_u *compiled_sys = (char_u *)"E6220";$/;"	v
compiled_user	vim/vim/src/Make_bc5.mak	/^char_u *compiled_user = (char_u *)"$(USERNAME)";$/;"	m
compiled_user	vim/vim/src/Makefile	/^	-@echo 'char_u *compiled_user = (char_u *)"' | tr -d $(NL) >> $@$/;"	m
compiled_user	vim/vim/src/auto/pathdef.c	/^char_u *compiled_user = (char_u *)"seafly";$/;"	v
compitem_S	vim/vim/src/spellfile.c	/^typedef struct compitem_S$/;"	s	file:
compitem_S::ci_flag	vim/vim/src/spellfile.c	/^    unsigned	ci_flag;	\/* affix name as number, uses "af_flagtype" *\/$/;"	m	struct:compitem_S	file:	access:public
compitem_S::ci_key	vim/vim/src/spellfile.c	/^    char_u	ci_key[AH_KEY_LEN]; \/* key for hashtab == name of compound *\/$/;"	m	struct:compitem_S	file:	access:public
compitem_S::ci_newID	vim/vim/src/spellfile.c	/^    int		ci_newID;	\/* affix ID after renumbering. *\/$/;"	m	struct:compitem_S	file:	access:public
compitem_T	vim/vim/src/spellfile.c	/^} compitem_T;$/;"	t	typeref:struct:compitem_S	file:
compl_S	vim/vim/src/edit.c	/^struct compl_S$/;"	s	file:
compl_S::cp_flags	vim/vim/src/edit.c	/^    int		cp_flags;	\/* ORIGINAL_TEXT, CONT_S_IPOS or FREE_FNAME *\/$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_fname	vim/vim/src/edit.c	/^    char_u	*cp_fname;	\/* file containing the match, allocated when$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_icase	vim/vim/src/edit.c	/^    char	cp_icase;	\/* TRUE or FALSE: ignore case *\/$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_next	vim/vim/src/edit.c	/^    compl_T	*cp_next;$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_number	vim/vim/src/edit.c	/^    int		cp_number;	\/* sequence number *\/$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_prev	vim/vim/src/edit.c	/^    compl_T	*cp_prev;$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_str	vim/vim/src/edit.c	/^    char_u	*cp_str;	\/* matched text *\/$/;"	m	struct:compl_S	file:	access:public
compl_S::cp_text	vim/vim/src/edit.c	/^    char_u	*(cp_text[CPT_COUNT]);	\/* text for the menu *\/$/;"	m	struct:compl_S	file:	access:public
compl_T	vim/vim/src/edit.c	/^typedef struct compl_S compl_T;$/;"	t	typeref:struct:compl_S	file:
compl_busy	vim/vim/src/edit.c	/^static int	  compl_busy = FALSE;$/;"	v	file:
compl_col	vim/vim/src/edit.c	/^static colnr_T	  compl_col = 0;	    \/* column where the text starts$/;"	v	file:
compl_cont_mode	vim/vim/src/edit.c	/^static int	  compl_cont_mode = 0;$/;"	v	file:
compl_cont_status	vim/vim/src/globals.h	/^EXTERN int	compl_cont_status INIT(= 0);$/;"	v
compl_curr_match	vim/vim/src/edit.c	/^static compl_T    *compl_curr_match = NULL;$/;"	v	file:
compl_direction	vim/vim/src/edit.c	/^static int	  compl_direction = FORWARD;$/;"	v	file:
compl_enter_selects	vim/vim/src/edit.c	/^static int	  compl_enter_selects = FALSE;$/;"	v	file:
compl_first_match	vim/vim/src/edit.c	/^static compl_T    *compl_first_match = NULL;$/;"	v	file:
compl_get_longest	vim/vim/src/edit.c	/^static int	  compl_get_longest = FALSE;	\/* put longest common string$/;"	v	file:
compl_interrupted	vim/vim/src/globals.h	/^EXTERN int	compl_interrupted INIT(= FALSE);$/;"	v
compl_leader	vim/vim/src/edit.c	/^static char_u	  *compl_leader = NULL;$/;"	v	file:
compl_length	vim/vim/src/globals.h	/^EXTERN int	compl_length INIT(= 0);$/;"	v
compl_match_array	vim/vim/src/edit.c	/^static pumitem_T *compl_match_array = NULL;$/;"	v	file:
compl_match_arraysize	vim/vim/src/edit.c	/^static int compl_match_arraysize;$/;"	v	file:
compl_matches	vim/vim/src/edit.c	/^static int	  compl_matches = 0;$/;"	v	file:
compl_no_insert	vim/vim/src/edit.c	/^static int	  compl_no_insert = FALSE;	\/* FALSE: select & insert$/;"	v	file:
compl_no_select	vim/vim/src/edit.c	/^static int	  compl_no_select = FALSE;	\/* FALSE: select & insert$/;"	v	file:
compl_old_match	vim/vim/src/edit.c	/^static compl_T    *compl_old_match = NULL;$/;"	v	file:
compl_opt_refresh_always	vim/vim/src/edit.c	/^static int	  compl_opt_refresh_always = FALSE;$/;"	v	file:
compl_orig_text	vim/vim/src/edit.c	/^static char_u	  *compl_orig_text = NULL;  \/* text as it was before$/;"	v	file:
compl_pattern	vim/vim/src/edit.c	/^static char_u	  *compl_pattern = NULL;$/;"	v	file:
compl_pending	vim/vim/src/edit.c	/^static int	  compl_pending = 0;	    \/* > 1 for postponed CTRL-N *\/$/;"	v	file:
compl_restarting	vim/vim/src/edit.c	/^static int	  compl_restarting = FALSE;	\/* don't insert match *\/$/;"	v	file:
compl_shown_match	vim/vim/src/edit.c	/^static compl_T    *compl_shown_match = NULL;$/;"	v	file:
compl_shows_dir	vim/vim/src/edit.c	/^static int	  compl_shows_dir = FORWARD;$/;"	v	file:
compl_started	vim/vim/src/edit.c	/^static int	  compl_started = FALSE;$/;"	v	file:
compl_startpos	vim/vim/src/edit.c	/^static pos_T	  compl_startpos;$/;"	v	file:
compl_used_match	vim/vim/src/edit.c	/^static int	  compl_used_match;	\/* Selected one of the matches.  When$/;"	v	file:
compl_was_interrupted	vim/vim/src/edit.c	/^static int	  compl_was_interrupted = FALSE;  \/* didn't finish finding$/;"	v	file:
compl_xp	vim/vim/src/edit.c	/^static expand_T	  compl_xp;$/;"	v	file:
complete_install	build_all.sh	/^function complete_install()$/;"	f
completeopt_was_set	vim/vim/src/edit.c	/^completeopt_was_set(void)$/;"	f	signature:(void)
composing_hangul	vim/vim/src/globals.h	/^EXTERN int		composing_hangul INIT(= 0);$/;"	v
composing_hangul_buffer	vim/vim/src/globals.h	/^EXTERN char_u		composing_hangul_buffer[5];$/;"	v
compositeWidgetClass	vim/vim/src/gui_gtk_vms.h	668;"	d
compound_text_atom	vim/vim/src/ui.c	/^static Atom	compound_text_atom;$/;"	v	file:
compress_added	vim/vim/src/spellfile.c	/^static long compress_added = 500000;	\/* word count *\/$/;"	v	file:
compress_inc	vim/vim/src/spellfile.c	/^static long compress_inc = 100;		\/* memory \/ SBLOCKSIZE *\/$/;"	v	file:
compress_start	vim/vim/src/spellfile.c	/^static long compress_start = 30000;	\/* memory \/ SBLOCKSIZE *\/$/;"	v	file:
computeIndex	vim/vim/src/workshop.c	/^computeIndex($/;"	f	file:	signature:( int wantedCol, char_u *line, int ts)
computeIndex	vim/vim/src/workshop.c	/^static int	 computeIndex(int, char_u *, int);$/;"	p	file:	signature:(int, char_u *, int)
compute_buffer_local_count	vim/vim/src/ex_docmd.c	/^compute_buffer_local_count(int addr_type, int lnum, int offset)$/;"	f	file:	signature:(int addr_type, int lnum, int offset)
compute_buffer_local_count	vim/vim/src/ex_docmd.c	/^static int compute_buffer_local_count(int addr_type, int lnum, int local);$/;"	p	file:	signature:(int addr_type, int lnum, int local)
compute_cmdrow	vim/vim/src/ex_getln.c	/^compute_cmdrow(void)$/;"	f	signature:(void)
compute_foldcolumn	vim/vim/src/screen.c	/^compute_foldcolumn(win_T *wp, int col)$/;"	f	file:	signature:(win_T *wp, int col)
compute_foldcolumn	vim/vim/src/screen.c	/^static int compute_foldcolumn(win_T *wp, int col);$/;"	p	file:	signature:(win_T *wp, int col)
comvow2	vim/vim/src/hangulin.c	/^comvow2(int v, int c)$/;"	f	file:	signature:(int v, int c)
comvow3	vim/vim/src/hangulin.c	/^comvow3(int v, int c)$/;"	f	file:	signature:(int v, int c)
concat_esc	vim/vim/src/gui.c	/^concat_esc(garray_T *gap, char_u *text, int what)$/;"	f	file:	signature:(garray_T *gap, char_u *text, int what)
concat_esc	vim/vim/src/gui.c	/^static void concat_esc(garray_T *gap, char_u *text, int what);$/;"	p	file:	signature:(garray_T *gap, char_u *text, int what)
concat_fnames	vim/vim/src/misc1.c	/^concat_fnames(char_u *fname1, char_u *fname2, int sep)$/;"	f	signature:(char_u *fname1, char_u *fname2, int sep)
concat_history	vim/vim/src/ex_getln.c	/^concat_history(int type)$/;"	f	file:	signature:(int type)
concat_str	vim/vim/src/misc1.c	/^concat_str(char_u *str1, char_u *str2)$/;"	f	signature:(char_u *str1, char_u *str2)
conceal_char	vim/vim/src/structs.h	/^    int		conceal_char; \/* cchar for Conceal highlighting *\/$/;"	m	struct:matchitem	access:public
conceal_check_cursur_line	vim/vim/src/screen.c	/^conceal_check_cursur_line(void)$/;"	f	signature:(void)
conceal_cursor_line	vim/vim/src/screen.c	/^conceal_cursor_line(win_T *wp)$/;"	f	signature:(win_T *wp)
condstack	vim/vim/src/structs.h	/^struct condstack$/;"	s
condstack::__anon172::csp_ex	vim/vim/src/structs.h	/^	void	*csp_ex[CSTACK_LEN];	\/* exception for pending throw *\/$/;"	m	union:condstack::__anon172	access:public
condstack::__anon172::csp_rv	vim/vim/src/structs.h	/^	void	*csp_rv[CSTACK_LEN];	\/* return typeval for pending return *\/$/;"	m	union:condstack::__anon172	access:public
condstack::cs_emsg_silent_list	vim/vim/src/structs.h	/^    eslist_T	*cs_emsg_silent_list;	\/* saved values of "emsg_silent" *\/$/;"	m	struct:condstack	access:public
condstack::cs_flags	vim/vim/src/structs.h	/^    short	cs_flags[CSTACK_LEN];	\/* CSF_ flags *\/$/;"	m	struct:condstack	access:public
condstack::cs_forinfo	vim/vim/src/structs.h	/^    void	*cs_forinfo[CSTACK_LEN]; \/* info used by ":for" *\/$/;"	m	struct:condstack	access:public
condstack::cs_idx	vim/vim/src/structs.h	/^    int		cs_idx;			\/* current entry, or -1 if none *\/$/;"	m	struct:condstack	access:public
condstack::cs_lflags	vim/vim/src/structs.h	/^    char	cs_lflags;		\/* loop flags: CSL_ flags *\/$/;"	m	struct:condstack	access:public
condstack::cs_line	vim/vim/src/structs.h	/^    int		cs_line[CSTACK_LEN];	\/* line nr of ":while"\/":for" line *\/$/;"	m	struct:condstack	access:public
condstack::cs_looplevel	vim/vim/src/structs.h	/^    int		cs_looplevel;		\/* nr of nested ":while"s and ":for"s *\/$/;"	m	struct:condstack	access:public
condstack::cs_pend	vim/vim/src/structs.h	/^    }		cs_pend;$/;"	m	struct:condstack	typeref:union:condstack::__anon172	access:public
condstack::cs_pending	vim/vim/src/structs.h	/^    char	cs_pending[CSTACK_LEN];	\/* CSTP_: what's pending in ":finally"*\/$/;"	m	struct:condstack	access:public
condstack::cs_trylevel	vim/vim/src/structs.h	/^    int		cs_trylevel;		\/* nr of nested ":try"s *\/$/;"	m	struct:condstack	access:public
config_and_install_vim	build_all.sh	/^function config_and_install_vim()$/;"	f
config_object	build_all.sh	/^function config_object()$/;"	f
config_vimrc	build_all.sh	/^function config_vimrc()$/;"	f
confirm	vim/vim/src/structs.h	/^    int		confirm;		\/* TRUE to invoke yes\/no dialog *\/$/;"	m	struct:__anon171	access:public
confirm	vim/vim/src/uninstal.c	/^confirm(void)$/;"	f	file:	signature:(void)
confirm_msg	vim/vim/src/message.c	/^static char_u	*confirm_msg = NULL;		\/* ":confirm" message *\/$/;"	v	file:
confirm_msg_tail	vim/vim/src/message.c	/^static char_u	*confirm_msg_tail;		\/* tail of confirm_msg *\/$/;"	v	file:
confirm_msg_used	vim/vim/src/message.c	/^static int	confirm_msg_used = FALSE;	\/* displaying confirm_msg *\/$/;"	v	file:
conflags	vim/vim/src/Make_mvc.mak	/^conflags = $(conflags) \/map \/mapinfo:lines$/;"	m
conflags	vim/vim/src/Make_mvc.mak	/^conflags = $(conflags) \/map$/;"	m
conflags	vim/vim/src/Make_mvc.mak	/^conflags = \/nologo \/subsystem:$(SUBSYSTEM)$/;"	m
cont_in_list	vim/vim/src/structs.h	/^    short	*cont_in_list;	\/* cont.in group IDs, if non-zero *\/$/;"	m	struct:sp_syn	access:public
cont_in_list	vim/vim/src/syntax.c	/^    short	*cont_in_list;	\/* group IDs for "containedin" argument *\/$/;"	m	struct:__anon137	file:	access:public
cont_list	vim/vim/src/syntax.c	/^    short	*cont_list;	\/* group IDs for "contains" argument *\/$/;"	m	struct:__anon137	file:	access:public
container	vim/vim/src/gui_gtk_f.h	/^    GtkContainer container;$/;"	m	struct:_GtkForm	access:public
contextMenu	vim/vim/src/gui_mac.c	/^static MenuRef contextMenu = NULL;$/;"	v	file:
context_sha256_T	vim/vim/src/structs.h	/^} context_sha256_T;$/;"	t	typeref:struct:__anon209
conthere	vim/vim/src/quickfix.c	/^    int		    conthere;	\/* %> used *\/$/;"	m	struct:efm_S	file:	access:public
control	vim/vim/src/libvterm/include/vterm.h	/^  int (*control)(unsigned char control, void *user);$/;"	m	struct:__anon59	access:public
conv	vim/vim/src/dehqx.py	/^conv = binhex.HexBin(input)$/;"	v
conv	vim/vim/src/ex_cmds2.c	/^    vimconv_T	conv;		\/* type of conversion *\/$/;"	m	struct:source_cookie	file:	access:public
conv_to_pstd	vim/vim/src/farsi.c	/^conv_to_pstd(void)$/;"	f	file:	signature:(void)
conv_to_pvim	vim/vim/src/farsi.c	/^conv_to_pvim(void)$/;"	f	file:	signature:(void)
convchar	vim/vim/src/quickfix.c	/^    char_u	convchar;$/;"	m	struct:fmtpattern	file:	access:public
convertStruct	vim/vim/src/mbyte.c	/^} convertStruct;$/;"	t	typeref:struct:__anon3	file:
convert_3_to_code	vim/vim/src/hangulin.c	47;"	d	file:
convert_3_to_ks	vim/vim/src/hangulin.c	/^convert_3_to_ks($/;"	f	file:	signature:( int fv, int mv, int lv, char_u *des)
convert_3_to_ks	vim/vim/src/hangulin.c	/^static int convert_3_to_ks(int fv, int mv, int lv, char_u *des);$/;"	p	file:	signature:(int fv, int mv, int lv, char_u *des)
convert_dl	vim/vim/src/if_py_both.h	/^convert_dl(PyObject *obj, typval_T *tv,$/;"	f	signature:(PyObject *obj, typval_T *tv, pytotvfunc py_to_tv, PyObject *lookup_dict)
convert_filter	vim/vim/src/gui_w32.c	/^convert_filter(char_u *s)$/;"	f	file:	signature:(char_u *s)
convert_filter	vim/vim/src/gui_w32.c	/^static char_u *convert_filter(char_u *s);$/;"	p	file:	signature:(char_u *s)
convert_filterW	vim/vim/src/gui_w32.c	/^convert_filterW(char_u *s)$/;"	f	file:	signature:(char_u *s)
convert_input	vim/vim/src/mbyte.c	/^convert_input(char_u *ptr, int len, int maxlen)$/;"	f	signature:(char_u *ptr, int len, int maxlen)
convert_input_safe	vim/vim/src/mbyte.c	/^convert_input_safe($/;"	f	signature:( char_u *ptr, int len, int maxlen, char_u **restp, int *restlenp)
convert_ks_to_3	vim/vim/src/hangulin.c	/^convert_ks_to_3($/;"	f	file:	signature:( const char_u *src, int *fp, int *mp, int *lp)
convert_ks_to_3	vim/vim/src/hangulin.c	/^static void convert_ks_to_3(const char_u *src, int *fp, int *mp, int *lp);$/;"	p	file:	signature:(const char_u *src, int *fp, int *mp, int *lp)
convert_localized_message	vim/vim/src/gui_gtk.c	/^convert_localized_message(char_u **buffer, const char *message)$/;"	f	file:	signature:(char_u **buffer, const char *message)
convert_setup	vim/vim/src/mbyte.c	/^convert_setup(vimconv_T *vcp, char_u *from, char_u *to)$/;"	f	signature:(vimconv_T *vcp, char_u *from, char_u *to)
convert_setup_ext	vim/vim/src/mbyte.c	/^convert_setup_ext($/;"	f	signature:( vimconv_T *vcp, char_u *from, int from_unicode_is_utf8, char_u *to, int to_unicode_is_utf8)
convwrite	vim/vim/src/testdir/test_makeencoding.py	/^            def convwrite(s):$/;"	f	function:set_output_encoding.get_text_writer	access:public
cookie	vim/vim/src/ex_cmds.h	/^    void	*cookie;	\/* argument for getline() *\/$/;"	m	struct:exarg	access:public
cookie	vim/vim/src/ex_docmd.c	/^    void	*cookie;$/;"	m	struct:loop_cookie	file:	access:public
copyFoldingState	vim/vim/src/fold.c	/^copyFoldingState(win_T *wp_from, win_T *wp_to)$/;"	f	signature:(win_T *wp_from, win_T *wp_to)
copy_char	vim/vim/src/message.c	/^copy_char($/;"	f	file:	signature:( char_u *from, char_u *to, int lowercase)
copy_char	vim/vim/src/message.c	/^static int copy_char(char_u *from, char_u *to, int lowercase);$/;"	p	file:	signature:(char_u *from, char_u *to, int lowercase)
copy_id_list	vim/vim/src/syntax.c	/^copy_id_list(short *list)$/;"	f	file:	signature:(short *list)
copy_id_list	vim/vim/src/syntax.c	/^static short *copy_id_list(short *list);$/;"	p	file:	signature:(short *list)
copy_indent	vim/vim/src/misc1.c	/^copy_indent(int size, char_u *src)$/;"	f	file:	signature:(int size, char_u *src)
copy_indent	vim/vim/src/misc1.c	/^static int copy_indent(int size, char_u	*src);$/;"	p	file:	signature:(int size, char_u *src)
copy_infostreams	vim/vim/src/os_win32.c	/^copy_infostreams(char_u *from, char_u *to)$/;"	f	file:	signature:(char_u *from, char_u *to)
copy_jumplist	vim/vim/src/mark.c	/^copy_jumplist(win_T *from, win_T *to)$/;"	f	signature:(win_T *from, win_T *to)
copy_loclist	vim/vim/src/quickfix.c	/^copy_loclist(win_T *from, win_T *to)$/;"	f	signature:(win_T *from, win_T *to)
copy_option_part	vim/vim/src/misc2.c	/^copy_option_part($/;"	f	signature:( char_u **option, char_u *buf, int maxlen, char *sep_chars)
copy_pim	vim/vim/src/regexp_nfa.c	/^copy_pim(nfa_pim_T *to, nfa_pim_T *from)$/;"	f	file:	signature:(nfa_pim_T *to, nfa_pim_T *from)
copy_pim	vim/vim/src/regexp_nfa.c	/^static void copy_pim(nfa_pim_T *to, nfa_pim_T *from);$/;"	p	file:	signature:(nfa_pim_T *to, nfa_pim_T *from)
copy_redo	vim/vim/src/getchar.c	/^copy_redo(int old_redo)$/;"	f	file:	signature:(int old_redo)
copy_redo	vim/vim/src/getchar.c	/^static void	copy_redo(int);$/;"	p	file:	signature:(int)
copy_sub	vim/vim/src/regexp_nfa.c	/^copy_sub(regsub_T *to, regsub_T *from)$/;"	f	file:	signature:(regsub_T *to, regsub_T *from)
copy_sub	vim/vim/src/regexp_nfa.c	/^static void copy_sub(regsub_T *to, regsub_T *from);$/;"	p	file:	signature:(regsub_T *to, regsub_T *from)
copy_sub_off	vim/vim/src/regexp_nfa.c	/^copy_sub_off(regsub_T *to, regsub_T *from)$/;"	f	file:	signature:(regsub_T *to, regsub_T *from)
copy_sub_off	vim/vim/src/regexp_nfa.c	/^static void copy_sub_off(regsub_T *to, regsub_T *from);$/;"	p	file:	signature:(regsub_T *to, regsub_T *from)
copy_substream	vim/vim/src/os_win32.c	/^copy_substream(HANDLE sh, void *context, WCHAR *to, WCHAR *substream, long len)$/;"	f	file:	signature:(HANDLE sh, void *context, WCHAR *to, WCHAR *substream, long len)
copy_text_attr	vim/vim/src/screen.c	/^copy_text_attr($/;"	f	file:	signature:( int off, char_u *buf, int len, int attr)
copy_text_attr	vim/vim/src/screen.c	/^static void copy_text_attr(int off, char_u *buf, int len, int attr);$/;"	p	file:	signature:(int off, char_u *buf, int len, int attr)
copy_tv	vim/vim/src/eval.c	/^copy_tv(typval_T *from, typval_T *to)$/;"	f	signature:(typval_T *from, typval_T *to)
copy_viminfo_marks	vim/vim/src/mark.c	/^copy_viminfo_marks($/;"	f	signature:( vir_T *virp, FILE *fp_out, garray_T *buflist, int eof, int flags)
copy_winopt	vim/vim/src/option.c	/^copy_winopt(winopt_T *from, winopt_T *to)$/;"	f	signature:(winopt_T *from, winopt_T *to)
copy_yank_reg	vim/vim/src/ops.c	/^copy_yank_reg(yankreg_T *reg)$/;"	f	file:	signature:(yankreg_T *reg)
copy_yank_reg	vim/vim/src/ops.c	/^static void	copy_yank_reg(yankreg_T *reg);$/;"	p	file:	signature:(yankreg_T *reg)
copy_ze_off	vim/vim/src/regexp_nfa.c	/^copy_ze_off(regsub_T *to, regsub_T *from)$/;"	f	file:	signature:(regsub_T *to, regsub_T *from)
copy_ze_off	vim/vim/src/regexp_nfa.c	/^static void copy_ze_off(regsub_T *to, regsub_T *from);$/;"	p	file:	signature:(regsub_T *to, regsub_T *from)
core	vim/vim/src/gui_at_sb.h	/^    CorePart		core;$/;"	m	struct:_ScrollbarRec	access:public
core	vim/vim/src/gui_xmebwp.h	/^    CorePart core;$/;"	m	struct:_XmEnhancedButtonRec	access:public
core_class	vim/vim/src/gui_at_sb.h	/^    CoreClassPart		core_class;$/;"	m	struct:_ScrollbarClassRec	access:public
core_class	vim/vim/src/gui_xmebwp.h	/^    CoreClassPart core_class;$/;"	m	struct:__anon4	access:public
corr_ind_maxparen	vim/vim/src/misc1.c	/^corr_ind_maxparen(pos_T *startpos)$/;"	f	file:	signature:(pos_T *startpos)
corr_ind_maxparen	vim/vim/src/misc1.c	/^static int	corr_ind_maxparen(pos_T *startpos);$/;"	p	file:	signature:(pos_T *startpos)
correct_cmdspos	vim/vim/src/ex_getln.c	/^correct_cmdspos(int idx, int cells)$/;"	f	file:	signature:(int idx, int cells)
correct_cmdspos	vim/vim/src/ex_getln.c	/^static void	correct_cmdspos(int idx, int cells);$/;"	p	file:	signature:(int idx, int cells)
correct_range	vim/vim/src/ex_docmd.c	/^correct_range(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
correct_range	vim/vim/src/ex_docmd.c	/^static void	correct_range(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
corruption_error	vim/vim/src/undo.c	/^corruption_error(char *mesg, char_u *file_name)$/;"	f	file:	signature:(char *mesg, char_u *file_name)
corruption_error	vim/vim/src/undo.c	/^static void corruption_error(char *mesg, char_u *file_name);$/;"	p	file:	signature:(char *mesg, char_u *file_name)
count	vim/vim/src/gui_at_sb.c	/^    int count;$/;"	m	struct:EventData	file:	access:public
count	vim/vim/src/regexp.c	/^    long	count;$/;"	m	struct:regstar_S	file:	access:public
count	vim/vim/src/regexp_nfa.c	/^    int		count;$/;"	m	struct:__anon120	file:	access:public
count	vim/vim/src/structs.h	/^    long	count;		\/* nr of times used *\/$/;"	m	struct:__anon198	access:public
count	vim/vim/src/syntax.c	/^    int		count;$/;"	m	struct:__anon139	file:	access:public
count0	vim/vim/src/structs.h	/^    long	count0;		\/* count before command, default 0 *\/$/;"	m	struct:cmdarg_S	access:public
count1	vim/vim/src/structs.h	/^    long	count1;		\/* count before command, default 1 *\/$/;"	m	struct:cmdarg_S	access:public
count_and_decode_uri_list	vim/vim/src/gui_gtk_x11.c	/^count_and_decode_uri_list(char_u *out, char_u *raw, int len)$/;"	f	file:	signature:(char_u *out, char_u *raw, int len)
count_changed_buffers	vim/vim/src/netbeans.c	/^count_changed_buffers(void)$/;"	f	file:	signature:(void)
count_cluster_cells	vim/vim/src/gui_gtk_x11.c	/^count_cluster_cells(char_u *s, PangoItem *item,$/;"	f	file:	signature:(char_u *s, PangoItem *item, PangoGlyphString* glyphs, int i, int *cluster_width, int *last_glyph_rbearing)
count_common_word	vim/vim/src/spell.c	/^count_common_word($/;"	f	signature:( slang_T *lp, char_u *word, int len, int count)
count_syllables	vim/vim/src/spell.c	/^count_syllables(slang_T *slang, char_u *word)$/;"	f	file:	signature:(slang_T *slang, char_u *word)
count_syllables	vim/vim/src/spell.c	/^static int count_syllables(slang_T *slang, char_u *word);$/;"	p	file:	signature:(slang_T *slang, char_u *word)
cp_flags	vim/vim/src/edit.c	/^    int		cp_flags;	\/* ORIGINAL_TEXT, CONT_S_IPOS or FREE_FNAME *\/$/;"	m	struct:compl_S	file:	access:public
cp_fname	vim/vim/src/edit.c	/^    char_u	*cp_fname;	\/* file containing the match, allocated when$/;"	m	struct:compl_S	file:	access:public
cp_icase	vim/vim/src/edit.c	/^    char	cp_icase;	\/* TRUE or FALSE: ignore case *\/$/;"	m	struct:compl_S	file:	access:public
cp_next	vim/vim/src/edit.c	/^    compl_T	*cp_next;$/;"	m	struct:compl_S	file:	access:public
cp_number	vim/vim/src/edit.c	/^    int		cp_number;	\/* sequence number *\/$/;"	m	struct:compl_S	file:	access:public
cp_prev	vim/vim/src/edit.c	/^    compl_T	*cp_prev;$/;"	m	struct:compl_S	file:	access:public
cp_str	vim/vim/src/edit.c	/^    char_u	*cp_str;	\/* matched text *\/$/;"	m	struct:compl_S	file:	access:public
cp_text	vim/vim/src/edit.c	/^    char_u	*(cp_text[CPT_COUNT]);	\/* text for the menu *\/$/;"	m	struct:compl_S	file:	access:public
cpp	vim/vim/src/xpm/include/xpm.h	/^    unsigned int cpp;			\/* Specifies the number of char per$/;"	m	struct:__anon93	access:public
cpp	vim/vim/src/xpm/include/xpm.h	/^    unsigned int cpp;		\/* number of characters per pixel *\/$/;"	m	struct:__anon91	access:public
cpp_baseclass_cache_T	vim/vim/src/misc1.c	/^} cpp_baseclass_cache_T;$/;"	t	typeref:struct:__anon148	file:
cq_callback	vim/vim/src/structs.h	/^    char_u	*cq_callback;$/;"	m	struct:cbq_S	access:public
cq_next	vim/vim/src/structs.h	/^    cbq_T	*cq_next;$/;"	m	struct:cbq_S	access:public
cq_partial	vim/vim/src/structs.h	/^    partial_T	*cq_partial;$/;"	m	struct:cbq_S	access:public
cq_prev	vim/vim/src/structs.h	/^    cbq_T	*cq_prev;$/;"	m	struct:cbq_S	access:public
cq_seq_nr	vim/vim/src/structs.h	/^    int		cq_seq_nr;$/;"	m	struct:cbq_S	access:public
crc_32_table	vim/vim/src/crypt_zip.c	/^static u32_T crc_32_table[256];$/;"	v	file:
createBalloonEvalWindow	vim/vim/src/gui_beval.c	/^createBalloonEvalWindow(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
createBalloonEvalWindow	vim/vim/src/gui_beval.c	/^static void createBalloonEvalWindow(BalloonEval *);$/;"	p	file:	signature:(BalloonEval *)
createXpmImages	vim/vim/src/gui_athena.c	/^createXpmImages(char_u *path, char **xpm, Pixmap *sen)$/;"	f	file:	signature:(char_u *path, char **xpm, Pixmap *sen)
createXpmImages	vim/vim/src/gui_athena.c	/^static void createXpmImages(char_u *path, char **xpm, Pixmap *sen);$/;"	p	file:	signature:(char_u *path, char **xpm, Pixmap *sen)
create_blank_pointer	vim/vim/src/gui_gtk_x11.c	/^create_blank_pointer(void)$/;"	f	file:	signature:(void)
create_conin	vim/vim/src/os_win32.c	/^create_conin(void)$/;"	f	file:	signature:(void)
create_conin	vim/vim/src/os_win32.c	/^static void create_conin(void);$/;"	p	file:	signature:(void)
create_image_button	vim/vim/src/gui_gtk.c	/^create_image_button(const char *stock_id UNUSED,$/;"	f	file:	signature:(const char *stock_id UNUSED, const char *label)
create_menu_icon	vim/vim/src/gui_gtk.c	/^create_menu_icon(vimmenu_T *menu, GtkIconSize icon_size)$/;"	f	file:	signature:(vimmenu_T *menu, GtkIconSize icon_size)
create_message_dialog	vim/vim/src/gui_gtk.c	/^create_message_dialog(int type, char_u *title, char_u *message)$/;"	f	file:	signature:(int type, char_u *title, char_u *message)
create_pixmap_label	vim/vim/src/gui_motif.c	/^create_pixmap_label($/;"	f	file:	signature:( Widget parent, String name, char **data, ArgList args, Cardinal arg)
create_pixmap_label	vim/vim/src/gui_motif.c	/^static Widget create_pixmap_label(Widget parent, String name, char **data, ArgList args, Cardinal arg);$/;"	p	file:	signature:(Widget parent, String name, char **data, ArgList args, Cardinal arg)
create_shortcut	vim/vim/src/dosinst.c	/^create_shortcut($/;"	f	signature:( const char *shortcut_name, const char *iconfile_path, int iconindex, const char *shortcut_target, const char *shortcut_args, const char *workingdir )
create_tabline_menu	vim/vim/src/gui_gtk_x11.c	/^create_tabline_menu(void)$/;"	f	file:	signature:(void)
create_timer	vim/vim/src/ex_cmds2.c	/^create_timer(long msec, int repeat)$/;"	f	signature:(long msec, int repeat)
create_vterm	vim/vim/src/terminal.c	/^create_vterm(term_T *term, int rows, int cols)$/;"	f	file:	signature:(term_T *term, int rows, int cols)
create_windows	vim/vim/src/main.c	/^create_windows(mparm_T *parmp UNUSED)$/;"	f	file:	signature:(mparm_T *parmp UNUSED)
create_windows	vim/vim/src/main.c	/^static void create_windows(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
crnl_to_nl	vim/vim/src/winclip.c	/^crnl_to_nl(const char_u *str, int *size)$/;"	f	file:	signature:(const char_u *str, int *size)
crv_status	vim/vim/src/term.c	/^static int crv_status = CRV_GET;$/;"	v	file:
crypt_append_msg	vim/vim/src/crypt.c	/^crypt_append_msg($/;"	f	signature:( buf_T *buf)
crypt_blowfish_decode	vim/vim/src/blowfish.c	/^crypt_blowfish_decode($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u *to)
crypt_blowfish_encode	vim/vim/src/blowfish.c	/^crypt_blowfish_encode($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u *to)
crypt_blowfish_init	vim/vim/src/blowfish.c	/^crypt_blowfish_init($/;"	f	signature:( cryptstate_T *state, char_u* key, char_u* salt, int salt_len, char_u* seed, int seed_len)
crypt_check_current_method	vim/vim/src/crypt.c	/^crypt_check_current_method(void)$/;"	f	signature:(void)
crypt_check_method	vim/vim/src/crypt.c	/^crypt_check_method(int method)$/;"	f	signature:(int method)
crypt_create	vim/vim/src/crypt.c	/^crypt_create($/;"	f	signature:( int method_nr, char_u *key, char_u *salt, int salt_len, char_u *seed, int seed_len)
crypt_create_for_writing	vim/vim/src/crypt.c	/^crypt_create_for_writing($/;"	f	signature:( int method_nr, char_u *key, char_u **header, int *header_len)
crypt_create_from_file	vim/vim/src/crypt.c	/^crypt_create_from_file(FILE *fp, char_u *key)$/;"	f	signature:(FILE *fp, char_u *key)
crypt_create_from_header	vim/vim/src/crypt.c	/^crypt_create_from_header($/;"	f	signature:( int method_nr, char_u *key, char_u *header)
crypt_decode	vim/vim/src/crypt.c	/^crypt_decode($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u *to)
crypt_decode_alloc	vim/vim/src/crypt.c	/^crypt_decode_alloc($/;"	f	signature:( cryptstate_T *state, char_u *ptr, long len, char_u **newptr)
crypt_decode_inplace	vim/vim/src/crypt.c	/^crypt_decode_inplace($/;"	f	signature:( cryptstate_T *state, char_u *buf, size_t len)
crypt_encode	vim/vim/src/crypt.c	/^crypt_encode($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u *to)
crypt_encode_alloc	vim/vim/src/crypt.c	/^crypt_encode_alloc($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u **newptr)
crypt_encode_inplace	vim/vim/src/crypt.c	/^crypt_encode_inplace($/;"	f	signature:( cryptstate_T *state, char_u *buf, size_t len)
crypt_free_key	vim/vim/src/crypt.c	/^crypt_free_key(char_u *key)$/;"	f	signature:(char_u *key)
crypt_free_state	vim/vim/src/crypt.c	/^crypt_free_state(cryptstate_T *state)$/;"	f	signature:(cryptstate_T *state)
crypt_get_header_len	vim/vim/src/crypt.c	/^crypt_get_header_len(int method_nr)$/;"	f	signature:(int method_nr)
crypt_get_key	vim/vim/src/crypt.c	/^crypt_get_key($/;"	f	signature:( int store, int twice)
crypt_get_method_nr	vim/vim/src/crypt.c	/^crypt_get_method_nr(buf_T *buf)$/;"	f	signature:(buf_T *buf)
crypt_magic_head	vim/vim/src/crypt.c	/^static char	crypt_magic_head[] = "VimCrypt~";$/;"	v	file:
crypt_method_nr_from_magic	vim/vim/src/crypt.c	/^crypt_method_nr_from_magic(char *ptr, int len)$/;"	f	signature:(char *ptr, int len)
crypt_method_nr_from_name	vim/vim/src/crypt.c	/^crypt_method_nr_from_name(char_u *name)$/;"	f	signature:(char_u *name)
crypt_self_test	vim/vim/src/crypt.c	/^crypt_self_test(void)$/;"	f	signature:(void)
crypt_set_cm_option	vim/vim/src/crypt.c	/^crypt_set_cm_option(buf_T *buf, int method_nr)$/;"	f	signature:(buf_T *buf, int method_nr)
crypt_whole_undofile	vim/vim/src/crypt.c	/^crypt_whole_undofile(int method_nr)$/;"	f	signature:(int method_nr)
crypt_works_inplace	vim/vim/src/crypt.c	/^crypt_works_inplace(cryptstate_T *state)$/;"	f	signature:(cryptstate_T *state)
crypt_zip_decode	vim/vim/src/crypt_zip.c	/^crypt_zip_decode($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u *to)
crypt_zip_encode	vim/vim/src/crypt_zip.c	/^crypt_zip_encode($/;"	f	signature:( cryptstate_T *state, char_u *from, size_t len, char_u *to)
crypt_zip_init	vim/vim/src/crypt_zip.c	/^crypt_zip_init($/;"	f	signature:( cryptstate_T *state, char_u *key, char_u *salt UNUSED, int salt_len UNUSED, char_u *seed UNUSED, int seed_len UNUSED)
cryptmethod_T	vim/vim/src/crypt.c	/^} cryptmethod_T;$/;"	t	typeref:struct:__anon214	file:
cryptmethods	vim/vim/src/crypt.c	/^static cryptmethod_T cryptmethods[CRYPT_M_COUNT] = {$/;"	v	file:
cryptstate_T	vim/vim/src/structs.h	/^} cryptstate_T;$/;"	t	typeref:struct:__anon199
cryptxt	vim/vim/src/blowfish.c	/^    char_u   cryptxt[9];$/;"	m	struct:__anon73	file:	access:public
cs_add	vim/vim/src/if_cscope.c	/^cs_add(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
cs_add	vim/vim/src/if_cscope.c	/^static int	    cs_add(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_add_common	vim/vim/src/if_cscope.c	/^cs_add_common($/;"	f	file:	signature:( char *arg1, char *arg2, char *flags)
cs_add_common	vim/vim/src/if_cscope.c	/^static int	    cs_add_common(char *, char *, char *);$/;"	p	file:	signature:(char *, char *, char *)
cs_check_for_connections	vim/vim/src/if_cscope.c	/^cs_check_for_connections(void)$/;"	f	file:	signature:(void)
cs_check_for_connections	vim/vim/src/if_cscope.c	/^static int	    cs_check_for_connections(void);$/;"	p	file:	signature:(void)
cs_check_for_tags	vim/vim/src/if_cscope.c	/^cs_check_for_tags(void)$/;"	f	file:	signature:(void)
cs_check_for_tags	vim/vim/src/if_cscope.c	/^static int	    cs_check_for_tags(void);$/;"	p	file:	signature:(void)
cs_cmds	vim/vim/src/if_cscope.c	/^static cscmd_T	    cs_cmds[] =$/;"	v	file:
cs_cnt_connections	vim/vim/src/if_cscope.c	/^cs_cnt_connections(void)$/;"	f	file:	signature:(void)
cs_cnt_connections	vim/vim/src/if_cscope.c	/^static int	    cs_cnt_connections(void);$/;"	p	file:	signature:(void)
cs_cnt_matches	vim/vim/src/if_cscope.c	/^cs_cnt_matches(int idx)$/;"	f	file:	signature:(int idx)
cs_cnt_matches	vim/vim/src/if_cscope.c	/^static int	    cs_cnt_matches(int idx);$/;"	p	file:	signature:(int idx)
cs_connection	vim/vim/src/if_cscope.c	/^cs_connection(int num, char_u *dbpath, char_u *ppath)$/;"	f	signature:(int num, char_u *dbpath, char_u *ppath)
cs_create_cmd	vim/vim/src/if_cscope.c	/^cs_create_cmd(char *csoption, char *pattern)$/;"	f	file:	signature:(char *csoption, char *pattern)
cs_create_cmd	vim/vim/src/if_cscope.c	/^static char *	    cs_create_cmd(char *csoption, char *pattern);$/;"	p	file:	signature:(char *csoption, char *pattern)
cs_create_connection	vim/vim/src/if_cscope.c	/^cs_create_connection(int i)$/;"	f	file:	signature:(int i)
cs_create_connection	vim/vim/src/if_cscope.c	/^static int	    cs_create_connection(int i);$/;"	p	file:	signature:(int i)
cs_emsg_silent_list	vim/vim/src/structs.h	/^    eslist_T	*cs_emsg_silent_list;	\/* saved values of "emsg_silent" *\/$/;"	m	struct:condstack	access:public
cs_end	vim/vim/src/if_cscope.c	/^cs_end(void)$/;"	f	signature:(void)
cs_exception	vim/vim/src/structs.h	780;"	d
cs_fgets	vim/vim/src/if_cscope.c	/^cs_fgets(char_u *buf, int size)$/;"	f	signature:(char_u *buf, int size)
cs_file_results	vim/vim/src/if_cscope.c	/^cs_file_results(FILE *f, int *nummatches_a)$/;"	f	file:	signature:(FILE *f, int *nummatches_a)
cs_file_results	vim/vim/src/if_cscope.c	/^static void	    cs_file_results(FILE *, int *);$/;"	p	file:	signature:(FILE *, int *)
cs_fill_results	vim/vim/src/if_cscope.c	/^cs_fill_results($/;"	f	file:	signature:( char *tagstr, int totmatches, int *nummatches_a, char ***matches_p, char ***cntxts_p, int *matched)
cs_fill_results	vim/vim/src/if_cscope.c	/^static void	    cs_fill_results(char *, int , int *, char ***,$/;"	p	file:	signature:(char *, int , int *, char ***, char ***, int *)
cs_find	vim/vim/src/if_cscope.c	/^cs_find(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
cs_find	vim/vim/src/if_cscope.c	/^static int	    cs_find(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_find_common	vim/vim/src/if_cscope.c	/^cs_find_common($/;"	f	file:	signature:( char *opt, char *pat, int forceit, int verbose, int use_ll UNUSED, char_u *cmdline UNUSED)
cs_find_common	vim/vim/src/if_cscope.c	/^static int	    cs_find_common(char *opt, char *pat, int, int, int, char_u *cmdline);$/;"	p	file:	signature:(char *opt, char *pat, int, int, int, char_u *cmdline)
cs_flags	vim/vim/src/structs.h	/^    short	cs_flags[CSTACK_LEN];	\/* CSF_ flags *\/$/;"	m	struct:condstack	access:public
cs_forinfo	vim/vim/src/structs.h	/^    void	*cs_forinfo[CSTACK_LEN]; \/* info used by ":for" *\/$/;"	m	struct:condstack	access:public
cs_free_tags	vim/vim/src/if_cscope.c	/^cs_free_tags(void)$/;"	f	signature:(void)
cs_help	vim/vim/src/if_cscope.c	/^cs_help(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
cs_help	vim/vim/src/if_cscope.c	/^static int	    cs_help(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_idx	vim/vim/src/structs.h	/^    int		cs_idx;			\/* current entry, or -1 if none *\/$/;"	m	struct:condstack	access:public
cs_insert_filelist	vim/vim/src/if_cscope.c	/^cs_insert_filelist($/;"	f	file:	signature:( char *fname, char *ppath, char *flags, stat_T *sb UNUSED)
cs_insert_filelist	vim/vim/src/if_cscope.c	/^static int	    cs_insert_filelist(char *, char *, char *,$/;"	p	file:	signature:(char *, char *, char *, stat_T *)
cs_kill	vim/vim/src/if_cscope.c	/^cs_kill(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
cs_kill	vim/vim/src/if_cscope.c	/^static int	    cs_kill(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_kill_execute	vim/vim/src/if_cscope.c	/^cs_kill_execute($/;"	f	file:	signature:( int i, char *cname)
cs_kill_execute	vim/vim/src/if_cscope.c	/^static void	    cs_kill_execute(int, char *);$/;"	p	file:	signature:(int, char *)
cs_lflags	vim/vim/src/structs.h	/^    char	cs_lflags;		\/* loop flags: CSL_ flags *\/$/;"	m	struct:condstack	access:public
cs_line	vim/vim/src/structs.h	/^    int		cs_line[CSTACK_LEN];	\/* line nr of ":while"\/":for" line *\/$/;"	m	struct:condstack	access:public
cs_lookup_cmd	vim/vim/src/if_cscope.c	/^cs_lookup_cmd(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
cs_lookup_cmd	vim/vim/src/if_cscope.c	/^static cscmd_T *    cs_lookup_cmd(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_looplevel	vim/vim/src/structs.h	/^    int		cs_looplevel;		\/* nr of nested ":while"s and ":for"s *\/$/;"	m	struct:condstack	access:public
cs_make_vim_style_matches	vim/vim/src/if_cscope.c	/^cs_make_vim_style_matches($/;"	f	file:	signature:( char *fname, char *slno, char *search, char *tagstr)
cs_make_vim_style_matches	vim/vim/src/if_cscope.c	/^static char *	    cs_make_vim_style_matches(char *, char *,$/;"	p	file:	signature:(char *, char *, char *, char *)
cs_manage_matches	vim/vim/src/if_cscope.c	/^cs_manage_matches($/;"	f	file:	signature:( char **matches, char **contexts, int totmatches, mcmd_e cmd)
cs_manage_matches	vim/vim/src/if_cscope.c	/^static char *	    cs_manage_matches(char **, char **, int, mcmd_e);$/;"	p	file:	signature:(char **, char **, int, mcmd_e)
cs_parse_results	vim/vim/src/if_cscope.c	/^cs_parse_results($/;"	f	file:	signature:( int cnumber, char *buf, int bufsize, char **context, char **linenumber, char **search)
cs_parse_results	vim/vim/src/if_cscope.c	/^static char *	    cs_parse_results(int cnumber, char *buf, int bufsize, char **context, char **linenumber, char **search);$/;"	p	file:	signature:(int cnumber, char *buf, int bufsize, char **context, char **linenumber, char **search)
cs_pathcomponents	vim/vim/src/if_cscope.c	/^cs_pathcomponents(char *path)$/;"	f	file:	signature:(char *path)
cs_pathcomponents	vim/vim/src/if_cscope.c	/^static char *	    cs_pathcomponents(char *path);$/;"	p	file:	signature:(char *path)
cs_pend	vim/vim/src/structs.h	/^    }		cs_pend;$/;"	m	struct:condstack	typeref:union:condstack::__anon172	access:public
cs_pending	vim/vim/src/structs.h	/^    char	cs_pending[CSTACK_LEN];	\/* CSTP_: what's pending in ":finally"*\/$/;"	m	struct:condstack	access:public
cs_print_tags	vim/vim/src/if_cscope.c	/^cs_print_tags(void)$/;"	f	signature:(void)
cs_print_tags_priv	vim/vim/src/if_cscope.c	/^cs_print_tags_priv(char **matches, char **cntxts, int num_matches)$/;"	f	file:	signature:(char **matches, char **cntxts, int num_matches)
cs_print_tags_priv	vim/vim/src/if_cscope.c	/^static void	    cs_print_tags_priv(char **, char **, int);$/;"	p	file:	signature:(char **, char **, int)
cs_read_prompt	vim/vim/src/if_cscope.c	/^cs_read_prompt(int i)$/;"	f	file:	signature:(int i)
cs_read_prompt	vim/vim/src/if_cscope.c	/^static int	    cs_read_prompt(int);$/;"	p	file:	signature:(int)
cs_reading_emsg	vim/vim/src/if_cscope.c	/^cs_reading_emsg($/;"	f	file:	signature:( int idx)
cs_reading_emsg	vim/vim/src/if_cscope.c	/^static void	    cs_reading_emsg(int idx);$/;"	p	file:	signature:(int idx)
cs_release_csp	vim/vim/src/if_cscope.c	/^cs_release_csp(int i, int freefnpp)$/;"	f	file:	signature:(int i, int freefnpp)
cs_release_csp	vim/vim/src/if_cscope.c	/^static void	    cs_release_csp(int, int freefnpp);$/;"	p	file:	signature:(int, int freefnpp)
cs_reset	vim/vim/src/if_cscope.c	/^cs_reset(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
cs_reset	vim/vim/src/if_cscope.c	/^static int	    cs_reset(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_resolve_file	vim/vim/src/if_cscope.c	/^cs_resolve_file(int i, char *name)$/;"	f	file:	signature:(int i, char *name)
cs_resolve_file	vim/vim/src/if_cscope.c	/^static char *	    cs_resolve_file(int, char *);$/;"	p	file:	signature:(int, char *)
cs_rettv	vim/vim/src/structs.h	779;"	d
cs_show	vim/vim/src/if_cscope.c	/^cs_show(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
cs_show	vim/vim/src/if_cscope.c	/^static int	    cs_show(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
cs_stat_emsg	vim/vim/src/if_cscope.c	/^cs_stat_emsg(char *fname)$/;"	f	file:	signature:(char *fname)
cs_stat_emsg	vim/vim/src/if_cscope.c	/^static void	    cs_stat_emsg(char *fname);$/;"	p	file:	signature:(char *fname)
cs_trylevel	vim/vim/src/structs.h	/^    int		cs_trylevel;		\/* nr of nested ":try"s *\/$/;"	m	struct:condstack	access:public
cs_usage_msg	vim/vim/src/if_cscope.c	/^cs_usage_msg(csid_e x)$/;"	f	file:	signature:(csid_e x)
cs_usage_msg	vim/vim/src/if_cscope.c	/^static void	    cs_usage_msg(csid_e x);$/;"	p	file:	signature:(csid_e x)
cscmd_T	vim/vim/src/if_cscope.h	/^} cscmd_T;$/;"	t	typeref:struct:__anon68
csh_like_shell	vim/vim/src/misc2.c	/^csh_like_shell(void)$/;"	f	signature:(void)
csi	vim/vim/src/if_cscope.h	/^typedef struct csi {$/;"	s
csi	vim/vim/src/libvterm/include/vterm.h	/^  int (*csi)(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user);$/;"	m	struct:__anon59	access:public
csi::flags	vim/vim/src/if_cscope.h	/^    char *	    flags;	\/* additional cscope flags\/options (e.g, -p2) *\/$/;"	m	struct:csi	access:public
csi::fname	vim/vim/src/if_cscope.h	/^    char *	    fname;	\/* cscope db name *\/$/;"	m	struct:csi	access:public
csi::fr_fp	vim/vim/src/if_cscope.h	/^    FILE *	    fr_fp;	\/* from cscope: FILE. *\/$/;"	m	struct:csi	access:public
csi::hProc	vim/vim/src/if_cscope.h	/^    HANDLE	    hProc;	\/* cscope process handle *\/$/;"	m	struct:csi	access:public
csi::nIndexHigh	vim/vim/src/if_cscope.h	/^    DWORD	    nIndexHigh;	\/* st_ino has no meaning in the Windows *\/$/;"	m	struct:csi	access:public
csi::nIndexLow	vim/vim/src/if_cscope.h	/^    DWORD	    nIndexLow;$/;"	m	struct:csi	access:public
csi::nVolume	vim/vim/src/if_cscope.h	/^    DWORD	    nVolume;	\/* Volume serial number, instead of st_dev *\/$/;"	m	struct:csi	access:public
csi::pid	vim/vim/src/if_cscope.h	/^    DWORD	    pid;	\/* PID of the connected cscope process. *\/$/;"	m	struct:csi	access:public
csi::pid	vim/vim/src/if_cscope.h	/^    pid_t	    pid;	\/* PID of the connected cscope process. *\/$/;"	m	struct:csi	access:public
csi::ppath	vim/vim/src/if_cscope.h	/^    char *	    ppath;	\/* path to prepend (the -P option) *\/$/;"	m	struct:csi	access:public
csi::st_dev	vim/vim/src/if_cscope.h	/^    dev_t	    st_dev;	\/* ID of dev containing cscope db *\/$/;"	m	struct:csi	access:public
csi::st_ino	vim/vim/src/if_cscope.h	/^    ino_t	    st_ino;	\/* inode number of cscope db *\/$/;"	m	struct:csi	access:public
csi::to_fp	vim/vim/src/if_cscope.h	/^    FILE *	    to_fp;	\/* to cscope: FILE. *\/$/;"	m	struct:csi	access:public
csid_e	vim/vim/src/if_cscope.h	/^typedef enum { Add, Find, Help, Kill, Reset, Show } csid_e;$/;"	t	typeref:enum:__anon69
csinfo	vim/vim/src/if_cscope.c	/^static csinfo_T *   csinfo = NULL;$/;"	v	file:
csinfo_T	vim/vim/src/if_cscope.h	/^} csinfo_T;$/;"	t	typeref:struct:csi
csinfo_size	vim/vim/src/if_cscope.c	/^static int	    csinfo_size = 0;	\/* number of items allocated in$/;"	v	file:
csinum	vim/vim/src/libvterm/src/keyboard.c	/^  int csinum;$/;"	m	struct:__anon31	file:	access:public
csp_ex	vim/vim/src/structs.h	/^	void	*csp_ex[CSTACK_LEN];	\/* exception for pending throw *\/$/;"	m	union:condstack::__anon172	access:public
csp_rv	vim/vim/src/structs.h	/^	void	*csp_rv[CSTACK_LEN];	\/* return typeval for pending return *\/$/;"	m	union:condstack::__anon172	access:public
cstack	vim/vim/src/ex_cmds.h	/^    struct condstack *cstack;	\/* condition stack for ":if" etc. *\/$/;"	m	struct:exarg	typeref:struct:exarg::condstack	access:public
cstrchr	vim/vim/src/regexp.c	/^cstrchr(char_u *s, int c)$/;"	f	file:	signature:(char_u *s, int c)
cstrchr	vim/vim/src/regexp.c	/^static char_u *cstrchr(char_u *, int);$/;"	p	file:	signature:(char_u *, int)
cstrncmp	vim/vim/src/regexp.c	/^cstrncmp(char_u *s1, char_u *s2, int *n)$/;"	f	file:	signature:(char_u *s1, char_u *s2, int *n)
cstrncmp	vim/vim/src/regexp.c	/^static int cstrncmp(char_u *s1, char_u *s2, int *n);$/;"	p	file:	signature:(char_u *s1, char_u *s2, int *n)
cterm	vim/vim/src/structs.h	/^	} cterm;$/;"	m	union:attr_entry::__anon175	typeref:struct:attr_entry::__anon175::__anon177	access:public
cterm_attr_table	vim/vim/src/syntax.c	/^static garray_T	cterm_attr_table = {0, 0, 0, 0, NULL};$/;"	v	file:
cterm_color_16	vim/vim/src/hardcopy.c	/^static const long_u  cterm_color_16[16] =$/;"	v	file:
cterm_color_8	vim/vim/src/hardcopy.c	/^static const long_u  cterm_color_8[8] =$/;"	v	file:
cterm_normal_bg_color	vim/vim/src/globals.h	/^EXTERN int	cterm_normal_bg_color INIT(= 0);$/;"	v
cterm_normal_bg_gui_color	vim/vim/src/globals.h	/^EXTERN guicolor_T cterm_normal_bg_gui_color INIT(= INVALCOLOR);$/;"	v
cterm_normal_fg_bold	vim/vim/src/globals.h	/^EXTERN int	cterm_normal_fg_bold INIT(= 0);$/;"	v
cterm_normal_fg_color	vim/vim/src/globals.h	/^EXTERN int	cterm_normal_fg_color INIT(= 0);$/;"	v
cterm_normal_fg_gui_color	vim/vim/src/globals.h	/^EXTERN guicolor_T cterm_normal_fg_gui_color INIT(= INVALCOLOR);$/;"	v
ctrl8bit	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int ctrl8bit:1;$/;"	m	struct:VTerm::__anon38	access:public
ctrl_c_interrupts	vim/vim/src/globals.h	/^EXTERN int	ctrl_c_interrupts INIT(= TRUE);	\/* CTRL-C sets got_int *\/$/;"	v
ctrl_x_mode	vim/vim/src/globals.h	/^EXTERN int	ctrl_x_mode INIT(= 0);	\/* Which Ctrl-X mode are we in? *\/$/;"	v
ctrl_x_msgs	vim/vim/src/edit.c	/^static char *ctrl_x_msgs[] =$/;"	v	file:
cur	vim/vim/src/if_py_both.h	/^    void *cur;$/;"	m	struct:__anon99	access:public
cur	vim/vim/src/structs.h	/^    int		cur;			\/* internal position counter *\/$/;"	m	struct:posmatch	access:public
curMenuName	vim/vim/src/workshop.c	/^char		 curMenuName[BUFSIZ];$/;"	v
curMenuPriority	vim/vim/src/workshop.c	/^char		 curMenuPriority[BUFSIZ];$/;"	v
curPCtype	vim/vim/src/netbeans.c	/^static int curPCtype = -1;$/;"	v	file:
cur_beval	vim/vim/src/gui_w32.c	/^static BalloonEval  *cur_beval = NULL;$/;"	v	file:
cur_fnum	vim/vim/src/structs.h	/^    int		cur_fnum;	\/* buffer number used for cur_match *\/$/;"	m	struct:taggy	access:public
cur_match	vim/vim/src/structs.h	/^    int		cur_match;	\/* match number *\/$/;"	m	struct:taggy	access:public
cur_tmode	vim/vim/src/globals.h	/^EXTERN int	cur_tmode INIT(= TMODE_COOK);	\/* input terminal mode *\/$/;"	v
curbuf	vim/vim/src/globals.h	/^EXTERN buf_T	*curbuf INIT(= NULL);	\/* currently active buffer *\/$/;"	v
curbuf	vim/vim/src/if_tcl.c	/^    char *curbuf, *curwin;$/;"	m	struct:__anon140	file:	access:public
curbufIsChanged	vim/vim/src/undo.c	/^curbufIsChanged(void)$/;"	f	signature:(void)
curbuf_lock	vim/vim/src/globals.h	/^EXTERN int	curbuf_lock INIT(= 0);$/;"	v
curbuf_locked	vim/vim/src/ex_getln.c	/^curbuf_locked(void)$/;"	f	signature:(void)
curchr	vim/vim/src/regexp.c	/^     int	curchr;$/;"	m	struct:__anon124	file:	access:public
curchr	vim/vim/src/regexp.c	/^static int	curchr;		\/* currently parsed character *\/$/;"	v	file:
curerr	vim/vim/src/if_mzsch.c	/^static Scheme_Object *curerr = NULL;$/;"	v	file:
curout	vim/vim/src/if_mzsch.c	/^static Scheme_Object *curout = NULL;$/;"	v	file:
curpat	vim/vim/src/fileio.c	/^    AutoPat	*curpat;	\/* next AutoPat to examine *\/$/;"	m	struct:AutoPatCmd	file:	access:public
currBgColor	vim/vim/src/gui.h	/^    guicolor_T	currBgColor;	    \/* Current background text color *\/$/;"	m	struct:Gui	access:public
currFgColor	vim/vim/src/gui.h	/^    guicolor_T	currFgColor;	    \/* Current foreground text color *\/$/;"	m	struct:Gui	access:public
currFont	vim/vim/src/gui.h	/^    GuiFont	currFont;	    \/* Current font *\/$/;"	m	struct:Gui	access:public
currSpColor	vim/vim/src/gui.h	/^    guicolor_T	currSpColor;	    \/* Current special text color *\/$/;"	m	struct:Gui	access:public
curr_bg	vim/vim/src/hardcopy.c	/^static long_u	curr_bg;$/;"	v	file:
curr_bold	vim/vim/src/hardcopy.c	/^static int	curr_bold;$/;"	v	file:
curr_fg	vim/vim/src/hardcopy.c	/^static long_u	curr_fg;$/;"	v	file:
curr_italic	vim/vim/src/hardcopy.c	/^static int	curr_italic;$/;"	v	file:
curr_tmode	vim/vim/src/os_unix.c	/^static int curr_tmode = TMODE_COOK;	\/* contains current terminal mode *\/$/;"	v	file:
curr_underline	vim/vim/src/hardcopy.c	/^static int	curr_underline;$/;"	v	file:
current_SID	vim/vim/src/globals.h	/^EXTERN scid_T	current_SID INIT(= 0);$/;"	v
current_ScreenLine	vim/vim/src/screen.c	/^static schar_T	*current_ScreenLine;$/;"	v	file:
current_attr	vim/vim/src/syntax.c	/^static int current_attr = 0;	    \/* attr of current syntax word *\/$/;"	v	file:
current_augroup	vim/vim/src/fileio.c	/^static int current_augroup = AUGROUP_DEFAULT;$/;"	v	file:
current_beval	vim/vim/src/gui_beval.c	/^static BalloonEval *current_beval = NULL;$/;"	v	file:
current_block	vim/vim/src/search.c	/^current_block($/;"	f	signature:( oparg_T *oap, long count, int include, int what, int other)
current_col	vim/vim/src/syntax.c	/^static colnr_T	current_col = 0;	\/* column of current state *\/$/;"	v	file:
current_copyID	vim/vim/src/eval.c	/^static int current_copyID = 0;$/;"	v	file:
current_exception	vim/vim/src/ex_docmd.c	/^    except_T	*current_exception;$/;"	m	struct:dbg_stuff	file:	access:public
current_exception	vim/vim/src/globals.h	/^EXTERN except_T *current_exception;$/;"	v
current_finished	vim/vim/src/syntax.c	/^static int	current_finished = 0;	\/* current line has been finished *\/$/;"	v	file:
current_flags	vim/vim/src/syntax.c	/^static int current_flags = 0;$/;"	v	file:
current_font_height	vim/vim/src/os_mswin.c	/^int current_font_height = -12;		\/* also used in gui_w48.c *\/$/;"	v
current_fontset	vim/vim/src/gui_x11.c	/^static XFontSet current_fontset = NULL;$/;"	v	file:
current_func_returned	vim/vim/src/userfunc.c	/^current_func_returned(void)$/;"	f	signature:(void)
current_funccal	vim/vim/src/userfunc.c	/^funccall_T *current_funccal = NULL;$/;"	v
current_id	vim/vim/src/syntax.c	/^static int current_id = 0;	    \/* ID of current char for syn_get_id() *\/$/;"	v	file:
current_line	vim/vim/src/ex_docmd.c	/^    int		current_line;		\/* last read line from growarray *\/$/;"	m	struct:loop_cookie	file:	access:public
current_line_id	vim/vim/src/syntax.c	/^static int	current_line_id = 0;	\/* unique number for current line *\/$/;"	v	file:
current_line_number	vim/vim/src/if_ruby.c	/^static VALUE current_line_number(void)$/;"	f	file:	signature:(void)
current_lnum	vim/vim/src/syntax.c	/^static linenr_T current_lnum = 0;	\/* lnum of current state *\/$/;"	v	file:
current_menu	vim/vim/src/globals.h	/^EXTERN vimmenu_T	*current_menu;$/;"	v
current_next_flags	vim/vim/src/syntax.c	/^static int	current_next_flags = 0; \/* flags for current_next_list *\/$/;"	v	file:
current_next_list	vim/vim/src/syntax.c	/^static short	*current_next_list = NULL; \/* when non-zero, nextgroup list *\/$/;"	v	file:
current_par	vim/vim/src/search.c	/^current_par($/;"	f	signature:( oparg_T *oap, long count, int include, int type)
current_quote	vim/vim/src/search.c	/^current_quote($/;"	f	signature:( oparg_T *oap, long count, int include, int quotechar)
current_scrollbar	vim/vim/src/globals.h	/^EXTERN int	current_scrollbar;$/;"	v
current_search	vim/vim/src/search.c	/^current_search($/;"	f	signature:( long count, int forward)
current_sent	vim/vim/src/search.c	/^current_sent(oparg_T *oap, long count, int include)$/;"	f	signature:(oparg_T *oap, long count, int include)
current_seqnr	vim/vim/src/syntax.c	/^static int current_seqnr = 0;$/;"	v	file:
current_state	vim/vim/src/syntax.c	/^static garray_T current_state		\/* current stack of state_items *\/$/;"	v	file:
current_state_stored	vim/vim/src/syntax.c	/^static int	current_state_stored = 0; \/* TRUE if stored current state$/;"	v	file:
current_sub_char	vim/vim/src/syntax.c	/^static int current_sub_char = 0;$/;"	v	file:
current_syn_id	vim/vim/src/hardcopy.c	/^static int		current_syn_id;$/;"	v	file:
current_syn_inc_tag	vim/vim/src/syntax.c	/^static int current_syn_inc_tag = 0;$/;"	v	file:
current_tab	vim/vim/src/globals.h	/^EXTERN int	    current_tab;$/;"	v
current_tab_nr	vim/vim/src/ex_docmd.c	/^current_tab_nr(tabpage_T *tab)$/;"	f	file:	signature:(tabpage_T *tab)
current_tab_nr	vim/vim/src/ex_docmd.c	/^static int current_tab_nr(tabpage_T *tab);$/;"	p	file:	signature:(tabpage_T *tab)
current_tabmenu	vim/vim/src/globals.h	/^EXTERN int	    current_tabmenu;$/;"	v
current_tagblock	vim/vim/src/search.c	/^current_tagblock($/;"	f	signature:( oparg_T *oap, long count_arg, int include)
current_trans_id	vim/vim/src/syntax.c	/^static int current_trans_id = 0;    \/* idem, transparency removed *\/$/;"	v	file:
current_win_nr	vim/vim/src/ex_docmd.c	/^current_win_nr(win_T *win)$/;"	f	file:	signature:(win_T *win)
current_win_nr	vim/vim/src/ex_docmd.c	/^static int current_win_nr(win_T *win);$/;"	p	file:	signature:(win_T *win)
current_word	vim/vim/src/search.c	/^current_word($/;"	f	signature:( oparg_T *oap, long count, int include, int bigword)
curs_columns	vim/vim/src/move.c	/^curs_columns($/;"	f	signature:( int may_scroll)
curs_rows	vim/vim/src/move.c	/^curs_rows(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
curs_rows	vim/vim/src/move.c	/^static void curs_rows(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
curscript	vim/vim/src/globals.h	/^EXTERN int	curscript INIT(= 0);	    \/* index in scriptin[] *\/$/;"	v
cursor	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor:1;$/;"	m	struct:VTermState::__anon35	access:public
cursorRgn	vim/vim/src/gui_mac.c	/^static RgnHandle cursorRgn;$/;"	v	file:
cursor_blink	vim/vim/src/libvterm/src/vterm_internal.h	/^      int cursor_blink:1;$/;"	m	struct:VTermState::__anon36::__anon37	access:public
cursor_blink	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor_blink:1;$/;"	m	struct:VTermState::__anon35	access:public
cursor_col	vim/vim/src/gui.h	/^    int		cursor_col;	    \/* Physical cursor column in GUI display *\/$/;"	m	struct:Gui	access:public
cursor_correct	vim/vim/src/move.c	/^cursor_correct(void)$/;"	f	signature:(void)
cursor_down	vim/vim/src/edit.c	/^cursor_down($/;"	f	signature:( long n, int upd_topline)
cursor_entry	vim/vim/src/structs.h	/^typedef struct cursor_entry$/;"	s
cursor_entry::blinkoff	vim/vim/src/structs.h	/^    long	blinkoff;	\/* blinking, off time *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::blinkon	vim/vim/src/structs.h	/^    long	blinkon;	\/* blinking, on time *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::blinkwait	vim/vim/src/structs.h	/^    long	blinkwait;	\/* blinking, wait time before blinking starts *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::id	vim/vim/src/structs.h	/^    int		id;		\/* highlight group ID *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::id_lm	vim/vim/src/structs.h	/^    int		id_lm;		\/* highlight group ID for :lmap mode *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::mshape	vim/vim/src/structs.h	/^    int		mshape;		\/* one of the MSHAPE defines *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::name	vim/vim/src/structs.h	/^    char	*name;		\/* mode name (fixed) *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::percentage	vim/vim/src/structs.h	/^    int		percentage;	\/* percentage of cell for bar *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::shape	vim/vim/src/structs.h	/^    int		shape;		\/* one of the SHAPE_ defines *\/$/;"	m	struct:cursor_entry	access:public
cursor_entry::used_for	vim/vim/src/structs.h	/^    char	used_for;	\/* SHAPE_MOUSE and\/or SHAPE_CURSOR *\/$/;"	m	struct:cursor_entry	access:public
cursor_is_off	vim/vim/src/term.c	/^static int cursor_is_off = FALSE;$/;"	v	file:
cursor_is_valid	vim/vim/src/gui.h	/^    char	cursor_is_valid;    \/* There is a cursor at cursor_row\/col *\/$/;"	m	struct:Gui	access:public
cursor_off	vim/vim/src/term.c	/^cursor_off(void)$/;"	f	signature:(void)
cursor_on	vim/vim/src/term.c	/^cursor_on(void)$/;"	f	signature:(void)
cursor_pos_info	vim/vim/src/ops.c	/^cursor_pos_info(dict_T *dict)$/;"	f	signature:(dict_T *dict)
cursor_row	vim/vim/src/gui.h	/^    int		cursor_row;	    \/* Physical cursor row in GUI display *\/$/;"	m	struct:Gui	access:public
cursor_shape	vim/vim/src/libvterm/src/vterm_internal.h	/^      unsigned int cursor_shape:2;$/;"	m	struct:VTermState::__anon36::__anon37	access:public
cursor_shape	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor_shape:2;$/;"	m	struct:VTermState::__anon35	access:public
cursor_start	vim/vim/src/structs.h	/^    pos_T	cursor_start;	\/* cursor position before motion for "gw" *\/$/;"	m	struct:oparg_S	access:public
cursor_up	vim/vim/src/edit.c	/^cursor_up($/;"	f	signature:( long n, int upd_topline)
cursor_valid	vim/vim/src/move.c	/^cursor_valid(void)$/;"	f	signature:(void)
cursor_visible	vim/vim/src/libvterm/src/vterm_internal.h	/^      int cursor_visible:1;$/;"	m	struct:VTermState::__anon36::__anon37	access:public
cursor_visible	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int cursor_visible:1;$/;"	m	struct:VTermState::__anon35	access:public
cursor_visible	vim/vim/src/os_win32.c	/^cursor_visible(BOOL fVisible)$/;"	f	file:	signature:(BOOL fVisible)
cursor_visible	vim/vim/src/os_win32.c	/^static void cursor_visible(BOOL fVisible);$/;"	p	file:	signature:(BOOL fVisible)
cursorcmd	vim/vim/src/ex_getln.c	/^cursorcmd(void)$/;"	f	file:	signature:(void)
cursorcmd	vim/vim/src/ex_getln.c	/^static void	cursorcmd(void);$/;"	p	file:	signature:(void)
cursorentry_T	vim/vim/src/structs.h	/^} cursorentry_T;$/;"	t	typeref:struct:cursor_entry
curtab	vim/vim/src/globals.h	/^EXTERN tabpage_T    *curtab;$/;"	v
curwin	vim/vim/src/globals.h	/^EXTERN win_T	*curwin;	\/* currently active window *\/$/;"	v
curwin	vim/vim/src/if_tcl.c	/^    char *curbuf, *curwin;$/;"	m	struct:__anon140	file:	access:public
curwin_col_off	vim/vim/src/move.c	/^curwin_col_off(void)$/;"	f	signature:(void)
curwin_col_off2	vim/vim/src/move.c	/^curwin_col_off2(void)$/;"	f	signature:(void)
curwin_init	vim/vim/src/window.c	/^curwin_init(void)$/;"	f	signature:(void)
cvs	vim/vim/src/Makefile	/^	cvs=`find $(DEST_MACRO) \\( -name CVS -o -name AAPDIR -o -name "*.info" \\) -print`; \\$/;"	m
cvs	vim/vim/src/Makefile	/^	cvs=`find $(DEST_TOOLS) \\( -name CVS -o -name AAPDIR \\) -print`; \\$/;"	m
d	vim/vim/src/dehqx.py	/^        d = conv.read_rsrc(128000)$/;"	v
d	vim/vim/src/dehqx.py	/^    d = conv.read(128000)$/;"	v
d	vim/vim/src/dehqx.py	/^d = conv.read_rsrc(128000)$/;"	v
d$	vim/vim/runtime/tutor/tutor.cs	/^  4. Napi¹  d$  ,aby jsi smazal znaky a¾ do konce øádku.$/;"	p
damage	vim/vim/src/libvterm/include/vterm.h	/^  int (*damage)(VTermRect rect, void *user);$/;"	m	struct:__anon63	access:public
damage_merge	vim/vim/src/libvterm/src/screen.c	/^  VTermDamageSize damage_merge;$/;"	m	struct:VTermScreen	file:	access:public
damaged	vim/vim/src/libvterm/src/screen.c	/^  VTermRect damaged;$/;"	m	struct:VTermScreen	file:	access:public
damagerect	vim/vim/src/libvterm/src/screen.c	/^static void damagerect(VTermScreen *screen, VTermRect rect)$/;"	f	file:	signature:(VTermScreen *screen, VTermRect rect)
damagescreen	vim/vim/src/libvterm/src/screen.c	/^static void damagescreen(VTermScreen *screen)$/;"	f	file:	signature:(VTermScreen *screen)
darken_rgb	vim/vim/src/hardcopy.c	/^darken_rgb(long_u rgb)$/;"	f	file:	signature:(long_u rgb)
darken_rgb	vim/vim/src/hardcopy.c	/^static long_u darken_rgb(long_u rgb);$/;"	p	file:	signature:(long_u rgb)
data	vim/vim/src/libvterm/src/vterm_internal.h	/^  char           data[4*sizeof(uint32_t)];$/;"	m	struct:__anon33	access:public
data	vim/vim/src/xpm/include/xpm.h	/^    unsigned int *data;		\/* image data *\/$/;"	m	struct:__anon91	access:public
dataBrowser	vim/vim/src/gui_mac.c	/^static ControlRef dataBrowser = NULL;$/;"	v	file:
data_block	vim/vim/src/memline.c	/^struct data_block$/;"	s	file:
data_block::db_free	vim/vim/src/memline.c	/^    unsigned	db_free;	\/* free space available *\/$/;"	m	struct:data_block	file:	access:public
data_block::db_id	vim/vim/src/memline.c	/^    short_u	db_id;		\/* ID for data block: DATA_ID *\/$/;"	m	struct:data_block	file:	access:public
data_block::db_index	vim/vim/src/memline.c	/^    unsigned	db_index[1];	\/* index for start of line (actually bigger)$/;"	m	struct:data_block	file:	access:public
data_block::db_line_count	vim/vim/src/memline.c	/^    linenr_T	db_line_count;	\/* number of lines in this block *\/$/;"	m	struct:data_block	file:	access:public
data_block::db_txt_end	vim/vim/src/memline.c	/^    unsigned	db_txt_end;	\/* byte just after data block *\/$/;"	m	struct:data_block	file:	access:public
data_block::db_txt_start	vim/vim/src/memline.c	/^    unsigned	db_txt_start;	\/* byte where text starts *\/$/;"	m	struct:data_block	file:	access:public
datarootdir	vim/vim/src/auto/config.mk	/^datarootdir	= ${prefix}\/share$/;"	m
dbFocusCallback	vim/vim/src/gui_mac.c	/^dbFocusCallback(EventHandlerCallRef handler, EventRef event, void *data)$/;"	f	file:	signature:(EventHandlerCallRef handler, EventRef event, void *data)
dbGetContextualMenuCallback	vim/vim/src/gui_mac.c	/^dbGetContextualMenuCallback(ControlRef browser,$/;"	f	file:	signature:(ControlRef browser, MenuRef *menu, UInt32 *helpType, CFStringRef *helpItemString, AEDesc *selection)
dbItemDataCallback	vim/vim/src/gui_mac.c	/^dbItemDataCallback(ControlRef browser,$/;"	f	file:	signature:(ControlRef browser, DataBrowserItemID itemID, DataBrowserPropertyID property , DataBrowserItemDataRef itemData, Boolean changeValue)
dbItemNotificationCallback	vim/vim/src/gui_mac.c	/^dbItemNotificationCallback(ControlRef browser,$/;"	f	file:	signature:(ControlRef browser, DataBrowserItemID item, DataBrowserItemNotification message)
dbSelectContextualMenuCallback	vim/vim/src/gui_mac.c	/^dbSelectContextualMenuCallback(ControlRef browser,$/;"	f	file:	signature:(ControlRef browser, MenuRef menu, UInt32 selectionType, SInt16 menuID, MenuItemIndex menuItem)
db_free	vim/vim/src/memline.c	/^    unsigned	db_free;	\/* free space available *\/$/;"	m	struct:data_block	file:	access:public
db_id	vim/vim/src/memline.c	/^    short_u	db_id;		\/* ID for data block: DATA_ID *\/$/;"	m	struct:data_block	file:	access:public
db_index	vim/vim/src/memline.c	/^    unsigned	db_index[1];	\/* index for start of line (actually bigger)$/;"	m	struct:data_block	file:	access:public
db_line_count	vim/vim/src/memline.c	/^    linenr_T	db_line_count;	\/* number of lines in this block *\/$/;"	m	struct:data_block	file:	access:public
db_txt_end	vim/vim/src/memline.c	/^    unsigned	db_txt_end;	\/* byte just after data block *\/$/;"	m	struct:data_block	file:	access:public
db_txt_start	vim/vim/src/memline.c	/^    unsigned	db_txt_start;	\/* byte where text starts *\/$/;"	m	struct:data_block	file:	access:public
dbcs_char2bytes	vim/vim/src/mbyte.c	/^dbcs_char2bytes(int c, char_u *buf)$/;"	f	file:	signature:(int c, char_u *buf)
dbcs_char2bytes	vim/vim/src/mbyte.c	/^static int dbcs_char2bytes(int c, char_u *buf);$/;"	p	file:	signature:(int c, char_u *buf)
dbcs_char2cells	vim/vim/src/mbyte.c	/^dbcs_char2cells(int c)$/;"	f	file:	signature:(int c)
dbcs_char2cells	vim/vim/src/mbyte.c	/^static int dbcs_char2cells(int c);$/;"	p	file:	signature:(int c)
dbcs_char2len	vim/vim/src/mbyte.c	/^dbcs_char2len($/;"	f	file:	signature:( int c)
dbcs_char2len	vim/vim/src/mbyte.c	/^static int dbcs_char2len(int c);$/;"	p	file:	signature:(int c)
dbcs_class	vim/vim/src/mbyte.c	/^dbcs_class(unsigned lead, unsigned trail)$/;"	f	signature:(unsigned lead, unsigned trail)
dbcs_head_off	vim/vim/src/mbyte.c	/^dbcs_head_off(char_u *base, char_u *p)$/;"	f	signature:(char_u *base, char_u *p)
dbcs_off2cells	vim/vim/src/mbyte.c	/^dbcs_off2cells(unsigned off, unsigned max_off)$/;"	f	signature:(unsigned off, unsigned max_off)
dbcs_ptr2cells	vim/vim/src/mbyte.c	/^dbcs_ptr2cells(char_u *p)$/;"	f	signature:(char_u *p)
dbcs_ptr2cells_len	vim/vim/src/mbyte.c	/^dbcs_ptr2cells_len(char_u *p, int size)$/;"	f	file:	signature:(char_u *p, int size)
dbcs_ptr2cells_len	vim/vim/src/mbyte.c	/^static int dbcs_ptr2cells_len(char_u *p, int size);$/;"	p	file:	signature:(char_u *p, int size)
dbcs_ptr2char	vim/vim/src/mbyte.c	/^dbcs_ptr2char(char_u *p)$/;"	f	file:	signature:(char_u *p)
dbcs_ptr2char	vim/vim/src/mbyte.c	/^static int dbcs_ptr2char(char_u *p);$/;"	p	file:	signature:(char_u *p)
dbcs_ptr2len	vim/vim/src/mbyte.c	/^dbcs_ptr2len($/;"	f	file:	signature:( char_u *p)
dbcs_ptr2len	vim/vim/src/mbyte.c	/^static int dbcs_ptr2len(char_u *p);$/;"	p	file:	signature:(char_u *p)
dbcs_ptr2len_len	vim/vim/src/mbyte.c	/^dbcs_ptr2len_len(char_u *p, int size)$/;"	f	file:	signature:(char_u *p, int size)
dbcs_ptr2len_len	vim/vim/src/mbyte.c	/^static int dbcs_ptr2len_len(char_u *p, int size);$/;"	p	file:	signature:(char_u *p, int size)
dbcs_screen_head_off	vim/vim/src/mbyte.c	/^dbcs_screen_head_off(char_u *base, char_u *p)$/;"	f	signature:(char_u *base, char_u *p)
dbcs_screen_tail_off	vim/vim/src/mbyte.c	/^dbcs_screen_tail_off(char_u *base, char_u *p)$/;"	f	signature:(char_u *base, char_u *p)
dbg_breakp	vim/vim/src/ex_cmds2.c	/^static garray_T dbg_breakp = {0, 0, sizeof(struct debuggy), 4, NULL};$/;"	v	file:
dbg_breakpoint	vim/vim/src/ex_cmds2.c	/^dbg_breakpoint(char_u *name, linenr_T lnum)$/;"	f	signature:(char_u *name, linenr_T lnum)
dbg_check_breakpoint	vim/vim/src/ex_cmds2.c	/^dbg_check_breakpoint(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
dbg_check_skipped	vim/vim/src/ex_cmds2.c	/^dbg_check_skipped(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
dbg_find_breakpoint	vim/vim/src/ex_cmds2.c	/^dbg_find_breakpoint($/;"	f	signature:( int file, char_u *fname, linenr_T after)
dbg_forceit	vim/vim/src/ex_cmds2.c	/^    int		dbg_forceit;	\/* ! used *\/$/;"	m	struct:debuggy	file:	access:public
dbg_lnum	vim/vim/src/ex_cmds2.c	/^    linenr_T	dbg_lnum;	\/* line number in function or file *\/$/;"	m	struct:debuggy	file:	access:public
dbg_name	vim/vim/src/ex_cmds2.c	/^    char_u	*dbg_name;	\/* function or file name *\/$/;"	m	struct:debuggy	file:	access:public
dbg_nr	vim/vim/src/ex_cmds2.c	/^    int		dbg_nr;		\/* breakpoint number *\/$/;"	m	struct:debuggy	file:	access:public
dbg_parsearg	vim/vim/src/ex_cmds2.c	/^dbg_parsearg($/;"	f	file:	signature:( char_u *arg, garray_T *gap)
dbg_parsearg	vim/vim/src/ex_cmds2.c	/^static int dbg_parsearg(char_u *arg, garray_T *gap);$/;"	p	file:	signature:(char_u *arg, garray_T *gap)
dbg_prog	vim/vim/src/ex_cmds2.c	/^    regprog_T	*dbg_prog;	\/* regexp program *\/$/;"	m	struct:debuggy	file:	access:public
dbg_stuff	vim/vim/src/ex_docmd.c	/^struct dbg_stuff$/;"	s	file:
dbg_stuff::caught_stack	vim/vim/src/ex_docmd.c	/^    except_T	*caught_stack;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::check_cstack	vim/vim/src/ex_docmd.c	/^    int		check_cstack;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::current_exception	vim/vim/src/ex_docmd.c	/^    except_T	*current_exception;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::did_emsg	vim/vim/src/ex_docmd.c	/^    int		did_emsg;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::did_throw	vim/vim/src/ex_docmd.c	/^    int		did_throw;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::force_abort	vim/vim/src/ex_docmd.c	/^    int		force_abort;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::got_int	vim/vim/src/ex_docmd.c	/^    int		got_int;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::need_rethrow	vim/vim/src/ex_docmd.c	/^    int		need_rethrow;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::trylevel	vim/vim/src/ex_docmd.c	/^    int		trylevel;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::vv_exception	vim/vim/src/ex_docmd.c	/^    char_u	*vv_exception;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_stuff::vv_throwpoint	vim/vim/src/ex_docmd.c	/^    char_u	*vv_throwpoint;$/;"	m	struct:dbg_stuff	file:	access:public
dbg_tick	vim/vim/src/ex_cmds2.c	/^    int		dbg_tick;	\/* debug_tick when breakpoint was set *\/$/;"	m	struct:source_cookie	file:	access:public
dbg_tick	vim/vim/src/structs.h	/^    int		dbg_tick;	\/* debug_tick when breakpoint was set *\/$/;"	m	struct:funccall_S	access:public
dbg_type	vim/vim/src/ex_cmds2.c	/^    int		dbg_type;	\/* DBG_FUNC or DBG_FILE *\/$/;"	m	struct:debuggy	file:	access:public
dcbarg_T	vim/vim/src/gui_motif.c	/^} dcbarg_T;$/;"	t	typeref:struct:dialog_callback_arg	file:
dcs	vim/vim/src/libvterm/include/vterm.h	/^  int (*dcs)(const char *command, size_t cmdlen, void *user);$/;"	m	struct:__anon59	access:public
ddir	vim/vim/src/testdir/pythonx/modulex.py	/^ddir = 'xx'$/;"	v
dead_key	vim/vim/src/gui_w32.c	/^static int	dead_key = 0;	\/* 0: no dead key, 1: dead key pressed *\/$/;"	v	file:
deadly	vim/vim/src/os_unix.c	/^    char    deadly;	\/* Catch as a deadly signal? *\/$/;"	m	struct:signalinfo	file:	access:public
deadly_signal	vim/vim/src/os_unix.c	/^static volatile int deadly_signal = 0;	    \/* The signal we caught *\/$/;"	v	file:
debug_backtrace_level	vim/vim/src/globals.h	/^EXTERN int	debug_backtrace_level INIT(= 0); \/* breakpoint backtrace level *\/$/;"	v
debug_break_level	vim/vim/src/globals.h	/^EXTERN int	debug_break_level INIT(= -1);	\/* break below this level *\/$/;"	v
debug_breakpoint_lnum	vim/vim/src/ex_cmds2.c	/^static linenr_T	debug_breakpoint_lnum;$/;"	v	file:
debug_breakpoint_name	vim/vim/src/ex_cmds2.c	/^static char_u	*debug_breakpoint_name = NULL;$/;"	v	file:
debug_did_msg	vim/vim/src/globals.h	/^EXTERN int	debug_did_msg INIT(= FALSE);	\/* did "debug mode" message *\/$/;"	v
debug_greedy	vim/vim/src/ex_cmds2.c	/^static int debug_greedy = FALSE;	\/* batch mode debugging: don't save$/;"	v	file:
debug_skipped	vim/vim/src/ex_cmds2.c	/^static int	debug_skipped;$/;"	v	file:
debug_skipped_name	vim/vim/src/ex_cmds2.c	/^static char_u	*debug_skipped_name;$/;"	v	file:
debug_tick	vim/vim/src/globals.h	/^EXTERN int	debug_tick INIT(= 0);		\/* breakpoint change count *\/$/;"	v
debug_vimtool	build_all.sh	/^function debug_vimtool()$/;"	f
debuggy	vim/vim/src/ex_cmds2.c	/^struct debuggy$/;"	s	file:
debuggy::dbg_forceit	vim/vim/src/ex_cmds2.c	/^    int		dbg_forceit;	\/* ! used *\/$/;"	m	struct:debuggy	file:	access:public
debuggy::dbg_lnum	vim/vim/src/ex_cmds2.c	/^    linenr_T	dbg_lnum;	\/* line number in function or file *\/$/;"	m	struct:debuggy	file:	access:public
debuggy::dbg_name	vim/vim/src/ex_cmds2.c	/^    char_u	*dbg_name;	\/* function or file name *\/$/;"	m	struct:debuggy	file:	access:public
debuggy::dbg_nr	vim/vim/src/ex_cmds2.c	/^    int		dbg_nr;		\/* breakpoint number *\/$/;"	m	struct:debuggy	file:	access:public
debuggy::dbg_prog	vim/vim/src/ex_cmds2.c	/^    regprog_T	*dbg_prog;	\/* regexp program *\/$/;"	m	struct:debuggy	file:	access:public
debuggy::dbg_type	vim/vim/src/ex_cmds2.c	/^    int		dbg_type;	\/* DBG_FUNC or DBG_FILE *\/$/;"	m	struct:debuggy	file:	access:public
debuggy_find	vim/vim/src/ex_cmds2.c	/^debuggy_find($/;"	f	file:	signature:( int file, char_u *fname, linenr_T after, garray_T *gap, int *fp)
debuggy_find	vim/vim/src/ex_cmds2.c	/^static linenr_T debuggy_find(int file,char_u *fname, linenr_T after, garray_T *gap, int *fp);$/;"	p	file:	signature:(int file,char_u *fname, linenr_T after, garray_T *gap, int *fp)
dec	vim/vim/src/misc2.c	/^dec(pos_T *lp)$/;"	f	signature:(pos_T *lp)
dec_cRefThisDLL	vim/vim/src/GvimExt/gvimext.cpp	/^dec_cRefThisDLL()$/;"	f	file:	signature:()
dec_cursor	vim/vim/src/misc2.c	/^dec_cursor(void)$/;"	f	signature:(void)
decl	vim/vim/src/misc2.c	/^decl(pos_T *lp)$/;"	f	signature:(pos_T *lp)
decode	vim/vim/src/libvterm/src/vterm_internal.h	/^  void (*decode)(VTermEncoding *enc, void *data,$/;"	m	struct:VTermEncoding	access:public
decode_buffer_fn	vim/vim/src/crypt.c	/^    long (*decode_buffer_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
decode_fn	vim/vim/src/crypt.c	/^    void (*decode_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
decode_inplace_fn	vim/vim/src/crypt.c	/^    void (*decode_inplace_fn)(cryptstate_T *state, char_u *p1, size_t len,$/;"	m	struct:__anon214	file:	access:public
decode_key_event	vim/vim/src/os_win32.c	/^decode_key_event($/;"	f	file:	signature:( KEY_EVENT_RECORD *pker, WCHAR *pch, WCHAR *pch2, int *pmodifiers, BOOL fDoPost)
decode_mouse_event	vim/vim/src/os_win32.c	/^decode_mouse_event($/;"	f	file:	signature:( MOUSE_EVENT_RECORD *pmer)
decode_table	vim/vim/src/libvterm/src/encoding.c	/^static void decode_table(VTermEncoding *enc, void *data UNUSED,$/;"	f	file:	signature:(VTermEncoding *enc, void *data UNUSED, uint32_t cp[], int *cpi, int cplen, const char bytes[], size_t *pos, size_t bytelen)
decode_usascii	vim/vim/src/libvterm/src/encoding.c	/^static void decode_usascii(VTermEncoding *enc UNUSED, void *data UNUSED,$/;"	f	file:	signature:(VTermEncoding *enc UNUSED, void *data UNUSED, uint32_t cp[], int *cpi, int cplen, const char bytes[], size_t *pos, size_t bytelen)
decode_utf8	vim/vim/src/libvterm/src/encoding.c	/^static void decode_utf8(VTermEncoding *enc UNUSED, void *data_,$/;"	f	file:	signature:(VTermEncoding *enc UNUSED, void *data_, uint32_t cp[], int *cpi, int cplen, const char bytes[], size_t *pos, size_t bytelen)
decomp_T	vim/vim/src/regexp.c	/^} decomp_T;$/;"	t	typeref:struct:__anon131	file:
decomp_table	vim/vim/src/regexp.c	/^static decomp_T decomp_table[0xfb4f-0xfb20+1] =$/;"	v	file:
def_back_pixel	vim/vim/src/gui.h	/^    guicolor_T	def_back_pixel;	    \/* default Color of background *\/$/;"	m	struct:Gui	access:public
def_norm_pixel	vim/vim/src/gui.h	/^    guicolor_T	def_norm_pixel;	    \/* default Color of normal text *\/$/;"	m	struct:Gui	access:public
def_val	vim/vim/src/option.c	/^    char_u	*def_val[2];	\/* default values for variable (vi and vim) *\/$/;"	m	struct:vimoption	file:	access:public
defaultTranslations	vim/vim/src/gui_at_sb.c	/^static char defaultTranslations[] =$/;"	v	file:
default_allocator	vim/vim/src/libvterm/src/vterm.c	/^static VTermAllocatorFunctions default_allocator = {$/;"	v	file:
default_bat_dir	vim/vim/src/dosinst.c	/^char	*default_bat_dir = NULL;  \/* when not NULL, use this as the default$/;"	v
default_bg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor default_bg;$/;"	m	struct:VTermState	access:public
default_fg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor default_fg;$/;"	m	struct:VTermState	access:public
default_fileformat	vim/vim/src/misc2.c	/^default_fileformat(void)$/;"	f	signature:(void)
default_free	vim/vim/src/libvterm/src/vterm.c	/^static void default_free(void *ptr, void *allocdata UNUSED)$/;"	f	file:	signature:(void *ptr, void *allocdata UNUSED)
default_malloc	vim/vim/src/libvterm/src/vterm.c	/^static void *default_malloc(size_t size, void *allocdata UNUSED)$/;"	f	file:	signature:(size_t size, void *allocdata UNUSED)
default_shape_engine	vim/vim/src/gui_gtk_x11.c	/^static PangoEngineShape *default_shape_engine = NULL;$/;"	v	file:
default_shell	vim/vim/src/os_win32.c	/^default_shell(void)$/;"	f	signature:(void)
default_vim_dir	vim/vim/src/Make_bc5.mak	/^char_u *default_vim_dir = (char_u *)"$(VIMRCLOC:\\=\\\\)";$/;"	m
default_vim_dir	vim/vim/src/Makefile	/^	-@echo 'char_u *default_vim_dir = (char_u *)"$(VIMRCLOC)";' | $(QUOTESED) >> $@$/;"	m
default_vim_dir	vim/vim/src/auto/pathdef.c	/^char_u *default_vim_dir = (char_u *)"\/usr\/share\/vim";$/;"	v
default_vim_dir	vim/vim/src/dosinst.c	/^char	*default_vim_dir = NULL;  \/* when not NULL, use this as the default$/;"	v
default_vimruntime_dir	vim/vim/src/Make_bc5.mak	/^char_u *default_vimruntime_dir = (char_u *)"$(VIMRUNTIMEDIR:\\=\\\\)";$/;"	m
default_vimruntime_dir	vim/vim/src/Makefile	/^	-@echo 'char_u *default_vimruntime_dir = (char_u *)"$(VIMRUNTIMEDIR)";' | $(QUOTESED) >> $@$/;"	m
default_vimruntime_dir	vim/vim/src/auto/pathdef.c	/^char_u *default_vimruntime_dir = (char_u *)"";$/;"	v
defcs	vim/vim/src/hardcopy.c	/^    char			*defcs;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
del_bytes	vim/vim/src/misc1.c	/^del_bytes($/;"	f	signature:( long count, int fixpos_arg, int use_delcombine UNUSED)
del_char	vim/vim/src/misc1.c	/^del_char(int fixpos)$/;"	f	signature:(int fixpos)
del_char_after_col	vim/vim/src/edit.c	/^del_char_after_col(int limit_col UNUSED)$/;"	f	file:	signature:(int limit_col UNUSED)
del_char_after_col	vim/vim/src/edit.c	/^static int del_char_after_col(int limit_col);$/;"	p	file:	signature:(int limit_col)
del_chars	vim/vim/src/misc1.c	/^del_chars(long count, int fixpos)$/;"	f	signature:(long count, int fixpos)
del_from_showcmd	vim/vim/src/normal.c	/^del_from_showcmd(int len)$/;"	f	file:	signature:(int len)
del_from_showcmd	vim/vim/src/normal.c	/^static void	del_from_showcmd(int);$/;"	p	file:	signature:(int)
del_history_entry	vim/vim/src/ex_getln.c	/^del_history_entry(int histype, char_u *str)$/;"	f	signature:(int histype, char_u *str)
del_history_idx	vim/vim/src/ex_getln.c	/^del_history_idx(int histype, int idx)$/;"	f	signature:(int histype, int idx)
del_lines	vim/vim/src/misc1.c	/^del_lines($/;"	f	signature:( long nlines, int undo)
del_menutrans_vars	vim/vim/src/eval.c	/^del_menutrans_vars(void)$/;"	f	signature:(void)
del_mouse_termcode	vim/vim/src/term.c	/^del_mouse_termcode($/;"	f	signature:( int n)
del_termcode	vim/vim/src/term.c	/^del_termcode(char_u *name)$/;"	f	signature:(char_u *name)
del_termcode_idx	vim/vim/src/term.c	/^del_termcode_idx(int idx)$/;"	f	file:	signature:(int idx)
del_termcode_idx	vim/vim/src/term.c	/^static void del_termcode_idx(int idx);$/;"	p	file:	signature:(int idx)
del_trailing_spaces	vim/vim/src/misc2.c	/^del_trailing_spaces(char_u *ptr)$/;"	f	signature:(char_u *ptr)
del_typebuf	vim/vim/src/getchar.c	/^del_typebuf(int len, int offset)$/;"	f	signature:(int len, int offset)
delbuf_msg	vim/vim/src/ex_cmds.c	/^delbuf_msg(char_u *name)$/;"	f	file:	signature:(char_u *name)
delbuf_msg	vim/vim/src/ex_cmds.c	/^static void delbuf_msg(char_u *name);$/;"	p	file:	signature:(char_u *name)
delcmd	vim/vim/src/if_tcl.c	/^    Tcl_Obj	*delcmd;    \/* Tcl command to call when object is being del. *\/$/;"	m	struct:ref	file:	access:public
deleteFold	vim/vim/src/fold.c	/^deleteFold($/;"	f	signature:( linenr_T start, linenr_T end, int recursive, int had_visual)
deleteFoldEntry	vim/vim/src/fold.c	/^deleteFoldEntry(garray_T *gap, int idx, int recursive)$/;"	f	file:	signature:(garray_T *gap, int idx, int recursive)
deleteFoldEntry	vim/vim/src/fold.c	/^static void deleteFoldEntry(garray_T *gap, int idx, int recursive);$/;"	p	file:	signature:(garray_T *gap, int idx, int recursive)
deleteFoldMarkers	vim/vim/src/fold.c	/^deleteFoldMarkers($/;"	f	file:	signature:( fold_T *fp, int recursive, linenr_T lnum_off)
deleteFoldMarkers	vim/vim/src/fold.c	/^static void deleteFoldMarkers(fold_T *fp, int recursive, linenr_T lnum_off);$/;"	p	file:	signature:(fold_T *fp, int recursive, linenr_T lnum_off)
deleteFoldRecurse	vim/vim/src/fold.c	/^deleteFoldRecurse(garray_T *gap)$/;"	f	signature:(garray_T *gap)
delete_event_cb	vim/vim/src/gui_gtk_x11.c	/^delete_event_cb(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventAny *event UNUSED, gpointer data UNUSED)
delete_first_msg	vim/vim/src/message.c	/^delete_first_msg(void)$/;"	f	signature:(void)
delete_lines	vim/vim/src/os_win32.c	/^delete_lines(unsigned cLines)$/;"	f	file:	signature:(unsigned cLines)
delete_lines	vim/vim/src/os_win32.c	/^static void delete_lines(unsigned cLines);$/;"	p	file:	signature:(unsigned cLines)
delete_recursive	vim/vim/src/fileio.c	/^delete_recursive(char_u *name)$/;"	f	signature:(char_u *name)
delete_tooltip	vim/vim/src/gui_w32.c	/^delete_tooltip(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
delete_tooltip	vim/vim/src/gui_w32.c	/^static void delete_tooltip(BalloonEval *beval);$/;"	p	file:	signature:(BalloonEval *beval)
delete_uninstall_key	vim/vim/src/uninstal.c	/^delete_uninstall_key(void)$/;"	f	file:	signature:(void)
delete_var	vim/vim/src/eval.c	/^delete_var(hashtab_T *ht, hashitem_T *hi)$/;"	f	file:	signature:(hashtab_T *ht, hashitem_T *hi)
delete_var	vim/vim/src/eval.c	/^static void delete_var(hashtab_T *ht, hashitem_T *hi);$/;"	p	file:	signature:(hashtab_T *ht, hashitem_T *hi)
deleted_augroup	vim/vim/src/fileio.c	/^static char_u *deleted_augroup = NULL;$/;"	v	file:
deleted_lines	vim/vim/src/misc1.c	/^deleted_lines(linenr_T lnum, long count)$/;"	f	signature:(linenr_T lnum, long count)
deleted_lines_mark	vim/vim/src/misc1.c	/^deleted_lines_mark(linenr_T lnum, long count)$/;"	f	signature:(linenr_T lnum, long count)
delref	vim/vim/src/if_tcl.c	/^delref(ClientData cref)$/;"	f	file:	signature:(ClientData cref)
depth	vim/vim/src/xpm/include/simx.h	/^    unsigned int depth;$/;"	m	struct:__anon87	access:public
depth	vim/vim/src/xpm/include/xpm.h	/^    unsigned int depth;			\/* Specifies the depth *\/$/;"	m	struct:__anon93	access:public
deref_func_name	vim/vim/src/userfunc.c	/^deref_func_name(char_u *name, int *lenp, partial_T **partialp, int no_autoload)$/;"	f	signature:(char_u *name, int *lenp, partial_T **partialp, int no_autoload)
deref_wordnode	vim/vim/src/spellfile.c	/^deref_wordnode(spellinfo_T *spin, wordnode_T *node)$/;"	f	file:	signature:(spellinfo_T *spin, wordnode_T *node)
deref_wordnode	vim/vim/src/spellfile.c	/^static int deref_wordnode(spellinfo_T *spin, wordnode_T *node);$/;"	p	file:	signature:(spellinfo_T *spin, wordnode_T *node)
designation	vim/vim/src/libvterm/src/encoding.c	/^  char designation;$/;"	m	struct:__anon41	file:	access:public
destroying	vim/vim/src/gui_w32.c	/^static int		destroying = FALSE;	\/* call DestroyWindow() ourselves *\/$/;"	v	file:
destruct	vim/vim/src/if_py_both.h	/^    destructorfun destruct;$/;"	m	struct:__anon99	access:public
destructorfun	vim/vim/src/if_py_both.h	/^typedef void (*destructorfun)(void *);$/;"	t
detected_8bit	vim/vim/src/term.c	/^static int  detected_8bit = FALSE;	\/* detected 8-bit terminal *\/$/;"	v	file:
dev_T	vim/vim/src/buffer.c	53;"	d	file:
dev_T	vim/vim/src/buffer.c	55;"	d	file:
df_count	vim/vim/src/structs.h	/^    linenr_T	df_count[DB_COUNT];	\/* nr of inserted\/changed lines *\/$/;"	m	struct:diffblock_S	access:public
df_lnum	vim/vim/src/structs.h	/^    linenr_T	df_lnum[DB_COUNT];	\/* line number in buffer *\/$/;"	m	struct:diffblock_S	access:public
df_next	vim/vim/src/structs.h	/^    diff_T	*df_next;$/;"	m	struct:diffblock_S	access:public
dfd	vim/vim/src/integration.c	/^static FILE *dfd;$/;"	v	file:
dhl	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int dhl       : 2; \/* On a DECDHL line (1=top 2=bottom) *\/$/;"	m	struct:__anon61	access:public
dhl	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    dhl:2;             \/* DECDHL double-height line (1=top 2=bottom) *\/$/;"	m	struct:__anon56	access:public
dhl	vim/vim/src/libvterm/src/screen.c	/^  unsigned int dhl            : 2; \/* on a DECDHL line (1=top 2=bottom) *\/$/;"	m	struct:__anon29	file:	access:public
di_flags	vim/vim/src/structs.h	/^    char_u	di_flags;	\/* flags (only used for variable) *\/$/;"	m	struct:dictitem16_S	access:public
di_flags	vim/vim/src/structs.h	/^    char_u	di_flags;	\/* flags (only used for variable) *\/$/;"	m	struct:dictitem_S	access:public
di_key	vim/vim/src/structs.h	/^    char_u	di_key[17];	\/* key *\/$/;"	m	struct:dictitem16_S	access:public
di_key	vim/vim/src/structs.h	/^    char_u	di_key[1];	\/* key (actually longer!) *\/$/;"	m	struct:dictitem_S	access:public
di_tv	vim/vim/src/structs.h	/^    typval_T	di_tv;		\/* type and value of the variable *\/$/;"	m	struct:dictitem16_S	access:public
di_tv	vim/vim/src/structs.h	/^    typval_T	di_tv;		\/* type and value of the variable *\/$/;"	m	struct:dictitem_S	access:public
dialog	vim/vim/src/gui_gtk.c	/^    GtkDialog	*dialog;	    \/* Widget of the dialog *\/$/;"	m	struct:_DialogInfo	file:	access:public
dialog	vim/vim/src/gui_gtk.c	/^    GtkWidget *dialog;	\/* the main dialog widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
dialog	vim/vim/src/gui_motif.c	/^    Widget dialog;	\/* the main dialog widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
dialog	vim/vim/src/gui_xmdlg.c	/^    Widget	dialog;$/;"	m	struct:_SharedFontSelData	file:	access:public
dialogStatus	vim/vim/src/gui_athena.c	/^static int	dialogStatus;$/;"	v	file:
dialogStatus	vim/vim/src/gui_motif.c	/^static int	dialogStatus;$/;"	v	file:
dialog_add_buttons	vim/vim/src/gui_gtk.c	/^dialog_add_buttons(GtkDialog *dialog, char_u *button_string)$/;"	f	file:	signature:(GtkDialog *dialog, char_u *button_string)
dialog_busy	vim/vim/src/gui_mac.c	/^static int dialog_busy = FALSE;	    \/* TRUE when gui_mch_dialog() wants the$/;"	v	file:
dialog_callback	vim/vim/src/gui_w32.c	/^dialog_callback($/;"	f	file:	signature:( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam UNUSED)
dialog_callback	vim/vim/src/gui_w32.c	/^static LRESULT APIENTRY dialog_callback(HWND, UINT, WPARAM, LPARAM);$/;"	p	file:
dialog_callback_arg	vim/vim/src/gui_motif.c	/^typedef struct dialog_callback_arg$/;"	s	file:
dialog_callback_arg::args	vim/vim/src/gui_motif.c	/^    char *  args;   \/* not used right now *\/$/;"	m	struct:dialog_callback_arg	file:	access:public
dialog_callback_arg::id	vim/vim/src/gui_motif.c	/^    int	    id;$/;"	m	struct:dialog_callback_arg	file:	access:public
dialog_changed	vim/vim/src/ex_cmds2.c	/^dialog_changed($/;"	f	signature:( buf_T *buf, int checkall)
dialog_default_button	vim/vim/src/gui_w32.c	/^static int dialog_default_button = -1;$/;"	v	file:
dialog_key_press_event_cb	vim/vim/src/gui_gtk.c	/^dialog_key_press_event_cb(GtkWidget *widget, GdkEventKey *event, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventKey *event, gpointer data)
dialog_msg	vim/vim/src/ex_docmd.c	/^dialog_msg(char_u *buff, char *format, char_u *fname)$/;"	f	signature:(char_u *buff, char *format, char_u *fname)
dialog_wgt	vim/vim/src/gui_motif.c	/^static Widget dialog_wgt;$/;"	v	file:
dialog_wm_handler	vim/vim/src/gui_athena.c	/^dialog_wm_handler($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XEvent *event, Boolean *dum UNUSED)
dialog_wm_handler	vim/vim/src/gui_athena.c	/^static void dialog_wm_handler(Widget w, XtPointer client_data, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XEvent *event, Boolean *dum)
dialogatom	vim/vim/src/gui_athena.c	/^static Atom	dialogatom;$/;"	v	file:
dict	vim/vim/src/if_py_both.h	/^    dict_T	*dict;$/;"	m	struct:__anon100	access:public
dict2string	vim/vim/src/dict.c	/^dict2string(typval_T *tv, int copyID, int restore_copyID)$/;"	f	signature:(typval_T *tv, int copyID, int restore_copyID)
dict_T	vim/vim/src/structs.h	/^typedef struct dictvar_S dict_T;$/;"	t	typeref:struct:dictvar_S
dict_add	vim/vim/src/dict.c	/^dict_add(dict_T *d, dictitem_T *item)$/;"	f	signature:(dict_T *d, dictitem_T *item)
dict_add_dict	vim/vim/src/dict.c	/^dict_add_dict(dict_T *d, char *key, dict_T *dict)$/;"	f	signature:(dict_T *d, char *key, dict_T *dict)
dict_add_list	vim/vim/src/dict.c	/^dict_add_list(dict_T *d, char *key, list_T *list)$/;"	f	signature:(dict_T *d, char *key, list_T *list)
dict_add_nr_str	vim/vim/src/dict.c	/^dict_add_nr_str($/;"	f	signature:( dict_T *d, char *key, varnumber_T nr, char_u *str)
dict_alloc	vim/vim/src/dict.c	/^dict_alloc(void)$/;"	f	signature:(void)
dict_copy	vim/vim/src/dict.c	/^dict_copy(dict_T *orig, int deep, int copyID)$/;"	f	signature:(dict_T *orig, int deep, int copyID)
dict_equal	vim/vim/src/dict.c	/^dict_equal($/;"	f	signature:( dict_T *d1, dict_T *d2, int ic, int recursive)
dict_extend	vim/vim/src/dict.c	/^dict_extend(dict_T *d1, dict_T *d2, char_u *action)$/;"	f	signature:(dict_T *d1, dict_T *d2, char_u *action)
dict_find	vim/vim/src/dict.c	/^dict_find(dict_T *d, char_u *key, int len)$/;"	f	signature:(dict_T *d, char_u *key, int len)
dict_free	vim/vim/src/dict.c	/^dict_free(dict_T *d)$/;"	f	file:	signature:(dict_T *d)
dict_free_contents	vim/vim/src/dict.c	/^dict_free_contents(dict_T *d)$/;"	f	file:	signature:(dict_T *d)
dict_free_dict	vim/vim/src/dict.c	/^dict_free_dict(dict_T *d)$/;"	f	file:	signature:(dict_T *d)
dict_free_items	vim/vim/src/dict.c	/^dict_free_items(int copyID)$/;"	f	signature:(int copyID)
dict_free_nonref	vim/vim/src/dict.c	/^dict_free_nonref(int copyID)$/;"	f	signature:(int copyID)
dict_item	vim/vim/src/if_py_both.h	/^dict_item(hashitem_T *hi)$/;"	f	signature:(hashitem_T *hi)
dict_key	vim/vim/src/if_py_both.h	/^dict_key(hashitem_T *hi)$/;"	f	signature:(hashitem_T *hi)
dict_len	vim/vim/src/dict.c	/^dict_len(dict_T *d)$/;"	f	signature:(dict_T *d)
dict_list	vim/vim/src/dict.c	/^dict_list(typval_T *argvars, typval_T *rettv, int what)$/;"	f	signature:(typval_T *argvars, typval_T *rettv, int what)
dict_lookup	vim/vim/src/dict.c	/^dict_lookup(hashitem_T *hi)$/;"	f	signature:(hashitem_T *hi)
dict_unref	vim/vim/src/dict.c	/^dict_unref(dict_T *d)$/;"	f	signature:(dict_T *d)
dict_val	vim/vim/src/if_py_both.h	/^dict_val(hashitem_T *hi)$/;"	f	signature:(hashitem_T *hi)
dictitem16_S	vim/vim/src/structs.h	/^struct dictitem16_S$/;"	s
dictitem16_S::di_flags	vim/vim/src/structs.h	/^    char_u	di_flags;	\/* flags (only used for variable) *\/$/;"	m	struct:dictitem16_S	access:public
dictitem16_S::di_key	vim/vim/src/structs.h	/^    char_u	di_key[17];	\/* key *\/$/;"	m	struct:dictitem16_S	access:public
dictitem16_S::di_tv	vim/vim/src/structs.h	/^    typval_T	di_tv;		\/* type and value of the variable *\/$/;"	m	struct:dictitem16_S	access:public
dictitem16_T	vim/vim/src/structs.h	/^typedef struct dictitem16_S dictitem16_T;$/;"	t	typeref:struct:dictitem16_S
dictitem_S	vim/vim/src/structs.h	/^struct dictitem_S$/;"	s
dictitem_S::di_flags	vim/vim/src/structs.h	/^    char_u	di_flags;	\/* flags (only used for variable) *\/$/;"	m	struct:dictitem_S	access:public
dictitem_S::di_key	vim/vim/src/structs.h	/^    char_u	di_key[1];	\/* key (actually longer!) *\/$/;"	m	struct:dictitem_S	access:public
dictitem_S::di_tv	vim/vim/src/structs.h	/^    typval_T	di_tv;		\/* type and value of the variable *\/$/;"	m	struct:dictitem_S	access:public
dictitem_T	vim/vim/src/structs.h	/^typedef struct dictitem_S dictitem_T;$/;"	t	typeref:struct:dictitem_S
dictitem_alloc	vim/vim/src/dict.c	/^dictitem_alloc(char_u *key)$/;"	f	signature:(char_u *key)
dictitem_copy	vim/vim/src/dict.c	/^dictitem_copy(dictitem_T *org)$/;"	f	file:	signature:(dictitem_T *org)
dictitem_free	vim/vim/src/dict.c	/^dictitem_free(dictitem_T *item)$/;"	f	signature:(dictitem_T *item)
dictitem_remove	vim/vim/src/dict.c	/^dictitem_remove(dict_T *dict, dictitem_T *item)$/;"	f	signature:(dict_T *dict, dictitem_T *item)
dictiterinfo_T	vim/vim/src/if_py_both.h	/^} dictiterinfo_T;$/;"	t	typeref:struct:__anon101
dictvar_S	vim/vim/src/structs.h	/^struct dictvar_S$/;"	s
dictvar_S::dv_copyID	vim/vim/src/structs.h	/^    int		dv_copyID;	\/* ID used by deepcopy() *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_copydict	vim/vim/src/structs.h	/^    dict_T	*dv_copydict;	\/* copied dict used by deepcopy() *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_hashtab	vim/vim/src/structs.h	/^    hashtab_T	dv_hashtab;	\/* hashtab that refers to the items *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_lock	vim/vim/src/structs.h	/^    char	dv_lock;	\/* zero, VAR_LOCKED, VAR_FIXED *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_refcount	vim/vim/src/structs.h	/^    int		dv_refcount;	\/* reference count *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_scope	vim/vim/src/structs.h	/^    char	dv_scope;	\/* zero, VAR_SCOPE, VAR_DEF_SCOPE *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_used_next	vim/vim/src/structs.h	/^    dict_T	*dv_used_next;	\/* next dict in used dicts list *\/$/;"	m	struct:dictvar_S	access:public
dictvar_S::dv_used_prev	vim/vim/src/structs.h	/^    dict_T	*dv_used_prev;	\/* previous dict in used dicts list *\/$/;"	m	struct:dictvar_S	access:public
did_add_space	vim/vim/src/edit.c	/^static int	did_add_space = FALSE;	\/* auto_format() added an extra space$/;"	v	file:
did_add_timer	vim/vim/src/globals.h	/^EXTERN int  did_add_timer INIT(= FALSE);$/;"	v
did_ai	vim/vim/src/globals.h	/^EXTERN int     did_ai INIT(= FALSE);$/;"	v
did_check_timestamps	vim/vim/src/globals.h	/^EXTERN int	did_check_timestamps INIT(= FALSE); \/* did check timestamps$/;"	v
did_create_conin	vim/vim/src/os_win32.c	/^static int did_create_conin = FALSE;$/;"	v	file:
did_cursorhold	vim/vim/src/globals.h	/^EXTERN int	did_cursorhold INIT(= FALSE); \/* set when CursorHold t'gerd *\/$/;"	v
did_echo_string_emsg	vim/vim/src/globals.h	/^EXTERN int  did_echo_string_emsg INIT(= FALSE);$/;"	v
did_emsg	vim/vim/src/ex_docmd.c	/^    int		did_emsg;$/;"	m	struct:dbg_stuff	file:	access:public
did_emsg	vim/vim/src/globals.h	/^EXTERN int	did_emsg;		    \/* set by emsg() when the message$/;"	v
did_emsg_syntax	vim/vim/src/globals.h	/^EXTERN int	did_emsg_syntax;	    \/* did_emsg set because of a$/;"	v
did_endif	vim/vim/src/globals.h	/^EXTERN int	did_endif INIT(= FALSE);    \/* just had ":endif" *\/$/;"	v
did_filetype	vim/vim/src/globals.h	/^EXTERN int	did_filetype INIT(= FALSE);	\/* FileType event found *\/$/;"	v
did_init_locales	vim/vim/src/ex_cmds2.c	/^static int	did_init_locales = FALSE;$/;"	v	file:
did_lcd	vim/vim/src/ex_docmd.c	/^static int	did_lcd;	\/* whether ":lcd" was produced for a session *\/$/;"	v	file:
did_log_msg	vim/vim/src/channel.c	/^static int did_log_msg = TRUE;$/;"	v	file:
did_match_already	vim/vim/src/syntax.c	/^did_match_already(int idx, garray_T *gap)$/;"	f	file:	signature:(int idx, garray_T *gap)
did_match_already	vim/vim/src/syntax.c	/^static int did_match_already(int idx, garray_T *gap);$/;"	p	file:	signature:(int idx, garray_T *gap)
did_outofmem_msg	vim/vim/src/globals.h	/^EXTERN int	did_outofmem_msg INIT(= FALSE);$/;"	v
did_restart_edit	vim/vim/src/edit.c	/^static int	did_restart_edit;	\/* "restart_edit" when calling edit() *\/$/;"	v	file:
did_set_icon	vim/vim/src/os_unix.c	/^static int	did_set_icon = FALSE;$/;"	v	file:
did_set_option	vim/vim/src/option.c	/^did_set_option($/;"	f	file:	signature:( int opt_idx, int opt_flags, int new_value)
did_set_option	vim/vim/src/option.c	/^static void did_set_option(int opt_idx, int opt_flags, int new_value);$/;"	p	file:	signature:(int opt_idx, int opt_flags, int new_value)
did_set_spell_option	vim/vim/src/option.c	/^did_set_spell_option(int is_spellfile)$/;"	f	file:	signature:(int is_spellfile)
did_set_spell_option	vim/vim/src/option.c	/^static char_u *did_set_spell_option(int is_spellfile);$/;"	p	file:	signature:(int is_spellfile)
did_set_spelllang	vim/vim/src/spell.c	/^did_set_spelllang(win_T *wp)$/;"	f	signature:(win_T *wp)
did_set_spelltab	vim/vim/src/spell.h	/^SPELL_EXTERN int	  did_set_spelltab;$/;"	v
did_set_string_option	vim/vim/src/option.c	/^did_set_string_option($/;"	f	file:	signature:( int opt_idx, char_u **varp, int new_value_alloced, char_u *oldval, char_u *errbuf, int opt_flags)
did_set_string_option	vim/vim/src/option.c	/^static char_u *did_set_string_option(int opt_idx, char_u **varp, int new_value_alloced, char_u *oldval, char_u *errbuf, int opt_flags);$/;"	p	file:	signature:(int opt_idx, char_u **varp, int new_value_alloced, char_u *oldval, char_u *errbuf, int opt_flags)
did_set_title	vim/vim/src/option.c	/^did_set_title($/;"	f	file:	signature:( int icon)
did_set_title	vim/vim/src/option.c	/^static void did_set_title(int icon);$/;"	p	file:	signature:(int icon)
did_set_title	vim/vim/src/os_unix.c	/^static int	did_set_title = FALSE;$/;"	v	file:
did_si	vim/vim/src/globals.h	/^EXTERN int	did_si INIT(= FALSE);$/;"	v
did_source_packages	vim/vim/src/globals.h	/^EXTERN int	did_source_packages INIT(= FALSE);$/;"	v
did_swapwrite_msg	vim/vim/src/globals.h	/^EXTERN int	did_swapwrite_msg INIT(= FALSE);$/;"	v
did_syncbind	vim/vim/src/globals.h	/^EXTERN int     did_syncbind INIT(= FALSE);$/;"	v
did_throw	vim/vim/src/ex_docmd.c	/^    int		did_throw;$/;"	m	struct:dbg_stuff	file:	access:public
did_throw	vim/vim/src/globals.h	/^EXTERN int did_throw INIT(= FALSE);$/;"	v
did_wait_return	vim/vim/src/globals.h	/^EXTERN int	did_wait_return INIT(= FALSE);	\/* wait_return() was used and$/;"	v
didset_options	vim/vim/src/option.c	/^didset_options(void)$/;"	f	file:	signature:(void)
didset_options	vim/vim/src/option.c	/^static void didset_options(void);$/;"	p	file:	signature:(void)
didset_options2	vim/vim/src/option.c	/^didset_options2(void)$/;"	f	file:	signature:(void)
didset_options2	vim/vim/src/option.c	/^static void didset_options2(void);$/;"	p	file:	signature:(void)
didset_vim	vim/vim/src/globals.h	/^EXTERN int	didset_vim INIT(= FALSE);   \/* did set $VIM ourselves *\/$/;"	v
didset_vimruntime	vim/vim/src/globals.h	/^EXTERN int	didset_vimruntime INIT(= FALSE);   \/* idem for $VIMRUNTIME *\/$/;"	v
die	vim/vim/src/xxd/xxd.c	/^die(int ret)$/;"	f	file:	signature:(int ret)
die	vim/vim/src/xxd/xxd.c	/^static void die __P((int));$/;"	p	file:	signature:(int)
diff_T	vim/vim/src/structs.h	/^typedef struct diffblock_S diff_T;$/;"	t	typeref:struct:diffblock_S
diff_a_works	vim/vim/src/diff.c	/^static int diff_a_works = MAYBE; \/* TRUE when "diff -a" works, FALSE when it$/;"	v	file:
diff_alloc_new	vim/vim/src/diff.c	/^diff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp)$/;"	f	file:	signature:(tabpage_T *tp, diff_T *dprev, diff_T *dp)
diff_alloc_new	vim/vim/src/diff.c	/^static diff_T *diff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp);$/;"	p	file:	signature:(tabpage_T *tp, diff_T *dprev, diff_T *dp)
diff_bin_works	vim/vim/src/diff.c	/^static int diff_bin_works = MAYBE; \/* TRUE when "diff --binary" works, FALSE$/;"	v	file:
diff_buf_add	vim/vim/src/diff.c	/^diff_buf_add(buf_T *buf)$/;"	f	signature:(buf_T *buf)
diff_buf_adjust	vim/vim/src/diff.c	/^diff_buf_adjust(win_T *win)$/;"	f	signature:(win_T *win)
diff_buf_clear	vim/vim/src/diff.c	/^diff_buf_clear(void)$/;"	f	file:	signature:(void)
diff_buf_delete	vim/vim/src/diff.c	/^diff_buf_delete(buf_T *buf)$/;"	f	signature:(buf_T *buf)
diff_buf_idx	vim/vim/src/diff.c	/^diff_buf_idx(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
diff_buf_idx	vim/vim/src/diff.c	/^static int diff_buf_idx(buf_T *buf);$/;"	p	file:	signature:(buf_T *buf)
diff_buf_idx_tp	vim/vim/src/diff.c	/^diff_buf_idx_tp(buf_T *buf, tabpage_T *tp)$/;"	f	file:	signature:(buf_T *buf, tabpage_T *tp)
diff_buf_idx_tp	vim/vim/src/diff.c	/^static int diff_buf_idx_tp(buf_T *buf, tabpage_T *tp);$/;"	p	file:	signature:(buf_T *buf, tabpage_T *tp)
diff_busy	vim/vim/src/diff.c	/^static int	diff_busy = FALSE;	\/* ex_diffgetput() is busy *\/$/;"	v	file:
diff_check	vim/vim/src/diff.c	/^diff_check(win_T *wp, linenr_T lnum)$/;"	f	signature:(win_T *wp, linenr_T lnum)
diff_check_fill	vim/vim/src/diff.c	/^diff_check_fill(win_T *wp, linenr_T lnum)$/;"	f	signature:(win_T *wp, linenr_T lnum)
diff_check_sanity	vim/vim/src/diff.c	/^diff_check_sanity(tabpage_T *tp, diff_T *dp)$/;"	f	file:	signature:(tabpage_T *tp, diff_T *dp)
diff_check_sanity	vim/vim/src/diff.c	/^static int diff_check_sanity(tabpage_T *tp, diff_T *dp);$/;"	p	file:	signature:(tabpage_T *tp, diff_T *dp)
diff_check_unchanged	vim/vim/src/diff.c	/^diff_check_unchanged(tabpage_T *tp, diff_T *dp)$/;"	f	file:	signature:(tabpage_T *tp, diff_T *dp)
diff_check_unchanged	vim/vim/src/diff.c	/^static void diff_check_unchanged(tabpage_T *tp, diff_T *dp);$/;"	p	file:	signature:(tabpage_T *tp, diff_T *dp)
diff_clear	vim/vim/src/diff.c	/^diff_clear(tabpage_T *tp)$/;"	f	signature:(tabpage_T *tp)
diff_cmp	vim/vim/src/diff.c	/^diff_cmp(char_u *s1, char_u *s2)$/;"	f	file:	signature:(char_u *s1, char_u *s2)
diff_cmp	vim/vim/src/diff.c	/^static int diff_cmp(char_u *s1, char_u *s2);$/;"	p	file:	signature:(char_u *s1, char_u *s2)
diff_context	vim/vim/src/globals.h	/^EXTERN int	diff_context INIT(= 6);		\/* context for folds *\/$/;"	v
diff_copy_entry	vim/vim/src/diff.c	/^diff_copy_entry($/;"	f	file:	signature:( diff_T *dprev, diff_T *dp, int idx_orig, int idx_new)
diff_copy_entry	vim/vim/src/diff.c	/^static void diff_copy_entry(diff_T *dprev, diff_T *dp, int idx_orig, int idx_new);$/;"	p	file:	signature:(diff_T *dprev, diff_T *dp, int idx_orig, int idx_new)
diff_equal_entry	vim/vim/src/diff.c	/^diff_equal_entry(diff_T *dp, int idx1, int idx2)$/;"	f	file:	signature:(diff_T *dp, int idx1, int idx2)
diff_equal_entry	vim/vim/src/diff.c	/^static int diff_equal_entry(diff_T *dp, int idx1, int idx2);$/;"	p	file:	signature:(diff_T *dp, int idx1, int idx2)
diff_file	vim/vim/src/diff.c	/^diff_file($/;"	f	file:	signature:( char_u *tmp_orig, char_u *tmp_new, char_u *tmp_diff)
diff_file	vim/vim/src/diff.c	/^static void diff_file(char_u *tmp_orig, char_u *tmp_new, char_u *tmp_diff);$/;"	p	file:	signature:(char_u *tmp_orig, char_u *tmp_new, char_u *tmp_diff)
diff_find_change	vim/vim/src/diff.c	/^diff_find_change($/;"	f	signature:( win_T *wp, linenr_T lnum, int *startp, int *endp)
diff_flags	vim/vim/src/diff.c	/^static int	diff_flags = DIFF_FILLER;$/;"	v	file:
diff_fold_update	vim/vim/src/diff.c	/^diff_fold_update(diff_T *dp, int skip_idx)$/;"	f	file:	signature:(diff_T *dp, int skip_idx)
diff_fold_update	vim/vim/src/diff.c	/^static void diff_fold_update(diff_T *dp, int skip_idx);$/;"	p	file:	signature:(diff_T *dp, int skip_idx)
diff_foldcolumn	vim/vim/src/globals.h	/^EXTERN int	diff_foldcolumn INIT(= 2);	\/* 'foldcolumn' for diff mode *\/$/;"	v
diff_get_corresponding_line	vim/vim/src/diff.c	/^diff_get_corresponding_line(buf_T *buf1, linenr_T lnum1)$/;"	f	signature:(buf_T *buf1, linenr_T lnum1)
diff_get_corresponding_line_int	vim/vim/src/diff.c	/^diff_get_corresponding_line_int($/;"	f	file:	signature:( buf_T *buf1, linenr_T lnum1)
diff_infold	vim/vim/src/diff.c	/^diff_infold(win_T *wp, linenr_T lnum)$/;"	f	signature:(win_T *wp, linenr_T lnum)
diff_invalidate	vim/vim/src/diff.c	/^diff_invalidate(buf_T *buf)$/;"	f	signature:(buf_T *buf)
diff_lnum_win	vim/vim/src/diff.c	/^diff_lnum_win(linenr_T lnum, win_T *wp)$/;"	f	signature:(linenr_T lnum, win_T *wp)
diff_mark_adjust	vim/vim/src/diff.c	/^diff_mark_adjust($/;"	f	signature:( linenr_T line1, linenr_T line2, long amount, long amount_after)
diff_mark_adjust_tp	vim/vim/src/diff.c	/^diff_mark_adjust_tp($/;"	f	file:	signature:( tabpage_T *tp, int idx, linenr_T line1, linenr_T line2, long amount, long amount_after)
diff_mark_adjust_tp	vim/vim/src/diff.c	/^static void diff_mark_adjust_tp(tabpage_T *tp, int idx, linenr_T line1, linenr_T line2, long amount, long amount_after);$/;"	p	file:	signature:(tabpage_T *tp, int idx, linenr_T line1, linenr_T line2, long amount, long amount_after)
diff_mode	vim/vim/src/structs.h	/^    int		diff_mode;		\/* start with 'diff' set *\/$/;"	m	struct:__anon210	access:public
diff_mode_buf	vim/vim/src/diff.c	/^diff_mode_buf(buf_T *buf)$/;"	f	signature:(buf_T *buf)
diff_move_to	vim/vim/src/diff.c	/^diff_move_to(int dir, long count)$/;"	f	signature:(int dir, long count)
diff_need_scrollbind	vim/vim/src/globals.h	/^EXTERN int	diff_need_scrollbind INIT(= FALSE);$/;"	v
diff_read	vim/vim/src/diff.c	/^diff_read($/;"	f	file:	signature:( int idx_orig, int idx_new, char_u *fname)
diff_read	vim/vim/src/diff.c	/^static void diff_read(int idx_orig, int idx_new, char_u *fname);$/;"	p	file:	signature:(int idx_orig, int idx_new, char_u *fname)
diff_redraw	vim/vim/src/diff.c	/^diff_redraw($/;"	f	file:	signature:( int dofold)
diff_redraw	vim/vim/src/diff.c	/^static void diff_redraw(int dofold);$/;"	p	file:	signature:(int dofold)
diff_set_topline	vim/vim/src/diff.c	/^diff_set_topline(win_T *fromwin, win_T *towin)$/;"	f	signature:(win_T *fromwin, win_T *towin)
diff_win_options	vim/vim/src/diff.c	/^diff_win_options($/;"	f	signature:( win_T *wp, int addbuf)
diff_write	vim/vim/src/diff.c	/^diff_write(buf_T *buf, char_u *fname)$/;"	f	file:	signature:(buf_T *buf, char_u *fname)
diff_write	vim/vim/src/diff.c	/^static int diff_write(buf_T *buf, char_u *fname);$/;"	p	file:	signature:(buf_T *buf, char_u *fname)
diffblock_S	vim/vim/src/structs.h	/^struct diffblock_S$/;"	s
diffblock_S::df_count	vim/vim/src/structs.h	/^    linenr_T	df_count[DB_COUNT];	\/* nr of inserted\/changed lines *\/$/;"	m	struct:diffblock_S	access:public
diffblock_S::df_lnum	vim/vim/src/structs.h	/^    linenr_T	df_lnum[DB_COUNT];	\/* line number in buffer *\/$/;"	m	struct:diffblock_S	access:public
diffblock_S::df_next	vim/vim/src/structs.h	/^    diff_T	*df_next;$/;"	m	struct:diffblock_S	access:public
diffopt_changed	vim/vim/src/diff.c	/^diffopt_changed(void)$/;"	f	signature:(void)
diffopt_horizontal	vim/vim/src/diff.c	/^diffopt_horizontal(void)$/;"	f	signature:(void)
digr_T	vim/vim/src/digraph.c	/^} digr_T;$/;"	t	typeref:struct:digraph	file:
digraph	vim/vim/src/digraph.c	/^typedef struct digraph$/;"	s	file:
digraph::char1	vim/vim/src/digraph.c	/^    char_u	char1;$/;"	m	struct:digraph	file:	access:public
digraph::char2	vim/vim/src/digraph.c	/^    char_u	char2;$/;"	m	struct:digraph	file:	access:public
digraph::result	vim/vim/src/digraph.c	/^    result_T	result;$/;"	m	struct:digraph	file:	access:public
digraphdefault	vim/vim/src/digraph.c	/^static digr_T digraphdefault[] =$/;"	v	file:
dir	vim/vim/src/gui_at_fs.c	/^    char	*dir;$/;"	m	struct:__anon236	file:	access:public
dir	vim/vim/src/gui_at_fs.c	/^    char	*dir;$/;"	m	struct:__anon237	file:	access:public
dir	vim/vim/src/search.c	/^    int		dir;		\/* search direction, '\/' or '?' *\/$/;"	m	struct:soffset	file:	access:public
dir	vim/vim/src/testdir/python2/module.py	/^dir = '2'$/;"	v
dir	vim/vim/src/testdir/python3/module.py	/^dir = '3'$/;"	v
dir	vim/vim/src/testdir/python_after/after.py	/^dir = "after"$/;"	v
dir	vim/vim/src/testdir/python_before/before.py	/^dir = "before"$/;"	v
dir	vim/vim/src/testdir/pythonx/module.py	/^dir = 'x'$/;"	v
dir_of_file_exists	vim/vim/src/misc1.c	/^dir_of_file_exists(char_u *fname)$/;"	f	signature:(char_u *fname)
dir_remove_last	vim/vim/src/dosinst.c	/^dir_remove_last(const char *path, char to[BUFSIZE])$/;"	f	file:	signature:(const char *path, char to[BUFSIZE])
dir_stack_T	vim/vim/src/quickfix.c	/^struct dir_stack_T$/;"	s	file:
dir_stack_T::dirname	vim/vim/src/quickfix.c	/^    char_u		*dirname;$/;"	m	struct:dir_stack_T	file:	access:public
dir_stack_T::next	vim/vim/src/quickfix.c	/^    struct dir_stack_T	*next;$/;"	m	struct:dir_stack_T	typeref:struct:dir_stack_T::dir_stack_T	file:	access:public
directx_enabled	vim/vim/src/gui_w32.c	/^directx_enabled(void)$/;"	f	signature:(void)
dirent	vim/vim/src/os_unix.h	117;"	d
dirname	vim/vim/src/quickfix.c	/^    char_u		*dirname;$/;"	m	struct:dir_stack_T	file:	access:public
dis_msg	vim/vim/src/ops.c	/^dis_msg($/;"	f	file:	signature:( char_u *p, int skip_esc)
dis_msg	vim/vim/src/ops.c	/^static void	dis_msg(char_u *p, int skip_esc);$/;"	p	file:	signature:(char_u *p, int skip_esc)
disable_char_avail_for_testing	vim/vim/src/globals.h	/^EXTERN int  disable_char_avail_for_testing INIT(= 0);$/;"	v
disable_fold_update	vim/vim/src/globals.h	/^EXTERN int	disable_fold_update INIT(= 0);$/;"	v
disable_redraw_for_testing	vim/vim/src/globals.h	/^EXTERN int  disable_redraw_for_testing INIT(= 0);$/;"	v
disabled	vim/vim/src/if_mzsch.c	/^static int disabled = FALSE;$/;"	v	file:
disallow_gui	vim/vim/src/globals.h	/^EXTERN short disallow_gui	INIT(= FALSE);$/;"	v
discard_current_exception	vim/vim/src/ex_eval.c	/^discard_current_exception(void)$/;"	f	signature:(void)
discard_exception	vim/vim/src/ex_eval.c	/^discard_exception(except_T *excp, int was_finished)$/;"	f	file:	signature:(except_T *excp, int was_finished)
discard_exception	vim/vim/src/ex_eval.c	/^static void	discard_exception(except_T *excp, int was_finished);$/;"	p	file:	signature:(except_T *excp, int was_finished)
discard_pending_return	vim/vim/src/userfunc.c	/^discard_pending_return(void *rettv)$/;"	f	signature:(void *rettv)
disp_sb_line	vim/vim/src/message.c	/^disp_sb_line(int row, msgchunk_T *smp)$/;"	f	file:	signature:(int row, msgchunk_T *smp)
disp_sb_line	vim/vim/src/message.c	/^static msgchunk_T *disp_sb_line(int row, msgchunk_T *smp);$/;"	p	file:	signature:(int row, msgchunk_T *smp)
display_confirm_msg	vim/vim/src/message.c	/^display_confirm_msg(void)$/;"	f	signature:(void)
display_dollar	vim/vim/src/edit.c	/^display_dollar(colnr_T col)$/;"	f	signature:(colnr_T col)
display_errors	vim/vim/src/gui.c	/^display_errors(void)$/;"	f	signature:(void)
display_errors	vim/vim/src/gui_mac.c	/^display_errors(void)$/;"	f	signature:(void)
display_errors	vim/vim/src/os_mswin.c	/^display_errors(void)$/;"	f	signature:(void)
display_errors	vim/vim/src/os_mswin.c	680;"	d	file:
display_errors	vim/vim/src/vim.h	2127;"	d
display_sample	vim/vim/src/gui_xmdlg.c	/^display_sample(SharedFontSelData *data)$/;"	f	file:	signature:(SharedFontSelData *data)
display_showcmd	vim/vim/src/normal.c	/^display_showcmd(void)$/;"	f	file:	signature:(void)
display_showcmd	vim/vim/src/normal.c	/^static void display_showcmd(void);$/;"	p	file:	signature:(void)
display_tick	vim/vim/src/globals.h	/^EXTERN disptick_T	display_tick INIT(= 0);$/;"	v
displayname	vim/vim/src/netbeans.c	/^    char		*displayname;$/;"	m	struct:nbbuf_struct	file:	access:public
disptick_T	vim/vim/src/vim.h	/^typedef unsigned short disptick_T;	\/* display tick type *\/$/;"	t
dlg_icons	vim/vim/src/gui_w32.c	/^static const char *dlg_icons[] = \/* must match names in resource file *\/$/;"	v	file:
dll_GC_malloc	vim/vim/src/if_mzsch.c	/^static void *(*dll_GC_malloc)(size_t size_in_bytes);$/;"	v	file:
dll_GC_malloc_atomic	vim/vim/src/if_mzsch.c	/^static void *(*dll_GC_malloc_atomic)(size_t size_in_bytes);$/;"	v	file:
dll_GC_malloc_one_tagged	vim/vim/src/if_mzsch.c	/^static void *(*dll_GC_malloc_one_tagged)(size_t size_in_bytes);$/;"	v	file:
dll_GC_register_traversers	vim/vim/src/if_mzsch.c	/^static void (*dll_GC_register_traversers)(short tag, Size_Proc size, Mark_Proc mark, Fixup_Proc fixup, int is_constant_size, int is_atomic);$/;"	v	file:
dll_NtInitialize	vim/vim/src/if_ruby.c	/^static void (*dll_NtInitialize) (int*, char***);$/;"	v	file:
dll_PyArg_Parse	vim/vim/src/if_python.c	/^static int(*dll_PyArg_Parse)(PyObject *, char *, ...);$/;"	v	file:
dll_PyArg_ParseTuple	vim/vim/src/if_python.c	/^static int(*dll_PyArg_ParseTuple)(PyObject *, char *, ...);$/;"	v	file:
dll_PyBool_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyBool_Type;$/;"	v	file:
dll_PyCObject_AsVoidPtr	vim/vim/src/if_python.c	/^static void* (*dll_PyCObject_AsVoidPtr)(PyObject *);$/;"	v	file:
dll_PyCObject_FromVoidPtr	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyCObject_FromVoidPtr)(void *cobj, void (*destr)(void *));$/;"	v	file:
dll_PyCapsule_GetPointer	vim/vim/src/if_python.c	/^static void* (*dll_PyCapsule_GetPointer)(PyObject *, char *);$/;"	v	file:
dll_PyCapsule_New	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyCapsule_New)(void *, char *, PyCapsule_Destructor);$/;"	v	file:
dll_PyDict_GetItemString	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyDict_GetItemString)(PyObject *, const char *);$/;"	v	file:
dll_PyDict_New	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyDict_New)(void);$/;"	v	file:
dll_PyDict_Next	vim/vim/src/if_python.c	/^static int (*dll_PyDict_Next)(PyObject *, PyInt *, PyObject **, PyObject **);$/;"	v	file:
dll_PyDict_SetItemString	vim/vim/src/if_python.c	/^static int(*dll_PyDict_SetItemString)(PyObject *dp, char *key, PyObject *item);$/;"	v	file:
dll_PyDict_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyDict_Type;$/;"	v	file:
dll_PyErr_BadArgument	vim/vim/src/if_python.c	/^static int(*dll_PyErr_BadArgument)(void);$/;"	v	file:
dll_PyErr_Clear	vim/vim/src/if_python.c	/^static void(*dll_PyErr_Clear)(void);$/;"	v	file:
dll_PyErr_ExceptionMatches	vim/vim/src/if_python.c	/^static int(*dll_PyErr_ExceptionMatches)(PyObject *);$/;"	v	file:
dll_PyErr_Format	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyErr_Format)(PyObject *, const char *, ...);$/;"	v	file:
dll_PyErr_NewException	vim/vim/src/if_python.c	/^static PyObject *(*dll_PyErr_NewException)(char *, PyObject *, PyObject *);$/;"	v	file:
dll_PyErr_NoMemory	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyErr_NoMemory)(void);$/;"	v	file:
dll_PyErr_Occurred	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyErr_Occurred)(void);$/;"	v	file:
dll_PyErr_PrintEx	vim/vim/src/if_python.c	/^static void(*dll_PyErr_PrintEx)(int);$/;"	v	file:
dll_PyErr_SetNone	vim/vim/src/if_python.c	/^static void(*dll_PyErr_SetNone)(PyObject *);$/;"	v	file:
dll_PyErr_SetObject	vim/vim/src/if_python.c	/^static void(*dll_PyErr_SetObject)(PyObject *, PyObject *);$/;"	v	file:
dll_PyErr_SetString	vim/vim/src/if_python.c	/^static void(*dll_PyErr_SetString)(PyObject *, const char *);$/;"	v	file:
dll_PyEval_InitThreads	vim/vim/src/if_python.c	/^static void(*dll_PyEval_InitThreads)(void);$/;"	v	file:
dll_PyEval_RestoreThread	vim/vim/src/if_python.c	/^static void(*dll_PyEval_RestoreThread)(PyThreadState *);$/;"	v	file:
dll_PyEval_SaveThread	vim/vim/src/if_python.c	/^static PyThreadState*(*dll_PyEval_SaveThread)(void);$/;"	v	file:
dll_PyFloat_AsDouble	vim/vim/src/if_python.c	/^static double(*dll_PyFloat_AsDouble)(PyObject *);$/;"	v	file:
dll_PyFloat_FromDouble	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyFloat_FromDouble)(double);$/;"	v	file:
dll_PyFloat_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyFloat_Type;$/;"	v	file:
dll_PyGILState_Ensure	vim/vim/src/if_python.c	/^static PyGILState_STATE	(*dll_PyGILState_Ensure)(void);$/;"	v	file:
dll_PyGILState_Release	vim/vim/src/if_python.c	/^static void (*dll_PyGILState_Release)(PyGILState_STATE);$/;"	v	file:
dll_PyImport_AddModule	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyImport_AddModule)(char *);$/;"	v	file:
dll_PyImport_ImportModule	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyImport_ImportModule)(const char *);$/;"	v	file:
dll_PyInt_AsLong	vim/vim/src/if_python.c	/^static long(*dll_PyInt_AsLong)(PyObject *);$/;"	v	file:
dll_PyInt_FromLong	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyInt_FromLong)(long);$/;"	v	file:
dll_PyInt_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyInt_Type;$/;"	v	file:
dll_PyIter_Next	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyIter_Next)(PyObject *);$/;"	v	file:
dll_PyList_Append	vim/vim/src/if_python.c	/^static int(*dll_PyList_Append)(PyObject *, PyObject *);$/;"	v	file:
dll_PyList_GetItem	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyList_GetItem)(PyObject *, PyInt);$/;"	v	file:
dll_PyList_Insert	vim/vim/src/if_python.c	/^static int(*dll_PyList_Insert)(PyObject *, PyInt, PyObject *);$/;"	v	file:
dll_PyList_New	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyList_New)(PyInt size);$/;"	v	file:
dll_PyList_SetItem	vim/vim/src/if_python.c	/^static int(*dll_PyList_SetItem)(PyObject *, PyInt, PyObject *);$/;"	v	file:
dll_PyList_Size	vim/vim/src/if_python.c	/^static PyInt(*dll_PyList_Size)(PyObject *);$/;"	v	file:
dll_PyList_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyList_Type;$/;"	v	file:
dll_PyLong_AsLong	vim/vim/src/if_python.c	/^static long(*dll_PyLong_AsLong)(PyObject *);$/;"	v	file:
dll_PyLong_FromLong	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyLong_FromLong)(long);$/;"	v	file:
dll_PyLong_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyLong_Type;$/;"	v	file:
dll_PyMapping_Check	vim/vim/src/if_python.c	/^static int (*dll_PyMapping_Check)(PyObject *);$/;"	v	file:
dll_PyMapping_Keys	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyMapping_Keys)(PyObject *);$/;"	v	file:
dll_PyMem_Free	vim/vim/src/if_python.c	/^static int(*dll_PyMem_Free)(void *);$/;"	v	file:
dll_PyMem_Malloc	vim/vim/src/if_python.c	/^static void* (*dll_PyMem_Malloc)(size_t);$/;"	v	file:
dll_PyModule_AddObject	vim/vim/src/if_python.c	/^static int(*dll_PyModule_AddObject)(PyObject *, const char *, PyObject *);$/;"	v	file:
dll_PyModule_GetDict	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyModule_GetDict)(PyObject *);$/;"	v	file:
dll_PyNumber_Check	vim/vim/src/if_python.c	/^static int(*dll_PyNumber_Check)(PyObject *);$/;"	v	file:
dll_PyNumber_Long	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyNumber_Long)(PyObject *);$/;"	v	file:
dll_PyObject_Call	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_Call)(PyObject *, PyObject *, PyObject *);$/;"	v	file:
dll_PyObject_CallFunction	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_CallFunction)(PyObject *, char *, ...);$/;"	v	file:
dll_PyObject_CallFunctionObjArgs	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_CallFunctionObjArgs)(PyObject *, ...);$/;"	v	file:
dll_PyObject_CallMethod	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_CallMethod)(PyObject *, char *, PyObject *);$/;"	v	file:
dll_PyObject_Free	vim/vim/src/if_python.c	/^static void (*dll_PyObject_Free)(void*);$/;"	v	file:
dll_PyObject_GC_Del	vim/vim/src/if_python.c	/^static void(*dll_PyObject_GC_Del)(void *);$/;"	v	file:
dll_PyObject_GC_UnTrack	vim/vim/src/if_python.c	/^static void(*dll_PyObject_GC_UnTrack)(void *);$/;"	v	file:
dll_PyObject_GetAttrString	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_GetAttrString)(PyObject *, const char *);$/;"	v	file:
dll_PyObject_GetItem	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_GetItem)(PyObject *, PyObject *);$/;"	v	file:
dll_PyObject_GetIter	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_GetIter)(PyObject *);$/;"	v	file:
dll_PyObject_HasAttrString	vim/vim/src/if_python.c	/^static int (*dll_PyObject_HasAttrString)(PyObject *, const char *);$/;"	v	file:
dll_PyObject_IsTrue	vim/vim/src/if_python.c	/^static int (*dll_PyObject_IsTrue)(PyObject *);$/;"	v	file:
dll_PyObject_Malloc	vim/vim/src/if_python.c	/^static void* (*dll_PyObject_Malloc)(size_t);$/;"	v	file:
dll_PyObject_Repr	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyObject_Repr)(PyObject *);$/;"	v	file:
dll_PyObject_SetAttrString	vim/vim/src/if_python.c	/^static int (*dll_PyObject_SetAttrString)(PyObject *, const char *, PyObject *);$/;"	v	file:
dll_PyRun_SimpleString	vim/vim/src/if_python.c	/^static int(*dll_PyRun_SimpleString)(char *);$/;"	v	file:
dll_PyRun_String	vim/vim/src/if_python.c	/^static PyObject *(*dll_PyRun_String)(char *, int, PyObject *, PyObject *);$/;"	v	file:
dll_PySequence_Check	vim/vim/src/if_python.c	/^static int (*dll_PySequence_Check)(PyObject *);$/;"	v	file:
dll_PySequence_Fast	vim/vim/src/if_python.c	/^static PyObject*(*dll_PySequence_Fast)(PyObject *, const char *);$/;"	v	file:
dll_PySequence_GetItem	vim/vim/src/if_python.c	/^static PyObject*(*dll_PySequence_GetItem)(PyObject *, PyInt);$/;"	v	file:
dll_PySequence_Size	vim/vim/src/if_python.c	/^static PyInt(*dll_PySequence_Size)(PyObject *);$/;"	v	file:
dll_PySlice_GetIndicesEx	vim/vim/src/if_python.c	/^static int (*dll_PySlice_GetIndicesEx)(PySliceObject *r, PyInt length,$/;"	v	file:
dll_PySlice_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PySlice_Type;$/;"	v	file:
dll_PyString_AsString	vim/vim/src/if_python.c	/^static char*(*dll_PyString_AsString)(PyObject *);$/;"	v	file:
dll_PyString_AsStringAndSize	vim/vim/src/if_python.c	/^static int(*dll_PyString_AsStringAndSize)(PyObject *, char **, PyInt *);$/;"	v	file:
dll_PyString_FromFormat	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyString_FromFormat)(const char *, ...);$/;"	v	file:
dll_PyString_FromString	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyString_FromString)(const char *);$/;"	v	file:
dll_PyString_FromStringAndSize	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyString_FromStringAndSize)(const char *, PyInt);$/;"	v	file:
dll_PyString_Size	vim/vim/src/if_python.c	/^static PyInt(*dll_PyString_Size)(PyObject *);$/;"	v	file:
dll_PyString_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyString_Type;$/;"	v	file:
dll_PySys_GetObject	vim/vim/src/if_python.c	/^static PyObject *(*dll_PySys_GetObject)(char *);$/;"	v	file:
dll_PySys_SetArgv	vim/vim/src/if_python.c	/^static int(*dll_PySys_SetArgv)(int, char **);$/;"	v	file:
dll_PySys_SetObject	vim/vim/src/if_python.c	/^static int(*dll_PySys_SetObject)(char *, PyObject *);$/;"	v	file:
dll_PyTuple_GetItem	vim/vim/src/if_python.c	/^static PyObject*(*dll_PyTuple_GetItem)(PyObject *, PyInt);$/;"	v	file:
dll_PyTuple_Size	vim/vim/src/if_python.c	/^static PyInt(*dll_PyTuple_Size)(PyObject *);$/;"	v	file:
dll_PyTuple_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyTuple_Type;$/;"	v	file:
dll_PyType_GenericAlloc	vim/vim/src/if_python.c	/^static PyObject* (*dll_PyType_GenericAlloc)(PyTypeObject *type, PyInt nitems);$/;"	v	file:
dll_PyType_IsSubtype	vim/vim/src/if_python.c	/^static int (*dll_PyType_IsSubtype)(PyTypeObject *, PyTypeObject *);$/;"	v	file:
dll_PyType_Ready	vim/vim/src/if_python.c	/^static int (*dll_PyType_Ready)(PyTypeObject *type);$/;"	v	file:
dll_PyType_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyType_Type;$/;"	v	file:
dll_PyUnicode_Type	vim/vim/src/if_python.c	/^static PyTypeObject* dll_PyUnicode_Type;$/;"	v	file:
dll_Py_BuildValue	vim/vim/src/if_python.c	/^static PyObject*(*dll_Py_BuildValue)(char *, ...);$/;"	v	file:
dll_Py_Finalize	vim/vim/src/if_python.c	/^static void(*dll_Py_Finalize)(void);$/;"	v	file:
dll_Py_FindMethod	vim/vim/src/if_python.c	/^static PyObject*(*dll_Py_FindMethod)(struct PyMethodDef[], PyObject *, char *);$/;"	v	file:
dll_Py_InitModule4	vim/vim/src/if_python.c	/^static PyObject*(*dll_Py_InitModule4)(char *, struct PyMethodDef *, char *, PyObject *, int);$/;"	v	file:
dll_Py_Initialize	vim/vim/src/if_python.c	/^static void(*dll_Py_Initialize)(void);$/;"	v	file:
dll_Py_IsInitialized	vim/vim/src/if_python.c	/^static int(*dll_Py_IsInitialized)(void);$/;"	v	file:
dll_Py_NoSiteFlag	vim/vim/src/if_python.c	/^static int* dll_Py_NoSiteFlag;$/;"	v	file:
dll_Py_SetPythonHome	vim/vim/src/if_python.c	/^static void(*dll_Py_SetPythonHome)(char *home);$/;"	v	file:
dll_Tcl_CreateInterp	vim/vim/src/if_tcl.c	/^Tcl_Interp* (*dll_Tcl_CreateInterp)();$/;"	v
dll_Tcl_FindExecutable	vim/vim/src/if_tcl.c	/^void (*dll_Tcl_FindExecutable)(const void *);$/;"	v
dll__PyObject_DebugFree	vim/vim/src/if_python.c	/^static void (*dll__PyObject_DebugFree)(void*);$/;"	v	file:
dll__PyObject_DebugMalloc	vim/vim/src/if_python.c	/^static void* (*dll__PyObject_DebugMalloc)(size_t);$/;"	v	file:
dll__PyObject_GC_Del	vim/vim/src/if_python.c	/^static void(*dll__PyObject_GC_Del)(void *);$/;"	v	file:
dll__PyObject_GC_New	vim/vim/src/if_python.c	/^static PyObject*(*dll__PyObject_GC_New)(PyTypeObject *);$/;"	v	file:
dll__PyObject_GC_UnTrack	vim/vim/src/if_python.c	/^static void(*dll__PyObject_GC_UnTrack)(void *);$/;"	v	file:
dll__PyObject_Init	vim/vim/src/if_python.c	/^static PyObject*(*dll__PyObject_Init)(PyObject *, PyTypeObject *);$/;"	v	file:
dll__PyObject_New	vim/vim/src/if_python.c	/^static PyObject*(*dll__PyObject_New)(PyTypeObject *, PyObject *);$/;"	v	file:
dll__PyObject_NextNotImplemented	vim/vim/src/if_python.c	/^static iternextfunc dll__PyObject_NextNotImplemented;$/;"	v	file:
dll__Py_Dealloc	vim/vim/src/if_python.c	/^static void (*dll__Py_Dealloc)(PyObject *obj);$/;"	v	file:
dll__Py_NegativeRefcount	vim/vim/src/if_python.c	/^static void (*dll__Py_NegativeRefcount)(const char *fname, int lineno, PyObject *op);$/;"	v	file:
dll__Py_NoneStruct	vim/vim/src/if_python.c	/^static PyObject* dll__Py_NoneStruct;$/;"	v	file:
dll__Py_RefTotal	vim/vim/src/if_python.c	/^static PyInt* dll__Py_RefTotal;$/;"	v	file:
dll__Py_TrueStruct	vim/vim/src/if_python.c	/^static PyObject* dll__Py_TrueStruct;$/;"	v	file:
dll_luaL_addlstring	vim/vim/src/if_lua.c	/^void (*dll_luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);$/;"	v
dll_luaL_argerror	vim/vim/src/if_lua.c	/^int (*dll_luaL_argerror) (lua_State *L, int numarg, const char *extramsg);$/;"	v
dll_luaL_buffinit	vim/vim/src/if_lua.c	/^void (*dll_luaL_buffinit) (lua_State *L, luaL_Buffer *B);$/;"	v
dll_luaL_checkany	vim/vim/src/if_lua.c	/^void (*dll_luaL_checkany) (lua_State *L, int narg);$/;"	v
dll_luaL_checkinteger	vim/vim/src/if_lua.c	/^lua_Integer (*dll_luaL_checkinteger) (lua_State *L, int numArg);$/;"	v
dll_luaL_checklstring	vim/vim/src/if_lua.c	/^const char *(*dll_luaL_checklstring) (lua_State *L, int numArg, size_t *l);$/;"	v
dll_luaL_checktype	vim/vim/src/if_lua.c	/^void (*dll_luaL_checktype) (lua_State *L, int narg, int t);$/;"	v
dll_luaL_error	vim/vim/src/if_lua.c	/^int (*dll_luaL_error) (lua_State *L, const char *fmt, ...);$/;"	v
dll_luaL_loadbuffer	vim/vim/src/if_lua.c	/^int (*dll_luaL_loadbuffer) (lua_State *L, const char *buff, size_t sz, const char *name);$/;"	v
dll_luaL_loadbufferx	vim/vim/src/if_lua.c	/^int (*dll_luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz, const char *name, const char *mode);$/;"	v
dll_luaL_loadfile	vim/vim/src/if_lua.c	/^int (*dll_luaL_loadfile) (lua_State *L, const char *filename);$/;"	v
dll_luaL_loadfilex	vim/vim/src/if_lua.c	/^int (*dll_luaL_loadfilex) (lua_State *L, const char *filename, const char *mode);$/;"	v
dll_luaL_newstate	vim/vim/src/if_lua.c	/^lua_State *(*dll_luaL_newstate) (void);$/;"	v
dll_luaL_openlib	vim/vim/src/if_lua.c	/^void (*dll_luaL_openlib) (lua_State *L, const char *libname, const luaL_Reg *l, int nup);$/;"	v
dll_luaL_openlibs	vim/vim/src/if_lua.c	/^void (*dll_luaL_openlibs) (lua_State *L);$/;"	v
dll_luaL_optinteger	vim/vim/src/if_lua.c	/^lua_Integer (*dll_luaL_optinteger) (lua_State *L, int nArg, lua_Integer def);$/;"	v
dll_luaL_prepbuffer	vim/vim/src/if_lua.c	/^char *(*dll_luaL_prepbuffer) (luaL_Buffer *B);$/;"	v
dll_luaL_prepbuffsize	vim/vim/src/if_lua.c	/^char *(*dll_luaL_prepbuffsize) (luaL_Buffer *B, size_t sz);$/;"	v
dll_luaL_pushresult	vim/vim/src/if_lua.c	/^void (*dll_luaL_pushresult) (luaL_Buffer *B);$/;"	v
dll_luaL_register	vim/vim/src/if_lua.c	/^void (*dll_luaL_register) (lua_State *L, const char *libname, const luaL_Reg *l);$/;"	v
dll_luaL_setfuncs	vim/vim/src/if_lua.c	/^void (*dll_luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);$/;"	v
dll_luaL_typerror	vim/vim/src/if_lua.c	/^int (*dll_luaL_typerror) (lua_State *L, int narg, const char *tname);$/;"	v
dll_lua_call	vim/vim/src/if_lua.c	/^void (*dll_lua_call) (lua_State *L, int nargs, int nresults);$/;"	v
dll_lua_callk	vim/vim/src/if_lua.c	/^void (*dll_lua_callk) (lua_State *L, int nargs, int nresults, int ctx,$/;"	v
dll_lua_close	vim/vim/src/if_lua.c	/^void       (*dll_lua_close) (lua_State *L);$/;"	v
dll_lua_copy	vim/vim/src/if_lua.c	/^void (*dll_lua_copy) (lua_State *L, int fromidx, int toidx);$/;"	v
dll_lua_createtable	vim/vim/src/if_lua.c	/^void (*dll_lua_createtable) (lua_State *L, int narr, int nrec);$/;"	v
dll_lua_getfield	vim/vim/src/if_lua.c	/^void (*dll_lua_getfield) (lua_State *L, int idx, const char *k);$/;"	v
dll_lua_getglobal	vim/vim/src/if_lua.c	/^void (*dll_lua_getglobal) (lua_State *L, const char *var);$/;"	v
dll_lua_getmetatable	vim/vim/src/if_lua.c	/^int (*dll_lua_getmetatable) (lua_State *L, int objindex);$/;"	v
dll_lua_gettop	vim/vim/src/if_lua.c	/^int (*dll_lua_gettop) (lua_State *L);$/;"	v
dll_lua_isnumber	vim/vim/src/if_lua.c	/^int (*dll_lua_isnumber) (lua_State *L, int idx);$/;"	v
dll_lua_isstring	vim/vim/src/if_lua.c	/^int (*dll_lua_isstring) (lua_State *L, int idx);$/;"	v
dll_lua_newuserdata	vim/vim/src/if_lua.c	/^void *(*dll_lua_newuserdata) (lua_State *L, size_t sz);$/;"	v
dll_lua_next	vim/vim/src/if_lua.c	/^int (*dll_lua_next) (lua_State *L, int idx);$/;"	v
dll_lua_pcall	vim/vim/src/if_lua.c	/^int (*dll_lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);$/;"	v
dll_lua_pcallk	vim/vim/src/if_lua.c	/^int (*dll_lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,$/;"	v
dll_lua_pushboolean	vim/vim/src/if_lua.c	/^void (*dll_lua_pushboolean) (lua_State *L, int b);$/;"	v
dll_lua_pushcclosure	vim/vim/src/if_lua.c	/^void (*dll_lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);$/;"	v
dll_lua_pushfstring	vim/vim/src/if_lua.c	/^const char *(*dll_lua_pushfstring) (lua_State *L, const char *fmt, ...);$/;"	v
dll_lua_pushinteger	vim/vim/src/if_lua.c	/^void (*dll_lua_pushinteger) (lua_State *L, lua_Integer n);$/;"	v
dll_lua_pushlightuserdata	vim/vim/src/if_lua.c	/^void (*dll_lua_pushlightuserdata) (lua_State *L, void *p);$/;"	v
dll_lua_pushlstring	vim/vim/src/if_lua.c	/^void (*dll_lua_pushlstring) (lua_State *L, const char *s, size_t l);$/;"	v
dll_lua_pushnil	vim/vim/src/if_lua.c	/^void (*dll_lua_pushnil) (lua_State *L);$/;"	v
dll_lua_pushnumber	vim/vim/src/if_lua.c	/^void (*dll_lua_pushnumber) (lua_State *L, lua_Number n);$/;"	v
dll_lua_pushstring	vim/vim/src/if_lua.c	/^void (*dll_lua_pushstring) (lua_State *L, const char *s);$/;"	v
dll_lua_pushvalue	vim/vim/src/if_lua.c	/^void (*dll_lua_pushvalue) (lua_State *L, int idx);$/;"	v
dll_lua_rawequal	vim/vim/src/if_lua.c	/^int (*dll_lua_rawequal) (lua_State *L, int idx1, int idx2);$/;"	v
dll_lua_rawget	vim/vim/src/if_lua.c	/^void (*dll_lua_rawget) (lua_State *L, int idx);$/;"	v
dll_lua_rawgeti	vim/vim/src/if_lua.c	/^void (*dll_lua_rawgeti) (lua_State *L, int idx, int n);$/;"	v
dll_lua_rawset	vim/vim/src/if_lua.c	/^void (*dll_lua_rawset) (lua_State *L, int idx);$/;"	v
dll_lua_rawseti	vim/vim/src/if_lua.c	/^void (*dll_lua_rawseti) (lua_State *L, int idx, int n);$/;"	v
dll_lua_remove	vim/vim/src/if_lua.c	/^void (*dll_lua_remove) (lua_State *L, int idx);$/;"	v
dll_lua_replace	vim/vim/src/if_lua.c	/^void (*dll_lua_replace) (lua_State *L, int idx);$/;"	v
dll_lua_rotate	vim/vim/src/if_lua.c	/^void  (*dll_lua_rotate) (lua_State *L, int idx, int n);$/;"	v
dll_lua_setfield	vim/vim/src/if_lua.c	/^void (*dll_lua_setfield) (lua_State *L, int idx, const char *k);$/;"	v
dll_lua_setglobal	vim/vim/src/if_lua.c	/^void (*dll_lua_setglobal) (lua_State *L, const char *var);$/;"	v
dll_lua_setmetatable	vim/vim/src/if_lua.c	/^int (*dll_lua_setmetatable) (lua_State *L, int objindex);$/;"	v
dll_lua_settop	vim/vim/src/if_lua.c	/^void (*dll_lua_settop) (lua_State *L, int idx);$/;"	v
dll_lua_toboolean	vim/vim/src/if_lua.c	/^int (*dll_lua_toboolean) (lua_State *L, int idx);$/;"	v
dll_lua_tointeger	vim/vim/src/if_lua.c	/^lua_Integer (*dll_lua_tointeger) (lua_State *L, int idx);$/;"	v
dll_lua_tointegerx	vim/vim/src/if_lua.c	/^lua_Integer (*dll_lua_tointegerx) (lua_State *L, int idx, int *isnum);$/;"	v
dll_lua_tolstring	vim/vim/src/if_lua.c	/^const char *(*dll_lua_tolstring) (lua_State *L, int idx, size_t *len);$/;"	v
dll_lua_tonumber	vim/vim/src/if_lua.c	/^lua_Number (*dll_lua_tonumber) (lua_State *L, int idx);$/;"	v
dll_lua_tonumberx	vim/vim/src/if_lua.c	/^lua_Number (*dll_lua_tonumberx) (lua_State *L, int idx, int *isnum);$/;"	v
dll_lua_touserdata	vim/vim/src/if_lua.c	/^void *(*dll_lua_touserdata) (lua_State *L, int idx);$/;"	v
dll_lua_type	vim/vim/src/if_lua.c	/^int (*dll_lua_type) (lua_State *L, int idx);$/;"	v
dll_lua_typename	vim/vim/src/if_lua.c	/^const char *(*dll_lua_typename) (lua_State *L, int tp);$/;"	v
dll_luaopen_base	vim/vim/src/if_lua.c	/^int (*dll_luaopen_base) (lua_State *L);$/;"	v
dll_luaopen_debug	vim/vim/src/if_lua.c	/^int (*dll_luaopen_debug) (lua_State *L);$/;"	v
dll_luaopen_io	vim/vim/src/if_lua.c	/^int (*dll_luaopen_io) (lua_State *L);$/;"	v
dll_luaopen_math	vim/vim/src/if_lua.c	/^int (*dll_luaopen_math) (lua_State *L);$/;"	v
dll_luaopen_os	vim/vim/src/if_lua.c	/^int (*dll_luaopen_os) (lua_State *L);$/;"	v
dll_luaopen_package	vim/vim/src/if_lua.c	/^int (*dll_luaopen_package) (lua_State *L);$/;"	v
dll_luaopen_string	vim/vim/src/if_lua.c	/^int (*dll_luaopen_string) (lua_State *L);$/;"	v
dll_luaopen_table	vim/vim/src/if_lua.c	/^int (*dll_luaopen_table) (lua_State *L);$/;"	v
dll_rb_ary_new	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_ary_new) (void);$/;"	v	file:
dll_rb_ary_push	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_ary_push) (VALUE, VALUE);$/;"	v	file:
dll_rb_assoc_new	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_assoc_new) (VALUE, VALUE);$/;"	v	file:
dll_rb_cFalseClass	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cFalseClass;$/;"	v
dll_rb_cFixnum	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cFixnum;$/;"	v
dll_rb_cFloat	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cFloat;$/;"	v
dll_rb_cInteger	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cInteger;$/;"	v
dll_rb_cNilClass	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cNilClass;$/;"	v
dll_rb_cObject	vim/vim/src/if_ruby.c	/^static VALUE *dll_rb_cObject;$/;"	v	file:
dll_rb_cSymbol	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cSymbol;$/;"	v
dll_rb_cTrueClass	vim/vim/src/if_ruby.c	/^VALUE *dll_rb_cTrueClass;$/;"	v
dll_rb_check_type	vim/vim/src/if_ruby.c	/^static void (*dll_rb_check_type) (VALUE,int);$/;"	v	file:
dll_rb_check_typeddata	vim/vim/src/if_ruby.c	/^static void *(*dll_rb_check_typeddata) (VALUE,const rb_data_type_t *);$/;"	v	file:
dll_rb_class_path	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_class_path) (VALUE);$/;"	v	file:
dll_rb_data_object_alloc	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_data_object_alloc) (VALUE, void*, RUBY_DATA_FUNC, RUBY_DATA_FUNC);$/;"	v	file:
dll_rb_data_typed_object_alloc	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_data_typed_object_alloc) (VALUE, void*, const rb_data_type_t *);$/;"	v	file:
dll_rb_data_typed_object_wrap	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_data_typed_object_wrap) (VALUE, void*, const rb_data_type_t *);$/;"	v	file:
dll_rb_define_class_under	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_define_class_under) (VALUE, const char*, VALUE);$/;"	v	file:
dll_rb_define_const	vim/vim/src/if_ruby.c	/^static void (*dll_rb_define_const) (VALUE,const char*,VALUE);$/;"	v	file:
dll_rb_define_global_function	vim/vim/src/if_ruby.c	/^static void (*dll_rb_define_global_function) (const char*,VALUE(*)(),int);$/;"	v	file:
dll_rb_define_method	vim/vim/src/if_ruby.c	/^static void (*dll_rb_define_method) (VALUE,const char*,VALUE(*)(),int);$/;"	v	file:
dll_rb_define_module	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_define_module) (const char*);$/;"	v	file:
dll_rb_define_module_function	vim/vim/src/if_ruby.c	/^static void (*dll_rb_define_module_function) (VALUE,const char*,VALUE(*)(),int);$/;"	v	file:
dll_rb_define_singleton_method	vim/vim/src/if_ruby.c	/^static void (*dll_rb_define_singleton_method) (VALUE,const char*,VALUE(*)(),int);$/;"	v	file:
dll_rb_define_virtual_variable	vim/vim/src/if_ruby.c	/^static void (*dll_rb_define_virtual_variable) (const char*,VALUE(*)(),void(*)());$/;"	v	file:
dll_rb_eArgError	vim/vim/src/if_ruby.c	/^static VALUE *dll_rb_eArgError;$/;"	v	file:
dll_rb_eIndexError	vim/vim/src/if_ruby.c	/^static VALUE *dll_rb_eIndexError;$/;"	v	file:
dll_rb_eRuntimeError	vim/vim/src/if_ruby.c	/^static VALUE *dll_rb_eRuntimeError;$/;"	v	file:
dll_rb_eStandardError	vim/vim/src/if_ruby.c	/^static VALUE *dll_rb_eStandardError;$/;"	v	file:
dll_rb_enc_find	vim/vim/src/if_ruby.c	/^static rb_encoding* (*dll_rb_enc_find) (const char*);$/;"	v	file:
dll_rb_enc_find_index	vim/vim/src/if_ruby.c	/^static int (*dll_rb_enc_find_index) (const char*);$/;"	v	file:
dll_rb_enc_str_new	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_enc_str_new) (const char*, long, rb_encoding*);$/;"	v	file:
dll_rb_errinfo	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_errinfo) (void);$/;"	v	file:
dll_rb_eval_string_protect	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_eval_string_protect) (const char*, int*);$/;"	v	file:
dll_rb_fix2int	vim/vim/src/if_ruby.c	/^static long (*dll_rb_fix2int) (VALUE);$/;"	v	file:
dll_rb_float_new	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_float_new) (double);$/;"	v	file:
dll_rb_gc_writebarrier_unprotect	vim/vim/src/if_ruby.c	/^static void (*dll_rb_gc_writebarrier_unprotect)(VALUE obj);$/;"	v	file:
dll_rb_gc_writebarrier_unprotect_promoted	vim/vim/src/if_ruby.c	/^static void (*dll_rb_gc_writebarrier_unprotect_promoted)(VALUE);$/;"	v	file:
dll_rb_global_variable	vim/vim/src/if_ruby.c	/^static void (*dll_rb_global_variable) (VALUE*);$/;"	v	file:
dll_rb_hash_aset	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_hash_aset) (VALUE, VALUE, VALUE);$/;"	v	file:
dll_rb_hash_new	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_hash_new) (void);$/;"	v	file:
dll_rb_ia64_bsp	vim/vim/src/if_ruby.c	/^static void * (*dll_rb_ia64_bsp) (void);$/;"	v	file:
dll_rb_inspect	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_inspect) (VALUE);$/;"	v	file:
dll_rb_int2big	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_int2big)(SIGNED_VALUE);$/;"	v	file:
dll_rb_int2inum	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_int2inum) (long);$/;"	v	file:
dll_rb_lastline_get	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_lastline_get) (void);$/;"	v	file:
dll_rb_lastline_set	vim/vim/src/if_ruby.c	/^static void (*dll_rb_lastline_set) (VALUE);$/;"	v	file:
dll_rb_load_protect	vim/vim/src/if_ruby.c	/^static void (*dll_rb_load_protect) (VALUE, int, int*);$/;"	v	file:
dll_rb_num2int	vim/vim/src/if_ruby.c	/^static long (*dll_rb_num2int) (VALUE);$/;"	v	file:
dll_rb_num2long	vim/vim/src/if_ruby.c	/^static long (*dll_rb_num2long) (VALUE);$/;"	v	file:
dll_rb_num2uint	vim/vim/src/if_ruby.c	/^static unsigned long (*dll_rb_num2uint) (VALUE);$/;"	v	file:
dll_rb_num2ulong	vim/vim/src/if_ruby.c	/^static unsigned long (*dll_rb_num2ulong) (VALUE);$/;"	v	file:
dll_rb_obj_alloc	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_obj_alloc) (VALUE);$/;"	v	file:
dll_rb_obj_as_string	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_obj_as_string) (VALUE);$/;"	v	file:
dll_rb_obj_id	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_obj_id) (VALUE);$/;"	v	file:
dll_rb_raise	vim/vim/src/if_ruby.c	/^static void (*dll_rb_raise) (VALUE, const char*, ...);$/;"	v	file:
dll_rb_require	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_require) (const char*);$/;"	v	file:
dll_rb_sprintf	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_sprintf) (const char*, ...);$/;"	v	file:
dll_rb_stdout	vim/vim/src/if_ruby.c	/^static VALUE *dll_rb_stdout;$/;"	v	file:
dll_rb_str2cstr	vim/vim/src/if_ruby.c	/^static char *(*dll_rb_str2cstr) (VALUE,int*);$/;"	v	file:
dll_rb_str_cat	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_str_cat) (VALUE, const char*, long);$/;"	v	file:
dll_rb_str_concat	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_str_concat) (VALUE, VALUE);$/;"	v	file:
dll_rb_str_new	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_str_new) (const char*, long);$/;"	v	file:
dll_rb_str_new2	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_str_new2) (const char*);$/;"	v	file:
dll_rb_str_new_cstr	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_str_new_cstr) (const char*);$/;"	v	file:
dll_rb_string_value	vim/vim/src/if_ruby.c	/^static VALUE (*dll_rb_string_value) (volatile VALUE*);$/;"	v	file:
dll_rb_string_value_ptr	vim/vim/src/if_ruby.c	/^static char * (*dll_rb_string_value_ptr) (volatile VALUE*);$/;"	v	file:
dll_rb_w32_snprintf	vim/vim/src/if_ruby.c	/^static int (*dll_rb_w32_snprintf)(char*, size_t, const char*, ...);$/;"	v	file:
dll_ruby_errinfo	vim/vim/src/if_ruby.c	/^static VALUE *dll_ruby_errinfo;$/;"	v	file:
dll_ruby_init	vim/vim/src/if_ruby.c	/^static void (*dll_ruby_init) (void);$/;"	v	file:
dll_ruby_init_loadpath	vim/vim/src/if_ruby.c	/^static void (*dll_ruby_init_loadpath) (void);$/;"	v	file:
dll_ruby_init_stack	vim/vim/src/if_ruby.c	/^static void (*dll_ruby_init_stack)(VALUE*);$/;"	v	file:
dll_ruby_init_stack	vim/vim/src/if_ruby.c	/^static void (*dll_ruby_init_stack)(VALUE*, void*);$/;"	v	file:
dll_ruby_script	vim/vim/src/if_ruby.c	/^static void (*dll_ruby_script) (const char*);$/;"	v	file:
dll_ruby_sysinit	vim/vim/src/if_ruby.c	/^static void (*dll_ruby_sysinit) (int*, char***);$/;"	v	file:
dll_scheme_add_global	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_add_global)(const char *name, Scheme_Object *val,$/;"	v	file:
dll_scheme_add_global_symbol	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_add_global_symbol)(Scheme_Object *name,$/;"	v	file:
dll_scheme_apply	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_apply)(Scheme_Object *rator, int num_rands,$/;"	v	file:
dll_scheme_basic_env	vim/vim/src/if_mzsch.c	/^static Scheme_Env *(*dll_scheme_basic_env)(void);$/;"	v	file:
dll_scheme_builtin_value	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_builtin_value)(const char *name);$/;"	v	file:
dll_scheme_byte_string_to_char_string	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_byte_string_to_char_string)(Scheme_Object *s);$/;"	v	file:
dll_scheme_char_string_to_byte_string	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_char_string_to_byte_string)$/;"	v	file:
dll_scheme_char_string_to_path	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_char_string_to_path)$/;"	v	file:
dll_scheme_check_threads	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_check_threads)(void);$/;"	v	file:
dll_scheme_close_input_port	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_close_input_port)(Scheme_Object *port);$/;"	v	file:
dll_scheme_console_output_ptr	vim/vim/src/if_mzsch.c	/^static void (**dll_scheme_console_output_ptr)(char *str, OUTPUT_LEN_TYPE len);$/;"	v	file:
dll_scheme_console_printf_ptr	vim/vim/src/if_mzsch.c	/^static void (**dll_scheme_console_printf_ptr)(char *str, ...);$/;"	v	file:
dll_scheme_count_lines	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_count_lines)(Scheme_Object *port);$/;"	v	file:
dll_scheme_current_config	vim/vim/src/if_mzsch.c	/^static Scheme_Config *(*dll_scheme_current_config)(void);$/;"	v	file:
dll_scheme_current_continuation_marks	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_current_continuation_marks)(Scheme_Object *prompt_tag);$/;"	v	file:
dll_scheme_current_continuation_marks	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_current_continuation_marks)(void);$/;"	v	file:
dll_scheme_current_thread_ptr	vim/vim/src/if_mzsch.c	/^static Scheme_Thread **dll_scheme_current_thread_ptr;$/;"	v	file:
dll_scheme_display	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_display)(Scheme_Object *obj, Scheme_Object *port);$/;"	v	file:
dll_scheme_display_to_string	vim/vim/src/if_mzsch.c	/^static char *(*dll_scheme_display_to_string)(Scheme_Object *obj, OUTPUT_LEN_TYPE *len);$/;"	v	file:
dll_scheme_do_eval	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_do_eval)(Scheme_Object *obj,$/;"	v	file:
dll_scheme_dont_gc_ptr	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_dont_gc_ptr)(void *p);$/;"	v	file:
dll_scheme_dynamic_wind	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_dynamic_wind)(void (*pre)(void *), Scheme_Object *(* volatile act)(void *), void (* volatile post)(void *), Scheme_Object *(*jmp_handler)(void *), void * volatile data);$/;"	v	file:
dll_scheme_embedded_load	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_embedded_load)(intptr_t len, const char *s, int predefined);$/;"	v	file:
dll_scheme_eof	vim/vim/src/if_mzsch.c	/^static Scheme_Object *dll_scheme_eof;$/;"	v	file:
dll_scheme_eq	vim/vim/src/if_mzsch.c	/^static int (*dll_scheme_eq)(Scheme_Object *obj1, Scheme_Object *obj2);$/;"	v	file:
dll_scheme_eval	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_eval)(Scheme_Object *obj, Scheme_Env *env);$/;"	v	file:
dll_scheme_eval_string	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_eval_string)(const char *str,$/;"	v	file:
dll_scheme_eval_string_all	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_eval_string_all)(const char *str,$/;"	v	file:
dll_scheme_external_get_thread_local_variables	vim/vim/src/if_mzsch.c	/^static Thread_Local_Variables *(*dll_scheme_external_get_thread_local_variables)(void);$/;"	v	file:
dll_scheme_false	vim/vim/src/if_mzsch.c	/^static Scheme_Object *dll_scheme_false;$/;"	v	file:
dll_scheme_finish_primitive_module	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_finish_primitive_module)(Scheme_Env *env);$/;"	v	file:
dll_scheme_format	vim/vim/src/if_mzsch.c	/^static char *(*dll_scheme_format)(char *format, int flen, int argc,$/;"	v	file:
dll_scheme_format_utf8	vim/vim/src/if_mzsch.c	/^static char *(*dll_scheme_format_utf8)(char *format, int flen, int argc,$/;"	v	file:
dll_scheme_free_immobile_box	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_free_immobile_box)(void **b);$/;"	v	file:
dll_scheme_gc_ptr_ok	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_gc_ptr_ok)(void *p);$/;"	v	file:
dll_scheme_get_param	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_get_param)(Scheme_Config *c, int pos);$/;"	v	file:
dll_scheme_get_sized_byte_string_output	vim/vim/src/if_mzsch.c	/^static char *(*dll_scheme_get_sized_byte_string_output)(Scheme_Object *,$/;"	v	file:
dll_scheme_get_sized_string_output	vim/vim/src/if_mzsch.c	/^static char *(*dll_scheme_get_sized_string_output)(Scheme_Object *,$/;"	v	file:
dll_scheme_hash_get	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_hash_get)(Scheme_Hash_Table *table,$/;"	v	file:
dll_scheme_hash_set	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_hash_set)(Scheme_Hash_Table *table,$/;"	v	file:
dll_scheme_init_collection_paths	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_init_collection_paths)(Scheme_Env *global_env, Scheme_Object *extra_dirs);$/;"	v	file:
dll_scheme_intern_symbol	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_intern_symbol)(const char *name);$/;"	v	file:
dll_scheme_lookup_global	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_lookup_global)(Scheme_Object *symbol,$/;"	v	file:
dll_scheme_main_setup	vim/vim/src/if_mzsch.c	/^static int (*dll_scheme_main_setup)(int no_auto_statics, Scheme_Env_Main _main, int argc, char **argv);$/;"	v	file:
dll_scheme_make_byte_string	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_byte_string)(const char *chars);$/;"	v	file:
dll_scheme_make_byte_string_output_port	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_byte_string_output_port)();$/;"	v	file:
dll_scheme_make_closed_prim_w_arity	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_closed_prim_w_arity)$/;"	v	file:
dll_scheme_make_double	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_double)(double d);$/;"	v	file:
dll_scheme_make_hash_table	vim/vim/src/if_mzsch.c	/^static Scheme_Hash_Table *(*dll_scheme_make_hash_table)(int type);$/;"	v	file:
dll_scheme_make_integer_value	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_integer_value)(long i);$/;"	v	file:
dll_scheme_make_pair	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_pair)(Scheme_Object *car,$/;"	v	file:
dll_scheme_make_path	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_path)(const char *chars);$/;"	v	file:
dll_scheme_make_prim_w_arity	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_prim_w_arity)(Scheme_Prim *prim,$/;"	v	file:
dll_scheme_make_sized_byte_string	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_sized_byte_string)(char *chars,$/;"	v	file:
dll_scheme_make_string	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_string)(const char *chars);$/;"	v	file:
dll_scheme_make_string_output_port	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_string_output_port)();$/;"	v	file:
dll_scheme_make_struct_instance	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_struct_instance)(Scheme_Object *stype,$/;"	v	file:
dll_scheme_make_struct_names	vim/vim/src/if_mzsch.c	/^static Scheme_Object **(*dll_scheme_make_struct_names)(Scheme_Object *base,$/;"	v	file:
dll_scheme_make_struct_type	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_struct_type)(Scheme_Object *base,$/;"	v	file:
dll_scheme_make_struct_values	vim/vim/src/if_mzsch.c	/^static Scheme_Object **(*dll_scheme_make_struct_values)($/;"	v	file:
dll_scheme_make_type	vim/vim/src/if_mzsch.c	/^static Scheme_Type (*dll_scheme_make_type)(const char *name);$/;"	v	file:
dll_scheme_make_vector	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_make_vector)(int size,$/;"	v	file:
dll_scheme_malloc_fail_ok	vim/vim/src/if_mzsch.c	/^static void *(*dll_scheme_malloc_fail_ok)(void *(*f)(size_t), size_t);$/;"	v	file:
dll_scheme_malloc_immobile_box	vim/vim/src/if_mzsch.c	/^static void **(*dll_scheme_malloc_immobile_box)(void *p);$/;"	v	file:
dll_scheme_namespace_require	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_namespace_require)(Scheme_Object *req);$/;"	v	file:
dll_scheme_notify_multithread_ptr	vim/vim/src/if_mzsch.c	/^static void (**dll_scheme_notify_multithread_ptr)(int on);$/;"	v	file:
dll_scheme_null	vim/vim/src/if_mzsch.c	/^static Scheme_Object *dll_scheme_null;$/;"	v	file:
dll_scheme_open_input_file	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_open_input_file)(const char *name,$/;"	v	file:
dll_scheme_primitive_module	vim/vim/src/if_mzsch.c	/^static Scheme_Env *(*dll_scheme_primitive_module)(Scheme_Object *name,$/;"	v	file:
dll_scheme_proper_list_length	vim/vim/src/if_mzsch.c	/^static int (*dll_scheme_proper_list_length)(Scheme_Object *list);$/;"	v	file:
dll_scheme_raise	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_raise)(Scheme_Object *exn);$/;"	v	file:
dll_scheme_read	vim/vim/src/if_mzsch.c	/^static Scheme_Object *(*dll_scheme_read)(Scheme_Object *port);$/;"	v	file:
dll_scheme_register_embedded_load	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_register_embedded_load)(intptr_t len, const char *s);$/;"	v	file:
dll_scheme_register_static	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_register_static)(void *ptr, long size);$/;"	v	file:
dll_scheme_register_tls_space	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_register_tls_space)(void *tls_space, int _tls_index);$/;"	v	file:
dll_scheme_set_collects_path	vim/vim/src/if_mzsch.c	/^static void *(*dll_scheme_set_collects_path)(Scheme_Object *p);$/;"	v	file:
dll_scheme_set_config_path	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_set_config_path)(Scheme_Object *p);$/;"	v	file:
dll_scheme_set_param	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_set_param)(Scheme_Config *c, int pos,$/;"	v	file:
dll_scheme_set_stack_base	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_set_stack_base)(void *base, int no_auto_statics);$/;"	v	file:
dll_scheme_signal_error	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_signal_error)(const char *msg, ...);$/;"	v	file:
dll_scheme_true	vim/vim/src/if_mzsch.c	/^static Scheme_Object *dll_scheme_true;$/;"	v	file:
dll_scheme_void	vim/vim/src/if_mzsch.c	/^static Scheme_Object *dll_scheme_void;$/;"	v	file:
dll_scheme_wrong_type	vim/vim/src/if_mzsch.c	/^static void (*dll_scheme_wrong_type)(const char *name, const char *expected,$/;"	v	file:
dlopen	vim/vim/src/auto/configure	/^				dlopen();$/;"	f
dlopen	vim/vim/src/auto/configure	/^		dlopen();$/;"	f
dlsym	vim/vim/src/auto/configure	/^				dlsym();$/;"	f
dlsym	vim/vim/src/auto/configure	/^		dlsym();$/;"	f
dname	vim/vim/src/structs.h	/^    char_u	*dname;		    \/* Displayed Name ("name" without '&') *\/$/;"	m	struct:VimMenu	access:public
dnd_targets	vim/vim/src/gui_gtk_x11.c	/^static const GtkTargetEntry dnd_targets[] =$/;"	v	file:
dnd_yank_drag_data	vim/vim/src/ops.c	/^dnd_yank_drag_data(char_u *str, long len)$/;"	f	signature:(char_u *str, long len)
do_Lower	vim/vim/src/regexp.c	/^do_Lower(int *d, int c)$/;"	f	file:	signature:(int *d, int c)
do_Lower	vim/vim/src/regexp.c	/^static fptr_T do_Lower(int *, int);$/;"	p	file:	signature:(int *, int)
do_Upper	vim/vim/src/regexp.c	/^do_Upper(int *d, int c)$/;"	f	file:	signature:(int *d, int c)
do_Upper	vim/vim/src/regexp.c	/^static fptr_T do_Upper(int *, int);$/;"	p	file:	signature:(int *, int)
do_addsub	vim/vim/src/ops.c	/^do_addsub($/;"	f	file:	signature:( int op_type, pos_T *pos, int length, linenr_T Prenum1)
do_addsub	vim/vim/src/ops.c	/^static int	do_addsub(int op_type, pos_T *pos, int length, linenr_T Prenum1);$/;"	p	file:	signature:(int op_type, pos_T *pos, int length, linenr_T Prenum1)
do_all	vim/vim/src/ex_cmds.c	/^    int	do_all;		\/* do multiple substitutions per line *\/$/;"	m	struct:__anon218	file:	access:public
do_arg_all	vim/vim/src/buffer.c	/^do_arg_all($/;"	f	signature:( int count, int forceit, int keep_tabs)
do_argfile	vim/vim/src/ex_cmds2.c	/^do_argfile(exarg_T *eap, int argn)$/;"	f	signature:(exarg_T *eap, int argn)
do_arglist	vim/vim/src/ex_cmds2.c	/^do_arglist($/;"	f	file:	signature:( char_u *str, int what, int after UNUSED)
do_arglist	vim/vim/src/ex_cmds2.c	/^static int	do_arglist(char_u *str, int what, int after);$/;"	p	file:	signature:(char_u *str, int what, int after)
do_ascii	vim/vim/src/ex_cmds.c	/^do_ascii(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
do_ask	vim/vim/src/ex_cmds.c	/^    int	do_ask;		\/* ask for confirmation *\/$/;"	m	struct:__anon218	file:	access:public
do_augroup	vim/vim/src/fileio.c	/^do_augroup(char_u *arg, int del_group)$/;"	f	signature:(char_u *arg, int del_group)
do_autochdir	vim/vim/src/buffer.c	/^do_autochdir(void)$/;"	f	signature:(void)
do_autocmd	vim/vim/src/fileio.c	/^do_autocmd(char_u *arg_in, int forceit)$/;"	f	signature:(char_u *arg_in, int forceit)
do_autocmd_event	vim/vim/src/fileio.c	/^do_autocmd_event($/;"	f	file:	signature:( event_T event, char_u *pat, int nested, char_u *cmd, int forceit, int group)
do_autocmd_event	vim/vim/src/fileio.c	/^static int do_autocmd_event(event_T event, char_u *pat, int nested, char_u *cmd, int forceit, int group);$/;"	p	file:	signature:(event_T event, char_u *pat, int nested, char_u *cmd, int forceit, int group)
do_bang	vim/vim/src/ex_cmds.c	/^do_bang($/;"	f	signature:( int addr_count, exarg_T *eap, int forceit, int do_in, int do_out)
do_browse	vim/vim/src/message.c	/^do_browse($/;"	f	signature:( int flags, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, buf_T *buf)
do_bufdel	vim/vim/src/buffer.c	/^do_bufdel($/;"	f	signature:( int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit)
do_buffer	vim/vim/src/buffer.c	/^do_buffer($/;"	f	signature:( int action, int start, int dir, int count, int forceit)
do_c_expr_indent	vim/vim/src/misc1.c	/^do_c_expr_indent(void)$/;"	f	signature:(void)
do_check_cursorbind	vim/vim/src/move.c	/^do_check_cursorbind(void)$/;"	f	signature:(void)
do_check_scrollbind	vim/vim/src/normal.c	/^do_check_scrollbind(int check)$/;"	f	signature:(int check)
do_checkbacktracelevel	vim/vim/src/ex_cmds2.c	/^do_checkbacktracelevel(void)$/;"	f	file:	signature:(void)
do_checkbacktracelevel	vim/vim/src/ex_cmds2.c	/^static void do_checkbacktracelevel(void);$/;"	p	file:	signature:(void)
do_choice	vim/vim/src/gui_xmdlg.c	/^do_choice(Widget w,$/;"	f	file:	signature:(Widget w, SharedFontSelData *data, XmListCallbackStruct *call_data, enum ListSpecifier which)
do_clear_sb_text	vim/vim/src/message.c	/^static sb_clear_T do_clear_sb_text = SB_CLEAR_NONE;$/;"	v	file:
do_cmdline	vim/vim/src/ex_docmd.c	/^do_cmdline($/;"	f	signature:( char_u *cmdline, char_u *(*fgetline)(int, void *, int), void *cookie, int flags)
do_cmdline_cmd	vim/vim/src/ex_docmd.c	/^do_cmdline_cmd(char_u *cmd)$/;"	f	signature:(char_u *cmd)
do_control	vim/vim/src/libvterm/src/parser.c	/^static void do_control(VTerm *vt, unsigned char control)$/;"	f	file:	signature:(VTerm *vt, unsigned char control)
do_count	vim/vim/src/ex_cmds.c	/^    int	do_count;	\/* count only *\/$/;"	m	struct:__anon218	file:	access:public
do_cscope_general	vim/vim/src/if_cscope.c	/^do_cscope_general($/;"	f	file:	signature:( exarg_T *eap, int make_split UNUSED)
do_cscope_general	vim/vim/src/if_cscope.c	/^static void	    do_cscope_general(exarg_T *eap, int make_split);$/;"	p	file:	signature:(exarg_T *eap, int make_split)
do_debug	vim/vim/src/ex_cmds2.c	/^do_debug(char_u *cmd)$/;"	f	signature:(char_u *cmd)
do_dec_mode	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static void do_dec_mode(int mode, BoolQuery val, const char *name)$/;"	f	file:	signature:(int mode, BoolQuery val, const char *name)
do_dialog	vim/vim/src/message.c	/^do_dialog($/;"	f	signature:( int type UNUSED, char_u *title UNUSED, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield UNUSED, int ex_cmd)
do_dialog	vim/vim/src/vim.h	2156;"	d
do_digraph	vim/vim/src/digraph.c	/^do_digraph(int c)$/;"	f	signature:(int c)
do_doautocmd	vim/vim/src/fileio.c	/^do_doautocmd($/;"	f	signature:( char_u *arg, int do_msg, int *did_something)
do_ecmd	vim/vim/src/ex_cmds.c	/^do_ecmd($/;"	f	signature:( int fnum, char_u *ffname, char_u *sfname, exarg_T *eap, linenr_T newlnum, int flags, win_T *oldwin)
do_ecmd_cmd	vim/vim/src/ex_cmds.h	/^    char_u	*do_ecmd_cmd;	\/* +command arg to be used in edited file *\/$/;"	m	struct:exarg	access:public
do_ecmd_lnum	vim/vim/src/ex_cmds.h	/^    linenr_T	do_ecmd_lnum;	\/* the line number in an edited file *\/$/;"	m	struct:exarg	access:public
do_err_output	vim/vim/src/if_mzsch.c	/^do_err_output(char *mesg)$/;"	f	file:	signature:(char *mesg)
do_error	vim/vim/src/ex_cmds.c	/^    int	do_error;	\/* if false, ignore errors *\/$/;"	m	struct:__anon218	file:	access:public
do_errthrow	vim/vim/src/ex_eval.c	/^do_errthrow(struct condstack *cstack, char_u *cmdname)$/;"	f	signature:(struct condstack *cstack, char_u *cmdname)
do_eval	vim/vim/src/if_mzsch.c	/^do_eval(void *s, int noargc UNUSED, Scheme_Object **noargv UNUSED)$/;"	f	file:	signature:(void *s, int noargc UNUSED, Scheme_Object **noargv UNUSED)
do_eval	vim/vim/src/if_mzsch.c	/^static Scheme_Object *do_eval(void *, int noargc, Scheme_Object **noargv);$/;"	p	file:	signature:(void *, int noargc, Scheme_Object **noargv)
do_execreg	vim/vim/src/ops.c	/^do_execreg($/;"	f	signature:( int regname, int colon, int addcr, int silent)
do_exedit	vim/vim/src/ex_docmd.c	/^do_exedit($/;"	f	signature:( exarg_T *eap, win_T *old_curwin)
do_exmap	vim/vim/src/ex_docmd.c	/^do_exmap(exarg_T *eap, int isabbrev)$/;"	f	file:	signature:(exarg_T *eap, int isabbrev)
do_exmap	vim/vim/src/ex_docmd.c	/^static void	do_exmap(exarg_T *eap, int isabbrev);$/;"	p	file:	signature:(exarg_T *eap, int isabbrev)
do_exmode	vim/vim/src/ex_docmd.c	/^do_exmode($/;"	f	signature:( int improved)
do_filter	vim/vim/src/ex_cmds.c	/^do_filter($/;"	f	file:	signature:( linenr_T line1, linenr_T line2, exarg_T *eap, char_u *cmd, int do_in, int do_out)
do_filter	vim/vim/src/ex_cmds.c	/^static void do_filter(linenr_T line1, linenr_T line2, exarg_T *eap, char_u *cmd, int do_in, int do_out);$/;"	p	file:	signature:(linenr_T line1, linenr_T line2, exarg_T *eap, char_u *cmd, int do_in, int do_out)
do_finish	vim/vim/src/ex_cmds2.c	/^do_finish(exarg_T *eap, int reanimate)$/;"	f	signature:(exarg_T *eap, int reanimate)
do_fixdel	vim/vim/src/ex_cmds.c	/^do_fixdel(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
do_flush	vim/vim/src/if_mzsch.c	/^do_flush(void)$/;"	f	file:	signature:(void)
do_flush	vim/vim/src/if_mzsch.c	/^static void do_flush(void);$/;"	p	file:	signature:(void)
do_helptags	vim/vim/src/ex_cmds.c	/^do_helptags(char_u *dirname, int add_help_tags)$/;"	f	file:	signature:(char_u *dirname, int add_help_tags)
do_highlight	vim/vim/src/syntax.c	/^do_highlight($/;"	f	signature:( char_u *line, int forceit, int init)
do_ic	vim/vim/src/ex_cmds.c	/^    int	do_ic;		\/* ignore case flag *\/$/;"	m	struct:__anon218	file:	access:public
do_in_path	vim/vim/src/ex_cmds2.c	/^do_in_path($/;"	f	signature:( char_u *path, char_u *name, int flags, void (*callback)(char_u *fname, void *ck), void *cookie)
do_in_path_and_pp	vim/vim/src/ex_cmds2.c	/^do_in_path_and_pp($/;"	f	file:	signature:( char_u *path, char_u *name, int flags, void (*callback)(char_u *fname, void *ck), void *cookie)
do_in_runtimepath	vim/vim/src/ex_cmds2.c	/^do_in_runtimepath($/;"	f	signature:( char_u *name, int flags, void (*callback)(char_u *fname, void *ck), void *cookie)
do_inits	vim/vim/src/dosinst.h	/^do_inits(char **argv)$/;"	f	signature:(char **argv)
do_insert_char_pre	vim/vim/src/edit.c	/^do_insert_char_pre(int c)$/;"	f	file:	signature:(int c)
do_insert_char_pre	vim/vim/src/edit.c	/^static char_u *do_insert_char_pre(int c);$/;"	p	file:	signature:(int c)
do_intrnl_output	vim/vim/src/if_mzsch.c	/^do_intrnl_output(char *mesg, int error)$/;"	f	file:	signature:(char *mesg, int error)
do_intro_line	vim/vim/src/version.c	/^do_intro_line($/;"	f	file:	signature:( int row, char_u *mesg, int add_version, int attr)
do_intro_line	vim/vim/src/version.c	/^static void do_intro_line(int row, char_u *mesg, int add_version, int attr);$/;"	p	file:	signature:(int row, char_u *mesg, int add_version, int attr)
do_intthrow	vim/vim/src/ex_eval.c	/^do_intthrow(struct condstack *cstack)$/;"	f	signature:(struct condstack *cstack)
do_join	vim/vim/src/ops.c	/^do_join($/;"	f	signature:( long count, int insert_space, int save_undo, int use_formatoptions UNUSED, int setmark)
do_list	vim/vim/src/ex_cmds.c	/^    int	do_list;	\/* list last line with subs. *\/$/;"	m	struct:__anon218	file:	access:public
do_load	vim/vim/src/if_mzsch.c	/^do_load(void *data, int noargc UNUSED, Scheme_Object **noargv UNUSED)$/;"	f	file:	signature:(void *data, int noargc UNUSED, Scheme_Object **noargv UNUSED)
do_load	vim/vim/src/if_mzsch.c	/^static Scheme_Object *do_load(void *, int noargc, Scheme_Object **noargv);$/;"	p	file:	signature:(void *, int noargc, Scheme_Object **noargv)
do_lock_var	vim/vim/src/eval.c	/^do_lock_var($/;"	f	file:	signature:( lval_T *lp, char_u *name_end, int deep, int lock)
do_lock_var	vim/vim/src/eval.c	/^static int do_lock_var(lval_T *lp, char_u *name_end, int deep, int lock);$/;"	p	file:	signature:(lval_T *lp, char_u *name_end, int deep, int lock)
do_lower	vim/vim/src/regexp.c	/^do_lower(int *d, int c)$/;"	f	file:	signature:(int *d, int c)
do_lower	vim/vim/src/regexp.c	/^static fptr_T do_lower(int *, int);$/;"	p	file:	signature:(int *, int)
do_map	vim/vim/src/getchar.c	/^do_map($/;"	f	signature:( int maptype, char_u *arg, int mode, int abbrev)
do_marks	vim/vim/src/mark.c	/^do_marks(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
do_mnemonic	vim/vim/src/gui_motif.c	/^do_mnemonic(Widget w, unsigned int keycode)$/;"	f	file:	signature:(Widget w, unsigned int keycode)
do_modelines	vim/vim/src/buffer.c	/^do_modelines(int flags)$/;"	f	signature:(int flags)
do_more_prompt	vim/vim/src/message.c	/^do_more_prompt(int typed_char)$/;"	f	file:	signature:(int typed_char)
do_more_prompt	vim/vim/src/message.c	/^static int do_more_prompt(int typed_char);$/;"	p	file:	signature:(int typed_char)
do_mouse	vim/vim/src/normal.c	/^do_mouse($/;"	f	signature:( oparg_T *oap, int c, int dir, long count, int fixindent)
do_move	vim/vim/src/ex_cmds.c	/^do_move(linenr_T line1, linenr_T line2, linenr_T dest)$/;"	f	signature:(linenr_T line1, linenr_T line2, linenr_T dest)
do_mzeval	vim/vim/src/if_mzsch.c	/^do_mzeval(char_u *str, typval_T *rettv)$/;"	f	signature:(char_u *str, typval_T *rettv)
do_mzscheme_command	vim/vim/src/if_mzsch.c	/^do_mzscheme_command(exarg_T *eap, void *data, Scheme_Closed_Prim *what)$/;"	f	file:	signature:(exarg_T *eap, void *data, Scheme_Closed_Prim *what)
do_mzscheme_command	vim/vim/src/if_mzsch.c	/^static int do_mzscheme_command(exarg_T *, void *, Scheme_Closed_Prim *what);$/;"	p	file:	signature:(exarg_T *, void *, Scheme_Closed_Prim *what)
do_number	vim/vim/src/ex_cmds.c	/^    int	do_number;	\/* list last line with line nr*\/$/;"	m	struct:__anon218	file:	access:public
do_nv_ident	vim/vim/src/normal.c	/^do_nv_ident(int c1, int c2)$/;"	f	signature:(int c1, int c2)
do_one_arg	vim/vim/src/ex_cmds2.c	/^do_one_arg(char_u *str)$/;"	f	file:	signature:(char_u *str)
do_one_arg	vim/vim/src/ex_cmds2.c	/^static char_u	*do_one_arg(char_u *str);$/;"	p	file:	signature:(char_u *str)
do_one_cmd	vim/vim/src/ex_docmd.c	/^do_one_cmd($/;"	f	file:	signature:( char_u **cmdlinep, int sourcing, struct condstack *cstack, char_u *(*fgetline)(int, void *, int), void *cookie)
do_one_cmd	vim/vim/src/ex_docmd.c	/^static char_u	*do_one_cmd(char_u **, int, char_u *(*fgetline)(int, void *, int), void *cookie);$/;"	p	file:	signature:(char_u **, int, char_u *(*fgetline)(int, void *, int), void *cookie)
do_one_cmd	vim/vim/src/ex_docmd.c	/^static char_u	*do_one_cmd(char_u **, int, struct condstack *, char_u *(*fgetline)(int, void *, int), void *cookie);$/;"	p	file:	signature:(char_u **, int, struct condstack *, char_u *(*fgetline)(int, void *, int), void *cookie)
do_outofmem_msg	vim/vim/src/misc2.c	/^do_outofmem_msg(long_u size)$/;"	f	signature:(long_u size)
do_output	vim/vim/src/if_mzsch.c	/^do_output(char *mesg, OUTPUT_LEN_TYPE len UNUSED)$/;"	f	file:	signature:(char *mesg, OUTPUT_LEN_TYPE len UNUSED)
do_output	vim/vim/src/if_mzsch.c	/^static void do_output(char *mesg, OUTPUT_LEN_TYPE len);$/;"	p	file:	signature:(char *mesg, OUTPUT_LEN_TYPE len)
do_pending_operator	vim/vim/src/normal.c	/^do_pending_operator(cmdarg_T *cap, int old_col, int gui_yank)$/;"	f	signature:(cmdarg_T *cap, int old_col, int gui_yank)
do_perror	vim/vim/src/message.c	/^do_perror(char *msg)$/;"	f	signature:(char *msg)
do_print	vim/vim/src/ex_cmds.c	/^    int	do_print;	\/* print last line with subs. *\/$/;"	m	struct:__anon218	file:	access:public
do_printf	vim/vim/src/if_mzsch.c	/^do_printf(char *format, ...)$/;"	f	file:	signature:(char *format, ...)
do_printf	vim/vim/src/if_mzsch.c	/^static void do_printf(char *format, ...);$/;"	p	file:	signature:(char *format, ...)
do_profiling	vim/vim/src/globals.h	/^EXTERN int	do_profiling INIT(= PROF_NONE);	\/* PROF_ values *\/$/;"	v
do_put	vim/vim/src/ops.c	/^do_put($/;"	f	signature:( int regname, int dir, long count, int flags)
do_py3eval	vim/vim/src/if_python3.c	/^do_py3eval (char_u *str, typval_T *rettv)$/;"	f	signature:(char_u *str, typval_T *rettv)
do_pyeval	vim/vim/src/if_python.c	/^do_pyeval (char_u *str, typval_T *rettv)$/;"	f	signature:(char_u *str, typval_T *rettv)
do_record	vim/vim/src/ops.c	/^do_record(int c)$/;"	f	signature:(int c)
do_redraw	vim/vim/src/globals.h	/^EXTERN int	do_redraw INIT(= FALSE);    \/* extra redraw once *\/$/;"	v
do_resize	vim/vim/src/os_unix.c	/^static volatile int do_resize = FALSE;$/;"	v	file:
do_return	vim/vim/src/userfunc.c	/^do_return($/;"	f	signature:( exarg_T *eap, int reanimate, int is_cmd, void *rettv)
do_search	vim/vim/src/search.c	/^do_search($/;"	f	signature:( oparg_T *oap, int dirc, char_u *pat, long count, int options, proftime_T *tm, int *timed_out)
do_searchpair	vim/vim/src/evalfunc.c	/^do_searchpair($/;"	f	signature:( char_u *spat, char_u *mpat, char_u *epat, int dir, char_u *skip, int flags, pos_T *match_pos, linenr_T lnum_stop, long time_limit UNUSED)
do_set	vim/vim/src/option.c	/^do_set($/;"	f	signature:( char_u *arg, int opt_flags)
do_set_mnemonics	vim/vim/src/gui_motif.c	/^do_set_mnemonics(int enable)$/;"	f	file:	signature:(int enable)
do_set_mnemonics	vim/vim/src/gui_motif.c	/^static void do_set_mnemonics(int enable);$/;"	p	file:	signature:(int enable)
do_setdebugtracelevel	vim/vim/src/ex_cmds2.c	/^do_setdebugtracelevel(char_u *arg)$/;"	f	file:	signature:(char_u *arg)
do_setdebugtracelevel	vim/vim/src/ex_cmds2.c	/^static void do_setdebugtracelevel(char_u *arg);$/;"	p	file:	signature:(char_u *arg)
do_shell	vim/vim/src/ex_cmds.c	/^do_shell($/;"	f	signature:( char_u *cmd, int flags)
do_showbacktrace	vim/vim/src/ex_cmds2.c	/^do_showbacktrace(char_u *cmd)$/;"	f	file:	signature:(char_u *cmd)
do_showbacktrace	vim/vim/src/ex_cmds2.c	/^static void do_showbacktrace(char_u *cmd);$/;"	p	file:	signature:(char_u *cmd)
do_sleep	vim/vim/src/ex_docmd.c	/^do_sleep(long msec)$/;"	f	signature:(long msec)
do_sort_uniq	vim/vim/src/evalfunc.c	/^do_sort_uniq(typval_T *argvars, typval_T *rettv, int sort)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int sort)
do_sort_uniq	vim/vim/src/evalfunc.c	/^static void	do_sort_uniq(typval_T *argvars, typval_T *rettv, int sort);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv, int sort)
do_source	vim/vim/src/ex_cmds2.c	/^do_source($/;"	f	signature:( char_u *fname, int check_other, int is_vimrc)
do_string	vim/vim/src/libvterm/src/parser.c	/^static size_t do_string(VTerm *vt, const char *str_frag, size_t len)$/;"	f	file:	signature:(VTerm *vt, const char *str_frag, size_t len)
do_string_csi	vim/vim/src/libvterm/src/parser.c	/^static void do_string_csi(VTerm *vt, const char *args, size_t arglen, char command)$/;"	f	file:	signature:(VTerm *vt, const char *args, size_t arglen, char command)
do_string_sub	vim/vim/src/eval.c	/^do_string_sub($/;"	f	signature:( char_u *str, char_u *pat, char_u *sub, typval_T *expr, char_u *flags)
do_sub	vim/vim/src/ex_cmds.c	/^do_sub(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
do_sub_msg	vim/vim/src/ex_cmds.c	/^do_sub_msg($/;"	f	signature:( int count_only)
do_swapexists	vim/vim/src/memline.c	/^do_swapexists(buf_T *buf, char_u *fname)$/;"	f	file:	signature:(buf_T *buf, char_u *fname)
do_swapexists	vim/vim/src/memline.c	/^static int do_swapexists(buf_T *buf, char_u *fname);$/;"	p	file:	signature:(buf_T *buf, char_u *fname)
do_syntax	vim/vim/src/structs.h	/^    int		do_syntax;$/;"	m	struct:__anon206	access:public
do_tag	vim/vim/src/tag.c	/^do_tag($/;"	f	signature:( char_u *tag, int type, int count, int forceit, int verbose)
do_tags	vim/vim/src/tag.c	/^do_tags(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
do_throw	vim/vim/src/ex_eval.c	/^do_throw(struct condstack *cstack)$/;"	f	signature:(struct condstack *cstack)
do_ucmd	vim/vim/src/ex_docmd.c	/^do_ucmd(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
do_ucmd	vim/vim/src/ex_docmd.c	/^static void do_ucmd(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
do_unlet	vim/vim/src/eval.c	/^do_unlet(char_u *name, int forceit)$/;"	f	signature:(char_u *name, int forceit)
do_unlet_var	vim/vim/src/eval.c	/^do_unlet_var($/;"	f	file:	signature:( lval_T *lp, char_u *name_end, int forceit)
do_unlet_var	vim/vim/src/eval.c	/^static int do_unlet_var(lval_T *lp, char_u *name_end, int forceit);$/;"	p	file:	signature:(lval_T *lp, char_u *name_end, int forceit)
do_upper	vim/vim/src/regexp.c	/^do_upper(int *d, int c)$/;"	f	file:	signature:(int *d, int c)
do_upper	vim/vim/src/regexp.c	/^static fptr_T do_upper(int *, int);$/;"	p	file:	signature:(int *, int)
do_viminfo	vim/vim/src/ex_cmds.c	/^do_viminfo(FILE *fp_in, FILE *fp_out, int flags)$/;"	f	file:	signature:(FILE *fp_in, FILE *fp_out, int flags)
do_viminfo	vim/vim/src/ex_cmds.c	/^static void do_viminfo(FILE *fp_in, FILE *fp_out, int flags);$/;"	p	file:	signature:(FILE *fp_in, FILE *fp_out, int flags)
do_window	vim/vim/src/window.c	/^do_window($/;"	f	signature:( int nchar, long Prenum, int xchar)
do_wqall	vim/vim/src/ex_cmds.c	/^do_wqall(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
do_write	vim/vim/src/ex_cmds.c	/^do_write(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
do_xterm_trace	vim/vim/src/os_unix.c	/^do_xterm_trace(void)$/;"	f	file:	signature:(void)
do_xterm_trace	vim/vim/src/os_unix.c	/^static int do_xterm_trace(void);$/;"	p	file:	signature:(void)
dofork	vim/vim/src/gui.h	/^    int		dofork;		    \/* Use fork() when GUI is starting *\/$/;"	m	struct:Gui	access:public
doing_destroy	vim/vim/src/gui_xmebwp.h	/^    int doing_destroy;$/;"	m	struct:_XmEnhancedButtonPart	access:public
doing_setvalues	vim/vim/src/gui_xmebwp.h	/^    int doing_setvalues;$/;"	m	struct:_XmEnhancedButtonPart	access:public
dollar_command	vim/vim/src/ex_docmd.c	/^static char_u dollar_command[2] = {'$', 0};$/;"	v	file:
dollar_vcol	vim/vim/src/globals.h	/^EXTERN colnr_T	dollar_vcol INIT(= -1);$/;"	v
dolu	vim/vim/runtime/tutor/tutor.cs	/^  2. Dr¾ klávesu pro pohyb dolu (j), dokud se její funkce nezopakuje.$/;"	m	signature:(j)
done	vim/vim/src/testdir/test_channel_write.py	/^        done = done + 1$/;"	v
done	vim/vim/src/testdir/test_channel_write.py	/^    done = 0$/;"	v
dont_check_job_ended	vim/vim/src/os_unix.c	/^static int dont_check_job_ended = 0;$/;"	v	file:
dont_scroll	vim/vim/src/globals.h	/^EXTERN int	dont_scroll INIT(= FALSE);\/* don't use scrollbars when TRUE *\/$/;"	v
dont_sync_undo	vim/vim/src/edit.c	/^static int	dont_sync_undo = FALSE;	\/* CTRL-G U prevents syncing undo for$/;"	v	file:
dos2	vim/vim/src/os_amiga.c	/^int			dos2 = FALSE;	    \/* Amiga DOS 2.0x or higher *\/$/;"	v
dos_expandpath	vim/vim/src/misc1.c	/^dos_expandpath($/;"	f	file:	signature:( garray_T *gap, char_u *path, int wildoff, int flags, int didstar)
dos_packet	vim/vim/src/os_amiga.c	/^dos_packet($/;"	f	file:	signature:( struct MsgPort *pid, long action, long arg)
dos_packet	vim/vim/src/os_amiga.c	/^static long dos_packet(struct MsgPort *, long, long);$/;"	p	file:	signature:(struct MsgPort *, long, long)
dos_packet	vim/vim/src/os_amiga.c	72;"	d	file:
dosetvisible	vim/vim/src/netbeans.c	/^static int dosetvisible = FALSE;$/;"	v	file:
doubleheight	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    doubleheight:2;    \/* DECDHL line (1=top 2=bottom) *\/$/;"	m	struct:__anon57	access:public
doublewidth	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    doublewidth:1;     \/* DECDWL or DECDHL line *\/$/;"	m	struct:__anon57	access:public
down	vim/vim/src/gui_gtk.c	/^    GtkWidget *down;	\/* search direction 'Down' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
down	vim/vim/src/gui_motif.c	/^    Widget down;	\/* search direction 'Down' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
dpy	vim/vim/src/gui.h	/^    Display	*dpy;		    \/* X display *\/$/;"	m	struct:Gui	access:public
dragRect	vim/vim/src/gui_mac.c	/^static Rect dragRect;$/;"	v	file:
dragRectControl	vim/vim/src/gui_mac.c	/^static short dragRectControl;$/;"	v	file:
dragRectEnbl	vim/vim/src/gui_mac.c	/^static short dragRectEnbl;$/;"	v	file:
dragRgn	vim/vim/src/gui_mac.c	/^static RgnHandle dragRgn;$/;"	v	file:
drag_data_received_cb	vim/vim/src/gui_gtk_x11.c	/^drag_data_received_cb(GtkWidget		*widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkDragContext *context, gint x, gint y, GtkSelectionData *data, guint info, guint time_, gpointer user_data UNUSED)
drag_handle_text	vim/vim/src/gui_gtk_x11.c	/^drag_handle_text(GdkDragContext	    *context,$/;"	f	file:	signature:(GdkDragContext *context, GtkSelectionData *data, guint time_, GdkModifierType state)
drag_handle_uri_list	vim/vim/src/gui_gtk_x11.c	/^drag_handle_uri_list(GdkDragContext	*context,$/;"	f	file:	signature:(GdkDragContext *context, GtkSelectionData *data, guint time_, GdkModifierType state, gint x, gint y)
drag_sep_line	vim/vim/src/globals.h	/^EXTERN int	drag_sep_line INIT(= FALSE);	\/* dragging vert separator *\/$/;"	v
drag_status_line	vim/vim/src/globals.h	/^EXTERN int	drag_status_line INIT(= FALSE);	\/* dragging the status line *\/$/;"	v
dragged_sb	vim/vim/src/gui.h	/^    int		dragged_sb;	    \/* Which scrollbar being dragged, if any? *\/$/;"	m	struct:Gui	access:public
dragged_sb	vim/vim/src/gui_mac.c	/^static ControlHandle dragged_sb = NULL;$/;"	v	file:
dragged_wp	vim/vim/src/gui.h	/^    win_T	*dragged_wp;	    \/* Which WIN's sb being dragged, if any? *\/$/;"	m	struct:Gui	access:public
drawBalloon	vim/vim/src/gui_beval.c	/^drawBalloon(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
drawBalloon	vim/vim/src/gui_beval.c	/^static void drawBalloon(BalloonEval *);$/;"	p	file:	signature:(BalloonEval *)
draw_cmdline	vim/vim/src/ex_getln.c	/^draw_cmdline(int start, int len)$/;"	f	file:	signature:(int start, int len)
draw_cmdline	vim/vim/src/ex_getln.c	/^static void	draw_cmdline(int start, int len);$/;"	p	file:	signature:(int start, int len)
draw_curl	vim/vim/src/gui_x11.c	/^draw_curl(int row, int col, int cells)$/;"	f	file:	signature:(int row, int col, int cells)
draw_curl	vim/vim/src/gui_x11.c	/^static void draw_curl(int row, int col, int cells);$/;"	p	file:	signature:(int row, int col, int cells)
draw_event	vim/vim/src/gui_gtk_x11.c	/^draw_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, cairo_t *cr, gpointer user_data UNUSED)
draw_glyph_string	vim/vim/src/gui_gtk_x11.c	/^draw_glyph_string(int row, int col, int num_cells, int flags,$/;"	f	file:	signature:(int row, int col, int num_cells, int flags, PangoFont *font, PangoGlyphString *glyphs, cairo_t *cr)
draw_highlight	vim/vim/src/gui_xmebw.c	/^draw_highlight(XmEnhancedButtonWidget eb)$/;"	f	file:	signature:(XmEnhancedButtonWidget eb)
draw_label	vim/vim/src/gui_xmebw.c	/^draw_label(XmEnhancedButtonWidget eb, XEvent *event, Region region)$/;"	f	file:	signature:(XmEnhancedButtonWidget eb, XEvent *event, Region region)
draw_pixmap	vim/vim/src/gui_xmebw.c	/^draw_pixmap(XmEnhancedButtonWidget eb,$/;"	f	file:	signature:(XmEnhancedButtonWidget eb, XEvent *event UNUSED, Region region UNUSED)
draw_shadows	vim/vim/src/gui_xmebw.c	/^draw_shadows(XmEnhancedButtonWidget eb)$/;"	f	file:	signature:(XmEnhancedButtonWidget eb)
draw_string_ATSUI	vim/vim/src/gui_mac.c	/^draw_string_ATSUI(int row, int col, char_u *s, int len, int flags)$/;"	f	file:	signature:(int row, int col, char_u *s, int len, int flags)
draw_string_QD	vim/vim/src/gui_mac.c	/^draw_string_QD(int row, int col, char_u *s, int len, int flags)$/;"	f	file:	signature:(int row, int col, char_u *s, int len, int flags)
draw_tabline	vim/vim/src/screen.c	/^draw_tabline(void)$/;"	f	file:	signature:(void)
draw_tabline	vim/vim/src/screen.c	/^static void draw_tabline(void);$/;"	p	file:	signature:(void)
draw_under	vim/vim/src/gui_gtk_x11.c	/^draw_under(int flags, int row, int col, int cells, cairo_t *cr)$/;"	f	file:	signature:(int flags, int row, int col, int cells, cairo_t *cr)
draw_undercurl	vim/vim/src/gui_mac.c	/^draw_undercurl(int flags, int row, int col, int cells)$/;"	f	file:	signature:(int flags, int row, int col, int cells)
draw_unhighlight	vim/vim/src/gui_xmebw.c	/^draw_unhighlight(XmEnhancedButtonWidget eb)$/;"	f	file:	signature:(XmEnhancedButtonWidget eb)
draw_vsep_win	vim/vim/src/screen.c	/^draw_vsep_win(win_T *wp, int row)$/;"	f	file:	signature:(win_T *wp, int row)
draw_vsep_win	vim/vim/src/screen.c	/^static void draw_vsep_win(win_T *wp, int row);$/;"	p	file:	signature:(win_T *wp, int row)
drawarea	vim/vim/src/gui.h	/^    GtkWidget	*drawarea;	    \/* the "text" area *\/$/;"	m	struct:Gui	access:public
drawarea_configure_event_cb	vim/vim/src/gui_gtk_x11.c	/^drawarea_configure_event_cb(GtkWidget	      *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventConfigure *event, gpointer data UNUSED)
drawarea_realize_cb	vim/vim/src/gui_gtk_x11.c	/^drawarea_realize_cb(GtkWidget *widget, gpointer data UNUSED)$/;"	f	file:	signature:(GtkWidget *widget, gpointer data UNUSED)
drawarea_style_updated_cb	vim/vim/src/gui_gtk_x11.c	/^drawarea_style_updated_cb(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer data UNUSED)
drawarea_unrealize_cb	vim/vim/src/gui_gtk_x11.c	/^drawarea_unrealize_cb(GtkWidget *widget UNUSED, gpointer data UNUSED)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer data UNUSED)
drawer	vim/vim/src/gui_mac.c	/^static WindowRef drawer = NULL; \/\/ TODO: put into gui.h$/;"	v	file:
drawerCallback	vim/vim/src/gui_mac.c	/^drawerCallback(EventHandlerCallRef handler, EventRef event, void *data)$/;"	f	file:	signature:(EventHandlerCallRef handler, EventRef event, void *data)
drop_messages	vim/vim/src/channel.c	/^drop_messages(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
dumkey	vim/vim/src/syntax.c	/^static keyentry_T dumkey;$/;"	v	file:
dummy	vim/vim/src/integration.c	/^static size_t dummy;  \/* to ignore return value of write() *\/$/;"	v	file:
dummy	vim/vim/src/os_unix.c	/^static int dummy;$/;"	v	file:
dummy	vim/vim/src/structs.h	/^    int		dummy;$/;"	m	struct:__anon200	access:public
dummy	vim/vim/src/structs.h	/^    int	    dummy;$/;"	m	struct:__anon190	access:public
dummy	vim/vim/src/structs.h	/^    int	    dummy;$/;"	m	struct:__anon191	access:public
dummy_check	vim/vim/src/if_py_both.h	/^dummy_check(void *arg UNUSED)$/;"	f	signature:(void *arg UNUSED)
dump_cell	vim/vim/src/libvterm/bin/unterm.c	/^static void dump_cell(const VTermScreenCell *cell, const VTermScreenCell *prevcell)$/;"	f	file:	signature:(const VTermScreenCell *cell, const VTermScreenCell *prevcell)
dump_eol	vim/vim/src/libvterm/bin/unterm.c	/^static void dump_eol(const VTermScreenCell *prevcell)$/;"	f	file:	signature:(const VTermScreenCell *prevcell)
dump_pipe	vim/vim/src/os_win32.c	/^dump_pipe(int	    options,$/;"	f	file:	signature:(int options, HANDLE g_hChildStd_OUT_Rd, garray_T *ga, char_u buffer[], DWORD *buffer_off)
dump_prefixes	vim/vim/src/spell.c	/^dump_prefixes($/;"	f	file:	signature:( slang_T *slang, char_u *word, char_u *pat, int *dir, int dumpflags, int flags, linenr_T startlnum)
dump_prefixes	vim/vim/src/spell.c	/^static linenr_T dump_prefixes(slang_T *slang, char_u *word, char_u *pat, int *dir, int round, int flags, linenr_T startlnum);$/;"	p	file:	signature:(slang_T *slang, char_u *word, char_u *pat, int *dir, int round, int flags, linenr_T startlnum)
dump_row	vim/vim/src/libvterm/bin/unterm.c	/^void dump_row(int row)$/;"	f	signature:(int row)
dump_word	vim/vim/src/spell.c	/^dump_word($/;"	f	file:	signature:( slang_T *slang, char_u *word, char_u *pat, int *dir, int dumpflags, int wordflags, linenr_T lnum)
dump_word	vim/vim/src/spell.c	/^static void dump_word(slang_T *slang, char_u *word, char_u *pat, int *dir, int round, int flags, linenr_T lnum);$/;"	p	file:	signature:(slang_T *slang, char_u *word, char_u *pat, int *dir, int round, int flags, linenr_T lnum)
dumsft	vim/vim/src/spell.c	/^static sftword_T dumsft;$/;"	v	file:
duplex	vim/vim/src/structs.h	/^    int		duplex;$/;"	m	struct:__anon206	access:public
dv_copyID	vim/vim/src/structs.h	/^    int		dv_copyID;	\/* ID used by deepcopy() *\/$/;"	m	struct:dictvar_S	access:public
dv_copydict	vim/vim/src/structs.h	/^    dict_T	*dv_copydict;	\/* copied dict used by deepcopy() *\/$/;"	m	struct:dictvar_S	access:public
dv_hashtab	vim/vim/src/structs.h	/^    hashtab_T	dv_hashtab;	\/* hashtab that refers to the items *\/$/;"	m	struct:dictvar_S	access:public
dv_lock	vim/vim/src/structs.h	/^    char	dv_lock;	\/* zero, VAR_LOCKED, VAR_FIXED *\/$/;"	m	struct:dictvar_S	access:public
dv_refcount	vim/vim/src/structs.h	/^    int		dv_refcount;	\/* reference count *\/$/;"	m	struct:dictvar_S	access:public
dv_scope	vim/vim/src/structs.h	/^    char	dv_scope;	\/* zero, VAR_SCOPE, VAR_DEF_SCOPE *\/$/;"	m	struct:dictvar_S	access:public
dv_used_next	vim/vim/src/structs.h	/^    dict_T	*dv_used_next;	\/* next dict in used dicts list *\/$/;"	m	struct:dictvar_S	access:public
dv_used_prev	vim/vim/src/structs.h	/^    dict_T	*dv_used_prev;	\/* previous dict in used dicts list *\/$/;"	m	struct:dictvar_S	access:public
dwBuildNumber	vim/vim/src/gui_w32.c	/^    DWORD dwBuildNumber;$/;"	m	struct:_DllVersionInfo	file:	access:public
dwMajorVersion	vim/vim/src/gui_w32.c	/^    DWORD dwMajorVersion;$/;"	m	struct:_DllVersionInfo	file:	access:public
dwMinorVersion	vim/vim/src/gui_w32.c	/^    DWORD dwMinorVersion;$/;"	m	struct:_DllVersionInfo	file:	access:public
dwPlatformID	vim/vim/src/gui_w32.c	/^    DWORD dwPlatformID;$/;"	m	struct:_DllVersionInfo	file:	access:public
dwStyle	vim/vim/src/gui_w32.c	/^    DWORD dwStyle;$/;"	m	struct:tagCOMPOSITIONFORM	file:	access:public
dwl	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int dwl       : 1; \/* On a DECDWL or DECDHL line *\/$/;"	m	struct:__anon61	access:public
dwl	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    dwl:1;             \/* DECDWL or DECDHL double-width line *\/$/;"	m	struct:__anon56	access:public
dwl	vim/vim/src/libvterm/src/screen.c	/^  unsigned int dwl            : 1; \/* on a DECDWL or DECDHL line *\/$/;"	m	struct:__anon29	file:	access:public
dy_flags	vim/vim/src/option.h	/^EXTERN unsigned	dy_flags;$/;"	v
dying	vim/vim/src/gui.h	/^    int		dying;		    \/* Is vim dying? Then output to terminal *\/$/;"	m	struct:Gui	access:public
dyn_gettext_free	vim/vim/src/GvimExt/gvimext.cpp	/^dyn_gettext_free(void)$/;"	f	file:	signature:(void)
dyn_gettext_load	vim/vim/src/GvimExt/gvimext.cpp	/^dyn_gettext_load(void)$/;"	f	file:	signature:(void)
dyn_imm_load	vim/vim/src/gui_w32.c	/^dyn_imm_load(void)$/;"	f	file:	signature:(void)
dyn_imm_load	vim/vim/src/gui_w32.c	/^static void dyn_imm_load(void);$/;"	p	file:	signature:(void)
dyn_libintl_bind_textdomain_codeset	vim/vim/src/os_win32.c	/^char *(*dyn_libintl_bind_textdomain_codeset)(const char *, const char *)$/;"	v
dyn_libintl_bindtextdomain	vim/vim/src/GvimExt/gvimext.cpp	/^static char *(*dyn_libintl_bindtextdomain)(const char *, const char *)$/;"	v	file:
dyn_libintl_bindtextdomain	vim/vim/src/os_win32.c	/^char *(*dyn_libintl_bindtextdomain)(const char *, const char *)$/;"	v
dyn_libintl_end	vim/vim/src/GvimExt/gvimext.cpp	/^dyn_libintl_end(void)$/;"	f	file:	signature:(void)
dyn_libintl_end	vim/vim/src/GvimExt/gvimext.cpp	/^static void dyn_libintl_end(void);$/;"	p	file:	signature:(void)
dyn_libintl_end	vim/vim/src/os_win32.c	/^dyn_libintl_end(void)$/;"	f	signature:(void)
dyn_libintl_gettext	vim/vim/src/GvimExt/gvimext.cpp	/^static char *(*dyn_libintl_gettext)(const char *) = null_libintl_gettext;$/;"	v	file:
dyn_libintl_gettext	vim/vim/src/os_win32.c	/^char *(*dyn_libintl_gettext)(const char *) = null_libintl_gettext;$/;"	v
dyn_libintl_init	vim/vim/src/GvimExt/gvimext.cpp	/^dyn_libintl_init(char *dir)$/;"	f	file:	signature:(char *dir)
dyn_libintl_init	vim/vim/src/GvimExt/gvimext.cpp	/^static int dyn_libintl_init(char *dir);$/;"	p	file:	signature:(char *dir)
dyn_libintl_init	vim/vim/src/os_win32.c	/^dyn_libintl_init(void)$/;"	f	signature:(void)
dyn_libintl_ngettext	vim/vim/src/os_win32.c	/^char *(*dyn_libintl_ngettext)(const char *, const char *, unsigned long n)$/;"	v
dyn_libintl_putenv	vim/vim/src/os_win32.c	/^int (*dyn_libintl_putenv)(const char *) = null_libintl_putenv;$/;"	v
dyn_libintl_textdomain	vim/vim/src/GvimExt/gvimext.cpp	/^static char *(*dyn_libintl_textdomain)(const char *) = null_libintl_textdomain;$/;"	v	file:
dyn_libintl_textdomain	vim/vim/src/os_win32.c	/^char *(*dyn_libintl_textdomain)(const char *) = null_libintl_textdomain;$/;"	v
dyn_libintl_wputenv	vim/vim/src/os_win32.c	/^int (*dyn_libintl_wputenv)(const wchar_t *) = null_libintl_wputenv;$/;"	v
dyn_winpty_init	vim/vim/src/terminal.c	/^dyn_winpty_init(void)$/;"	f	signature:(void)
dynamic_mzscheme_end	vim/vim/src/if_mzsch.c	/^dynamic_mzscheme_end(void)$/;"	f	file:	signature:(void)
dynamic_mzscheme_end	vim/vim/src/if_mzsch.c	/^static void dynamic_mzscheme_end(void);$/;"	p	file:	signature:(void)
eDeletedBufferError	vim/vim/src/if_ruby.c	/^static VALUE eDeletedBufferError;$/;"	v	file:
eDeletedWindowError	vim/vim/src/if_ruby.c	/^static VALUE eDeletedWindowError;$/;"	v	file:
e_abort	vim/vim/src/globals.h	/^EXTERN char_u e_abort[]		INIT(= N_("E470: Command aborted"));$/;"	v
e_acute	vim/vim/src/regexp_nfa.c	791;"	d	file:
e_affform	vim/vim/src/spellfile.c	/^static char *e_affform = N_("E761: Format error in affix file FOL, LOW or UPP");$/;"	v	file:
e_affname	vim/vim/src/spellfile.c	/^static char *e_affname = N_("Affix name too long in %s line %d: %s");$/;"	v	file:
e_affrange	vim/vim/src/spellfile.c	/^static char *e_affrange = N_("E762: Character in FOL, LOW or UPP is out of range");$/;"	v	file:
e_afftrailing	vim/vim/src/spellfile.c	/^static char *e_afftrailing = N_("Trailing text in %s line %d: %s");$/;"	v	file:
e_argreq	vim/vim/src/globals.h	/^EXTERN char_u e_argreq[]	INIT(= N_("E471: Argument required"));$/;"	v
e_auabort	vim/vim/src/buffer.c	/^static char *e_auabort = N_("E855: Autocommands caused command to abort");$/;"	v	file:
e_auchangedbuf	vim/vim/src/fileio.c	/^static char *e_auchangedbuf = N_("E812: Autocommands changed buffer or buffer name");$/;"	v	file:
e_backslash	vim/vim/src/globals.h	/^EXTERN char_u e_backslash[]	INIT(= N_("E10: \\\\ should be followed by \/, ? or &"));$/;"	v
e_bufloaded	vim/vim/src/globals.h	/^EXTERN char_u e_bufloaded[]	INIT(= N_("E139: File is loaded in another buffer"));$/;"	v
e_cannot_connect	vim/vim/src/channel.c	/^static char *e_cannot_connect = N_("E902: Cannot connect to port");$/;"	v	file:
e_circumflex	vim/vim/src/regexp_nfa.c	792;"	d	file:
e_cmdwin	vim/vim/src/globals.h	/^EXTERN char_u e_cmdwin[]	INIT(= N_("E11: Invalid in command-line window; <CR> executes, CTRL-C quits"));$/;"	v
e_compldel	vim/vim/src/edit.c	/^static char e_compldel[] = N_("E840: Completion function deleted text");$/;"	v	file:
e_complwin	vim/vim/src/edit.c	/^static char e_complwin[] = N_("E839: Completion function changed window");$/;"	v	file:
e_curdir	vim/vim/src/globals.h	/^EXTERN char_u e_curdir[]	INIT(= N_("E12: Command not allowed from exrc\/vimrc in current dir or tag search"));$/;"	v
e_diaeresis	vim/vim/src/regexp_nfa.c	793;"	d	file:
e_dictkey	vim/vim/src/globals.h	/^EXTERN char_u e_dictkey[]	INIT(= N_("E716: Key not present in Dictionary: %s"));$/;"	v
e_dictrange	vim/vim/src/eval.c	/^static char *e_dictrange = N_("E719: Cannot use [:] with a Dictionary");$/;"	v	file:
e_dictreq	vim/vim/src/globals.h	/^EXTERN char_u e_dictreq[]	INIT(= N_("E715: Dictionary required"));$/;"	v
e_dirnotf	vim/vim/src/globals.h	/^EXTERN char_u e_dirnotf[]	INIT(= N_("E919: Directory not found in '%s': \\"%s\\""));$/;"	v
e_empty_sb	vim/vim/src/regexp.c	/^static char_u e_empty_sb[]  = N_("E70: Empty %s%%[]");$/;"	v	file:
e_emptybuf	vim/vim/src/globals.h	/^EXTERN char_u e_emptybuf[]	INIT(= N_("E749: empty buffer"));$/;"	v
e_emptykey	vim/vim/src/globals.h	/^EXTERN char_u e_emptykey[]	INIT(= N_("E713: Cannot use empty key for Dictionary"));$/;"	v
e_endfor	vim/vim/src/globals.h	/^EXTERN char_u e_endfor[]	INIT(= N_("E170: Missing :endfor"));$/;"	v
e_endif	vim/vim/src/globals.h	/^EXTERN char_u e_endif[]		INIT(= N_("E171: Missing :endif"));$/;"	v
e_endtry	vim/vim/src/globals.h	/^EXTERN char_u e_endtry[]	INIT(= N_("E600: Missing :endtry"));$/;"	v
e_endwhile	vim/vim/src/globals.h	/^EXTERN char_u e_endwhile[]	INIT(= N_("E170: Missing :endwhile"));$/;"	v
e_exists	vim/vim/src/globals.h	/^EXTERN char_u e_exists[]	INIT(= N_("E13: File exists (add ! to override)"));$/;"	v
e_failed	vim/vim/src/globals.h	/^EXTERN char_u e_failed[]	INIT(= N_("E472: Command failed"));$/;"	v
e_float_as_string	vim/vim/src/eval.c	/^static char *e_float_as_string = N_("E806: using Float as a String");$/;"	v	file:
e_font	vim/vim/src/globals.h	/^EXTERN char_u e_font[]		INIT(= N_("E235: Unknown font: %s"));$/;"	v
e_fontset	vim/vim/src/globals.h	/^EXTERN char_u e_fontset[]	INIT(= N_("E234: Unknown fontset: %s"));$/;"	v
e_fontwidth	vim/vim/src/globals.h	/^EXTERN char_u e_fontwidth[]	INIT(= N_("E236: Font \\"%s\\" is not fixed-width"));$/;"	v
e_for	vim/vim/src/globals.h	/^EXTERN char_u e_for[]		INIT(= N_("E588: :endfor without :for"));$/;"	v
e_format	vim/vim/src/spell.h	/^SPELL_EXTERN char e_format[] SPELL_INIT(= N_("E759: Format error in spell file"));$/;"	v
e_funcdict	vim/vim/src/userfunc.c	/^static char *e_funcdict = N_("E717: Dictionary entry already exists");$/;"	v	file:
e_funcexts	vim/vim/src/userfunc.c	/^static char *e_funcexts = N_("E122: Function %s already exists, add ! to replace it");$/;"	v	file:
e_funcref	vim/vim/src/userfunc.c	/^static char *e_funcref = N_("E718: Funcref required");$/;"	v	file:
e_grave	vim/vim/src/regexp_nfa.c	790;"	d	file:
e_guarded	vim/vim/src/globals.h	/^EXTERN char_u e_guarded[]	INIT(= N_("E463: Region is guarded, cannot modify"));$/;"	v
e_hitend	vim/vim/src/edit.c	/^static char e_hitend[] = N_("Hit end of paragraph");$/;"	v	file:
e_ill_char_class	vim/vim/src/regexp_nfa.c	/^static char_u e_ill_char_class[] = N_("E877: (NFA regexp) Invalid character class: %ld");$/;"	v	file:
e_illvar	vim/vim/src/eval.c	/^static char *e_illvar = N_("E461: Illegal variable name: %s");$/;"	v	file:
e_intern2	vim/vim/src/globals.h	/^EXTERN char_u e_intern2[]	INIT(= N_("E685: Internal error: %s"));$/;"	v
e_internal	vim/vim/src/globals.h	/^EXTERN char_u e_internal[]	INIT(= N_("E473: Internal error"));$/;"	v
e_interr	vim/vim/src/globals.h	/^EXTERN char_u e_interr[]	INIT(= N_("Interrupted"));$/;"	v
e_invaddr	vim/vim/src/globals.h	/^EXTERN char_u e_invaddr[]	INIT(= N_("E14: Invalid address"));$/;"	v
e_invalidreg	vim/vim/src/globals.h	/^EXTERN char_u e_invalidreg[]    INIT(= N_("E850: Invalid register name"));$/;"	v
e_invalpat	vim/vim/src/globals.h	/^EXTERN char_u e_invalpat[]	INIT(= N_("E682: Invalid search pattern or delimiter"));$/;"	v
e_invarg	vim/vim/src/globals.h	/^EXTERN char_u e_invarg[]	INIT(= N_("E474: Invalid argument"));$/;"	v
e_invarg2	vim/vim/src/globals.h	/^EXTERN char_u e_invarg2[]	INIT(= N_("E475: Invalid argument: %s"));$/;"	v
e_invcmd	vim/vim/src/globals.h	/^EXTERN char_u e_invcmd[]	INIT(= N_("E476: Invalid command"));$/;"	v
e_invexpr2	vim/vim/src/globals.h	/^EXTERN char_u e_invexpr2[]	INIT(= N_("E15: Invalid expression: %s"));$/;"	v
e_invexprmsg	vim/vim/src/globals.h	/^EXTERN char_u e_invexprmsg[]	INIT(= N_("E449: Invalid expression received"));$/;"	v
e_invrange	vim/vim/src/globals.h	/^EXTERN char_u e_invrange[]	INIT(= N_("E16: Invalid range"));$/;"	v
e_isadir2	vim/vim/src/globals.h	/^EXTERN char_u e_isadir2[]	INIT(= N_("E17: \\"%s\\" is a directory"));$/;"	v
e_large_class	vim/vim/src/regexp.c	/^static char_u e_large_class[] = N_("E945: Range too large in character class");$/;"	v	file:
e_letunexp	vim/vim/src/eval.c	/^static char *e_letunexp	= N_("E18: Unexpected characters in :let");$/;"	v	file:
e_letwrong	vim/vim/src/eval.c	/^static char *e_letwrong = N_("E734: Wrong variable type for %s=");$/;"	v	file:
e_libcall	vim/vim/src/globals.h	/^EXTERN char_u e_libcall[]	INIT(= N_("E364: Library call failed for \\"%s()\\""));$/;"	v
e_listarg	vim/vim/src/evalfunc.c	/^static char *e_listarg = N_("E686: Argument of %s must be a List");$/;"	v	file:
e_listdictarg	vim/vim/src/globals.h	/^EXTERN char_u e_listdictarg[]	INIT(= N_("E712: Argument of %s must be a List or Dictionary"));$/;"	v
e_listidx	vim/vim/src/globals.h	/^EXTERN char_u e_listidx[]	INIT(= N_("E684: list index out of range: %ld"));$/;"	v
e_listreq	vim/vim/src/globals.h	/^EXTERN char_u e_listreq[]	INIT(= N_("E714: List required"));$/;"	v
e_loadfunc	vim/vim/src/globals.h	/^EXTERN char_u e_loadfunc[]	INIT(= N_("E448: Could not load library function %s"));$/;"	v
e_loadlib	vim/vim/src/globals.h	/^EXTERN char_u e_loadlib[]	INIT(= N_("E370: Could not load library %s"));$/;"	v
e_loclist	vim/vim/src/globals.h	/^EXTERN char_u e_loclist[]	INIT(= N_("E776: No location list"));$/;"	v
e_longname	vim/vim/src/globals.h	/^EXTERN char_u e_longname[]	INIT(= N_("E75: Name too long"));$/;"	v
e_markinval	vim/vim/src/globals.h	/^EXTERN char_u e_markinval[]	INIT(= N_("E19: Mark has invalid line number"));$/;"	v
e_marknotset	vim/vim/src/globals.h	/^EXTERN char_u e_marknotset[]	INIT(= N_("E20: Mark not set"));$/;"	v
e_maxmempat	vim/vim/src/globals.h	/^EXTERN char_u e_maxmempat[]	INIT(= N_("E363: pattern uses more memory than 'maxmempattern'"));$/;"	v
e_misplaced	vim/vim/src/regexp_nfa.c	/^static char_u e_misplaced[] = N_("E866: (NFA regexp) Misplaced %c");$/;"	v	file:
e_missbrac	vim/vim/src/eval.c	/^static char *e_missbrac = N_("E111: Missing ']'");$/;"	v	file:
e_missing_sb	vim/vim/src/regexp.c	/^static char_u e_missing_sb[] = N_("E69: Missing ] after %s%%[");$/;"	v	file:
e_missingbracket	vim/vim/src/regexp.c	/^static char_u e_missingbracket[] = N_("E769: Missing ] after %s[");$/;"	v	file:
e_modifiable	vim/vim/src/globals.h	/^EXTERN char_u e_modifiable[]	INIT(= N_("E21: Cannot make changes, 'modifiable' is off"));$/;"	v
e_nbreadonly	vim/vim/src/globals.h	/^EXTERN char_u e_nbreadonly[]	INIT(= N_("E744: NetBeans does not allow changes in read-only files"));$/;"	v
e_nesting	vim/vim/src/globals.h	/^EXTERN char_u e_nesting[]	INIT(= N_("E22: Scripts nested too deep"));$/;"	v
e_noabbr	vim/vim/src/globals.h	/^EXTERN char_u e_noabbr[]	INIT(= N_("E24: No such abbreviation"));$/;"	v
e_noalt	vim/vim/src/globals.h	/^EXTERN char_u e_noalt[]		INIT(= N_("E23: No alternate file"));$/;"	v
e_noarabic	vim/vim/src/globals.h	/^EXTERN char_u e_noarabic[]	INIT(= N_("E800: Arabic cannot be used: Not enabled at compile time\\n"));$/;"	v
e_nobang	vim/vim/src/globals.h	/^EXTERN char_u e_nobang[]	INIT(= N_("E477: No ! allowed"));$/;"	v
e_nobufnr	vim/vim/src/globals.h	/^EXTERN char_u e_nobufnr[]	INIT(= N_("E86: Buffer %ld does not exist"));$/;"	v
e_nofarsi	vim/vim/src/globals.h	/^EXTERN char_u e_nofarsi[]	INIT(= N_("E27: Farsi cannot be used: Not enabled at compile time\\n"));$/;"	v
e_nofold	vim/vim/src/fold.c	/^static char *e_nofold = N_("E490: No fold found");$/;"	v	file:
e_nofunc	vim/vim/src/userfunc.c	/^static char *e_nofunc = N_("E130: Unknown function: %s");$/;"	v	file:
e_nogroup	vim/vim/src/globals.h	/^EXTERN char_u e_nogroup[]	INIT(= N_("E28: No such highlight group name: %s"));$/;"	v
e_nogvim	vim/vim/src/globals.h	/^EXTERN char_u e_nogvim[]	INIT(= N_("E25: GUI cannot be used: Not enabled at compile time"));$/;"	v
e_nohebrew	vim/vim/src/globals.h	/^EXTERN char_u e_nohebrew[]	INIT(= N_("E26: Hebrew cannot be used: Not enabled at compile time\\n"));$/;"	v
e_noident	vim/vim/src/normal.c	/^static char *e_noident = N_("E349: No identifier under cursor");$/;"	v	file:
e_noinstext	vim/vim/src/globals.h	/^EXTERN char_u e_noinstext[]	INIT(= N_("E29: No inserted text yet"));$/;"	v
e_nolastcmd	vim/vim/src/globals.h	/^EXTERN char_u e_nolastcmd[]	INIT(= N_("E30: No previous command line"));$/;"	v
e_nomap	vim/vim/src/globals.h	/^EXTERN char_u e_nomap[]		INIT(= N_("E31: No such mapping"));$/;"	v
e_nomatch	vim/vim/src/globals.h	/^EXTERN char_u e_nomatch[]	INIT(= N_("E479: No match"));$/;"	v
e_nomatch2	vim/vim/src/globals.h	/^EXTERN char_u e_nomatch2[]	INIT(= N_("E480: No match: %s"));$/;"	v
e_nomenu	vim/vim/src/menu.c	/^static char_u e_nomenu[] = N_("E329: No menu \\"%s\\"");$/;"	v	file:
e_noname	vim/vim/src/globals.h	/^EXTERN char_u e_noname[]	INIT(= N_("E32: No file name"));$/;"	v
e_nopresub	vim/vim/src/globals.h	/^EXTERN char_u e_nopresub[]	INIT(= N_("E33: No previous substitute regular expression"));$/;"	v
e_noprev	vim/vim/src/globals.h	/^EXTERN char_u e_noprev[]	INIT(= N_("E34: No previous command"));$/;"	v
e_noprevre	vim/vim/src/globals.h	/^EXTERN char_u e_noprevre[]	INIT(= N_("E35: No previous regular expression"));$/;"	v
e_norange	vim/vim/src/globals.h	/^EXTERN char_u e_norange[]	INIT(= N_("E481: No range allowed"));$/;"	v
e_noroom	vim/vim/src/globals.h	/^EXTERN char_u e_noroom[]	INIT(= N_("E36: Not enough room"));$/;"	v
e_noserver	vim/vim/src/globals.h	/^EXTERN char_u e_noserver[]	INIT(= N_("E247: no registered server named \\"%s\\""));$/;"	v
e_not_open	vim/vim/src/undo.c	/^static char_u e_not_open[] = N_("E828: Cannot open undo file for writing: %s");$/;"	v	file:
e_notcreate	vim/vim/src/globals.h	/^EXTERN char_u e_notcreate[]	INIT(= N_("E482: Can't create file %s"));$/;"	v
e_notmp	vim/vim/src/globals.h	/^EXTERN char_u e_notmp[]		INIT(= N_("E483: Can't get temp file name"));$/;"	v
e_notopen	vim/vim/src/globals.h	/^EXTERN char_u e_notopen[]	INIT(= N_("E484: Can't open file %s"));$/;"	v
e_notread	vim/vim/src/globals.h	/^EXTERN char_u e_notread[]	INIT(= N_("E485: Can't read file %s"));$/;"	v
e_notset	vim/vim/src/globals.h	/^EXTERN char_u e_notset[]	INIT(= N_("E764: Option '%s' is not set"));$/;"	v
e_notsubmenu	vim/vim/src/menu.c	/^static char_u e_notsubmenu[] = N_("E327: Part of menu-item path is not sub-menu");$/;"	v	file:
e_nowrtmsg	vim/vim/src/globals.h	/^EXTERN char_u e_nowrtmsg[]	INIT(= N_("E37: No write since last change (add ! to override)"));$/;"	v
e_nowrtmsg_nobang	vim/vim/src/globals.h	/^EXTERN char_u e_nowrtmsg_nobang[]   INIT(= N_("E37: No write since last change"));$/;"	v
e_nul_found	vim/vim/src/regexp_nfa.c	/^static char_u e_nul_found[] = N_("E865: (NFA) Regexp end encountered prematurely");$/;"	v	file:
e_null	vim/vim/src/globals.h	/^EXTERN char_u e_null[]		INIT(= N_("E38: Null argument"));$/;"	v
e_number_exp	vim/vim/src/globals.h	/^EXTERN char_u e_number_exp[]	INIT(= N_("E39: Number expected"));$/;"	v
e_opendisp	vim/vim/src/globals.h	/^EXTERN char_u e_opendisp[]	INIT(= N_("E233: cannot open display"));$/;"	v
e_openerrf	vim/vim/src/globals.h	/^EXTERN char_u e_openerrf[]	INIT(= N_("E40: Can't open errorfile %s"));$/;"	v
e_othermode	vim/vim/src/menu.c	/^static char_u e_othermode[] = N_("E328: Menu only exists in another mode");$/;"	v	file:
e_outofmem	vim/vim/src/globals.h	/^EXTERN char_u e_outofmem[]	INIT(= N_("E41: Out of memory!"));$/;"	v
e_pathtoolong	vim/vim/src/misc2.c	/^static char_u e_pathtoolong[] = N_("E854: path too long for completion");$/;"	v	file:
e_patnotf	vim/vim/src/globals.h	/^EXTERN char_u e_patnotf[]	INIT(= N_("Pattern not found"));$/;"	v
e_patnotf2	vim/vim/src/globals.h	/^EXTERN char_u e_patnotf2[]	INIT(= N_("E486: Pattern not found: %s"));$/;"	v
e_positive	vim/vim/src/globals.h	/^EXTERN char_u e_positive[]	INIT(= N_("E487: Argument must be positive"));$/;"	v
e_prev_dir	vim/vim/src/globals.h	/^EXTERN char_u e_prev_dir[]	INIT(= N_("E459: Cannot go back to previous directory"));$/;"	v
e_printf	vim/vim/src/message.c	/^static char *e_printf = N_("E766: Insufficient arguments for printf()");$/;"	v	file:
e_py_systemexit	vim/vim/src/if_py_both.h	/^static char_u e_py_systemexit[]	= "E880: Can't handle SystemExit of %s exception in vim";$/;"	v
e_quickfix	vim/vim/src/globals.h	/^EXTERN char_u e_quickfix[]	INIT(= N_("E42: No Errors"));$/;"	v
e_re_corr	vim/vim/src/globals.h	/^EXTERN char_u e_re_corr[]	INIT(= N_("E44: Corrupted regexp program"));$/;"	v
e_re_damg	vim/vim/src/globals.h	/^EXTERN char_u e_re_damg[]	INIT(= N_("E43: Damaged match string"));$/;"	v
e_readerrf	vim/vim/src/globals.h	/^EXTERN char_u e_readerrf[]	INIT(= N_("E47: Error while reading errorfile"));$/;"	v
e_readonly	vim/vim/src/globals.h	/^EXTERN char_u e_readonly[]	INIT(= N_("E45: 'readonly' option is set (add ! to override)"));$/;"	v
e_readonlysbx	vim/vim/src/globals.h	/^EXTERN char_u e_readonlysbx[]	INIT(= N_("E794: Cannot set variable in the sandbox: \\"%s\\""));$/;"	v
e_readonlyvar	vim/vim/src/globals.h	/^EXTERN char_u e_readonlyvar[]	INIT(= N_("E46: Cannot change read-only variable \\"%s\\""));$/;"	v
e_reverse_range	vim/vim/src/regexp.c	/^static char_u e_reverse_range[] = N_("E944: Reverse range in character class");$/;"	v	file:
e_sandbox	vim/vim/src/globals.h	/^EXTERN char_u e_sandbox[]	INIT(= N_("E48: Not allowed in sandbox"));$/;"	v
e_screenmode	vim/vim/src/globals.h	/^EXTERN char_u e_screenmode[]	INIT(= N_("E359: Screen mode setting not supported"));$/;"	v
e_scroll	vim/vim/src/globals.h	/^EXTERN char_u e_scroll[]	INIT(= N_("E49: Invalid scroll size"));$/;"	v
e_secure	vim/vim/src/globals.h	/^EXTERN char_u e_secure[]	INIT(= N_("E523: Not allowed here"));$/;"	v
e_shellempty	vim/vim/src/globals.h	/^EXTERN char_u e_shellempty[]	INIT(= N_("E91: 'shell' option is empty"));$/;"	v
e_signdata	vim/vim/src/globals.h	/^EXTERN char_u e_signdata[]	INIT(= N_("E255: Couldn't read in sign data!"));$/;"	v
e_spell_trunc	vim/vim/src/spellfile.c	/^static char *e_spell_trunc = N_("E758: Truncated spell file");$/;"	v	file:
e_stringreq	vim/vim/src/evalfunc.c	/^static char *e_stringreq = N_("E928: String required");$/;"	v	file:
e_swapclose	vim/vim/src/globals.h	/^EXTERN char_u e_swapclose[]	INIT(= N_("E72: Close error on swap file"));$/;"	v
e_tagstack	vim/vim/src/globals.h	/^EXTERN char_u e_tagstack[]	INIT(= N_("E73: tag stack empty"));$/;"	v
e_toocompl	vim/vim/src/globals.h	/^EXTERN char_u e_toocompl[]	INIT(= N_("E74: Command too complex"));$/;"	v
e_toomany	vim/vim/src/globals.h	/^EXTERN char_u e_toomany[]	INIT(= N_("E77: Too many file names"));$/;"	v
e_toomanyarg	vim/vim/src/globals.h	/^EXTERN char_u e_toomanyarg[]	INIT(= N_("E118: Too many arguments for function: %s"));$/;"	v
e_toomsbra	vim/vim/src/globals.h	/^EXTERN char_u e_toomsbra[]	INIT(= N_("E76: Too many ["));$/;"	v
e_trailing	vim/vim/src/globals.h	/^EXTERN char_u e_trailing[]	INIT(= N_("E488: Trailing characters"));$/;"	v
e_umark	vim/vim/src/globals.h	/^EXTERN char_u e_umark[]		INIT(= N_("E78: Unknown mark"));$/;"	v
e_undefvar	vim/vim/src/eval.c	/^static char *e_undefvar = N_("E121: Undefined variable: %s");$/;"	v	file:
e_unmatchedp	vim/vim/src/regexp.c	/^static char_u e_unmatchedp[] = N_("E54: Unmatched %s(");$/;"	v	file:
e_unmatchedpar	vim/vim/src/regexp.c	/^static char_u e_unmatchedpar[] = N_("E55: Unmatched %s)");$/;"	v	file:
e_unmatchedpp	vim/vim/src/regexp.c	/^static char_u e_unmatchedpp[] = N_("E53: Unmatched %s%%(");$/;"	v	file:
e_usingsid	vim/vim/src/globals.h	/^EXTERN char_u e_usingsid[]	INIT(= N_("E81: Using <SID> not in a script context"));$/;"	v
e_while	vim/vim/src/globals.h	/^EXTERN char_u e_while[]		INIT(= N_("E588: :endwhile without :while"));$/;"	v
e_wildexpand	vim/vim/src/globals.h	/^EXTERN char_u e_wildexpand[]	INIT(= N_("E79: Cannot expand wildcards"));$/;"	v
e_winheight	vim/vim/src/globals.h	/^EXTERN char_u e_winheight[]	INIT(= N_("E591: 'winheight' cannot be smaller than 'winminheight'"));$/;"	v
e_winwidth	vim/vim/src/globals.h	/^EXTERN char_u e_winwidth[]	INIT(= N_("E592: 'winwidth' cannot be smaller than 'winminwidth'"));$/;"	v
e_write	vim/vim/src/globals.h	/^EXTERN char_u e_write[]		INIT(= N_("E80: Error while writing"));$/;"	v
e_xim	vim/vim/src/mbyte.c	/^static char e_xim[] = N_("E285: Failed to create input context");$/;"	v	file:
e_z1_not_allowed	vim/vim/src/regexp.c	/^static char_u e_z1_not_allowed[] = N_("E67: \\\\z1 et al. not allowed here");$/;"	v	file:
e_z_not_allowed	vim/vim/src/regexp.c	/^static char_u e_z_not_allowed[] = N_("E66: \\\\z( not allowed here");$/;"	v	file:
e_zerocount	vim/vim/src/globals.h	/^EXTERN char_u e_zerocount[]	INIT(= N_("E939: Positive count required"));$/;"	v
eap_arg_len	vim/vim/src/if_cscope.c	/^static int	    eap_arg_len;    \/* length of eap->arg, set in$/;"	v	file:
early_arg_scan	vim/vim/src/main.c	/^early_arg_scan(mparm_T *parmp UNUSED)$/;"	f	file:	signature:(mparm_T *parmp UNUSED)
early_arg_scan	vim/vim/src/main.c	/^static void early_arg_scan(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
ebcdic2ascii	vim/vim/src/charset.c	/^ebcdic2ascii(char_u *buffer, int len)$/;"	f	signature:(char_u *buffer, int len)
ebcdic2ascii_tab	vim/vim/src/charset.c	/^static char_u ebcdic2ascii_tab[256] =$/;"	v	file:
echeck_abbr	vim/vim/src/edit.c	/^echeck_abbr(int c)$/;"	f	file:	signature:(int c)
echeck_abbr	vim/vim/src/edit.c	/^static int  echeck_abbr(int);$/;"	p	file:	signature:(int)
echo_attr	vim/vim/src/eval.c	/^static int echo_attr = 0;   \/* attributes used for ":echo" *\/$/;"	v	file:
echo_string	vim/vim/src/eval.c	/^echo_string($/;"	f	signature:( typval_T *tv, char_u **tofree, char_u *numbuf, int copyID)
echo_string_core	vim/vim/src/eval.c	/^echo_string_core($/;"	f	signature:( typval_T *tv, char_u **tofree, char_u *numbuf, int copyID, int echo_style, int restore_copyID, int dict_val)
echo_wid_arg	vim/vim/src/globals.h	/^EXTERN int	echo_wid_arg INIT(= FALSE);	\/* --echo-wid argument *\/$/;"	v
echogets	vim/vim/runtime/tools/ccfilter.c	/^char *echogets(char *s, int echo)$/;"	f	signature:(char *s, int echo)
edit	vim/vim/src/edit.c	/^edit($/;"	f	signature:( int cmdchar, int startln, long count)
edit_buffers	vim/vim/src/main.c	/^edit_buffers($/;"	f	file:	signature:( mparm_T *parmp, char_u *cwd)
edit_buffers	vim/vim/src/main.c	/^static void edit_buffers(mparm_T *parmp, char_u *cwd);$/;"	p	file:	signature:(mparm_T *parmp, char_u *cwd)
edit_putchar	vim/vim/src/edit.c	/^edit_putchar(int c, int highlight)$/;"	f	signature:(int c, int highlight)
edit_submode	vim/vim/src/globals.h	/^EXTERN char_u	*edit_submode INIT(= NULL); \/* msg for CTRL-X submode *\/$/;"	v
edit_submode_extra	vim/vim/src/globals.h	/^EXTERN char_u	*edit_submode_extra INIT(= NULL);\/* appended to edit_submode *\/$/;"	v
edit_submode_highl	vim/vim/src/globals.h	/^EXTERN hlf_T	edit_submode_highl;	\/* highl. method for extra info *\/$/;"	v
edit_submode_pre	vim/vim/src/globals.h	/^EXTERN char_u	*edit_submode_pre INIT(= NULL); \/* prepended to edit_submode *\/$/;"	v
edit_type	vim/vim/src/structs.h	/^    int		edit_type;		\/* type of editing to do *\/$/;"	m	struct:__anon210	access:public
edit_unputchar	vim/vim/src/edit.c	/^edit_unputchar(void)$/;"	f	signature:(void)
editing_arg_idx	vim/vim/src/ex_cmds2.c	/^editing_arg_idx(win_T *win)$/;"	f	file:	signature:(win_T *win)
editing_arg_idx	vim/vim/src/ex_cmds2.c	/^static int	editing_arg_idx(win_T *win);$/;"	p	file:	signature:(win_T *win)
efm_S	vim/vim/src/quickfix.c	/^struct efm_S$/;"	s	file:
efm_S::addr	vim/vim/src/quickfix.c	/^    char_u	    addr[FMT_PATTERNS]; \/* indices of used % patterns *\/$/;"	m	struct:efm_S	file:	access:public
efm_S::conthere	vim/vim/src/quickfix.c	/^    int		    conthere;	\/* %> used *\/$/;"	m	struct:efm_S	file:	access:public
efm_S::flags	vim/vim/src/quickfix.c	/^    char_u	    flags;	\/* additional flags given in prefix *\/$/;"	m	struct:efm_S	file:	access:public
efm_S::next	vim/vim/src/quickfix.c	/^    efm_T	    *next;	\/* pointer to next (NULL if last) *\/$/;"	m	struct:efm_S	file:	access:public
efm_S::prefix	vim/vim/src/quickfix.c	/^    char_u	    prefix;	\/* prefix of this format line: *\/$/;"	m	struct:efm_S	file:	access:public
efm_S::prog	vim/vim/src/quickfix.c	/^    regprog_T	    *prog;	\/* pre-formatted part of 'errorformat' *\/$/;"	m	struct:efm_S	file:	access:public
efm_T	vim/vim/src/quickfix.c	/^typedef struct efm_S efm_T;$/;"	t	typeref:struct:efm_S	file:
efm_to_regpat	vim/vim/src/quickfix.c	/^efm_to_regpat($/;"	f	file:	signature:( char_u *efm, int len, efm_T *fmt_ptr, char_u *regpat, char_u *errmsg)
elapsed	vim/vim/src/misc2.c	/^elapsed(DWORD start_tick)$/;"	f	signature:(DWORD start_tick)
elapsed	vim/vim/src/misc2.c	/^elapsed(struct timeval *start_tv)$/;"	f	signature:(struct timeval *start_tv)
elapsed	vim/vim/src/vim.h	/^     long elapsed(DWORD start_tick);$/;"	p	signature:(DWORD start_tick)
elapsed	vim/vim/src/vim.h	/^    long elapsed(struct timeval *start_tv);$/;"	p	signature:(struct timeval *start_tv)
emoji_all	vim/vim/src/mbyte.c	/^static struct interval emoji_all[] =$/;"	v	typeref:struct:interval	file:
empty	vim/vim/src/gui_at_sb.h	/^typedef struct {int empty;} ScrollbarClassPart;$/;"	m	struct:__anon85	access:public
empty	vim/vim/src/regexp_nfa.c	/^static Frag_T empty;$/;"	v	file:
empty	vim/vim/src/structs.h	/^    int		empty;		\/* op_start and op_end the same (only used by$/;"	m	struct:oparg_S	access:public
empty_curbuf	vim/vim/src/buffer.c	/^empty_curbuf($/;"	f	file:	signature:( int close_others, int forceit, int action)
empty_curbuf	vim/vim/src/buffer.c	/^static int	empty_curbuf(int close_others, int forceit, int action);$/;"	p	file:	signature:(int close_others, int forceit, int action)
empty_option	vim/vim/src/globals.h	/^EXTERN char_u	*empty_option INIT(= (char_u *)"");$/;"	v
empty_prop	vim/vim/src/if_xcmdsrv.c	/^static char_u	*empty_prop = (char_u *)"";	\/* empty GetRegProp() result *\/$/;"	v	file:
empty_title	vim/vim/src/gui_photon.c	/^static char	*empty_title = "    ";$/;"	v	file:
emsg	vim/vim/src/message.c	/^emsg(char_u *s)$/;"	f	signature:(char_u *s)
emsg2	vim/vim/src/message.c	/^emsg2(char_u *s, char_u *a1)$/;"	f	signature:(char_u *s, char_u *a1)
emsg3	vim/vim/src/message.c	/^emsg3(char_u *s, char_u *a1, char_u *a2)$/;"	f	signature:(char_u *s, char_u *a1, char_u *a2)
emsg_funcname	vim/vim/src/userfunc.c	/^emsg_funcname(char *ermsg, char_u *name)$/;"	f	file:	signature:(char *ermsg, char_u *name)
emsg_invreg	vim/vim/src/message.c	/^emsg_invreg(int name)$/;"	f	signature:(int name)
emsg_noredir	vim/vim/src/globals.h	/^EXTERN int	emsg_noredir INIT(= 0);	\/* don't redirect error messages *\/$/;"	v
emsg_not_now	vim/vim/src/message.c	/^emsg_not_now(void)$/;"	f	signature:(void)
emsg_off	vim/vim/src/globals.h	/^EXTERN int	emsg_off INIT(= 0);	    \/* don't display errors for now,$/;"	v
emsg_on_display	vim/vim/src/globals.h	/^EXTERN int	emsg_on_display INIT(= FALSE);	\/* there is an error message *\/$/;"	v
emsg_severe	vim/vim/src/globals.h	/^EXTERN int	emsg_severe INIT(= FALSE);   \/* use message of next of several$/;"	v
emsg_silent	vim/vim/src/globals.h	/^EXTERN int	emsg_silent INIT(= 0);	\/* don't print error messages *\/$/;"	v
emsg_skip	vim/vim/src/globals.h	/^EXTERN int	emsg_skip INIT(= 0);	    \/* don't display errors for$/;"	v
emsg_to_channel_log	vim/vim/src/message.c	/^static int emsg_to_channel_log = FALSE;$/;"	v	file:
emsgn	vim/vim/src/message.c	/^emsgn(char_u *s, long n)$/;"	f	signature:(char_u *s, long n)
en_dname	vim/vim/src/structs.h	/^    char_u	*en_dname;	    \/* "dname" untranslated, NULL when "dname"$/;"	m	struct:VimMenu	access:public
en_name	vim/vim/src/structs.h	/^    char_u	*en_name;	    \/* "name" untranslated, NULL when "name"$/;"	m	struct:VimMenu	access:public
enabled	vim/vim/src/structs.h	/^    int		enabled;	    \/* for which modes the menu is enabled *\/$/;"	m	struct:VimMenu	access:public
enc	vim/vim/src/libvterm/src/encoding.c	/^  VTermEncoding *enc;$/;"	m	struct:__anon41	file:	access:public
enc	vim/vim/src/libvterm/src/encoding.c	/^  const VTermEncoding enc;$/;"	m	struct:StaticTableEncoding	file:	access:public
enc	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermEncoding *enc;$/;"	m	struct:__anon33	access:public
enc2macroman	vim/vim/src/os_mac_conv.c	/^enc2macroman($/;"	f	signature:( char_u *from, size_t fromlen, char_u *to, int *tolenp, int maxtolen, char_u *rest, int *restlenp)
enc_alias_search	vim/vim/src/mbyte.c	/^enc_alias_search(char_u *name)$/;"	f	file:	signature:(char_u *name)
enc_alias_search	vim/vim/src/mbyte.c	/^static int enc_alias_search(char_u *name);$/;"	p	file:	signature:(char_u *name)
enc_alias_table	vim/vim/src/mbyte.c	/^enc_alias_table[] =$/;"	v	typeref:struct:__anon2	file:
enc_canon_props	vim/vim/src/mbyte.c	/^enc_canon_props(char_u *name)$/;"	f	signature:(char_u *name)
enc_canon_search	vim/vim/src/mbyte.c	/^enc_canon_search(char_u *name)$/;"	f	file:	signature:(char_u *name)
enc_canon_search	vim/vim/src/mbyte.c	/^static int enc_canon_search(char_u *name);$/;"	p	file:	signature:(char_u *name)
enc_canon_table	vim/vim/src/mbyte.c	/^enc_canon_table[] =$/;"	v	typeref:struct:__anon1	file:
enc_canonize	vim/vim/src/mbyte.c	/^enc_canonize(char_u *enc)$/;"	f	signature:(char_u *enc)
enc_codepage	vim/vim/src/globals.h	/^EXTERN int	enc_codepage INIT(= -1);$/;"	v
enc_dbcs	vim/vim/src/globals.h	/^EXTERN int	enc_dbcs INIT(= 0);		\/* One of DBCS_xxx values if$/;"	v
enc_latin1like	vim/vim/src/globals.h	/^EXTERN int	enc_latin1like INIT(= TRUE);	\/* 'encoding' is latin1 comp. *\/$/;"	v
enc_latin9	vim/vim/src/globals.h	/^EXTERN int	enc_latin9 INIT(= FALSE);	\/* 'encoding' is latin9 *\/$/;"	v
enc_locale	vim/vim/src/mbyte.c	/^enc_locale(void)$/;"	f	signature:(void)
enc_skip	vim/vim/src/mbyte.c	/^enc_skip(char_u *p)$/;"	f	signature:(char_u *p)
enc_to_acp	vim/vim/src/winclip.c	/^enc_to_acp($/;"	f	signature:( char_u *str, int str_size, char_u **out, int *outlen)
enc_to_utf16	vim/vim/src/winclip.c	/^enc_to_utf16(char_u *str, int *lenp)$/;"	f	signature:(char_u *str, int *lenp)
enc_unicode	vim/vim/src/globals.h	/^EXTERN int	enc_unicode INIT(= 0);	\/* 2: UCS-2 or UTF-16, 4: UCS-4 *\/$/;"	v
enc_utf8	vim/vim/src/globals.h	/^EXTERN int	enc_utf8 INIT(= FALSE);		\/* UTF-8 encoded Unicode *\/$/;"	v
encname2codepage	vim/vim/src/mbyte.c	/^encname2codepage(char_u *name)$/;"	f	signature:(char_u *name)
encode_buffer_fn	vim/vim/src/crypt.c	/^    long (*encode_buffer_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
encode_fn	vim/vim/src/crypt.c	/^    void (*encode_fn)(cryptstate_T *state, char_u *from, size_t len,$/;"	m	struct:__anon214	file:	access:public
encode_inplace_fn	vim/vim/src/crypt.c	/^    void (*encode_inplace_fn)(cryptstate_T *state, char_u *p1, size_t len,$/;"	m	struct:__anon214	file:	access:public
encoding	vim/vim/src/hardcopy.c	/^    char	*encoding;$/;"	m	struct:prt_ps_encoding_S	file:	access:public
encoding	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermEncodingInstance encoding[4], encoding_utf8;$/;"	m	struct:VTermState	access:public
encoding	vim/vim/src/libvterm/t/harness.c	/^static VTermEncodingInstance encoding;$/;"	v	file:
encoding_callback	vim/vim/src/gui_xmdlg.c	/^encoding_callback(Widget w,$/;"	f	file:	signature:(Widget w, SharedFontSelData *data, XtPointer dummy UNUSED)
encoding_callback	vim/vim/src/gui_xmdlg.c	/^static void encoding_callback(Widget w, SharedFontSelData *data,$/;"	p	file:	signature:(Widget w, SharedFontSelData *data, XtPointer dummy)
encoding_menu	vim/vim/src/gui_xmdlg.c	/^    Widget	encoding_menu;$/;"	m	struct:_SharedFontSelData	file:	access:public
encoding_part	vim/vim/src/gui_xmdlg.c	/^encoding_part(char *font, char *buf)$/;"	f	file:	signature:(char *font, char *buf)
encoding_pulldown	vim/vim/src/gui_xmdlg.c	/^    Widget	encoding_pulldown;$/;"	m	struct:_SharedFontSelData	file:	access:public
encoding_usascii	vim/vim/src/libvterm/src/encoding.c	/^static VTermEncoding encoding_usascii = {$/;"	v	file:
encoding_utf8	vim/vim/src/libvterm/src/encoding.c	/^static VTermEncoding encoding_utf8 = {$/;"	v	file:
encoding_utf8	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermEncodingInstance encoding[4], encoding_utf8;$/;"	m	struct:VTermState	access:public
encodings	vim/vim/src/hardcopy.c	/^    struct prt_ps_encoding_S	*encodings;$/;"	m	struct:prt_ps_mbfont_S	typeref:struct:prt_ps_mbfont_S::prt_ps_encoding_S	file:	access:public
encodings	vim/vim/src/libvterm/src/encoding.c	/^encodings[] = {$/;"	v	typeref:struct:__anon41	file:
end	vim/vim/src/fold.c	/^    int		end;		\/* level of fold that is forced to end below$/;"	m	struct:__anon95	file:	access:public
end	vim/vim/src/if_py_both.h	/^    PyInt end;$/;"	m	struct:__anon112	access:public
end	vim/vim/src/regexp_nfa.c	/^	    char_u	*end;$/;"	m	struct:__anon116::__anon117::linepos	file:	access:public
end	vim/vim/src/regexp_nfa.c	/^    } end;			\/* where the match must end *\/$/;"	m	struct:nfa_pim_S	typeref:union:nfa_pim_S::__anon119	file:	access:public
end	vim/vim/src/search.c	/^    int		end;		\/* search set cursor at end *\/$/;"	m	struct:soffset	file:	access:public
end	vim/vim/src/structs.h	/^    pos_T	end;		\/* end of the operator *\/$/;"	m	struct:oparg_S	access:public
end	vim/vim/src/vim.h	/^    pos_T	end;		\/* End of selected area *\/$/;"	m	struct:VimClipboard	access:public
endRange	vim/vim/src/gui_mac.c	/^    long endRange; \/\/ end of selection range (if line < 0)$/;"	m	struct:SelectionRange	file:	access:public
endSelection	vim/vim/src/gui_at_fs.c	/^    int		endSelection;$/;"	m	struct:__anon236	file:	access:public
end_adjusted	vim/vim/src/structs.h	/^    int		end_adjusted;	\/* backuped b_op_end one char (only used by$/;"	m	struct:oparg_S	access:public
end_char_vcols	vim/vim/src/ops.c	/^    colnr_T	end_char_vcols;	\/* number of vcols of post-block char *\/$/;"	m	struct:block_def	file:	access:public
end_col	vim/vim/src/libvterm/include/vterm.h	/^  int end_col;$/;"	m	struct:__anon48	access:public
end_col	vim/vim/src/regexp_nfa.c	/^	    colnr_T	end_col;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
end_col_nr	vim/vim/src/ex_cmds.c	/^	    varnumber_T	end_col_nr;		\/* ending column number *\/$/;"	m	struct:__anon215::__anon216::__anon217	file:	access:public
end_comment_pending	vim/vim/src/globals.h	/^EXTERN int     end_comment_pending INIT(= NUL);$/;"	v
end_dynamic_lua	vim/vim/src/if_lua.c	/^end_dynamic_lua(void)$/;"	f	file:	signature:(void)
end_dynamic_python	vim/vim/src/if_python.c	/^end_dynamic_python(void)$/;"	f	file:	signature:(void)
end_dynamic_python3	vim/vim/src/if_python3.c	/^end_dynamic_python3(void)$/;"	f	file:	signature:(void)
end_dynamic_ruby	vim/vim/src/if_ruby.c	/^end_dynamic_ruby(void)$/;"	f	file:	signature:(void)
end_global_changes	vim/vim/src/ui.c	/^end_global_changes(void)$/;"	f	signature:(void)
end_lnum	vim/vim/src/regexp_nfa.c	/^	    linenr_T	end_lnum;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
end_row	vim/vim/src/libvterm/include/vterm.h	/^  int end_row;$/;"	m	struct:__anon48	access:public
end_search_hl	vim/vim/src/screen.c	/^end_search_hl(void)$/;"	f	file:	signature:(void)
end_search_hl	vim/vim/src/screen.c	/^static void end_search_hl(void);$/;"	p	file:	signature:(void)
end_vcol	vim/vim/src/ops.c	/^    colnr_T	end_vcol;	\/* start col of 1st char wholly after block *\/$/;"	m	struct:block_def	file:	access:public
end_vcol	vim/vim/src/structs.h	/^    colnr_T	end_vcol;	\/* end col for block mode operator *\/$/;"	m	struct:oparg_S	access:public
end_visual_mode	vim/vim/src/normal.c	/^end_visual_mode(void)$/;"	f	signature:(void)
end_word	vim/vim/src/search.c	/^end_word($/;"	f	signature:( long count, int bigword, int stop, int empty)
endcol	vim/vim/src/structs.h	/^    colnr_T	endcol;	 \/* in win_line() points to char where HL ends *\/$/;"	m	struct:__anon201	access:public
endp	vim/vim/src/regexp.h	/^    char_u		*endp[NSUBEXP];$/;"	m	struct:__anon145	access:public
endpos	vim/vim/src/regexp.h	/^    lpos_T		endpos[NSUBEXP];$/;"	m	struct:__anon146	access:public
ends_excmd	vim/vim/src/ex_docmd.c	/^ends_excmd(int c)$/;"	f	signature:(int c)
ends_in_white	vim/vim/src/ops.c	/^ends_in_white(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
ends_in_white	vim/vim/src/ops.c	/^static int	ends_in_white(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
endspaces	vim/vim/src/ops.c	/^    int		endspaces;	\/* 'extra' cols after last char *\/$/;"	m	struct:block_def	file:	access:public
engine	vim/vim/src/regexp.h	/^    regengine_T		*engine;$/;"	m	struct:__anon143	access:public
engine	vim/vim/src/regexp.h	/^    regengine_T		*engine;$/;"	m	struct:__anon144	access:public
engine	vim/vim/src/regexp.h	/^    regengine_T		*engine;$/;"	m	struct:regprog	access:public
enhancedContrast	vim/vim/src/gui_dwrite.h	/^    float enhancedContrast;$/;"	m	struct:DWriteRenderingParams	access:public
enhancedbutton	vim/vim/src/gui_xmebwp.h	/^    XmEnhancedButtonPart enhancedbutton;$/;"	m	struct:_XmEnhancedButtonRec	access:public
enhancedbutton_class	vim/vim/src/gui_xmebwp.h	/^    XmEnhancedButtonClassPart enhancedbutton_class;$/;"	m	struct:__anon4	access:public
enr	vim/vim/src/quickfix.c	/^    int		enr;$/;"	m	struct:__anon14	file:	access:public
ensure_ruby_initialized	vim/vim/src/if_ruby.c	/^static int ensure_ruby_initialized(void)$/;"	f	file:	signature:(void)
ensure_ruby_initialized	vim/vim/src/if_ruby.c	/^static int ensure_ruby_initialized(void);$/;"	p	file:	signature:(void)
enter_buffer	vim/vim/src/buffer.c	/^enter_buffer(buf_T *buf)$/;"	f	signature:(buf_T *buf)
enter_cleanup	vim/vim/src/ex_eval.c	/^enter_cleanup(cleanup_T *csp)$/;"	f	signature:(cleanup_T *csp)
enter_notify_event	vim/vim/src/gui_gtk_x11.c	/^enter_notify_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventCrossing *event UNUSED, gpointer data UNUSED)
enter_tabpage	vim/vim/src/window.c	/^enter_tabpage($/;"	f	file:	signature:( tabpage_T *tp, buf_T *old_curbuf UNUSED, int trigger_enter_autocmds, int trigger_leave_autocmds)
enter_tabpage	vim/vim/src/window.c	/^static void enter_tabpage(tabpage_T *tp, buf_T *old_curbuf, int trigger_enter_autocmds, int trigger_leave_autocmds);$/;"	p	file:	signature:(tabpage_T *tp, buf_T *old_curbuf, int trigger_enter_autocmds, int trigger_leave_autocmds)
entered_free_all_mem	vim/vim/src/globals.h	/^EXTERN int	entered_free_all_mem INIT(= FALSE);$/;"	v
entries	vim/vim/src/gui_at_fs.c	/^    SFEntry	*entries;$/;"	m	struct:__anon236	file:	access:public
entry_activate_callback	vim/vim/src/gui_motif.c	/^entry_activate_callback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
entry_activate_callback	vim/vim/src/gui_motif.c	/^static void entry_activate_callback(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
entry_activate_cb	vim/vim/src/gui_gtk.c	/^entry_activate_cb(GtkWidget *widget UNUSED, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer data)
entry_activate_cb	vim/vim/src/gui_gtk.c	/^static void entry_activate_cb(GtkWidget *widget, gpointer data);$/;"	p	file:	signature:(GtkWidget *widget, gpointer data)
entry_changed_cb	vim/vim/src/gui_gtk.c	/^entry_changed_cb(GtkWidget * entry, GtkWidget * dialog)$/;"	f	file:	signature:(GtkWidget * entry, GtkWidget * dialog)
entry_changed_cb	vim/vim/src/gui_gtk.c	/^static void entry_changed_cb(GtkWidget *entry, GtkWidget *dialog);$/;"	p	file:	signature:(GtkWidget *entry, GtkWidget *dialog)
enumWindowsGetNames	vim/vim/src/os_mswin.c	/^enumWindowsGetNames(HWND hwnd, LPARAM lparam)$/;"	f	file:	signature:(HWND hwnd, LPARAM lparam)
enumWindowsGetServer	vim/vim/src/os_mswin.c	/^enumWindowsGetServer(HWND hwnd, LPARAM lparam)$/;"	f	file:	signature:(HWND hwnd, LPARAM lparam)
environment	vim/vim/src/if_mzsch.c	/^static Scheme_Env    *environment = NULL;$/;"	v	file:
envsize	vim/vim/src/misc2.c	/^static int  envsize = -1;	\/* current size of environment *\/$/;"	v	file:
equ	vim/vim/src/os_vms.c	/^    ITEM	equ;$/;"	m	struct:__anon27	file:	access:public
erase	vim/vim/src/libvterm/include/vterm.h	/^  int (*erase)(VTermRect rect, int selective, void *user);$/;"	m	struct:__anon60	access:public
erase	vim/vim/src/libvterm/src/screen.c	/^static int erase(VTermRect rect, int selective, void *user)$/;"	f	file:	signature:(VTermRect rect, int selective, void *user)
erase	vim/vim/src/libvterm/src/state.c	/^static void erase(VTermState *state, VTermRect rect, int selective)$/;"	f	file:	signature:(VTermState *state, VTermRect rect, int selective)
erase_internal	vim/vim/src/libvterm/src/screen.c	/^static int erase_internal(VTermRect rect, int selective, void *user)$/;"	f	file:	signature:(VTermRect rect, int selective, void *user)
erase_user	vim/vim/src/libvterm/src/screen.c	/^static int erase_user(VTermRect rect, int selective UNUSED, void *user)$/;"	f	file:	signature:(VTermRect rect, int selective UNUSED, void *user)
errmsg	vim/vim/src/ex_cmds.h	/^    char_u	*errmsg;	\/* returned error message *\/$/;"	m	struct:exarg	access:public
errmsg	vim/vim/src/quickfix.c	/^    char_u	*errmsg;$/;"	m	struct:__anon14	file:	access:public
errmsglen	vim/vim/src/quickfix.c	/^    int		errmsglen;$/;"	m	struct:__anon14	file:	access:public
error	vim/vim/src/ex_cmds2.c	/^    int		error;		\/* TRUE if LF found after CR-LF *\/$/;"	m	struct:source_cookie	file:	access:public
error	vim/vim/src/if_py_both.h	/^    long error;$/;"	m	struct:__anon96	access:public
errorHandler	vim/vim/src/nbdebug.c	/^errorHandler($/;"	f	file:	signature:( Display *dpy, XErrorEvent *err)
errorHandler	vim/vim/src/nbdebug.c	/^static int	 errorHandler(Display *, XErrorEvent *);$/;"	p	file:	signature:(Display *, XErrorEvent *)
errorHandler	vim/vim/src/wsdebug.c	/^errorHandler($/;"	f	file:	signature:( Display *dpy, XErrorEvent *err)
errorHandler	vim/vim/src/wsdebug.c	/^static int	 errorHandler(Display *, XErrorEvent *);$/;"	p	file:	signature:(Display *, XErrorEvent *)
error_ga	vim/vim/src/globals.h	/^EXTERN garray_T error_ga$/;"	v
error_print	vim/vim/src/if_ruby.c	/^static void error_print(int state)$/;"	f	file:	signature:(int state)
error_print	vim/vim/src/if_ruby.c	/^static void error_print(int);$/;"	p	file:	signature:(int)
ervené	vim/vim/runtime/tutor/tutor.cs	/^      1)  Rù¾e jsou èervené,$/;"	p
ervené	vim/vim/runtime/tutor/tutor.cs	/^     a) Rù¾e jsou èervené,$/;"	p
escape	vim/vim/src/libvterm/include/vterm.h	/^  int (*escape)(const char *bytes, size_t len, void *user);$/;"	m	struct:__anon59	access:public
escape_chars	vim/vim/src/globals.h	/^EXTERN char_u	*escape_chars INIT(= (char_u *)" \\t\\\\\\"|");$/;"	v
escape_fname	vim/vim/src/ex_getln.c	/^escape_fname(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
escape_fname	vim/vim/src/ex_getln.c	/^static void	escape_fname(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
eslist_T	vim/vim/src/structs.h	/^typedef struct eslist_elem eslist_T;$/;"	t	typeref:struct:eslist_elem
eslist_elem	vim/vim/src/structs.h	/^struct eslist_elem$/;"	s
eslist_elem::next	vim/vim/src/structs.h	/^    eslist_T	*next;			\/* next element on the list *\/$/;"	m	struct:eslist_elem	access:public
eslist_elem::saved_emsg_silent	vim/vim/src/structs.h	/^    int		saved_emsg_silent;	\/* saved value of "emsg_silent" *\/$/;"	m	struct:eslist_elem	access:public
etoa64	vim/vim/src/xxd/xxd.c	/^static unsigned char etoa64[] =$/;"	v	file:
eval0	vim/vim/src/eval.c	/^eval0($/;"	f	signature:( char_u *arg, typval_T *rettv, char_u **nextcmd, int evaluate)
eval1	vim/vim/src/eval.c	/^eval1(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval2	vim/vim/src/eval.c	/^eval2(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval2	vim/vim/src/eval.c	/^static int eval2(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval3	vim/vim/src/eval.c	/^eval3(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval3	vim/vim/src/eval.c	/^static int eval3(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval4	vim/vim/src/eval.c	/^eval4(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval4	vim/vim/src/eval.c	/^static int eval4(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval5	vim/vim/src/eval.c	/^eval5(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval5	vim/vim/src/eval.c	/^static int eval5(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
eval6	vim/vim/src/eval.c	/^eval6($/;"	f	file:	signature:( char_u **arg, typval_T *rettv, int evaluate, int want_string)
eval6	vim/vim/src/eval.c	/^static int eval6(char_u **arg, typval_T *rettv, int evaluate, int want_string);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate, int want_string)
eval7	vim/vim/src/eval.c	/^eval7($/;"	f	file:	signature:( char_u **arg, typval_T *rettv, int evaluate, int want_string UNUSED)
eval7	vim/vim/src/eval.c	/^static int eval7(char_u **arg, typval_T *rettv, int evaluate, int want_string);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate, int want_string)
eval_charconvert	vim/vim/src/eval.c	/^eval_charconvert($/;"	f	signature:( char_u *enc_from, char_u *enc_to, char_u *fname_from, char_u *fname_to)
eval_clear	vim/vim/src/eval.c	/^eval_clear(void)$/;"	f	signature:(void)
eval_client_expr_to_string	vim/vim/src/main.c	/^eval_client_expr_to_string(char_u *expr)$/;"	f	signature:(char_u *expr)
eval_diff	vim/vim/src/eval.c	/^eval_diff($/;"	f	signature:( char_u *origfile, char_u *newfile, char_u *outfile)
eval_enc_string_protect	vim/vim/src/if_ruby.c	/^eval_enc_string_protect(const char *str, int *state)$/;"	f	file:	signature:(const char *str, int *state)
eval_expr	vim/vim/src/eval.c	/^eval_expr(char_u *arg, char_u **nextcmd)$/;"	f	signature:(char_u *arg, char_u **nextcmd)
eval_fname_script	vim/vim/src/userfunc.c	/^eval_fname_script(char_u *p)$/;"	f	signature:(char_u *p)
eval_fname_sid	vim/vim/src/userfunc.c	/^eval_fname_sid(char_u *p)$/;"	f	file:	signature:(char_u *p)
eval_foldexpr	vim/vim/src/eval.c	/^eval_foldexpr(char_u *arg, int *cp)$/;"	f	signature:(char_u *arg, int *cp)
eval_for_line	vim/vim/src/eval.c	/^eval_for_line($/;"	f	signature:( char_u *arg, int *errp, char_u **nextcmdp, int skip)
eval_includeexpr	vim/vim/src/window.c	/^eval_includeexpr(char_u *ptr, int len)$/;"	f	file:	signature:(char_u *ptr, int len)
eval_includeexpr	vim/vim/src/window.c	/^static char_u *eval_includeexpr(char_u *ptr, int len);$/;"	p	file:	signature:(char_u *ptr, int len)
eval_index	vim/vim/src/eval.c	/^eval_index($/;"	f	file:	signature:( char_u **arg, typval_T *rettv, int evaluate, int verbose)
eval_index	vim/vim/src/eval.c	/^static int eval_index(char_u **arg, typval_T *rettv, int evaluate, int verbose);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate, int verbose)
eval_init	vim/vim/src/eval.c	/^eval_init(void)$/;"	f	signature:(void)
eval_input	vim/vim/src/if_python.c	120;"	d	file:
eval_isnamec	vim/vim/src/eval.c	/^eval_isnamec(int c)$/;"	f	signature:(int c)
eval_isnamec1	vim/vim/src/eval.c	/^eval_isnamec1(int c)$/;"	f	signature:(int c)
eval_lavars_used	vim/vim/src/globals.h	/^EXTERN int *eval_lavars_used INIT(= NULL);$/;"	v
eval_map_expr	vim/vim/src/getchar.c	/^eval_map_expr($/;"	f	file:	signature:( char_u *str, int c)
eval_map_expr	vim/vim/src/getchar.c	/^static char_u	*eval_map_expr(char_u *str, int c);$/;"	p	file:	signature:(char_u *str, int c)
eval_patch	vim/vim/src/eval.c	/^eval_patch($/;"	f	signature:( char_u *origfile, char_u *difffile, char_u *outfile)
eval_printexpr	vim/vim/src/eval.c	/^eval_printexpr(char_u *fname, char_u *args)$/;"	f	signature:(char_u *fname, char_u *args)
eval_soundfold	vim/vim/src/spell.c	/^eval_soundfold(char_u *word)$/;"	f	signature:(char_u *word)
eval_spell_expr	vim/vim/src/eval.c	/^eval_spell_expr(char_u *badword, char_u *expr)$/;"	f	signature:(char_u *badword, char_u *expr)
eval_to_bool	vim/vim/src/eval.c	/^eval_to_bool($/;"	f	signature:( char_u *arg, int *error, char_u **nextcmd, int skip)
eval_to_number	vim/vim/src/eval.c	/^eval_to_number(char_u *expr)$/;"	f	signature:(char_u *expr)
eval_to_string	vim/vim/src/eval.c	/^eval_to_string($/;"	f	signature:( char_u *arg, char_u **nextcmd, int convert)
eval_to_string_safe	vim/vim/src/eval.c	/^eval_to_string_safe($/;"	f	signature:( char_u *arg, char_u **nextcmd, int use_sandbox)
eval_to_string_skip	vim/vim/src/eval.c	/^eval_to_string_skip($/;"	f	signature:( char_u *arg, char_u **nextcmd, int skip)
eval_vars	vim/vim/src/ex_docmd.c	/^eval_vars($/;"	f	signature:( char_u *src, char_u *srcstart, int *usedlen, linenr_T *lnump, char_u **errormsg, int *escaped)
eval_with_exn_handling	vim/vim/src/if_mzsch.c	/^eval_with_exn_handling(void *data, Scheme_Closed_Prim *what, Scheme_Object **ret)$/;"	f	file:	signature:(void *data, Scheme_Closed_Prim *what, Scheme_Object **ret)
eval_with_exn_handling	vim/vim/src/if_mzsch.c	/^static int eval_with_exn_handling(void *, Scheme_Closed_Prim *,$/;"	p	file:	signature:(void *, Scheme_Closed_Prim *, Scheme_Object **ret)
event	vim/vim/src/fileio.c	/^    event_T	event;		\/* current event *\/$/;"	m	struct:AutoPatCmd	file:	access:public
event	vim/vim/src/fileio.c	/^    event_T	event;	\/* event number *\/$/;"	m	struct:event_name	file:	access:public
event_T	vim/vim/src/vim.h	/^typedef enum auto_event event_T;$/;"	t	typeref:enum:auto_event
event_buffer	vim/vim/src/gui.h	/^    PhEvent_t	*event_buffer;$/;"	m	struct:Gui	access:public
event_ignored	vim/vim/src/fileio.c	/^event_ignored(event_T event)$/;"	f	file:	signature:(event_T event)
event_ignored	vim/vim/src/fileio.c	/^static int event_ignored(event_T event);$/;"	p	file:	signature:(event_T event)
event_name	vim/vim/src/fileio.c	/^static struct event_name$/;"	s	file:
event_name2nr	vim/vim/src/fileio.c	/^event_name2nr(char_u *start, char_u **end)$/;"	f	file:	signature:(char_u *start, char_u **end)
event_name2nr	vim/vim/src/fileio.c	/^static event_T event_name2nr(char_u *start, char_u **end);$/;"	p	file:	signature:(char_u *start, char_u **end)
event_name::event	vim/vim/src/fileio.c	/^    event_T	event;	\/* event number *\/$/;"	m	struct:event_name	file:	access:public
event_name::name	vim/vim/src/fileio.c	/^    char	*name;	\/* event name *\/$/;"	m	struct:event_name	file:	access:public
event_names	vim/vim/src/fileio.c	/^} event_names[] =$/;"	v	typeref:struct:event_name	file:
event_nr2name	vim/vim/src/fileio.c	/^event_nr2name(event_T event)$/;"	f	file:	signature:(event_T event)
event_nr2name	vim/vim/src/fileio.c	/^static char_u *event_nr2name(event_T event);$/;"	p	file:	signature:(event_T event)
event_time	vim/vim/src/gui.h	/^    guint32	event_time;$/;"	m	struct:Gui	access:public
evim_mode	vim/vim/src/structs.h	/^    int		evim_mode;		\/* started as "evim" *\/$/;"	m	struct:__anon210	access:public
ex_X	vim/vim/src/ex_docmd.c	/^ex_X(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_X	vim/vim/src/ex_docmd.c	/^static void	ex_X(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_X	vim/vim/src/ex_docmd.c	444;"	d	file:
ex_abbreviate	vim/vim/src/ex_docmd.c	/^ex_abbreviate(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_abbreviate	vim/vim/src/ex_docmd.c	/^static void	ex_abbreviate(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_abclear	vim/vim/src/ex_docmd.c	/^ex_abclear(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_abclear	vim/vim/src/ex_docmd.c	/^static void	ex_abclear(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_align	vim/vim/src/ex_cmds.c	/^ex_align(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_all	vim/vim/src/ex_docmd.c	/^ex_all(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_all	vim/vim/src/ex_docmd.c	176;"	d	file:
ex_append	vim/vim/src/ex_cmds.c	/^ex_append(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_argadd	vim/vim/src/ex_cmds2.c	/^ex_argadd(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_argadd	vim/vim/src/ex_docmd.c	209;"	d	file:
ex_argdelete	vim/vim/src/ex_cmds2.c	/^ex_argdelete(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_argdelete	vim/vim/src/ex_docmd.c	210;"	d	file:
ex_argedit	vim/vim/src/ex_cmds2.c	/^ex_argedit(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_argedit	vim/vim/src/ex_docmd.c	208;"	d	file:
ex_args	vim/vim/src/ex_cmds2.c	/^ex_args(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_argument	vim/vim/src/ex_cmds2.c	/^ex_argument(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_at	vim/vim/src/ex_docmd.c	/^ex_at(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_at	vim/vim/src/ex_docmd.c	/^static void	ex_at(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_autocmd	vim/vim/src/ex_docmd.c	/^ex_autocmd(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_autocmd	vim/vim/src/ex_docmd.c	/^static void	ex_autocmd(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_autocmd	vim/vim/src/ex_docmd.c	88;"	d	file:
ex_bang	vim/vim/src/ex_docmd.c	/^ex_bang(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_bang	vim/vim/src/ex_docmd.c	/^static void	ex_bang(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_behave	vim/vim/src/ex_docmd.c	/^ex_behave(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_behave	vim/vim/src/ex_docmd.c	/^static void	ex_behave(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_blast	vim/vim/src/ex_docmd.c	/^ex_blast(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_blast	vim/vim/src/ex_docmd.c	/^static void	ex_blast(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_blast	vim/vim/src/ex_docmd.c	107;"	d	file:
ex_bmodified	vim/vim/src/ex_docmd.c	/^ex_bmodified(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_bmodified	vim/vim/src/ex_docmd.c	/^static void	ex_bmodified(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_bmodified	vim/vim/src/ex_docmd.c	103;"	d	file:
ex_bnext	vim/vim/src/ex_docmd.c	/^ex_bnext(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_bnext	vim/vim/src/ex_docmd.c	/^static void	ex_bnext(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_bnext	vim/vim/src/ex_docmd.c	104;"	d	file:
ex_bprevious	vim/vim/src/ex_docmd.c	/^ex_bprevious(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_bprevious	vim/vim/src/ex_docmd.c	/^static void	ex_bprevious(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_bprevious	vim/vim/src/ex_docmd.c	105;"	d	file:
ex_break	vim/vim/src/ex_docmd.c	378;"	d	file:
ex_break	vim/vim/src/ex_eval.c	/^ex_break(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_breakadd	vim/vim/src/ex_cmds2.c	/^ex_breakadd(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_breakadd	vim/vim/src/ex_docmd.c	473;"	d	file:
ex_breakdel	vim/vim/src/ex_cmds2.c	/^ex_breakdel(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_breakdel	vim/vim/src/ex_docmd.c	475;"	d	file:
ex_breaklist	vim/vim/src/ex_cmds2.c	/^ex_breaklist(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_breaklist	vim/vim/src/ex_docmd.c	476;"	d	file:
ex_brewind	vim/vim/src/ex_docmd.c	/^ex_brewind(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_brewind	vim/vim/src/ex_docmd.c	/^static void	ex_brewind(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_brewind	vim/vim/src/ex_docmd.c	106;"	d	file:
ex_buffer	vim/vim/src/ex_docmd.c	/^ex_buffer(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_buffer	vim/vim/src/ex_docmd.c	/^static void	ex_buffer(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_buffer	vim/vim/src/ex_docmd.c	102;"	d	file:
ex_buffer_all	vim/vim/src/buffer.c	/^ex_buffer_all(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_buffer_all	vim/vim/src/ex_docmd.c	112;"	d	file:
ex_bunload	vim/vim/src/ex_docmd.c	/^ex_bunload(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_bunload	vim/vim/src/ex_docmd.c	/^static void	ex_bunload(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_bunload	vim/vim/src/ex_docmd.c	101;"	d	file:
ex_call	vim/vim/src/ex_docmd.c	372;"	d	file:
ex_call	vim/vim/src/userfunc.c	/^ex_call(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_catch	vim/vim/src/ex_docmd.c	382;"	d	file:
ex_catch	vim/vim/src/ex_eval.c	/^ex_catch(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cbottom	vim/vim/src/ex_docmd.c	133;"	d	file:
ex_cbottom	vim/vim/src/quickfix.c	/^ex_cbottom(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_cbuffer	vim/vim/src/ex_docmd.c	119;"	d	file:
ex_cbuffer	vim/vim/src/quickfix.c	/^ex_cbuffer(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cc	vim/vim/src/ex_docmd.c	120;"	d	file:
ex_cc	vim/vim/src/quickfix.c	/^ex_cc(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cclose	vim/vim/src/ex_docmd.c	130;"	d	file:
ex_cclose	vim/vim/src/quickfix.c	/^ex_cclose(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cd	vim/vim/src/ex_docmd.c	/^ex_cd(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cexpr	vim/vim/src/ex_docmd.c	136;"	d	file:
ex_cexpr	vim/vim/src/quickfix.c	/^ex_cexpr(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cfile	vim/vim/src/ex_docmd.c	122;"	d	file:
ex_cfile	vim/vim/src/quickfix.c	/^ex_cfile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_change	vim/vim/src/ex_cmds.c	/^ex_change(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_changes	vim/vim/src/ex_docmd.c	485;"	d	file:
ex_changes	vim/vim/src/mark.c	/^ex_changes(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_checkpath	vim/vim/src/ex_docmd.c	/^ex_checkpath(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_checkpath	vim/vim/src/ex_docmd.c	/^static void	ex_checkpath(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_checkpath	vim/vim/src/ex_docmd.c	357;"	d	file:
ex_checktime	vim/vim/src/ex_cmds2.c	/^ex_checktime(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_checktime	vim/vim/src/ex_docmd.c	109;"	d	file:
ex_clearjumps	vim/vim/src/ex_docmd.c	484;"	d	file:
ex_clearjumps	vim/vim/src/mark.c	/^ex_clearjumps(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_close	vim/vim/src/ex_docmd.c	/^ex_close(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_close	vim/vim/src/ex_docmd.c	/^static void	ex_close(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_close	vim/vim/src/ex_docmd.c	174;"	d	file:
ex_cnext	vim/vim/src/ex_docmd.c	121;"	d	file:
ex_cnext	vim/vim/src/quickfix.c	/^ex_cnext(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_colorscheme	vim/vim/src/ex_docmd.c	/^ex_colorscheme(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_colorscheme	vim/vim/src/ex_docmd.c	/^static void	ex_colorscheme(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_comclear	vim/vim/src/ex_docmd.c	/^ex_comclear(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_comclear	vim/vim/src/ex_docmd.c	58;"	d	file:
ex_command	vim/vim/src/ex_docmd.c	/^ex_command(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_command	vim/vim/src/ex_docmd.c	/^static void ex_command(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_command	vim/vim/src/ex_docmd.c	57;"	d	file:
ex_compiler	vim/vim/src/ex_cmds2.c	/^ex_compiler(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_compiler	vim/vim/src/ex_docmd.c	406;"	d	file:
ex_continue	vim/vim/src/ex_docmd.c	377;"	d	file:
ex_continue	vim/vim/src/ex_eval.c	/^ex_continue(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_copen	vim/vim/src/ex_docmd.c	131;"	d	file:
ex_copen	vim/vim/src/quickfix.c	/^ex_copen(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_copy	vim/vim/src/ex_cmds.c	/^ex_copy(linenr_T line1, linenr_T line2, linenr_T n)$/;"	f	signature:(linenr_T line1, linenr_T line2, linenr_T n)
ex_copymove	vim/vim/src/ex_docmd.c	/^ex_copymove(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_copymove	vim/vim/src/ex_docmd.c	/^static void	ex_copymove(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_cquit	vim/vim/src/ex_docmd.c	/^ex_cquit(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_cquit	vim/vim/src/ex_docmd.c	/^static void	ex_cquit(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_cscope	vim/vim/src/ex_docmd.c	246;"	d	file:
ex_cscope	vim/vim/src/if_cscope.c	/^ex_cscope(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cstag	vim/vim/src/ex_docmd.c	248;"	d	file:
ex_cstag	vim/vim/src/if_cscope.c	/^ex_cstag(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_cwindow	vim/vim/src/ex_docmd.c	132;"	d	file:
ex_cwindow	vim/vim/src/quickfix.c	/^ex_cwindow(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_debug	vim/vim/src/ex_cmds2.c	/^ex_debug(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_debug	vim/vim/src/ex_docmd.c	472;"	d	file:
ex_debuggreedy	vim/vim/src/ex_cmds2.c	/^ex_debuggreedy(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_debuggreedy	vim/vim/src/ex_docmd.c	474;"	d	file:
ex_delcommand	vim/vim/src/ex_docmd.c	/^ex_delcommand(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_delcommand	vim/vim/src/ex_docmd.c	/^static void ex_delcommand(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_delcommand	vim/vim/src/ex_docmd.c	59;"	d	file:
ex_delfunction	vim/vim/src/ex_docmd.c	391;"	d	file:
ex_delfunction	vim/vim/src/userfunc.c	/^ex_delfunction(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_delmarks	vim/vim/src/mark.c	/^ex_delmarks(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_diffgetput	vim/vim/src/diff.c	/^ex_diffgetput(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_diffgetput	vim/vim/src/ex_docmd.c	424;"	d	file:
ex_diffoff	vim/vim/src/diff.c	/^ex_diffoff(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_diffoff	vim/vim/src/ex_docmd.c	422;"	d	file:
ex_diffpatch	vim/vim/src/diff.c	/^ex_diffpatch(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_diffpatch	vim/vim/src/ex_docmd.c	423;"	d	file:
ex_diffsplit	vim/vim/src/diff.c	/^ex_diffsplit(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_diffsplit	vim/vim/src/ex_docmd.c	425;"	d	file:
ex_diffthis	vim/vim/src/diff.c	/^ex_diffthis(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_diffthis	vim/vim/src/ex_docmd.c	426;"	d	file:
ex_diffupdate	vim/vim/src/diff.c	/^ex_diffupdate($/;"	f	signature:( exarg_T *eap)
ex_diffupdate	vim/vim/src/ex_docmd.c	427;"	d	file:
ex_digraphs	vim/vim/src/ex_docmd.c	/^ex_digraphs(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_digraphs	vim/vim/src/ex_docmd.c	/^static void	ex_digraphs(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_display	vim/vim/src/ops.c	/^ex_display(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_doautoall	vim/vim/src/ex_docmd.c	90;"	d	file:
ex_doautoall	vim/vim/src/fileio.c	/^ex_doautoall(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_doautocmd	vim/vim/src/ex_docmd.c	/^ex_doautocmd(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_doautocmd	vim/vim/src/ex_docmd.c	/^static void	ex_doautocmd(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_doautocmd	vim/vim/src/ex_docmd.c	89;"	d	file:
ex_drop	vim/vim/src/ex_cmds.c	/^ex_drop(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_drop	vim/vim/src/ex_docmd.c	219;"	d	file:
ex_echo	vim/vim/src/eval.c	/^ex_echo(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_echo	vim/vim/src/ex_docmd.c	369;"	d	file:
ex_echohl	vim/vim/src/eval.c	/^ex_echohl(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_echohl	vim/vim/src/ex_docmd.c	370;"	d	file:
ex_edit	vim/vim/src/ex_docmd.c	/^ex_edit(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_edit	vim/vim/src/ex_docmd.c	/^static void	ex_edit(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_else	vim/vim/src/ex_docmd.c	375;"	d	file:
ex_else	vim/vim/src/ex_eval.c	/^ex_else(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_emenu	vim/vim/src/ex_docmd.c	80;"	d	file:
ex_emenu	vim/vim/src/menu.c	/^ex_emenu(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_endfunction	vim/vim/src/ex_docmd.c	385;"	d	file:
ex_endfunction	vim/vim/src/ex_eval.c	/^ex_endfunction(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_endif	vim/vim/src/ex_docmd.c	374;"	d	file:
ex_endif	vim/vim/src/ex_eval.c	/^ex_endif(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_endtry	vim/vim/src/ex_docmd.c	384;"	d	file:
ex_endtry	vim/vim/src/ex_eval.c	/^ex_endtry(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_endwhile	vim/vim/src/ex_docmd.c	379;"	d	file:
ex_endwhile	vim/vim/src/ex_eval.c	/^ex_endwhile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_equal	vim/vim/src/ex_docmd.c	/^ex_equal(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_equal	vim/vim/src/ex_docmd.c	/^static void	ex_equal(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_execute	vim/vim/src/eval.c	/^ex_execute(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_execute	vim/vim/src/ex_docmd.c	371;"	d	file:
ex_exit	vim/vim/src/ex_docmd.c	/^ex_exit(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_exit	vim/vim/src/ex_docmd.c	/^static void	ex_exit(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_exitval	vim/vim/src/globals.h	/^EXTERN int	ex_exitval INIT(= 0);	    \/* exit value for ex mode *\/$/;"	v
ex_exusage	vim/vim/src/ex_cmds.c	/^ex_exusage(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_file	vim/vim/src/ex_cmds.c	/^ex_file(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_filetype	vim/vim/src/ex_docmd.c	/^ex_filetype(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_filetype	vim/vim/src/ex_docmd.c	/^static void	ex_filetype(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_filetype	vim/vim/src/ex_docmd.c	418;"	d	file:
ex_finally	vim/vim/src/ex_docmd.c	383;"	d	file:
ex_finally	vim/vim/src/ex_eval.c	/^ex_finally(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_find	vim/vim/src/ex_docmd.c	/^ex_find(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_find	vim/vim/src/ex_docmd.c	/^static void	ex_find(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_findpat	vim/vim/src/ex_docmd.c	/^ex_findpat(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_findpat	vim/vim/src/ex_docmd.c	/^static void	ex_findpat(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_findpat	vim/vim/src/ex_docmd.c	356;"	d	file:
ex_finish	vim/vim/src/ex_cmds2.c	/^ex_finish(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_finish	vim/vim/src/ex_docmd.c	368;"	d	file:
ex_fold	vim/vim/src/ex_docmd.c	/^ex_fold(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_fold	vim/vim/src/ex_docmd.c	/^static void	ex_fold(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_fold	vim/vim/src/ex_docmd.c	451;"	d	file:
ex_folddo	vim/vim/src/ex_docmd.c	/^ex_folddo(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_folddo	vim/vim/src/ex_docmd.c	/^static void	ex_folddo(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_folddo	vim/vim/src/ex_docmd.c	453;"	d	file:
ex_foldopen	vim/vim/src/ex_docmd.c	/^ex_foldopen(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_foldopen	vim/vim/src/ex_docmd.c	/^static void	ex_foldopen(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_foldopen	vim/vim/src/ex_docmd.c	452;"	d	file:
ex_func_T	vim/vim/src/ex_cmds.h	/^typedef void (*ex_func_T) (exarg_T *eap);$/;"	t
ex_function	vim/vim/src/ex_docmd.c	390;"	d	file:
ex_function	vim/vim/src/userfunc.c	/^ex_function(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_global	vim/vim/src/ex_cmds.c	/^ex_global(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_goto	vim/vim/src/ex_docmd.c	/^ex_goto(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_goto	vim/vim/src/ex_docmd.c	/^static void	ex_goto(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_goto	vim/vim/src/ex_docmd.c	202;"	d	file:
ex_gui	vim/vim/src/ex_docmd.c	222;"	d	file:
ex_gui	vim/vim/src/gui.c	/^ex_gui(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_hardcopy	vim/vim/src/ex_docmd.c	19;"	d	file:
ex_hardcopy	vim/vim/src/hardcopy.c	/^ex_hardcopy(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_help	vim/vim/src/ex_cmds.c	/^ex_help(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_helpclose	vim/vim/src/ex_cmds.c	/^ex_helpclose(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_helpfind	vim/vim/src/ex_docmd.c	243;"	d	file:
ex_helpfind	vim/vim/src/gui_gtk.c	/^ex_helpfind(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_helpgrep	vim/vim/src/ex_docmd.c	126;"	d	file:
ex_helpgrep	vim/vim/src/quickfix.c	/^ex_helpgrep(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_helptags	vim/vim/src/ex_cmds.c	/^ex_helptags(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_hide	vim/vim/src/ex_docmd.c	/^ex_hide(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_hide	vim/vim/src/ex_docmd.c	/^static void	ex_hide(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_highlight	vim/vim/src/ex_docmd.c	/^ex_highlight(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_highlight	vim/vim/src/ex_docmd.c	/^static void	ex_highlight(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_history	vim/vim/src/ex_docmd.c	480;"	d	file:
ex_history	vim/vim/src/ex_getln.c	/^ex_history(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_if	vim/vim/src/ex_docmd.c	373;"	d	file:
ex_if	vim/vim/src/ex_eval.c	/^ex_if(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_intro	vim/vim/src/version.c	/^ex_intro(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_join	vim/vim/src/ex_docmd.c	/^ex_join(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_join	vim/vim/src/ex_docmd.c	/^static void	ex_join(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_jumps	vim/vim/src/ex_docmd.c	483;"	d	file:
ex_jumps	vim/vim/src/mark.c	/^ex_jumps(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_keep_indent	vim/vim/src/globals.h	/^EXTERN int	ex_keep_indent INIT(= FALSE); \/* getexmodeline(): keep indent *\/$/;"	v
ex_language	vim/vim/src/ex_cmds2.c	/^ex_language(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_language	vim/vim/src/ex_docmd.c	457;"	d	file:
ex_last	vim/vim/src/ex_cmds2.c	/^ex_last(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_later	vim/vim/src/ex_docmd.c	/^ex_later(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_later	vim/vim/src/ex_docmd.c	/^static void	ex_later(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_let	vim/vim/src/eval.c	/^ex_let(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_let	vim/vim/src/ex_docmd.c	386;"	d	file:
ex_let_one	vim/vim/src/eval.c	/^ex_let_one($/;"	f	file:	signature:( char_u *arg, typval_T *tv, int copy, char_u *endchars, char_u *op)
ex_let_one	vim/vim/src/eval.c	/^static char_u *ex_let_one(char_u *arg, typval_T *tv, int copy, char_u *endchars, char_u *op);$/;"	p	file:	signature:(char_u *arg, typval_T *tv, int copy, char_u *endchars, char_u *op)
ex_let_vars	vim/vim/src/eval.c	/^ex_let_vars($/;"	f	file:	signature:( char_u *arg_start, typval_T *tv, int copy, int semicolon, int var_count, char_u *nextchars)
ex_let_vars	vim/vim/src/eval.c	/^static int ex_let_vars(char_u *arg, typval_T *tv, int copy, int semicolon, int var_count, char_u *nextchars);$/;"	p	file:	signature:(char_u *arg, typval_T *tv, int copy, int semicolon, int var_count, char_u *nextchars)
ex_listdo	vim/vim/src/ex_cmds2.c	/^ex_listdo(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_listdo	vim/vim/src/ex_docmd.c	211;"	d	file:
ex_loadkeymap	vim/vim/src/digraph.c	/^ex_loadkeymap(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_loadkeymap	vim/vim/src/ex_docmd.c	307;"	d	file:
ex_loadview	vim/vim/src/ex_docmd.c	/^ex_loadview(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_loadview	vim/vim/src/ex_docmd.c	/^static void	ex_loadview(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_loadview	vim/vim/src/ex_docmd.c	403;"	d	file:
ex_lockvar	vim/vim/src/eval.c	/^ex_lockvar(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_lockvar	vim/vim/src/ex_docmd.c	388;"	d	file:
ex_lua	vim/vim/src/ex_docmd.c	269;"	d	file:
ex_lua	vim/vim/src/if_lua.c	/^ex_lua(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_luado	vim/vim/src/ex_docmd.c	270;"	d	file:
ex_luado	vim/vim/src/if_lua.c	/^ex_luado(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_luafile	vim/vim/src/ex_docmd.c	271;"	d	file:
ex_luafile	vim/vim/src/if_lua.c	/^ex_luafile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_make	vim/vim/src/ex_docmd.c	118;"	d	file:
ex_make	vim/vim/src/quickfix.c	/^ex_make(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_map	vim/vim/src/ex_docmd.c	/^ex_map(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_map	vim/vim/src/ex_docmd.c	/^static void	ex_map(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_mapclear	vim/vim/src/ex_docmd.c	/^ex_mapclear(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_mapclear	vim/vim/src/ex_docmd.c	/^static void	ex_mapclear(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_mark	vim/vim/src/ex_docmd.c	/^ex_mark(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_mark	vim/vim/src/ex_docmd.c	/^static void	ex_mark(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_match	vim/vim/src/ex_docmd.c	/^ex_match(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_match	vim/vim/src/ex_docmd.c	/^static void	ex_match(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_match	vim/vim/src/ex_docmd.c	439;"	d	file:
ex_may_print	vim/vim/src/ex_docmd.c	/^ex_may_print(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_menu	vim/vim/src/ex_docmd.c	81;"	d	file:
ex_menu	vim/vim/src/menu.c	/^ex_menu($/;"	f	signature:( exarg_T *eap)
ex_menutranslate	vim/vim/src/ex_docmd.c	82;"	d	file:
ex_menutranslate	vim/vim/src/menu.c	/^ex_menutranslate(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_messages	vim/vim/src/message.c	/^ex_messages(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_mkrc	vim/vim/src/ex_docmd.c	/^ex_mkrc($/;"	f	file:	signature:( exarg_T *eap)
ex_mkrc	vim/vim/src/ex_docmd.c	/^static void	ex_mkrc(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_mkspell	vim/vim/src/ex_docmd.c	259;"	d	file:
ex_mkspell	vim/vim/src/spellfile.c	/^ex_mkspell(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_mode	vim/vim/src/ex_docmd.c	/^ex_mode(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_mode	vim/vim/src/ex_docmd.c	/^static void	ex_mode(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_mzfile	vim/vim/src/ex_docmd.c	275;"	d	file:
ex_mzfile	vim/vim/src/if_mzsch.c	/^ex_mzfile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_mzscheme	vim/vim/src/ex_docmd.c	274;"	d	file:
ex_mzscheme	vim/vim/src/if_mzsch.c	/^ex_mzscheme(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_nbclose	vim/vim/src/ex_docmd.c	466;"	d	file:
ex_nbclose	vim/vim/src/netbeans.c	/^ex_nbclose(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_nbkey	vim/vim/src/ex_docmd.c	467;"	d	file:
ex_nbkey	vim/vim/src/netbeans.c	/^ex_nbkey(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_nbstart	vim/vim/src/ex_docmd.c	468;"	d	file:
ex_nbstart	vim/vim/src/netbeans.c	/^ex_nbstart($/;"	f	signature:( exarg_T *eap)
ex_nesting_level	vim/vim/src/globals.h	/^EXTERN int	ex_nesting_level INIT(= 0);	\/* nesting level *\/$/;"	v
ex_next	vim/vim/src/ex_cmds2.c	/^ex_next(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_ni	vim/vim/src/ex_docmd.c	/^ex_ni(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_no_reprint	vim/vim/src/globals.h	/^EXTERN int ex_no_reprint INIT(= FALSE); \/* no need to print after z or p *\/$/;"	v
ex_nogui	vim/vim/src/ex_docmd.c	/^ex_nogui(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_nogui	vim/vim/src/ex_docmd.c	/^static void	ex_nogui(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_nohlsearch	vim/vim/src/ex_docmd.c	/^ex_nohlsearch(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_nohlsearch	vim/vim/src/ex_docmd.c	/^static void	ex_nohlsearch(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_nohlsearch	vim/vim/src/ex_docmd.c	438;"	d	file:
ex_normal	vim/vim/src/ex_docmd.c	/^ex_normal(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_normal_busy	vim/vim/src/globals.h	/^EXTERN int	ex_normal_busy INIT(= 0); \/* recursiveness of ex_normal() *\/$/;"	v
ex_normal_lock	vim/vim/src/globals.h	/^EXTERN int	ex_normal_lock INIT(= 0); \/* forbid use of ex_normal() *\/$/;"	v
ex_oldfiles	vim/vim/src/ex_cmds.c	/^ex_oldfiles(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_oldfiles	vim/vim/src/ex_docmd.c	393;"	d	file:
ex_only	vim/vim/src/ex_docmd.c	/^ex_only(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_only	vim/vim/src/ex_docmd.c	/^static void	ex_only(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_only	vim/vim/src/ex_docmd.c	175;"	d	file:
ex_open	vim/vim/src/ex_docmd.c	/^ex_open(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_open	vim/vim/src/ex_docmd.c	/^static void	ex_open(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_operators	vim/vim/src/ex_docmd.c	/^ex_operators(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_operators	vim/vim/src/ex_docmd.c	/^static void	ex_operators(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_options	vim/vim/src/ex_cmds2.c	/^ex_options($/;"	f	signature:( exarg_T *eap UNUSED)
ex_options	vim/vim/src/ex_docmd.c	432;"	d	file:
ex_ownsyntax	vim/vim/src/ex_docmd.c	252;"	d	file:
ex_ownsyntax	vim/vim/src/syntax.c	/^ex_ownsyntax(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_packadd	vim/vim/src/ex_cmds2.c	/^ex_packadd(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_packloadall	vim/vim/src/ex_cmds2.c	/^ex_packloadall(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pclose	vim/vim/src/ex_docmd.c	/^ex_pclose(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_pclose	vim/vim/src/ex_docmd.c	/^static void	ex_pclose(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_pclose	vim/vim/src/ex_docmd.c	191;"	d	file:
ex_pedit	vim/vim/src/ex_docmd.c	/^ex_pedit(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_pedit	vim/vim/src/ex_docmd.c	/^static void	ex_pedit(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_pedit	vim/vim/src/ex_docmd.c	193;"	d	file:
ex_perl	vim/vim/src/ex_docmd.c	278;"	d	file:
ex_perldo	vim/vim/src/ex_docmd.c	279;"	d	file:
ex_popup	vim/vim/src/ex_docmd.c	/^ex_popup(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_popup	vim/vim/src/ex_docmd.c	/^static void	ex_popup(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_popup	vim/vim/src/ex_docmd.c	233;"	d	file:
ex_preserve	vim/vim/src/ex_docmd.c	/^ex_preserve(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_preserve	vim/vim/src/ex_docmd.c	/^static void	ex_preserve(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_pressedreturn	vim/vim/src/ex_docmd.c	/^static int	ex_pressedreturn = FALSE;$/;"	v	file:
ex_previous	vim/vim/src/ex_cmds2.c	/^ex_previous(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_print	vim/vim/src/ex_docmd.c	/^ex_print(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_print	vim/vim/src/ex_docmd.c	/^static void	ex_print(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_profile	vim/vim/src/ex_cmds2.c	/^ex_profile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_profile	vim/vim/src/ex_docmd.c	489;"	d	file:
ex_psearch	vim/vim/src/ex_docmd.c	/^ex_psearch(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_psearch	vim/vim/src/ex_docmd.c	/^static void	ex_psearch(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_psearch	vim/vim/src/ex_docmd.c	362;"	d	file:
ex_ptag	vim/vim/src/ex_docmd.c	/^ex_ptag(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_ptag	vim/vim/src/ex_docmd.c	/^static void	ex_ptag(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_ptag	vim/vim/src/ex_docmd.c	192;"	d	file:
ex_put	vim/vim/src/ex_docmd.c	/^ex_put(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_put	vim/vim/src/ex_docmd.c	/^static void	ex_put(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_pwd	vim/vim/src/ex_docmd.c	/^ex_pwd(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_pwd	vim/vim/src/ex_docmd.c	/^static void	ex_pwd(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_py3	vim/vim/src/ex_docmd.c	287;"	d	file:
ex_py3	vim/vim/src/if_python3.c	/^ex_py3(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_py3do	vim/vim/src/ex_docmd.c	288;"	d	file:
ex_py3do	vim/vim/src/if_python3.c	/^ex_py3do(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_py3file	vim/vim/src/ex_docmd.c	289;"	d	file:
ex_py3file	vim/vim/src/if_python3.c	/^ex_py3file(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pydo	vim/vim/src/ex_docmd.c	283;"	d	file:
ex_pydo	vim/vim/src/if_python.c	/^ex_pydo(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pyfile	vim/vim/src/ex_docmd.c	284;"	d	file:
ex_pyfile	vim/vim/src/if_python.c	/^ex_pyfile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_python	vim/vim/src/ex_docmd.c	282;"	d	file:
ex_python	vim/vim/src/if_python.c	/^ex_python(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pyx	vim/vim/src/ex_cmds2.c	/^ex_pyx(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pyx	vim/vim/src/ex_docmd.c	292;"	d	file:
ex_pyxdo	vim/vim/src/ex_cmds2.c	/^ex_pyxdo(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pyxdo	vim/vim/src/ex_docmd.c	293;"	d	file:
ex_pyxfile	vim/vim/src/ex_cmds2.c	/^ex_pyxfile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_pyxfile	vim/vim/src/ex_docmd.c	294;"	d	file:
ex_quit	vim/vim/src/ex_docmd.c	/^ex_quit(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_quit	vim/vim/src/ex_docmd.c	/^static void	ex_quit(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_quit_all	vim/vim/src/ex_docmd.c	/^ex_quit_all(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_quit_all	vim/vim/src/ex_docmd.c	/^static void	ex_quit_all(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_read	vim/vim/src/ex_docmd.c	/^ex_read(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_read	vim/vim/src/ex_docmd.c	/^static void	ex_read(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_recover	vim/vim/src/ex_docmd.c	/^ex_recover(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_recover	vim/vim/src/ex_docmd.c	/^static void	ex_recover(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_redir	vim/vim/src/ex_docmd.c	/^ex_redir(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_redir	vim/vim/src/ex_docmd.c	/^static void	ex_redir(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_redo	vim/vim/src/ex_docmd.c	/^ex_redo(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_redo	vim/vim/src/ex_docmd.c	/^static void	ex_redo(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_redraw	vim/vim/src/ex_docmd.c	/^ex_redraw(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_redrawstatus	vim/vim/src/ex_docmd.c	/^ex_redrawstatus(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_redrawstatus	vim/vim/src/ex_docmd.c	/^static void	ex_redrawstatus(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_resize	vim/vim/src/ex_docmd.c	/^ex_resize(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_resize	vim/vim/src/ex_docmd.c	/^static void	ex_resize(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_resize	vim/vim/src/ex_docmd.c	177;"	d	file:
ex_retab	vim/vim/src/ex_cmds.c	/^ex_retab(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_return	vim/vim/src/ex_docmd.c	392;"	d	file:
ex_return	vim/vim/src/userfunc.c	/^ex_return(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_rewind	vim/vim/src/ex_cmds2.c	/^ex_rewind(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_ruby	vim/vim/src/ex_docmd.c	302;"	d	file:
ex_ruby	vim/vim/src/if_ruby.c	/^void ex_ruby(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_rubydo	vim/vim/src/ex_docmd.c	303;"	d	file:
ex_rubydo	vim/vim/src/if_ruby.c	/^void ex_rubydo(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_rubyfile	vim/vim/src/ex_docmd.c	304;"	d	file:
ex_rubyfile	vim/vim/src/if_ruby.c	/^void ex_rubyfile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_rundo	vim/vim/src/ex_docmd.c	/^ex_rundo(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_rundo	vim/vim/src/ex_docmd.c	/^static void	ex_rundo(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_rundo	vim/vim/src/ex_docmd.c	265;"	d	file:
ex_runtime	vim/vim/src/ex_cmds2.c	/^ex_runtime(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_script_ni	vim/vim/src/ex_docmd.c	/^ex_script_ni(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_script_ni	vim/vim/src/ex_docmd.c	/^static void	ex_script_ni(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_scriptencoding	vim/vim/src/ex_cmds2.c	/^ex_scriptencoding(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_scriptnames	vim/vim/src/ex_cmds2.c	/^ex_scriptnames(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_scriptnames	vim/vim/src/ex_docmd.c	367;"	d	file:
ex_scscope	vim/vim/src/ex_docmd.c	247;"	d	file:
ex_scscope	vim/vim/src/if_cscope.c	/^ex_scscope(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_set	vim/vim/src/ex_docmd.c	/^ex_set(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_set	vim/vim/src/ex_docmd.c	/^static void	ex_set(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_setfiletype	vim/vim/src/ex_docmd.c	/^ex_setfiletype(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_setfiletype	vim/vim/src/ex_docmd.c	/^static void	ex_setfiletype(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_setfiletype	vim/vim/src/ex_docmd.c	419;"	d	file:
ex_shell	vim/vim/src/ex_docmd.c	/^ex_shell(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_shell	vim/vim/src/ex_docmd.c	/^static void	ex_shell(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_sign	vim/vim/src/ex_cmds.c	/^ex_sign(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_sign	vim/vim/src/ex_docmd.c	460;"	d	file:
ex_simalt	vim/vim/src/ex_docmd.c	236;"	d	file:
ex_simalt	vim/vim/src/gui_w32.c	/^ex_simalt(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_sleep	vim/vim/src/ex_docmd.c	/^ex_sleep(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_sleep	vim/vim/src/ex_docmd.c	/^static void	ex_sleep(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_smile	vim/vim/src/ex_cmds.c	/^ex_smile(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_sort	vim/vim/src/ex_cmds.c	/^ex_sort(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_source	vim/vim/src/ex_cmds2.c	/^ex_source(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_spell	vim/vim/src/ex_docmd.c	258;"	d	file:
ex_spell	vim/vim/src/spellfile.c	/^ex_spell(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_spelldump	vim/vim/src/ex_docmd.c	260;"	d	file:
ex_spelldump	vim/vim/src/spell.c	/^ex_spelldump(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_spellinfo	vim/vim/src/ex_docmd.c	261;"	d	file:
ex_spellinfo	vim/vim/src/spell.c	/^ex_spellinfo(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_spellrepall	vim/vim/src/ex_docmd.c	262;"	d	file:
ex_spellrepall	vim/vim/src/spell.c	/^ex_spellrepall(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_splitview	vim/vim/src/ex_docmd.c	/^ex_splitview(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_splitview	vim/vim/src/ex_docmd.c	178;"	d	file:
ex_stag	vim/vim/src/ex_docmd.c	/^ex_stag(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_stag	vim/vim/src/ex_docmd.c	/^static void	ex_stag(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_stag	vim/vim/src/ex_docmd.c	179;"	d	file:
ex_startinsert	vim/vim/src/ex_docmd.c	/^ex_startinsert(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_startinsert	vim/vim/src/ex_docmd.c	/^static void	ex_startinsert(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_stop	vim/vim/src/ex_docmd.c	/^ex_stop(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_stop	vim/vim/src/ex_docmd.c	/^static void	ex_stop(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_stopinsert	vim/vim/src/ex_docmd.c	/^ex_stopinsert(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_stopinsert	vim/vim/src/ex_docmd.c	/^static void	ex_stopinsert(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_submagic	vim/vim/src/ex_docmd.c	/^ex_submagic(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_submagic	vim/vim/src/ex_docmd.c	/^static void	ex_submagic(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_swapname	vim/vim/src/ex_docmd.c	/^ex_swapname(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_swapname	vim/vim/src/ex_docmd.c	/^static void	ex_swapname(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_syncbind	vim/vim/src/ex_docmd.c	/^ex_syncbind(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_syncbind	vim/vim/src/ex_docmd.c	/^static void	ex_syncbind(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_syntax	vim/vim/src/ex_docmd.c	251;"	d	file:
ex_syntax	vim/vim/src/syntax.c	/^ex_syntax(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_syntime	vim/vim/src/ex_docmd.c	255;"	d	file:
ex_syntime	vim/vim/src/syntax.c	/^ex_syntime(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_tabclose	vim/vim/src/ex_docmd.c	/^ex_tabclose(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_tabclose	vim/vim/src/ex_docmd.c	/^static void	ex_tabclose(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tabclose	vim/vim/src/ex_docmd.c	183;"	d	file:
ex_tabmove	vim/vim/src/ex_docmd.c	/^ex_tabmove(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_tabmove	vim/vim/src/ex_docmd.c	/^static void	ex_tabmove(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tabmove	vim/vim/src/ex_docmd.c	181;"	d	file:
ex_tabnext	vim/vim/src/ex_docmd.c	/^ex_tabnext(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_tabnext	vim/vim/src/ex_docmd.c	/^static void	ex_tabnext(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tabnext	vim/vim/src/ex_docmd.c	180;"	d	file:
ex_tabonly	vim/vim/src/ex_docmd.c	/^ex_tabonly(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_tabonly	vim/vim/src/ex_docmd.c	/^static void	ex_tabonly(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tabonly	vim/vim/src/ex_docmd.c	184;"	d	file:
ex_tabs	vim/vim/src/ex_docmd.c	/^ex_tabs(exarg_T *eap UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED)
ex_tabs	vim/vim/src/ex_docmd.c	/^static void	ex_tabs(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tabs	vim/vim/src/ex_docmd.c	182;"	d	file:
ex_tag	vim/vim/src/ex_docmd.c	/^ex_tag(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_tag	vim/vim/src/ex_docmd.c	/^static void	ex_tag(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tag_cmd	vim/vim/src/ex_docmd.c	/^ex_tag_cmd(exarg_T *eap, char_u *name)$/;"	f	file:	signature:(exarg_T *eap, char_u *name)
ex_tag_cmd	vim/vim/src/ex_docmd.c	/^static void	ex_tag_cmd(exarg_T *eap, char_u *name);$/;"	p	file:	signature:(exarg_T *eap, char_u *name)
ex_tcl	vim/vim/src/ex_docmd.c	297;"	d	file:
ex_tcl	vim/vim/src/if_tcl.c	/^ex_tcl(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_tcldo	vim/vim/src/ex_docmd.c	298;"	d	file:
ex_tcldo	vim/vim/src/if_tcl.c	/^ex_tcldo(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_tclfile	vim/vim/src/ex_docmd.c	299;"	d	file:
ex_tclfile	vim/vim/src/if_tcl.c	/^ex_tclfile(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_tearoff	vim/vim/src/ex_docmd.c	/^ex_tearoff(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_tearoff	vim/vim/src/ex_docmd.c	/^static void	ex_tearoff(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_tearoff	vim/vim/src/ex_docmd.c	228;"	d	file:
ex_terminal	vim/vim/src/ex_docmd.c	492;"	d	file:
ex_terminal	vim/vim/src/terminal.c	/^ex_terminal(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_throw	vim/vim/src/ex_docmd.c	380;"	d	file:
ex_throw	vim/vim/src/ex_eval.c	/^ex_throw(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_try	vim/vim/src/ex_docmd.c	381;"	d	file:
ex_try	vim/vim/src/ex_eval.c	/^ex_try(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_undo	vim/vim/src/ex_docmd.c	/^ex_undo(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_undo	vim/vim/src/ex_docmd.c	/^static void	ex_undo(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_undojoin	vim/vim/src/undo.c	/^ex_undojoin(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_undolist	vim/vim/src/undo.c	/^ex_undolist(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_unlet	vim/vim/src/eval.c	/^ex_unlet(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_unlet	vim/vim/src/ex_docmd.c	387;"	d	file:
ex_unletlock	vim/vim/src/eval.c	/^ex_unletlock($/;"	f	file:	signature:( exarg_T *eap, char_u *argstart, int deep)
ex_unletlock	vim/vim/src/eval.c	/^static void ex_unletlock(exarg_T *eap, char_u *argstart, int deep);$/;"	p	file:	signature:(exarg_T *eap, char_u *argstart, int deep)
ex_unlockvar	vim/vim/src/ex_docmd.c	389;"	d	file:
ex_unmap	vim/vim/src/ex_docmd.c	/^ex_unmap(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_unmap	vim/vim/src/ex_docmd.c	/^static void	ex_unmap(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_update	vim/vim/src/ex_cmds.c	/^ex_update(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_version	vim/vim/src/version.c	/^ex_version(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_vimgrep	vim/vim/src/ex_docmd.c	127;"	d	file:
ex_vimgrep	vim/vim/src/quickfix.c	/^ex_vimgrep(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_viminfo	vim/vim/src/ex_docmd.c	/^ex_viminfo($/;"	f	file:	signature:( exarg_T *eap)
ex_viminfo	vim/vim/src/ex_docmd.c	/^static void	ex_viminfo(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_viminfo	vim/vim/src/ex_docmd.c	411;"	d	file:
ex_viusage	vim/vim/src/ex_cmds.c	/^ex_viusage(exarg_T *eap UNUSED)$/;"	f	signature:(exarg_T *eap UNUSED)
ex_while	vim/vim/src/ex_docmd.c	376;"	d	file:
ex_while	vim/vim/src/ex_eval.c	/^ex_while(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_win_close	vim/vim/src/ex_docmd.c	/^ex_win_close($/;"	f	file:	signature:( int forceit, win_T *win, tabpage_T *tp)
ex_win_close	vim/vim/src/ex_docmd.c	/^static void	ex_win_close(int forceit, win_T *win, tabpage_T *tp);$/;"	p	file:	signature:(int forceit, win_T *win, tabpage_T *tp)
ex_wincmd	vim/vim/src/ex_docmd.c	/^ex_wincmd(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_wincmd	vim/vim/src/ex_docmd.c	/^static void	ex_wincmd(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_wincmd	vim/vim/src/ex_docmd.c	320;"	d	file:
ex_winpos	vim/vim/src/ex_docmd.c	/^ex_winpos(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_winpos	vim/vim/src/ex_docmd.c	/^static void	ex_winpos(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_winpos	vim/vim/src/ex_docmd.c	325;"	d	file:
ex_winsize	vim/vim/src/ex_docmd.c	/^ex_winsize(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_winsize	vim/vim/src/ex_docmd.c	/^static void	ex_winsize(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_wnext	vim/vim/src/ex_cmds.c	/^ex_wnext(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_write	vim/vim/src/ex_cmds.c	/^ex_write(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_wrongmodifier	vim/vim/src/ex_docmd.c	/^ex_wrongmodifier(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_wrongmodifier	vim/vim/src/ex_docmd.c	/^static void	ex_wrongmodifier(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_wsverb	vim/vim/src/ex_docmd.c	463;"	d	file:
ex_wsverb	vim/vim/src/workshop.c	/^ex_wsverb(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
ex_wundo	vim/vim/src/ex_docmd.c	/^ex_wundo(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
ex_wundo	vim/vim/src/ex_docmd.c	/^static void	ex_wundo(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
ex_wundo	vim/vim/src/ex_docmd.c	266;"	d	file:
ex_z	vim/vim/src/ex_cmds.c	/^ex_z(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
exactColors	vim/vim/src/xpm/include/xpm.h	/^    Bool exactColors;			\/* Only use exact colors for visual *\/$/;"	m	struct:__anon93	access:public
exarg	vim/vim/src/ex_cmds.h	/^struct exarg$/;"	s
exarg::addr_count	vim/vim/src/ex_cmds.h	/^    int		addr_count;	\/* the number of addresses given *\/$/;"	m	struct:exarg	access:public
exarg::addr_type	vim/vim/src/ex_cmds.h	/^    int		addr_type;	\/* type of the count\/range *\/$/;"	m	struct:exarg	access:public
exarg::amount	vim/vim/src/ex_cmds.h	/^    int		amount;		\/* number of '>' or '<' for shift command *\/$/;"	m	struct:exarg	access:public
exarg::append	vim/vim/src/ex_cmds.h	/^    int		append;		\/* TRUE with ":w >>file" command *\/$/;"	m	struct:exarg	access:public
exarg::arg	vim/vim/src/ex_cmds.h	/^    char_u	*arg;		\/* argument of the command *\/$/;"	m	struct:exarg	access:public
exarg::argt	vim/vim/src/ex_cmds.h	/^    long	argt;		\/* flags for the command *\/$/;"	m	struct:exarg	access:public
exarg::bad_char	vim/vim/src/ex_cmds.h	/^    int		bad_char;	\/* BAD_KEEP, BAD_DROP or replacement byte *\/$/;"	m	struct:exarg	access:public
exarg::cmd	vim/vim/src/ex_cmds.h	/^    char_u	*cmd;		\/* the name of the command (except for :make) *\/$/;"	m	struct:exarg	access:public
exarg::cmdidx	vim/vim/src/ex_cmds.h	/^    cmdidx_T	cmdidx;		\/* the index for the command *\/$/;"	m	struct:exarg	access:public
exarg::cmdlinep	vim/vim/src/ex_cmds.h	/^    char_u	**cmdlinep;	\/* pointer to pointer of allocated cmdline *\/$/;"	m	struct:exarg	access:public
exarg::cookie	vim/vim/src/ex_cmds.h	/^    void	*cookie;	\/* argument for getline() *\/$/;"	m	struct:exarg	access:public
exarg::cstack	vim/vim/src/ex_cmds.h	/^    struct condstack *cstack;	\/* condition stack for ":if" etc. *\/$/;"	m	struct:exarg	typeref:struct:exarg::condstack	access:public
exarg::do_ecmd_cmd	vim/vim/src/ex_cmds.h	/^    char_u	*do_ecmd_cmd;	\/* +command arg to be used in edited file *\/$/;"	m	struct:exarg	access:public
exarg::do_ecmd_lnum	vim/vim/src/ex_cmds.h	/^    linenr_T	do_ecmd_lnum;	\/* the line number in an edited file *\/$/;"	m	struct:exarg	access:public
exarg::errmsg	vim/vim/src/ex_cmds.h	/^    char_u	*errmsg;	\/* returned error message *\/$/;"	m	struct:exarg	access:public
exarg::flags	vim/vim/src/ex_cmds.h	/^    int		flags;		\/* extra flags after count: EXFLAG_ *\/$/;"	m	struct:exarg	access:public
exarg::force_bin	vim/vim/src/ex_cmds.h	/^    int		force_bin;	\/* 0, FORCE_BIN or FORCE_NOBIN *\/$/;"	m	struct:exarg	access:public
exarg::force_enc	vim/vim/src/ex_cmds.h	/^    int		force_enc;	\/* ++enc= argument (index in cmd[]) *\/$/;"	m	struct:exarg	access:public
exarg::force_ff	vim/vim/src/ex_cmds.h	/^    int		force_ff;	\/* ++ff= argument (index in cmd[]) *\/$/;"	m	struct:exarg	access:public
exarg::forceit	vim/vim/src/ex_cmds.h	/^    int		forceit;	\/* TRUE if ! present *\/$/;"	m	struct:exarg	access:public
exarg::getline	vim/vim/src/ex_cmds.h	/^    char_u	*(*getline)(int, void *, int);$/;"	m	struct:exarg	access:public
exarg::line1	vim/vim/src/ex_cmds.h	/^    linenr_T	line1;		\/* the first line number *\/$/;"	m	struct:exarg	access:public
exarg::line2	vim/vim/src/ex_cmds.h	/^    linenr_T	line2;		\/* the second line number or count *\/$/;"	m	struct:exarg	access:public
exarg::nextcmd	vim/vim/src/ex_cmds.h	/^    char_u	*nextcmd;	\/* next command (NULL if none) *\/$/;"	m	struct:exarg	access:public
exarg::read_edit	vim/vim/src/ex_cmds.h	/^    int		read_edit;	\/* ++edit argument *\/$/;"	m	struct:exarg	access:public
exarg::regname	vim/vim/src/ex_cmds.h	/^    int		regname;	\/* register name (NUL if none) *\/$/;"	m	struct:exarg	access:public
exarg::skip	vim/vim/src/ex_cmds.h	/^    int		skip;		\/* don't execute the command, only parse it *\/$/;"	m	struct:exarg	access:public
exarg::usefilter	vim/vim/src/ex_cmds.h	/^    int		usefilter;	\/* TRUE with ":w !command" and ":r!command" *\/$/;"	m	struct:exarg	access:public
exarg::useridx	vim/vim/src/ex_cmds.h	/^    int		useridx;	\/* user command index *\/$/;"	m	struct:exarg	access:public
exarg_T	vim/vim/src/ex_cmds.h	/^typedef struct exarg exarg_T;$/;"	t	typeref:struct:exarg
except_T	vim/vim/src/structs.h	/^typedef struct vim_exception except_T;$/;"	t	typeref:struct:vim_exception
except_type_T	vim/vim/src/structs.h	/^} except_type_T;$/;"	t	typeref:enum:__anon173
exception	vim/vim/src/structs.h	/^    except_T *exception;	\/* exception value *\/$/;"	m	struct:cleanup_stuff	access:public
exe_commands	vim/vim/src/main.c	/^exe_commands(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
exe_commands	vim/vim/src/main.c	/^static void exe_commands(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
exe_name	vim/vim/src/globals.h	/^EXTERN char_u	*exe_name;		\/* the name of the executable *\/$/;"	v
exe_path	vim/vim/src/os_win32.c	/^static char_u *exe_path = NULL;$/;"	v	file:
exe_pre_commands	vim/vim/src/main.c	/^exe_pre_commands(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
exe_pre_commands	vim/vim/src/main.c	/^static void exe_pre_commands(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
exearg	vim/vim/src/dosinst.h	/^    char	*exearg;	\/* argument for vim.exe or gvim.exe *\/$/;"	m	struct:__anon142	access:public
exec_from_reg	vim/vim/src/globals.h	/^EXTERN int	exec_from_reg INIT(= FALSE);	\/* executing register *\/$/;"	v
exec_normal	vim/vim/src/ex_docmd.c	/^exec_normal(int was_typed)$/;"	f	signature:(int was_typed)
exec_normal_cmd	vim/vim/src/ex_docmd.c	/^exec_normal_cmd(char_u *cmd, int remap, int silent)$/;"	f	signature:(char_u *cmd, int remap, int silent)
exec_on_server	vim/vim/src/main.c	/^exec_on_server(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
exec_on_server	vim/vim/src/main.c	/^static void exec_on_server(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
exec_prefix	vim/vim/src/auto/config.mk	/^exec_prefix	= ${prefix}$/;"	m
execreg_lastc	vim/vim/src/ops.c	/^static int execreg_lastc = NUL;$/;"	v	file:
executable_exists	vim/vim/src/os_win32.c	/^executable_exists(char *name, char_u **path, int use_path)$/;"	f	file:	signature:(char *name, char_u **path, int use_path)
executable_file	vim/vim/src/os_unix.c	/^executable_file(char_u *name)$/;"	f	file:	signature:(char_u *name)
executable_file	vim/vim/src/os_unix.c	/^static int executable_file(char_u *name);$/;"	p	file:	signature:(char_u *name)
execute_redir_str	vim/vim/src/evalfunc.c	/^execute_redir_str(char_u *value, int value_len)$/;"	f	signature:(char_u *value, int value_len)
exename	vim/vim/src/dosinst.h	/^    char	*exename;	\/* exe file name *\/$/;"	m	struct:__anon142	access:public
exenamearg	vim/vim/src/dosinst.h	/^    char	*exenamearg;	\/* exe file name when using exearg *\/$/;"	m	struct:__anon142	access:public
exit	vim/vim/src/gui_xmdlg.c	/^    Boolean	exit;		\/* used for program exit control *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
exit_gui_mch_update	vim/vim/src/gui_photon.c	/^exit_gui_mch_update(void *data)$/;"	f	file:	signature:(void *data)
exit_scroll	vim/vim/src/os_unix.c	/^exit_scroll(void)$/;"	f	file:	signature:(void)
exit_scroll	vim/vim/src/os_unix.c	/^static void exit_scroll(void);$/;"	p	file:	signature:(void)
exit_with_usage	vim/vim/src/xxd/xxd.c	/^exit_with_usage(void)$/;"	f	file:	signature:(void)
exit_with_usage	vim/vim/src/xxd/xxd.c	/^static void exit_with_usage __P((void));$/;"	p	file:	signature:(void)
exitcmd	vim/vim/src/if_tcl.c	/^exitcmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
exiting	vim/vim/src/globals.h	/^EXTERN int	exiting INIT(= FALSE);$/;"	v
exitvalue	vim/vim/src/if_tcl.c	/^    int exitvalue;$/;"	m	struct:__anon140	file:	access:public
exmode_active	vim/vim/src/globals.h	/^EXTERN int exmode_active INIT(= 0);	\/* zero, EXMODE_NORMAL or EXMODE_VIM *\/$/;"	v
exn_catching_apply	vim/vim/src/if_mzsch.c	/^static Scheme_Object *exn_catching_apply = NULL;$/;"	v	file:
exn_message	vim/vim/src/if_mzsch.c	/^static Scheme_Object *exn_message = NULL;$/;"	v	file:
exn_p	vim/vim/src/if_mzsch.c	/^static Scheme_Object *exn_p = NULL;$/;"	v	file:
expand	vim/vim/src/ex_docmd.c	/^    int	    expand;$/;"	m	struct:__anon17	file:	access:public
expand	vim/vim/src/ex_docmd.c	/^    int	    expand;$/;"	m	struct:__anon18	file:	access:public
expand	vim/vim/src/structs.h	/^typedef struct expand$/;"	s
expand::xp_arg	vim/vim/src/structs.h	/^    char_u	*xp_arg;		\/* completion function *\/$/;"	m	struct:expand	access:public
expand::xp_backslash	vim/vim/src/structs.h	/^    int		xp_backslash;		\/* one of the XP_BS_ values *\/$/;"	m	struct:expand	access:public
expand::xp_col	vim/vim/src/structs.h	/^    int		xp_col;			\/* cursor position in line *\/$/;"	m	struct:expand	access:public
expand::xp_context	vim/vim/src/structs.h	/^    int		xp_context;		\/* type of expansion *\/$/;"	m	struct:expand	access:public
expand::xp_files	vim/vim/src/structs.h	/^    char_u	**xp_files;		\/* list of files *\/$/;"	m	struct:expand	access:public
expand::xp_line	vim/vim/src/structs.h	/^    char_u	*xp_line;		\/* text being completed *\/$/;"	m	struct:expand	access:public
expand::xp_numfiles	vim/vim/src/structs.h	/^    int		xp_numfiles;		\/* number of files found by$/;"	m	struct:expand	access:public
expand::xp_pattern	vim/vim/src/structs.h	/^    char_u	*xp_pattern;		\/* start of item to expand *\/$/;"	m	struct:expand	access:public
expand::xp_pattern_len	vim/vim/src/structs.h	/^    int		xp_pattern_len;		\/* bytes in xp_pattern before cursor *\/$/;"	m	struct:expand	access:public
expand::xp_scriptID	vim/vim/src/structs.h	/^    int		xp_scriptID;		\/* SID for completion function *\/$/;"	m	struct:expand	access:public
expand::xp_shell	vim/vim/src/structs.h	/^    int		xp_shell;		\/* TRUE for a shell command, more$/;"	m	struct:expand	access:public
expand_T	vim/vim/src/structs.h	/^} expand_T;$/;"	t	typeref:struct:expand
expand_backtick	vim/vim/src/misc1.c	/^expand_backtick($/;"	f	file:	signature:( garray_T *gap, char_u *pat, int flags)
expand_backtick	vim/vim/src/misc1.c	/^static int expand_backtick(garray_T *gap, char_u *pat, int flags);$/;"	p	file:	signature:(garray_T *gap, char_u *pat, int flags)
expand_buffer	vim/vim/src/getchar.c	/^static int	expand_buffer = FALSE;$/;"	v	file:
expand_by_function	vim/vim/src/edit.c	/^expand_by_function($/;"	f	file:	signature:( int type, char_u *base)
expand_cmdline	vim/vim/src/ex_getln.c	/^expand_cmdline($/;"	f	signature:( expand_T *xp, char_u *str, int col, int *matchcount, char_u ***matches)
expand_emenu	vim/vim/src/menu.c	/^static int		expand_emenu;	\/* TRUE for ":emenu" command *\/$/;"	v	file:
expand_env	vim/vim/src/misc1.c	/^expand_env($/;"	f	signature:( char_u *src, char_u *dst, int dstlen)
expand_env_esc	vim/vim/src/misc1.c	/^expand_env_esc($/;"	f	signature:( char_u *srcp, char_u *dst, int dstlen, int esc, int one, char_u *startstr)
expand_env_save	vim/vim/src/misc1.c	/^expand_env_save(char_u *src)$/;"	f	signature:(char_u *src)
expand_env_save_opt	vim/vim/src/misc1.c	/^expand_env_save_opt(char_u *src, int one)$/;"	f	signature:(char_u *src, int one)
expand_filename	vim/vim/src/ex_docmd.c	/^expand_filename($/;"	f	signature:( exarg_T *eap, char_u **cmdlinep, char_u **errormsgp)
expand_in_path	vim/vim/src/misc1.c	/^expand_in_path($/;"	f	file:	signature:( garray_T *gap, char_u *pattern, int flags)
expand_in_path	vim/vim/src/misc1.c	/^static int expand_in_path(garray_T *gap, char_u	*pattern, int flags);$/;"	p	file:	signature:(garray_T *gap, char_u *pattern, int flags)
expand_isabbrev	vim/vim/src/getchar.c	/^static int	expand_isabbrev = 0;$/;"	v	file:
expand_mapmodes	vim/vim/src/getchar.c	/^static int	expand_mapmodes = 0;$/;"	v	file:
expand_menu	vim/vim/src/menu.c	/^static vimmenu_T	*expand_menu = NULL;$/;"	v	file:
expand_modes	vim/vim/src/menu.c	/^static int		expand_modes = 0x0;$/;"	v	file:
expand_option_flags	vim/vim/src/option.c	/^static int expand_option_flags = 0;$/;"	v	file:
expand_option_idx	vim/vim/src/option.c	/^static int expand_option_idx = -1;$/;"	v	file:
expand_option_name	vim/vim/src/option.c	/^static char_u expand_option_name[5] = {'t', '_', NUL, NUL, NUL};$/;"	v	file:
expand_path_option	vim/vim/src/misc1.c	/^expand_path_option(char_u *curdir, garray_T *gap)$/;"	f	file:	signature:(char_u *curdir, garray_T *gap)
expand_path_option	vim/vim/src/misc1.c	/^static void expand_path_option(char_u *curdir, garray_T	*gap);$/;"	p	file:	signature:(char_u *curdir, garray_T *gap)
expand_sfile	vim/vim/src/ex_docmd.c	/^expand_sfile(char_u *arg)$/;"	f	signature:(char_u *arg)
expand_shellcmd	vim/vim/src/ex_getln.c	/^expand_shellcmd($/;"	f	file:	signature:( char_u *filepat, int *num_file, char_u ***file, int flagsarg)
expand_shellcmd	vim/vim/src/ex_getln.c	/^static int	expand_shellcmd(char_u *filepat, int *num_file, char_u ***file, int flagsarg);$/;"	p	file:	signature:(char_u *filepat, int *num_file, char_u ***file, int flagsarg)
expand_showtail	vim/vim/src/ex_getln.c	/^expand_showtail(expand_T *xp)$/;"	f	file:	signature:(expand_T *xp)
expand_showtail	vim/vim/src/ex_getln.c	/^static int	expand_showtail(expand_T *xp);$/;"	p	file:	signature:(expand_T *xp)
expand_spelling	vim/vim/src/spell.c	/^expand_spelling($/;"	f	signature:( linenr_T lnum UNUSED, char_u *pat, char_u ***matchp)
expand_tag_fname	vim/vim/src/tag.c	/^expand_tag_fname(char_u *fname, char_u *tag_fname, int expand)$/;"	f	file:	signature:(char_u *fname, char_u *tag_fname, int expand)
expand_tag_fname	vim/vim/src/tag.c	/^static char_u *expand_tag_fname(char_u *fname, char_u *tag_fname, int expand);$/;"	p	file:	signature:(char_u *fname, char_u *tag_fname, int expand)
expand_tags	vim/vim/src/tag.c	/^expand_tags($/;"	f	signature:( int tagnames, char_u *pat, int *num_file, char_u ***file)
expand_what	vim/vim/src/ex_cmds.c	/^} expand_what;$/;"	v	typeref:enum:__anon219	file:
expand_what	vim/vim/src/if_cscope.c	/^} expand_what;$/;"	v	typeref:enum:__anon230	file:
expand_what	vim/vim/src/syntax.c	/^} expand_what;$/;"	v	typeref:enum:__anon138	file:
expand_wildcards	vim/vim/src/misc1.c	/^expand_wildcards($/;"	f	signature:( int num_pat, char_u **pat, int *num_files, char_u ***files, int flags)
expand_wildcards_eval	vim/vim/src/misc1.c	/^expand_wildcards_eval($/;"	f	signature:( char_u **pat, int *num_file, char_u ***file, int flags)
expose_event	vim/vim/src/gui_gtk_x11.c	/^expose_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventExpose *event, gpointer data UNUSED)
expr	vim/vim/src/regexp.h	/^    char_u	*expr;$/;"	m	struct:regengine	access:public
expr_line	vim/vim/src/ops.c	/^static char_u	*expr_line = NULL;$/;"	v	file:
expr_result	vim/vim/src/os_mswin.c	/^    int		expr_result;	\/* 0 for REPLY, 1 for RESULT 2 for error *\/$/;"	m	struct:__anon21	file:	access:public
exprcmd	vim/vim/src/if_tcl.c	/^exprcmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
exptype_T	vim/vim/src/eval.c	/^} exptype_T;$/;"	t	typeref:enum:__anon77	file:
extended	vim/vim/src/os_vms.c	/^    int		extended;$/;"	m	struct:__anon23	file:	access:public
extensions	vim/vim/src/xpm/include/xpm.h	/^    XpmExtension *extensions;		\/* List of extensions *\/$/;"	m	struct:__anon93	access:public
extensions	vim/vim/src/xpm/include/xpm.h	/^    XpmExtension *extensions;	\/* pointer to array of extensions *\/$/;"	m	struct:__anon92	access:public
extra_char	vim/vim/src/ex_getln.c	/^static int	extra_char = NUL;  \/* extra character to display when redrawing$/;"	v	file:
extra_char	vim/vim/src/structs.h	/^    int		extra_char;	\/* yet another character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
extra_char_shift	vim/vim/src/ex_getln.c	/^static int	extra_char_shift;$/;"	v	file:
extra_patches	vim/vim/src/version.c	/^static char *(extra_patches[]) =$/;"	v	file:
extra_shell_arg	vim/vim/src/os_unix.c	/^static char_u	*extra_shell_arg = NULL;$/;"	v	file:
extract_exn_message	vim/vim/src/if_mzsch.c	/^extract_exn_message(Scheme_Object *v)$/;"	f	file:	signature:(Scheme_Object *v)
extract_exn_message	vim/vim/src/if_mzsch.c	/^static Scheme_Object *extract_exn_message(Scheme_Object *v);$/;"	p	file:	signature:(Scheme_Object *v)
extract_modifiers	vim/vim/src/misc2.c	/^extract_modifiers(int key, int *modp)$/;"	f	signature:(int key, int *modp)
f	vim/vim/src/hangulin.c	/^static int f=F_NULL, m=M_NULL, l=L_NULL;$/;"	v	file:
fAnsiKey	vim/vim/src/os_win32.c	/^    BOOL    fAnsiKey;$/;"	m	struct:__anon211	file:	access:public
f_abs	vim/vim/src/evalfunc.c	/^f_abs(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_abs	vim/vim/src/evalfunc.c	/^static void f_abs(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_acos	vim/vim/src/evalfunc.c	/^f_acos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_acos	vim/vim/src/evalfunc.c	/^static void f_acos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_add	vim/vim/src/evalfunc.c	/^f_add(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_add	vim/vim/src/evalfunc.c	/^static void f_add(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_and	vim/vim/src/evalfunc.c	/^f_and(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_and	vim/vim/src/evalfunc.c	/^static void f_and(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_append	vim/vim/src/evalfunc.c	/^f_append(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_append	vim/vim/src/evalfunc.c	/^static void f_append(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_argc	vim/vim/src/evalfunc.c	/^f_argc(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_argc	vim/vim/src/evalfunc.c	/^static void f_argc(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_argidx	vim/vim/src/evalfunc.c	/^f_argidx(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_argidx	vim/vim/src/evalfunc.c	/^static void f_argidx(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_arglistid	vim/vim/src/evalfunc.c	/^f_arglistid(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_arglistid	vim/vim/src/evalfunc.c	/^static void f_arglistid(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_argv	vim/vim/src/evalfunc.c	/^f_argv(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_argv	vim/vim/src/evalfunc.c	/^static void f_argv(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_asin	vim/vim/src/evalfunc.c	/^f_asin(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_asin	vim/vim/src/evalfunc.c	/^static void f_asin(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_equal	vim/vim/src/evalfunc.c	/^f_assert_equal(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_equal	vim/vim/src/evalfunc.c	/^static void f_assert_equal(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_exception	vim/vim/src/evalfunc.c	/^f_assert_exception(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_exception	vim/vim/src/evalfunc.c	/^static void f_assert_exception(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_fails	vim/vim/src/evalfunc.c	/^f_assert_fails(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_fails	vim/vim/src/evalfunc.c	/^static void f_assert_fails(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_false	vim/vim/src/evalfunc.c	/^f_assert_false(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_false	vim/vim/src/evalfunc.c	/^static void f_assert_false(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_inrange	vim/vim/src/evalfunc.c	/^f_assert_inrange(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_inrange	vim/vim/src/evalfunc.c	/^static void f_assert_inrange(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_match	vim/vim/src/evalfunc.c	/^f_assert_match(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_match	vim/vim/src/evalfunc.c	/^static void f_assert_match(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_notequal	vim/vim/src/evalfunc.c	/^f_assert_notequal(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_notequal	vim/vim/src/evalfunc.c	/^static void f_assert_notequal(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_notmatch	vim/vim/src/evalfunc.c	/^f_assert_notmatch(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_notmatch	vim/vim/src/evalfunc.c	/^static void f_assert_notmatch(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_report	vim/vim/src/evalfunc.c	/^f_assert_report(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_report	vim/vim/src/evalfunc.c	/^static void f_assert_report(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_assert_true	vim/vim/src/evalfunc.c	/^f_assert_true(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_assert_true	vim/vim/src/evalfunc.c	/^static void f_assert_true(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_atan	vim/vim/src/evalfunc.c	/^f_atan(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_atan	vim/vim/src/evalfunc.c	/^static void f_atan(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_atan2	vim/vim/src/evalfunc.c	/^f_atan2(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_atan2	vim/vim/src/evalfunc.c	/^static void f_atan2(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_balloon_show	vim/vim/src/evalfunc.c	/^f_balloon_show(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_balloon_show	vim/vim/src/evalfunc.c	/^static void f_balloon_show(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_browse	vim/vim/src/evalfunc.c	/^f_browse(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_browse	vim/vim/src/evalfunc.c	/^static void f_browse(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_browsedir	vim/vim/src/evalfunc.c	/^f_browsedir(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_browsedir	vim/vim/src/evalfunc.c	/^static void f_browsedir(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufexists	vim/vim/src/evalfunc.c	/^f_bufexists(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufexists	vim/vim/src/evalfunc.c	/^static void f_bufexists(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_buflisted	vim/vim/src/evalfunc.c	/^f_buflisted(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_buflisted	vim/vim/src/evalfunc.c	/^static void f_buflisted(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufloaded	vim/vim/src/evalfunc.c	/^f_bufloaded(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufloaded	vim/vim/src/evalfunc.c	/^static void f_bufloaded(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufname	vim/vim/src/evalfunc.c	/^f_bufname(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufname	vim/vim/src/evalfunc.c	/^static void f_bufname(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufnr	vim/vim/src/evalfunc.c	/^f_bufnr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufnr	vim/vim/src/evalfunc.c	/^static void f_bufnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufwinid	vim/vim/src/evalfunc.c	/^f_bufwinid(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufwinid	vim/vim/src/evalfunc.c	/^static void f_bufwinid(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufwinnr	vim/vim/src/evalfunc.c	/^f_bufwinnr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_bufwinnr	vim/vim/src/evalfunc.c	/^static void f_bufwinnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_byte2line	vim/vim/src/evalfunc.c	/^f_byte2line(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_byte2line	vim/vim/src/evalfunc.c	/^static void f_byte2line(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_byteidx	vim/vim/src/evalfunc.c	/^f_byteidx(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_byteidx	vim/vim/src/evalfunc.c	/^static void f_byteidx(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_byteidxcomp	vim/vim/src/evalfunc.c	/^f_byteidxcomp(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_byteidxcomp	vim/vim/src/evalfunc.c	/^static void f_byteidxcomp(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_call	vim/vim/src/evalfunc.c	/^f_call(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_call	vim/vim/src/evalfunc.c	/^static void f_call(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ceil	vim/vim/src/evalfunc.c	/^f_ceil(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ceil	vim/vim/src/evalfunc.c	/^static void f_ceil(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_canread	vim/vim/src/evalfunc.c	/^f_ch_canread(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_canread	vim/vim/src/evalfunc.c	/^static void f_ch_canread(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_close	vim/vim/src/evalfunc.c	/^f_ch_close(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_ch_close	vim/vim/src/evalfunc.c	/^static void f_ch_close(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_close_in	vim/vim/src/evalfunc.c	/^f_ch_close_in(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_ch_close_in	vim/vim/src/evalfunc.c	/^static void f_ch_close_in(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_evalexpr	vim/vim/src/evalfunc.c	/^f_ch_evalexpr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_evalexpr	vim/vim/src/evalfunc.c	/^static void f_ch_evalexpr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_evalraw	vim/vim/src/evalfunc.c	/^f_ch_evalraw(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_evalraw	vim/vim/src/evalfunc.c	/^static void f_ch_evalraw(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_getbufnr	vim/vim/src/evalfunc.c	/^f_ch_getbufnr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_getbufnr	vim/vim/src/evalfunc.c	/^static void f_ch_getbufnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_getjob	vim/vim/src/evalfunc.c	/^f_ch_getjob(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_getjob	vim/vim/src/evalfunc.c	/^static void f_ch_getjob(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_info	vim/vim/src/evalfunc.c	/^f_ch_info(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_ch_info	vim/vim/src/evalfunc.c	/^static void f_ch_info(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_log	vim/vim/src/evalfunc.c	/^f_ch_log(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_ch_log	vim/vim/src/evalfunc.c	/^static void f_ch_log(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_logfile	vim/vim/src/evalfunc.c	/^f_ch_logfile(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_ch_logfile	vim/vim/src/evalfunc.c	/^static void f_ch_logfile(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_open	vim/vim/src/evalfunc.c	/^f_ch_open(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_open	vim/vim/src/evalfunc.c	/^static void f_ch_open(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_read	vim/vim/src/evalfunc.c	/^f_ch_read(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_read	vim/vim/src/evalfunc.c	/^static void f_ch_read(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_readraw	vim/vim/src/evalfunc.c	/^f_ch_readraw(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_readraw	vim/vim/src/evalfunc.c	/^static void f_ch_readraw(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_sendexpr	vim/vim/src/evalfunc.c	/^f_ch_sendexpr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_sendexpr	vim/vim/src/evalfunc.c	/^static void f_ch_sendexpr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_sendraw	vim/vim/src/evalfunc.c	/^f_ch_sendraw(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_sendraw	vim/vim/src/evalfunc.c	/^static void f_ch_sendraw(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_setoptions	vim/vim/src/evalfunc.c	/^f_ch_setoptions(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_ch_setoptions	vim/vim/src/evalfunc.c	/^static void f_ch_setoptions(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_status	vim/vim/src/evalfunc.c	/^f_ch_status(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_ch_status	vim/vim/src/evalfunc.c	/^static void f_ch_status(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_changenr	vim/vim/src/evalfunc.c	/^f_changenr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_changenr	vim/vim/src/evalfunc.c	/^static void f_changenr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_char2nr	vim/vim/src/evalfunc.c	/^f_char2nr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_char2nr	vim/vim/src/evalfunc.c	/^static void f_char2nr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cindent	vim/vim/src/evalfunc.c	/^f_cindent(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_cindent	vim/vim/src/evalfunc.c	/^static void f_cindent(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_clearmatches	vim/vim/src/evalfunc.c	/^f_clearmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_clearmatches	vim/vim/src/evalfunc.c	/^static void f_clearmatches(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_col	vim/vim/src/evalfunc.c	/^f_col(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_col	vim/vim/src/evalfunc.c	/^static void f_col(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_complete	vim/vim/src/evalfunc.c	/^f_complete(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_complete	vim/vim/src/evalfunc.c	/^static void f_complete(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_complete_add	vim/vim/src/evalfunc.c	/^f_complete_add(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_complete_add	vim/vim/src/evalfunc.c	/^static void f_complete_add(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_complete_check	vim/vim/src/evalfunc.c	/^f_complete_check(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_complete_check	vim/vim/src/evalfunc.c	/^static void f_complete_check(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_confirm	vim/vim/src/evalfunc.c	/^f_confirm(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_confirm	vim/vim/src/evalfunc.c	/^static void f_confirm(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_copy	vim/vim/src/evalfunc.c	/^f_copy(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_copy	vim/vim/src/evalfunc.c	/^static void f_copy(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cos	vim/vim/src/evalfunc.c	/^f_cos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cos	vim/vim/src/evalfunc.c	/^static void f_cos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cosh	vim/vim/src/evalfunc.c	/^f_cosh(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cosh	vim/vim/src/evalfunc.c	/^static void f_cosh(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_count	vim/vim/src/evalfunc.c	/^f_count(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_count	vim/vim/src/evalfunc.c	/^static void f_count(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cscope_connection	vim/vim/src/evalfunc.c	/^f_cscope_connection(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_cscope_connection	vim/vim/src/evalfunc.c	/^static void f_cscope_connection(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cursor	vim/vim/src/evalfunc.c	/^f_cursor(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_cursor	vim/vim/src/evalfunc.c	/^static void f_cursor(typval_T *argsvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argsvars, typval_T *rettv)
f_deepcopy	vim/vim/src/evalfunc.c	/^f_deepcopy(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_deepcopy	vim/vim/src/evalfunc.c	/^static void f_deepcopy(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_delete	vim/vim/src/evalfunc.c	/^f_delete(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_delete	vim/vim/src/evalfunc.c	/^static void f_delete(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_did_filetype	vim/vim/src/evalfunc.c	/^f_did_filetype(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_did_filetype	vim/vim/src/evalfunc.c	/^static void f_did_filetype(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_diff_filler	vim/vim/src/evalfunc.c	/^f_diff_filler(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_diff_filler	vim/vim/src/evalfunc.c	/^static void f_diff_filler(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_diff_hlID	vim/vim/src/evalfunc.c	/^f_diff_hlID(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_diff_hlID	vim/vim/src/evalfunc.c	/^static void f_diff_hlID(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_empty	vim/vim/src/evalfunc.c	/^f_empty(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_empty	vim/vim/src/evalfunc.c	/^static void f_empty(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_escape	vim/vim/src/evalfunc.c	/^f_escape(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_escape	vim/vim/src/evalfunc.c	/^static void f_escape(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_eval	vim/vim/src/evalfunc.c	/^f_eval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_eval	vim/vim/src/evalfunc.c	/^static void f_eval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_eventhandler	vim/vim/src/evalfunc.c	/^f_eventhandler(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_eventhandler	vim/vim/src/evalfunc.c	/^static void f_eventhandler(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_executable	vim/vim/src/evalfunc.c	/^f_executable(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_executable	vim/vim/src/evalfunc.c	/^static void f_executable(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_execute	vim/vim/src/evalfunc.c	/^f_execute(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_execute	vim/vim/src/evalfunc.c	/^static void f_execute(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_exepath	vim/vim/src/evalfunc.c	/^f_exepath(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_exepath	vim/vim/src/evalfunc.c	/^static void f_exepath(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_exists	vim/vim/src/evalfunc.c	/^f_exists(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_exists	vim/vim/src/evalfunc.c	/^static void f_exists(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_exp	vim/vim/src/evalfunc.c	/^f_exp(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_exp	vim/vim/src/evalfunc.c	/^static void f_exp(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_expand	vim/vim/src/evalfunc.c	/^f_expand(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_expand	vim/vim/src/evalfunc.c	/^static void f_expand(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_extend	vim/vim/src/evalfunc.c	/^f_extend(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_extend	vim/vim/src/evalfunc.c	/^static void f_extend(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_feedkeys	vim/vim/src/evalfunc.c	/^f_feedkeys(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_feedkeys	vim/vim/src/evalfunc.c	/^static void f_feedkeys(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_filereadable	vim/vim/src/evalfunc.c	/^f_filereadable(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_filereadable	vim/vim/src/evalfunc.c	/^static void f_filereadable(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_filewritable	vim/vim/src/evalfunc.c	/^f_filewritable(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_filewritable	vim/vim/src/evalfunc.c	/^static void f_filewritable(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_filter	vim/vim/src/evalfunc.c	/^f_filter(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_filter	vim/vim/src/evalfunc.c	/^static void f_filter(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_finddir	vim/vim/src/evalfunc.c	/^f_finddir(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_finddir	vim/vim/src/evalfunc.c	/^static void f_finddir(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_findfile	vim/vim/src/evalfunc.c	/^f_findfile(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_findfile	vim/vim/src/evalfunc.c	/^static void f_findfile(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_float2nr	vim/vim/src/evalfunc.c	/^f_float2nr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_float2nr	vim/vim/src/evalfunc.c	/^static void f_float2nr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_floor	vim/vim/src/evalfunc.c	/^f_floor(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_floor	vim/vim/src/evalfunc.c	/^static void f_floor(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_fmod	vim/vim/src/evalfunc.c	/^f_fmod(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_fmod	vim/vim/src/evalfunc.c	/^static void f_fmod(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_fnameescape	vim/vim/src/evalfunc.c	/^f_fnameescape(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_fnameescape	vim/vim/src/evalfunc.c	/^static void f_fnameescape(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_fnamemodify	vim/vim/src/evalfunc.c	/^f_fnamemodify(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_fnamemodify	vim/vim/src/evalfunc.c	/^static void f_fnamemodify(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldclosed	vim/vim/src/evalfunc.c	/^f_foldclosed(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldclosed	vim/vim/src/evalfunc.c	/^static void f_foldclosed(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldclosedend	vim/vim/src/evalfunc.c	/^f_foldclosedend(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldclosedend	vim/vim/src/evalfunc.c	/^static void f_foldclosedend(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldlevel	vim/vim/src/evalfunc.c	/^f_foldlevel(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_foldlevel	vim/vim/src/evalfunc.c	/^static void f_foldlevel(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldtext	vim/vim/src/evalfunc.c	/^f_foldtext(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_foldtext	vim/vim/src/evalfunc.c	/^static void f_foldtext(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foldtextresult	vim/vim/src/evalfunc.c	/^f_foldtextresult(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_foldtextresult	vim/vim/src/evalfunc.c	/^static void f_foldtextresult(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_foreground	vim/vim/src/evalfunc.c	/^f_foreground(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_foreground	vim/vim/src/evalfunc.c	/^static void f_foreground(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_func	vim/vim/src/evalfunc.c	/^    void	(*f_func)(typval_T *args, typval_T *rvar);$/;"	m	struct:fst	file:	access:public
f_funcref	vim/vim/src/evalfunc.c	/^f_funcref(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_funcref	vim/vim/src/evalfunc.c	/^static void f_funcref(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_function	vim/vim/src/evalfunc.c	/^f_function(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_function	vim/vim/src/evalfunc.c	/^static void f_function(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_garbagecollect	vim/vim/src/evalfunc.c	/^f_garbagecollect(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_garbagecollect	vim/vim/src/evalfunc.c	/^static void f_garbagecollect(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_get	vim/vim/src/evalfunc.c	/^f_get(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_get	vim/vim/src/evalfunc.c	/^static void f_get(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getbufinfo	vim/vim/src/evalfunc.c	/^f_getbufinfo(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getbufinfo	vim/vim/src/evalfunc.c	/^static void f_getbufinfo(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getbufline	vim/vim/src/evalfunc.c	/^f_getbufline(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getbufline	vim/vim/src/evalfunc.c	/^static void f_getbufline(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getbufvar	vim/vim/src/evalfunc.c	/^f_getbufvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getbufvar	vim/vim/src/evalfunc.c	/^static void f_getbufvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getchar	vim/vim/src/evalfunc.c	/^f_getchar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getchar	vim/vim/src/evalfunc.c	/^static void f_getchar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcharmod	vim/vim/src/evalfunc.c	/^f_getcharmod(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getcharmod	vim/vim/src/evalfunc.c	/^static void f_getcharmod(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcharsearch	vim/vim/src/evalfunc.c	/^f_getcharsearch(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getcharsearch	vim/vim/src/evalfunc.c	/^static void f_getcharsearch(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcmdline	vim/vim/src/evalfunc.c	/^f_getcmdline(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getcmdline	vim/vim/src/evalfunc.c	/^static void f_getcmdline(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcmdpos	vim/vim/src/evalfunc.c	/^f_getcmdpos(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getcmdpos	vim/vim/src/evalfunc.c	/^static void f_getcmdpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcmdtype	vim/vim/src/evalfunc.c	/^f_getcmdtype(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getcmdtype	vim/vim/src/evalfunc.c	/^static void f_getcmdtype(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcmdwintype	vim/vim/src/evalfunc.c	/^f_getcmdwintype(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getcmdwintype	vim/vim/src/evalfunc.c	/^static void f_getcmdwintype(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcompletion	vim/vim/src/evalfunc.c	/^f_getcompletion(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcompletion	vim/vim/src/evalfunc.c	/^static void f_getcompletion(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcurpos	vim/vim/src/evalfunc.c	/^f_getcurpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcurpos	vim/vim/src/evalfunc.c	/^static void f_getcurpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcwd	vim/vim/src/evalfunc.c	/^f_getcwd(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getcwd	vim/vim/src/evalfunc.c	/^static void f_getcwd(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getfontname	vim/vim/src/evalfunc.c	/^f_getfontname(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getfontname	vim/vim/src/evalfunc.c	/^static void f_getfontname(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getfperm	vim/vim/src/evalfunc.c	/^f_getfperm(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getfperm	vim/vim/src/evalfunc.c	/^static void f_getfperm(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getfsize	vim/vim/src/evalfunc.c	/^f_getfsize(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getfsize	vim/vim/src/evalfunc.c	/^static void f_getfsize(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getftime	vim/vim/src/evalfunc.c	/^f_getftime(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getftime	vim/vim/src/evalfunc.c	/^static void f_getftime(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getftype	vim/vim/src/evalfunc.c	/^f_getftype(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getftype	vim/vim/src/evalfunc.c	/^static void f_getftype(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getline	vim/vim/src/evalfunc.c	/^f_getline(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getline	vim/vim/src/evalfunc.c	/^static void f_getline(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getloclist	vim/vim/src/evalfunc.c	/^f_getloclist(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_getloclist	vim/vim/src/evalfunc.c	/^static void f_getloclist(typval_T *argvars UNUSED, typval_T *rettv UNUSED);$/;"	p	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_getmatches	vim/vim/src/evalfunc.c	/^f_getmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_getmatches	vim/vim/src/evalfunc.c	/^static void f_getmatches(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getpid	vim/vim/src/evalfunc.c	/^f_getpid(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getpid	vim/vim/src/evalfunc.c	/^static void f_getpid(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getpos	vim/vim/src/evalfunc.c	/^f_getpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getpos	vim/vim/src/evalfunc.c	/^static void f_getpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getqflist	vim/vim/src/evalfunc.c	/^f_getqflist(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_getqflist	vim/vim/src/evalfunc.c	/^static void f_getqflist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getreg	vim/vim/src/evalfunc.c	/^f_getreg(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getreg	vim/vim/src/evalfunc.c	/^static void f_getreg(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getregtype	vim/vim/src/evalfunc.c	/^f_getregtype(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getregtype	vim/vim/src/evalfunc.c	/^static void f_getregtype(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_gettabinfo	vim/vim/src/evalfunc.c	/^f_gettabinfo(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_gettabinfo	vim/vim/src/evalfunc.c	/^static void f_gettabinfo(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_gettabvar	vim/vim/src/evalfunc.c	/^f_gettabvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_gettabvar	vim/vim/src/evalfunc.c	/^static void f_gettabvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_gettabwinvar	vim/vim/src/evalfunc.c	/^f_gettabwinvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_gettabwinvar	vim/vim/src/evalfunc.c	/^static void f_gettabwinvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getwininfo	vim/vim/src/evalfunc.c	/^f_getwininfo(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getwininfo	vim/vim/src/evalfunc.c	/^static void f_getwininfo(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getwinposx	vim/vim/src/evalfunc.c	/^f_getwinposx(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getwinposx	vim/vim/src/evalfunc.c	/^static void f_getwinposx(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getwinposy	vim/vim/src/evalfunc.c	/^f_getwinposy(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_getwinposy	vim/vim/src/evalfunc.c	/^static void f_getwinposy(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getwinvar	vim/vim/src/evalfunc.c	/^f_getwinvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_getwinvar	vim/vim/src/evalfunc.c	/^static void f_getwinvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_glob	vim/vim/src/evalfunc.c	/^f_glob(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_glob	vim/vim/src/evalfunc.c	/^static void f_glob(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_glob2regpat	vim/vim/src/evalfunc.c	/^f_glob2regpat(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_glob2regpat	vim/vim/src/evalfunc.c	/^static void f_glob2regpat(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_globpath	vim/vim/src/evalfunc.c	/^f_globpath(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_globpath	vim/vim/src/evalfunc.c	/^static void f_globpath(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_has	vim/vim/src/evalfunc.c	/^f_has(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_has	vim/vim/src/evalfunc.c	/^static void f_has(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_has_key	vim/vim/src/evalfunc.c	/^f_has_key(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_has_key	vim/vim/src/evalfunc.c	/^static void f_has_key(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_haslocaldir	vim/vim/src/evalfunc.c	/^f_haslocaldir(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_haslocaldir	vim/vim/src/evalfunc.c	/^static void f_haslocaldir(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hasmapto	vim/vim/src/evalfunc.c	/^f_hasmapto(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hasmapto	vim/vim/src/evalfunc.c	/^static void f_hasmapto(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_histadd	vim/vim/src/evalfunc.c	/^f_histadd(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_histadd	vim/vim/src/evalfunc.c	/^static void f_histadd(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_histdel	vim/vim/src/evalfunc.c	/^f_histdel(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_histdel	vim/vim/src/evalfunc.c	/^static void f_histdel(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_histget	vim/vim/src/evalfunc.c	/^f_histget(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_histget	vim/vim/src/evalfunc.c	/^static void f_histget(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_histnr	vim/vim/src/evalfunc.c	/^f_histnr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_histnr	vim/vim/src/evalfunc.c	/^static void f_histnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hlID	vim/vim/src/evalfunc.c	/^f_hlID(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hlID	vim/vim/src/evalfunc.c	/^static void f_hlID(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hlexists	vim/vim/src/evalfunc.c	/^f_hlexists(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hlexists	vim/vim/src/evalfunc.c	/^static void f_hlexists(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_hostname	vim/vim/src/evalfunc.c	/^f_hostname(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_hostname	vim/vim/src/evalfunc.c	/^static void f_hostname(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_iconv	vim/vim/src/evalfunc.c	/^f_iconv(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_iconv	vim/vim/src/evalfunc.c	/^static void f_iconv(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_indent	vim/vim/src/evalfunc.c	/^f_indent(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_indent	vim/vim/src/evalfunc.c	/^static void f_indent(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_index	vim/vim/src/evalfunc.c	/^f_index(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_index	vim/vim/src/evalfunc.c	/^static void f_index(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_input	vim/vim/src/evalfunc.c	/^f_input(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_input	vim/vim/src/evalfunc.c	/^static void f_input(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputdialog	vim/vim/src/evalfunc.c	/^f_inputdialog(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputdialog	vim/vim/src/evalfunc.c	/^static void f_inputdialog(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputlist	vim/vim/src/evalfunc.c	/^f_inputlist(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputlist	vim/vim/src/evalfunc.c	/^static void f_inputlist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputrestore	vim/vim/src/evalfunc.c	/^f_inputrestore(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_inputrestore	vim/vim/src/evalfunc.c	/^static void f_inputrestore(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputsave	vim/vim/src/evalfunc.c	/^f_inputsave(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_inputsave	vim/vim/src/evalfunc.c	/^static void f_inputsave(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputsecret	vim/vim/src/evalfunc.c	/^f_inputsecret(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_inputsecret	vim/vim/src/evalfunc.c	/^static void f_inputsecret(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_insert	vim/vim/src/evalfunc.c	/^f_insert(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_insert	vim/vim/src/evalfunc.c	/^static void f_insert(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_invert	vim/vim/src/evalfunc.c	/^f_invert(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_invert	vim/vim/src/evalfunc.c	/^static void f_invert(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_isdirectory	vim/vim/src/evalfunc.c	/^f_isdirectory(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_isdirectory	vim/vim/src/evalfunc.c	/^static void f_isdirectory(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_islocked	vim/vim/src/evalfunc.c	/^f_islocked(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_islocked	vim/vim/src/evalfunc.c	/^static void f_islocked(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_isnan	vim/vim/src/evalfunc.c	/^f_isnan(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_isnan	vim/vim/src/evalfunc.c	/^static void f_isnan(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_items	vim/vim/src/evalfunc.c	/^f_items(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_items	vim/vim/src/evalfunc.c	/^static void f_items(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_getchannel	vim/vim/src/evalfunc.c	/^f_job_getchannel(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_getchannel	vim/vim/src/evalfunc.c	/^static void f_job_getchannel(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_info	vim/vim/src/evalfunc.c	/^f_job_info(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_info	vim/vim/src/evalfunc.c	/^static void f_job_info(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_setoptions	vim/vim/src/evalfunc.c	/^f_job_setoptions(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_job_setoptions	vim/vim/src/evalfunc.c	/^static void f_job_setoptions(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_start	vim/vim/src/evalfunc.c	/^f_job_start(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_start	vim/vim/src/evalfunc.c	/^static void f_job_start(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_status	vim/vim/src/evalfunc.c	/^f_job_status(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_status	vim/vim/src/evalfunc.c	/^static void f_job_status(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_stop	vim/vim/src/evalfunc.c	/^f_job_stop(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_job_stop	vim/vim/src/evalfunc.c	/^static void f_job_stop(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_join	vim/vim/src/evalfunc.c	/^f_join(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_join	vim/vim/src/evalfunc.c	/^static void f_join(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_js_decode	vim/vim/src/evalfunc.c	/^f_js_decode(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_js_decode	vim/vim/src/evalfunc.c	/^static void f_js_decode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_js_encode	vim/vim/src/evalfunc.c	/^f_js_encode(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_js_encode	vim/vim/src/evalfunc.c	/^static void f_js_encode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_json_decode	vim/vim/src/evalfunc.c	/^f_json_decode(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_json_decode	vim/vim/src/evalfunc.c	/^static void f_json_decode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_json_encode	vim/vim/src/evalfunc.c	/^f_json_encode(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_json_encode	vim/vim/src/evalfunc.c	/^static void f_json_encode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_keys	vim/vim/src/evalfunc.c	/^f_keys(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_keys	vim/vim/src/evalfunc.c	/^static void f_keys(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_last_buffer_nr	vim/vim/src/evalfunc.c	/^f_last_buffer_nr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_last_buffer_nr	vim/vim/src/evalfunc.c	/^static void f_last_buffer_nr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_len	vim/vim/src/evalfunc.c	/^f_len(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_len	vim/vim/src/evalfunc.c	/^static void f_len(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_libcall	vim/vim/src/evalfunc.c	/^f_libcall(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_libcall	vim/vim/src/evalfunc.c	/^static void f_libcall(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_libcallnr	vim/vim/src/evalfunc.c	/^f_libcallnr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_libcallnr	vim/vim/src/evalfunc.c	/^static void f_libcallnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_line	vim/vim/src/evalfunc.c	/^f_line(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_line	vim/vim/src/evalfunc.c	/^static void f_line(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_line2byte	vim/vim/src/evalfunc.c	/^f_line2byte(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_line2byte	vim/vim/src/evalfunc.c	/^static void f_line2byte(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_lispindent	vim/vim/src/evalfunc.c	/^f_lispindent(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_lispindent	vim/vim/src/evalfunc.c	/^static void f_lispindent(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_localtime	vim/vim/src/evalfunc.c	/^f_localtime(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_localtime	vim/vim/src/evalfunc.c	/^static void f_localtime(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_log	vim/vim/src/evalfunc.c	/^f_log(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_log	vim/vim/src/evalfunc.c	/^static void f_log(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_log10	vim/vim/src/evalfunc.c	/^f_log10(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_log10	vim/vim/src/evalfunc.c	/^static void f_log10(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_luaeval	vim/vim/src/evalfunc.c	/^f_luaeval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_luaeval	vim/vim/src/evalfunc.c	/^static void f_luaeval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_map	vim/vim/src/evalfunc.c	/^f_map(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_map	vim/vim/src/evalfunc.c	/^static void f_map(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_maparg	vim/vim/src/evalfunc.c	/^f_maparg(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_maparg	vim/vim/src/evalfunc.c	/^static void f_maparg(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mapcheck	vim/vim/src/evalfunc.c	/^f_mapcheck(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mapcheck	vim/vim/src/evalfunc.c	/^static void f_mapcheck(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_match	vim/vim/src/evalfunc.c	/^f_match(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_match	vim/vim/src/evalfunc.c	/^static void f_match(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchadd	vim/vim/src/evalfunc.c	/^f_matchadd(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_matchadd	vim/vim/src/evalfunc.c	/^static void f_matchadd(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchaddpos	vim/vim/src/evalfunc.c	/^f_matchaddpos(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_matchaddpos	vim/vim/src/evalfunc.c	/^static void f_matchaddpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matcharg	vim/vim/src/evalfunc.c	/^f_matcharg(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_matcharg	vim/vim/src/evalfunc.c	/^static void f_matcharg(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchdelete	vim/vim/src/evalfunc.c	/^f_matchdelete(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_matchdelete	vim/vim/src/evalfunc.c	/^static void f_matchdelete(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchend	vim/vim/src/evalfunc.c	/^f_matchend(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchend	vim/vim/src/evalfunc.c	/^static void f_matchend(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchlist	vim/vim/src/evalfunc.c	/^f_matchlist(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchlist	vim/vim/src/evalfunc.c	/^static void f_matchlist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchstr	vim/vim/src/evalfunc.c	/^f_matchstr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchstr	vim/vim/src/evalfunc.c	/^static void f_matchstr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchstrpos	vim/vim/src/evalfunc.c	/^f_matchstrpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_matchstrpos	vim/vim/src/evalfunc.c	/^static void f_matchstrpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_max	vim/vim/src/evalfunc.c	/^f_max(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_max	vim/vim/src/evalfunc.c	/^static void f_max(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_max_argc	vim/vim/src/evalfunc.c	/^    char	f_max_argc;	\/* maximal number of arguments *\/$/;"	m	struct:fst	file:	access:public
f_min	vim/vim/src/evalfunc.c	/^f_min(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_min	vim/vim/src/evalfunc.c	/^static void f_min(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_min_argc	vim/vim/src/evalfunc.c	/^    char	f_min_argc;	\/* minimal number of arguments *\/$/;"	m	struct:fst	file:	access:public
f_mkdir	vim/vim/src/evalfunc.c	/^f_mkdir(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mkdir	vim/vim/src/evalfunc.c	/^static void f_mkdir(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mode	vim/vim/src/evalfunc.c	/^f_mode(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mode	vim/vim/src/evalfunc.c	/^static void f_mode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mzeval	vim/vim/src/evalfunc.c	/^f_mzeval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_mzeval	vim/vim/src/evalfunc.c	/^static void f_mzeval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_name	vim/vim/src/evalfunc.c	/^    char	*f_name;	\/* function name *\/$/;"	m	struct:fst	file:	access:public
f_nextnonblank	vim/vim/src/evalfunc.c	/^f_nextnonblank(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_nextnonblank	vim/vim/src/evalfunc.c	/^static void f_nextnonblank(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_nop	vim/vim/src/if_ruby.c	/^static VALUE f_nop(VALUE self UNUSED)$/;"	f	file:	signature:(VALUE self UNUSED)
f_nr2char	vim/vim/src/evalfunc.c	/^f_nr2char(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_nr2char	vim/vim/src/evalfunc.c	/^static void f_nr2char(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_or	vim/vim/src/evalfunc.c	/^f_or(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_or	vim/vim/src/evalfunc.c	/^static void f_or(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_p	vim/vim/src/if_ruby.c	/^static VALUE f_p(int argc, VALUE *argv, VALUE self UNUSED)$/;"	f	file:	signature:(int argc, VALUE *argv, VALUE self UNUSED)
f_pathshorten	vim/vim/src/evalfunc.c	/^f_pathshorten(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pathshorten	vim/vim/src/evalfunc.c	/^static void f_pathshorten(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_perleval	vim/vim/src/evalfunc.c	/^f_perleval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_perleval	vim/vim/src/evalfunc.c	/^static void f_perleval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pow	vim/vim/src/evalfunc.c	/^f_pow(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pow	vim/vim/src/evalfunc.c	/^static void f_pow(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_prevnonblank	vim/vim/src/evalfunc.c	/^f_prevnonblank(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_prevnonblank	vim/vim/src/evalfunc.c	/^static void f_prevnonblank(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_printf	vim/vim/src/evalfunc.c	/^f_printf(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_printf	vim/vim/src/evalfunc.c	/^static void f_printf(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pumvisible	vim/vim/src/evalfunc.c	/^f_pumvisible(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_pumvisible	vim/vim/src/evalfunc.c	/^static void f_pumvisible(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_py3eval	vim/vim/src/evalfunc.c	/^f_py3eval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_py3eval	vim/vim/src/evalfunc.c	/^static void f_py3eval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pyeval	vim/vim/src/evalfunc.c	/^f_pyeval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pyeval	vim/vim/src/evalfunc.c	/^static void f_pyeval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pyxeval	vim/vim/src/evalfunc.c	/^f_pyxeval(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_pyxeval	vim/vim/src/evalfunc.c	/^static void f_pyxeval(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_range	vim/vim/src/evalfunc.c	/^f_range(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_range	vim/vim/src/evalfunc.c	/^static void f_range(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_readfile	vim/vim/src/evalfunc.c	/^f_readfile(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_readfile	vim/vim/src/evalfunc.c	/^static void f_readfile(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_reltime	vim/vim/src/evalfunc.c	/^f_reltime(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_reltime	vim/vim/src/evalfunc.c	/^static void f_reltime(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_reltimefloat	vim/vim/src/evalfunc.c	/^f_reltimefloat(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_reltimefloat	vim/vim/src/evalfunc.c	/^static void f_reltimefloat(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_reltimestr	vim/vim/src/evalfunc.c	/^f_reltimestr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_reltimestr	vim/vim/src/evalfunc.c	/^static void f_reltimestr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remote_expr	vim/vim/src/evalfunc.c	/^f_remote_expr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_remote_expr	vim/vim/src/evalfunc.c	/^static void f_remote_expr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remote_foreground	vim/vim/src/evalfunc.c	/^f_remote_foreground(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_remote_foreground	vim/vim/src/evalfunc.c	/^static void f_remote_foreground(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remote_peek	vim/vim/src/evalfunc.c	/^f_remote_peek(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_remote_peek	vim/vim/src/evalfunc.c	/^static void f_remote_peek(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remote_read	vim/vim/src/evalfunc.c	/^f_remote_read(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_remote_read	vim/vim/src/evalfunc.c	/^static void f_remote_read(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remote_send	vim/vim/src/evalfunc.c	/^f_remote_send(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_remote_send	vim/vim/src/evalfunc.c	/^static void f_remote_send(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remote_startserver	vim/vim/src/evalfunc.c	/^f_remote_startserver(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_remote_startserver	vim/vim/src/evalfunc.c	/^static void f_remote_startserver(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remove	vim/vim/src/evalfunc.c	/^f_remove(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_remove	vim/vim/src/evalfunc.c	/^static void f_remove(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_rename	vim/vim/src/evalfunc.c	/^f_rename(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_rename	vim/vim/src/evalfunc.c	/^static void f_rename(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_repeat	vim/vim/src/evalfunc.c	/^f_repeat(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_repeat	vim/vim/src/evalfunc.c	/^static void f_repeat(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_resolve	vim/vim/src/evalfunc.c	/^f_resolve(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_resolve	vim/vim/src/evalfunc.c	/^static void f_resolve(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_reverse	vim/vim/src/evalfunc.c	/^f_reverse(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_reverse	vim/vim/src/evalfunc.c	/^static void f_reverse(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_round	vim/vim/src/evalfunc.c	/^f_round(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_round	vim/vim/src/evalfunc.c	/^static void f_round(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_screenattr	vim/vim/src/evalfunc.c	/^f_screenattr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_screenattr	vim/vim/src/evalfunc.c	/^static void f_screenattr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_screenchar	vim/vim/src/evalfunc.c	/^f_screenchar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_screenchar	vim/vim/src/evalfunc.c	/^static void f_screenchar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_screencol	vim/vim/src/evalfunc.c	/^f_screencol(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_screencol	vim/vim/src/evalfunc.c	/^static void f_screencol(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_screenrow	vim/vim/src/evalfunc.c	/^f_screenrow(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_screenrow	vim/vim/src/evalfunc.c	/^static void f_screenrow(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_search	vim/vim/src/evalfunc.c	/^f_search(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_search	vim/vim/src/evalfunc.c	/^static void f_search(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchdecl	vim/vim/src/evalfunc.c	/^f_searchdecl(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchdecl	vim/vim/src/evalfunc.c	/^static void f_searchdecl(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchpair	vim/vim/src/evalfunc.c	/^f_searchpair(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchpair	vim/vim/src/evalfunc.c	/^static void f_searchpair(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchpairpos	vim/vim/src/evalfunc.c	/^f_searchpairpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchpairpos	vim/vim/src/evalfunc.c	/^static void f_searchpairpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchpos	vim/vim/src/evalfunc.c	/^f_searchpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_searchpos	vim/vim/src/evalfunc.c	/^static void f_searchpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_server2client	vim/vim/src/evalfunc.c	/^f_server2client(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_server2client	vim/vim/src/evalfunc.c	/^static void f_server2client(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_serverlist	vim/vim/src/evalfunc.c	/^f_serverlist(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_serverlist	vim/vim/src/evalfunc.c	/^static void f_serverlist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setbufvar	vim/vim/src/evalfunc.c	/^f_setbufvar(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_setbufvar	vim/vim/src/evalfunc.c	/^static void f_setbufvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setcharsearch	vim/vim/src/evalfunc.c	/^f_setcharsearch(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_setcharsearch	vim/vim/src/evalfunc.c	/^static void f_setcharsearch(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setcmdpos	vim/vim/src/evalfunc.c	/^f_setcmdpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setcmdpos	vim/vim/src/evalfunc.c	/^static void f_setcmdpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setfperm	vim/vim/src/evalfunc.c	/^f_setfperm(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setfperm	vim/vim/src/evalfunc.c	/^static void f_setfperm(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setline	vim/vim/src/evalfunc.c	/^f_setline(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setline	vim/vim/src/evalfunc.c	/^static void f_setline(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setloclist	vim/vim/src/evalfunc.c	/^f_setloclist(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setloclist	vim/vim/src/evalfunc.c	/^static void f_setloclist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setmatches	vim/vim/src/evalfunc.c	/^f_setmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_setmatches	vim/vim/src/evalfunc.c	/^static void f_setmatches(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setpos	vim/vim/src/evalfunc.c	/^f_setpos(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setpos	vim/vim/src/evalfunc.c	/^static void f_setpos(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setqflist	vim/vim/src/evalfunc.c	/^f_setqflist(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setqflist	vim/vim/src/evalfunc.c	/^static void f_setqflist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setreg	vim/vim/src/evalfunc.c	/^f_setreg(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setreg	vim/vim/src/evalfunc.c	/^static void f_setreg(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_settabvar	vim/vim/src/evalfunc.c	/^f_settabvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_settabvar	vim/vim/src/evalfunc.c	/^static void f_settabvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_settabwinvar	vim/vim/src/evalfunc.c	/^f_settabwinvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_settabwinvar	vim/vim/src/evalfunc.c	/^static void f_settabwinvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setwinvar	vim/vim/src/evalfunc.c	/^f_setwinvar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_setwinvar	vim/vim/src/evalfunc.c	/^static void f_setwinvar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sha256	vim/vim/src/evalfunc.c	/^f_sha256(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sha256	vim/vim/src/evalfunc.c	/^static void f_sha256(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_shellescape	vim/vim/src/evalfunc.c	/^f_shellescape(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_shellescape	vim/vim/src/evalfunc.c	/^static void f_shellescape(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_shiftwidth	vim/vim/src/evalfunc.c	/^f_shiftwidth(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_shiftwidth	vim/vim/src/evalfunc.c	/^static void f_shiftwidth(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_simplify	vim/vim/src/evalfunc.c	/^f_simplify(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_simplify	vim/vim/src/evalfunc.c	/^static void f_simplify(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sin	vim/vim/src/evalfunc.c	/^f_sin(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sin	vim/vim/src/evalfunc.c	/^static void f_sin(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sinh	vim/vim/src/evalfunc.c	/^f_sinh(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sinh	vim/vim/src/evalfunc.c	/^static void f_sinh(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sort	vim/vim/src/evalfunc.c	/^f_sort(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sort	vim/vim/src/evalfunc.c	/^static void f_sort(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_soundfold	vim/vim/src/evalfunc.c	/^f_soundfold(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_soundfold	vim/vim/src/evalfunc.c	/^static void f_soundfold(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_spellbadword	vim/vim/src/evalfunc.c	/^f_spellbadword(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_spellbadword	vim/vim/src/evalfunc.c	/^static void f_spellbadword(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_spellsuggest	vim/vim/src/evalfunc.c	/^f_spellsuggest(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_spellsuggest	vim/vim/src/evalfunc.c	/^static void f_spellsuggest(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_split	vim/vim/src/evalfunc.c	/^f_split(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_split	vim/vim/src/evalfunc.c	/^static void f_split(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sqrt	vim/vim/src/evalfunc.c	/^f_sqrt(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_sqrt	vim/vim/src/evalfunc.c	/^static void f_sqrt(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_str2float	vim/vim/src/evalfunc.c	/^f_str2float(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_str2float	vim/vim/src/evalfunc.c	/^static void f_str2float(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_str2nr	vim/vim/src/evalfunc.c	/^f_str2nr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_str2nr	vim/vim/src/evalfunc.c	/^static void f_str2nr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strcharpart	vim/vim/src/evalfunc.c	/^f_strcharpart(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strcharpart	vim/vim/src/evalfunc.c	/^static void f_strcharpart(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strchars	vim/vim/src/evalfunc.c	/^f_strchars(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strchars	vim/vim/src/evalfunc.c	/^static void f_strchars(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strdisplaywidth	vim/vim/src/evalfunc.c	/^f_strdisplaywidth(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strdisplaywidth	vim/vim/src/evalfunc.c	/^static void f_strdisplaywidth(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strftime	vim/vim/src/evalfunc.c	/^f_strftime(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strftime	vim/vim/src/evalfunc.c	/^static void f_strftime(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strgetchar	vim/vim/src/evalfunc.c	/^f_strgetchar(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strgetchar	vim/vim/src/evalfunc.c	/^static void f_strgetchar(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_stridx	vim/vim/src/evalfunc.c	/^f_stridx(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_stridx	vim/vim/src/evalfunc.c	/^static void f_stridx(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_string	vim/vim/src/evalfunc.c	/^f_string(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_string	vim/vim/src/evalfunc.c	/^static void f_string(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strlen	vim/vim/src/evalfunc.c	/^f_strlen(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strlen	vim/vim/src/evalfunc.c	/^static void f_strlen(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strpart	vim/vim/src/evalfunc.c	/^f_strpart(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strpart	vim/vim/src/evalfunc.c	/^static void f_strpart(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strridx	vim/vim/src/evalfunc.c	/^f_strridx(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strridx	vim/vim/src/evalfunc.c	/^static void f_strridx(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strtrans	vim/vim/src/evalfunc.c	/^f_strtrans(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strtrans	vim/vim/src/evalfunc.c	/^static void f_strtrans(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strwidth	vim/vim/src/evalfunc.c	/^f_strwidth(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_strwidth	vim/vim/src/evalfunc.c	/^static void f_strwidth(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_submatch	vim/vim/src/evalfunc.c	/^f_submatch(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_submatch	vim/vim/src/evalfunc.c	/^static void f_submatch(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_substitute	vim/vim/src/evalfunc.c	/^f_substitute(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_substitute	vim/vim/src/evalfunc.c	/^static void f_substitute(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_synID	vim/vim/src/evalfunc.c	/^f_synID(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_synID	vim/vim/src/evalfunc.c	/^static void f_synID(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_synIDattr	vim/vim/src/evalfunc.c	/^f_synIDattr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_synIDattr	vim/vim/src/evalfunc.c	/^static void f_synIDattr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_synIDtrans	vim/vim/src/evalfunc.c	/^f_synIDtrans(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_synIDtrans	vim/vim/src/evalfunc.c	/^static void f_synIDtrans(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_synconcealed	vim/vim/src/evalfunc.c	/^f_synconcealed(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_synconcealed	vim/vim/src/evalfunc.c	/^static void f_synconcealed(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_synstack	vim/vim/src/evalfunc.c	/^f_synstack(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_synstack	vim/vim/src/evalfunc.c	/^static void f_synstack(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_system	vim/vim/src/evalfunc.c	/^f_system(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_system	vim/vim/src/evalfunc.c	/^static void f_system(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_systemlist	vim/vim/src/evalfunc.c	/^f_systemlist(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_systemlist	vim/vim/src/evalfunc.c	/^static void f_systemlist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tabpagebuflist	vim/vim/src/evalfunc.c	/^f_tabpagebuflist(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_tabpagebuflist	vim/vim/src/evalfunc.c	/^static void f_tabpagebuflist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tabpagenr	vim/vim/src/evalfunc.c	/^f_tabpagenr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_tabpagenr	vim/vim/src/evalfunc.c	/^static void f_tabpagenr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tabpagewinnr	vim/vim/src/evalfunc.c	/^f_tabpagewinnr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_tabpagewinnr	vim/vim/src/evalfunc.c	/^static void f_tabpagewinnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tagfiles	vim/vim/src/evalfunc.c	/^f_tagfiles(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_tagfiles	vim/vim/src/evalfunc.c	/^static void f_tagfiles(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_taglist	vim/vim/src/evalfunc.c	/^f_taglist(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_taglist	vim/vim/src/evalfunc.c	/^static void f_taglist(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tan	vim/vim/src/evalfunc.c	/^f_tan(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tan	vim/vim/src/evalfunc.c	/^static void f_tan(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tanh	vim/vim/src/evalfunc.c	/^f_tanh(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tanh	vim/vim/src/evalfunc.c	/^static void f_tanh(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tempname	vim/vim/src/evalfunc.c	/^f_tempname(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_tempname	vim/vim/src/evalfunc.c	/^static void f_tempname(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_alloc_fail	vim/vim/src/evalfunc.c	/^f_test_alloc_fail(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_test_alloc_fail	vim/vim/src/evalfunc.c	/^static void f_test_alloc_fail(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_autochdir	vim/vim/src/evalfunc.c	/^f_test_autochdir(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_test_autochdir	vim/vim/src/evalfunc.c	/^static void f_test_autochdir(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_garbagecollect_now	vim/vim/src/evalfunc.c	/^f_test_garbagecollect_now(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_test_garbagecollect_now	vim/vim/src/evalfunc.c	/^static void f_test_garbagecollect_now(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_ignore_error	vim/vim/src/evalfunc.c	/^f_test_ignore_error(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_test_ignore_error	vim/vim/src/evalfunc.c	/^static void f_test_ignore_error(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_null_channel	vim/vim/src/evalfunc.c	/^f_test_null_channel(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_test_null_channel	vim/vim/src/evalfunc.c	/^static void f_test_null_channel(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_null_dict	vim/vim/src/evalfunc.c	/^f_test_null_dict(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_test_null_dict	vim/vim/src/evalfunc.c	/^static void f_test_null_dict(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_null_job	vim/vim/src/evalfunc.c	/^f_test_null_job(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_test_null_job	vim/vim/src/evalfunc.c	/^static void f_test_null_job(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_null_list	vim/vim/src/evalfunc.c	/^f_test_null_list(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_test_null_list	vim/vim/src/evalfunc.c	/^static void f_test_null_list(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_null_partial	vim/vim/src/evalfunc.c	/^f_test_null_partial(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_test_null_partial	vim/vim/src/evalfunc.c	/^static void f_test_null_partial(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_null_string	vim/vim/src/evalfunc.c	/^f_test_null_string(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_test_null_string	vim/vim/src/evalfunc.c	/^static void f_test_null_string(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_override	vim/vim/src/evalfunc.c	/^f_test_override(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_test_override	vim/vim/src/evalfunc.c	/^static void f_test_override(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_test_settime	vim/vim/src/evalfunc.c	/^f_test_settime(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_test_settime	vim/vim/src/evalfunc.c	/^static void f_test_settime(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_info	vim/vim/src/evalfunc.c	/^f_timer_info(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_info	vim/vim/src/evalfunc.c	/^static void f_timer_info(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_pause	vim/vim/src/evalfunc.c	/^f_timer_pause(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_timer_pause	vim/vim/src/evalfunc.c	/^static void f_timer_pause(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_start	vim/vim/src/evalfunc.c	/^f_timer_start(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_start	vim/vim/src/evalfunc.c	/^static void f_timer_start(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_stop	vim/vim/src/evalfunc.c	/^f_timer_stop(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_timer_stop	vim/vim/src/evalfunc.c	/^static void f_timer_stop(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_timer_stopall	vim/vim/src/evalfunc.c	/^f_timer_stopall(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_timer_stopall	vim/vim/src/evalfunc.c	/^static void f_timer_stopall(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tolower	vim/vim/src/evalfunc.c	/^f_tolower(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tolower	vim/vim/src/evalfunc.c	/^static void f_tolower(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_toupper	vim/vim/src/evalfunc.c	/^f_toupper(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_toupper	vim/vim/src/evalfunc.c	/^static void f_toupper(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tr	vim/vim/src/evalfunc.c	/^f_tr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_tr	vim/vim/src/evalfunc.c	/^static void f_tr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_trunc	vim/vim/src/evalfunc.c	/^f_trunc(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_trunc	vim/vim/src/evalfunc.c	/^static void f_trunc(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_type	vim/vim/src/evalfunc.c	/^f_type(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_type	vim/vim/src/evalfunc.c	/^static void f_type(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_undofile	vim/vim/src/evalfunc.c	/^f_undofile(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_undofile	vim/vim/src/evalfunc.c	/^static void f_undofile(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_undotree	vim/vim/src/evalfunc.c	/^f_undotree(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_undotree	vim/vim/src/evalfunc.c	/^static void f_undotree(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_uniq	vim/vim/src/evalfunc.c	/^f_uniq(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_uniq	vim/vim/src/evalfunc.c	/^static void f_uniq(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_values	vim/vim/src/evalfunc.c	/^f_values(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_values	vim/vim/src/evalfunc.c	/^static void f_values(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_virtcol	vim/vim/src/evalfunc.c	/^f_virtcol(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_virtcol	vim/vim/src/evalfunc.c	/^static void f_virtcol(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_visualmode	vim/vim/src/evalfunc.c	/^f_visualmode(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_visualmode	vim/vim/src/evalfunc.c	/^static void f_visualmode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_wildmenumode	vim/vim/src/evalfunc.c	/^f_wildmenumode(typval_T *argvars UNUSED, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
f_wildmenumode	vim/vim/src/evalfunc.c	/^static void f_wildmenumode(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_findbuf	vim/vim/src/evalfunc.c	/^f_win_findbuf(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_findbuf	vim/vim/src/evalfunc.c	/^static void f_win_findbuf(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_getid	vim/vim/src/evalfunc.c	/^f_win_getid(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_getid	vim/vim/src/evalfunc.c	/^static void f_win_getid(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_gotoid	vim/vim/src/evalfunc.c	/^f_win_gotoid(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_gotoid	vim/vim/src/evalfunc.c	/^static void f_win_gotoid(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_id2tabwin	vim/vim/src/evalfunc.c	/^f_win_id2tabwin(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_id2tabwin	vim/vim/src/evalfunc.c	/^static void f_win_id2tabwin(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_id2win	vim/vim/src/evalfunc.c	/^f_win_id2win(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_win_id2win	vim/vim/src/evalfunc.c	/^static void f_win_id2win(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winbufnr	vim/vim/src/evalfunc.c	/^f_winbufnr(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winbufnr	vim/vim/src/evalfunc.c	/^static void f_winbufnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_wincol	vim/vim/src/evalfunc.c	/^f_wincol(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_wincol	vim/vim/src/evalfunc.c	/^static void f_wincol(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winheight	vim/vim/src/evalfunc.c	/^f_winheight(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winheight	vim/vim/src/evalfunc.c	/^static void f_winheight(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winline	vim/vim/src/evalfunc.c	/^f_winline(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_winline	vim/vim/src/evalfunc.c	/^static void f_winline(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winnr	vim/vim/src/evalfunc.c	/^f_winnr(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_winnr	vim/vim/src/evalfunc.c	/^static void f_winnr(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winrestcmd	vim/vim/src/evalfunc.c	/^f_winrestcmd(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_winrestcmd	vim/vim/src/evalfunc.c	/^static void f_winrestcmd(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winrestview	vim/vim/src/evalfunc.c	/^f_winrestview(typval_T *argvars, typval_T *rettv UNUSED)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv UNUSED)
f_winrestview	vim/vim/src/evalfunc.c	/^static void f_winrestview(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winsaveview	vim/vim/src/evalfunc.c	/^f_winsaveview(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_winsaveview	vim/vim/src/evalfunc.c	/^static void f_winsaveview(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winwidth	vim/vim/src/evalfunc.c	/^f_winwidth(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_winwidth	vim/vim/src/evalfunc.c	/^static void f_winwidth(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_wordcount	vim/vim/src/evalfunc.c	/^f_wordcount(typval_T *argvars UNUSED, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv)
f_wordcount	vim/vim/src/evalfunc.c	/^static void f_wordcount(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_writefile	vim/vim/src/evalfunc.c	/^f_writefile(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_writefile	vim/vim/src/evalfunc.c	/^static void f_writefile(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
f_xor	vim/vim/src/evalfunc.c	/^f_xor(typval_T *argvars, typval_T *rettv)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv)
f_xor	vim/vim/src/evalfunc.c	/^static void f_xor(typval_T *argvars, typval_T *rettv);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv)
failure_chance	vim/vim/src/regexp_nfa.c	/^failure_chance(nfa_state_T *state, int depth)$/;"	f	file:	signature:(nfa_state_T *state, int depth)
failure_chance	vim/vim/src/regexp_nfa.c	/^static int failure_chance(nfa_state_T *state, int depth);$/;"	p	file:	signature:(nfa_state_T *state, int depth)
fallbacks	vim/vim/src/libvterm/src/vterm_internal.h	/^  const VTermParserCallbacks *fallbacks;$/;"	m	struct:VTermState	access:public
family	vim/vim/src/gui_mac.c	/^    FMFontFamily family;$/;"	m	struct:__anon223	file:	access:public
farsi_f8	vim/vim/src/farsi.c	/^farsi_f8(cmdarg_T *cap UNUSED)$/;"	f	signature:(cmdarg_T *cap UNUSED)
farsi_f9	vim/vim/src/farsi.c	/^farsi_f9(cmdarg_T *cap UNUSED)$/;"	f	signature:(cmdarg_T *cap UNUSED)
farsi_text_1	vim/vim/src/farsi.h	/^EXTERN char_u farsi_text_1[]$/;"	v
farsi_text_2	vim/vim/src/farsi.h	/^EXTERN char_u farsi_text_2[]$/;"	v
farsi_text_3	vim/vim/src/farsi.h	/^EXTERN char_u farsi_text_3[]$/;"	v
farsi_text_5	vim/vim/src/farsi.h	/^EXTERN char_u farsi_text_5[]$/;"	v
fast_breakcheck	vim/vim/src/misc1.c	/^fast_breakcheck(void)$/;"	f	signature:(void)
fbdata	vim/vim/src/libvterm/src/vterm_internal.h	/^  void *fbdata;$/;"	m	struct:VTermState	access:public
fc_copyID	vim/vim/src/structs.h	/^    int		fc_copyID;	\/* for garbage collection *\/$/;"	m	struct:funccall_S	access:public
fc_funcs	vim/vim/src/structs.h	/^    garray_T	fc_funcs;	\/* list of ufunc_T* which keep a reference to$/;"	m	struct:funccall_S	access:public
fc_refcount	vim/vim/src/structs.h	/^    int		fc_refcount;	\/* number of user functions that reference this$/;"	m	struct:funccall_S	access:public
fclose	vim/vim/src/xxd/xxd.c	/^extern int fclose  __P((FILE *));$/;"	p	file:	signature:(FILE *)
fcon	vim/vim/src/hangulin.c	/^fcon(int c)$/;"	f	file:	signature:(int c)
fd	vim/vim/src/quickfix.c	/^    FILE	*fd;$/;"	m	struct:__anon13	file:	access:public
fdDump	vim/vim/src/os_mswin.c	/^FILE* fdDump = NULL;$/;"	v
fdDump	vim/vim/src/os_win32.c	/^FILE* fdDump = NULL;$/;"	v
fd_close	vim/vim/src/channel.c	/^fd_close(sock_T fd)$/;"	f	file:	signature:(sock_T fd)
fd_close	vim/vim/src/channel.c	54;"	d	file:
fd_di	vim/vim/src/structs.h	/^    dictitem_T	*fd_di;		\/* Dictionary item used *\/$/;"	m	struct:__anon189	access:public
fd_dict	vim/vim/src/structs.h	/^    dict_T	*fd_dict;	\/* Dictionary used *\/$/;"	m	struct:__anon189	access:public
fd_flags	vim/vim/src/fold.c	/^    char	fd_flags;	\/* see below *\/$/;"	m	struct:__anon94	file:	access:public
fd_len	vim/vim/src/fold.c	/^    linenr_T	fd_len;		\/* number of lines in the fold *\/$/;"	m	struct:__anon94	file:	access:public
fd_nested	vim/vim/src/fold.c	/^    garray_T	fd_nested;	\/* array of nested folds *\/$/;"	m	struct:__anon94	file:	access:public
fd_newkey	vim/vim/src/structs.h	/^    char_u	*fd_newkey;	\/* new key in "dict" in allocated memory *\/$/;"	m	struct:__anon189	access:public
fd_read	vim/vim/src/channel.c	/^fd_read(sock_T fd, char *buf, size_t len)$/;"	f	file:	signature:(sock_T fd, char *buf, size_t len)
fd_read	vim/vim/src/channel.c	52;"	d	file:
fd_small	vim/vim/src/fold.c	/^    char	fd_small;	\/* TRUE, FALSE or MAYBE: fold smaller than$/;"	m	struct:__anon94	file:	access:public
fd_top	vim/vim/src/fold.c	/^    linenr_T	fd_top;		\/* first line of fold; for nested fold$/;"	m	struct:__anon94	file:	access:public
fd_write	vim/vim/src/channel.c	/^fd_write(sock_T fd, char *buf, size_t len)$/;"	f	file:	signature:(sock_T fd, char *buf, size_t len)
fd_write	vim/vim/src/channel.c	53;"	d	file:
fdip_search_ctx	vim/vim/src/misc2.c	/^static void	*fdip_search_ctx = NULL;$/;"	v	file:
fdo_flags	vim/vim/src/option.h	/^EXTERN unsigned	fdo_flags;$/;"	v
fdopen	vim/vim/src/xxd/xxd.c	/^FILE   _FAR *_Cdecl _FARFUNC fdopen(int __handle, char _FAR *__type);$/;"	p	file:	signature:(int __handle, char _FAR *__type)
fdtofh	vim/vim/src/memfile.c	/^fdtofh(int filedescriptor)$/;"	f	file:	signature:(int filedescriptor)
features	vim/vim/src/version.c	/^static char *(features[]) =$/;"	v	file:
fex_format	vim/vim/src/ops.c	/^fex_format($/;"	f	signature:( linenr_T lnum, long count, int c)
ff	vim/vim/src/hardcopy.c	/^    int		ff;		    \/* seen form feed character *\/$/;"	m	struct:__anon212	file:	access:public
ff_check_visited	vim/vim/src/misc2.c	/^ff_check_visited($/;"	f	file:	signature:( ff_visited_T **visited_list, char_u *fname , char_u *wc_path )
ff_check_visited	vim/vim/src/misc2.c	/^static int ff_check_visited(ff_visited_T **, char_u *);$/;"	p	file:	signature:(ff_visited_T **, char_u *)
ff_check_visited	vim/vim/src/misc2.c	/^static int ff_check_visited(ff_visited_T **, char_u *, char_u *);$/;"	p	file:	signature:(ff_visited_T **, char_u *, char_u *)
ff_clear	vim/vim/src/misc2.c	/^ff_clear(ff_search_ctx_T *search_ctx)$/;"	f	file:	signature:(ff_search_ctx_T *search_ctx)
ff_clear	vim/vim/src/misc2.c	/^static void ff_clear(ff_search_ctx_T *search_ctx);$/;"	p	file:	signature:(ff_search_ctx_T *search_ctx)
ff_create_stack_element	vim/vim/src/misc2.c	/^ff_create_stack_element($/;"	f	file:	signature:( char_u *fix_part, char_u *wc_part, int level, int star_star_empty)
ff_create_stack_element	vim/vim/src/misc2.c	/^static ff_stack_T *ff_create_stack_element(char_u *, char_u *, int, int);$/;"	p	file:	signature:(char_u *, char_u *, int, int)
ff_create_stack_element	vim/vim/src/misc2.c	/^static ff_stack_T *ff_create_stack_element(char_u *, int, int);$/;"	p	file:	signature:(char_u *, int, int)
ff_expand_buffer	vim/vim/src/misc2.c	/^static char_u	*ff_expand_buffer = NULL; \/* used for expanding filenames *\/$/;"	v	file:
ff_file_to_find	vim/vim/src/misc2.c	/^static char_u	*ff_file_to_find = NULL;$/;"	v	file:
ff_free_stack_element	vim/vim/src/misc2.c	/^ff_free_stack_element(ff_stack_T *stack_ptr)$/;"	f	file:	signature:(ff_stack_T *stack_ptr)
ff_free_stack_element	vim/vim/src/misc2.c	/^static void ff_free_stack_element(ff_stack_T *stack_ptr);$/;"	p	file:	signature:(ff_stack_T *stack_ptr)
ff_free_visited_list	vim/vim/src/misc2.c	/^ff_free_visited_list(ff_visited_T *vl)$/;"	f	file:	signature:(ff_visited_T *vl)
ff_free_visited_list	vim/vim/src/misc2.c	/^static void ff_free_visited_list(ff_visited_T *vl);$/;"	p	file:	signature:(ff_visited_T *vl)
ff_get_visited_list	vim/vim/src/misc2.c	/^ff_get_visited_list($/;"	f	file:	signature:( char_u *filename, ff_visited_list_hdr_T **list_headp)
ff_get_visited_list	vim/vim/src/misc2.c	/^static ff_visited_list_hdr_T* ff_get_visited_list(char_u *, ff_visited_list_hdr_T **list_headp);$/;"	p	file:	signature:(char_u *, ff_visited_list_hdr_T **list_headp)
ff_path_in_stoplist	vim/vim/src/misc2.c	/^ff_path_in_stoplist(char_u *path, int path_len, char_u **stopdirs_v)$/;"	f	file:	signature:(char_u *path, int path_len, char_u **stopdirs_v)
ff_path_in_stoplist	vim/vim/src/misc2.c	/^static int ff_path_in_stoplist(char_u *, int, char_u **);$/;"	p	file:	signature:(char_u *, int, char_u **)
ff_pop	vim/vim/src/misc2.c	/^ff_pop(ff_search_ctx_T *search_ctx)$/;"	f	file:	signature:(ff_search_ctx_T *search_ctx)
ff_pop	vim/vim/src/misc2.c	/^static ff_stack_T *ff_pop(ff_search_ctx_T *search_ctx);$/;"	p	file:	signature:(ff_search_ctx_T *search_ctx)
ff_push	vim/vim/src/misc2.c	/^ff_push(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr)$/;"	f	file:	signature:(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr)
ff_push	vim/vim/src/misc2.c	/^static void ff_push(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr);$/;"	p	file:	signature:(ff_search_ctx_T *search_ctx, ff_stack_T *stack_ptr)
ff_search_ctx_T	vim/vim/src/misc2.c	/^typedef struct ff_search_ctx_T$/;"	s	file:
ff_search_ctx_T	vim/vim/src/misc2.c	/^} ff_search_ctx_T;$/;"	t	typeref:struct:ff_search_ctx_T	file:
ff_search_ctx_T::ffsc_dir_visited_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_dir_visited_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_dir_visited_lists_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_dir_visited_lists_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_file_to_search	vim/vim/src/misc2.c	/^     char_u			*ffsc_file_to_search;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_find_what	vim/vim/src/misc2.c	/^     int			ffsc_find_what;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_fix_path	vim/vim/src/misc2.c	/^     char_u			*ffsc_fix_path;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_level	vim/vim/src/misc2.c	/^     int			ffsc_level;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_stack_ptr	vim/vim/src/misc2.c	/^     ff_stack_T			*ffsc_stack_ptr;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_start_dir	vim/vim/src/misc2.c	/^     char_u			*ffsc_start_dir;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_stopdirs_v	vim/vim/src/misc2.c	/^     char_u			**ffsc_stopdirs_v;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_tagfile	vim/vim/src/misc2.c	/^     int			ffsc_tagfile;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_visited_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_visited_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_visited_lists_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_visited_lists_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_search_ctx_T::ffsc_wc_path	vim/vim/src/misc2.c	/^     char_u			*ffsc_wc_path;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ff_stack	vim/vim/src/misc2.c	/^typedef struct ff_stack$/;"	s	file:
ff_stack::ffs_filearray	vim/vim/src/misc2.c	/^    char_u		**ffs_filearray;$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_filearray_cur	vim/vim/src/misc2.c	/^    char_u		ffs_filearray_cur;   \/* needed for partly handled dirs *\/$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_filearray_size	vim/vim/src/misc2.c	/^    int			ffs_filearray_size;$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_fix_path	vim/vim/src/misc2.c	/^    char_u		*ffs_fix_path;$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_level	vim/vim/src/misc2.c	/^    int			ffs_level;$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_prev	vim/vim/src/misc2.c	/^    struct ff_stack	*ffs_prev;$/;"	m	struct:ff_stack	typeref:struct:ff_stack::ff_stack	file:	access:public
ff_stack::ffs_stage	vim/vim/src/misc2.c	/^    int			ffs_stage;$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_star_star_empty	vim/vim/src/misc2.c	/^    int			ffs_star_star_empty;$/;"	m	struct:ff_stack	file:	access:public
ff_stack::ffs_wc_path	vim/vim/src/misc2.c	/^    char_u		*ffs_wc_path;$/;"	m	struct:ff_stack	file:	access:public
ff_stack_T	vim/vim/src/misc2.c	/^} ff_stack_T;$/;"	t	typeref:struct:ff_stack	file:
ff_visited	vim/vim/src/misc2.c	/^typedef struct ff_visited$/;"	s	file:
ff_visited::ffv_dev	vim/vim/src/misc2.c	/^    dev_t		ffv_dev;	\/* device number *\/$/;"	m	struct:ff_visited	file:	access:public
ff_visited::ffv_dev_valid	vim/vim/src/misc2.c	/^    int			ffv_dev_valid;	\/* ffv_dev and ffv_ino were set *\/$/;"	m	struct:ff_visited	file:	access:public
ff_visited::ffv_fname	vim/vim/src/misc2.c	/^    char_u		ffv_fname[1];	\/* actually longer *\/$/;"	m	struct:ff_visited	file:	access:public
ff_visited::ffv_ino	vim/vim/src/misc2.c	/^    ino_t		ffv_ino;	\/* inode number *\/$/;"	m	struct:ff_visited	file:	access:public
ff_visited::ffv_next	vim/vim/src/misc2.c	/^    struct ff_visited	*ffv_next;$/;"	m	struct:ff_visited	typeref:struct:ff_visited::ff_visited	file:	access:public
ff_visited::ffv_wc_path	vim/vim/src/misc2.c	/^    char_u		*ffv_wc_path;$/;"	m	struct:ff_visited	file:	access:public
ff_visited_T	vim/vim/src/misc2.c	/^} ff_visited_T;$/;"	t	typeref:struct:ff_visited	file:
ff_visited_list_hdr	vim/vim/src/misc2.c	/^typedef struct ff_visited_list_hdr$/;"	s	file:
ff_visited_list_hdr::ffvl_filename	vim/vim/src/misc2.c	/^    char_u			*ffvl_filename;$/;"	m	struct:ff_visited_list_hdr	file:	access:public
ff_visited_list_hdr::ffvl_next	vim/vim/src/misc2.c	/^    struct ff_visited_list_hdr	*ffvl_next;$/;"	m	struct:ff_visited_list_hdr	typeref:struct:ff_visited_list_hdr::ff_visited_list_hdr	file:	access:public
ff_visited_list_hdr::ffvl_visited_list	vim/vim/src/misc2.c	/^    ff_visited_T		*ffvl_visited_list;$/;"	m	struct:ff_visited_list_hdr	file:	access:public
ff_visited_list_hdr_T	vim/vim/src/misc2.c	/^} ff_visited_list_hdr_T;$/;"	t	typeref:struct:ff_visited_list_hdr	file:
ff_wc_equal	vim/vim/src/misc2.c	/^ff_wc_equal(char_u *s1, char_u *s2)$/;"	f	file:	signature:(char_u *s1, char_u *s2)
ff_wc_equal	vim/vim/src/misc2.c	/^static int ff_wc_equal(char_u *s1, char_u *s2);$/;"	p	file:	signature:(char_u *s1, char_u *s2)
fflush	vim/vim/src/xxd/xxd.c	/^extern int fflush  __P((FILE *));$/;"	p	file:	signature:(FILE *)
ffs_filearray	vim/vim/src/misc2.c	/^    char_u		**ffs_filearray;$/;"	m	struct:ff_stack	file:	access:public
ffs_filearray_cur	vim/vim/src/misc2.c	/^    char_u		ffs_filearray_cur;   \/* needed for partly handled dirs *\/$/;"	m	struct:ff_stack	file:	access:public
ffs_filearray_size	vim/vim/src/misc2.c	/^    int			ffs_filearray_size;$/;"	m	struct:ff_stack	file:	access:public
ffs_fix_path	vim/vim/src/misc2.c	/^    char_u		*ffs_fix_path;$/;"	m	struct:ff_stack	file:	access:public
ffs_level	vim/vim/src/misc2.c	/^    int			ffs_level;$/;"	m	struct:ff_stack	file:	access:public
ffs_prev	vim/vim/src/misc2.c	/^    struct ff_stack	*ffs_prev;$/;"	m	struct:ff_stack	typeref:struct:ff_stack::ff_stack	file:	access:public
ffs_stage	vim/vim/src/misc2.c	/^    int			ffs_stage;$/;"	m	struct:ff_stack	file:	access:public
ffs_star_star_empty	vim/vim/src/misc2.c	/^    int			ffs_star_star_empty;$/;"	m	struct:ff_stack	file:	access:public
ffs_wc_path	vim/vim/src/misc2.c	/^    char_u		*ffs_wc_path;$/;"	m	struct:ff_stack	file:	access:public
ffsc_dir_visited_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_dir_visited_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_dir_visited_lists_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_dir_visited_lists_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_file_to_search	vim/vim/src/misc2.c	/^     char_u			*ffsc_file_to_search;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_find_what	vim/vim/src/misc2.c	/^     int			ffsc_find_what;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_fix_path	vim/vim/src/misc2.c	/^     char_u			*ffsc_fix_path;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_level	vim/vim/src/misc2.c	/^     int			ffsc_level;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_stack_ptr	vim/vim/src/misc2.c	/^     ff_stack_T			*ffsc_stack_ptr;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_start_dir	vim/vim/src/misc2.c	/^     char_u			*ffsc_start_dir;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_stopdirs_v	vim/vim/src/misc2.c	/^     char_u			**ffsc_stopdirs_v;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_tagfile	vim/vim/src/misc2.c	/^     int			ffsc_tagfile;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_visited_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_visited_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_visited_lists_list	vim/vim/src/misc2.c	/^     ff_visited_list_hdr_T	*ffsc_visited_lists_list;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffsc_wc_path	vim/vim/src/misc2.c	/^     char_u			*ffsc_wc_path;$/;"	m	struct:ff_search_ctx_T	file:	access:public
ffv_dev	vim/vim/src/misc2.c	/^    dev_t		ffv_dev;	\/* device number *\/$/;"	m	struct:ff_visited	file:	access:public
ffv_dev_valid	vim/vim/src/misc2.c	/^    int			ffv_dev_valid;	\/* ffv_dev and ffv_ino were set *\/$/;"	m	struct:ff_visited	file:	access:public
ffv_fname	vim/vim/src/misc2.c	/^    char_u		ffv_fname[1];	\/* actually longer *\/$/;"	m	struct:ff_visited	file:	access:public
ffv_ino	vim/vim/src/misc2.c	/^    ino_t		ffv_ino;	\/* inode number *\/$/;"	m	struct:ff_visited	file:	access:public
ffv_next	vim/vim/src/misc2.c	/^    struct ff_visited	*ffv_next;$/;"	m	struct:ff_visited	typeref:struct:ff_visited::ff_visited	file:	access:public
ffv_wc_path	vim/vim/src/misc2.c	/^    char_u		*ffv_wc_path;$/;"	m	struct:ff_visited	file:	access:public
ffvl_filename	vim/vim/src/misc2.c	/^    char_u			*ffvl_filename;$/;"	m	struct:ff_visited_list_hdr	file:	access:public
ffvl_next	vim/vim/src/misc2.c	/^    struct ff_visited_list_hdr	*ffvl_next;$/;"	m	struct:ff_visited_list_hdr	typeref:struct:ff_visited_list_hdr::ff_visited_list_hdr	file:	access:public
ffvl_visited_list	vim/vim/src/misc2.c	/^    ff_visited_T		*ffvl_visited_list;$/;"	m	struct:ff_visited_list_hdr	file:	access:public
fg	vim/vim/src/libvterm/include/vterm.h	/^  VTermColor fg, bg;$/;"	m	struct:__anon62	access:public
fg	vim/vim/src/libvterm/src/screen.c	/^  VTermColor   fg, bg;$/;"	m	struct:__anon29	file:	access:public
fg	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermColor fg;$/;"	m	struct:VTermPen	access:public
fg_color	vim/vim/src/structs.h	/^	    guicolor_T	    fg_color;	\/* foreground color handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
fg_color	vim/vim/src/structs.h	/^	    short_u	    fg_color;	\/* foreground color number *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
fg_color	vim/vim/src/structs.h	/^    long_u	fg_color;$/;"	m	struct:__anon205	access:public
fg_index	vim/vim/src/libvterm/src/vterm_internal.h	/^  int fg_index;$/;"	m	struct:VTermState	access:public
fg_rgb	vim/vim/src/structs.h	/^	    guicolor_T	    fg_rgb;	\/* foreground color RGB *\/$/;"	m	struct:attr_entry::__anon175::__anon177	access:public
fgcolor	vim/vim/src/gui.h	/^    GdkColor	*fgcolor;	    \/* GDK-styled foreground color *\/$/;"	m	struct:Gui	access:public
fgcolor	vim/vim/src/gui.h	/^    GdkRGBA	*fgcolor;	    \/* GDK-styled foreground color *\/$/;"	m	struct:Gui	access:public
fgetline	vim/vim/src/ex_cmds2.c	/^    char_u	*(*fgetline)(int, void *, int),$/;"	p	file:	signature:(int, void *, int)
fgetline	vim/vim/src/ex_docmd.c	/^    char_u	*(*fgetline)(int, void *, int),$/;"	p	file:	signature:(int, void *, int)
fgets_cr	vim/vim/src/ex_cmds2.c	/^fgets_cr(char *s, int n, FILE *stream)$/;"	f	signature:(char *s, int n, FILE *stream)
fi_level	vim/vim/src/structs.h	/^    int		fi_level;	\/* level of the fold; when this is zero the$/;"	m	struct:foldinfo	access:public
fi_list	vim/vim/src/eval.c	/^    list_T	*fi_list;	\/* list being used *\/$/;"	m	struct:__anon76	file:	access:public
fi_lnum	vim/vim/src/structs.h	/^    int		fi_lnum;	\/* line number where fold starts *\/$/;"	m	struct:foldinfo	access:public
fi_low_level	vim/vim/src/structs.h	/^    int		fi_low_level;	\/* lowest fold level that starts in the same$/;"	m	struct:foldinfo	access:public
fi_lw	vim/vim/src/eval.c	/^    listwatch_T	fi_lw;		\/* keep an eye on the item used. *\/$/;"	m	struct:__anon76	file:	access:public
fi_semicolon	vim/vim/src/eval.c	/^    int		fi_semicolon;	\/* TRUE if ending in '; var]' *\/$/;"	m	struct:__anon76	file:	access:public
fi_varcount	vim/vim/src/eval.c	/^    int		fi_varcount;	\/* nr of variables in the list *\/$/;"	m	struct:__anon76	file:	access:public
file_buffer	vim/vim/src/structs.h	/^struct file_buffer$/;"	s
file_buffer::b_FSSpec	vim/vim/src/structs.h	/^    FSSpec	b_FSSpec;	\/* MacOS File Identification *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_bad_char	vim/vim/src/structs.h	/^    int		b_bad_char;	\/* "++bad=" argument when edit started or 0 *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_bkc_flags	vim/vim/src/structs.h	/^    unsigned	b_bkc_flags;    \/* flags for 'backupcopy' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_bufvar	vim/vim/src/structs.h	/^    dictitem_T	b_bufvar;	\/* variable for "b:" Dictionary *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_changed	vim/vim/src/structs.h	/^    int		b_changed;	\/* 'modified': Set to TRUE if something in the$/;"	m	struct:file_buffer	access:public
file_buffer::b_changelist	vim/vim/src/structs.h	/^    pos_T	b_changelist[JUMPLISTSIZE];$/;"	m	struct:file_buffer	access:public
file_buffer::b_changelistlen	vim/vim/src/structs.h	/^    int		b_changelistlen;	\/* number of active entries *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_chartab	vim/vim/src/structs.h	/^    char_u	b_chartab[32];$/;"	m	struct:file_buffer	access:public
file_buffer::b_cryptstate	vim/vim/src/structs.h	/^    cryptstate_T *b_cryptstate;	\/* Encryption state while reading or writing$/;"	m	struct:file_buffer	access:public
file_buffer::b_ct_di	vim/vim/src/structs.h	/^    dictitem16_T b_ct_di;	\/* holds the b:changedtick value in$/;"	m	struct:file_buffer	access:public
file_buffer::b_dev	vim/vim/src/structs.h	/^    dev_t	b_dev;		\/* device number *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_dev_valid	vim/vim/src/structs.h	/^    int		b_dev_valid;	\/* TRUE when b_dev has a valid number *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_did_warn	vim/vim/src/structs.h	/^    int		b_did_warn;	\/* Set to 1 if user has been warned on first$/;"	m	struct:file_buffer	access:public
file_buffer::b_fab_mrs	vim/vim/src/structs.h	/^    unsigned int b_fab_mrs;	\/* Max record size  *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_fab_rat	vim/vim/src/structs.h	/^    char	 b_fab_rat;	\/* Record attribute *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_fab_rfm	vim/vim/src/structs.h	/^    char	 b_fab_rfm;	\/* Record format    *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_ffname	vim/vim/src/structs.h	/^    char_u	*b_ffname;	\/* full path file name *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_first_abbr	vim/vim/src/structs.h	/^    mapblock_T	*b_first_abbr;$/;"	m	struct:file_buffer	access:public
file_buffer::b_flags	vim/vim/src/structs.h	/^    int		b_flags;	\/* various BF_ flags *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_fname	vim/vim/src/structs.h	/^    char_u	*b_fname;	\/* current file name *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_fnum	vim/vim/src/structs.h	/^    int		b_fnum;		\/* buffer number for this file. *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_has_qf_entry	vim/vim/src/structs.h	/^    int		b_has_qf_entry;$/;"	m	struct:file_buffer	access:public
file_buffer::b_has_sign_column	vim/vim/src/structs.h	/^    int		b_has_sign_column; \/* Flag that is set when a first sign is$/;"	m	struct:file_buffer	access:public
file_buffer::b_help	vim/vim/src/structs.h	/^    int		b_help;		\/* TRUE for help file buffer (when set b_p_bt$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_case	vim/vim/src/structs.h	/^    int		b_ind_case;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_case_break	vim/vim/src/structs.h	/^    int		b_ind_case_break;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_case_code	vim/vim/src/structs.h	/^    int		b_ind_case_code;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_close_extra	vim/vim/src/structs.h	/^    int		b_ind_close_extra;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_comment	vim/vim/src/structs.h	/^    int		b_ind_comment;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_continuation	vim/vim/src/structs.h	/^    int		b_ind_continuation;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_cpp_baseclass	vim/vim/src/structs.h	/^    int		b_ind_cpp_baseclass;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_cpp_extern_c	vim/vim/src/structs.h	/^    int		b_ind_cpp_extern_c;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_cpp_namespace	vim/vim/src/structs.h	/^    int		b_ind_cpp_namespace;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_first_open	vim/vim/src/structs.h	/^    int		b_ind_first_open;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_func_type	vim/vim/src/structs.h	/^    int		b_ind_func_type;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_hash_comment	vim/vim/src/structs.h	/^    int		b_ind_hash_comment;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_if_for_while	vim/vim/src/structs.h	/^    int		b_ind_if_for_while;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_in_comment	vim/vim/src/structs.h	/^    int		b_ind_in_comment;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_in_comment2	vim/vim/src/structs.h	/^    int		b_ind_in_comment2;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_java	vim/vim/src/structs.h	/^    int		b_ind_java;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_js	vim/vim/src/structs.h	/^    int		b_ind_js;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_jump_label	vim/vim/src/structs.h	/^    int		b_ind_jump_label;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_keep_case_label	vim/vim/src/structs.h	/^    int		b_ind_keep_case_label;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_level	vim/vim/src/structs.h	/^    int		b_ind_level;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_matching_paren	vim/vim/src/structs.h	/^    int		b_ind_matching_paren;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_maxcomment	vim/vim/src/structs.h	/^    int		b_ind_maxcomment;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_maxparen	vim/vim/src/structs.h	/^    int		b_ind_maxparen;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_no_brace	vim/vim/src/structs.h	/^    int		b_ind_no_brace;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_open_extra	vim/vim/src/structs.h	/^    int		b_ind_open_extra;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_open_imag	vim/vim/src/structs.h	/^    int		b_ind_open_imag;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_open_left_imag	vim/vim/src/structs.h	/^    int		b_ind_open_left_imag;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_param	vim/vim/src/structs.h	/^    int		b_ind_param;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_paren_prev	vim/vim/src/structs.h	/^    int		b_ind_paren_prev;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_scopedecl	vim/vim/src/structs.h	/^    int		b_ind_scopedecl;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_scopedecl_code	vim/vim/src/structs.h	/^    int		b_ind_scopedecl_code;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_unclosed	vim/vim/src/structs.h	/^    int		b_ind_unclosed;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_unclosed2	vim/vim/src/structs.h	/^    int		b_ind_unclosed2;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_unclosed_noignore	vim/vim/src/structs.h	/^    int		b_ind_unclosed_noignore;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_unclosed_whiteok	vim/vim/src/structs.h	/^    int		b_ind_unclosed_whiteok;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ind_unclosed_wrapped	vim/vim/src/structs.h	/^    int		b_ind_unclosed_wrapped;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ino	vim/vim/src/structs.h	/^    ino_t	b_ino;		\/* inode number *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_key	vim/vim/src/structs.h	/^    char_u	b_key[VIM_SIZEOF_INT * 2 + 1];$/;"	m	struct:file_buffer	access:public
file_buffer::b_kmap_ga	vim/vim/src/structs.h	/^    garray_T	b_kmap_ga;	\/* the keymap table *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_kmap_state	vim/vim/src/structs.h	/^    short	b_kmap_state;	\/* using "lmap" mappings *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_last_change	vim/vim/src/structs.h	/^    pos_T	b_last_change;	\/* position of last change: '. mark *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_last_cursor	vim/vim/src/structs.h	/^    pos_T	b_last_cursor;	\/* cursor position when last unloading this$/;"	m	struct:file_buffer	access:public
file_buffer::b_last_insert	vim/vim/src/structs.h	/^    pos_T	b_last_insert;	\/* where Insert mode was left *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_last_used	vim/vim/src/structs.h	/^    time_T	b_last_used;	\/* time when the buffer was last used; used$/;"	m	struct:file_buffer	access:public
file_buffer::b_locked	vim/vim/src/structs.h	/^    int		b_locked;	\/* Buffer is being closed or referenced, don't$/;"	m	struct:file_buffer	access:public
file_buffer::b_maphash	vim/vim/src/structs.h	/^    mapblock_T	*(b_maphash[256]);$/;"	m	struct:file_buffer	access:public
file_buffer::b_mapped_ctrl_c	vim/vim/src/structs.h	/^    int		b_mapped_ctrl_c; \/* modes where CTRL-C is mapped *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_marks_read	vim/vim/src/structs.h	/^    int		b_marks_read;	\/* Have we read viminfo marks yet? *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_may_swap	vim/vim/src/structs.h	/^    int		b_may_swap;$/;"	m	struct:file_buffer	access:public
file_buffer::b_ml	vim/vim/src/structs.h	/^    memline_T	b_ml;		\/* associated memline (also contains line$/;"	m	struct:file_buffer	access:public
file_buffer::b_mod_bot	vim/vim/src/structs.h	/^    linenr_T	b_mod_bot;	\/* lnum below last changed line, AFTER the$/;"	m	struct:file_buffer	access:public
file_buffer::b_mod_set	vim/vim/src/structs.h	/^    int		b_mod_set;	\/* TRUE when there are changes since the last$/;"	m	struct:file_buffer	access:public
file_buffer::b_mod_top	vim/vim/src/structs.h	/^    linenr_T	b_mod_top;	\/* topmost lnum that was changed *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_mod_xlines	vim/vim/src/structs.h	/^    long	b_mod_xlines;	\/* number of extra buffer lines inserted;$/;"	m	struct:file_buffer	access:public
file_buffer::b_mtime	vim/vim/src/structs.h	/^    long	b_mtime;	\/* last change time of original file *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_mtime_read	vim/vim/src/structs.h	/^    long	b_mtime_read;	\/* last change time when reading *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_mzscheme_ref	vim/vim/src/structs.h	/^    void	*b_mzscheme_ref; \/* The MzScheme reference to this buffer *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_namedm	vim/vim/src/structs.h	/^    pos_T	b_namedm[NMARKS]; \/* current named marks (mark.c) *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_netbeans_file	vim/vim/src/structs.h	/^    int		b_netbeans_file;    \/* TRUE when buffer is owned by NetBeans *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_new_change	vim/vim/src/structs.h	/^    int		b_new_change;		\/* set by u_savecommon() *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_next	vim/vim/src/structs.h	/^    buf_T	*b_next;	\/* links in list of buffers *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_no_eol_lnum	vim/vim/src/structs.h	/^    linenr_T	b_no_eol_lnum;	\/* non-zero lnum when last line of next binary$/;"	m	struct:file_buffer	access:public
file_buffer::b_nwindows	vim/vim/src/structs.h	/^    int		b_nwindows;	\/* nr of windows open on this buffer *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_op_end	vim/vim/src/structs.h	/^    pos_T	b_op_end;$/;"	m	struct:file_buffer	access:public
file_buffer::b_op_start	vim/vim/src/structs.h	/^    pos_T	b_op_start;$/;"	m	struct:file_buffer	access:public
file_buffer::b_op_start_orig	vim/vim/src/structs.h	/^    pos_T	b_op_start_orig;  \/* used for Insstart_orig *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_orig_mode	vim/vim/src/structs.h	/^    int		b_orig_mode;	\/* mode of original file *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_orig_size	vim/vim/src/structs.h	/^    off_T	b_orig_size;	\/* size of original file in bytes *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ai	vim/vim/src/structs.h	/^    int		b_p_ai;		\/* 'autoindent' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ai_nopaste	vim/vim/src/structs.h	/^    int		b_p_ai_nopaste;	\/* b_p_ai saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ar	vim/vim/src/structs.h	/^    int		b_p_ar;		\/* 'autoread' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bexpr	vim/vim/src/structs.h	/^    char_u	*b_p_bexpr;	\/* 'balloonexpr' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bexpr_flags	vim/vim/src/structs.h	/^    long_u	b_p_bexpr_flags;\/* flags for 'balloonexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bh	vim/vim/src/structs.h	/^    char_u	*b_p_bh;	\/* 'bufhidden' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bin	vim/vim/src/structs.h	/^    int		b_p_bin;	\/* 'binary' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bkc	vim/vim/src/structs.h	/^    char_u	*b_p_bkc;	\/* 'backupcopy' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bl	vim/vim/src/structs.h	/^    int		b_p_bl;		\/* 'buflisted' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bomb	vim/vim/src/structs.h	/^    int		b_p_bomb;	\/* 'bomb' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_bt	vim/vim/src/structs.h	/^    char_u	*b_p_bt;	\/* 'buftype' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cfu	vim/vim/src/structs.h	/^    char_u	*b_p_cfu;	\/* 'completefunc' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ci	vim/vim/src/structs.h	/^    int		b_p_ci;		\/* 'copyindent' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cin	vim/vim/src/structs.h	/^    int		b_p_cin;	\/* 'cindent' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cink	vim/vim/src/structs.h	/^    char_u	*b_p_cink;	\/* 'cinkeys' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cino	vim/vim/src/structs.h	/^    char_u	*b_p_cino;	\/* 'cinoptions' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cinw	vim/vim/src/structs.h	/^    char_u	*b_p_cinw;	\/* 'cinwords' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cm	vim/vim/src/structs.h	/^    char_u	*b_p_cm;	\/* 'cryptmethod' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cms	vim/vim/src/structs.h	/^    char_u	*b_p_cms;	\/* 'commentstring' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_com	vim/vim/src/structs.h	/^    char_u	*b_p_com;	\/* 'comments' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_cpt	vim/vim/src/structs.h	/^    char_u	*b_p_cpt;	\/* 'complete' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_def	vim/vim/src/structs.h	/^    char_u	*b_p_def;	\/* 'define' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_dict	vim/vim/src/structs.h	/^    char_u	*b_p_dict;	\/* 'dictionary' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_efm	vim/vim/src/structs.h	/^    char_u	*b_p_efm;	\/* 'errorformat' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_eol	vim/vim/src/structs.h	/^    int		b_p_eol;	\/* 'endofline' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ep	vim/vim/src/structs.h	/^    char_u	*b_p_ep;	\/* 'equalprg' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_et	vim/vim/src/structs.h	/^    int		b_p_et;		\/* 'expandtab' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_et_nobin	vim/vim/src/structs.h	/^    int		b_p_et_nobin;	\/* b_p_et saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_et_nopaste	vim/vim/src/structs.h	/^    int	        b_p_et_nopaste; \/* b_p_et saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_fenc	vim/vim/src/structs.h	/^    char_u	*b_p_fenc;	\/* 'fileencoding' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_fex	vim/vim/src/structs.h	/^    char_u	*b_p_fex;	\/* 'formatexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_fex_flags	vim/vim/src/structs.h	/^    long_u	b_p_fex_flags;	\/* flags for 'formatexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ff	vim/vim/src/structs.h	/^    char_u	*b_p_ff;	\/* 'fileformat' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_fixeol	vim/vim/src/structs.h	/^    int		b_p_fixeol;	\/* 'fixendofline' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_flp	vim/vim/src/structs.h	/^    char_u	*b_p_flp;	\/* 'formatlistpat' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_fo	vim/vim/src/structs.h	/^    char_u	*b_p_fo;	\/* 'formatoptions' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_fp	vim/vim/src/structs.h	/^    char_u	*b_p_fp;	\/* 'formatprg' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ft	vim/vim/src/structs.h	/^    char_u	*b_p_ft;	\/* 'filetype' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_gp	vim/vim/src/structs.h	/^    char_u	*b_p_gp;	\/* 'grepprg' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_iminsert	vim/vim/src/structs.h	/^    long	b_p_iminsert;	\/* input mode for insert *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_imsearch	vim/vim/src/structs.h	/^    long	b_p_imsearch;	\/* input mode for search *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_inc	vim/vim/src/structs.h	/^    char_u	*b_p_inc;	\/* 'include' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_inde	vim/vim/src/structs.h	/^    char_u	*b_p_inde;	\/* 'indentexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_inde_flags	vim/vim/src/structs.h	/^    long_u	b_p_inde_flags;	\/* flags for 'indentexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_indk	vim/vim/src/structs.h	/^    char_u	*b_p_indk;	\/* 'indentkeys' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_inex	vim/vim/src/structs.h	/^    char_u	*b_p_inex;	\/* 'includeexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_inex_flags	vim/vim/src/structs.h	/^    long_u	b_p_inex_flags;	\/* flags for 'includeexpr' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_inf	vim/vim/src/structs.h	/^    int		b_p_inf;	\/* 'infercase' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_initialized	vim/vim/src/structs.h	/^    int		b_p_initialized;	\/* set when options initialized *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_isk	vim/vim/src/structs.h	/^    char_u	*b_p_isk;	\/* 'iskeyword' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_key	vim/vim/src/structs.h	/^    char_u	*b_p_key;	\/* 'key' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_keymap	vim/vim/src/structs.h	/^    char_u	*b_p_keymap;	\/* 'keymap' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_kp	vim/vim/src/structs.h	/^    char_u	*b_p_kp;	\/* 'keywordprg' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_lisp	vim/vim/src/structs.h	/^    int		b_p_lisp;	\/* 'lisp' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_lw	vim/vim/src/structs.h	/^    char_u	*b_p_lw;	\/* 'lispwords' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ma	vim/vim/src/structs.h	/^    int		b_p_ma;		\/* 'modifiable' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_menc	vim/vim/src/structs.h	/^    char_u	*b_p_menc;	\/* 'makeencoding' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ml	vim/vim/src/structs.h	/^    int		b_p_ml;		\/* 'modeline' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ml_nobin	vim/vim/src/structs.h	/^    int		b_p_ml_nobin;	\/* b_p_ml saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_mp	vim/vim/src/structs.h	/^    char_u	*b_p_mp;	\/* 'makeprg' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_mps	vim/vim/src/structs.h	/^    char_u	*b_p_mps;	\/* 'matchpairs' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_nf	vim/vim/src/structs.h	/^    char_u	*b_p_nf;	\/* 'nrformats' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ofu	vim/vim/src/structs.h	/^    char_u	*b_p_ofu;	\/* 'omnifunc' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_path	vim/vim/src/structs.h	/^    char_u	*b_p_path;	\/* 'path' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_pi	vim/vim/src/structs.h	/^    int		b_p_pi;		\/* 'preserveindent' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_qe	vim/vim/src/structs.h	/^    char_u	*b_p_qe;	\/* 'quoteescape' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ro	vim/vim/src/structs.h	/^    int		b_p_ro;		\/* 'readonly' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_scriptID	vim/vim/src/structs.h	/^    int		b_p_scriptID[BV_COUNT];	\/* SIDs for buffer-local options *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_si	vim/vim/src/structs.h	/^    int		b_p_si;		\/* 'smartindent' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_smc	vim/vim/src/structs.h	/^    long	b_p_smc;	\/* 'synmaxcol' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_sn	vim/vim/src/structs.h	/^    int		b_p_sn;		\/* 'shortname' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_sts	vim/vim/src/structs.h	/^    long	b_p_sts;	\/* 'softtabstop' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_sts_nopaste	vim/vim/src/structs.h	/^    long	b_p_sts_nopaste; \/* b_p_sts saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_sua	vim/vim/src/structs.h	/^    char_u	*b_p_sua;	\/* 'suffixesadd' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_sw	vim/vim/src/structs.h	/^    long	b_p_sw;		\/* 'shiftwidth' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_swf	vim/vim/src/structs.h	/^    int		b_p_swf;	\/* 'swapfile' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_syn	vim/vim/src/structs.h	/^    char_u	*b_p_syn;	\/* 'syntax' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tags	vim/vim/src/structs.h	/^    char_u	*b_p_tags;	\/* 'tags' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tc	vim/vim/src/structs.h	/^    char_u	*b_p_tc;	\/* 'tagcase' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ts	vim/vim/src/structs.h	/^    long	b_p_ts;		\/* 'tabstop' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tsr	vim/vim/src/structs.h	/^    char_u	*b_p_tsr;	\/* 'thesaurus' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tw	vim/vim/src/structs.h	/^    long	b_p_tw;		\/* 'textwidth' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tw_nobin	vim/vim/src/structs.h	/^    long	b_p_tw_nobin;	\/* b_p_tw saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tw_nopaste	vim/vim/src/structs.h	/^    long	b_p_tw_nopaste;	\/* b_p_tw saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_tx	vim/vim/src/structs.h	/^    int		b_p_tx;		\/* 'textmode' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_udf	vim/vim/src/structs.h	/^    int		b_p_udf;	\/* 'undofile' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_ul	vim/vim/src/structs.h	/^    long	b_p_ul;		\/* 'undolevels' local value *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_wm	vim/vim/src/structs.h	/^    long	b_p_wm;		\/* 'wrapmargin' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_wm_nobin	vim/vim/src/structs.h	/^    long	b_p_wm_nobin;	\/* b_p_wm saved for binary mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_p_wm_nopaste	vim/vim/src/structs.h	/^    long	b_p_wm_nopaste;	\/* b_p_wm saved for paste mode *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_perl_private	vim/vim/src/structs.h	/^    void	*b_perl_private;$/;"	m	struct:file_buffer	access:public
file_buffer::b_prev	vim/vim/src/structs.h	/^    buf_T	*b_prev;$/;"	m	struct:file_buffer	access:public
file_buffer::b_python3_ref	vim/vim/src/structs.h	/^    void	*b_python3_ref;	\/* The Python3 reference to this buffer *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_python_ref	vim/vim/src/structs.h	/^    void	*b_python_ref;	\/* The Python reference to this buffer *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_ruby_ref	vim/vim/src/structs.h	/^    void	*b_ruby_ref;$/;"	m	struct:file_buffer	access:public
file_buffer::b_s	vim/vim/src/structs.h	/^    synblock_T	b_s;		\/* Info related to syntax highlighting.  w_s$/;"	m	struct:file_buffer	access:public
file_buffer::b_saving	vim/vim/src/structs.h	/^    int		b_saving;	\/* Set to TRUE if we are in the middle of$/;"	m	struct:file_buffer	access:public
file_buffer::b_scanned	vim/vim/src/structs.h	/^    int		b_scanned;	\/* ^N\/^P have scanned this buffer *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_sfname	vim/vim/src/structs.h	/^    char_u	*b_sfname;	\/* short file name *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_shortname	vim/vim/src/structs.h	/^    int		b_shortname;	\/* this file has an 8.3 file name *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_signlist	vim/vim/src/structs.h	/^    signlist_T	*b_signlist;	\/* list of signs to draw *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_spell	vim/vim/src/structs.h	/^    int		b_spell;	\/* TRUE for a spell file buffer, most fields$/;"	m	struct:file_buffer	access:public
file_buffer::b_start_bomb	vim/vim/src/structs.h	/^    int		b_start_bomb;	\/* 'bomb' when it was read *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_start_eol	vim/vim/src/structs.h	/^    int		b_start_eol;	\/* last line had eol when it was read *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_start_fenc	vim/vim/src/structs.h	/^    char_u	*b_start_fenc;	\/* 'fileencoding' when edit started or NULL *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_start_ffc	vim/vim/src/structs.h	/^    int		b_start_ffc;	\/* first char of 'ff' when edit started *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_tc_flags	vim/vim/src/structs.h	/^    unsigned	b_tc_flags;     \/* flags for 'tagcase' *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_tcl_ref	vim/vim/src/structs.h	/^    void	*b_tcl_ref;$/;"	m	struct:file_buffer	access:public
file_buffer::b_term	vim/vim/src/structs.h	/^    term_T	*b_term;	\/* When not NULL this buffer is for a terminal$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_curhead	vim/vim/src/structs.h	/^    u_header_T	*b_u_curhead;	\/* pointer to current header *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_line_colnr	vim/vim/src/structs.h	/^    colnr_T	b_u_line_colnr;	\/* optional column number *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_line_lnum	vim/vim/src/structs.h	/^    linenr_T	b_u_line_lnum;	\/* line number of line in u_line *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_line_ptr	vim/vim/src/structs.h	/^    char_u	*b_u_line_ptr;	\/* saved line for "U" command *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_newhead	vim/vim/src/structs.h	/^    u_header_T	*b_u_newhead;	\/* pointer to newest header; may not be valid$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_numhead	vim/vim/src/structs.h	/^    int		b_u_numhead;	\/* current number of headers *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_oldhead	vim/vim/src/structs.h	/^    u_header_T	*b_u_oldhead;	\/* pointer to oldest header *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_save_nr_cur	vim/vim/src/structs.h	/^    long	b_u_save_nr_cur; \/* file write nr after which we are now *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_save_nr_last	vim/vim/src/structs.h	/^    long	b_u_save_nr_last; \/* counter for last file write *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_seq_cur	vim/vim/src/structs.h	/^    long	b_u_seq_cur;	\/* hu_seq of header below which we are now *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_seq_last	vim/vim/src/structs.h	/^    long	b_u_seq_last;	\/* last used undo sequence number *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_synced	vim/vim/src/structs.h	/^    int		b_u_synced;	\/* entry lists are synced *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_u_time_cur	vim/vim/src/structs.h	/^    time_T	b_u_time_cur;	\/* uh_time of header below which we are now *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_ucmds	vim/vim/src/structs.h	/^    garray_T	b_ucmds;$/;"	m	struct:file_buffer	access:public
file_buffer::b_vars	vim/vim/src/structs.h	/^    dict_T	*b_vars;	\/* internal variables, local to buffer *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_visual	vim/vim/src/structs.h	/^    visualinfo_T b_visual;$/;"	m	struct:file_buffer	access:public
file_buffer::b_visual_mode_eval	vim/vim/src/structs.h	/^    int		b_visual_mode_eval;  \/* b_visual.vi_mode for visualmode() *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_was_netbeans_file	vim/vim/src/structs.h	/^    int		b_was_netbeans_file;\/* TRUE if b_netbeans_file was once set *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_wininfo	vim/vim/src/structs.h	/^    wininfo_T	*b_wininfo;	\/* list of last used info for each window *\/$/;"	m	struct:file_buffer	access:public
file_buffer::b_write_to_channel	vim/vim/src/structs.h	/^    int		b_write_to_channel; \/* TRUE when appended lines are written to$/;"	m	struct:file_buffer	access:public
file_ff_differs	vim/vim/src/option.c	/^file_ff_differs(buf_T *buf, int ignore_empty)$/;"	f	signature:(buf_T *buf, int ignore_empty)
file_input	vim/vim/src/if_python.c	119;"	d	file:
file_line	vim/vim/src/hardcopy.c	/^    linenr_T	file_line;	    \/* line nr in the buffer *\/$/;"	m	struct:__anon212	file:	access:public
file_name	vim/vim/src/gui_gtk.c	/^    const char *file_name;$/;"	m	struct:IconNames	file:	access:public
file_name_at_cursor	vim/vim/src/window.c	/^file_name_at_cursor(int options, long count, linenr_T *file_lnum)$/;"	f	signature:(int options, long count, linenr_T *file_lnum)
file_name_in_line	vim/vim/src/window.c	/^file_name_in_line($/;"	f	signature:( char_u *line, int col, int options, long count, char_u *rel_fname, linenr_T *file_lnum)
file_owned	vim/vim/src/main.c	/^file_owned(char *fname)$/;"	f	file:	signature:(char *fname)
file_owned	vim/vim/src/main.c	/^static int file_owned(char *fname);$/;"	p	file:	signature:(char *fname)
file_pat_to_reg_pat	vim/vim/src/fileio.c	/^file_pat_to_reg_pat($/;"	f	signature:( char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash UNUSED)
filedlg	vim/vim/src/gui.h	/^    GtkWidget	*filedlg;	    \/* file selection dialog *\/$/;"	m	struct:Gui	access:public
fileformat	vim/vim/src/ex_cmds2.c	/^    int		fileformat;	\/* EOL_UNKNOWN, EOL_UNIX or EOL_DOS *\/$/;"	m	struct:source_cookie	file:	access:public
fileinfo	vim/vim/src/buffer.c	/^fileinfo($/;"	f	signature:( int fullname, int shorthelp, int dont_truncate)
filemark	vim/vim/src/structs.h	/^typedef struct filemark$/;"	s
filemark::fnum	vim/vim/src/structs.h	/^    int		fnum;		\/* file number *\/$/;"	m	struct:filemark	access:public
filemark::mark	vim/vim/src/structs.h	/^    pos_T	mark;		\/* cursor position *\/$/;"	m	struct:filemark	access:public
filemess	vim/vim/src/fileio.c	/^filemess($/;"	f	signature:( buf_T *buf, char_u *name, char_u *s, int attr)
filename	vim/vim/src/hardcopy.c	/^    char_u  filename[MAXPATHL + 1];$/;"	m	struct:prt_ps_resource_S	file:	access:public
fileno	vim/vim/src/xxd/xxd.c	99;"	d	file:
filetype_detect	vim/vim/src/ex_docmd.c	/^static int filetype_detect = FALSE;$/;"	v	file:
filetype_indent	vim/vim/src/ex_docmd.c	/^static int filetype_indent = FALSE;$/;"	v	file:
filetype_plugin	vim/vim/src/ex_docmd.c	/^static int filetype_plugin = FALSE;$/;"	v	file:
filewritable	vim/vim/src/misc2.c	/^filewritable(char_u *fname)$/;"	f	signature:(char_u *fname)
fill	vim/vim/src/move.c	/^    int		    fill;	\/* filler lines *\/$/;"	m	struct:__anon151	file:	access:public
fill_assert_error	vim/vim/src/eval.c	/^fill_assert_error($/;"	f	signature:( garray_T *gap, typval_T *opt_msg_tv, char_u *exp_str, typval_T *exp_tv, typval_T *got_tv, assert_type_T atype)
fill_breakat_flags	vim/vim/src/option.c	/^fill_breakat_flags(void)$/;"	f	file:	signature:(void)
fill_breakat_flags	vim/vim/src/option.c	/^static void fill_breakat_flags(void);$/;"	p	file:	signature:(void)
fill_diff	vim/vim/src/globals.h	/^EXTERN int	fill_diff INIT(= '-');$/;"	v
fill_fold	vim/vim/src/globals.h	/^EXTERN int	fill_fold INIT(= '-');$/;"	v
fill_foldcolumn	vim/vim/src/screen.c	/^fill_foldcolumn($/;"	f	file:	signature:( char_u *p, win_T *wp, int closed, linenr_T lnum)
fill_foldcolumn	vim/vim/src/screen.c	/^static void fill_foldcolumn(char_u *p, win_T *wp, int closed, linenr_T lnum);$/;"	p	file:	signature:(char_u *p, win_T *wp, int closed, linenr_T lnum)
fill_from_cookie	vim/vim/src/json_test.c	/^fill_from_cookie(js_read_T *reader)$/;"	f	file:	signature:(js_read_T *reader)
fill_input_buf	vim/vim/src/ui.c	/^fill_input_buf(int exit_on_error UNUSED)$/;"	f	signature:(int exit_on_error UNUSED)
fill_lists	vim/vim/src/gui_xmdlg.c	/^fill_lists(enum ListSpecifier fix, SharedFontSelData *data)$/;"	f	file:	signature:(enum ListSpecifier fix, SharedFontSelData *data)
fill_mouse_coord	vim/vim/src/gui.c	/^fill_mouse_coord(char_u *p, int col, int row)$/;"	f	file:	signature:(char_u *p, int col, int row)
fill_mouse_coord	vim/vim/src/gui.c	/^static void fill_mouse_coord(char_u *p, int col, int row);$/;"	p	file:	signature:(char_u *p, int col, int row)
fill_numbuflen	vim/vim/src/json.c	/^fill_numbuflen(js_read_T *reader)$/;"	f	file:	signature:(js_read_T *reader)
fill_stl	vim/vim/src/globals.h	/^EXTERN int	fill_stl INIT(= ' ');$/;"	v
fill_stlnc	vim/vim/src/globals.h	/^EXTERN int	fill_stlnc INIT(= ' ');$/;"	v
fill_submatch_list	vim/vim/src/regexp.c	/^fill_submatch_list(int argc UNUSED, typval_T *argv, int argcount)$/;"	f	file:	signature:(int argc UNUSED, typval_T *argv, int argcount)
fill_utf8	vim/vim/src/libvterm/src/utf8.h	/^INLINE int fill_utf8(long codepoint, char *str)$/;"	f	signature:(long codepoint, char *str)
fill_utf8	vim/vim/src/libvterm/src/utf8.h	/^int fill_utf8(long codepoint, char *str);$/;"	p	signature:(long codepoint, char *str)
fill_vert	vim/vim/src/globals.h	/^EXTERN int	fill_vert INIT(= ' ');$/;"	v
fillchar_status	vim/vim/src/screen.c	/^fillchar_status(int *attr, int is_curwin)$/;"	f	file:	signature:(int *attr, int is_curwin)
fillchar_status	vim/vim/src/screen.c	/^static int fillchar_status(int *attr, int is_curwin);$/;"	p	file:	signature:(int *attr, int is_curwin)
fillchar_vsep	vim/vim/src/screen.c	/^fillchar_vsep(int *attr)$/;"	f	file:	signature:(int *attr)
fillchar_vsep	vim/vim/src/screen.c	/^static int fillchar_vsep(int *attr);$/;"	p	file:	signature:(int *attr)
filter_force	vim/vim/src/structs.h	/^    int		filter_force;		\/* set for :filter! *\/$/;"	m	struct:__anon171	access:public
filter_map	vim/vim/src/eval.c	/^filter_map(typval_T *argvars, typval_T *rettv, int map)$/;"	f	signature:(typval_T *argvars, typval_T *rettv, int map)
filter_map_one	vim/vim/src/eval.c	/^filter_map_one(typval_T *tv, typval_T *expr, int map, int *remp)$/;"	f	file:	signature:(typval_T *tv, typval_T *expr, int map, int *remp)
filter_regmatch	vim/vim/src/structs.h	/^    regmatch_T	filter_regmatch;	\/* set by :filter \/pat\/ *\/$/;"	m	struct:__anon171	access:public
filter_uri_list	vim/vim/src/gui_gtk_x11.c	/^filter_uri_list(char_u **outlist, int max, char_u *src)$/;"	f	file:	signature:(char_u **outlist, int max, char_u *src)
find	vim/vim/src/gui_gtk.c	/^    GtkWidget *find;	\/* 'Find Next' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
find	vim/vim/src/gui_motif.c	/^    Widget find;	\/* 'Find Next' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
findServer	vim/vim/src/os_mswin.c	/^findServer(char_u *name)$/;"	f	file:	signature:(char_u *name)
findYourself	vim/vim/src/workshop.c	/^findYourself($/;"	f	signature:( char *argv0)
find_bat_exe	vim/vim/src/dosinst.c	/^find_bat_exe(int check_bat_only)$/;"	f	file:	signature:(int check_bat_only)
find_buffer	vim/vim/src/channel.c	/^find_buffer(char_u *name, int err, int msg)$/;"	f	file:	signature:(char_u *name, int err, int msg)
find_buffer	vim/vim/src/evalfunc.c	/^find_buffer(typval_T *avar)$/;"	f	file:	signature:(typval_T *avar)
find_buffer	vim/vim/src/evalfunc.c	/^static buf_T *find_buffer(typval_T *avar);$/;"	p	file:	signature:(typval_T *avar)
find_builtin_term	vim/vim/src/term.c	/^find_builtin_term(char_u *term)$/;"	f	file:	signature:(char_u *term)
find_builtin_term	vim/vim/src/term.c	/^static struct builtin_term *find_builtin_term(char_u *name);$/;"	p	file:	signature:(char_u *name)
find_cmdline_var	vim/vim/src/ex_docmd.c	/^find_cmdline_var(char_u *src, int *usedlen)$/;"	f	signature:(char_u *src, int *usedlen)
find_command	vim/vim/src/ex_docmd.c	/^find_command(exarg_T *eap, int *full UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int *full UNUSED)
find_command	vim/vim/src/ex_docmd.c	/^static char_u	*find_command(exarg_T *eap, int *full);$/;"	p	file:	signature:(exarg_T *eap, int *full)
find_command	vim/vim/src/normal.c	/^find_command(int cmdchar)$/;"	f	file:	signature:(int cmdchar)
find_command	vim/vim/src/normal.c	/^static int	find_command(int cmdchar);$/;"	p	file:	signature:(int cmdchar)
find_decl	vim/vim/src/normal.c	/^find_decl($/;"	f	signature:( char_u *ptr, int len, int locally, int thisblock, int flags_arg)
find_directory_in_path	vim/vim/src/misc2.c	/^find_directory_in_path($/;"	f	signature:( char_u *ptr, int len, int options, char_u *rel_fname)
find_end_event	vim/vim/src/fileio.c	/^find_end_event($/;"	f	file:	signature:( char_u *arg, int have_group)
find_end_event	vim/vim/src/fileio.c	/^static char_u *find_end_event(char_u *arg, int have_group);$/;"	p	file:	signature:(char_u *arg, int have_group)
find_end_of_word	vim/vim/src/normal.c	/^find_end_of_word(pos_T *pos)$/;"	f	file:	signature:(pos_T *pos)
find_end_of_word	vim/vim/src/normal.c	/^static void	find_end_of_word(pos_T *);$/;"	p	file:	signature:(pos_T *)
find_endpos	vim/vim/src/syntax.c	/^find_endpos($/;"	f	file:	signature:( int idx, lpos_T *startpos, lpos_T *m_endpos, lpos_T *hl_endpos, long *flagsp, lpos_T *end_endpos, int *end_idx, reg_extmatch_T *start_ext)
find_endpos	vim/vim/src/syntax.c	/^static void find_endpos(int idx, lpos_T *startpos, lpos_T *m_endpos, lpos_T *hl_endpos, long *flagsp, lpos_T *end_endpos, int *end_idx, reg_extmatch_T *start_ext);$/;"	p	file:	signature:(int idx, lpos_T *startpos, lpos_T *m_endpos, lpos_T *hl_endpos, long *flagsp, lpos_T *end_endpos, int *end_idx, reg_extmatch_T *start_ext)
find_executable_arg	vim/vim/src/if_tcl.c	/^static char *find_executable_arg = NULL;$/;"	v	file:
find_extra	vim/vim/src/tag.c	/^find_extra(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
find_extra	vim/vim/src/tag.c	/^static int find_extra(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
find_file_in_path	vim/vim/src/misc2.c	/^find_file_in_path($/;"	f	signature:( char_u *ptr, int len, int options, int first, char_u *rel_fname)
find_file_in_path_option	vim/vim/src/misc2.c	/^find_file_in_path_option($/;"	f	signature:( char_u *ptr, int len, int options, int first, char_u *path_option, int find_what, char_u *rel_fname, char_u *suffixes)
find_file_name_in_path	vim/vim/src/window.c	/^find_file_name_in_path($/;"	f	signature:( char_u *ptr, int len, int options, long count, char_u *rel_fname)
find_first_blank	vim/vim/src/search.c	/^find_first_blank(pos_T *posp)$/;"	f	file:	signature:(pos_T *posp)
find_first_blank	vim/vim/src/search.c	/^static void find_first_blank(pos_T *);$/;"	p	file:	signature:(pos_T *)
find_func	vim/vim/src/userfunc.c	/^find_func(char_u *name)$/;"	f	signature:(char_u *name)
find_help_tags	vim/vim/src/ex_cmds.c	/^find_help_tags($/;"	f	signature:( char_u *arg, int *num_matches, char_u ***matches, int keep_lang)
find_hi_in_scoped_ht	vim/vim/src/userfunc.c	/^find_hi_in_scoped_ht(char_u *name, hashtab_T **pht)$/;"	f	signature:(char_u *name, hashtab_T **pht)
find_ident_at_pos	vim/vim/src/normal.c	/^find_ident_at_pos($/;"	f	signature:( win_T *wp, linenr_T lnum, colnr_T startcol, char_u **string, int find_type)
find_ident_under_cursor	vim/vim/src/normal.c	/^find_ident_under_cursor(char_u **string, int find_type)$/;"	f	signature:(char_u **string, int find_type)
find_imported_module_by_funcname	vim/vim/src/os_win32.c	/^find_imported_module_by_funcname(HINSTANCE hInst, const char *funcname)$/;"	f	signature:(HINSTANCE hInst, const char *funcname)
find_internal_func	vim/vim/src/evalfunc.c	/^find_internal_func($/;"	f	signature:( char_u *name)
find_is_eval_item	vim/vim/src/normal.c	/^find_is_eval_item($/;"	f	file:	signature:( char_u *ptr, int *colp, int *bnp, int dir)
find_is_eval_item	vim/vim/src/normal.c	/^static int find_is_eval_item(char_u *ptr, int *colp, int *nbp, int dir);$/;"	p	file:	signature:(char_u *ptr, int *colp, int *nbp, int dir)
find_keepcap_word	vim/vim/src/spell.c	/^find_keepcap_word(slang_T *slang, char_u *fword, char_u *kword)$/;"	f	file:	signature:(slang_T *slang, char_u *fword, char_u *kword)
find_keepcap_word	vim/vim/src/spell.c	/^static void find_keepcap_word(slang_T *slang, char_u *fword, char_u *kword);$/;"	p	file:	signature:(slang_T *slang, char_u *fword, char_u *kword)
find_key_option	vim/vim/src/option.c	/^find_key_option(char_u *arg)$/;"	f	file:	signature:(char_u *arg)
find_key_option	vim/vim/src/option.c	/^static int find_key_option(char_u *);$/;"	p	file:	signature:(char_u *)
find_key_press_event	vim/vim/src/gui_gtk.c	/^find_key_press_event($/;"	f	file:	signature:( GtkWidget *widget UNUSED, GdkEventKey *event, SharedFindReplace *frdp)
find_last_paren	vim/vim/src/misc1.c	/^find_last_paren(char_u *l, int start, int end)$/;"	f	file:	signature:(char_u *l, int start, int end)
find_last_paren	vim/vim/src/misc1.c	/^static int	find_last_paren(char_u *l, int start, int end);$/;"	p	file:	signature:(char_u *l, int start, int end)
find_line_comment	vim/vim/src/misc1.c	/^find_line_comment(void) \/* XXX *\/$/;"	f	file:	signature:(void)
find_line_comment	vim/vim/src/misc1.c	/^static pos_T	*find_line_comment(void);$/;"	p	file:	signature:(void)
find_line_end	vim/vim/src/edit.c	/^find_line_end(char_u *ptr)$/;"	f	file:	signature:(char_u *ptr)
find_line_end	vim/vim/src/edit.c	/^static char_u *find_line_end(char_u *ptr);$/;"	p	file:	signature:(char_u *ptr)
find_locales	vim/vim/src/ex_cmds2.c	/^find_locales(void)$/;"	f	file:	signature:(void)
find_match	vim/vim/src/misc1.c	/^find_match(int lookfor, linenr_T ourscope)$/;"	f	file:	signature:(int lookfor, linenr_T ourscope)
find_match	vim/vim/src/misc1.c	/^static int	find_match(int lookfor, linenr_T ourscope);$/;"	p	file:	signature:(int lookfor, linenr_T ourscope)
find_match_char	vim/vim/src/misc1.c	/^find_match_char (int c, int ind_maxparen)	\/* XXX *\/$/;"	f	file:	signature:(int c, int ind_maxparen)
find_match_char	vim/vim/src/misc1.c	/^static pos_T	*find_match_char(int c, int ind_maxparen);$/;"	p	file:	signature:(int c, int ind_maxparen)
find_match_paren	vim/vim/src/misc1.c	/^find_match_paren(int ind_maxparen)	\/* XXX *\/$/;"	f	file:	signature:(int ind_maxparen)
find_match_paren	vim/vim/src/misc1.c	/^static pos_T	*find_match_paren(int);$/;"	p	file:	signature:(int)
find_match_paren_after_brace	vim/vim/src/misc1.c	/^find_match_paren_after_brace (int ind_maxparen)	    \/* XXX *\/$/;"	f	file:	signature:(int ind_maxparen)
find_match_text	vim/vim/src/regexp_nfa.c	/^find_match_text(colnr_T startcol, int regstart, char_u *match_text)$/;"	f	file:	signature:(colnr_T startcol, int regstart, char_u *match_text)
find_match_text	vim/vim/src/regexp_nfa.c	/^static long find_match_text(colnr_T startcol, int regstart, char_u *match_text);$/;"	p	file:	signature:(colnr_T startcol, int regstart, char_u *match_text)
find_module	vim/vim/src/if_py_both.h	/^find_module(char *fullname, char *tail, PyObject *new_path)$/;"	f	signature:(char *fullname, char *tail, PyObject *new_path)
find_mps_values	vim/vim/src/option.c	/^find_mps_values($/;"	f	signature:( int *initc, int *findc, int *backwards, int switchit)
find_name_end	vim/vim/src/eval.c	/^find_name_end($/;"	f	signature:( char_u *arg, char_u **expr_start, char_u **expr_end, int flags)
find_next_quote	vim/vim/src/search.c	/^find_next_quote($/;"	f	file:	signature:( char_u *line, int col, int quotechar, char_u *escape)
find_next_quote	vim/vim/src/search.c	/^static int find_next_quote(char_u *top_ptr, int col, int quotechar, char_u *escape);$/;"	p	file:	signature:(char_u *top_ptr, int col, int quotechar, char_u *escape)
find_nextcmd	vim/vim/src/ex_docmd.c	/^find_nextcmd(char_u *p)$/;"	f	signature:(char_u *p)
find_option_end	vim/vim/src/eval.c	/^find_option_end(char_u **arg, int *opt_flags)$/;"	f	file:	signature:(char_u **arg, int *opt_flags)
find_option_end	vim/vim/src/eval.c	/^static char_u *find_option_end(char_u **arg, int *opt_flags);$/;"	p	file:	signature:(char_u **arg, int *opt_flags)
find_pattern_in_path	vim/vim/src/search.c	/^find_pattern_in_path($/;"	f	signature:( char_u *ptr, int dir UNUSED, int len, int whole, int skip_comments, int type, long count, int action, linenr_T start_lnum, linenr_T end_lnum)
find_prefix	vim/vim/src/spell.c	/^find_prefix(matchinf_T *mip, int mode)$/;"	f	file:	signature:(matchinf_T *mip, int mode)
find_prefix	vim/vim/src/spell.c	/^static void find_prefix(matchinf_T *mip, int mode);$/;"	p	file:	signature:(matchinf_T *mip, int mode)
find_prev_quote	vim/vim/src/search.c	/^find_prev_quote($/;"	f	file:	signature:( char_u *line, int col_start, int quotechar, char_u *escape)
find_prev_quote	vim/vim/src/search.c	/^static int find_prev_quote(char_u *line, int col_start, int quotechar, char_u *escape);$/;"	p	file:	signature:(char_u *line, int col_start, int quotechar, char_u *escape)
find_previous_pathsep	vim/vim/src/misc1.c	/^find_previous_pathsep(char_u *path, char_u **psep)$/;"	f	file:	signature:(char_u *path, char_u **psep)
find_previous_pathsep	vim/vim/src/misc1.c	/^static int find_previous_pathsep(char_u *path, char_u **psep);$/;"	p	file:	signature:(char_u *path, char_u **psep)
find_rawstring_end	vim/vim/src/search.c	/^find_rawstring_end(char_u *linep, pos_T *startpos, pos_T *endpos)$/;"	f	file:	signature:(char_u *linep, pos_T *startpos, pos_T *endpos)
find_rawstring_end	vim/vim/src/search.c	/^static int find_rawstring_end(char_u *linep, pos_T *startpos, pos_T *endpos);$/;"	p	file:	signature:(char_u *linep, pos_T *startpos, pos_T *endpos)
find_region	vim/vim/src/spell.c	/^find_region(char_u *rp, char_u *region)$/;"	f	file:	signature:(char_u *rp, char_u *region)
find_region	vim/vim/src/spell.c	/^static int find_region(char_u *rp, char_u *region);$/;"	p	file:	signature:(char_u *rp, char_u *region)
find_replace_callback	vim/vim/src/gui_motif.c	/^find_replace_callback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
find_replace_callback	vim/vim/src/gui_motif.c	/^static void find_replace_callback(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
find_replace_cb	vim/vim/src/gui_gtk.c	/^find_replace_cb(GtkWidget *widget UNUSED, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer data)
find_replace_cb	vim/vim/src/gui_gtk.c	/^static void find_replace_cb(GtkWidget *widget, gpointer data);$/;"	p	file:	signature:(GtkWidget *widget, gpointer data)
find_replace_destroy_callback	vim/vim/src/gui_motif.c	/^find_replace_destroy_callback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
find_replace_destroy_callback	vim/vim/src/gui_motif.c	/^static void find_replace_destroy_callback(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
find_replace_dialog_create	vim/vim/src/gui_gtk.c	/^find_replace_dialog_create(char_u *arg, int do_replace)$/;"	f	file:	signature:(char_u *arg, int do_replace)
find_replace_dialog_create	vim/vim/src/gui_motif.c	/^find_replace_dialog_create(char_u *arg, int do_replace)$/;"	f	file:	signature:(char_u *arg, int do_replace)
find_replace_dialog_create	vim/vim/src/gui_motif.c	/^static void find_replace_dialog_create(char_u *entry_text, int do_replace);$/;"	p	file:	signature:(char_u *entry_text, int do_replace)
find_replace_dismiss_callback	vim/vim/src/gui_motif.c	/^find_replace_dismiss_callback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
find_replace_dismiss_callback	vim/vim/src/gui_motif.c	/^static void find_replace_dismiss_callback(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
find_replace_keypress	vim/vim/src/gui_motif.c	/^find_replace_keypress($/;"	f	file:	signature:( Widget w UNUSED, SharedFindReplace *frdp, XKeyEvent *event)
find_replace_keypress	vim/vim/src/gui_motif.c	/^static void find_replace_keypress(Widget w, SharedFindReplace * frdp, XKeyEvent * event);$/;"	p	file:	signature:(Widget w, SharedFindReplace * frdp, XKeyEvent * event)
find_some_match	vim/vim/src/evalfunc.c	/^find_some_match(typval_T *argvars, typval_T *rettv, int type)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int type)
find_some_match	vim/vim/src/evalfunc.c	/^static void find_some_match(typval_T *argvars, typval_T *rettv, int start);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv, int start)
find_special_key	vim/vim/src/misc2.c	/^find_special_key($/;"	f	signature:( char_u **srcp, int *modp, int keycode, int keep_x_key, int in_string)
find_special_key_in_table	vim/vim/src/misc2.c	/^find_special_key_in_table(int c)$/;"	f	signature:(int c)
find_start_brace	vim/vim/src/misc1.c	/^find_start_brace(void)	    \/* XXX *\/$/;"	f	file:	signature:(void)
find_start_brace	vim/vim/src/misc1.c	/^static pos_T	*find_start_brace(void);$/;"	p	file:	signature:(void)
find_start_comment	vim/vim/src/misc1.c	/^find_start_comment(int ind_maxcomment)	\/* XXX *\/$/;"	f	signature:(int ind_maxcomment)
find_start_of_word	vim/vim/src/normal.c	/^find_start_of_word(pos_T *pos)$/;"	f	file:	signature:(pos_T *pos)
find_start_of_word	vim/vim/src/normal.c	/^static void	find_start_of_word(pos_T *);$/;"	p	file:	signature:(pos_T *)
find_start_rawstring	vim/vim/src/misc1.c	/^find_start_rawstring(int ind_maxcomment)	\/* XXX *\/$/;"	f	file:	signature:(int ind_maxcomment)
find_start_rawstring	vim/vim/src/misc1.c	/^static pos_T *find_start_rawstring(int ind_maxcomment);$/;"	p	file:	signature:(int ind_maxcomment)
find_tabpage	vim/vim/src/window.c	/^find_tabpage(int n)$/;"	f	signature:(int n)
find_tabwin	vim/vim/src/eval.c	/^find_tabwin($/;"	f	signature:( typval_T *wvp, typval_T *tvp)
find_tag1	vim/vim/runtime/doc/makehtml.awk	/^function find_tag1() {$/;"	f
find_tag2	vim/vim/runtime/doc/makehtml.awk	/^function find_tag2() {$/;"	f
find_tag3	vim/vim/runtime/doc/makehtml.awk	/^function find_tag3() {$/;"	f
find_tags	vim/vim/src/tag.c	/^find_tags($/;"	f	signature:( char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount, char_u *buf_ffname)
find_term_bykeys	vim/vim/src/term.c	/^find_term_bykeys(char_u *src)$/;"	f	signature:(char_u *src)
find_termcode	vim/vim/src/term.c	/^find_termcode(char_u *name)$/;"	f	signature:(char_u *name)
find_timer	vim/vim/src/ex_cmds2.c	/^find_timer(long id)$/;"	f	signature:(long id)
find_ucmd	vim/vim/src/ex_docmd.c	/^find_ucmd($/;"	f	file:	signature:( exarg_T *eap, char_u *p, int *full, expand_T *xp, int *compl)
find_ucmd	vim/vim/src/ex_docmd.c	/^static char_u	*find_ucmd(exarg_T *eap, char_u *p, int *full, expand_T *xp, int *compl);$/;"	p	file:	signature:(exarg_T *eap, char_u *p, int *full, expand_T *xp, int *compl)
find_var	vim/vim/src/eval.c	/^find_var(char_u *name, hashtab_T **htp, int no_autoload)$/;"	f	signature:(char_u *name, hashtab_T **htp, int no_autoload)
find_var_ht	vim/vim/src/eval.c	/^find_var_ht(char_u *name, char_u **varname)$/;"	f	signature:(char_u *name, char_u **varname)
find_var_in_ht	vim/vim/src/eval.c	/^find_var_in_ht($/;"	f	signature:( hashtab_T *ht, int htname, char_u *varname, int no_autoload)
find_var_in_scoped_ht	vim/vim/src/userfunc.c	/^find_var_in_scoped_ht(char_u *name, int no_autoload)$/;"	f	signature:(char_u *name, int no_autoload)
find_viminfo_parameter	vim/vim/src/option.c	/^find_viminfo_parameter(int type)$/;"	f	signature:(int type)
find_widgets	vim/vim/src/gui_gtk.c	/^static SharedFindReplace find_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
find_widgets	vim/vim/src/gui_motif.c	/^static SharedFindReplace find_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
find_win_by_nr	vim/vim/src/eval.c	/^find_win_by_nr($/;"	f	signature:( typval_T *vp, tabpage_T *tp UNUSED)
find_win_for_buf	vim/vim/src/buffer.c	/^find_win_for_buf($/;"	f	signature:( buf_T *buf, win_T **wp, tabpage_T **tp)
find_win_with_ll	vim/vim/src/quickfix.c	/^find_win_with_ll(qf_info_T *qi)$/;"	f	file:	signature:(qf_info_T *qi)
find_wininfo	vim/vim/src/buffer.c	/^find_wininfo($/;"	f	file:	signature:( buf_T *buf, int skip_diff_buffer UNUSED)
find_wininfo	vim/vim/src/buffer.c	/^static wininfo_T *find_wininfo(buf_T *buf, int skip_diff_buffer);$/;"	p	file:	signature:(buf_T *buf, int skip_diff_buffer)
find_wl_entry	vim/vim/src/fold.c	/^find_wl_entry(win_T *win, linenr_T lnum)$/;"	f	signature:(win_T *win, linenr_T lnum)
find_word	vim/vim/src/spell.c	/^find_word(matchinf_T *mip, int mode)$/;"	f	file:	signature:(matchinf_T *mip, int mode)
find_word	vim/vim/src/spell.c	/^static void find_word(matchinf_T *mip, int mode);$/;"	p	file:	signature:(matchinf_T *mip, int mode)
find_word_end	vim/vim/src/edit.c	/^find_word_end(char_u *ptr)$/;"	f	signature:(char_u *ptr)
find_word_start	vim/vim/src/edit.c	/^find_word_start(char_u *ptr)$/;"	f	signature:(char_u *ptr)
findenv	vim/vim/src/misc2.c	/^findenv(char *name)$/;"	f	file:	signature:(char *name)
findenv	vim/vim/src/misc2.c	/^static int  findenv(char *name); \/* look for a name in the env. *\/$/;"	p	file:	signature:(char *name)
findfilendir	vim/vim/src/evalfunc.c	/^findfilendir($/;"	f	file:	signature:( typval_T *argvars UNUSED, typval_T *rettv, int find_what UNUSED)
findmatch	vim/vim/src/search.c	/^findmatch(oparg_T *oap, int initc)$/;"	f	signature:(oparg_T *oap, int initc)
findmatchlimit	vim/vim/src/search.c	/^findmatchlimit($/;"	f	signature:( oparg_T *oap, int initc, int flags, int maxtravel)
findoldfile	vim/vim/src/dosinst.c	/^findoldfile(char **destination)$/;"	f	file:	signature:(char **destination)
findoption	vim/vim/src/option.c	/^findoption(char_u *arg)$/;"	f	file:	signature:(char_u *arg)
findoption	vim/vim/src/option.c	/^static int findoption(char_u *);$/;"	p	file:	signature:(char_u *)
findpar	vim/vim/src/search.c	/^findpar($/;"	f	signature:( int *pincl, int dir, long count, int what, int both)
findrep_atow	vim/vim/src/gui_w32.c	/^findrep_atow(LPFINDREPLACEW lpfrw, LPFINDREPLACE lpfr)$/;"	f	file:	signature:(LPFINDREPLACEW lpfrw, LPFINDREPLACE lpfr)
findrep_wtoa	vim/vim/src/gui_w32.c	/^findrep_wtoa(LPFINDREPLACE lpfr, LPFINDREPLACEW lpfrw)$/;"	f	file:	signature:(LPFINDREPLACE lpfr, LPFINDREPLACEW lpfrw)
findsent	vim/vim/src/search.c	/^findsent(int dir, long count)$/;"	f	signature:(int dir, long count)
findsent_forward	vim/vim/src/search.c	/^findsent_forward($/;"	f	file:	signature:( long count, int at_start_sent)
findsent_forward	vim/vim/src/search.c	/^static void findsent_forward(long count, int at_start_sent);$/;"	p	file:	signature:(long count, int at_start_sent)
findswapname	vim/vim/src/memline.c	/^findswapname($/;"	f	file:	signature:( buf_T *buf, char_u **dirp, char_u *old_fname)
findswapname	vim/vim/src/memline.c	/^static char_u *findswapname(buf_T *, char_u **, char_u *);$/;"	p	file:	signature:(buf_T *, char_u **, char_u *)
finish_exception	vim/vim/src/ex_eval.c	/^finish_exception(except_T *excp)$/;"	f	file:	signature:(except_T *excp)
finish_exception	vim/vim/src/ex_eval.c	/^static void	finish_exception(except_T *excp);$/;"	p	file:	signature:(except_T *excp)
finish_op	vim/vim/src/globals.h	/^EXTERN int	finish_op INIT(= FALSE);\/* TRUE while an operator is pending *\/$/;"	v
finish_viminfo_history	vim/vim/src/ex_getln.c	/^finish_viminfo_history(vir_T *virp)$/;"	f	signature:(vir_T *virp)
finish_viminfo_marks	vim/vim/src/mark.c	/^finish_viminfo_marks(void)$/;"	f	signature:(void)
finish_viminfo_registers	vim/vim/src/ops.c	/^finish_viminfo_registers(void)$/;"	f	signature:(void)
finish_write_reg	vim/vim/src/ops.c	/^finish_write_reg($/;"	f	file:	signature:( int name, yankreg_T *old_y_previous, yankreg_T *old_y_current)
finished	vim/vim/src/ex_cmds2.c	/^    int		finished;	\/* ":finish" used *\/$/;"	m	struct:source_cookie	file:	access:public
fireChanges	vim/vim/src/netbeans.c	/^    unsigned int	 fireChanges:1;$/;"	m	struct:nbbuf_struct	file:	access:public
first	vim/vim/src/libvterm/src/unicode.c	/^  int first;$/;"	m	struct:interval	file:	access:public
first	vim/vim/src/mbyte.c	/^    long first;$/;"	m	struct:interval	file:	access:public
first_abbr	vim/vim/src/getchar.c	/^static mapblock_T	*first_abbr = NULL; \/* first entry in abbrlist *\/$/;"	v	file:
first_autopat	vim/vim/src/fileio.c	/^static AutoPat *first_autopat[NUM_EVENTS] =$/;"	v	file:
first_channel	vim/vim/src/channel.c	/^static channel_T *first_channel = NULL;$/;"	v	file:
first_dict	vim/vim/src/dict.c	/^static dict_T		*first_dict = NULL;	\/* list of all dicts *\/$/;"	v	file:
first_job	vim/vim/src/channel.c	/^static job_T *first_job = NULL;$/;"	v	file:
first_lang	vim/vim/src/spell.h	/^SPELL_EXTERN slang_T	*first_lang SPELL_INIT(= NULL);$/;"	v
first_list	vim/vim/src/list.c	/^static list_T		*first_list = NULL;	\/* list of all lists *\/$/;"	v	file:
first_lnum	vim/vim/src/structs.h	/^    linenr_T	first_lnum;	\/* first lnum to search for multi-line pat *\/$/;"	m	struct:__anon201	access:public
first_msg_hist	vim/vim/src/message.c	/^static struct msg_hist *first_msg_hist = NULL;$/;"	v	typeref:struct:msg_hist	file:
first_sign	vim/vim/src/ex_cmds.c	/^static sign_T	*first_sign = NULL;$/;"	v	file:
first_submatch	vim/vim/src/search.c	/^first_submatch(regmmatch_T *rp)$/;"	f	file:	signature:(regmmatch_T *rp)
first_submatch	vim/vim/src/search.c	/^static int first_submatch(regmmatch_T *rp);$/;"	p	file:	signature:(regmmatch_T *rp)
first_tabpage	vim/vim/src/globals.h	/^EXTERN tabpage_T    *first_tabpage;$/;"	v
first_term	vim/vim/src/terminal.c	/^static term_T *first_term = NULL;$/;"	v	file:
first_timer	vim/vim/src/ex_cmds2.c	/^static timer_T	*first_timer = NULL;$/;"	v	file:
firstbuf	vim/vim/src/globals.h	/^EXTERN buf_T	*firstbuf INIT(= NULL);	\/* first buffer *\/$/;"	v
firstchar	vim/vim/src/os_vms.c	/^    unsigned char  firstchar;$/;"	m	struct:typeahead_st	file:	access:public
firstwin	vim/vim/src/globals.h	/^EXTERN win_T	*firstwin;		\/* first window *\/$/;"	v
firstwin	vim/vim/src/globals.h	567;"	d
fixAccelText	vim/vim/src/workshop.c	/^fixAccelText($/;"	f	file:	signature:( char *ap)
fixAccelText	vim/vim/src/workshop.c	/^static char	*fixAccelText(char *);$/;"	p	file:	signature:(char *)
fix_arg_enc	vim/vim/src/os_win32.c	/^fix_arg_enc(void)$/;"	f	signature:(void)
fix_fname	vim/vim/src/buffer.c	/^fix_fname(char_u  *fname)$/;"	f	signature:(char_u *fname)
fix_help_buffer	vim/vim/src/ex_cmds.c	/^fix_help_buffer(void)$/;"	f	signature:(void)
fix_indent	vim/vim/src/edit.c	/^fix_indent(void)$/;"	f	signature:(void)
fix_input_buffer	vim/vim/src/getchar.c	/^fix_input_buffer(char_u *buf, int len)$/;"	f	signature:(char_u *buf, int len)
fixthisline	vim/vim/src/edit.c	/^fixthisline(int (*get_the_indent)(void))$/;"	f	signature:(int (*get_the_indent)(void))
fixup	vim/vim/src/workshop.c	/^fixup($/;"	f	file:	signature:( char *label)
fixup	vim/vim/src/workshop.c	/^static char	*fixup(char *);$/;"	p	file:	signature:(char *)
fixvar	vim/vim/src/structs.h	/^    } fixvar[FIXVAR_CNT];$/;"	m	struct:funccall_S	typeref:struct:funccall_S::__anon188	access:public
fkmap	vim/vim/src/farsi.c	/^fkmap(int c)$/;"	f	signature:(int c)
flag	vim/vim/src/syntax.c	/^    int		flag;$/;"	m	struct:name_list	file:	access:public
flag_in_afflist	vim/vim/src/spellfile.c	/^flag_in_afflist(int flagtype, char_u *afflist, unsigned flag)$/;"	f	file:	signature:(int flagtype, char_u *afflist, unsigned flag)
flag_in_afflist	vim/vim/src/spellfile.c	/^static int flag_in_afflist(int flagtype, char_u *afflist, unsigned flag);$/;"	p	file:	signature:(int flagtype, char_u *afflist, unsigned flag)
flags	vim/vim/src/ex_cmds.h	/^    int		flags;		\/* extra flags after count: EXFLAG_ *\/$/;"	m	struct:exarg	access:public
flags	vim/vim/src/gui_gtk_x11.c	/^    unsigned int    flags;$/;"	m	struct:__anon157	file:	access:public
flags	vim/vim/src/if_cscope.h	/^    char *	    flags;	\/* additional cscope flags\/options (e.g, -p2) *\/$/;"	m	struct:csi	access:public
flags	vim/vim/src/option.c	/^    long_u	flags;		\/* see below *\/$/;"	m	struct:vimoption	file:	access:public
flags	vim/vim/src/quickfix.c	/^    char_u	    flags;	\/* additional flags given in prefix *\/$/;"	m	struct:efm_S	file:	access:public
flags	vim/vim/src/structs.h	/^    int		flags;$/;"	m	struct:keyentry	access:public
flags	vim/vim/src/syntax.c	/^    int		flags;		\/* flags for contained and transparent *\/$/;"	m	struct:__anon137	file:	access:public
fline_T	vim/vim/src/fold.c	/^} fline_T;$/;"	t	typeref:struct:__anon95	file:
floatZero	vim/vim/src/gui_at_sb.c	/^static float floatZero = 0.0;$/;"	v	file:
float_T	vim/vim/src/structs.h	/^typedef double	float_T;$/;"	t
flush_buffers	vim/vim/src/getchar.c	/^flush_buffers(int flush_typeahead)$/;"	f	signature:(int flush_typeahead)
fm_getname	vim/vim/src/mark.c	/^fm_getname(fmark_T *fmark, int lead_len)$/;"	f	signature:(fmark_T *fmark, int lead_len)
fmark	vim/vim/src/structs.h	/^    fmark_T	fmark;		\/* cursor position BEFORE ":tag" *\/$/;"	m	struct:taggy	access:public
fmark	vim/vim/src/structs.h	/^    fmark_T	fmark;$/;"	m	struct:xfilemark	access:public
fmark_T	vim/vim/src/structs.h	/^} fmark_T;$/;"	t	typeref:struct:filemark
fmarks_check_names	vim/vim/src/mark.c	/^fmarks_check_names(buf_T *buf)$/;"	f	signature:(buf_T *buf)
fmarks_check_one	vim/vim/src/mark.c	/^fmarks_check_one(xfmark_T *fm, char_u *name, buf_T *buf)$/;"	f	file:	signature:(xfmark_T *fm, char_u *name, buf_T *buf)
fmarks_check_one	vim/vim/src/mark.c	/^static void fmarks_check_one(xfmark_T *fm, char_u *name, buf_T *buf);$/;"	p	file:	signature:(xfmark_T *fm, char_u *name, buf_T *buf)
fmt_check_par	vim/vim/src/ops.c	/^fmt_check_par($/;"	f	file:	signature:( linenr_T lnum, int *leader_len, char_u **leader_flags, int do_comments)
fmt_check_par	vim/vim/src/ops.c	/^fmt_check_par(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
fmt_check_par	vim/vim/src/ops.c	/^static int	fmt_check_par(linenr_T);$/;"	p	file:
fmt_check_par	vim/vim/src/ops.c	/^static int	fmt_check_par(linenr_T, int *, char_u **, int do_comments);$/;"	p	file:	signature:(linenr_T, int *, char_u **, int do_comments)
fmt_pat	vim/vim/src/quickfix.c	/^} fmt_pat[FMT_PATTERNS] =$/;"	v	typeref:struct:fmtpattern	file:
fmt_start	vim/vim/src/quickfix.c	/^static efm_T	*fmt_start = NULL; \/* cached across qf_parse_line() calls *\/$/;"	v	file:
fmte	vim/vim/src/GvimExt/gvimext.cpp	/^FORMATETC fmte = {CF_HDROP,$/;"	v
fmtpattern	vim/vim/src/quickfix.c	/^static struct fmtpattern$/;"	s	file:
fmtpattern::convchar	vim/vim/src/quickfix.c	/^    char_u	convchar;$/;"	m	struct:fmtpattern	file:	access:public
fmtpattern::pattern	vim/vim/src/quickfix.c	/^    char	*pattern;$/;"	m	struct:fmtpattern	file:	access:public
fn	vim/vim/src/gui_xmdlg.c	/^fn(SharedFontSelData *data, int i)$/;"	f	file:	signature:(SharedFontSelData *data, int i)
fname	vim/vim/src/ex_cmds2.c	/^    char_u	*fname;		\/* name of sourced file *\/$/;"	m	struct:source_cookie	file:	access:public
fname	vim/vim/src/fileio.c	/^    char_u	*fname;		\/* fname to match with *\/$/;"	m	struct:AutoPatCmd	file:	access:public
fname	vim/vim/src/if_cscope.h	/^    char *	    fname;	\/* cscope db name *\/$/;"	m	struct:csi	access:public
fname	vim/vim/src/structs.h	/^    char_u	*fname;			\/* first file to edit *\/$/;"	m	struct:__anon210	access:public
fname	vim/vim/src/structs.h	/^    char_u	*fname;		\/* file name, used when fnum == 0 *\/$/;"	m	struct:xfilemark	access:public
fname	vim/vim/src/tag.c	/^    char_u	*fname;		\/* first char of file name *\/$/;"	m	struct:tag_pointers	file:	access:public
fname2fnum	vim/vim/src/mark.c	/^fname2fnum(xfmark_T *fm)$/;"	f	file:	signature:(xfmark_T *fm)
fname2fnum	vim/vim/src/mark.c	/^static void fname2fnum(xfmark_T *fm);$/;"	p	file:	signature:(xfmark_T *fm)
fname_case	vim/vim/src/os_amiga.c	/^fname_case($/;"	f	signature:( char_u *name, int len)
fname_case	vim/vim/src/os_unix.c	/^fname_case($/;"	f	signature:( char_u *name, int len UNUSED)
fname_case	vim/vim/src/os_win32.c	/^fname_case($/;"	f	signature:( char_u *name, int len)
fname_casew	vim/vim/src/os_win32.c	/^fname_casew($/;"	f	file:	signature:( WCHAR *name, int len)
fname_end	vim/vim/src/tag.c	/^    char_u	*fname_end;	\/* char after file name *\/$/;"	m	struct:tag_pointers	file:	access:public
fname_expand	vim/vim/src/buffer.c	/^fname_expand($/;"	f	signature:( buf_T *buf UNUSED, char_u **ffname, char_u **sfname)
fname_match	vim/vim/src/buffer.c	/^fname_match($/;"	f	file:	signature:( regmatch_T *rmp, char_u *name, int ignore_case)
fname_match	vim/vim/src/buffer.c	/^static char_u	*fname_match(regmatch_T *rmp, char_u *name, int ignore_case);$/;"	p	file:	signature:(regmatch_T *rmp, char_u *name, int ignore_case)
fname_trans_sid	vim/vim/src/userfunc.c	/^fname_trans_sid(char_u *name, char_u *fname_buf, char_u **tofree, int *error)$/;"	f	file:	signature:(char_u *name, char_u *fname_buf, char_u **tofree, int *error)
fnamecmp	vim/vim/src/vim.h	1743;"	d
fnamecmp_ino	vim/vim/src/memline.c	/^fnamecmp_ino($/;"	f	file:	signature:( char_u *fname_c, char_u *fname_s, long ino_block0)
fnamecmp_ino	vim/vim/src/memline.c	/^static int fnamecmp_ino(char_u *, char_u *, long);$/;"	p	file:	signature:(char_u *, char_u *, long)
fnamencmp	vim/vim/src/vim.h	1744;"	d
fnum	vim/vim/src/structs.h	/^    int		fnum;		\/* file number *\/$/;"	m	struct:filemark	access:public
focus_in_event	vim/vim/src/gui_gtk_x11.c	/^focus_in_event(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventFocus *event UNUSED, gpointer data UNUSED)
focus_out_event	vim/vim/src/gui_gtk_x11.c	/^focus_out_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventFocus *event UNUSED, gpointer data UNUSED)
foldAddMarker	vim/vim/src/fold.c	/^foldAddMarker(linenr_T lnum, char_u *marker, int markerlen)$/;"	f	file:	signature:(linenr_T lnum, char_u *marker, int markerlen)
foldAddMarker	vim/vim/src/fold.c	/^static void foldAddMarker(linenr_T lnum, char_u *marker, int markerlen);$/;"	p	file:	signature:(linenr_T lnum, char_u *marker, int markerlen)
foldAdjustCursor	vim/vim/src/fold.c	/^foldAdjustCursor(void)$/;"	f	signature:(void)
foldAdjustVisual	vim/vim/src/fold.c	/^foldAdjustVisual(void)$/;"	f	signature:(void)
foldCase	vim/vim/src/mbyte.c	/^static convertStruct foldCase[] =$/;"	v	file:
foldCheckClose	vim/vim/src/fold.c	/^foldCheckClose(void)$/;"	f	signature:(void)
foldCreate	vim/vim/src/fold.c	/^foldCreate(linenr_T start, linenr_T end)$/;"	f	signature:(linenr_T start, linenr_T end)
foldCreateMarkers	vim/vim/src/fold.c	/^foldCreateMarkers(linenr_T start, linenr_T end)$/;"	f	file:	signature:(linenr_T start, linenr_T end)
foldCreateMarkers	vim/vim/src/fold.c	/^static void foldCreateMarkers(linenr_T start, linenr_T end);$/;"	p	file:	signature:(linenr_T start, linenr_T end)
foldDelMarker	vim/vim/src/fold.c	/^foldDelMarker(linenr_T lnum, char_u *marker, int markerlen)$/;"	f	file:	signature:(linenr_T lnum, char_u *marker, int markerlen)
foldDelMarker	vim/vim/src/fold.c	/^static void foldDelMarker(linenr_T lnum, char_u *marker, int markerlen);$/;"	p	file:	signature:(linenr_T lnum, char_u *marker, int markerlen)
foldFind	vim/vim/src/fold.c	/^foldFind(garray_T *gap, linenr_T lnum, fold_T **fpp)$/;"	f	file:	signature:(garray_T *gap, linenr_T lnum, fold_T **fpp)
foldFind	vim/vim/src/fold.c	/^static int foldFind(garray_T *gap, linenr_T lnum, fold_T **fpp);$/;"	p	file:	signature:(garray_T *gap, linenr_T lnum, fold_T **fpp)
foldInitWin	vim/vim/src/fold.c	/^foldInitWin(win_T *new_win)$/;"	f	signature:(win_T *new_win)
foldInsert	vim/vim/src/fold.c	/^foldInsert(garray_T *gap, int i)$/;"	f	file:	signature:(garray_T *gap, int i)
foldInsert	vim/vim/src/fold.c	/^static int foldInsert(garray_T *gap, int i);$/;"	p	file:	signature:(garray_T *gap, int i)
foldLevel	vim/vim/src/fold.c	/^foldLevel(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
foldLevelWin	vim/vim/src/fold.c	/^foldLevelWin(win_T *wp, linenr_T lnum)$/;"	f	file:	signature:(win_T *wp, linenr_T lnum)
foldLevelWin	vim/vim/src/fold.c	/^static int foldLevelWin(win_T *wp, linenr_T lnum);$/;"	p	file:	signature:(win_T *wp, linenr_T lnum)
foldManualAllowed	vim/vim/src/fold.c	/^foldManualAllowed(int create)$/;"	f	signature:(int create)
foldMarkAdjust	vim/vim/src/fold.c	/^foldMarkAdjust($/;"	f	signature:( win_T *wp, linenr_T line1, linenr_T line2, long amount, long amount_after)
foldMarkAdjustRecurse	vim/vim/src/fold.c	/^foldMarkAdjustRecurse($/;"	f	file:	signature:( garray_T *gap, linenr_T line1, linenr_T line2, long amount, long amount_after)
foldMarkAdjustRecurse	vim/vim/src/fold.c	/^static void foldMarkAdjustRecurse(garray_T *gap, linenr_T line1, linenr_T line2, long amount, long amount_after);$/;"	p	file:	signature:(garray_T *gap, linenr_T line1, linenr_T line2, long amount, long amount_after)
foldMerge	vim/vim/src/fold.c	/^foldMerge(fold_T *fp1, garray_T *gap, fold_T *fp2)$/;"	f	file:	signature:(fold_T *fp1, garray_T *gap, fold_T *fp2)
foldMerge	vim/vim/src/fold.c	/^static void foldMerge(fold_T *fp1, garray_T *gap, fold_T *fp2);$/;"	p	file:	signature:(fold_T *fp1, garray_T *gap, fold_T *fp2)
foldMoveRange	vim/vim/src/fold.c	/^foldMoveRange(garray_T *gap, linenr_T line1, linenr_T line2, linenr_T dest)$/;"	f	signature:(garray_T *gap, linenr_T line1, linenr_T line2, linenr_T dest)
foldMoveTo	vim/vim/src/fold.c	/^foldMoveTo($/;"	f	signature:( int updown, int dir, long count)
foldOpenCursor	vim/vim/src/fold.c	/^foldOpenCursor(void)$/;"	f	signature:(void)
foldOpenNested	vim/vim/src/fold.c	/^foldOpenNested(fold_T *fpr)$/;"	f	file:	signature:(fold_T *fpr)
foldOpenNested	vim/vim/src/fold.c	/^static void foldOpenNested(fold_T *fpr);$/;"	p	file:	signature:(fold_T *fpr)
foldRemove	vim/vim/src/fold.c	/^foldRemove(garray_T *gap, linenr_T top, linenr_T bot)$/;"	f	file:	signature:(garray_T *gap, linenr_T top, linenr_T bot)
foldRemove	vim/vim/src/fold.c	/^static void foldRemove(garray_T *gap, linenr_T top, linenr_T bot);$/;"	p	file:	signature:(garray_T *gap, linenr_T top, linenr_T bot)
foldReverseOrder	vim/vim/src/fold.c	/^foldReverseOrder(garray_T *gap, linenr_T start_arg, linenr_T end_arg)$/;"	f	file:	signature:(garray_T *gap, linenr_T start_arg, linenr_T end_arg)
foldSplit	vim/vim/src/fold.c	/^foldSplit($/;"	f	file:	signature:( garray_T *gap, int i, linenr_T top, linenr_T bot)
foldSplit	vim/vim/src/fold.c	/^static void foldSplit(garray_T *gap, int i, linenr_T top, linenr_T bot);$/;"	p	file:	signature:(garray_T *gap, int i, linenr_T top, linenr_T bot)
foldUpdate	vim/vim/src/fold.c	/^foldUpdate(win_T *wp, linenr_T top, linenr_T bot)$/;"	f	signature:(win_T *wp, linenr_T top, linenr_T bot)
foldUpdateAll	vim/vim/src/fold.c	/^foldUpdateAll(win_T *win)$/;"	f	signature:(win_T *win)
foldUpdateIEMS	vim/vim/src/fold.c	/^foldUpdateIEMS(win_T *wp, linenr_T top, linenr_T bot)$/;"	f	file:	signature:(win_T *wp, linenr_T top, linenr_T bot)
foldUpdateIEMS	vim/vim/src/fold.c	/^static void foldUpdateIEMS(win_T *wp, linenr_T top, linenr_T bot);$/;"	p	file:	signature:(win_T *wp, linenr_T top, linenr_T bot)
foldUpdateIEMSRecurse	vim/vim/src/fold.c	/^foldUpdateIEMSRecurse($/;"	f	file:	signature:( garray_T *gap, int level, linenr_T startlnum, fline_T *flp, void (*getlevel)(fline_T *), linenr_T bot, int topflags)
foldUpdateIEMSRecurse	vim/vim/src/fold.c	/^static linenr_T foldUpdateIEMSRecurse(garray_T *gap, int level, linenr_T startlnum, fline_T *flp, void (*getlevel)(fline_T *), linenr_T bot, int topflags);$/;"	p	file:	signature:(garray_T *gap, int level, linenr_T startlnum, fline_T *flp, void (*getlevel)(fline_T *), linenr_T bot, int topflags)
fold_T	vim/vim/src/fold.c	/^} fold_T;$/;"	t	typeref:struct:__anon94	file:
fold_changed	vim/vim/src/fold.c	/^static int fold_changed;$/;"	v	file:
fold_end	vim/vim/src/fold.c	3031;"	d	file:
fold_end	vim/vim/src/fold.c	3152;"	d	file:
fold_index	vim/vim/src/fold.c	3033;"	d	file:
fold_index	vim/vim/src/fold.c	3154;"	d	file:
fold_line	vim/vim/src/screen.c	/^fold_line($/;"	f	file:	signature:( win_T *wp, long fold_count, foldinfo_T *foldinfo, linenr_T lnum, int row)
fold_line	vim/vim/src/screen.c	/^static void fold_line(win_T *wp, long fold_count, foldinfo_T *foldinfo, linenr_T lnum, int row);$/;"	p	file:	signature:(win_T *wp, long fold_count, foldinfo_T *foldinfo, linenr_T lnum, int row)
fold_more	vim/vim/src/spell.c	/^fold_more(matchinf_T *mip)$/;"	f	file:	signature:(matchinf_T *mip)
fold_more	vim/vim/src/spell.c	/^static int fold_more(matchinf_T *mip);$/;"	p	file:	signature:(matchinf_T *mip)
foldclosed_both	vim/vim/src/evalfunc.c	/^foldclosed_both($/;"	f	file:	signature:( typval_T *argvars UNUSED, typval_T *rettv, int end UNUSED)
foldclosed_both	vim/vim/src/evalfunc.c	/^static void foldclosed_both(typval_T *argvars, typval_T *rettv, int end);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv, int end)
foldedCount	vim/vim/src/fold.c	/^foldedCount(win_T *win, linenr_T lnum, foldinfo_T *infop)$/;"	f	signature:(win_T *win, linenr_T lnum, foldinfo_T *infop)
foldendmarker	vim/vim/src/fold.c	/^static char_u *foldendmarker;$/;"	v	file:
foldendmarkerlen	vim/vim/src/fold.c	/^static int foldendmarkerlen;$/;"	v	file:
foldinfo	vim/vim/src/structs.h	/^typedef struct foldinfo$/;"	s
foldinfo::fi_level	vim/vim/src/structs.h	/^    int		fi_level;	\/* level of the fold; when this is zero the$/;"	m	struct:foldinfo	access:public
foldinfo::fi_lnum	vim/vim/src/structs.h	/^    int		fi_lnum;	\/* line number where fold starts *\/$/;"	m	struct:foldinfo	access:public
foldinfo::fi_low_level	vim/vim/src/structs.h	/^    int		fi_low_level;	\/* lowest fold level that starts in the same$/;"	m	struct:foldinfo	access:public
foldinfo_T	vim/vim/src/structs.h	/^} foldinfo_T;$/;"	t	typeref:struct:foldinfo
foldlevelDiff	vim/vim/src/fold.c	/^foldlevelDiff(fline_T *flp)$/;"	f	file:	signature:(fline_T *flp)
foldlevelDiff	vim/vim/src/fold.c	/^static void foldlevelDiff(fline_T *flp);$/;"	p	file:	signature:(fline_T *flp)
foldlevelExpr	vim/vim/src/fold.c	/^foldlevelExpr(fline_T *flp)$/;"	f	file:	signature:(fline_T *flp)
foldlevelExpr	vim/vim/src/fold.c	/^static void foldlevelExpr(fline_T *flp);$/;"	p	file:	signature:(fline_T *flp)
foldlevelIndent	vim/vim/src/fold.c	/^foldlevelIndent(fline_T *flp)$/;"	f	file:	signature:(fline_T *flp)
foldlevelIndent	vim/vim/src/fold.c	/^static void foldlevelIndent(fline_T *flp);$/;"	p	file:	signature:(fline_T *flp)
foldlevelMarker	vim/vim/src/fold.c	/^foldlevelMarker(fline_T *flp)$/;"	f	file:	signature:(fline_T *flp)
foldlevelMarker	vim/vim/src/fold.c	/^static void foldlevelMarker(fline_T *flp);$/;"	p	file:	signature:(fline_T *flp)
foldlevelSyntax	vim/vim/src/fold.c	/^foldlevelSyntax(fline_T *flp)$/;"	f	file:	signature:(fline_T *flp)
foldlevelSyntax	vim/vim/src/fold.c	/^static void foldlevelSyntax(fline_T *flp);$/;"	p	file:	signature:(fline_T *flp)
foldmethodIsDiff	vim/vim/src/fold.c	/^foldmethodIsDiff(win_T *wp)$/;"	f	signature:(win_T *wp)
foldmethodIsExpr	vim/vim/src/fold.c	/^foldmethodIsExpr(win_T *wp)$/;"	f	signature:(win_T *wp)
foldmethodIsIndent	vim/vim/src/fold.c	/^foldmethodIsIndent(win_T *wp)$/;"	f	signature:(win_T *wp)
foldmethodIsManual	vim/vim/src/fold.c	/^foldmethodIsManual(win_T *wp)$/;"	f	signature:(win_T *wp)
foldmethodIsMarker	vim/vim/src/fold.c	/^foldmethodIsMarker(win_T *wp)$/;"	f	signature:(win_T *wp)
foldmethodIsSyntax	vim/vim/src/fold.c	/^foldmethodIsSyntax(win_T *wp)$/;"	f	signature:(win_T *wp)
foldstartmarkerlen	vim/vim/src/fold.c	/^static int foldstartmarkerlen;$/;"	v	file:
foldtext_cleanup	vim/vim/src/fold.c	/^foldtext_cleanup(char_u *str)$/;"	f	signature:(char_u *str)
font	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int font      : 4; \/* 0 to 9 *\/$/;"	m	struct:__anon61	access:public
font	vim/vim/src/libvterm/src/screen.c	/^  unsigned int font      : 4; \/* 0 to 9 *\/$/;"	m	struct:__anon29	file:	access:public
font	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int font:4; \/* To store 0-9 *\/$/;"	m	struct:VTermPen	access:public
font	vim/vim/src/libvterm/t/harness.c	/^  int font;$/;"	m	struct:__anon42	file:	access:public
font	vim/vim/src/structs.h	/^	    GuiFont	    font;	\/* font handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
font_argument	vim/vim/src/globals.h	/^EXTERN char	*font_argument INIT(= NULL);$/;"	v
font_can_bold	vim/vim/src/gui.h	/^    int		font_can_bold;	    \/* Whether norm_font supports bold weight.$/;"	m	struct:Gui	access:public
font_enumproc	vim/vim/src/os_mswin.c	/^font_enumproc($/;"	f	file:	signature:( ENUMLOGFONT *elf, NEWTEXTMETRIC *ntm UNUSED, int type UNUSED, LPARAM lparam)
font_filter	vim/vim/src/gui_gtk_x11.c	/^font_filter(const PangoFontFamily *family,$/;"	f	file:	signature:(const PangoFontFamily *family, const PangoFontFace *face UNUSED, gpointer data UNUSED)
font_name	vim/vim/src/gui_xmdlg.c	/^    char	*font_name;	\/* current font name *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
font_name2handle	vim/vim/src/syntax.c	/^font_name2handle(char_u *name)$/;"	f	file:	signature:(char_u *name)
font_name2handle	vim/vim/src/syntax.c	/^static GuiFont font_name2handle(char_u *name);$/;"	p	file:	signature:(char_u *name)
fontname	vim/vim/src/gui_at_fs.c	/^    char *fontname;$/;"	m	struct:__anon238	file:	access:public
fontset	vim/vim/src/gui.h	/^    GuiFontset	fontset;	    \/* set of fonts for multi-byte chars *\/$/;"	m	struct:Gui	access:public
fontset	vim/vim/src/structs.h	/^	    GuiFontset	    fontset;	\/* fontset handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
fontset_ascent	vim/vim/src/gui_x11.c	/^fontset_ascent(XFontSet fs)$/;"	f	file:	signature:(XFontSet fs)
fontset_ascent	vim/vim/src/gui_x11.c	/^static int fontset_ascent(XFontSet fs);$/;"	p	file:	signature:(XFontSet fs)
fontset_height	vim/vim/src/gui_x11.c	/^fontset_height($/;"	f	signature:( XFontSet fs)
fontset_height2	vim/vim/src/gui_x11.c	/^fontset_height2(XFontSet fs)$/;"	f	signature:(XFontSet fs)
fontset_name2handle	vim/vim/src/syntax.c	/^fontset_name2handle(char_u *name, int fixed_width)$/;"	f	file:	signature:(char_u *name, int fixed_width)
fontset_name2handle	vim/vim/src/syntax.c	/^static GuiFontset fontset_name2handle(char_u *name, int fixed_width);$/;"	p	file:	signature:(char_u *name, int fixed_width)
fontset_width	vim/vim/src/gui_x11.c	/^fontset_width(XFontSet fs)$/;"	f	file:	signature:(XFontSet fs)
fontset_width	vim/vim/src/gui_x11.c	/^static int fontset_width(XFontSet fs);$/;"	p	file:	signature:(XFontSet fs)
footer	vim/vim/src/gui_motif.c	/^static Widget footer;$/;"	v	file:
footer_height	vim/vim/src/gui.h	/^    int		footer_height;	    \/* height of the message footer *\/$/;"	m	struct:Gui	access:public
fopen_noinh_readbin	vim/vim/src/ex_cmds2.c	/^fopen_noinh_readbin(char *filename)$/;"	f	file:	signature:(char *filename)
fopen_noinh_readbin	vim/vim/src/ex_cmds2.c	/^static FILE *fopen_noinh_readbin(char *filename);$/;"	p	file:	signature:(char *filename)
force_abort	vim/vim/src/ex_docmd.c	/^    int		force_abort;$/;"	m	struct:dbg_stuff	file:	access:public
force_abort	vim/vim/src/globals.h	/^EXTERN int force_abort INIT(= FALSE);$/;"	v
force_bin	vim/vim/src/ex_cmds.h	/^    int		force_bin;	\/* 0, FORCE_BIN or FORCE_NOBIN *\/$/;"	m	struct:exarg	access:public
force_enc	vim/vim/src/ex_cmds.h	/^    int		force_enc;	\/* ++enc= argument (index in cmd[]) *\/$/;"	m	struct:exarg	access:public
force_ff	vim/vim/src/ex_cmds.h	/^    int		force_ff;	\/* ++ff= argument (index in cmd[]) *\/$/;"	m	struct:exarg	access:public
force_menu_update	vim/vim/src/globals.h	/^EXTERN int force_menu_update INIT(= FALSE);$/;"	v
forceit	vim/vim/src/ex_cmds.h	/^    int		forceit;	\/* TRUE if ! present *\/$/;"	m	struct:exarg	access:public
foreground	vim/vim/src/gui_at_sb.h	/^    Pixel	  foreground;	\/* thumb foreground color *\/$/;"	m	struct:__anon84	access:public
foreground	vim/vim/src/libvterm/t/harness.c	/^  VTermColor foreground;$/;"	m	struct:__anon42	file:	access:public
foreground_argument	vim/vim/src/globals.h	/^EXTERN char	*foreground_argument INIT(= NULL);$/;"	v
forinfo_T	vim/vim/src/eval.c	/^} forinfo_T;$/;"	t	typeref:struct:__anon76	file:
form_configure_event	vim/vim/src/gui_gtk_x11.c	/^form_configure_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventConfigure *event, gpointer data UNUSED)
format	vim/vim/src/libvterm/bin/unterm.c	/^} format = FORMAT_PLAIN;$/;"	v	typeref:enum:__anon43	file:
format	vim/vim/src/vim.h	/^    int_u	format;		\/* Vim's own special clipboard format *\/$/;"	m	struct:VimClipboard	access:public
format_lines	vim/vim/src/ops.c	/^format_lines($/;"	f	signature:( linenr_T line_count, int avoid_fex)
format_raw	vim/vim/src/vim.h	/^    int_u	format_raw;	\/* Vim's raw text clipboard format *\/$/;"	m	struct:VimClipboard	access:public
formwin	vim/vim/src/gui.h	/^    GtkWidget	*formwin;	    \/* manages all the windows below *\/$/;"	m	struct:Gui	access:public
forward_slash	vim/vim/src/fileio.c	/^forward_slash(char_u *fname)$/;"	f	signature:(char_u *fname)
found	vim/vim/src/misc1.c	/^    int	    found;$/;"	m	struct:__anon148	file:	access:public
found_iconic_arg	vim/vim/src/gui_gtk_x11.c	/^static int found_iconic_arg = FALSE;$/;"	v	file:
found_reverse_arg	vim/vim/src/globals.h	/^EXTERN int	found_reverse_arg INIT(= FALSE);$/;"	v
found_tagfile_cb	vim/vim/src/tag.c	/^found_tagfile_cb(char_u *fname, void *cookie UNUSED)$/;"	f	file:	signature:(char_u *fname, void *cookie UNUSED)
found_tagfile_cb	vim/vim/src/tag.c	/^static void found_tagfile_cb(char_u *fname, void *cookie);$/;"	p	file:	signature:(char_u *fname, void *cookie)
fp	vim/vim/src/ex_cmds2.c	/^    FILE	*fp;		\/* opened file for sourcing *\/$/;"	m	struct:source_cookie	file:	access:public
fp	vim/vim/src/search.c	/^    FILE	*fp;		\/* File pointer *\/$/;"	m	struct:SearchedFile	file:	access:public
fprintf	vim/vim/src/xxd/xxd.c	/^extern int fprintf __P((FILE *, char *, ...));$/;"	p	file:	signature:(FILE *, char *, ...)
fptr_T	vim/vim/src/regexp.c	/^typedef void (*(*fptr_T)(int *, int))();$/;"	t	file:
fputs	vim/vim/src/xxd/xxd.c	/^extern int fputs   __P((char *, FILE *));$/;"	p	file:	signature:(char *, FILE *)
fr_child	vim/vim/src/structs.h	/^    frame_T	*fr_child;	\/* first contained frame *\/$/;"	m	struct:frame_S	access:public
fr_fp	vim/vim/src/if_cscope.h	/^    FILE *	    fr_fp;	\/* from cscope: FILE. *\/$/;"	m	struct:csi	access:public
fr_height	vim/vim/src/structs.h	/^    int		fr_height;$/;"	m	struct:frame_S	access:public
fr_layout	vim/vim/src/structs.h	/^    char	fr_layout;	\/* FR_LEAF, FR_COL or FR_ROW *\/$/;"	m	struct:frame_S	access:public
fr_newheight	vim/vim/src/structs.h	/^    int		fr_newheight;	\/* new height used in win_equal_rec() *\/$/;"	m	struct:frame_S	access:public
fr_newwidth	vim/vim/src/structs.h	/^    int		fr_newwidth;	\/* new width used in win_equal_rec() *\/$/;"	m	struct:frame_S	access:public
fr_next	vim/vim/src/structs.h	/^    frame_T	*fr_next;	\/* frame right or below in same parent, NULL$/;"	m	struct:frame_S	access:public
fr_parent	vim/vim/src/structs.h	/^    frame_T	*fr_parent;	\/* containing frame or NULL *\/$/;"	m	struct:frame_S	access:public
fr_prev	vim/vim/src/structs.h	/^    frame_T	*fr_prev;	\/* frame left or above in same parent, NULL$/;"	m	struct:frame_S	access:public
fr_width	vim/vim/src/structs.h	/^    int		fr_width;$/;"	m	struct:frame_S	access:public
fr_win	vim/vim/src/structs.h	/^    win_T	*fr_win;	\/* window that fills this frame *\/$/;"	m	struct:frame_S	access:public
frag	vim/vim/src/regexp_nfa.c	/^frag(nfa_state_T *start, Ptrlist *out)$/;"	f	file:	signature:(nfa_state_T *start, Ptrlist *out)
frag	vim/vim/src/regexp_nfa.c	/^static Frag_T frag(nfa_state_T *start, Ptrlist *out);$/;"	p	file:	signature:(nfa_state_T *start, Ptrlist *out)
frame2win	vim/vim/src/window.c	/^frame2win(frame_T *frp)$/;"	f	file:	signature:(frame_T *frp)
frame2win	vim/vim/src/window.c	/^static win_T *frame2win(frame_T *frp);$/;"	p	file:	signature:(frame_T *frp)
frame_S	vim/vim/src/structs.h	/^struct frame_S$/;"	s
frame_S::fr_child	vim/vim/src/structs.h	/^    frame_T	*fr_child;	\/* first contained frame *\/$/;"	m	struct:frame_S	access:public
frame_S::fr_height	vim/vim/src/structs.h	/^    int		fr_height;$/;"	m	struct:frame_S	access:public
frame_S::fr_layout	vim/vim/src/structs.h	/^    char	fr_layout;	\/* FR_LEAF, FR_COL or FR_ROW *\/$/;"	m	struct:frame_S	access:public
frame_S::fr_newheight	vim/vim/src/structs.h	/^    int		fr_newheight;	\/* new height used in win_equal_rec() *\/$/;"	m	struct:frame_S	access:public
frame_S::fr_newwidth	vim/vim/src/structs.h	/^    int		fr_newwidth;	\/* new width used in win_equal_rec() *\/$/;"	m	struct:frame_S	access:public
frame_S::fr_next	vim/vim/src/structs.h	/^    frame_T	*fr_next;	\/* frame right or below in same parent, NULL$/;"	m	struct:frame_S	access:public
frame_S::fr_parent	vim/vim/src/structs.h	/^    frame_T	*fr_parent;	\/* containing frame or NULL *\/$/;"	m	struct:frame_S	access:public
frame_S::fr_prev	vim/vim/src/structs.h	/^    frame_T	*fr_prev;	\/* frame left or above in same parent, NULL$/;"	m	struct:frame_S	access:public
frame_S::fr_width	vim/vim/src/structs.h	/^    int		fr_width;$/;"	m	struct:frame_S	access:public
frame_S::fr_win	vim/vim/src/structs.h	/^    win_T	*fr_win;	\/* window that fills this frame *\/$/;"	m	struct:frame_S	access:public
frame_T	vim/vim/src/structs.h	/^typedef struct frame_S		frame_T;$/;"	t	typeref:struct:frame_S
frame_add_height	vim/vim/src/window.c	/^frame_add_height(frame_T *frp, int n)$/;"	f	file:	signature:(frame_T *frp, int n)
frame_add_height	vim/vim/src/window.c	/^static void frame_add_height(frame_T *frp, int n);$/;"	p	file:	signature:(frame_T *frp, int n)
frame_add_statusline	vim/vim/src/window.c	/^frame_add_statusline(frame_T *frp)$/;"	f	file:	signature:(frame_T *frp)
frame_add_statusline	vim/vim/src/window.c	/^static void frame_add_statusline(frame_T *frp);$/;"	p	file:	signature:(frame_T *frp)
frame_add_vsep	vim/vim/src/window.c	/^frame_add_vsep(frame_T *frp)$/;"	f	file:	signature:(frame_T *frp)
frame_add_vsep	vim/vim/src/window.c	/^static void frame_add_vsep(frame_T *frp);$/;"	p	file:	signature:(frame_T *frp)
frame_append	vim/vim/src/window.c	/^frame_append(frame_T *after, frame_T *frp)$/;"	f	file:	signature:(frame_T *after, frame_T *frp)
frame_append	vim/vim/src/window.c	/^static void frame_append(frame_T *after, frame_T *frp);$/;"	p	file:	signature:(frame_T *after, frame_T *frp)
frame_check_height	vim/vim/src/window.c	/^frame_check_height(frame_T *topfrp, int height)$/;"	f	file:	signature:(frame_T *topfrp, int height)
frame_check_height	vim/vim/src/window.c	/^static int frame_check_height(frame_T *topfrp, int height);$/;"	p	file:	signature:(frame_T *topfrp, int height)
frame_check_width	vim/vim/src/window.c	/^frame_check_width(frame_T *topfrp, int width)$/;"	f	file:	signature:(frame_T *topfrp, int width)
frame_check_width	vim/vim/src/window.c	/^static int frame_check_width(frame_T *topfrp, int width);$/;"	p	file:	signature:(frame_T *topfrp, int width)
frame_comp_pos	vim/vim/src/window.c	/^frame_comp_pos(frame_T *topfrp, int *row, int *col)$/;"	f	file:	signature:(frame_T *topfrp, int *row, int *col)
frame_comp_pos	vim/vim/src/window.c	/^static void frame_comp_pos(frame_T *topfrp, int *row, int *col);$/;"	p	file:	signature:(frame_T *topfrp, int *row, int *col)
frame_fix_height	vim/vim/src/window.c	/^frame_fix_height(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
frame_fix_height	vim/vim/src/window.c	/^static void frame_fix_height(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
frame_fix_width	vim/vim/src/window.c	/^frame_fix_width(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
frame_fix_width	vim/vim/src/window.c	/^static void frame_fix_width(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
frame_fixed_height	vim/vim/src/window.c	/^frame_fixed_height(frame_T *frp)$/;"	f	file:	signature:(frame_T *frp)
frame_fixed_height	vim/vim/src/window.c	/^static int frame_fixed_height(frame_T *frp);$/;"	p	file:	signature:(frame_T *frp)
frame_fixed_width	vim/vim/src/window.c	/^frame_fixed_width(frame_T *frp)$/;"	f	file:	signature:(frame_T *frp)
frame_fixed_width	vim/vim/src/window.c	/^static int frame_fixed_width(frame_T *frp);$/;"	p	file:	signature:(frame_T *frp)
frame_has_win	vim/vim/src/window.c	/^frame_has_win(frame_T *frp, win_T *wp)$/;"	f	file:	signature:(frame_T *frp, win_T *wp)
frame_has_win	vim/vim/src/window.c	/^static int frame_has_win(frame_T *frp, win_T *wp);$/;"	p	file:	signature:(frame_T *frp, win_T *wp)
frame_insert	vim/vim/src/window.c	/^frame_insert(frame_T *before, frame_T *frp)$/;"	f	file:	signature:(frame_T *before, frame_T *frp)
frame_insert	vim/vim/src/window.c	/^static void frame_insert(frame_T *before, frame_T *frp);$/;"	p	file:	signature:(frame_T *before, frame_T *frp)
frame_minheight	vim/vim/src/window.c	/^frame_minheight(frame_T *topfrp, win_T *next_curwin)$/;"	f	file:	signature:(frame_T *topfrp, win_T *next_curwin)
frame_minheight	vim/vim/src/window.c	/^static int frame_minheight(frame_T *topfrp, win_T *next_curwin);$/;"	p	file:	signature:(frame_T *topfrp, win_T *next_curwin)
frame_minwidth	vim/vim/src/window.c	/^frame_minwidth($/;"	f	file:	signature:( frame_T *topfrp, win_T *next_curwin)
frame_minwidth	vim/vim/src/window.c	/^static int frame_minwidth(frame_T *topfrp, win_T *next_curwin);$/;"	p	file:	signature:(frame_T *topfrp, win_T *next_curwin)
frame_new_height	vim/vim/src/window.c	/^frame_new_height($/;"	f	file:	signature:( frame_T *topfrp, int height, int topfirst, int wfh)
frame_new_height	vim/vim/src/window.c	/^static void frame_new_height(frame_T *topfrp, int height, int topfirst, int wfh);$/;"	p	file:	signature:(frame_T *topfrp, int height, int topfirst, int wfh)
frame_new_width	vim/vim/src/window.c	/^frame_new_width($/;"	f	file:	signature:( frame_T *topfrp, int width, int leftfirst, int wfw)
frame_new_width	vim/vim/src/window.c	/^static void frame_new_width(frame_T *topfrp, int width, int leftfirst, int wfw);$/;"	p	file:	signature:(frame_T *topfrp, int width, int leftfirst, int wfw)
frame_remove	vim/vim/src/window.c	/^frame_remove(frame_T *frp)$/;"	f	file:	signature:(frame_T *frp)
frame_remove	vim/vim/src/window.c	/^static void frame_remove(frame_T *frp);$/;"	p	file:	signature:(frame_T *frp)
frame_setheight	vim/vim/src/window.c	/^frame_setheight(frame_T *curfrp, int height)$/;"	f	file:	signature:(frame_T *curfrp, int height)
frame_setheight	vim/vim/src/window.c	/^static void frame_setheight(frame_T *curfrp, int height);$/;"	p	file:	signature:(frame_T *curfrp, int height)
frame_setwidth	vim/vim/src/window.c	/^frame_setwidth(frame_T *curfrp, int width)$/;"	f	file:	signature:(frame_T *curfrp, int width)
frame_setwidth	vim/vim/src/window.c	/^static void frame_setwidth(frame_T *curfrp, int width);$/;"	p	file:	signature:(frame_T *curfrp, int width)
free	vim/vim/src/libvterm/include/vterm.h	/^  void  (*free)(void *ptr, void *allocdata);$/;"	m	struct:__anon58	access:public
free_all_autocmds	vim/vim/src/fileio.c	/^free_all_autocmds(void)$/;"	f	signature:(void)
free_all_functions	vim/vim/src/userfunc.c	/^free_all_functions(void)$/;"	f	signature:(void)
free_all_marks	vim/vim/src/mark.c	/^free_all_marks(void)$/;"	f	signature:(void)
free_all_mem	vim/vim/src/misc2.c	/^free_all_mem(void)$/;"	f	signature:(void)
free_all_options	vim/vim/src/option.c	/^free_all_options(void)$/;"	f	signature:(void)
free_array	vim/vim/src/if_mzsch.c	/^free_array(char **array)$/;"	f	file:	signature:(char **array)
free_blocks	vim/vim/src/spellfile.c	/^free_blocks(sblock_T *bl)$/;"	f	file:	signature:(sblock_T *bl)
free_blocks	vim/vim/src/spellfile.c	/^static void free_blocks(sblock_T *bl);$/;"	p	file:	signature:(sblock_T *bl)
free_buf_options	vim/vim/src/buffer.c	/^free_buf_options($/;"	f	signature:( buf_T *buf, int free_p_ff)
free_buff	vim/vim/src/getchar.c	/^free_buff(buffheader_T *buf)$/;"	f	signature:(buffheader_T *buf)
free_buffer	vim/vim/src/buffer.c	/^free_buffer(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
free_buffer	vim/vim/src/buffer.c	/^static void	free_buffer(buf_T *);$/;"	p	file:	signature:(buf_T *)
free_buffer_stuff	vim/vim/src/buffer.c	/^free_buffer_stuff($/;"	f	file:	signature:( buf_T *buf, int free_options)
free_buffer_stuff	vim/vim/src/buffer.c	/^static void	free_buffer_stuff(buf_T *buf, int free_options);$/;"	p	file:	signature:(buf_T *buf, int free_options)
free_callback	vim/vim/src/evalfunc.c	/^free_callback(char_u *callback, partial_T *partial)$/;"	f	signature:(char_u *callback, partial_T *partial)
free_cd_dir	vim/vim/src/ex_docmd.c	/^free_cd_dir(void)$/;"	f	signature:(void)
free_cmd_argsW	vim/vim/src/os_win32.c	/^free_cmd_argsW(void)$/;"	f	signature:(void)
free_cmdline_buf	vim/vim/src/ex_getln.c	/^free_cmdline_buf(void)$/;"	f	signature:(void)
free_cmdlines	vim/vim/src/ex_docmd.c	/^free_cmdlines(garray_T *gap)$/;"	f	file:	signature:(garray_T *gap)
free_cmdlines	vim/vim/src/ex_docmd.c	/^static void	free_cmdlines(garray_T *gap);$/;"	p	file:	signature:(garray_T *gap)
free_colors	vim/vim/src/xpm/include/xpm.h	/^    XpmFreeColorsFunc free_colors;	\/* Application color de-allocator *\/$/;"	m	struct:__anon93	access:public
free_efm_list	vim/vim/src/quickfix.c	/^free_efm_list(efm_T **efm_first)$/;"	f	file:	signature:(efm_T **efm_first)
free_fib	vim/vim/src/os_amiga.c	52;"	d	file:
free_fib	vim/vim/src/os_amiga.c	54;"	d	file:
free_findfile	vim/vim/src/misc2.c	/^free_findfile(void)$/;"	f	file:	signature:(void)
free_findfile	vim/vim/src/misc2.c	/^static void free_findfile(void);$/;"	p	file:	signature:(void)
free_for_info	vim/vim/src/eval.c	/^free_for_info(void *fi_void)$/;"	f	signature:(void *fi_void)
free_funccal	vim/vim/src/userfunc.c	/^free_funccal($/;"	f	file:	signature:( funccall_T *fc, int free_val)
free_global_msglist	vim/vim/src/ex_eval.c	/^free_global_msglist(void)$/;"	f	signature:(void)
free_highlight	vim/vim/src/syntax.c	/^free_highlight(void)$/;"	f	signature:(void)
free_highlight_fonts	vim/vim/src/syntax.c	/^free_highlight_fonts(void)$/;"	f	signature:(void)
free_homedir	vim/vim/src/misc1.c	/^free_homedir(void)$/;"	f	signature:(void)
free_job_options	vim/vim/src/channel.c	/^free_job_options(jobopt_T *opt)$/;"	f	signature:(jobopt_T *opt)
free_jumplist	vim/vim/src/mark.c	/^free_jumplist(win_T *wp)$/;"	f	signature:(win_T *wp)
free_last_insert	vim/vim/src/edit.c	/^free_last_insert(void)$/;"	f	signature:(void)
free_locales	vim/vim/src/ex_cmds2.c	/^free_locales(void)$/;"	f	signature:(void)
free_menu	vim/vim/src/menu.c	/^free_menu(vimmenu_T **menup)$/;"	f	file:	signature:(vimmenu_T **menup)
free_menu	vim/vim/src/menu.c	/^static void free_menu(vimmenu_T **menup);$/;"	p	file:	signature:(vimmenu_T **menup)
free_menu_string	vim/vim/src/menu.c	/^free_menu_string(vimmenu_T *menu, int idx)$/;"	f	file:	signature:(vimmenu_T *menu, int idx)
free_menu_string	vim/vim/src/menu.c	/^static void free_menu_string(vimmenu_T *, int);$/;"	p	file:	signature:(vimmenu_T *, int)
free_msglist	vim/vim/src/ex_eval.c	/^free_msglist(struct msglist *l)$/;"	f	file:	signature:(struct msglist *l)
free_msglist	vim/vim/src/ex_eval.c	/^static void	free_msglist(struct msglist *l);$/;"	p	file:	signature:(struct msglist *l)
free_old_sub	vim/vim/src/ex_cmds.c	/^free_old_sub(void)$/;"	f	signature:(void)
free_one_termoption	vim/vim/src/option.c	/^free_one_termoption(char_u *var)$/;"	f	signature:(char_u *var)
free_pixmaps	vim/vim/src/gui_xmebw.c	/^free_pixmaps(XmEnhancedButtonWidget eb)$/;"	f	file:	signature:(XmEnhancedButtonWidget eb)
free_prev_shellcmd	vim/vim/src/ex_cmds.c	/^free_prev_shellcmd(void)$/;"	f	signature:(void)
free_regexp_stuff	vim/vim/src/regexp.c	/^free_regexp_stuff(void)$/;"	f	signature:(void)
free_register	vim/vim/src/ops.c	/^free_register(void *reg)$/;"	f	signature:(void *reg)
free_screenlines	vim/vim/src/screen.c	/^free_screenlines(void)$/;"	f	signature:(void)
free_scriptnames	vim/vim/src/ex_cmds2.c	/^free_scriptnames(void)$/;"	f	signature:(void)
free_search_patterns	vim/vim/src/search.c	/^free_search_patterns(void)$/;"	f	signature:(void)
free_signs	vim/vim/src/ex_cmds.c	/^free_signs(void)$/;"	f	signature:(void)
free_string_option	vim/vim/src/option.c	/^free_string_option(char_u *p)$/;"	f	signature:(char_u *p)
free_tabpage	vim/vim/src/window.c	/^free_tabpage(tabpage_T *tp)$/;"	f	signature:(tabpage_T *tp)
free_tag_stuff	vim/vim/src/tag.c	/^free_tag_stuff(void)$/;"	f	signature:(void)
free_terminal	vim/vim/src/terminal.c	/^free_terminal(term_T *term)$/;"	f	signature:(term_T *term)
free_termoptions	vim/vim/src/option.c	/^free_termoptions(void)$/;"	f	signature:(void)
free_timer	vim/vim/src/ex_cmds2.c	/^free_timer(timer_T *timer)$/;"	f	file:	signature:(timer_T *timer)
free_titles	vim/vim/src/buffer.c	/^free_titles(void)$/;"	f	signature:(void)
free_tv	vim/vim/src/eval.c	/^free_tv(typval_T *varp)$/;"	f	signature:(typval_T *varp)
free_typebuf	vim/vim/src/getchar.c	/^free_typebuf(void)$/;"	f	signature:(void)
free_unref_funccal	vim/vim/src/userfunc.c	/^free_unref_funccal(int copyID, int testing)$/;"	f	signature:(int copyID, int testing)
free_unref_items	vim/vim/src/eval.c	/^free_unref_items(int copyID)$/;"	f	file:	signature:(int copyID)
free_unref_items	vim/vim/src/eval.c	/^static int free_unref_items(int copyID);$/;"	p	file:	signature:(int copyID)
free_unused_channels	vim/vim/src/channel.c	/^free_unused_channels(int copyID, int mask)$/;"	f	signature:(int copyID, int mask)
free_unused_channels_contents	vim/vim/src/channel.c	/^free_unused_channels_contents(int copyID, int mask)$/;"	f	signature:(int copyID, int mask)
free_unused_jobs	vim/vim/src/channel.c	/^free_unused_jobs(int copyID, int mask)$/;"	f	signature:(int copyID, int mask)
free_unused_jobs_contents	vim/vim/src/channel.c	/^free_unused_jobs_contents(int copyID, int mask)$/;"	f	signature:(int copyID, int mask)
free_users	vim/vim/src/misc1.c	/^free_users(void)$/;"	f	signature:(void)
free_wordnode	vim/vim/src/spellfile.c	/^free_wordnode(spellinfo_T *spin, wordnode_T *n)$/;"	f	file:	signature:(spellinfo_T *spin, wordnode_T *n)
free_wordnode	vim/vim/src/spellfile.c	/^static void free_wordnode(spellinfo_T *spin, wordnode_T *n);$/;"	p	file:	signature:(spellinfo_T *spin, wordnode_T *n)
free_yank	vim/vim/src/ops.c	/^free_yank(long n)$/;"	f	file:	signature:(long n)
free_yank	vim/vim/src/ops.c	/^static void	free_yank(long);$/;"	p	file:	signature:(long)
free_yank_all	vim/vim/src/ops.c	/^free_yank_all(void)$/;"	f	file:	signature:(void)
free_yank_all	vim/vim/src/ops.c	/^static void	free_yank_all(void);$/;"	p	file:	signature:(void)
freeze_count	vim/vim/src/gui_gtk_f.h	/^    gint freeze_count;$/;"	m	struct:_GtkForm	access:public
from	vim/vim/src/digraph.c	/^    char_u	*from;$/;"	m	struct:__anon153	file:	access:public
from	vim/vim/src/if_py_both.h	/^    void	*from;$/;"	m	struct:__anon105	access:public
from	vim/vim/src/menu.c	/^    char_u	*from;		\/* English name *\/$/;"	m	struct:__anon213	file:	access:public
from	vim/vim/src/option.c	/^    int	    from;$/;"	m	struct:__anon160	file:	access:public
fromObj	vim/vim/src/if_py_both.h	/^    PyObject	*fromObj;$/;"	m	struct:__anon105	access:public
from_noamp	vim/vim/src/menu.c	/^    char_u	*from_noamp;	\/* same, without '&' *\/$/;"	m	struct:__anon213	file:	access:public
fromto_S	vim/vim/src/spell.h	/^typedef struct fromto_S$/;"	s
fromto_S::ft_from	vim/vim/src/spell.h	/^    char_u	*ft_from;$/;"	m	struct:fromto_S	access:public
fromto_S::ft_to	vim/vim/src/spell.h	/^    char_u	*ft_to;$/;"	m	struct:fromto_S	access:public
fromto_T	vim/vim/src/spell.h	/^} fromto_T;$/;"	t	typeref:struct:fromto_S
fseek	vim/vim/src/xxd/xxd.c	/^extern int fseek   __P((FILE *, long, int));$/;"	p	file:	signature:(FILE *, long, int)
fst	vim/vim/src/evalfunc.c	/^static struct fst$/;"	s	file:
fst::f_func	vim/vim/src/evalfunc.c	/^    void	(*f_func)(typval_T *args, typval_T *rvar);$/;"	m	struct:fst	file:	access:public
fst::f_max_argc	vim/vim/src/evalfunc.c	/^    char	f_max_argc;	\/* maximal number of arguments *\/$/;"	m	struct:fst	file:	access:public
fst::f_min_argc	vim/vim/src/evalfunc.c	/^    char	f_min_argc;	\/* minimal number of arguments *\/$/;"	m	struct:fst	file:	access:public
fst::f_name	vim/vim/src/evalfunc.c	/^    char	*f_name;	\/* function name *\/$/;"	m	struct:fst	file:	access:public
fstatfs	vim/vim/src/memfile.c	43;"	d	file:
fstatfs	vim/vim/src/memfile.c	50;"	d	file:
ft_from	vim/vim/src/spell.h	/^    char_u	*ft_from;$/;"	m	struct:fromto_S	access:public
ft_to	vim/vim/src/spell.h	/^    char_u	*ft_to;$/;"	m	struct:fromto_S	access:public
ftell	vim/vim/src/xxd/xxd.c	/^extern long int ftell();$/;"	p	file:
full_path	vim/vim/src/structs.h	/^    int		full_path;		\/* file name argument was full path *\/$/;"	m	struct:__anon210	access:public
full_screen	vim/vim/src/globals.h	/^EXTERN volatile int full_screen INIT(= FALSE);$/;"	v
fullname	vim/vim/src/option.c	/^    char	*fullname;	\/* full option name *\/$/;"	m	struct:vimoption	file:	access:public
fullpathcmp	vim/vim/src/misc1.c	/^fullpathcmp($/;"	f	signature:( char_u *s1, char_u *s2, int checkname)
func	vim/vim/src/ex_docmd.c	/^    char_u	*(*func)(int, void *, int))$/;"	f	signature:(int, void *, int)
func	vim/vim/src/if_cscope.h	/^    int     (*func)(exarg_T *eap);$/;"	m	struct:__anon68	access:public
func	vim/vim/src/if_lua.c	/^    luaV_function func;$/;"	m	struct:__anon80	file:	access:public
func	vim/vim/src/structs.h	/^    ufunc_T	*func;		\/* function being called *\/$/;"	m	struct:funccall_S	access:public
func	vim/vim/src/syntax.c	/^    void    (*func)(exarg_T *, int);	\/* function to call *\/$/;"	m	struct:subcommand	file:	access:public
func_breakpoint	vim/vim/src/userfunc.c	/^func_breakpoint(void *cookie)$/;"	f	signature:(void *cookie)
func_call	vim/vim/src/userfunc.c	/^func_call($/;"	f	signature:( char_u *name, typval_T *args, partial_T *partial, dict_T *selfdict, typval_T *rettv)
func_clear	vim/vim/src/userfunc.c	/^func_clear(ufunc_T *fp, int force)$/;"	f	file:	signature:(ufunc_T *fp, int force)
func_clear_free	vim/vim/src/userfunc.c	/^func_clear_free(ufunc_T *fp, int force)$/;"	f	file:	signature:(ufunc_T *fp, int force)
func_dbg_tick	vim/vim/src/userfunc.c	/^func_dbg_tick(void *cookie)$/;"	f	signature:(void *cookie)
func_do_profile	vim/vim/src/userfunc.c	/^func_do_profile(ufunc_T *fp)$/;"	f	file:	signature:(ufunc_T *fp)
func_do_profile	vim/vim/src/userfunc.c	/^static void func_do_profile(ufunc_T *fp);$/;"	p	file:	signature:(ufunc_T *fp)
func_dump_profile	vim/vim/src/userfunc.c	/^func_dump_profile(FILE *fd)$/;"	f	signature:(FILE *fd)
func_equal	vim/vim/src/eval.c	/^func_equal($/;"	f	file:	signature:( typval_T *tv1, typval_T *tv2, int ic)
func_free	vim/vim/src/userfunc.c	/^func_free(ufunc_T *fp)$/;"	f	file:	signature:(ufunc_T *fp)
func_has_abort	vim/vim/src/userfunc.c	/^func_has_abort($/;"	f	signature:( void *cookie)
func_has_ended	vim/vim/src/userfunc.c	/^func_has_ended(void *cookie)$/;"	f	signature:(void *cookie)
func_hashtab	vim/vim/src/userfunc.c	/^static hashtab_T	func_hashtab;$/;"	v	file:
func_init	vim/vim/src/userfunc.c	/^func_init()$/;"	f
func_level	vim/vim/src/userfunc.c	/^func_level(void *cookie)$/;"	f	signature:(void *cookie)
func_line_end	vim/vim/src/userfunc.c	/^func_line_end(void *cookie)$/;"	f	signature:(void *cookie)
func_line_exec	vim/vim/src/userfunc.c	/^func_line_exec(void *cookie)$/;"	f	signature:(void *cookie)
func_line_start	vim/vim/src/userfunc.c	/^func_line_start(void *cookie)$/;"	f	signature:(void *cookie)
func_name	vim/vim/src/userfunc.c	/^func_name(void *cookie)$/;"	f	signature:(void *cookie)
func_name_refcount	vim/vim/src/userfunc.c	/^func_name_refcount(char_u *name)$/;"	f	file:	signature:(char_u *name)
func_ptr_ref	vim/vim/src/userfunc.c	/^func_ptr_ref(ufunc_T *fp)$/;"	f	signature:(ufunc_T *fp)
func_ptr_unref	vim/vim/src/userfunc.c	/^func_ptr_unref(ufunc_T *fp)$/;"	f	signature:(ufunc_T *fp)
func_ref	vim/vim/src/userfunc.c	/^func_ref(char_u *name)$/;"	f	signature:(char_u *name)
func_remove	vim/vim/src/userfunc.c	/^func_remove(ufunc_T *fp)$/;"	f	file:	signature:(ufunc_T *fp)
func_unref	vim/vim/src/userfunc.c	/^func_unref(char_u *name)$/;"	f	signature:(char_u *name)
funcargs	vim/vim/src/userfunc.c	/^static garray_T funcargs = GA_EMPTY;$/;"	v	file:
funccal_unref	vim/vim/src/userfunc.c	/^funccal_unref(funccall_T *fc, ufunc_T *fp, int force)$/;"	f	file:	signature:(funccall_T *fc, ufunc_T *fp, int force)
funccal_unref	vim/vim/src/userfunc.c	/^static void funccal_unref(funccall_T *fc, ufunc_T *fp, int force);$/;"	p	file:	signature:(funccall_T *fc, ufunc_T *fp, int force)
funccall_S	vim/vim/src/structs.h	/^struct funccall_S$/;"	s
funccall_S::__anon188::room	vim/vim/src/structs.h	/^	char_u	room[VAR_SHORT_LEN];	\/* room for the name *\/$/;"	m	struct:funccall_S::__anon188	access:public
funccall_S::__anon188::var	vim/vim/src/structs.h	/^	dictitem_T	var;		\/* variable (without room for name) *\/$/;"	m	struct:funccall_S::__anon188	access:public
funccall_S::breakpoint	vim/vim/src/structs.h	/^    linenr_T	breakpoint;	\/* next line with breakpoint or zero *\/$/;"	m	struct:funccall_S	access:public
funccall_S::caller	vim/vim/src/structs.h	/^    funccall_T	*caller;	\/* calling function or NULL *\/$/;"	m	struct:funccall_S	access:public
funccall_S::dbg_tick	vim/vim/src/structs.h	/^    int		dbg_tick;	\/* debug_tick when breakpoint was set *\/$/;"	m	struct:funccall_S	access:public
funccall_S::fc_copyID	vim/vim/src/structs.h	/^    int		fc_copyID;	\/* for garbage collection *\/$/;"	m	struct:funccall_S	access:public
funccall_S::fc_funcs	vim/vim/src/structs.h	/^    garray_T	fc_funcs;	\/* list of ufunc_T* which keep a reference to$/;"	m	struct:funccall_S	access:public
funccall_S::fc_refcount	vim/vim/src/structs.h	/^    int		fc_refcount;	\/* number of user functions that reference this$/;"	m	struct:funccall_S	access:public
funccall_S::fixvar	vim/vim/src/structs.h	/^    } fixvar[FIXVAR_CNT];$/;"	m	struct:funccall_S	typeref:struct:funccall_S::__anon188	access:public
funccall_S::func	vim/vim/src/structs.h	/^    ufunc_T	*func;		\/* function being called *\/$/;"	m	struct:funccall_S	access:public
funccall_S::l_avars	vim/vim/src/structs.h	/^    dict_T	l_avars;	\/* a: argument variables *\/$/;"	m	struct:funccall_S	access:public
funccall_S::l_avars_var	vim/vim/src/structs.h	/^    dictitem_T	l_avars_var;	\/* variable for a: scope *\/$/;"	m	struct:funccall_S	access:public
funccall_S::l_listitems	vim/vim/src/structs.h	/^    listitem_T	l_listitems[MAX_FUNC_ARGS];	\/* listitems for a:000 *\/$/;"	m	struct:funccall_S	access:public
funccall_S::l_varlist	vim/vim/src/structs.h	/^    list_T	l_varlist;	\/* list for a:000 *\/$/;"	m	struct:funccall_S	access:public
funccall_S::l_vars	vim/vim/src/structs.h	/^    dict_T	l_vars;		\/* l: local function variables *\/$/;"	m	struct:funccall_S	access:public
funccall_S::l_vars_var	vim/vim/src/structs.h	/^    dictitem_T	l_vars_var;	\/* variable for l: scope *\/$/;"	m	struct:funccall_S	access:public
funccall_S::level	vim/vim/src/structs.h	/^    int		level;		\/* top nesting level of executed function *\/$/;"	m	struct:funccall_S	access:public
funccall_S::linenr	vim/vim/src/structs.h	/^    int		linenr;		\/* next line to be executed *\/$/;"	m	struct:funccall_S	access:public
funccall_S::prof_child	vim/vim/src/structs.h	/^    proftime_T	prof_child;	\/* time spent in a child *\/$/;"	m	struct:funccall_S	access:public
funccall_S::rettv	vim/vim/src/structs.h	/^    typval_T	*rettv;		\/* return value *\/$/;"	m	struct:funccall_S	access:public
funccall_S::returned	vim/vim/src/structs.h	/^    int		returned;	\/* ":return" used *\/$/;"	m	struct:funccall_S	access:public
funccall_T	vim/vim/src/structs.h	/^typedef struct funccall_S funccall_T;$/;"	t	typeref:struct:funccall_S
funcdict_T	vim/vim/src/structs.h	/^} funcdict_T;$/;"	t	typeref:struct:__anon189
funcdict_T	vim/vim/src/structs.h	/^} funcdict_T;$/;"	t	typeref:struct:__anon191
function_exists	vim/vim/src/userfunc.c	/^function_exists(char_u *name, int no_deref)$/;"	f	signature:(char_u *name, int no_deref)
functions	vim/vim/src/evalfunc.c	/^} functions[] =$/;"	v	typeref:struct:fst	file:
fungují	vim/vim/runtime/tutor/tutor.cs	/^Poznámka: Kurzorové klávesy také fungují, av¹ak pou¾ívání hjkl je rychlej¹í$/;"	p
fwd_word	vim/vim/src/search.c	/^fwd_word($/;"	f	signature:( long count, int bigword, int eol)
fwrite_crypt	vim/vim/src/undo.c	/^fwrite_crypt(bufinfo_T *bi, char_u *ptr, size_t len)$/;"	f	file:	signature:(bufinfo_T *bi, char_u *ptr, size_t len)
fwrite_crypt	vim/vim/src/undo.c	/^static int fwrite_crypt(bufinfo_T *bi, char_u *ptr, size_t len);$/;"	p	file:	signature:(bufinfo_T *bi, char_u *ptr, size_t len)
g4_color	vim/vim/src/xpm/include/xpm.h	/^    char *g4_color;		\/* 4 level grayscale default *\/$/;"	m	struct:__anon90	access:public
gDialogHotKeys	vim/vim/src/gui_mac.c	/^static short *gDialogHotKeys;$/;"	v	file:
gFontPanelInfo	vim/vim/src/gui_mac.c	/^} gFontPanelInfo = { 0, 0, 0, false };$/;"	v	typeref:struct:__anon223	file:
gFontStyle	vim/vim/src/gui_mac.c	/^ATSUStyle   gFontStyle;$/;"	v
gIsFontFallbackSet	vim/vim/src/gui_mac.c	/^Boolean	    gIsFontFallbackSet;$/;"	v
gMacSystemVersion	vim/vim/src/gui_mac.c	/^SInt32 gMacSystemVersion;$/;"	v
gPathConverter	vim/vim/src/os_mac_conv.c	/^static TECObjectRef gPathConverter;$/;"	v	file:
gScrollAction	vim/vim/src/gui_mac.c	/^ControlActionUPP gScrollAction;$/;"	v
gScrollDrag	vim/vim/src/gui_mac.c	/^ControlActionUPP gScrollDrag;$/;"	v
gTSCDefault	vim/vim/src/gui_mac.c	/^static Component	     gTSCDefault;$/;"	v	file:
gTSCInsert	vim/vim/src/gui_mac.c	/^static Component	     gTSCInsert;$/;"	v	file:
gTSCWindow	vim/vim/src/gui_mac.c	/^static Component	     gTSCWindow;$/;"	v	file:
gTSLDefault	vim/vim/src/gui_mac.c	/^static ScriptLanguageRecord gTSLDefault = { 0, 0 };$/;"	v	file:
gTSLInsert	vim/vim/src/gui_mac.c	/^static ScriptLanguageRecord gTSLInsert;$/;"	v	file:
gTSLWindow	vim/vim/src/gui_mac.c	/^static ScriptLanguageRecord gTSLWindow;$/;"	v	file:
gTSMDocument	vim/vim/src/gui_mac.c	/^static TSMDocumentID gTSMDocument;$/;"	v	file:
gUTF16ToUTF8Converter	vim/vim/src/os_mac_conv.c	/^static TECObjectRef gUTF16ToUTF8Converter;$/;"	v	file:
gWideFontStyle	vim/vim/src/gui_mac.c	/^ATSUStyle   gWideFontStyle;$/;"	v
g_ChangeDir	vim/vim/src/VisVim/Commands.cpp	/^static int g_ChangeDir = CD_NONE;	\/\/ CD after file open?$/;"	v	file:
g_PlatformId	vim/vim/src/GvimExt/gvimext.cpp	/^static DWORD g_PlatformId;$/;"	v	file:
g_PlatformId	vim/vim/src/dosinst.h	/^static DWORD g_PlatformId;$/;"	v
g_PlatformId	vim/vim/src/os_win32.c	/^DWORD g_PlatformId;$/;"	v
g_attrCurrent	vim/vim/src/os_win32.c	/^static WORD  g_attrCurrent;$/;"	v	file:
g_attrDefault	vim/vim/src/os_win32.c	/^static WORD  g_attrDefault = 7;  \/* lightgray text on black background *\/$/;"	v	file:
g_attrPreStandout	vim/vim/src/os_win32.c	/^static WORD g_attrPreStandout = 0;$/;"	v	file:
g_bDevStudioEditor	vim/vim/src/VisVim/Commands.cpp	/^static BOOL g_bDevStudioEditor = FALSE;	\/\/ Open file in Dev Studio editor simultaneously$/;"	v	file:
g_bEnableVim	vim/vim/src/VisVim/Commands.cpp	/^static BOOL g_bEnableVim = TRUE;	\/\/ Vim enabled$/;"	v	file:
g_bNewTabs	vim/vim/src/VisVim/Commands.cpp	/^static BOOL g_bNewTabs = FALSE;$/;"	v	file:
g_cRefThisDll	vim/vim/src/GvimExt/gvimext.cpp	/^UINT      g_cRefThisDll = 0;    \/\/ Reference count of this DLL.$/;"	v
g_cbNonTermcap	vim/vim/src/os_win32.c	/^static ConsoleBuffer g_cbNonTermcap = { 0 };$/;"	v	file:
g_cbOrig	vim/vim/src/os_win32.c	/^static ConsoleBuffer g_cbOrig = { 0 };$/;"	v	file:
g_cbTermcap	vim/vim/src/os_win32.c	/^static ConsoleBuffer g_cbTermcap = { 0 };$/;"	v	file:
g_cci	vim/vim/src/os_win32.c	/^static CONSOLE_CURSOR_INFO g_cci;$/;"	v	file:
g_chartab	vim/vim/src/charset.c	/^static char_u	g_chartab[256];$/;"	v	file:
g_cmodein	vim/vim/src/os_win32.c	/^static DWORD g_cmodein = 0;$/;"	v	file:
g_cmodeout	vim/vim/src/os_win32.c	/^static DWORD g_cmodeout = 0;$/;"	v	file:
g_color	vim/vim/src/xpm/include/xpm.h	/^    char *g_color;		\/* other level grayscale default *\/$/;"	m	struct:__anon90	access:public
g_coord	vim/vim/src/os_win32.c	/^static COORD	  g_coord;  \/* 0-based, but external coords are 1-based *\/$/;"	v	file:
g_do_tagpreview	vim/vim/src/globals.h	/^EXTERN int	g_do_tagpreview INIT(= 0);  \/* for tag preview commands:$/;"	v
g_fCBrkPressed	vim/vim/src/os_win32.c	/^static int g_fCBrkPressed = FALSE;  \/* set by ctrl-break interrupt *\/$/;"	v	file:
g_fCanChangeIcon	vim/vim/src/os_win32.c	/^static BOOL g_fCanChangeIcon = FALSE;$/;"	v	file:
g_fCtrlCPressed	vim/vim/src/os_win32.c	/^static int g_fCtrlCPressed = FALSE; \/* set when ctrl-C or ctrl-break detected *\/$/;"	v	file:
g_fForceExit	vim/vim/src/os_win32.c	/^static int g_fForceExit = FALSE;    \/* set when forcefully exiting *\/$/;"	v	file:
g_fJustGotFocus	vim/vim/src/os_win32.c	/^static BOOL g_fJustGotFocus = FALSE;$/;"	v	file:
g_fMouseActive	vim/vim/src/os_win32.c	/^static int g_fMouseActive = FALSE;  \/* mouse enabled *\/$/;"	v	file:
g_fMouseAvail	vim/vim/src/os_win32.c	/^static int g_fMouseAvail = FALSE;   \/* mouse present *\/$/;"	v	file:
g_fTermcapMode	vim/vim/src/os_win32.c	/^static int g_fTermcapMode = FALSE;$/;"	v	file:
g_fWindInitCalled	vim/vim/src/os_win32.c	/^static int g_fWindInitCalled = FALSE;$/;"	v	file:
g_hConIn	vim/vim/src/os_win32.c	/^static HANDLE g_hConIn  = INVALID_HANDLE_VALUE;$/;"	v	file:
g_hConOut	vim/vim/src/os_win32.c	/^static HANDLE g_hConOut = INVALID_HANDLE_VALUE;$/;"	v	file:
g_hOrigIcon	vim/vim/src/os_win32.c	/^static HICON g_hOrigIcon = NULL;$/;"	v	file:
g_hOrigIconSmall	vim/vim/src/os_win32.c	/^static HICON g_hOrigIconSmall = NULL;$/;"	v	file:
g_hVimIcon	vim/vim/src/os_win32.c	/^static HICON g_hVimIcon = NULL;$/;"	v	file:
g_hWnd	vim/vim/src/os_win32.c	/^HWND g_hWnd = NULL;	\/* also used in os_mswin.c *\/$/;"	v
g_hmodThisDll	vim/vim/src/GvimExt/gvimext.cpp	/^HINSTANCE g_hmodThisDll = NULL;	\/\/ Handle to this DLL itself.$/;"	v
g_nMouseClick	vim/vim/src/os_win32.c	/^static int g_nMouseClick = -1;	    \/* mouse status *\/$/;"	v	file:
g_srScrollRegion	vim/vim/src/os_win32.c	/^static SMALL_RECT g_srScrollRegion;$/;"	v	file:
g_szOrigTitle	vim/vim/src/os_win32.c	/^char g_szOrigTitle[256] = { 0 };$/;"	v
g_xMouse	vim/vim/src/os_win32.c	/^static int g_xMouse;		    \/* mouse x coordinate *\/$/;"	v	file:
g_yMouse	vim/vim/src/os_win32.c	/^static int g_yMouse;		    \/* mouse y coordinate *\/$/;"	v	file:
ga_add_string	vim/vim/src/misc2.c	/^ga_add_string(garray_T *gap, char_u *p)$/;"	f	signature:(garray_T *gap, char_u *p)
ga_append	vim/vim/src/misc2.c	/^ga_append(garray_T *gap, int c)$/;"	f	signature:(garray_T *gap, int c)
ga_clear	vim/vim/src/misc2.c	/^ga_clear(garray_T *gap)$/;"	f	signature:(garray_T *gap)
ga_clear_strings	vim/vim/src/misc2.c	/^ga_clear_strings(garray_T *gap)$/;"	f	signature:(garray_T *gap)
ga_concat	vim/vim/src/misc2.c	/^ga_concat(garray_T *gap, char_u *s)$/;"	f	signature:(garray_T *gap, char_u *s)
ga_concat_esc	vim/vim/src/eval.c	/^ga_concat_esc(garray_T *gap, char_u *str)$/;"	f	file:	signature:(garray_T *gap, char_u *str)
ga_concat_strings	vim/vim/src/misc2.c	/^ga_concat_strings(garray_T *gap, char *sep)$/;"	f	signature:(garray_T *gap, char *sep)
ga_data	vim/vim/src/structs.h	/^    void    *ga_data;		    \/* pointer to the first item *\/$/;"	m	struct:growarray	access:public
ga_grow	vim/vim/src/misc2.c	/^ga_grow(garray_T *gap, int n)$/;"	f	signature:(garray_T *gap, int n)
ga_growsize	vim/vim/src/structs.h	/^    int	    ga_growsize;	    \/* number of items to grow each time *\/$/;"	m	struct:growarray	access:public
ga_init	vim/vim/src/misc2.c	/^ga_init(garray_T *gap)$/;"	f	signature:(garray_T *gap)
ga_init2	vim/vim/src/misc2.c	/^ga_init2(garray_T *gap, int itemsize, int growsize)$/;"	f	signature:(garray_T *gap, int itemsize, int growsize)
ga_itemsize	vim/vim/src/structs.h	/^    int	    ga_itemsize;	    \/* sizeof(item) *\/$/;"	m	struct:growarray	access:public
ga_len	vim/vim/src/structs.h	/^    int	    ga_len;		    \/* current number of items used *\/$/;"	m	struct:growarray	access:public
ga_loaded	vim/vim/src/eval.c	/^static garray_T		ga_loaded = {0, 0, sizeof(char_u *), 4, NULL};$/;"	v	file:
ga_maxlen	vim/vim/src/structs.h	/^    int	    ga_maxlen;		    \/* maximum number of items possible *\/$/;"	m	struct:growarray	access:public
ga_scripts	vim/vim/src/eval.c	/^static garray_T	    ga_scripts = {0, 0, sizeof(scriptvar_T *), 4, NULL};$/;"	v	file:
ga_userinput	vim/vim/src/evalfunc.c	/^static garray_T	    ga_userinput = {0, 0, sizeof(tasave_T), 4, NULL};$/;"	v	file:
ga_users	vim/vim/src/misc1.c	/^static garray_T	ga_users;$/;"	v	file:
gamma	vim/vim/src/gui_dwrite.h	/^    float gamma;$/;"	m	struct:DWriteRenderingParams	access:public
garbage_collect	vim/vim/src/eval.c	/^garbage_collect(int testing)$/;"	f	signature:(int testing)
garbage_collect_at_exit	vim/vim/src/globals.h	/^EXTERN int	garbage_collect_at_exit INIT(= FALSE);$/;"	v
garray_T	vim/vim/src/structs.h	/^} garray_T;$/;"	t	typeref:struct:growarray
gather_termleader	vim/vim/src/term.c	/^gather_termleader(void)$/;"	f	file:	signature:(void)
gather_termleader	vim/vim/src/term.c	/^static void gather_termleader(void);$/;"	p	file:	signature:(void)
gboolean	vim/vim/src/gui_gtk.c	96;"	d	file:
gc	vim/vim/src/gui_at_sb.h	/^    GC		  gc;		\/* a (shared) gc *\/$/;"	m	struct:__anon84	access:public
gchar_cursor	vim/vim/src/misc1.c	/^gchar_cursor(void)$/;"	f	signature:(void)
gchar_pos	vim/vim/src/misc1.c	/^gchar_pos(pos_T *pos)$/;"	f	signature:(pos_T *pos)
gen64$r_quad_overlay	vim/vim/src/os_vms.c	/^    } gen64$r_quad_overlay;$/;"	m	struct:_generic_64	file:	access:public
gen_expand_wildcards	vim/vim/src/misc1.c	/^gen_expand_wildcards($/;"	f	signature:( int num_pat, char_u **pat, int *num_file, char_u ***file, int flags)
gen_expand_wildcards	vim/vim/src/vim.h	883;"	d
general_beval_cb	vim/vim/src/gui_beval.c	/^general_beval_cb(BalloonEval *beval, int state UNUSED)$/;"	f	signature:(BalloonEval *beval, int state UNUSED)
geom	vim/vim/src/gui.h	/^    char_u	*geom;		    \/* Geometry, eg "80x24" *\/$/;"	m	struct:Gui	access:public
get2c	vim/vim/src/misc2.c	/^get2c(FILE *fd)$/;"	f	signature:(FILE *fd)
get3c	vim/vim/src/misc2.c	/^get3c(FILE *fd)$/;"	f	signature:(FILE *fd)
get4c	vim/vim/src/misc2.c	/^get4c(FILE *fd)$/;"	f	signature:(FILE *fd)
get8ctime	vim/vim/src/misc2.c	/^get8ctime(FILE *fd)$/;"	f	signature:(FILE *fd)
getCommand	vim/vim/src/integration.c	/^getCommand(void)$/;"	f	file:	signature:(void)
getConnInfo	vim/vim/src/netbeans.c	/^getConnInfo(char *file, char **host, char **port, char **auth)$/;"	f	file:	signature:(char *file, char **host, char **port, char **auth)
getConnInfo	vim/vim/src/netbeans.c	/^static int getConnInfo(char *file, char **host, char **port, char **password);$/;"	p	file:	signature:(char *file, char **host, char **port, char **password)
getDeepestNesting	vim/vim/src/fold.c	/^getDeepestNesting(void)$/;"	f	signature:(void)
getDeepestNestingRecurse	vim/vim/src/fold.c	/^getDeepestNestingRecurse(garray_T *gap)$/;"	f	file:	signature:(garray_T *gap)
getDeepestNestingRecurse	vim/vim/src/fold.c	/^static int getDeepestNestingRecurse(garray_T *gap);$/;"	p	file:	signature:(garray_T *gap)
getDelta	vim/vim/src/gui_dwrite.cpp	/^    FLOAT getDelta(void) const$/;"	f	class:AdjustedGlyphRun	access:public	signature:(void) const
getGvimInvocation	vim/vim/src/GvimExt/gvimext.cpp	/^getGvimInvocation(char *name, int runtime)$/;"	f	file:	signature:(char *name, int runtime)
getGvimInvocationW	vim/vim/src/GvimExt/gvimext.cpp	/^getGvimInvocationW(wchar_t *nameW)$/;"	f	file:	signature:(wchar_t *nameW)
getGvimName	vim/vim/src/GvimExt/gvimext.cpp	/^getGvimName(char *name, int runtime)$/;"	f	file:	signature:(char *name, int runtime)
getRuntimeDir	vim/vim/src/GvimExt/gvimext.cpp	/^getRuntimeDir(char *buf)$/;"	f	file:	signature:(char *buf)
getTabCount	vim/vim/src/gui_mac.c	/^getTabCount(void)$/;"	f	file:	signature:(void)
getTabLabel	vim/vim/src/gui_mac.c	/^getTabLabel(tabpage_T *page)$/;"	f	file:	signature:(tabpage_T *page)
getVimServerName	vim/vim/src/os_mswin.c	/^getVimServerName(HWND hwnd, char *name, int namelen)$/;"	f	file:	signature:(HWND hwnd, char *name, int namelen)
get_address	vim/vim/src/ex_docmd.c	/^get_address($/;"	f	file:	signature:( exarg_T *eap UNUSED, char_u **ptr, int addr_type, int skip, int to_other_file, int address_count UNUSED)
get_address	vim/vim/src/ex_docmd.c	/^static linenr_T get_address(exarg_T *, char_u **, int addr_type, int skip, int to_other_file, int address_count);$/;"	p	file:	signature:(exarg_T *, char_u **, int addr_type, int skip, int to_other_file, int address_count)
get_affitem	vim/vim/src/spellfile.c	/^get_affitem(int flagtype, char_u **pp)$/;"	f	file:	signature:(int flagtype, char_u **pp)
get_affitem	vim/vim/src/spellfile.c	/^static unsigned get_affitem(int flagtype, char_u **pp);$/;"	p	file:	signature:(int flagtype, char_u **pp)
get_affix_flags	vim/vim/src/spellfile.c	/^get_affix_flags(afffile_T *affile, char_u *afflist)$/;"	f	file:	signature:(afffile_T *affile, char_u *afflist)
get_affix_flags	vim/vim/src/spellfile.c	/^static int get_affix_flags(afffile_T *affile, char_u *afflist);$/;"	p	file:	signature:(afffile_T *affile, char_u *afflist)
get_arglist	vim/vim/src/ex_cmds2.c	/^get_arglist(garray_T *gap, char_u *str)$/;"	f	signature:(garray_T *gap, char_u *str)
get_arglist_exp	vim/vim/src/ex_cmds2.c	/^get_arglist_exp($/;"	f	signature:( char_u *str, int *fcountp, char_u ***fnamesp, int wig)
get_attr_entry	vim/vim/src/syntax.c	/^get_attr_entry(garray_T *table, attrentry_T *aep)$/;"	f	file:	signature:(garray_T *table, attrentry_T *aep)
get_attr_entry	vim/vim/src/syntax.c	/^static int get_attr_entry(garray_T *table, attrentry_T *aep);$/;"	p	file:	signature:(garray_T *table, attrentry_T *aep)
get_augroup_name	vim/vim/src/fileio.c	/^get_augroup_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_baseclass_amount	vim/vim/src/misc1.c	/^get_baseclass_amount(int col)$/;"	f	file:	signature:(int col)
get_baseclass_amount	vim/vim/src/misc1.c	/^static int	get_baseclass_amount(int col);$/;"	p	file:	signature:(int col)
get_behave_arg	vim/vim/src/ex_docmd.c	/^get_behave_arg(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_beval_info	vim/vim/src/gui_beval.c	/^get_beval_info($/;"	f	signature:( BalloonEval *beval, int getword, win_T **winp, linenr_T *lnump, char_u **textp, int *colp)
get_bkc_value	vim/vim/src/option.c	/^get_bkc_value(buf_T *buf)$/;"	f	signature:(buf_T *buf)
get_breakindent_win	vim/vim/src/misc1.c	/^get_breakindent_win($/;"	f	signature:( win_T *wp, char_u *line)
get_buf	vim/vim/src/if_ruby.c	/^static buf_T *get_buf(VALUE obj)$/;"	f	file:	signature:(VALUE obj)
get_buf_size	vim/vim/src/netbeans.c	/^get_buf_size(buf_T *bufp)$/;"	f	file:	signature:(buf_T *bufp)
get_buf_size	vim/vim/src/netbeans.c	/^static long get_buf_size(buf_T *);$/;"	p	file:	signature:(buf_T *)
get_buf_tv	vim/vim/src/evalfunc.c	/^get_buf_tv(typval_T *tv, int curtab_only)$/;"	f	file:	signature:(typval_T *tv, int curtab_only)
get_buffcont	vim/vim/src/getchar.c	/^get_buffcont($/;"	f	file:	signature:( buffheader_T *buffer, int dozero)
get_buffcont	vim/vim/src/getchar.c	/^static char_u	*get_buffcont(buffheader_T *, int);$/;"	p	file:	signature:(buffheader_T *, int)
get_buffer_arg	vim/vim/src/if_mzsch.c	/^get_buffer_arg(const char *fname, int argnum, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(const char *fname, int argnum, int argc, Scheme_Object **argv)
get_buffer_arg	vim/vim/src/if_mzsch.c	/^static vim_mz_buffer *get_buffer_arg(const char *fname, int argnum,$/;"	p	file:	signature:(const char *fname, int argnum, int argc, Scheme_Object **argv)
get_buffer_by_name	vim/vim/src/if_mzsch.c	/^get_buffer_by_name(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_by_name	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_by_name(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_by_num	vim/vim/src/if_mzsch.c	/^get_buffer_by_num(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_by_num	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_by_num(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_count	vim/vim/src/if_mzsch.c	/^get_buffer_count(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_buffer_count	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_count(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_info	vim/vim/src/evalfunc.c	/^get_buffer_info(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
get_buffer_line	vim/vim/src/if_mzsch.c	/^get_buffer_line(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_line	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_line(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_line	vim/vim/src/if_ruby.c	/^static VALUE get_buffer_line(buf_T *buf, linenr_T n)$/;"	f	file:	signature:(buf_T *buf, linenr_T n)
get_buffer_line_list	vim/vim/src/if_mzsch.c	/^get_buffer_line_list(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_line_list	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_line_list(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_lines	vim/vim/src/evalfunc.c	/^get_buffer_lines($/;"	f	file:	signature:( buf_T *buf, linenr_T start, linenr_T end, int retlist, typval_T *rettv)
get_buffer_lines	vim/vim/src/evalfunc.c	/^static void get_buffer_lines(buf_T *buf, linenr_T start, linenr_T end, int retlist, typval_T *rettv);$/;"	p	file:	signature:(buf_T *buf, linenr_T start, linenr_T end, int retlist, typval_T *rettv)
get_buffer_name	vim/vim/src/if_mzsch.c	/^get_buffer_name(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_name	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_name(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_num	vim/vim/src/if_mzsch.c	/^get_buffer_num(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_num	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_num(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_buffer_signs	vim/vim/src/evalfunc.c	/^get_buffer_signs(buf_T *buf, list_T *l)$/;"	f	file:	signature:(buf_T *buf, list_T *l)
get_buffer_size	vim/vim/src/if_mzsch.c	/^get_buffer_size(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_buffer_size	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_buffer_size(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_bytes_from_buf	vim/vim/src/term.c	/^get_bytes_from_buf(char_u *buf, char_u *bytes, int num_bytes)$/;"	f	file:	signature:(char_u *buf, char_u *bytes, int num_bytes)
get_bytes_from_buf	vim/vim/src/term.c	/^static int get_bytes_from_buf(char_u *, char_u *, int);$/;"	p	file:	signature:(char_u *, char_u *, int)
get_c_indent	vim/vim/src/misc1.c	/^get_c_indent(void)$/;"	f	signature:(void)
get_callback	vim/vim/src/evalfunc.c	/^get_callback(typval_T *arg, partial_T **pp)$/;"	f	signature:(typval_T *arg, partial_T **pp)
get_ccline_ptr	vim/vim/src/ex_getln.c	/^get_ccline_ptr(void)$/;"	f	file:	signature:(void)
get_channel_arg	vim/vim/src/channel.c	/^get_channel_arg(typval_T *tv, int check_open, int reading, ch_part_T part)$/;"	f	signature:(typval_T *tv, int check_open, int reading, ch_part_T part)
get_char_class	vim/vim/src/regexp.c	/^get_char_class(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
get_char_class	vim/vim/src/regexp.c	/^static int	get_char_class(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
get_choice	vim/vim/src/dosinst.c	/^get_choice(char **table, int entries)$/;"	f	file:	signature:(char **table, int entries)
get_cmd_args	vim/vim/src/gui_w32.c	/^get_cmd_args(char *prog, char *cmdline, char ***argvp, char **tofree)$/;"	f	signature:(char *prog, char *cmdline, char ***argvp, char **tofree)
get_cmd_argsW	vim/vim/src/os_win32.c	/^get_cmd_argsW(char ***argvp)$/;"	f	signature:(char ***argvp)
get_cmd_output	vim/vim/src/misc1.c	/^get_cmd_output($/;"	f	signature:( char_u *cmd, char_u *infile, int flags, int *ret_len)
get_cmd_output_as_rettv	vim/vim/src/evalfunc.c	/^get_cmd_output_as_rettv($/;"	f	file:	signature:( typval_T *argvars, typval_T *rettv, int retlist)
get_cmdline_pos	vim/vim/src/ex_getln.c	/^get_cmdline_pos(void)$/;"	f	signature:(void)
get_cmdline_str	vim/vim/src/ex_getln.c	/^get_cmdline_str(void)$/;"	f	signature:(void)
get_cmdline_type	vim/vim/src/ex_getln.c	/^get_cmdline_type(void)$/;"	f	signature:(void)
get_coll_element	vim/vim/src/regexp.c	/^get_coll_element(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
get_coll_element	vim/vim/src/regexp.c	/^static int	get_coll_element(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
get_command_name	vim/vim/src/ex_docmd.c	/^get_command_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_compflags	vim/vim/src/spellfile.c	/^get_compflags($/;"	f	file:	signature:( afffile_T *affile, char_u *afflist, char_u *store_afflist)
get_compflags	vim/vim/src/spellfile.c	/^static void get_compflags(afffile_T *affile, char_u *afflist, char_u *store_afflist);$/;"	p	file:	signature:(afffile_T *affile, char_u *afflist, char_u *store_afflist)
get_copyID	vim/vim/src/eval.c	/^get_copyID(void)$/;"	f	signature:(void)
get_cpo_flags	vim/vim/src/regexp.c	/^get_cpo_flags(void)$/;"	f	file:	signature:(void)
get_cpo_flags	vim/vim/src/regexp.c	/^static void get_cpo_flags(void);$/;"	p	file:	signature:(void)
get_cscope_name	vim/vim/src/if_cscope.c	/^get_cscope_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_cterm_attr_idx	vim/vim/src/syntax.c	/^get_cterm_attr_idx(int attr, int fg, int bg)$/;"	f	signature:(int attr, int fg, int bg)
get_curr_buffer	vim/vim/src/if_mzsch.c	/^get_curr_buffer(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_curr_buffer	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_curr_buffer(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_curr_win	vim/vim/src/if_mzsch.c	/^get_curr_win(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_curr_win	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_curr_win(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_current_funccal_dict	vim/vim/src/userfunc.c	/^get_current_funccal_dict(hashtab_T *ht)$/;"	f	signature:(hashtab_T *ht)
get_cursor	vim/vim/src/if_mzsch.c	/^get_cursor(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_cursor	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_cursor(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_cursor_rel_lnum	vim/vim/src/misc2.c	/^get_cursor_rel_lnum($/;"	f	signature:( win_T *wp, linenr_T lnum)
get_deleted_augroup	vim/vim/src/fileio.c	/^get_deleted_augroup(void)$/;"	f	file:	signature:(void)
get_dialog_font_metrics	vim/vim/src/gui_w32.c	/^get_dialog_font_metrics(void)$/;"	f	file:	signature:(void)
get_dialog_font_metrics	vim/vim/src/gui_w32.c	/^static void get_dialog_font_metrics(void);$/;"	p	file:	signature:(void)
get_dict_number	vim/vim/src/dict.c	/^get_dict_number(dict_T *d, char_u *key)$/;"	f	signature:(dict_T *d, char_u *key)
get_dict_string	vim/vim/src/dict.c	/^get_dict_string(dict_T *d, char_u *key, int save)$/;"	f	signature:(dict_T *d, char_u *key, int save)
get_dict_tv	vim/vim/src/dict.c	/^get_dict_tv(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_digraph	vim/vim/src/digraph.c	/^get_digraph($/;"	f	signature:( int cmdline)
get_dll_import_func	vim/vim/src/os_win32.c	/^get_dll_import_func(HINSTANCE hInst, const char *funcname)$/;"	f	signature:(HINSTANCE hInst, const char *funcname)
get_emsg_lnum	vim/vim/src/message.c	/^get_emsg_lnum(void)$/;"	f	file:	signature:(void)
get_emsg_lnum	vim/vim/src/message.c	/^static char_u *get_emsg_lnum(void);$/;"	p	file:	signature:(void)
get_emsg_source	vim/vim/src/message.c	/^get_emsg_source(void)$/;"	f	file:	signature:(void)
get_emsg_source	vim/vim/src/message.c	/^static char_u *get_emsg_source(void);$/;"	p	file:	signature:(void)
get_encoding_default	vim/vim/src/option.c	/^get_encoding_default(void)$/;"	f	signature:(void)
get_end_emsg	vim/vim/src/ex_eval.c	/^get_end_emsg(struct condstack *cstack)$/;"	f	file:	signature:(struct condstack *cstack)
get_end_emsg	vim/vim/src/ex_eval.c	/^static char_u	*get_end_emsg(struct condstack *cstack);$/;"	p	file:	signature:(struct condstack *cstack)
get_env_len	vim/vim/src/eval.c	/^get_env_len(char_u **arg)$/;"	f	file:	signature:(char_u **arg)
get_env_len	vim/vim/src/eval.c	/^static int get_env_len(char_u **arg);$/;"	p	file:	signature:(char_u **arg)
get_env_name	vim/vim/src/misc1.c	/^get_env_name($/;"	f	signature:( expand_T *xp UNUSED, int idx)
get_env_tv	vim/vim/src/eval.c	/^get_env_tv(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_env_tv	vim/vim/src/eval.c	/^static int get_env_tv(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_equalprg	vim/vim/src/option.c	/^get_equalprg(void)$/;"	f	signature:(void)
get_equi_class	vim/vim/src/regexp.c	/^get_equi_class(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
get_equi_class	vim/vim/src/regexp.c	/^static int	get_equi_class(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
get_errorlist	vim/vim/src/quickfix.c	/^get_errorlist(win_T *wp, int qf_idx, list_T *list)$/;"	f	signature:(win_T *wp, int qf_idx, list_T *list)
get_errorlist_properties	vim/vim/src/quickfix.c	/^get_errorlist_properties(win_T *wp, dict_T *what, dict_T *retdict)$/;"	f	signature:(win_T *wp, dict_T *what, dict_T *retdict)
get_event_name	vim/vim/src/fileio.c	/^get_event_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_exception_string	vim/vim/src/ex_eval.c	/^get_exception_string($/;"	f	signature:( void *value, except_type_T type, char_u *cmdname, int *should_free)
get_exceptions	vim/vim/src/if_python.c	/^get_exceptions(void)$/;"	f	file:	signature:(void)
get_exe_name	vim/vim/src/os_win32.c	/^get_exe_name(void)$/;"	f	file:	signature:(void)
get_expanded_name	vim/vim/src/userfunc.c	/^get_expanded_name(char_u *name, int check)$/;"	f	signature:(char_u *name, int check)
get_expr_indent	vim/vim/src/misc1.c	/^get_expr_indent(void)$/;"	f	signature:(void)
get_expr_line	vim/vim/src/ops.c	/^get_expr_line(void)$/;"	f	signature:(void)
get_expr_line_src	vim/vim/src/ops.c	/^get_expr_line_src(void)$/;"	f	signature:(void)
get_expr_name	vim/vim/src/evalfunc.c	/^get_expr_name(expand_T *xp, int idx)$/;"	f	signature:(expand_T *xp, int idx)
get_expr_register	vim/vim/src/ops.c	/^get_expr_register(void)$/;"	f	signature:(void)
get_extra_op_char	vim/vim/src/ops.c	/^get_extra_op_char(int optype)$/;"	f	signature:(int optype)
get_fib	vim/vim/src/os_amiga.c	/^get_fib(char_u *fname)$/;"	f	file:	signature:(char_u *fname)
get_fib	vim/vim/src/os_amiga.c	/^static struct FileInfoBlock *get_fib(char_u *);$/;"	p	file:	signature:(char_u *)
get_file_in_dir	vim/vim/src/memline.c	/^get_file_in_dir($/;"	f	signature:( char_u *fname, char_u *dname)
get_fileformat	vim/vim/src/misc2.c	/^get_fileformat(buf_T *buf)$/;"	f	signature:(buf_T *buf)
get_fileformat_force	vim/vim/src/misc2.c	/^get_fileformat_force($/;"	f	signature:( buf_T *buf, exarg_T *eap)
get_find_dialog_text	vim/vim/src/gui.c	/^get_find_dialog_text($/;"	f	signature:( char_u *arg, int *wwordp, int *mcasep)
get_fio_flags	vim/vim/src/fileio.c	/^get_fio_flags(char_u *ptr)$/;"	f	file:	signature:(char_u *ptr)
get_fio_flags	vim/vim/src/fileio.c	/^static int get_fio_flags(char_u *ptr);$/;"	p	file:	signature:(char_u *ptr)
get_firstwin	vim/vim/src/if_py_both.h	/^get_firstwin(TabPageObject *tabObject)$/;"	f	signature:(TabPageObject *tabObject)
get_flags	vim/vim/src/ex_docmd.c	/^get_flags(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
get_flags	vim/vim/src/ex_docmd.c	/^static void	get_flags(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
get_float_arg	vim/vim/src/evalfunc.c	/^get_float_arg(typval_T *argvars, float_T *f)$/;"	f	file:	signature:(typval_T *argvars, float_T *f)
get_float_arg	vim/vim/src/evalfunc.c	/^static int get_float_arg(typval_T *argvars, float_T *f);$/;"	p	file:	signature:(typval_T *argvars, float_T *f)
get_foldtext	vim/vim/src/fold.c	/^get_foldtext($/;"	f	signature:( win_T *wp, linenr_T lnum, linenr_T lnume, foldinfo_T *foldinfo, char_u *buf)
get_font_handle	vim/vim/src/gui_w32.c	/^get_font_handle(LOGFONT *lf)$/;"	f	file:	signature:(LOGFONT *lf)
get_fpos_of_mouse	vim/vim/src/ui.c	/^get_fpos_of_mouse(pos_T *mpos)$/;"	f	signature:(pos_T *mpos)
get_func_line	vim/vim/src/userfunc.c	/^get_func_line($/;"	f	signature:( int c UNUSED, void *cookie, int indent UNUSED)
get_func_tv	vim/vim/src/userfunc.c	/^get_func_tv($/;"	f	signature:( char_u *name, int len, typval_T *rettv, char_u **arg, linenr_T firstline, linenr_T lastline, int *doesrange, int evaluate, partial_T *partial, dict_T *selfdict)
get_funccal	vim/vim/src/userfunc.c	/^get_funccal(void)$/;"	f	file:	signature:(void)
get_funccal_args_ht	vim/vim/src/userfunc.c	/^get_funccal_args_ht()$/;"	f
get_funccal_args_var	vim/vim/src/userfunc.c	/^get_funccal_args_var()$/;"	f
get_funccal_local_ht	vim/vim/src/userfunc.c	/^get_funccal_local_ht()$/;"	f
get_funccal_local_var	vim/vim/src/userfunc.c	/^get_funccal_local_var()$/;"	f
get_function_args	vim/vim/src/userfunc.c	/^get_function_args($/;"	f	file:	signature:( char_u **argp, char_u endchar, garray_T *newargs, int *varargs, int skip)
get_function_name	vim/vim/src/evalfunc.c	/^get_function_name(expand_T *xp, int idx)$/;"	f	signature:(expand_T *xp, int idx)
get_group_name	vim/vim/src/syntax.c	/^get_group_name($/;"	f	file:	signature:( char_u *arg, char_u **name_end)
get_group_name	vim/vim/src/syntax.c	/^static char_u *get_group_name(char_u *arg, char_u **name_end);$/;"	p	file:	signature:(char_u *arg, char_u **name_end)
get_gui_attr_idx	vim/vim/src/syntax.c	/^get_gui_attr_idx(int attr, guicolor_T fg, guicolor_T bg)$/;"	f	signature:(int attr, guicolor_T fg, guicolor_T bg)
get_highlight_default	vim/vim/src/option.c	/^get_highlight_default(void)$/;"	f	signature:(void)
get_highlight_name	vim/vim/src/syntax.c	/^get_highlight_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_highlight_name_ext	vim/vim/src/syntax.c	/^get_highlight_name_ext(expand_T *xp UNUSED, int idx, int skip_cleared)$/;"	f	signature:(expand_T *xp UNUSED, int idx, int skip_cleared)
get_history_arg	vim/vim/src/ex_getln.c	/^get_history_arg(expand_T *xp UNUSED, int idx)$/;"	f	file:	signature:(expand_T *xp UNUSED, int idx)
get_history_arg	vim/vim/src/ex_getln.c	/^static char_u	*get_history_arg(expand_T *xp, int idx);$/;"	p	file:	signature:(expand_T *xp, int idx)
get_history_entry	vim/vim/src/ex_getln.c	/^get_history_entry(int histype, int idx)$/;"	f	signature:(int histype, int idx)
get_history_idx	vim/vim/src/ex_getln.c	/^get_history_idx(int histype)$/;"	f	signature:(int histype)
get_histtype	vim/vim/src/ex_getln.c	/^get_histtype(char_u *name)$/;"	f	signature:(char_u *name)
get_hostos	build_all.sh	/^function get_hostos()$/;"	f
get_id_len	vim/vim/src/eval.c	/^get_id_len(char_u **arg)$/;"	f	signature:(char_u **arg)
get_id_list	vim/vim/src/syntax.c	/^get_id_list($/;"	f	file:	signature:( char_u **arg, int keylen, short **list, int skip)
get_id_list	vim/vim/src/syntax.c	/^static int get_id_list(char_u **arg, int keylen, short **list, int skip);$/;"	p	file:	signature:(char_u **arg, int keylen, short **list, int skip)
get_imported_func_info	vim/vim/src/os_win32.c	/^get_imported_func_info(HINSTANCE hInst, const char *funcname, int info)$/;"	f	file:	signature:(HINSTANCE hInst, const char *funcname, int info)
get_indent	vim/vim/src/misc1.c	/^get_indent(void)$/;"	f	signature:(void)
get_indent_buf	vim/vim/src/misc1.c	/^get_indent_buf(buf_T *buf, linenr_T lnum)$/;"	f	signature:(buf_T *buf, linenr_T lnum)
get_indent_lnum	vim/vim/src/misc1.c	/^get_indent_lnum(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
get_indent_nolabel	vim/vim/src/misc1.c	/^get_indent_nolabel (linenr_T lnum)	\/* XXX *\/$/;"	f	file:	signature:(linenr_T lnum)
get_indent_nolabel	vim/vim/src/misc1.c	/^static int	get_indent_nolabel(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
get_indent_str	vim/vim/src/misc1.c	/^get_indent_str($/;"	f	signature:( char_u *ptr, int ts, int list)
get_input_buf	vim/vim/src/ui.c	/^get_input_buf(void)$/;"	f	signature:(void)
get_inserted	vim/vim/src/getchar.c	/^get_inserted(void)$/;"	f	signature:(void)
get_isolated_shell_name	vim/vim/src/misc1.c	/^get_isolated_shell_name(void)$/;"	f	signature:(void)
get_item_dimensions	vim/vim/src/gui_gtk_x11.c	/^get_item_dimensions(GtkWidget *widget, GtkOrientation orientation)$/;"	f	file:	signature:(GtkWidget *widget, GtkOrientation orientation)
get_job_arg	vim/vim/src/evalfunc.c	/^get_job_arg(typval_T *tv)$/;"	f	file:	signature:(typval_T *tv)
get_job_options	vim/vim/src/channel.c	/^get_job_options(typval_T *tv, jobopt_T *opt, int supported)$/;"	f	signature:(typval_T *tv, jobopt_T *opt, int supported)
get_key_name	vim/vim/src/misc2.c	/^get_key_name(int i)$/;"	f	signature:(int i)
get_keymap_str	vim/vim/src/screen.c	/^get_keymap_str($/;"	f	signature:( win_T *wp, char_u *fmt, char_u *buf, int len)
get_keystroke	vim/vim/src/misc1.c	/^get_keystroke(void)$/;"	f	signature:(void)
get_lambda_tv	vim/vim/src/userfunc.c	/^get_lambda_tv(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_lang_arg	vim/vim/src/ex_cmds2.c	/^get_lang_arg(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_last_insert	vim/vim/src/edit.c	/^get_last_insert(void)$/;"	f	signature:(void)
get_last_insert_save	vim/vim/src/edit.c	/^get_last_insert_save(void)$/;"	f	signature:(void)
get_last_leader_offset	vim/vim/src/misc1.c	/^get_last_leader_offset(char_u *line, char_u **flags)$/;"	f	signature:(char_u *line, char_u **flags)
get_leader_len	vim/vim/src/misc1.c	/^get_leader_len($/;"	f	signature:( char_u *line, char_u **flags, int backward, int include_space)
get_lisp_indent	vim/vim/src/misc1.c	/^get_lisp_indent(void)$/;"	f	signature:(void)
get_list_line	vim/vim/src/evalfunc.c	/^get_list_line($/;"	f	file:	signature:( int c UNUSED, void *cookie, int indent UNUSED)
get_list_range	vim/vim/src/ex_getln.c	/^get_list_range(char_u **str, int *num1, int *num2)$/;"	f	signature:(char_u **str, int *num1, int *num2)
get_list_tv	vim/vim/src/list.c	/^get_list_tv(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_lit_string_tv	vim/vim/src/eval.c	/^get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_lit_string_tv	vim/vim/src/eval.c	/^static int get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_literal	vim/vim/src/edit.c	/^get_literal(void)$/;"	f	signature:(void)
get_locale_val	vim/vim/src/ex_cmds2.c	/^get_locale_val(int what)$/;"	f	file:	signature:(int what)
get_locale_val	vim/vim/src/ex_cmds2.c	/^static char_u *get_locale_val(int what);$/;"	p	file:	signature:(int what)
get_locales	vim/vim/src/ex_cmds2.c	/^get_locales(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_logfont	vim/vim/src/os_mswin.c	/^get_logfont($/;"	f	signature:( LOGFONT *lf, char_u *name, HDC printer_dc, int verbose)
get_long_from_buf	vim/vim/src/term.c	/^get_long_from_buf(char_u *buf, long_u *val)$/;"	f	file:	signature:(char_u *buf, long_u *val)
get_long_from_buf	vim/vim/src/term.c	/^static int get_long_from_buf(char_u *buf, long_u *val);$/;"	p	file:	signature:(char_u *buf, long_u *val)
get_loop_line	vim/vim/src/ex_docmd.c	/^get_loop_line(int c, void *cookie, int indent)$/;"	f	file:	signature:(int c, void *cookie, int indent)
get_loop_line	vim/vim/src/ex_docmd.c	/^static char_u	*get_loop_line(int c, void *cookie, int indent);$/;"	p	file:	signature:(int c, void *cookie, int indent)
get_lval	vim/vim/src/eval.c	/^get_lval($/;"	f	signature:( char_u *name, typval_T *rettv, lval_T *lp, int unlet, int skip, int flags, int fne_flags)
get_mac_fio_flags	vim/vim/src/fileio.c	/^get_mac_fio_flags(char_u *ptr)$/;"	f	file:	signature:(char_u *ptr)
get_mac_fio_flags	vim/vim/src/fileio.c	/^static int get_mac_fio_flags(char_u *ptr);$/;"	p	file:	signature:(char_u *ptr)
get_map_mode	vim/vim/src/getchar.c	/^get_map_mode(char_u **cmdp, int forceit)$/;"	f	signature:(char_u **cmdp, int forceit)
get_maparg	vim/vim/src/evalfunc.c	/^get_maparg(typval_T *argvars, typval_T *rettv, int exact)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int exact)
get_maparg	vim/vim/src/evalfunc.c	/^static void get_maparg(typval_T *argvars, typval_T *rettv, int exact);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv, int exact)
get_match	vim/vim/src/window.c	/^get_match(win_T *wp, int id)$/;"	f	signature:(win_T *wp, int id)
get_maxbacktrace_level	vim/vim/src/ex_cmds2.c	/^get_maxbacktrace_level(void)$/;"	f	file:	signature:(void)
get_maxbacktrace_level	vim/vim/src/ex_cmds2.c	/^static int get_maxbacktrace_level(void);$/;"	p	file:	signature:(void)
get_mef_name	vim/vim/src/quickfix.c	/^get_mef_name(void)$/;"	f	file:	signature:(void)
get_mef_name	vim/vim/src/quickfix.c	/^static char_u	*get_mef_name(void);$/;"	p	file:	signature:(void)
get_menu_cmd_modes	vim/vim/src/menu.c	/^get_menu_cmd_modes($/;"	f	file:	signature:( char_u *cmd, int forceit, int *noremap, int *unmenu)
get_menu_cmd_modes	vim/vim/src/menu.c	/^static int get_menu_cmd_modes(char_u *, int, int *, int *);$/;"	p	file:	signature:(char_u *, int, int *, int *)
get_menu_index	vim/vim/src/menu.c	/^get_menu_index(vimmenu_T *menu, int state)$/;"	f	signature:(vimmenu_T *menu, int state)
get_menu_mode	vim/vim/src/menu.c	/^get_menu_mode(void)$/;"	f	file:	signature:(void)
get_menu_mode	vim/vim/src/menu.c	/^static int get_menu_mode(void);$/;"	p	file:	signature:(void)
get_menu_name	vim/vim/src/menu.c	/^get_menu_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_menu_names	vim/vim/src/menu.c	/^get_menu_names(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_menu_position	vim/vim/src/gui_gtk.c	/^get_menu_position(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
get_menu_tool_height	vim/vim/src/gui_gtk_x11.c	/^get_menu_tool_height(void)$/;"	f	file:	signature:(void)
get_menu_tool_width	vim/vim/src/gui_gtk_x11.c	/^get_menu_tool_width(void)$/;"	f	file:	signature:(void)
get_mess_env	vim/vim/src/ex_cmds2.c	/^get_mess_env(void)$/;"	f	file:	signature:(void)
get_mess_env	vim/vim/src/ex_cmds2.c	/^static char_u *get_mess_env(void);$/;"	p	file:	signature:(void)
get_mess_lang	vim/vim/src/ex_cmds2.c	/^get_mess_lang(void)$/;"	f	signature:(void)
get_messages_arg	vim/vim/src/ex_docmd.c	/^get_messages_arg(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_mouse_button	vim/vim/src/misc2.c	/^get_mouse_button(int code, int *is_click, int *is_drag)$/;"	f	signature:(int code, int *is_click, int *is_drag)
get_mouse_class	vim/vim/src/normal.c	/^get_mouse_class(char_u *p)$/;"	f	file:	signature:(char_u *p)
get_mouse_class	vim/vim/src/normal.c	/^static int	get_mouse_class(char_u *p);$/;"	p	file:	signature:(char_u *p)
get_name_len	vim/vim/src/eval.c	/^get_name_len($/;"	f	signature:( char_u **arg, char_u **alias, int evaluate, int verbose)
get_network_status	build_all.sh	/^function get_network_status()$/;"	f
get_next_buffer	vim/vim/src/if_mzsch.c	/^get_next_buffer(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_next_buffer	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_next_buffer(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_nolist_virtcol	vim/vim/src/edit.c	/^get_nolist_virtcol(void)$/;"	f	file:	signature:(void)
get_nolist_virtcol	vim/vim/src/edit.c	/^static colnr_T get_nolist_virtcol(void);$/;"	p	file:	signature:(void)
get_number	vim/vim/src/misc1.c	/^get_number($/;"	f	signature:( int colon, int *mouse_used)
get_number_arg	vim/vim/src/main.c	/^get_number_arg($/;"	f	file:	signature:( char_u *p, int *idx, int def)
get_number_arg	vim/vim/src/main.c	/^static int get_number_arg(char_u *p, int *idx, int def);$/;"	p	file:	signature:(char_u *p, int *idx, int def)
get_number_indent	vim/vim/src/misc1.c	/^get_number_indent(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
get_off_or_lnum	vim/vim/src/netbeans.c	/^get_off_or_lnum(buf_T *buf, char_u **argp)$/;"	f	file:	signature:(buf_T *buf, char_u **argp)
get_off_or_lnum	vim/vim/src/netbeans.c	/^static pos_T *get_off_or_lnum(buf_T *buf, char_u **argp);$/;"	p	file:	signature:(buf_T *buf, char_u **argp)
get_one_sourceline	vim/vim/src/ex_cmds2.c	/^get_one_sourceline(struct source_cookie *sp)$/;"	f	file:	signature:(struct source_cookie *sp)
get_one_sourceline	vim/vim/src/ex_cmds2.c	/^static char_u *get_one_sourceline(struct source_cookie *sp);$/;"	p	file:	signature:(struct source_cookie *sp)
get_op_char	vim/vim/src/ops.c	/^get_op_char(int optype)$/;"	f	signature:(int optype)
get_op_type	vim/vim/src/ops.c	/^get_op_type(int char1, int char2)$/;"	f	signature:(int char1, int char2)
get_op_vcol	vim/vim/src/normal.c	/^get_op_vcol($/;"	f	file:	signature:( oparg_T *oap, colnr_T redo_VIsual_vcol, int initial)
get_op_vcol	vim/vim/src/normal.c	/^static void	get_op_vcol(oparg_T *oap, colnr_T col, int initial);$/;"	p	file:	signature:(oparg_T *oap, colnr_T col, int initial)
get_option	vim/vim/src/if_mzsch.c	/^get_option(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_option	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_option(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_option_tv	vim/vim/src/eval.c	/^get_option_tv($/;"	f	signature:( char_u **arg, typval_T *rettv, int evaluate)
get_option_value	vim/vim/src/option.c	/^get_option_value($/;"	f	signature:( char_u *name, long *numval, char_u **stringval, int opt_flags)
get_option_value_strict	vim/vim/src/option.c	/^get_option_value_strict($/;"	f	signature:( char_u *name, long *numval, char_u **stringval, int opt_type, void *from)
get_part	vim/vim/src/gui_xmdlg.c	/^get_part(char *in, int pos, char *out)$/;"	f	file:	signature:(char *in, int pos, char *out)
get_past_head	vim/vim/src/misc1.c	/^get_past_head(char_u *path)$/;"	f	signature:(char_u *path)
get_path_cutoff	vim/vim/src/misc1.c	/^get_path_cutoff(char_u *fname, garray_T *gap)$/;"	f	file:	signature:(char_u *fname, garray_T *gap)
get_path_cutoff	vim/vim/src/misc1.c	/^static char_u *get_path_cutoff(char_u *fname, garray_T *gap);$/;"	p	file:	signature:(char_u *fname, garray_T *gap)
get_pfxlist	vim/vim/src/spellfile.c	/^get_pfxlist($/;"	f	file:	signature:( afffile_T *affile, char_u *afflist, char_u *store_afflist)
get_pfxlist	vim/vim/src/spellfile.c	/^static int get_pfxlist(afffile_T *affile, char_u *afflist, char_u *store_afflist);$/;"	p	file:	signature:(afffile_T *affile, char_u *afflist, char_u *store_afflist)
get_popup_entry	vim/vim/src/gui_athena.c	/^get_popup_entry(Widget w)$/;"	f	file:	signature:(Widget w)
get_popup_entry	vim/vim/src/gui_athena.c	/^static Widget	get_popup_entry(Widget w);$/;"	p	file:	signature:(Widget w)
get_prev_buffer	vim/vim/src/if_mzsch.c	/^get_prev_buffer(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_prev_buffer	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_prev_buffer(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_profile_name	vim/vim/src/ex_cmds2.c	/^get_profile_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_pseudo_mouse_code	vim/vim/src/misc2.c	/^get_pseudo_mouse_code($/;"	f	signature:( int button, int is_click, int is_drag)
get_py3_exceptions	vim/vim/src/if_python3.c	/^get_py3_exceptions(void)$/;"	f	file:	signature:(void)
get_py3_exceptions	vim/vim/src/if_python3.c	/^static void get_py3_exceptions(void);$/;"	p	file:	signature:(void)
get_python_version	build_all.sh	/^function get_python_version()$/;"	f
get_qf_loc_list	vim/vim/src/evalfunc.c	/^get_qf_loc_list(int is_qf, win_T *wp, typval_T *what_arg, typval_T *rettv)$/;"	f	file:	signature:(int is_qf, win_T *wp, typval_T *what_arg, typval_T *rettv)
get_range_end	vim/vim/src/if_mzsch.c	/^get_range_end(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_range_end	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_range_end(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_range_start	vim/vim/src/if_mzsch.c	/^get_range_start(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_range_start	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_range_start(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_real_state	vim/vim/src/misc2.c	/^get_real_state(void)$/;"	f	signature:(void)
get_recorded	vim/vim/src/getchar.c	/^get_recorded(void)$/;"	f	signature:(void)
get_reg_contents	vim/vim/src/ops.c	/^get_reg_contents(int regname, int flags)$/;"	f	signature:(int regname, int flags)
get_reg_type	vim/vim/src/ops.c	/^get_reg_type(int regname, long *reglen)$/;"	f	signature:(int regname, long *reglen)
get_register	vim/vim/src/ops.c	/^get_register($/;"	f	signature:( int name, int copy)
get_register_name	vim/vim/src/ops.c	/^get_register_name(int num)$/;"	f	signature:(int num)
get_rel_pos	vim/vim/src/buffer.c	/^get_rel_pos($/;"	f	signature:( win_T *wp, char_u *buf, int buflen)
get_return_cmd	vim/vim/src/userfunc.c	/^get_return_cmd(void *rettv)$/;"	f	signature:(void *rettv)
get_scriptname	vim/vim/src/ex_cmds2.c	/^get_scriptname(scid_T id)$/;"	f	signature:(scid_T id)
get_scroll_flags	vim/vim/src/gui_w32.c	/^get_scroll_flags(void)$/;"	f	file:	signature:(void)
get_scroll_overlap	vim/vim/src/move.c	/^get_scroll_overlap(lineoff_T *lp, int dir)$/;"	f	file:	signature:(lineoff_T *lp, int dir)
get_scroll_overlap	vim/vim/src/move.c	/^static void get_scroll_overlap(lineoff_T *lp, int dir);$/;"	p	file:	signature:(lineoff_T *lp, int dir)
get_search_arg	vim/vim/src/evalfunc.c	/^get_search_arg(typval_T *varp, int *flagsp)$/;"	f	file:	signature:(typval_T *varp, int *flagsp)
get_search_arg	vim/vim/src/evalfunc.c	/^static int get_search_arg(typval_T *varp, int *flagsp);$/;"	p	file:	signature:(typval_T *varp, int *flagsp)
get_search_pat	vim/vim/src/search.c	/^get_search_pat(void)$/;"	f	signature:(void)
get_selection	vim/vim/src/workshop.c	/^get_selection($/;"	f	file:	signature:( buf_T *buf)
get_selection	vim/vim/src/workshop.c	/^static char	*get_selection(buf_T *);$/;"	p	file:	signature:(buf_T *)
get_shape_idx	vim/vim/src/misc2.c	/^get_shape_idx(int mouse)$/;"	f	signature:(int mouse)
get_shell_folder_path	vim/vim/src/dosinst.h	/^get_shell_folder_path($/;"	f	signature:( char *shell_folder_path, const char *shell_folder_name)
get_short_pathname	vim/vim/src/eval.c	/^get_short_pathname(char_u **fnamep, char_u **bufp, int *fnamelen)$/;"	f	file:	signature:(char_u **fnamep, char_u **bufp, int *fnamelen)
get_short_pathname	vim/vim/src/eval.c	/^static int get_short_pathname(char_u **fnamep, char_u **bufp, int *fnamelen);$/;"	p	file:	signature:(char_u **fnamep, char_u **bufp, int *fnamelen)
get_sign_name	vim/vim/src/ex_cmds.c	/^get_sign_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_some_time	vim/vim/src/sha256.c	/^get_some_time(void)$/;"	f	file:	signature:(void)
get_some_time	vim/vim/src/sha256.c	/^static unsigned int get_some_time(void);$/;"	p	file:	signature:(void)
get_spec_reg	vim/vim/src/ops.c	/^get_spec_reg($/;"	f	signature:( int regname, char_u **argp, int *allocated, int errmsg)
get_special_key_code	vim/vim/src/misc2.c	/^get_special_key_code(char_u *name)$/;"	f	signature:(char_u *name)
get_special_key_name	vim/vim/src/misc2.c	/^get_special_key_name(int c, int modifiers)$/;"	f	signature:(int c, int modifiers)
get_spellword	vim/vim/src/eval.c	/^get_spellword(list_T *list, char_u **pp)$/;"	f	signature:(list_T *list, char_u **pp)
get_stack_limit	vim/vim/src/os_unix.c	/^get_stack_limit(void)$/;"	f	file:	signature:(void)
get_string_tv	vim/vim/src/eval.c	/^get_string_tv(char_u **arg, typval_T *rettv, int evaluate)$/;"	f	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_string_tv	vim/vim/src/eval.c	/^static int get_string_tv(char_u **arg, typval_T *rettv, int evaluate);$/;"	p	file:	signature:(char_u **arg, typval_T *rettv, int evaluate)
get_sts_value	vim/vim/src/option.c	/^get_sts_value(void)$/;"	f	signature:(void)
get_stty	vim/vim/src/os_unix.c	/^get_stty(void)$/;"	f	signature:(void)
get_styled_font_variants	vim/vim/src/gui_gtk_x11.c	/^get_styled_font_variants(void)$/;"	f	file:	signature:(void)
get_sw_value	vim/vim/src/option.c	/^get_sw_value(buf_T *buf)$/;"	f	signature:(buf_T *buf)
get_syn_options	vim/vim/src/syntax.c	/^get_syn_options($/;"	f	file:	signature:( char_u *arg, syn_opt_arg_T *opt, int *conceal_char UNUSED, int skip)
get_syn_options	vim/vim/src/syntax.c	/^static char_u *get_syn_options(char_u *arg, syn_opt_arg_T *opt, int *conceal_char, int skip);$/;"	p	file:	signature:(char_u *arg, syn_opt_arg_T *opt, int *conceal_char, int skip)
get_syn_pattern	vim/vim/src/syntax.c	/^get_syn_pattern(char_u *arg, synpat_T *ci)$/;"	f	file:	signature:(char_u *arg, synpat_T *ci)
get_syn_pattern	vim/vim/src/syntax.c	/^static char_u *get_syn_pattern(char_u *arg, synpat_T *ci);$/;"	p	file:	signature:(char_u *arg, synpat_T *ci)
get_syntax_attr	vim/vim/src/syntax.c	/^get_syntax_attr($/;"	f	signature:( colnr_T col, int *can_spell, int keep_state)
get_syntax_info	vim/vim/src/syntax.c	/^get_syntax_info(int *seqnrp)$/;"	f	signature:(int *seqnrp)
get_syntax_name	vim/vim/src/syntax.c	/^get_syntax_name(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_syntime_arg	vim/vim/src/syntax.c	/^get_syntime_arg(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_tab_number	vim/vim/src/window.c	/^get_tab_number(tabpage_T *tp UNUSED)$/;"	f	signature:(tabpage_T *tp UNUSED)
get_tabline_label	vim/vim/src/gui.c	/^get_tabline_label($/;"	f	signature:( tabpage_T *tp, int tooltip)
get_tabpage_arg	vim/vim/src/ex_docmd.c	/^get_tabpage_arg(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
get_tabpage_info	vim/vim/src/evalfunc.c	/^get_tabpage_info(tabpage_T *tp, int tp_idx)$/;"	f	file:	signature:(tabpage_T *tp, int tp_idx)
get_tagfname	vim/vim/src/tag.c	/^get_tagfname($/;"	f	signature:( tagname_T *tnp, int first, char_u *buf)
get_tags	vim/vim/src/tag.c	/^get_tags(list_T *list, char_u *pat, char_u *buf_fname)$/;"	f	signature:(list_T *list, char_u *pat, char_u *buf_fname)
get_term_code	vim/vim/src/option.c	/^get_term_code(char_u *tname)$/;"	f	signature:(char_u *tname)
get_termcode	vim/vim/src/term.c	/^get_termcode(int i)$/;"	f	signature:(int i)
get_text_locked_msg	vim/vim/src/ex_getln.c	/^get_text_locked_msg(void)$/;"	f	signature:(void)
get_text_writer	vim/vim/src/testdir/test_makeencoding.py	/^    def get_text_writer(fo, **kwargs):$/;"	f	function:set_output_encoding	access:public
get_tgc_attr_idx	vim/vim/src/syntax.c	/^get_tgc_attr_idx(int attr, guicolor_T fg, guicolor_T bg)$/;"	f	signature:(int attr, guicolor_T fg, guicolor_T bg)
get_toolbar_bitmap	vim/vim/src/gui_w32.c	/^get_toolbar_bitmap(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
get_toolbar_bitmap	vim/vim/src/gui_w32.c	/^static int get_toolbar_bitmap(vimmenu_T *menu);$/;"	p	file:	signature:(vimmenu_T *menu)
get_toolbar_pixmap	vim/vim/src/gui_athena.c	/^get_toolbar_pixmap(vimmenu_T *menu, Pixmap *sen)$/;"	f	file:	signature:(vimmenu_T *menu, Pixmap *sen)
get_toolbar_pixmap	vim/vim/src/gui_athena.c	/^static void get_toolbar_pixmap(vimmenu_T *menu, Pixmap *sen);$/;"	p	file:	signature:(vimmenu_T *menu, Pixmap *sen)
get_toolbar_pixmap	vim/vim/src/gui_motif.c	/^get_toolbar_pixmap(vimmenu_T *menu, char **fname)$/;"	f	file:	signature:(vimmenu_T *menu, char **fname)
get_toolbar_pixmap	vim/vim/src/gui_motif.c	/^static char **get_toolbar_pixmap(vimmenu_T *menu, char **fname);$/;"	p	file:	signature:(vimmenu_T *menu, char **fname)
get_trans_bufname	vim/vim/src/screen.c	/^get_trans_bufname(buf_T *buf)$/;"	f	signature:(buf_T *buf)
get_tty	vim/vim/src/os_vms.c	/^get_tty(void)$/;"	f	file:	signature:(void)
get_tty	vim/vim/src/os_vms.c	/^static TT_MODE	get_tty(void);$/;"	p	file:	signature:(void)
get_tv_float	vim/vim/src/eval.c	/^get_tv_float(typval_T *varp)$/;"	f	signature:(typval_T *varp)
get_tv_lnum	vim/vim/src/evalfunc.c	/^get_tv_lnum(typval_T *argvars)$/;"	f	file:	signature:(typval_T *argvars)
get_tv_lnum_buf	vim/vim/src/evalfunc.c	/^get_tv_lnum_buf(typval_T *argvars, buf_T *buf)$/;"	f	file:	signature:(typval_T *argvars, buf_T *buf)
get_tv_number	vim/vim/src/eval.c	/^get_tv_number(typval_T *varp)$/;"	f	signature:(typval_T *varp)
get_tv_number_chk	vim/vim/src/eval.c	/^get_tv_number_chk(typval_T *varp, int *denote)$/;"	f	signature:(typval_T *varp, int *denote)
get_tv_string	vim/vim/src/eval.c	/^get_tv_string(typval_T *varp)$/;"	f	signature:(typval_T *varp)
get_tv_string_buf	vim/vim/src/eval.c	/^get_tv_string_buf(typval_T *varp, char_u *buf)$/;"	f	signature:(typval_T *varp, char_u *buf)
get_tv_string_buf_chk	vim/vim/src/eval.c	/^get_tv_string_buf_chk(typval_T *varp, char_u *buf)$/;"	f	signature:(typval_T *varp, char_u *buf)
get_tv_string_chk	vim/vim/src/eval.c	/^get_tv_string_chk(typval_T *varp)$/;"	f	signature:(typval_T *varp)
get_undolevel	vim/vim/src/undo.c	/^get_undolevel(void)$/;"	f	file:	signature:(void)
get_undolevel	vim/vim/src/undo.c	/^static long get_undolevel(void);$/;"	p	file:	signature:(void)
get_user_cmd_addr_type	vim/vim/src/ex_docmd.c	/^get_user_cmd_addr_type(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_user_cmd_complete	vim/vim/src/ex_docmd.c	/^get_user_cmd_complete(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_user_cmd_flags	vim/vim/src/ex_docmd.c	/^get_user_cmd_flags(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_user_cmd_nargs	vim/vim/src/ex_docmd.c	/^get_user_cmd_nargs(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_user_command_name	vim/vim/src/ex_docmd.c	/^get_user_command_name(int idx)$/;"	f	file:	signature:(int idx)
get_user_command_name	vim/vim/src/ex_docmd.c	/^static char_u *get_user_command_name(int idx);$/;"	p	file:	signature:(int idx)
get_user_commands	vim/vim/src/ex_docmd.c	/^get_user_commands(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_user_func_name	vim/vim/src/userfunc.c	/^get_user_func_name(expand_T *xp, int idx)$/;"	f	signature:(expand_T *xp, int idx)
get_user_input	vim/vim/src/eval.c	/^get_user_input($/;"	f	signature:( typval_T *argvars, typval_T *rettv, int inputdialog, int secret)
get_user_name	vim/vim/src/misc2.c	/^get_user_name(char_u *buf, int len)$/;"	f	signature:(char_u *buf, int len)
get_user_var_name	vim/vim/src/eval.c	/^get_user_var_name(expand_T *xp, int idx)$/;"	f	signature:(expand_T *xp, int idx)
get_users	vim/vim/src/misc1.c	/^get_users(expand_T *xp UNUSED, int idx)$/;"	f	signature:(expand_T *xp UNUSED, int idx)
get_valid_buffer	vim/vim/src/if_mzsch.c	/^buf_T *get_valid_buffer(void *obj)$/;"	f	signature:(void *obj)
get_valid_window	vim/vim/src/if_mzsch.c	/^win_T *get_valid_window(void *obj)$/;"	f	signature:(void *obj)
get_var_special_name	vim/vim/src/eval.c	/^get_var_special_name(int nr)$/;"	f	file:	signature:(int nr)
get_var_tv	vim/vim/src/eval.c	/^get_var_tv($/;"	f	signature:( char_u *name, int len, typval_T *rettv, dictitem_T **dip, int verbose, int no_autoload)
get_var_value	vim/vim/src/eval.c	/^get_var_value(char_u *name)$/;"	f	signature:(char_u *name)
get_varp	vim/vim/src/option.c	/^get_varp(struct vimoption *p)$/;"	f	file:	signature:(struct vimoption *p)
get_varp	vim/vim/src/option.c	/^static char_u *get_varp(struct vimoption *);$/;"	p	file:	signature:(struct vimoption *)
get_varp_scope	vim/vim/src/option.c	/^get_varp_scope(struct vimoption *p, int opt_flags)$/;"	f	file:	signature:(struct vimoption *p, int opt_flags)
get_varp_scope	vim/vim/src/option.c	/^static char_u *get_varp_scope(struct vimoption *p, int opt_flags);$/;"	p	file:	signature:(struct vimoption *p, int opt_flags)
get_view_file	vim/vim/src/ex_docmd.c	/^get_view_file(int c)$/;"	f	file:	signature:(int c)
get_view_file	vim/vim/src/ex_docmd.c	/^static char_u	*get_view_file(int c);$/;"	p	file:	signature:(int c)
get_vim_curr_buffer	vim/vim/src/if_mzsch.c	/^get_vim_curr_buffer(void)$/;"	f	file:	signature:(void)
get_vim_curr_buffer	vim/vim/src/if_mzsch.c	/^static vim_mz_buffer *get_vim_curr_buffer(void);$/;"	p	file:	signature:(void)
get_vim_curr_window	vim/vim/src/if_mzsch.c	/^get_vim_curr_window(void)$/;"	f	file:	signature:(void)
get_vim_curr_window	vim/vim/src/if_mzsch.c	/^static vim_mz_window *get_vim_curr_window(void);$/;"	p	file:	signature:(void)
get_vim_env	vim/vim/src/dosinst.c	/^get_vim_env(void)$/;"	f	file:	signature:(void)
get_vim_var_list	vim/vim/src/eval.c	/^get_vim_var_list(int idx)$/;"	f	signature:(int idx)
get_vim_var_nr	vim/vim/src/eval.c	/^get_vim_var_nr(int idx)$/;"	f	signature:(int idx)
get_vim_var_str	vim/vim/src/eval.c	/^get_vim_var_str(int idx)$/;"	f	signature:(int idx)
get_viminfo_parameter	vim/vim/src/option.c	/^get_viminfo_parameter(int type)$/;"	f	signature:(int type)
get_visual_text	vim/vim/src/normal.c	/^get_visual_text($/;"	f	signature:( cmdarg_T *cap, char_u **pp, int *lenp)
get_win	vim/vim/src/if_ruby.c	/^static win_T *get_win(VALUE obj)$/;"	f	file:	signature:(VALUE obj)
get_win_fio_flags	vim/vim/src/fileio.c	/^get_win_fio_flags(char_u *ptr)$/;"	f	file:	signature:(char_u *ptr)
get_win_fio_flags	vim/vim/src/fileio.c	/^static int get_win_fio_flags(char_u *ptr);$/;"	p	file:	signature:(char_u *ptr)
get_win_info	vim/vim/src/evalfunc.c	/^get_win_info(win_T *wp, short tpnr, short winnr)$/;"	f	file:	signature:(win_T *wp, short tpnr, short winnr)
get_win_number	vim/vim/src/window.c	/^get_win_number(win_T *wp, win_T *first_win)$/;"	f	signature:(win_T *wp, win_T *first_win)
get_winbuf_options	vim/vim/src/option.c	/^get_winbuf_options(int bufopt)$/;"	f	signature:(int bufopt)
get_wincmd_addr_type	vim/vim/src/window.c	/^get_wincmd_addr_type(char_u *arg, exarg_T *eap)$/;"	f	signature:(char_u *arg, exarg_T *eap)
get_window	vim/vim/src/workshop.c	/^get_window($/;"	f	file:	signature:( buf_T *buf)
get_window	vim/vim/src/workshop.c	/^static win_T	*get_window(buf_T *);$/;"	p	file:	signature:(buf_T *)
get_window_arg	vim/vim/src/if_mzsch.c	/^get_window_arg(const char *fname, int argnum, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(const char *fname, int argnum, int argc, Scheme_Object **argv)
get_window_arg	vim/vim/src/if_mzsch.c	/^static vim_mz_window *get_window_arg(const char *fname, int argnum,$/;"	p	file:	signature:(const char *fname, int argnum, int argc, Scheme_Object **argv)
get_window_buffer	vim/vim/src/if_mzsch.c	/^get_window_buffer(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_window_buffer	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_buffer(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_window_by_num	vim/vim/src/if_mzsch.c	/^get_window_by_num(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_window_by_num	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_by_num(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_window_count	vim/vim/src/if_mzsch.c	/^get_window_count(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_window_count	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_count(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_window_height	vim/vim/src/if_mzsch.c	/^get_window_height(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_window_height	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_height(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_window_list	vim/vim/src/if_mzsch.c	/^get_window_list(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_window_list	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_list(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_window_num	vim/vim/src/if_mzsch.c	/^get_window_num(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
get_window_num	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_num(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_window_width	vim/vim/src/if_mzsch.c	/^get_window_width(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
get_window_width	vim/vim/src/if_mzsch.c	/^static Scheme_Object *get_window_width(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
get_winnr	vim/vim/src/evalfunc.c	/^get_winnr(tabpage_T *tp, typval_T *argvar)$/;"	f	file:	signature:(tabpage_T *tp, typval_T *argvar)
get_winnr	vim/vim/src/evalfunc.c	/^static int get_winnr(tabpage_T *tp, typval_T *argvar);$/;"	p	file:	signature:(tabpage_T *tp, typval_T *argvar)
get_winopts	vim/vim/src/buffer.c	/^get_winopts(buf_T *buf)$/;"	f	signature:(buf_T *buf)
get_wordnode	vim/vim/src/spellfile.c	/^get_wordnode(spellinfo_T *spin)$/;"	f	file:	signature:(spellinfo_T *spin)
get_wordnode	vim/vim/src/spellfile.c	/^static wordnode_T *get_wordnode(spellinfo_T *spin);$/;"	p	file:	signature:(spellinfo_T *spin)
get_work_area	vim/vim/src/gui_w32.c	/^get_work_area(RECT *spi_rect)$/;"	f	file:	signature:(RECT *spi_rect)
get_work_area	vim/vim/src/gui_w32.c	/^static void get_work_area(RECT *spi_rect);$/;"	p	file:	signature:(RECT *spi_rect)
get_x11_icon	vim/vim/src/os_unix.c	/^get_x11_icon(int test_only)$/;"	f	file:	signature:(int test_only)
get_x11_icon	vim/vim/src/os_unix.c	/^static int get_x11_icon(int);$/;"	p	file:	signature:(int)
get_x11_thing	vim/vim/src/os_unix.c	/^get_x11_thing($/;"	f	file:	signature:( int get_title, int test_only)
get_x11_thing	vim/vim/src/os_unix.c	/^static int get_x11_thing(int get_title, int test_only);$/;"	p	file:	signature:(int get_title, int test_only)
get_x11_title	vim/vim/src/os_unix.c	/^get_x11_title(int test_only UNUSED)$/;"	f	file:	signature:(int test_only UNUSED)
get_x11_title	vim/vim/src/os_unix.c	/^get_x11_title(int test_only)$/;"	f	file:	signature:(int test_only)
get_x11_title	vim/vim/src/os_unix.c	/^static int get_x11_title(int);$/;"	p	file:	signature:(int)
get_x11_windis	vim/vim/src/os_unix.c	/^get_x11_windis(void)$/;"	f	file:	signature:(void)
get_x11_windis	vim/vim/src/os_unix.c	/^static int  get_x11_windis(void);$/;"	p	file:	signature:(void)
get_yank_register	vim/vim/src/ops.c	/^get_yank_register(int regname, int writing)$/;"	f	signature:(int regname, int writing)
getaltfname	vim/vim/src/buffer.c	/^getaltfname($/;"	f	signature:( int errmsg)
getargcmd	vim/vim/src/ex_docmd.c	/^getargcmd(char_u **argp)$/;"	f	file:	signature:(char_u **argp)
getargcmd	vim/vim/src/ex_docmd.c	/^static char_u	*getargcmd(char_u **);$/;"	p	file:	signature:(char_u **)
getargopt	vim/vim/src/ex_docmd.c	/^getargopt(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
getargopt	vim/vim/src/ex_docmd.c	/^static int	getargopt(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
getboolq	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static BoolQuery getboolq(int *argip, int argc, char *argv[])$/;"	f	file:	signature:(int *argip, int argc, char *argv[])
getcell	vim/vim/src/libvterm/src/screen.c	/^static ScreenCell *getcell(const VTermScreen *screen, int row, int col)$/;"	f	file:	signature:(const VTermScreen *screen, int row, int col)
getchoice	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static int getchoice(int *argip, int argc, char *argv[], const char *options[])$/;"	f	file:	signature:(int *argip, int argc, char *argv[], const char *options[])
getchr	vim/vim/src/regexp.c	/^getchr(void)$/;"	f	file:	signature:(void)
getchr	vim/vim/src/regexp.c	/^static int	getchr(void);$/;"	p	file:	signature:(void)
getcmdline	vim/vim/src/ex_getln.c	/^getcmdline($/;"	f	signature:( int firstc, long count UNUSED, int indent)
getcmdline_prompt	vim/vim/src/ex_getln.c	/^getcmdline_prompt($/;"	f	signature:( int firstc, char_u *prompt, int attr, int xp_context, char_u *xp_arg)
getdecchrs	vim/vim/src/regexp.c	/^getdecchrs(void)$/;"	f	file:	signature:(void)
getdecchrs	vim/vim/src/regexp.c	/^static int	getdecchrs(void);$/;"	p	file:	signature:(void)
getdigits	vim/vim/src/charset.c	/^getdigits(char_u **pp)$/;"	f	signature:(char_u **pp)
getdigraph	vim/vim/src/digraph.c	/^getdigraph(int char1, int char2, int meta_char)$/;"	f	signature:(int char1, int char2, int meta_char)
getent	vim/vim/src/termlib.c	/^getent(char *tbuf, char *term, FILE *termcap, int buflen)$/;"	f	file:	signature:(char *tbuf, char *term, FILE *termcap, int buflen)
getent	vim/vim/src/termlib.c	/^static int  getent(char *, char *, FILE *, int);$/;"	p	file:	signature:(char *, char *, FILE *, int)
getexactdigraph	vim/vim/src/digraph.c	/^getexactdigraph(int char1, int char2, int meta_char)$/;"	f	file:	signature:(int char1, int char2, int meta_char)
getexactdigraph	vim/vim/src/digraph.c	/^static int getexactdigraph(int, int, int);$/;"	p	file:	signature:(int, int, int)
getexline	vim/vim/src/ex_getln.c	/^getexline($/;"	f	signature:( int c, void *cookie UNUSED, int indent)
getexmodeline	vim/vim/src/ex_getln.c	/^getexmodeline($/;"	f	signature:( int promptc, void *cookie UNUSED, int indent)
getfile	vim/vim/src/ex_cmds.c	/^getfile($/;"	f	signature:( int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_T lnum, int forceit)
gethexchrs	vim/vim/src/regexp.c	/^gethexchrs(int maxinputlen)$/;"	f	file:	signature:(int maxinputlen)
gethexchrs	vim/vim/src/regexp.c	/^static int	gethexchrs(int maxinputlen);$/;"	p	file:	signature:(int maxinputlen)
gethostname	vim/vim/src/os_unix.c	2401;"	d	file:
getline	vim/vim/src/ex_cmds.h	/^    char_u	*(*getline)(int, void *, int);$/;"	m	struct:exarg	access:public
getline	vim/vim/src/ex_docmd.c	/^    char_u	*(*getline)(int, void *, int);$/;"	m	struct:loop_cookie	file:	access:public
getlinecol	vim/vim/src/term.c	/^getlinecol($/;"	f	signature:( long *cp, long *rp)
getmark	vim/vim/src/mark.c	/^getmark(int c, int changefile)$/;"	f	signature:(int c, int changefile)
getmark_buf	vim/vim/src/mark.c	/^getmark_buf(buf_T *buf, int c, int changefile)$/;"	f	signature:(buf_T *buf, int c, int changefile)
getmark_buf_fnum	vim/vim/src/mark.c	/^getmark_buf_fnum($/;"	f	signature:( buf_T *buf, int c, int changefile, int *fnum)
getnextac	vim/vim/src/fileio.c	/^getnextac(int c UNUSED, void *cookie, int indent UNUSED)$/;"	f	signature:(int c UNUSED, void *cookie, int indent UNUSED)
getnextcomp	vim/vim/src/misc1.c	/^getnextcomp(char_u *fname)$/;"	f	signature:(char_u *fname)
getnextmark	vim/vim/src/mark.c	/^getnextmark($/;"	f	signature:( pos_T *startpos, int dir, int begin_line)
getoctchrs	vim/vim/src/regexp.c	/^getoctchrs(void)$/;"	f	file:	signature:(void)
getoctchrs	vim/vim/src/regexp.c	/^static int	getoctchrs(void);$/;"	p	file:	signature:(void)
getout	vim/vim/src/main.c	/^getout(int exitval)$/;"	f	signature:(int exitval)
getout_preserve_modified	vim/vim/src/main.c	/^getout_preserve_modified(int exitval)$/;"	f	signature:(int exitval)
getpos_both	vim/vim/src/evalfunc.c	/^getpos_both($/;"	f	file:	signature:( typval_T *argvars, typval_T *rettv, int getcurpos)
getreg_wrap_one_line	vim/vim/src/ops.c	/^getreg_wrap_one_line(char_u *s, int flags)$/;"	f	file:	signature:(char_u *s, int flags)
getreg_wrap_one_line	vim/vim/src/ops.c	/^static char_u *getreg_wrap_one_line(char_u *s, int flags);$/;"	p	file:	signature:(char_u *s, int flags)
getroom	vim/vim/src/spellfile.c	/^getroom($/;"	f	file:	signature:( spellinfo_T *spin, size_t len, int align)
getroom	vim/vim/src/spellfile.c	/^static void *getroom(spellinfo_T *spin, size_t len, int align);$/;"	p	file:	signature:(spellinfo_T *spin, size_t len, int align)
getroom_save	vim/vim/src/spellfile.c	/^getroom_save(spellinfo_T *spin, char_u *s)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *s)
getroom_save	vim/vim/src/spellfile.c	/^static char_u *getroom_save(spellinfo_T *spin, char_u *s);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *s)
getsourceline	vim/vim/src/ex_cmds2.c	/^getsourceline(int c UNUSED, void *cookie, int indent UNUSED)$/;"	f	signature:(int c UNUSED, void *cookie, int indent UNUSED)
gettail	vim/vim/src/misc1.c	/^gettail(char_u *fname)$/;"	f	signature:(char_u *fname)
gettail_dir	vim/vim/src/misc1.c	/^gettail_dir(char_u *fname)$/;"	f	file:	signature:(char_u *fname)
gettail_dir	vim/vim/src/misc1.c	/^static char_u *gettail_dir(char_u *fname);$/;"	p	file:	signature:(char_u *fname)
gettail_sep	vim/vim/src/misc1.c	/^gettail_sep(char_u *fname)$/;"	f	signature:(char_u *fname)
gettext_lang	vim/vim/src/ex_cmds2.c	/^gettext_lang(char_u *name)$/;"	f	file:	signature:(char_u *name)
gettimeofday	vim/vim/src/main.c	/^gettimeofday(struct timeval *tv, char *dummy)$/;"	f	file:	signature:(struct timeval *tv, char *dummy)
getvalue	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static char *getvalue(int *argip, int argc, char *argv[])$/;"	f	file:	signature:(int *argip, int argc, char *argv[])
getvcol	vim/vim/src/charset.c	/^getvcol($/;"	f	signature:( win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end)
getvcol_nolist	vim/vim/src/charset.c	/^getvcol_nolist(pos_T *posp)$/;"	f	signature:(pos_T *posp)
getvcols	vim/vim/src/charset.c	/^getvcols($/;"	f	signature:( win_T *wp, pos_T *pos1, pos_T *pos2, colnr_T *left, colnr_T *right)
getviscol	vim/vim/src/misc2.c	/^getviscol(void)$/;"	f	signature:(void)
getviscol2	vim/vim/src/misc2.c	/^getviscol2(colnr_T col, colnr_T coladd)$/;"	f	signature:(colnr_T col, colnr_T coladd)
getvpos	vim/vim/src/misc2.c	/^getvpos(pos_T *pos, colnr_T wcol)$/;"	f	signature:(pos_T *pos, colnr_T wcol)
getvvcol	vim/vim/src/charset.c	/^getvvcol($/;"	f	signature:( win_T *wp, pos_T *pos, colnr_T *start, colnr_T *cursor, colnr_T *end)
getvvcol	vim/vim/src/vim.h	2147;"	d
getwinvar	vim/vim/src/eval.c	/^getwinvar($/;"	f	signature:( typval_T *argvars, typval_T *rettv, int off)
gfp_setname	vim/vim/src/gui.c	/^gfp_setname(char_u *fname, void *cookie)$/;"	f	file:	signature:(char_u *fname, void *cookie)
gfp_setname	vim/vim/src/gui.c	/^static void gfp_setname(char_u *fname, void *cookie);$/;"	p	file:	signature:(char_u *fname, void *cookie)
gint	vim/vim/src/gui_gtk_x11.c	70;"	d	file:
give_warning	vim/vim/src/message.c	/^give_warning(char_u *message, int hl)$/;"	f	signature:(char_u *message, int hl)
give_warning2	vim/vim/src/message.c	/^give_warning2(char_u *message, char_u *a1, int hl)$/;"	f	signature:(char_u *message, char_u *a1, int hl)
gl_set	vim/vim/src/libvterm/src/vterm_internal.h	/^  int gl_set, gr_set, gsingle_set;$/;"	m	struct:VTermState	access:public
global_alist	vim/vim/src/globals.h	/^EXTERN alist_T	global_alist;	\/* global argument list *\/$/;"	v
global_argc	vim/vim/src/os_win32.c	/^static int	global_argc = 0;$/;"	v	file:
global_argv	vim/vim/src/os_win32.c	/^static char	**global_argv;$/;"	v	file:
global_busy	vim/vim/src/globals.h	/^EXTERN int	global_busy INIT(= 0);	    \/* set when :global is executing *\/$/;"	v
global_change_count	vim/vim/src/ui.c	/^static int global_change_count = 0; \/* if set, inside a start_global_changes *\/$/;"	v	file:
global_event_filter	vim/vim/src/gui_gtk_x11.c	/^global_event_filter(GdkXEvent *xev,$/;"	f	file:	signature:(GdkXEvent *xev, GdkEvent *event UNUSED, gpointer data UNUSED)
global_exe	vim/vim/src/ex_cmds.c	/^global_exe(char_u *cmd)$/;"	f	signature:(char_u *cmd)
global_exe_one	vim/vim/src/ex_cmds.c	/^global_exe_one(char_u *cmd, linenr_T lnum)$/;"	f	file:	signature:(char_u *cmd, linenr_T lnum)
global_ime_DefWindowProc	vim/vim/src/glbl_ime.cpp	/^global_ime_DefWindowProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)$/;"	f	signature:(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
global_ime_DefWindowProc	vim/vim/src/glbl_ime.h	/^    LRESULT WINAPI global_ime_DefWindowProc(HWND, UINT, WPARAM, LPARAM);$/;"	p
global_ime_TranslateMessage	vim/vim/src/glbl_ime.cpp	/^global_ime_TranslateMessage(CONST MSG *lpMsg)$/;"	f	signature:(CONST MSG *lpMsg)
global_ime_TranslateMessage	vim/vim/src/glbl_ime.h	/^    BOOL WINAPI global_ime_TranslateMessage(CONST MSG *);$/;"	p	signature:(CONST MSG *)
global_ime_end	vim/vim/src/glbl_ime.cpp	/^global_ime_end()$/;"	f	signature:()
global_ime_end	vim/vim/src/glbl_ime.h	/^    void global_ime_end(void);$/;"	p	signature:(void)
global_ime_get_status	vim/vim/src/glbl_ime.cpp	/^global_ime_get_status()$/;"	f	signature:()
global_ime_get_status	vim/vim/src/glbl_ime.h	/^    int WINAPI global_ime_get_status(void);$/;"	p	signature:(void)
global_ime_init	vim/vim/src/glbl_ime.cpp	/^global_ime_init(ATOM atom, HWND hWnd)$/;"	f	signature:(ATOM atom, HWND hWnd)
global_ime_init	vim/vim/src/glbl_ime.h	/^    void global_ime_init(ATOM, HWND);$/;"	p
global_ime_set_font	vim/vim/src/glbl_ime.cpp	/^global_ime_set_font(LOGFONT *pFont)$/;"	f	signature:(LOGFONT *pFont)
global_ime_set_font	vim/vim/src/glbl_ime.h	/^    void WINAPI global_ime_set_font(LOGFONT*);$/;"	p	signature:(LOGFONT*)
global_ime_set_position	vim/vim/src/glbl_ime.cpp	/^global_ime_set_position(POINT *pPoint)$/;"	f	signature:(POINT *pPoint)
global_ime_set_position	vim/vim/src/glbl_ime.h	/^    void WINAPI global_ime_set_position(POINT*);$/;"	p	signature:(POINT*)
global_ime_set_status	vim/vim/src/glbl_ime.cpp	/^global_ime_set_status(int status)$/;"	f	signature:(int status)
global_ime_set_status	vim/vim/src/glbl_ime.h	/^    void WINAPI global_ime_set_status(int status);$/;"	p	signature:(int status)
global_need_beginline	vim/vim/src/ex_cmds.c	/^static int	global_need_beginline;	\/* call beginline() after ":g" *\/$/;"	v	file:
global_reverse	vim/vim/src/libvterm/src/screen.c	/^  int global_reverse;$/;"	m	struct:VTermScreen	file:	access:public
globaldir	vim/vim/src/globals.h	/^EXTERN char_u	*globaldir INIT(= NULL);$/;"	v
globaldir	vim/vim/src/structs.h	/^    char_u	*globaldir;	\/* saved value of globaldir *\/$/;"	m	struct:__anon203	access:public
globals	vim/vim/src/if_py_both.h	/^static PyObject *globals;$/;"	v
globalsignmap	vim/vim/src/netbeans.c	/^static char **globalsignmap = NULL;$/;"	v	file:
globalsignmaplen	vim/vim/src/netbeans.c	/^static int globalsignmaplen = 0;$/;"	v	file:
globalsignmapused	vim/vim/src/netbeans.c	/^static int globalsignmapused = 0;$/;"	v	file:
globpath	vim/vim/src/ex_getln.c	/^globpath($/;"	f	signature:( char_u *path, char_u *file, garray_T *ga, int expand_options)
globvardict	vim/vim/src/globals.h	/^EXTERN dict_T	globvardict;		    \/* Dictionary with g: variables *\/$/;"	v
globvarht	vim/vim/src/eval.c	38;"	d	file:
globvars_var	vim/vim/src/eval.c	/^static dictitem_T	globvars_var;		\/* variable used for g: *\/$/;"	v	file:
go_deeper	vim/vim/src/spell.c	/^go_deeper(trystate_T *stack, int depth, int score_add)$/;"	f	file:	signature:(trystate_T *stack, int depth, int score_add)
go_deeper	vim/vim/src/spell.c	/^static void go_deeper(trystate_T *stack, int depth, int score_add);$/;"	p	file:	signature:(trystate_T *stack, int depth, int score_add)
goodi	vim/vim/src/spell.c	/^    int		goodi;$/;"	m	struct:__anon83	file:	access:public
got_code_from_term	vim/vim/src/term.c	/^got_code_from_term(char_u *code, int len)$/;"	f	file:	signature:(char_u *code, int len)
got_code_from_term	vim/vim/src/term.c	/^static void got_code_from_term(char_u *code, int len);$/;"	p	file:	signature:(char_u *code, int len)
got_int	vim/vim/src/ex_docmd.c	/^    int		got_int;$/;"	m	struct:dbg_stuff	file:	access:public
got_int	vim/vim/src/globals.h	/^EXTERN volatile int got_int INIT(= FALSE);    \/* set to TRUE when interrupt$/;"	v
got_x_error	vim/vim/runtime/tools/xcmdsrv_client.c	/^static int	got_x_error = FALSE;$/;"	v	file:
got_x_error	vim/vim/src/if_xcmdsrv.c	/^static int	got_x_error = FALSE;$/;"	v	file:
got_x_error	vim/vim/src/os_unix.c	/^static int	got_x_error = FALSE;$/;"	v	file:
gotchars	vim/vim/src/getchar.c	/^gotchars(char_u *chars, int len)$/;"	f	file:	signature:(char_u *chars, int len)
gotchars	vim/vim/src/getchar.c	/^static void	gotchars(char_u *, int);$/;"	p	file:	signature:(char_u *, int)
goto_buffer	vim/vim/src/buffer.c	/^goto_buffer($/;"	f	signature:( exarg_T *eap, int start, int dir, int count)
goto_byte	vim/vim/src/memline.c	/^goto_byte(long cnt)$/;"	f	signature:(long cnt)
goto_im	vim/vim/src/misc1.c	/^goto_im(void)$/;"	f	signature:(void)
goto_tabpage	vim/vim/src/window.c	/^goto_tabpage(int n)$/;"	f	signature:(int n)
goto_tabpage_tp	vim/vim/src/window.c	/^goto_tabpage_tp($/;"	f	signature:( tabpage_T *tp, int trigger_enter_autocmds, int trigger_leave_autocmds)
goto_tabpage_win	vim/vim/src/window.c	/^goto_tabpage_win(tabpage_T *tp, win_T *wp)$/;"	f	signature:(tabpage_T *tp, win_T *wp)
gotocmdline	vim/vim/src/ex_getln.c	/^gotocmdline(int clr)$/;"	f	signature:(int clr)
gotoxy	vim/vim/src/os_win32.c	/^gotoxy($/;"	f	file:	signature:( unsigned x, unsigned y)
gotoxy	vim/vim/src/os_win32.c	/^static void gotoxy(unsigned x, unsigned y);$/;"	p	file:	signature:(unsigned x, unsigned y)
gpm_close	vim/vim/src/os_unix.c	/^gpm_close(void)$/;"	f	file:	signature:(void)
gpm_close	vim/vim/src/os_unix.c	/^static void gpm_close(void);$/;"	p	file:	signature:(void)
gpm_open	vim/vim/src/os_unix.c	/^gpm_open(void)$/;"	f	file:	signature:(void)
gpm_open	vim/vim/src/os_unix.c	/^static int gpm_open(void);$/;"	p	file:	signature:(void)
gpointer	vim/vim/src/gui_gtk.c	89;"	d	file:
gpointer	vim/vim/src/gui_gtk_x11.c	71;"	d	file:
gr_set	vim/vim/src/libvterm/src/vterm_internal.h	/^  int gl_set, gr_set, gsingle_set;$/;"	m	struct:VTermState	access:public
grab_file_name	vim/vim/src/window.c	/^grab_file_name(long count, linenr_T *file_lnum)$/;"	f	signature:(long count, linenr_T *file_lnum)
green	vim/vim/src/libvterm/include/vterm.h	/^  uint8_t red, green, blue;$/;"	m	struct:__anon49	access:public
green	vim/vim/src/xpm/include/simx.h	/^    BYTE red, green, blue;$/;"	m	struct:__anon86	access:public
green_closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int green_closeness;	\/* Allowable green deviation *\/$/;"	m	struct:__anon93	access:public
grep_internal	vim/vim/src/quickfix.c	/^grep_internal(cmdidx_T cmdidx)$/;"	f	signature:(cmdidx_T cmdidx)
group	vim/vim/src/fileio.c	/^    int		    group;		\/* group ID *\/$/;"	m	struct:AutoPat	file:	access:public
group	vim/vim/src/fileio.c	/^    int		group;		\/* group being used *\/$/;"	m	struct:AutoPatCmd	file:	access:public
grow_combine_buffer	vim/vim/src/libvterm/src/state.c	/^static void grow_combine_buffer(VTermState *state)$/;"	f	file:	signature:(VTermState *state)
growarray	vim/vim/src/structs.h	/^typedef struct growarray$/;"	s
growarray::ga_data	vim/vim/src/structs.h	/^    void    *ga_data;		    \/* pointer to the first item *\/$/;"	m	struct:growarray	access:public
growarray::ga_growsize	vim/vim/src/structs.h	/^    int	    ga_growsize;	    \/* number of items to grow each time *\/$/;"	m	struct:growarray	access:public
growarray::ga_itemsize	vim/vim/src/structs.h	/^    int	    ga_itemsize;	    \/* sizeof(item) *\/$/;"	m	struct:growarray	access:public
growarray::ga_len	vim/vim/src/structs.h	/^    int	    ga_len;		    \/* current number of items used *\/$/;"	m	struct:growarray	access:public
growarray::ga_maxlen	vim/vim/src/structs.h	/^    int	    ga_maxlen;		    \/* maximum number of items possible *\/$/;"	m	struct:growarray	access:public
growbuf	vim/vim/src/quickfix.c	/^    char_u	*growbuf;$/;"	m	struct:__anon13	file:	access:public
growbufsiz	vim/vim/src/quickfix.c	/^    int		growbufsiz;$/;"	m	struct:__anon13	file:	access:public
gsingle_set	vim/vim/src/libvterm/src/vterm_internal.h	/^  int gl_set, gr_set, gsingle_set;$/;"	m	struct:VTermState	access:public
gtk_form_attach_child_window	vim/vim/src/gui_gtk_f.c	/^gtk_form_attach_child_window(GtkForm *form, GtkFormChild *child)$/;"	f	file:	signature:(GtkForm *form, GtkFormChild *child)
gtk_form_attach_child_window	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_attach_child_window(GtkForm *form,$/;"	p	file:	signature:(GtkForm *form, GtkFormChild *child)
gtk_form_child_map	vim/vim/src/gui_gtk_f.c	/^gtk_form_child_map(GtkWidget *widget UNUSED, gpointer user_data)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer user_data)
gtk_form_child_map	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_child_map(GtkWidget *widget, gpointer user_data);$/;"	p	file:	signature:(GtkWidget *widget, gpointer user_data)
gtk_form_child_unmap	vim/vim/src/gui_gtk_f.c	/^gtk_form_child_unmap(GtkWidget *widget UNUSED, gpointer user_data)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer user_data)
gtk_form_child_unmap	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_child_unmap(GtkWidget *widget, gpointer user_data);$/;"	p	file:	signature:(GtkWidget *widget, gpointer user_data)
gtk_form_class_init	vim/vim/src/gui_gtk_f.c	/^gtk_form_class_init(GtkFormClass *klass)$/;"	f	file:	signature:(GtkFormClass *klass)
gtk_form_class_init	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_class_init(GtkFormClass *klass);$/;"	p	file:	signature:(GtkFormClass *klass)
gtk_form_draw	vim/vim/src/gui_gtk_f.c	/^gtk_form_draw(GtkWidget *widget, cairo_t *cr)$/;"	f	file:	signature:(GtkWidget *widget, cairo_t *cr)
gtk_form_draw	vim/vim/src/gui_gtk_f.c	/^static gboolean gtk_form_draw(GtkWidget *widget,$/;"	p	file:	signature:(GtkWidget *widget, cairo_t *cr)
gtk_form_expose	vim/vim/src/gui_gtk_f.c	/^gtk_form_expose(GtkWidget *widget, GdkEventExpose *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventExpose *event)
gtk_form_expose	vim/vim/src/gui_gtk_f.c	/^static gint gtk_form_expose(GtkWidget *widget,$/;"	p	file:	signature:(GtkWidget *widget, GdkEventExpose *event)
gtk_form_forall	vim/vim/src/gui_gtk_f.c	/^gtk_form_forall(GtkContainer	*container,$/;"	f	file:	signature:(GtkContainer *container, gboolean include_internals UNUSED, GtkCallback callback, gpointer callback_data)
gtk_form_forall	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_forall(GtkContainer *container,$/;"	p	file:	signature:(GtkContainer *container, gboolean include_internals, GtkCallback callback, gpointer callback_data)
gtk_form_freeze	vim/vim/src/gui_gtk_f.c	/^gtk_form_freeze(GtkForm *form)$/;"	f	signature:(GtkForm *form)
gtk_form_freeze	vim/vim/src/gui_gtk_f.h	/^void gtk_form_freeze(GtkForm *form);$/;"	p	signature:(GtkForm *form)
gtk_form_get_preferred_height	vim/vim/src/gui_gtk_f.c	/^gtk_form_get_preferred_height(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, gint *minimal_height, gint *natural_height)
gtk_form_get_preferred_height	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_get_preferred_height(GtkWidget *widget,$/;"	p	file:	signature:(GtkWidget *widget, gint *minimal_height, gint *natural_height)
gtk_form_get_preferred_width	vim/vim/src/gui_gtk_f.c	/^gtk_form_get_preferred_width(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, gint *minimal_width, gint *natural_width)
gtk_form_get_preferred_width	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_get_preferred_width(GtkWidget *widget,$/;"	p	file:	signature:(GtkWidget *widget, gint *minimal_width, gint *natural_width)
gtk_form_get_type	vim/vim/src/gui_gtk_f.h	/^GType gtk_form_get_type(void);$/;"	p	signature:(void)
gtk_form_get_type	vim/vim/src/gui_gtk_f.h	/^GtkType gtk_form_get_type(void);$/;"	p	signature:(void)
gtk_form_init	vim/vim/src/gui_gtk_f.c	/^gtk_form_init(GtkForm *form)$/;"	f	file:	signature:(GtkForm *form)
gtk_form_init	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_init(GtkForm *form);$/;"	p	file:	signature:(GtkForm *form)
gtk_form_map	vim/vim/src/gui_gtk_f.c	/^gtk_form_map(GtkWidget *widget)$/;"	f	file:	signature:(GtkWidget *widget)
gtk_form_map	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_map(GtkWidget *widget);$/;"	p	file:	signature:(GtkWidget *widget)
gtk_form_move	vim/vim/src/gui_gtk_f.c	/^gtk_form_move(GtkForm	*form,$/;"	f	signature:(GtkForm *form, GtkWidget *child_widget, gint x, gint y)
gtk_form_move	vim/vim/src/gui_gtk_f.h	/^void gtk_form_move(GtkForm *form, GtkWidget * widget,$/;"	p	signature:(GtkForm *form, GtkWidget * widget, gint x, gint y)
gtk_form_move_resize	vim/vim/src/gui_gtk_f.c	/^gtk_form_move_resize(GtkForm *form, GtkWidget *widget,$/;"	f	signature:(GtkForm *form, GtkWidget *widget, gint x, gint y, gint w, gint h)
gtk_form_move_resize	vim/vim/src/gui_gtk_f.h	/^void gtk_form_move_resize(GtkForm * form, GtkWidget * widget,$/;"	p	signature:(GtkForm * form, GtkWidget * widget, gint x, gint y, gint w, gint h)
gtk_form_new	vim/vim/src/gui_gtk_f.c	/^gtk_form_new(void)$/;"	f	signature:(void)
gtk_form_new	vim/vim/src/gui_gtk_f.h	/^GtkWidget *gtk_form_new(void);$/;"	p	signature:(void)
gtk_form_position_child	vim/vim/src/gui_gtk_f.c	/^gtk_form_position_child(GtkForm *form, GtkFormChild *child,$/;"	f	file:	signature:(GtkForm *form, GtkFormChild *child, gboolean force_allocate)
gtk_form_position_child	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_position_child(GtkForm *form,$/;"	p	file:	signature:(GtkForm *form, GtkFormChild *child, gboolean force_allocate)
gtk_form_position_children	vim/vim/src/gui_gtk_f.c	/^gtk_form_position_children(GtkForm *form)$/;"	f	file:	signature:(GtkForm *form)
gtk_form_position_children	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_position_children(GtkForm *form);$/;"	p	file:	signature:(GtkForm *form)
gtk_form_put	vim/vim/src/gui_gtk_f.c	/^gtk_form_put(GtkForm	*form,$/;"	f	signature:(GtkForm *form, GtkWidget *child_widget, gint x, gint y)
gtk_form_put	vim/vim/src/gui_gtk_f.h	/^void gtk_form_put(GtkForm * form, GtkWidget * widget,$/;"	p	signature:(GtkForm * form, GtkWidget * widget, gint x, gint y)
gtk_form_realize	vim/vim/src/gui_gtk_f.c	/^gtk_form_realize(GtkWidget *widget)$/;"	f	file:	signature:(GtkWidget *widget)
gtk_form_realize	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_realize(GtkWidget *widget);$/;"	p	file:	signature:(GtkWidget *widget)
gtk_form_realize_child	vim/vim/src/gui_gtk_f.c	/^gtk_form_realize_child(GtkForm *form, GtkFormChild *child)$/;"	f	file:	signature:(GtkForm *form, GtkFormChild *child)
gtk_form_realize_child	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_realize_child(GtkForm *form,$/;"	p	file:	signature:(GtkForm *form, GtkFormChild *child)
gtk_form_remove	vim/vim/src/gui_gtk_f.c	/^gtk_form_remove(GtkContainer *container, GtkWidget *widget)$/;"	f	file:	signature:(GtkContainer *container, GtkWidget *widget)
gtk_form_remove	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_remove(GtkContainer *container,$/;"	p	file:	signature:(GtkContainer *container, GtkWidget *widget)
gtk_form_render_background	vim/vim/src/gui_gtk_f.c	/^gtk_form_render_background(GtkWidget *widget, cairo_t *cr)$/;"	f	file:	signature:(GtkWidget *widget, cairo_t *cr)
gtk_form_send_configure	vim/vim/src/gui_gtk_f.c	/^gtk_form_send_configure(GtkForm *form)$/;"	f	file:	signature:(GtkForm *form)
gtk_form_send_configure	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_send_configure(GtkForm *form);$/;"	p	file:	signature:(GtkForm *form)
gtk_form_size_allocate	vim/vim/src/gui_gtk_f.c	/^gtk_form_size_allocate(GtkWidget *widget, GtkAllocation *allocation)$/;"	f	file:	signature:(GtkWidget *widget, GtkAllocation *allocation)
gtk_form_size_allocate	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_size_allocate(GtkWidget *widget,$/;"	p	file:	signature:(GtkWidget *widget, GtkAllocation *allocation)
gtk_form_size_request	vim/vim/src/gui_gtk_f.c	/^gtk_form_size_request(GtkWidget *widget, GtkRequisition *requisition)$/;"	f	file:	signature:(GtkWidget *widget, GtkRequisition *requisition)
gtk_form_size_request	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_size_request(GtkWidget *widget,$/;"	p	file:	signature:(GtkWidget *widget, GtkRequisition *requisition)
gtk_form_thaw	vim/vim/src/gui_gtk_f.c	/^gtk_form_thaw(GtkForm *form)$/;"	f	signature:(GtkForm *form)
gtk_form_thaw	vim/vim/src/gui_gtk_f.h	/^void gtk_form_thaw(GtkForm *form);$/;"	p	signature:(GtkForm *form)
gtk_form_unrealize	vim/vim/src/gui_gtk_f.c	/^gtk_form_unrealize(GtkWidget *widget)$/;"	f	file:	signature:(GtkWidget *widget)
gtk_form_unrealize	vim/vim/src/gui_gtk_f.c	/^static void gtk_form_unrealize(GtkWidget *widget);$/;"	p	file:	signature:(GtkWidget *widget)
gtk_sel_atom	vim/vim/src/vim.h	/^    GdkAtom     gtk_sel_atom;	\/* PRIMARY\/CLIPBOARD selection ID *\/$/;"	m	struct:VimClipboard	access:public
gtk_socket_id	vim/vim/src/globals.h	/^EXTERN guint32	gtk_socket_id INIT(= 0);$/;"	v
guaranteed_byte_string_arg	vim/vim/src/if_mzsch.c	/^guaranteed_byte_string_arg(char *proc, int num, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(char *proc, int num, int argc, Scheme_Object **argv)
gui	vim/vim/src/gui.c	/^gui_T gui;$/;"	v
gui	vim/vim/src/structs.h	/^	} gui;$/;"	m	union:attr_entry::__anon175	typeref:struct:attr_entry::__anon175::__anon178	access:public
gui_T	vim/vim/src/gui.h	/^} gui_T;$/;"	t	typeref:struct:Gui
gui_add_tearoff	vim/vim/src/menu.c	/^gui_add_tearoff(char_u *tearpath, int *pri_tab, int pri_idx)$/;"	f	file:	signature:(char_u *tearpath, int *pri_tab, int pri_idx)
gui_add_tearoff	vim/vim/src/menu.c	/^static void gui_add_tearoff(char_u *tearpath, int *pri_tab, int pri_idx);$/;"	p	file:	signature:(char_u *tearpath, int *pri_tab, int pri_idx)
gui_argc	vim/vim/src/gui_gtk_x11.c	/^static int    gui_argc = 0;$/;"	v	file:
gui_argc	vim/vim/src/gui_x11.c	/^static int gui_argc = 0;$/;"	v	file:
gui_argv	vim/vim/src/gui_gtk_x11.c	/^static char **gui_argv = NULL;$/;"	v	file:
gui_argv	vim/vim/src/gui_x11.c	/^static char **gui_argv = NULL;$/;"	v	file:
gui_athena_create_pullright_pixmap	vim/vim/src/gui_athena.c	/^gui_athena_create_pullright_pixmap(Widget w)$/;"	f	file:	signature:(Widget w)
gui_athena_create_pullright_pixmap	vim/vim/src/gui_athena.c	/^static Pixmap gui_athena_create_pullright_pixmap(Widget);$/;"	p	file:
gui_athena_delayed_arm_action	vim/vim/src/gui_athena.c	/^gui_athena_delayed_arm_action($/;"	f	file:	signature:( Widget w, XEvent *event, String *args, Cardinal *nargs)
gui_athena_delayed_arm_action	vim/vim/src/gui_athena.c	/^static void gui_athena_delayed_arm_action(Widget, XEvent *, String *,$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
gui_athena_menu_colors	vim/vim/src/gui_athena.c	/^gui_athena_menu_colors(Widget id)$/;"	f	file:	signature:(Widget id)
gui_athena_menu_colors	vim/vim/src/gui_athena.c	/^static void gui_athena_menu_colors(Widget id);$/;"	p	file:	signature:(Widget id)
gui_athena_menu_font	vim/vim/src/gui_athena.c	/^gui_athena_menu_font(Widget id)$/;"	f	file:	signature:(Widget id)
gui_athena_menu_font	vim/vim/src/gui_athena.c	/^static void gui_athena_menu_font(Widget id);$/;"	p	file:	signature:(Widget id)
gui_athena_menu_has_submenus	vim/vim/src/gui_athena.c	/^gui_athena_menu_has_submenus(Widget id, Widget ignore)$/;"	f	file:	signature:(Widget id, Widget ignore)
gui_athena_menu_has_submenus	vim/vim/src/gui_athena.c	/^static Boolean	gui_athena_menu_has_submenus(Widget, Widget);$/;"	p	file:
gui_athena_menu_timeout	vim/vim/src/gui_athena.c	/^gui_athena_menu_timeout($/;"	f	file:	signature:( XtPointer client_data, XtIntervalId *id UNUSED)
gui_athena_menu_timeout	vim/vim/src/gui_athena.c	/^static void gui_athena_menu_timeout(XtPointer, XtIntervalId *);$/;"	p	file:	signature:(XtPointer, XtIntervalId *)
gui_athena_popdown_submenus_action	vim/vim/src/gui_athena.c	/^gui_athena_popdown_submenus_action($/;"	f	file:	signature:( Widget w, XEvent *event, String *args, Cardinal *nargs)
gui_athena_popdown_submenus_action	vim/vim/src/gui_athena.c	/^static void gui_athena_popdown_submenus_action(Widget, XEvent *,$/;"	p	file:	signature:(Widget, XEvent *, String *, Cardinal *)
gui_athena_popup_callback	vim/vim/src/gui_athena.c	/^gui_athena_popup_callback($/;"	f	file:	signature:( Widget w, XtPointer client_data, XtPointer call_data UNUSED)
gui_athena_popup_callback	vim/vim/src/gui_athena.c	/^static void gui_athena_popup_callback(Widget, XtPointer, XtPointer);$/;"	p	file:
gui_athena_scroll_cb_jump	vim/vim/src/gui_athena.c	/^gui_athena_scroll_cb_jump($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data)
gui_athena_scroll_cb_jump	vim/vim/src/gui_athena.c	/^static void gui_athena_scroll_cb_jump(Widget, XtPointer, XtPointer);$/;"	p	file:
gui_athena_scroll_cb_scroll	vim/vim/src/gui_athena.c	/^gui_athena_scroll_cb_scroll($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data)
gui_athena_scroll_cb_scroll	vim/vim/src/gui_athena.c	/^static void gui_athena_scroll_cb_scroll(Widget, XtPointer, XtPointer);$/;"	p	file:
gui_athena_scroll_colors	vim/vim/src/gui_athena.c	/^gui_athena_scroll_colors(Widget id)$/;"	f	file:	signature:(Widget id)
gui_athena_scroll_colors	vim/vim/src/gui_athena.c	/^static void gui_athena_scroll_colors(Widget id);$/;"	p	file:	signature:(Widget id)
gui_attempt_start	vim/vim/src/gui.c	/^gui_attempt_start(void)$/;"	f	file:	signature:(void)
gui_attempt_start	vim/vim/src/gui.c	/^static void gui_attempt_start(void);$/;"	p	file:	signature:(void)
gui_attr_table	vim/vim/src/syntax.c	/^static garray_T	gui_attr_table = {0, 0, 0, 0, NULL};$/;"	v	file:
gui_bg_default	vim/vim/src/option.c	/^gui_bg_default(void)$/;"	f	file:	signature:(void)
gui_bg_default	vim/vim/src/option.c	/^static char_u *gui_bg_default(void);$/;"	p	file:	signature:(void)
gui_can_update_cursor	vim/vim/src/gui.c	/^gui_can_update_cursor(void)$/;"	f	signature:(void)
gui_check_colors	vim/vim/src/gui.c	/^gui_check_colors(void)$/;"	f	signature:(void)
gui_check_pos	vim/vim/src/gui.c	/^gui_check_pos(void)$/;"	f	file:	signature:(void)
gui_check_pos	vim/vim/src/gui.c	/^static void gui_check_pos(void);$/;"	p	file:	signature:(void)
gui_clear_block	vim/vim/src/gui.c	/^gui_clear_block($/;"	f	signature:( int row1, int col1, int row2, int col2)
gui_create_initial_menus	vim/vim/src/menu.c	/^gui_create_initial_menus(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_create_scrollbar	vim/vim/src/gui.c	/^gui_create_scrollbar(scrollbar_T *sb, int type, win_T *wp)$/;"	f	signature:(scrollbar_T *sb, int type, win_T *wp)
gui_create_tearoffs_recurse	vim/vim/src/menu.c	/^gui_create_tearoffs_recurse($/;"	f	file:	signature:( vimmenu_T *menu, const char_u *pname, int *pri_tab, int pri_idx)
gui_create_tearoffs_recurse	vim/vim/src/menu.c	/^static void gui_create_tearoffs_recurse(vimmenu_T *menu, const char_u *pname, int *pri_tab, int pri_idx);$/;"	p	file:	signature:(vimmenu_T *menu, const char_u *pname, int *pri_tab, int pri_idx)
gui_delete_lines	vim/vim/src/gui.c	/^gui_delete_lines(int row, int count)$/;"	f	file:	signature:(int row, int count)
gui_delete_lines	vim/vim/src/gui.c	/^static void gui_delete_lines(int row, int count);$/;"	p	file:	signature:(int row, int count)
gui_destroy_tearoffs_recurse	vim/vim/src/menu.c	/^gui_destroy_tearoffs_recurse(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
gui_destroy_tearoffs_recurse	vim/vim/src/menu.c	/^static void gui_destroy_tearoffs_recurse(vimmenu_T *menu);$/;"	p	file:	signature:(vimmenu_T *menu)
gui_do_findrepl	vim/vim/src/gui.c	/^gui_do_findrepl($/;"	f	signature:( int flags, char_u *find_text, char_u *repl_text, int down)
gui_do_fork	vim/vim/src/gui.c	/^gui_do_fork(void)$/;"	f	file:	signature:(void)
gui_do_fork	vim/vim/src/gui.c	/^static void gui_do_fork(void);$/;"	p	file:	signature:(void)
gui_do_horiz_scroll	vim/vim/src/gui.c	/^gui_do_horiz_scroll(long_u leftcol, int compute_longest_lnum)$/;"	f	signature:(long_u leftcol, int compute_longest_lnum)
gui_do_one_color	vim/vim/src/syntax.c	/^gui_do_one_color($/;"	f	file:	signature:( int idx, int do_menu UNUSED, int do_tooltip UNUSED)
gui_do_one_color	vim/vim/src/syntax.c	/^static void gui_do_one_color(int idx, int do_menu, int do_tooltip);$/;"	p	file:	signature:(int idx, int do_menu, int do_tooltip)
gui_do_scroll	vim/vim/src/gui.c	/^gui_do_scroll(void)$/;"	f	signature:(void)
gui_do_scrollbar	vim/vim/src/gui.c	/^gui_do_scrollbar($/;"	f	file:	signature:( win_T *wp, int which, int enable)
gui_do_scrollbar	vim/vim/src/gui.c	/^static void gui_do_scrollbar(win_T *wp, int which, int enable);$/;"	p	file:	signature:(win_T *wp, int which, int enable)
gui_dont_update_cursor	vim/vim/src/gui.c	/^gui_dont_update_cursor(int undraw)$/;"	f	signature:(int undraw)
gui_drag_scrollbar	vim/vim/src/gui.c	/^gui_drag_scrollbar(scrollbar_T *sb, long value, int still_dragging)$/;"	f	signature:(scrollbar_T *sb, long value, int still_dragging)
gui_exit	vim/vim/src/gui.c	/^gui_exit(int rc)$/;"	f	signature:(int rc)
gui_find_bitmap	vim/vim/src/gui.c	/^gui_find_bitmap(char_u *name, char_u *buffer, char *ext)$/;"	f	signature:(char_u *name, char_u *buffer, char *ext)
gui_find_iconfile	vim/vim/src/gui.c	/^gui_find_iconfile(char_u *name, char_u *buffer, char *ext)$/;"	f	signature:(char_u *name, char_u *buffer, char *ext)
gui_find_longest_lnum	vim/vim/src/gui.c	/^gui_find_longest_lnum(void)$/;"	f	file:	signature:(void)
gui_find_longest_lnum	vim/vim/src/gui.c	/^static linenr_T gui_find_longest_lnum(void);$/;"	p	file:	signature:(void)
gui_find_menu	vim/vim/src/menu.c	/^gui_find_menu(char_u *path_name)$/;"	f	signature:(char_u *path_name)
gui_find_scrollbar	vim/vim/src/gui.c	/^gui_find_scrollbar(long ident)$/;"	f	signature:(long ident)
gui_focus_change	vim/vim/src/gui.c	/^gui_focus_change(int in_focus)$/;"	f	signature:(int in_focus)
gui_get_base_height	vim/vim/src/gui.c	/^gui_get_base_height(void)$/;"	f	signature:(void)
gui_get_base_width	vim/vim/src/gui.c	/^gui_get_base_width(void)$/;"	f	signature:(void)
gui_get_color	vim/vim/src/gui.c	/^gui_get_color(char_u *name)$/;"	f	signature:(char_u *name)
gui_get_color_cmn	vim/vim/src/term.c	/^gui_get_color_cmn(char_u *name)$/;"	f	signature:(char_u *name)
gui_get_lightness	vim/vim/src/gui.c	/^gui_get_lightness(guicolor_T pixel)$/;"	f	signature:(guicolor_T pixel)
gui_get_rgb_color_cmn	vim/vim/src/term.c	/^gui_get_rgb_color_cmn(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
gui_get_shellsize	vim/vim/src/gui.c	/^gui_get_shellsize(void)$/;"	f	signature:(void)
gui_get_wide_font	vim/vim/src/gui.c	/^gui_get_wide_font(void)$/;"	f	signature:(void)
gui_get_x11_windis	vim/vim/src/gui_gtk_x11.c	/^gui_get_x11_windis(Window *win, Display **dis)$/;"	f	signature:(Window *win, Display **dis)
gui_get_x11_windis	vim/vim/src/gui_x11.c	/^gui_get_x11_windis(Window *win, Display **dis)$/;"	f	signature:(Window *win, Display **dis)
gui_gtk2_draw_string	vim/vim/src/gui_gtk_x11.c	/^gui_gtk2_draw_string(int row, int col, char_u *s, int len, int flags)$/;"	f	signature:(int row, int col, char_u *s, int len, int flags)
gui_gtk3_redraw	vim/vim/src/gui_gtk_x11.c	/^gui_gtk3_redraw(int x, int y, int width, int height)$/;"	f	file:	signature:(int x, int y, int width, int height)
gui_gtk3_should_draw_cursor	vim/vim/src/gui_gtk_x11.c	/^gui_gtk3_should_draw_cursor(void)$/;"	f	file:	signature:(void)
gui_gtk3_update_cursor	vim/vim/src/gui_gtk_x11.c	/^gui_gtk3_update_cursor(cairo_t *cr)$/;"	f	file:	signature:(cairo_t *cr)
gui_gtk_get_pointer	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_get_pointer(GtkWidget       *widget,$/;"	f	file:	signature:(GtkWidget *widget, gint *x, gint *y, GdkModifierType *state)
gui_gtk_get_pointer_device	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_get_pointer_device(GtkWidget *widget)$/;"	f	file:	signature:(GtkWidget *widget)
gui_gtk_is_blink_on	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_is_blink_on(void)$/;"	f	file:	signature:(void)
gui_gtk_is_blink_on	vim/vim/src/gui_gtk_x11.c	/^static gboolean gui_gtk_is_blink_on(void);$/;"	p	file:	signature:(void)
gui_gtk_register_stock_icons	vim/vim/src/gui_gtk.c	/^gui_gtk_register_stock_icons(void)$/;"	f	signature:(void)
gui_gtk_set_dnd_targets	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_set_dnd_targets(void)$/;"	f	signature:(void)
gui_gtk_set_mnemonics	vim/vim/src/gui_gtk.c	/^gui_gtk_set_mnemonics(int enable)$/;"	f	signature:(int enable)
gui_gtk_set_selection_targets	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_set_selection_targets(void)$/;"	f	signature:(void)
gui_gtk_surface_copy_rect	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_surface_copy_rect(int dest_x, int dest_y,$/;"	f	file:	signature:(int dest_x, int dest_y, int src_x, int src_y, int width, int height)
gui_gtk_window_at_position	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_window_at_position(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, gint *x, gint *y)
gui_gtk_window_clear	vim/vim/src/gui_gtk_x11.c	/^gui_gtk_window_clear(GdkWindow *win)$/;"	f	file:	signature:(GdkWindow *win)
gui_gtk_window_clear	vim/vim/src/gui_gtk_x11.c	/^static void gui_gtk_window_clear(GdkWindow *win);$/;"	p	file:	signature:(GdkWindow *win)
gui_handle_drop	vim/vim/src/gui.c	/^gui_handle_drop($/;"	f	signature:( int x UNUSED, int y UNUSED, int_u modifiers, char_u **fnames, int count)
gui_has_tabline	vim/vim/src/gui.c	/^gui_has_tabline(void)$/;"	f	file:	signature:(void)
gui_has_tabline	vim/vim/src/gui.c	/^static int gui_has_tabline(void);$/;"	p	file:	signature:(void)
gui_init	vim/vim/src/gui.c	/^gui_init(void)$/;"	f	signature:(void)
gui_init_check	vim/vim/src/gui.c	/^gui_init_check(void)$/;"	f	signature:(void)
gui_init_font	vim/vim/src/gui.c	/^gui_init_font(char_u *font_list, int fontset UNUSED)$/;"	f	signature:(char_u *font_list, int fontset UNUSED)
gui_init_menu_font	vim/vim/src/gui_x11.c	/^gui_init_menu_font(void)$/;"	f	signature:(void)
gui_init_tooltip_font	vim/vim/src/gui_x11.c	/^gui_init_tooltip_font(void)$/;"	f	signature:(void)
gui_init_which_components	vim/vim/src/gui.c	/^gui_init_which_components(char_u *oldval UNUSED)$/;"	f	signature:(char_u *oldval UNUSED)
gui_insert_lines	vim/vim/src/gui.c	/^gui_insert_lines(int row, int count)$/;"	f	file:	signature:(int row, int count)
gui_insert_lines	vim/vim/src/gui.c	/^static void gui_insert_lines(int row, int count);$/;"	p	file:	signature:(int row, int count)
gui_is_menu_shortcut	vim/vim/src/menu.c	/^gui_is_menu_shortcut(int key)$/;"	f	signature:(int key)
gui_mac_create_atsui_style	vim/vim/src/gui_mac.c	/^gui_mac_create_atsui_style(void)$/;"	f	file:	signature:(void)
gui_mac_dispose_atsui_style	vim/vim/src/gui_mac.c	/^gui_mac_dispose_atsui_style(void)$/;"	f	file:	signature:(void)
gui_mac_dispose_atsui_style	vim/vim/src/gui_mac.c	/^static void gui_mac_dispose_atsui_style(void);$/;"	p	file:	signature:(void)
gui_mac_doActivateEvent	vim/vim/src/gui_mac.c	/^gui_mac_doActivateEvent(EventRecord *event)$/;"	f	signature:(EventRecord *event)
gui_mac_doInContentClick	vim/vim/src/gui_mac.c	/^gui_mac_doInContentClick(EventRecord *theEvent, WindowPtr whichWindow)$/;"	f	signature:(EventRecord *theEvent, WindowPtr whichWindow)
gui_mac_doInDragClick	vim/vim/src/gui_mac.c	/^gui_mac_doInDragClick(Point where, WindowPtr whichWindow)$/;"	f	signature:(Point where, WindowPtr whichWindow)
gui_mac_doInGrowClick	vim/vim/src/gui_mac.c	/^gui_mac_doInGrowClick(Point where, WindowPtr whichWindow)$/;"	f	signature:(Point where, WindowPtr whichWindow)
gui_mac_doInZoomClick	vim/vim/src/gui_mac.c	/^gui_mac_doInZoomClick(EventRecord *theEvent, WindowPtr whichWindow)$/;"	f	file:	signature:(EventRecord *theEvent, WindowPtr whichWindow)
gui_mac_doKeyEvent	vim/vim/src/gui_mac.c	/^gui_mac_doKeyEvent(EventRecord *theEvent)$/;"	f	signature:(EventRecord *theEvent)
gui_mac_doMouseDownEvent	vim/vim/src/gui_mac.c	/^gui_mac_doMouseDownEvent(EventRecord *theEvent)$/;"	f	signature:(EventRecord *theEvent)
gui_mac_doMouseMovedEvent	vim/vim/src/gui_mac.c	/^gui_mac_doMouseMovedEvent(EventRecord *event)$/;"	f	signature:(EventRecord *event)
gui_mac_doMouseUpEvent	vim/vim/src/gui_mac.c	/^gui_mac_doMouseUpEvent(EventRecord *theEvent)$/;"	f	signature:(EventRecord *theEvent)
gui_mac_doSuspendEvent	vim/vim/src/gui_mac.c	/^gui_mac_doSuspendEvent(EventRecord *event)$/;"	f	signature:(EventRecord *event)
gui_mac_doUpdateEvent	vim/vim/src/gui_mac.c	/^gui_mac_doUpdateEvent(EventRecord *event)$/;"	f	signature:(EventRecord *event)
gui_mac_drag_thumb	vim/vim/src/gui_mac.c	/^gui_mac_drag_thumb(ControlHandle theControl, short partCode)$/;"	f	signature:(ControlHandle theControl, short partCode)
gui_mac_find_font	vim/vim/src/gui_mac.c	/^gui_mac_find_font(char_u *font_name)$/;"	f	signature:(char_u *font_name)
gui_mac_get_menu_item_index	vim/vim/src/gui_mac.c	/^gui_mac_get_menu_item_index(vimmenu_T *pMenu)$/;"	f	signature:(vimmenu_T *pMenu)
gui_mac_get_vim_menu	vim/vim/src/gui_mac.c	/^gui_mac_get_vim_menu(short menuID, short itemIndex, vimmenu_T *pMenu)$/;"	f	file:	signature:(short menuID, short itemIndex, vimmenu_T *pMenu)
gui_mac_handle_event	vim/vim/src/gui_mac.c	/^gui_mac_handle_event(EventRecord *event)$/;"	f	signature:(EventRecord *event)
gui_mac_handle_menu	vim/vim/src/gui_mac.c	/^gui_mac_handle_menu(long menuChoice)$/;"	f	signature:(long menuChoice)
gui_mac_handle_text_input	vim/vim/src/gui_mac.c	/^gui_mac_handle_text_input($/;"	f	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent, void *data)
gui_mac_handle_text_input	vim/vim/src/gui_mac.c	/^static pascal OSStatus gui_mac_handle_text_input($/;"	p	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent, void *data)
gui_mac_handle_window_activate	vim/vim/src/gui_mac.c	/^gui_mac_handle_window_activate($/;"	f	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent, void *data)
gui_mac_handle_window_activate	vim/vim/src/gui_mac.c	/^static pascal OSStatus gui_mac_handle_window_activate($/;"	p	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent, void *data)
gui_mac_mouse_wheel	vim/vim/src/gui_mac.c	/^gui_mac_mouse_wheel(EventHandlerCallRef nextHandler, EventRef theEvent,$/;"	f	file:	signature:(EventHandlerCallRef nextHandler, EventRef theEvent, void *data)
gui_mac_scroll_action	vim/vim/src/gui_mac.c	/^gui_mac_scroll_action(ControlHandle theControl, short partCode)$/;"	f	signature:(ControlHandle theControl, short partCode)
gui_mac_select_font	vim/vim/src/gui_mac.c	/^gui_mac_select_font(char_u *font_name)$/;"	f	file:	signature:(char_u *font_name)
gui_mac_set_font_attributes	vim/vim/src/gui_mac.c	/^gui_mac_set_font_attributes(GuiFont font)$/;"	f	file:	signature:(GuiFont font)
gui_mac_set_font_attributes	vim/vim/src/gui_mac.c	/^static void gui_mac_set_font_attributes(GuiFont font);$/;"	p	file:	signature:(GuiFont font)
gui_mac_unicode_key_event	vim/vim/src/gui_mac.c	/^gui_mac_unicode_key_event($/;"	f	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent)
gui_mac_unicode_key_event	vim/vim/src/gui_mac.c	/^static pascal OSStatus gui_mac_unicode_key_event($/;"	p	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent)
gui_mac_update_input_area	vim/vim/src/gui_mac.c	/^OSStatus gui_mac_update_input_area($/;"	f	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent)
gui_mac_update_input_area	vim/vim/src/gui_mac.c	/^static pascal OSStatus gui_mac_update_input_area($/;"	p	file:	signature:( EventHandlerCallRef nextHandler, EventRef theEvent)
gui_make_popup	vim/vim/src/gui_gtk.c	/^gui_make_popup(char_u *path_name, int mouse_pos)$/;"	f	signature:(char_u *path_name, int mouse_pos)
gui_make_popup	vim/vim/src/gui_w32.c	/^gui_make_popup(char_u *path_name, int mouse_pos)$/;"	f	signature:(char_u *path_name, int mouse_pos)
gui_make_tearoff	vim/vim/src/gui_w32.c	/^gui_make_tearoff(char_u *path_name)$/;"	f	signature:(char_u *path_name)
gui_may_resize_shell	vim/vim/src/gui.c	/^gui_may_resize_shell(void)$/;"	f	signature:(void)
gui_may_update_scrollbars	vim/vim/src/gui.c	/^gui_may_update_scrollbars(void)$/;"	f	signature:(void)
gui_mch_activate_window	vim/vim/src/gui_w32.c	/^gui_mch_activate_window(void)$/;"	f	signature:(void)
gui_mch_add_menu	vim/vim/src/gui_athena.c	/^gui_mch_add_menu(vimmenu_T *menu, int idx UNUSED)$/;"	f	signature:(vimmenu_T *menu, int idx UNUSED)
gui_mch_add_menu	vim/vim/src/gui_gtk.c	/^gui_mch_add_menu(vimmenu_T *menu, int idx)$/;"	f	signature:(vimmenu_T *menu, int idx)
gui_mch_add_menu	vim/vim/src/gui_mac.c	/^gui_mch_add_menu(vimmenu_T *menu, int idx)$/;"	f	signature:(vimmenu_T *menu, int idx)
gui_mch_add_menu	vim/vim/src/gui_motif.c	/^gui_mch_add_menu(vimmenu_T *menu, int idx)$/;"	f	signature:(vimmenu_T *menu, int idx)
gui_mch_add_menu	vim/vim/src/gui_photon.c	/^gui_mch_add_menu(vimmenu_T *menu, int index)$/;"	f	signature:(vimmenu_T *menu, int index)
gui_mch_add_menu	vim/vim/src/gui_w32.c	/^gui_mch_add_menu($/;"	f	signature:( vimmenu_T *menu, int pos)
gui_mch_add_menu_item	vim/vim/src/gui_athena.c	/^gui_mch_add_menu_item(vimmenu_T *menu, int idx UNUSED)$/;"	f	signature:(vimmenu_T *menu, int idx UNUSED)
gui_mch_add_menu_item	vim/vim/src/gui_gtk.c	/^gui_mch_add_menu_item(vimmenu_T *menu, int idx)$/;"	f	signature:(vimmenu_T *menu, int idx)
gui_mch_add_menu_item	vim/vim/src/gui_mac.c	/^gui_mch_add_menu_item(vimmenu_T *menu, int idx)$/;"	f	signature:(vimmenu_T *menu, int idx)
gui_mch_add_menu_item	vim/vim/src/gui_motif.c	/^gui_mch_add_menu_item(vimmenu_T *menu, int idx)$/;"	f	signature:(vimmenu_T *menu, int idx)
gui_mch_add_menu_item	vim/vim/src/gui_photon.c	/^gui_mch_add_menu_item(vimmenu_T *menu, int index)$/;"	f	signature:(vimmenu_T *menu, int index)
gui_mch_add_menu_item	vim/vim/src/gui_w32.c	/^gui_mch_add_menu_item($/;"	f	signature:( vimmenu_T *menu, int idx)
gui_mch_adjust_charheight	vim/vim/src/gui_gtk_x11.c	/^gui_mch_adjust_charheight(void)$/;"	f	signature:(void)
gui_mch_adjust_charheight	vim/vim/src/gui_mac.c	/^gui_mch_adjust_charheight(void)$/;"	f	signature:(void)
gui_mch_adjust_charheight	vim/vim/src/gui_photon.c	/^gui_mch_adjust_charheight(void)$/;"	f	signature:(void)
gui_mch_adjust_charheight	vim/vim/src/gui_w32.c	/^gui_mch_adjust_charheight(void)$/;"	f	signature:(void)
gui_mch_adjust_charheight	vim/vim/src/gui_x11.c	/^gui_mch_adjust_charheight(void)$/;"	f	signature:(void)
gui_mch_beep	vim/vim/src/gui_gtk_x11.c	/^gui_mch_beep(void)$/;"	f	signature:(void)
gui_mch_beep	vim/vim/src/gui_mac.c	/^gui_mch_beep(void)$/;"	f	signature:(void)
gui_mch_beep	vim/vim/src/gui_photon.c	/^gui_mch_beep(void)$/;"	f	signature:(void)
gui_mch_beep	vim/vim/src/gui_w32.c	/^gui_mch_beep(void)$/;"	f	signature:(void)
gui_mch_beep	vim/vim/src/gui_x11.c	/^gui_mch_beep(void)$/;"	f	signature:(void)
gui_mch_browse	vim/vim/src/gui_athena.c	/^gui_mch_browse($/;"	f	signature:( int saving UNUSED, char_u *title, char_u *dflt, char_u *ext UNUSED, char_u *initdir, char_u *filter UNUSED)
gui_mch_browse	vim/vim/src/gui_gtk.c	/^gui_mch_browse(int saving UNUSED,$/;"	f	signature:(int saving UNUSED, char_u *title, char_u *dflt, char_u *ext UNUSED, char_u *initdir, char_u *filter)
gui_mch_browse	vim/vim/src/gui_mac.c	/^gui_mch_browse($/;"	f	signature:( int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter)
gui_mch_browse	vim/vim/src/gui_motif.c	/^gui_mch_browse($/;"	f	signature:( int saving UNUSED, char_u *title, char_u *dflt, char_u *ext UNUSED, char_u *initdir, char_u *filter)
gui_mch_browse	vim/vim/src/gui_photon.c	/^gui_mch_browse($/;"	f	signature:( int saving, char_u *title, char_u *default_name, char_u *ext, char_u *initdir, char_u *filter)
gui_mch_browse	vim/vim/src/gui_w32.c	/^gui_mch_browse($/;"	f	signature:( int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter)
gui_mch_browseW	vim/vim/src/gui_w32.c	/^gui_mch_browseW($/;"	f	file:	signature:( int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter)
gui_mch_browsedir	vim/vim/src/gui_gtk.c	/^gui_mch_browsedir($/;"	f	signature:( char_u *title, char_u *initdir)
gui_mch_browsedir	vim/vim/src/gui_w32.c	/^gui_mch_browsedir(char_u *title, char_u *initdir)$/;"	f	signature:(char_u *title, char_u *initdir)
gui_mch_clear_all	vim/vim/src/gui_gtk_x11.c	/^gui_mch_clear_all(void)$/;"	f	signature:(void)
gui_mch_clear_all	vim/vim/src/gui_mac.c	/^gui_mch_clear_all(void)$/;"	f	signature:(void)
gui_mch_clear_all	vim/vim/src/gui_photon.c	/^gui_mch_clear_all(void)$/;"	f	signature:(void)
gui_mch_clear_all	vim/vim/src/gui_w32.c	/^gui_mch_clear_all(void)$/;"	f	signature:(void)
gui_mch_clear_all	vim/vim/src/gui_x11.c	/^gui_mch_clear_all(void)$/;"	f	signature:(void)
gui_mch_clear_block	vim/vim/src/gui_gtk_x11.c	/^gui_mch_clear_block(int row1arg, int col1arg, int row2arg, int col2arg)$/;"	f	signature:(int row1arg, int col1arg, int row2arg, int col2arg)
gui_mch_clear_block	vim/vim/src/gui_mac.c	/^gui_mch_clear_block(int row1, int col1, int row2, int col2)$/;"	f	signature:(int row1, int col1, int row2, int col2)
gui_mch_clear_block	vim/vim/src/gui_photon.c	/^gui_mch_clear_block(int row1, int col1, int row2, int col2)$/;"	f	signature:(int row1, int col1, int row2, int col2)
gui_mch_clear_block	vim/vim/src/gui_w32.c	/^gui_mch_clear_block($/;"	f	signature:( int row1, int col1, int row2, int col2)
gui_mch_clear_block	vim/vim/src/gui_x11.c	/^gui_mch_clear_block($/;"	f	signature:( int row1, int col1, int row2, int col2)
gui_mch_compute_footer_height	vim/vim/src/gui_motif.c	/^gui_mch_compute_footer_height(void)$/;"	f	file:	signature:(void)
gui_mch_compute_footer_height	vim/vim/src/gui_motif.c	/^static int gui_mch_compute_footer_height(void);$/;"	p	file:	signature:(void)
gui_mch_compute_menu_height	vim/vim/src/gui_motif.c	/^gui_mch_compute_menu_height($/;"	f	signature:( Widget id)
gui_mch_compute_toolbar_height	vim/vim/src/gui_athena.c	/^gui_mch_compute_toolbar_height(void)$/;"	f	signature:(void)
gui_mch_compute_toolbar_height	vim/vim/src/gui_motif.c	/^gui_mch_compute_toolbar_height(void)$/;"	f	signature:(void)
gui_mch_create_beval_area	vim/vim/src/gui_beval.c	/^gui_mch_create_beval_area($/;"	f	signature:( void *target, char_u *mesg, void (*mesgCB)(BalloonEval *, int), void *clientData)
gui_mch_create_beval_area	vim/vim/src/gui_w32.c	/^gui_mch_create_beval_area($/;"	f	signature:( void *target, char_u *mesg, void (*mesgCB)(BalloonEval *, int), void *clientData)
gui_mch_create_scrollbar	vim/vim/src/gui_athena.c	/^gui_mch_create_scrollbar($/;"	f	signature:( scrollbar_T *sb, int orient)
gui_mch_create_scrollbar	vim/vim/src/gui_gtk.c	/^gui_mch_create_scrollbar(scrollbar_T *sb, int orient)$/;"	f	signature:(scrollbar_T *sb, int orient)
gui_mch_create_scrollbar	vim/vim/src/gui_mac.c	/^gui_mch_create_scrollbar($/;"	f	signature:( scrollbar_T *sb, int orient)
gui_mch_create_scrollbar	vim/vim/src/gui_motif.c	/^gui_mch_create_scrollbar($/;"	f	signature:( scrollbar_T *sb, int orient)
gui_mch_create_scrollbar	vim/vim/src/gui_photon.c	/^gui_mch_create_scrollbar(scrollbar_T *sb, int orient)$/;"	f	signature:(scrollbar_T *sb, int orient)
gui_mch_create_scrollbar	vim/vim/src/gui_w32.c	/^gui_mch_create_scrollbar($/;"	f	signature:( scrollbar_T *sb, int orient)
gui_mch_currently_showing_beval	vim/vim/src/gui_beval.c	/^gui_mch_currently_showing_beval(void)$/;"	f	signature:(void)
gui_mch_def_colors	vim/vim/src/gui_athena.c	/^gui_mch_def_colors(void)$/;"	f	signature:(void)
gui_mch_def_colors	vim/vim/src/gui_motif.c	/^gui_mch_def_colors(void)$/;"	f	signature:(void)
gui_mch_def_colors	vim/vim/src/gui_w32.c	/^gui_mch_def_colors(void)$/;"	f	signature:(void)
gui_mch_delete_lines	vim/vim/src/gui_gtk_x11.c	/^gui_mch_delete_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_delete_lines	vim/vim/src/gui_mac.c	/^gui_mch_delete_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_delete_lines	vim/vim/src/gui_photon.c	/^gui_mch_delete_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_delete_lines	vim/vim/src/gui_w32.c	/^gui_mch_delete_lines($/;"	f	signature:( int row, int num_lines)
gui_mch_delete_lines	vim/vim/src/gui_x11.c	/^gui_mch_delete_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_destroy_beval_area	vim/vim/src/gui_beval.c	/^gui_mch_destroy_beval_area(BalloonEval *beval)$/;"	f	signature:(BalloonEval *beval)
gui_mch_destroy_beval_area	vim/vim/src/gui_w32.c	/^gui_mch_destroy_beval_area(BalloonEval *beval)$/;"	f	signature:(BalloonEval *beval)
gui_mch_destroy_menu	vim/vim/src/gui_athena.c	/^gui_mch_destroy_menu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_destroy_menu	vim/vim/src/gui_gtk.c	/^gui_mch_destroy_menu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_destroy_menu	vim/vim/src/gui_mac.c	/^gui_mch_destroy_menu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_destroy_menu	vim/vim/src/gui_motif.c	/^gui_mch_destroy_menu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_destroy_menu	vim/vim/src/gui_photon.c	/^gui_mch_destroy_menu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_destroy_menu	vim/vim/src/gui_w32.c	/^gui_mch_destroy_menu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_destroy_scrollbar	vim/vim/src/gui_athena.c	/^gui_mch_destroy_scrollbar(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_destroy_scrollbar	vim/vim/src/gui_gtk.c	/^gui_mch_destroy_scrollbar(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_destroy_scrollbar	vim/vim/src/gui_mac.c	/^gui_mch_destroy_scrollbar(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_destroy_scrollbar	vim/vim/src/gui_motif.c	/^gui_mch_destroy_scrollbar(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_destroy_scrollbar	vim/vim/src/gui_photon.c	/^gui_mch_destroy_scrollbar(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_destroy_scrollbar	vim/vim/src/gui_w32.c	/^gui_mch_destroy_scrollbar(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_destroy_sign	vim/vim/src/gui_gtk_x11.c	/^gui_mch_destroy_sign(void *sign)$/;"	f	signature:(void *sign)
gui_mch_destroy_sign	vim/vim/src/gui_w32.c	/^gui_mch_destroy_sign(void *sign)$/;"	f	signature:(void *sign)
gui_mch_destroy_sign	vim/vim/src/gui_x11.c	/^gui_mch_destroy_sign(void *sign)$/;"	f	signature:(void *sign)
gui_mch_dialog	vim/vim/src/gui_athena.c	/^gui_mch_dialog($/;"	f	signature:( int type UNUSED, char_u *title, char_u *message, char_u *buttons, int dfltbutton UNUSED, char_u *textfield, int ex_cmd UNUSED)
gui_mch_dialog	vim/vim/src/gui_gtk.c	/^gui_mch_dialog(int	type,	    \/* type of dialog *\/$/;"	f	signature:(int type, char_u *title, char_u *message, char_u *buttons, int def_but, char_u *textfield, int ex_cmd UNUSED)
gui_mch_dialog	vim/vim/src/gui_mac.c	/^gui_mch_dialog($/;"	f	signature:( int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd)
gui_mch_dialog	vim/vim/src/gui_motif.c	/^gui_mch_dialog($/;"	f	signature:( int type UNUSED, char_u *title, char_u *message, char_u *button_names, int dfltbutton, char_u *textfield, int ex_cmd UNUSED)
gui_mch_dialog	vim/vim/src/gui_photon.c	/^gui_mch_dialog($/;"	f	signature:( int type, char_u *title, char_u *message, char_u *buttons, int default_button, char_u *textfield, int ex_cmd)
gui_mch_dialog	vim/vim/src/gui_w32.c	/^gui_mch_dialog($/;"	f	signature:( int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton, char_u *textfield, int ex_cmd)
gui_mch_disable_beval_area	vim/vim/src/gui_beval.c	/^gui_mch_disable_beval_area(BalloonEval *beval)$/;"	f	signature:(BalloonEval *beval)
gui_mch_disable_beval_area	vim/vim/src/gui_w32.c	/^gui_mch_disable_beval_area(BalloonEval *beval UNUSED)$/;"	f	signature:(BalloonEval *beval UNUSED)
gui_mch_draw_hollow_cursor	vim/vim/src/gui_gtk_x11.c	/^gui_mch_draw_hollow_cursor(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_draw_hollow_cursor	vim/vim/src/gui_mac.c	/^gui_mch_draw_hollow_cursor(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_draw_hollow_cursor	vim/vim/src/gui_photon.c	/^gui_mch_draw_hollow_cursor(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_draw_hollow_cursor	vim/vim/src/gui_w32.c	/^gui_mch_draw_hollow_cursor(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_draw_hollow_cursor	vim/vim/src/gui_x11.c	/^gui_mch_draw_hollow_cursor(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_draw_menubar	vim/vim/src/gui_gtk_x11.c	/^gui_mch_draw_menubar(void)$/;"	f	signature:(void)
gui_mch_draw_menubar	vim/vim/src/gui_mac.c	/^gui_mch_draw_menubar(void)$/;"	f	signature:(void)
gui_mch_draw_menubar	vim/vim/src/gui_photon.c	/^gui_mch_draw_menubar(void)$/;"	f	signature:(void)
gui_mch_draw_menubar	vim/vim/src/gui_w32.c	/^gui_mch_draw_menubar(void)$/;"	f	signature:(void)
gui_mch_draw_menubar	vim/vim/src/gui_x11.c	/^gui_mch_draw_menubar(void)$/;"	f	signature:(void)
gui_mch_draw_part_cursor	vim/vim/src/gui_gtk_x11.c	/^gui_mch_draw_part_cursor(int w, int h, guicolor_T color)$/;"	f	signature:(int w, int h, guicolor_T color)
gui_mch_draw_part_cursor	vim/vim/src/gui_mac.c	/^gui_mch_draw_part_cursor(int w, int h, guicolor_T color)$/;"	f	signature:(int w, int h, guicolor_T color)
gui_mch_draw_part_cursor	vim/vim/src/gui_photon.c	/^gui_mch_draw_part_cursor(int w, int h, guicolor_T color)$/;"	f	signature:(int w, int h, guicolor_T color)
gui_mch_draw_part_cursor	vim/vim/src/gui_w32.c	/^gui_mch_draw_part_cursor($/;"	f	signature:( int w, int h, guicolor_T color)
gui_mch_draw_part_cursor	vim/vim/src/gui_x11.c	/^gui_mch_draw_part_cursor(int w, int h, guicolor_T color)$/;"	f	signature:(int w, int h, guicolor_T color)
gui_mch_draw_string	vim/vim/src/gui_mac.c	/^gui_mch_draw_string(int row, int col, char_u *s, int len, int flags)$/;"	f	signature:(int row, int col, char_u *s, int len, int flags)
gui_mch_draw_string	vim/vim/src/gui_photon.c	/^gui_mch_draw_string(int row, int col, char_u *s, int len, int flags)$/;"	f	signature:(int row, int col, char_u *s, int len, int flags)
gui_mch_draw_string	vim/vim/src/gui_w32.c	/^gui_mch_draw_string($/;"	f	signature:( int row, int col, char_u *text, int len, int flags)
gui_mch_draw_string	vim/vim/src/gui_x11.c	/^gui_mch_draw_string($/;"	f	signature:( int row, int col, char_u *s, int len, int flags)
gui_mch_drawsign	vim/vim/src/gui_gtk_x11.c	/^gui_mch_drawsign(int row, int col, int typenr)$/;"	f	signature:(int row, int col, int typenr)
gui_mch_drawsign	vim/vim/src/gui_w32.c	/^gui_mch_drawsign(int row, int col, int typenr)$/;"	f	signature:(int row, int col, int typenr)
gui_mch_drawsign	vim/vim/src/gui_x11.c	/^gui_mch_drawsign(int row, int col, int typenr)$/;"	f	signature:(int row, int col, int typenr)
gui_mch_early_init_check	vim/vim/src/gui_gtk_x11.c	/^gui_mch_early_init_check(int give_message)$/;"	f	signature:(int give_message)
gui_mch_enable_beval_area	vim/vim/src/gui_beval.c	/^gui_mch_enable_beval_area(BalloonEval *beval)$/;"	f	signature:(BalloonEval *beval)
gui_mch_enable_beval_area	vim/vim/src/gui_w32.c	/^gui_mch_enable_beval_area(BalloonEval *beval)$/;"	f	signature:(BalloonEval *beval)
gui_mch_enable_footer	vim/vim/src/gui_motif.c	/^gui_mch_enable_footer(int showit)$/;"	f	signature:(int showit)
gui_mch_enable_menu	vim/vim/src/gui_athena.c	/^gui_mch_enable_menu(int flag)$/;"	f	signature:(int flag)
gui_mch_enable_menu	vim/vim/src/gui_gtk_x11.c	/^gui_mch_enable_menu(int showit)$/;"	f	signature:(int showit)
gui_mch_enable_menu	vim/vim/src/gui_mac.c	/^gui_mch_enable_menu(int flag)$/;"	f	signature:(int flag)
gui_mch_enable_menu	vim/vim/src/gui_motif.c	/^gui_mch_enable_menu(int flag)$/;"	f	signature:(int flag)
gui_mch_enable_menu	vim/vim/src/gui_photon.c	/^gui_mch_enable_menu(int flag)$/;"	f	signature:(int flag)
gui_mch_enable_menu	vim/vim/src/gui_w32.c	/^gui_mch_enable_menu(int flag)$/;"	f	signature:(int flag)
gui_mch_enable_scrollbar	vim/vim/src/gui_athena.c	/^gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)$/;"	f	signature:(scrollbar_T *sb, int flag)
gui_mch_enable_scrollbar	vim/vim/src/gui_gtk_x11.c	/^gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)$/;"	f	signature:(scrollbar_T *sb, int flag)
gui_mch_enable_scrollbar	vim/vim/src/gui_mac.c	/^gui_mch_enable_scrollbar($/;"	f	signature:( scrollbar_T *sb, int flag)
gui_mch_enable_scrollbar	vim/vim/src/gui_motif.c	/^gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)$/;"	f	signature:(scrollbar_T *sb, int flag)
gui_mch_enable_scrollbar	vim/vim/src/gui_photon.c	/^gui_mch_enable_scrollbar(scrollbar_T *sb, int flag)$/;"	f	signature:(scrollbar_T *sb, int flag)
gui_mch_enable_scrollbar	vim/vim/src/gui_w32.c	/^gui_mch_enable_scrollbar($/;"	f	signature:( scrollbar_T *sb, int flag)
gui_mch_exit	vim/vim/src/gui_gtk_x11.c	/^gui_mch_exit(int rc UNUSED)$/;"	f	signature:(int rc UNUSED)
gui_mch_exit	vim/vim/src/gui_mac.c	/^gui_mch_exit(int rc)$/;"	f	signature:(int rc)
gui_mch_exit	vim/vim/src/gui_photon.c	/^gui_mch_exit(int rc)$/;"	f	signature:(int rc)
gui_mch_exit	vim/vim/src/gui_w32.c	/^gui_mch_exit(int rc UNUSED)$/;"	f	signature:(int rc UNUSED)
gui_mch_exit	vim/vim/src/gui_x11.c	/^gui_mch_exit(int rc UNUSED)$/;"	f	signature:(int rc UNUSED)
gui_mch_find_dialog	vim/vim/src/ex_docmd.c	239;"	d	file:
gui_mch_find_dialog	vim/vim/src/gui_gtk.c	/^gui_mch_find_dialog(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
gui_mch_find_dialog	vim/vim/src/gui_motif.c	/^gui_mch_find_dialog(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
gui_mch_find_dialog	vim/vim/src/gui_w32.c	/^gui_mch_find_dialog(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
gui_mch_flash	vim/vim/src/gui_gtk_x11.c	/^gui_mch_flash(int msec)$/;"	f	signature:(int msec)
gui_mch_flash	vim/vim/src/gui_mac.c	/^gui_mch_flash(int msec)$/;"	f	signature:(int msec)
gui_mch_flash	vim/vim/src/gui_photon.c	/^gui_mch_flash(int msec)$/;"	f	signature:(int msec)
gui_mch_flash	vim/vim/src/gui_w32.c	/^gui_mch_flash(int msec)$/;"	f	signature:(int msec)
gui_mch_flash	vim/vim/src/gui_x11.c	/^gui_mch_flash(int msec)$/;"	f	signature:(int msec)
gui_mch_flush	vim/vim/src/gui_gtk_x11.c	/^gui_mch_flush(void)$/;"	f	signature:(void)
gui_mch_flush	vim/vim/src/gui_mac.c	/^gui_mch_flush(void)$/;"	f	signature:(void)
gui_mch_flush	vim/vim/src/gui_photon.c	/^gui_mch_flush(void)$/;"	f	signature:(void)
gui_mch_flush	vim/vim/src/gui_w32.c	/^gui_mch_flush(void)$/;"	f	signature:(void)
gui_mch_flush	vim/vim/src/gui_x11.c	/^gui_mch_flush(void)$/;"	f	signature:(void)
gui_mch_font_dialog	vim/vim/src/gui_gtk_x11.c	/^gui_mch_font_dialog(char_u *oldval)$/;"	f	signature:(char_u *oldval)
gui_mch_forked	vim/vim/src/gui_gtk_x11.c	/^gui_mch_forked(void)$/;"	f	signature:(void)
gui_mch_free_all	vim/vim/src/gui_gtk_x11.c	/^gui_mch_free_all(void)$/;"	f	signature:(void)
gui_mch_free_font	vim/vim/src/gui_gtk_x11.c	/^gui_mch_free_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_free_font	vim/vim/src/gui_mac.c	/^gui_mch_free_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_free_font	vim/vim/src/gui_photon.c	/^gui_mch_free_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_free_font	vim/vim/src/gui_w32.c	/^gui_mch_free_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_free_font	vim/vim/src/gui_x11.c	/^gui_mch_free_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_free_fontset	vim/vim/src/gui_x11.c	/^gui_mch_free_fontset(GuiFontset fontset)$/;"	f	signature:(GuiFontset fontset)
gui_mch_get_color	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_color(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_get_color	vim/vim/src/gui_mac.c	/^gui_mch_get_color(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_get_color	vim/vim/src/gui_photon.c	/^gui_mch_get_color(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_get_color	vim/vim/src/gui_w32.c	/^gui_mch_get_color(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_get_color	vim/vim/src/gui_x11.c	/^gui_mch_get_color(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_get_display	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_display(void)$/;"	f	signature:(void)
gui_mch_get_font	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_font(char_u *name, int report_error)$/;"	f	signature:(char_u *name, int report_error)
gui_mch_get_font	vim/vim/src/gui_mac.c	/^gui_mch_get_font(char_u *name, int giveErrorIfMissing)$/;"	f	signature:(char_u *name, int giveErrorIfMissing)
gui_mch_get_font	vim/vim/src/gui_photon.c	/^gui_mch_get_font(char_u *vim_font_name, int report_error)$/;"	f	signature:(char_u *vim_font_name, int report_error)
gui_mch_get_font	vim/vim/src/gui_w32.c	/^gui_mch_get_font($/;"	f	signature:( char_u *name, int giveErrorIfMissing)
gui_mch_get_font	vim/vim/src/gui_x11.c	/^gui_mch_get_font(char_u *name, int giveErrorIfMissing)$/;"	f	signature:(char_u *name, int giveErrorIfMissing)
gui_mch_get_fontname	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_fontname(GuiFont font, char_u *name UNUSED)$/;"	f	signature:(GuiFont font, char_u *name UNUSED)
gui_mch_get_fontname	vim/vim/src/gui_mac.c	/^gui_mch_get_fontname(GuiFont font, char_u *name)$/;"	f	signature:(GuiFont font, char_u *name)
gui_mch_get_fontname	vim/vim/src/gui_photon.c	/^gui_mch_get_fontname(GuiFont font, char_u *name)$/;"	f	signature:(GuiFont font, char_u *name)
gui_mch_get_fontname	vim/vim/src/gui_w32.c	/^gui_mch_get_fontname(GuiFont font UNUSED, char_u *name)$/;"	f	signature:(GuiFont font UNUSED, char_u *name)
gui_mch_get_fontname	vim/vim/src/gui_x11.c	/^gui_mch_get_fontname(GuiFont font, char_u *name)$/;"	f	signature:(GuiFont font, char_u *name)
gui_mch_get_fontset	vim/vim/src/gui_x11.c	/^gui_mch_get_fontset($/;"	f	signature:( char_u *name, int giveErrorIfMissing, int fixed_width)
gui_mch_get_rgb	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_rgb(guicolor_T pixel)$/;"	f	signature:(guicolor_T pixel)
gui_mch_get_rgb	vim/vim/src/gui_mac.c	/^gui_mch_get_rgb(guicolor_T pixel)$/;"	f	signature:(guicolor_T pixel)
gui_mch_get_rgb	vim/vim/src/gui_photon.c	/^gui_mch_get_rgb(guicolor_T pixel)$/;"	f	signature:(guicolor_T pixel)
gui_mch_get_rgb	vim/vim/src/gui_w32.c	/^gui_mch_get_rgb(guicolor_T pixel)$/;"	f	signature:(guicolor_T pixel)
gui_mch_get_rgb	vim/vim/src/gui_x11.c	/^gui_mch_get_rgb(guicolor_T pixel)$/;"	f	signature:(guicolor_T pixel)
gui_mch_get_rgb_color	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_rgb_color(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
gui_mch_get_rgb_color	vim/vim/src/gui_mac.c	/^gui_mch_get_rgb_color(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
gui_mch_get_rgb_color	vim/vim/src/gui_photon.c	/^gui_mch_get_rgb_color(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
gui_mch_get_rgb_color	vim/vim/src/gui_w32.c	/^gui_mch_get_rgb_color(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
gui_mch_get_rgb_color	vim/vim/src/gui_x11.c	/^gui_mch_get_rgb_color(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
gui_mch_get_screen_dimensions	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)$/;"	f	signature:(int *screen_w, int *screen_h)
gui_mch_get_screen_dimensions	vim/vim/src/gui_mac.c	/^gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)$/;"	f	signature:(int *screen_w, int *screen_h)
gui_mch_get_screen_dimensions	vim/vim/src/gui_photon.c	/^gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)$/;"	f	signature:(int *screen_w, int *screen_h)
gui_mch_get_screen_dimensions	vim/vim/src/gui_w32.c	/^gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)$/;"	f	signature:(int *screen_w, int *screen_h)
gui_mch_get_screen_dimensions	vim/vim/src/gui_x11.c	/^gui_mch_get_screen_dimensions($/;"	f	signature:( int *screen_w, int *screen_h)
gui_mch_get_toolbar_colors	vim/vim/src/gui_athena.c	/^gui_mch_get_toolbar_colors($/;"	f	signature:( Pixel *bgp, Pixel *fgp, Pixel *bsp, Pixel *tsp, Pixel *hsp)
gui_mch_get_winpos	vim/vim/src/gui_gtk_x11.c	/^gui_mch_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_get_winpos	vim/vim/src/gui_mac.c	/^gui_mch_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_get_winpos	vim/vim/src/gui_photon.c	/^gui_mch_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_get_winpos	vim/vim/src/gui_w32.c	/^gui_mch_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_get_winpos	vim/vim/src/gui_x11.c	/^gui_mch_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_getmouse	vim/vim/src/gui_gtk_x11.c	/^gui_mch_getmouse(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_getmouse	vim/vim/src/gui_mac.c	/^gui_mch_getmouse(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_getmouse	vim/vim/src/gui_photon.c	/^gui_mch_getmouse(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_getmouse	vim/vim/src/gui_w32.c	/^gui_mch_getmouse(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_getmouse	vim/vim/src/gui_x11.c	/^gui_mch_getmouse(int *x, int *y)$/;"	f	signature:(int *x, int *y)
gui_mch_haskey	vim/vim/src/gui_gtk_x11.c	/^gui_mch_haskey(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_haskey	vim/vim/src/gui_mac.c	/^gui_mch_haskey(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_haskey	vim/vim/src/gui_photon.c	/^gui_mch_haskey(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_haskey	vim/vim/src/gui_w32.c	/^gui_mch_haskey(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_haskey	vim/vim/src/gui_x11.c	/^gui_mch_haskey(char_u *name)$/;"	f	signature:(char_u *name)
gui_mch_iconify	vim/vim/src/gui_gtk_x11.c	/^gui_mch_iconify(void)$/;"	f	signature:(void)
gui_mch_iconify	vim/vim/src/gui_mac.c	/^gui_mch_iconify(void)$/;"	f	signature:(void)
gui_mch_iconify	vim/vim/src/gui_photon.c	/^gui_mch_iconify(void)$/;"	f	signature:(void)
gui_mch_iconify	vim/vim/src/gui_w32.c	/^gui_mch_iconify(void)$/;"	f	signature:(void)
gui_mch_iconify	vim/vim/src/gui_x11.c	/^gui_mch_iconify(void)$/;"	f	signature:(void)
gui_mch_init	vim/vim/src/gui_gtk_x11.c	/^gui_mch_init(void)$/;"	f	signature:(void)
gui_mch_init	vim/vim/src/gui_mac.c	/^gui_mch_init(void)$/;"	f	signature:(void)
gui_mch_init	vim/vim/src/gui_photon.c	/^gui_mch_init(void)$/;"	f	signature:(void)
gui_mch_init	vim/vim/src/gui_w32.c	/^gui_mch_init(void)$/;"	f	signature:(void)
gui_mch_init	vim/vim/src/gui_x11.c	/^gui_mch_init(void)$/;"	f	signature:(void)
gui_mch_init_check	vim/vim/src/gui_gtk_x11.c	/^gui_mch_init_check(void)$/;"	f	signature:(void)
gui_mch_init_check	vim/vim/src/gui_mac.c	/^gui_mch_init_check(void)$/;"	f	signature:(void)
gui_mch_init_check	vim/vim/src/gui_photon.c	/^gui_mch_init_check(void)$/;"	f	signature:(void)
gui_mch_init_check	vim/vim/src/gui_x11.c	/^gui_mch_init_check(void)$/;"	f	signature:(void)
gui_mch_init_font	vim/vim/src/gui_gtk_x11.c	/^gui_mch_init_font(char_u *font_name, int fontset UNUSED)$/;"	f	signature:(char_u *font_name, int fontset UNUSED)
gui_mch_init_font	vim/vim/src/gui_mac.c	/^gui_mch_init_font(char_u *font_name, int fontset)$/;"	f	signature:(char_u *font_name, int fontset)
gui_mch_init_font	vim/vim/src/gui_photon.c	/^gui_mch_init_font(char_u *vim_font_name, int fontset)$/;"	f	signature:(char_u *vim_font_name, int fontset)
gui_mch_init_font	vim/vim/src/gui_w32.c	/^gui_mch_init_font(char_u *font_name, int fontset UNUSED)$/;"	f	signature:(char_u *font_name, int fontset UNUSED)
gui_mch_init_font	vim/vim/src/gui_x11.c	/^gui_mch_init_font($/;"	f	signature:( char_u *font_name, int do_fontset UNUSED)
gui_mch_insert_lines	vim/vim/src/gui_gtk_x11.c	/^gui_mch_insert_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_insert_lines	vim/vim/src/gui_mac.c	/^gui_mch_insert_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_insert_lines	vim/vim/src/gui_photon.c	/^gui_mch_insert_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_insert_lines	vim/vim/src/gui_w32.c	/^gui_mch_insert_lines($/;"	f	signature:( int row, int num_lines)
gui_mch_insert_lines	vim/vim/src/gui_x11.c	/^gui_mch_insert_lines(int row, int num_lines)$/;"	f	signature:(int row, int num_lines)
gui_mch_invert_rectangle	vim/vim/src/gui_gtk_x11.c	/^gui_mch_invert_rectangle(int r, int c, int nr, int nc)$/;"	f	signature:(int r, int c, int nr, int nc)
gui_mch_invert_rectangle	vim/vim/src/gui_mac.c	/^gui_mch_invert_rectangle(int r, int c, int nr, int nc)$/;"	f	signature:(int r, int c, int nr, int nc)
gui_mch_invert_rectangle	vim/vim/src/gui_photon.c	/^gui_mch_invert_rectangle(int row, int col, int nr, int nc)$/;"	f	signature:(int row, int col, int nr, int nc)
gui_mch_invert_rectangle	vim/vim/src/gui_w32.c	/^gui_mch_invert_rectangle($/;"	f	signature:( int r, int c, int nr, int nc)
gui_mch_invert_rectangle	vim/vim/src/gui_x11.c	/^gui_mch_invert_rectangle($/;"	f	signature:( int r, int c, int nr, int nc)
gui_mch_is_blink_off	vim/vim/src/gui_gtk_x11.c	/^gui_mch_is_blink_off(void)$/;"	f	signature:(void)
gui_mch_is_blink_off	vim/vim/src/gui_mac.c	/^gui_mch_is_blink_off(void)$/;"	f	signature:(void)
gui_mch_is_blink_off	vim/vim/src/gui_photon.c	/^gui_mch_is_blink_off(void)$/;"	f	signature:(void)
gui_mch_is_blink_off	vim/vim/src/gui_w32.c	/^gui_mch_is_blink_off(void)$/;"	f	signature:(void)
gui_mch_is_blink_off	vim/vim/src/gui_x11.c	/^gui_mch_is_blink_off(void)$/;"	f	signature:(void)
gui_mch_is_blinking	vim/vim/src/gui_gtk_x11.c	/^gui_mch_is_blinking(void)$/;"	f	signature:(void)
gui_mch_is_blinking	vim/vim/src/gui_mac.c	/^gui_mch_is_blinking(void)$/;"	f	signature:(void)
gui_mch_is_blinking	vim/vim/src/gui_photon.c	/^gui_mch_is_blinking(void)$/;"	f	signature:(void)
gui_mch_is_blinking	vim/vim/src/gui_w32.c	/^gui_mch_is_blinking(void)$/;"	f	signature:(void)
gui_mch_is_blinking	vim/vim/src/gui_x11.c	/^gui_mch_is_blinking(void)$/;"	f	signature:(void)
gui_mch_maximized	vim/vim/src/gui_gtk_x11.c	/^gui_mch_maximized(void)$/;"	f	signature:(void)
gui_mch_maximized	vim/vim/src/gui_w32.c	/^gui_mch_maximized(void)$/;"	f	signature:(void)
gui_mch_menu_grey	vim/vim/src/gui_gtk_x11.c	/^gui_mch_menu_grey(vimmenu_T *menu, int grey)$/;"	f	signature:(vimmenu_T *menu, int grey)
gui_mch_menu_grey	vim/vim/src/gui_mac.c	/^gui_mch_menu_grey(vimmenu_T *menu, int grey)$/;"	f	signature:(vimmenu_T *menu, int grey)
gui_mch_menu_grey	vim/vim/src/gui_photon.c	/^gui_mch_menu_grey(vimmenu_T *menu, int grey)$/;"	f	signature:(vimmenu_T *menu, int grey)
gui_mch_menu_grey	vim/vim/src/gui_w32.c	/^gui_mch_menu_grey($/;"	f	signature:( vimmenu_T *menu, int grey)
gui_mch_menu_grey	vim/vim/src/gui_x11.c	/^gui_mch_menu_grey(vimmenu_T *menu, int grey)$/;"	f	signature:(vimmenu_T *menu, int grey)
gui_mch_menu_hidden	vim/vim/src/gui_gtk_x11.c	/^gui_mch_menu_hidden(vimmenu_T *menu, int hidden)$/;"	f	signature:(vimmenu_T *menu, int hidden)
gui_mch_menu_hidden	vim/vim/src/gui_mac.c	/^gui_mch_menu_hidden(vimmenu_T *menu, int hidden)$/;"	f	signature:(vimmenu_T *menu, int hidden)
gui_mch_menu_hidden	vim/vim/src/gui_photon.c	/^gui_mch_menu_hidden(vimmenu_T *menu, int hidden)$/;"	f	signature:(vimmenu_T *menu, int hidden)
gui_mch_menu_hidden	vim/vim/src/gui_w32.c	/^gui_mch_menu_hidden($/;"	f	signature:( vimmenu_T *menu, int hidden)
gui_mch_menu_hidden	vim/vim/src/gui_x11.c	/^gui_mch_menu_hidden(vimmenu_T *menu, int hidden)$/;"	f	signature:(vimmenu_T *menu, int hidden)
gui_mch_menu_set_tip	vim/vim/src/gui_gtk.c	/^gui_mch_menu_set_tip(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_menu_set_tip	vim/vim/src/gui_x11.c	/^gui_mch_menu_set_tip(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_mousehide	vim/vim/src/gui_gtk_x11.c	/^gui_mch_mousehide(int hide)$/;"	f	signature:(int hide)
gui_mch_mousehide	vim/vim/src/gui_mac.c	/^gui_mch_mousehide(int hide)$/;"	f	signature:(int hide)
gui_mch_mousehide	vim/vim/src/gui_photon.c	/^gui_mch_mousehide(int hide)$/;"	f	signature:(int hide)
gui_mch_mousehide	vim/vim/src/gui_w32.c	/^gui_mch_mousehide(int hide)$/;"	f	signature:(int hide)
gui_mch_mousehide	vim/vim/src/gui_x11.c	/^gui_mch_mousehide($/;"	f	signature:( int hide)
gui_mch_new_colors	vim/vim/src/gui_gtk_x11.c	/^gui_mch_new_colors(void)$/;"	f	signature:(void)
gui_mch_new_colors	vim/vim/src/gui_mac.c	/^gui_mch_new_colors(void)$/;"	f	signature:(void)
gui_mch_new_colors	vim/vim/src/gui_photon.c	/^gui_mch_new_colors(void)$/;"	f	signature:(void)
gui_mch_new_colors	vim/vim/src/gui_w32.c	/^gui_mch_new_colors(void)$/;"	f	signature:(void)
gui_mch_new_colors	vim/vim/src/gui_x11.c	/^gui_mch_new_colors(void)$/;"	f	signature:(void)
gui_mch_new_menu_colors	vim/vim/src/gui_athena.c	/^gui_mch_new_menu_colors(void)$/;"	f	signature:(void)
gui_mch_new_menu_colors	vim/vim/src/gui_motif.c	/^gui_mch_new_menu_colors(void)$/;"	f	signature:(void)
gui_mch_new_menu_font	vim/vim/src/gui_athena.c	/^gui_mch_new_menu_font(void)$/;"	f	signature:(void)
gui_mch_new_menu_font	vim/vim/src/gui_motif.c	/^gui_mch_new_menu_font(void)$/;"	f	signature:(void)
gui_mch_new_tooltip_colors	vim/vim/src/gui_athena.c	/^gui_mch_new_tooltip_colors(void)$/;"	f	signature:(void)
gui_mch_new_tooltip_colors	vim/vim/src/gui_motif.c	/^gui_mch_new_tooltip_colors(void)$/;"	f	signature:(void)
gui_mch_new_tooltip_font	vim/vim/src/gui_athena.c	/^gui_mch_new_tooltip_font(void)$/;"	f	signature:(void)
gui_mch_new_tooltip_font	vim/vim/src/gui_motif.c	/^gui_mch_new_tooltip_font(void)$/;"	f	signature:(void)
gui_mch_newfont	vim/vim/src/gui_gtk_x11.c	/^gui_mch_newfont(void)$/;"	f	signature:(void)
gui_mch_newfont	vim/vim/src/gui_w32.c	/^gui_mch_newfont(void)$/;"	f	signature:(void)
gui_mch_open	vim/vim/src/gui_gtk_x11.c	/^gui_mch_open(void)$/;"	f	signature:(void)
gui_mch_open	vim/vim/src/gui_mac.c	/^gui_mch_open(void)$/;"	f	signature:(void)
gui_mch_open	vim/vim/src/gui_photon.c	/^gui_mch_open(void)$/;"	f	signature:(void)
gui_mch_open	vim/vim/src/gui_w32.c	/^gui_mch_open(void)$/;"	f	signature:(void)
gui_mch_open	vim/vim/src/gui_x11.c	/^gui_mch_open(void)$/;"	f	signature:(void)
gui_mch_post_balloon	vim/vim/src/gui_beval.c	/^gui_mch_post_balloon(BalloonEval *beval, char_u *mesg)$/;"	f	signature:(BalloonEval *beval, char_u *mesg)
gui_mch_post_balloon	vim/vim/src/gui_w32.c	/^gui_mch_post_balloon(BalloonEval *beval, char_u *mesg)$/;"	f	signature:(BalloonEval *beval, char_u *mesg)
gui_mch_prepare	vim/vim/src/gui_gtk_x11.c	/^gui_mch_prepare(int *argc, char **argv)$/;"	f	signature:(int *argc, char **argv)
gui_mch_prepare	vim/vim/src/gui_mac.c	/^gui_mch_prepare(int *argc, char **argv)$/;"	f	signature:(int *argc, char **argv)
gui_mch_prepare	vim/vim/src/gui_photon.c	/^gui_mch_prepare(int *argc, char **argv)$/;"	f	signature:(int *argc, char **argv)
gui_mch_prepare	vim/vim/src/gui_w32.c	/^gui_mch_prepare(int *argc, char **argv)$/;"	f	signature:(int *argc, char **argv)
gui_mch_prepare	vim/vim/src/gui_x11.c	/^gui_mch_prepare(int *argc, char **argv)$/;"	f	signature:(int *argc, char **argv)
gui_mch_recurse_tearoffs	vim/vim/src/gui_motif.c	/^gui_mch_recurse_tearoffs(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
gui_mch_recurse_tearoffs	vim/vim/src/gui_motif.c	/^static void gui_mch_recurse_tearoffs(vimmenu_T *menu);$/;"	p	file:	signature:(vimmenu_T *menu)
gui_mch_register_sign	vim/vim/src/gui_gtk_x11.c	/^gui_mch_register_sign(char_u *signfile)$/;"	f	signature:(char_u *signfile)
gui_mch_register_sign	vim/vim/src/gui_w32.c	/^gui_mch_register_sign(char_u *signfile)$/;"	f	signature:(char_u *signfile)
gui_mch_register_sign	vim/vim/src/gui_x11.c	/^gui_mch_register_sign(char_u *signfile)$/;"	f	signature:(char_u *signfile)
gui_mch_replace_dialog	vim/vim/src/ex_docmd.c	240;"	d	file:
gui_mch_replace_dialog	vim/vim/src/gui_gtk.c	/^gui_mch_replace_dialog(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
gui_mch_replace_dialog	vim/vim/src/gui_motif.c	/^gui_mch_replace_dialog(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
gui_mch_replace_dialog	vim/vim/src/gui_w32.c	/^gui_mch_replace_dialog(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
gui_mch_reset_focus	vim/vim/src/gui_athena.c	/^gui_mch_reset_focus(void)$/;"	f	file:	signature:(void)
gui_mch_reset_focus	vim/vim/src/gui_athena.c	/^static void gui_mch_reset_focus(void);$/;"	p	file:	signature:(void)
gui_mch_set_bg_color	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_bg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_bg_color	vim/vim/src/gui_mac.c	/^gui_mch_set_bg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_bg_color	vim/vim/src/gui_photon.c	/^gui_mch_set_bg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_bg_color	vim/vim/src/gui_w32.c	/^gui_mch_set_bg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_bg_color	vim/vim/src/gui_x11.c	/^gui_mch_set_bg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_blinking	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_blinking(long waittime, long on, long off)$/;"	f	signature:(long waittime, long on, long off)
gui_mch_set_blinking	vim/vim/src/gui_mac.c	/^gui_mch_set_blinking(long wait, long on, long off)$/;"	f	signature:(long wait, long on, long off)
gui_mch_set_blinking	vim/vim/src/gui_photon.c	/^gui_mch_set_blinking(long wait, long on, long off)$/;"	f	signature:(long wait, long on, long off)
gui_mch_set_blinking	vim/vim/src/gui_w32.c	/^gui_mch_set_blinking(long wait, long on, long off)$/;"	f	signature:(long wait, long on, long off)
gui_mch_set_blinking	vim/vim/src/gui_x11.c	/^gui_mch_set_blinking(long waittime, long on, long off)$/;"	f	signature:(long waittime, long on, long off)
gui_mch_set_curtab	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_curtab(int nr)$/;"	f	signature:(int nr)
gui_mch_set_curtab	vim/vim/src/gui_mac.c	/^gui_mch_set_curtab(int nr)$/;"	f	signature:(int nr)
gui_mch_set_curtab	vim/vim/src/gui_motif.c	/^gui_mch_set_curtab(int nr)$/;"	f	signature:(int nr)
gui_mch_set_curtab	vim/vim/src/gui_w32.c	/^gui_mch_set_curtab(int nr)$/;"	f	signature:(int nr)
gui_mch_set_fg_color	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_fg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_fg_color	vim/vim/src/gui_mac.c	/^gui_mch_set_fg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_fg_color	vim/vim/src/gui_photon.c	/^gui_mch_set_fg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_fg_color	vim/vim/src/gui_w32.c	/^gui_mch_set_fg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_fg_color	vim/vim/src/gui_x11.c	/^gui_mch_set_fg_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_font	vim/vim/src/gui_mac.c	/^gui_mch_set_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_set_font	vim/vim/src/gui_photon.c	/^gui_mch_set_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_set_font	vim/vim/src/gui_w32.c	/^gui_mch_set_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_set_font	vim/vim/src/gui_x11.c	/^gui_mch_set_font(GuiFont font)$/;"	f	signature:(GuiFont font)
gui_mch_set_fontset	vim/vim/src/gui_x11.c	/^gui_mch_set_fontset(GuiFontset fontset)$/;"	f	signature:(GuiFontset fontset)
gui_mch_set_footer	vim/vim/src/gui_motif.c	/^gui_mch_set_footer(char_u *s)$/;"	f	signature:(char_u *s)
gui_mch_set_foreground	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_foreground(void)$/;"	f	signature:(void)
gui_mch_set_foreground	vim/vim/src/gui_mac.c	/^gui_mch_set_foreground(void)$/;"	f	signature:(void)
gui_mch_set_foreground	vim/vim/src/gui_photon.c	/^gui_mch_set_foreground(void)$/;"	f	signature:(void)
gui_mch_set_foreground	vim/vim/src/gui_w32.c	/^gui_mch_set_foreground(void)$/;"	f	signature:(void)
gui_mch_set_foreground	vim/vim/src/gui_x11.c	/^gui_mch_set_foreground(void)$/;"	f	signature:(void)
gui_mch_set_menu_pos	vim/vim/src/gui_athena.c	/^gui_mch_set_menu_pos($/;"	f	signature:( int x, int y, int w, int h)
gui_mch_set_menu_pos	vim/vim/src/gui_mac.c	/^gui_mch_set_menu_pos(int x, int y, int w, int h)$/;"	f	signature:(int x, int y, int w, int h)
gui_mch_set_menu_pos	vim/vim/src/gui_photon.c	/^gui_mch_set_menu_pos(int x, int y, int w, int h)$/;"	f	signature:(int x, int y, int w, int h)
gui_mch_set_menu_pos	vim/vim/src/gui_w32.c	/^gui_mch_set_menu_pos($/;"	f	signature:( int x UNUSED, int y UNUSED, int w UNUSED, int h UNUSED)
gui_mch_set_parent	vim/vim/src/gui_w32.c	/^gui_mch_set_parent(char *title)$/;"	f	signature:(char *title)
gui_mch_set_rendering_options	vim/vim/src/gui_w32.c	/^gui_mch_set_rendering_options(char_u *s)$/;"	f	signature:(char_u *s)
gui_mch_set_scrollbar_colors	vim/vim/src/gui_athena.c	/^gui_mch_set_scrollbar_colors(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_set_scrollbar_colors	vim/vim/src/gui_motif.c	/^gui_mch_set_scrollbar_colors(scrollbar_T *sb)$/;"	f	signature:(scrollbar_T *sb)
gui_mch_set_scrollbar_pos	vim/vim/src/gui_athena.c	/^gui_mch_set_scrollbar_pos($/;"	f	signature:( scrollbar_T *sb, int x, int y, int w, int h)
gui_mch_set_scrollbar_pos	vim/vim/src/gui_gtk.c	/^gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h)$/;"	f	signature:(scrollbar_T *sb, int x, int y, int w, int h)
gui_mch_set_scrollbar_pos	vim/vim/src/gui_mac.c	/^gui_mch_set_scrollbar_pos($/;"	f	signature:( scrollbar_T *sb, int x, int y, int w, int h)
gui_mch_set_scrollbar_pos	vim/vim/src/gui_motif.c	/^gui_mch_set_scrollbar_pos($/;"	f	signature:( scrollbar_T *sb, int x, int y, int w, int h)
gui_mch_set_scrollbar_pos	vim/vim/src/gui_photon.c	/^gui_mch_set_scrollbar_pos(scrollbar_T *sb, int x, int y, int w, int h)$/;"	f	signature:(scrollbar_T *sb, int x, int y, int w, int h)
gui_mch_set_scrollbar_pos	vim/vim/src/gui_w32.c	/^gui_mch_set_scrollbar_pos($/;"	f	signature:( scrollbar_T *sb, int x, int y, int w, int h)
gui_mch_set_scrollbar_thumb	vim/vim/src/gui_athena.c	/^gui_mch_set_scrollbar_thumb($/;"	f	signature:( scrollbar_T *sb, long val, long size, long max)
gui_mch_set_scrollbar_thumb	vim/vim/src/gui_gtk.c	/^gui_mch_set_scrollbar_thumb(scrollbar_T *sb, long val, long size, long max)$/;"	f	signature:(scrollbar_T *sb, long val, long size, long max)
gui_mch_set_scrollbar_thumb	vim/vim/src/gui_mac.c	/^gui_mch_set_scrollbar_thumb($/;"	f	signature:( scrollbar_T *sb, long val, long size, long max)
gui_mch_set_scrollbar_thumb	vim/vim/src/gui_motif.c	/^gui_mch_set_scrollbar_thumb($/;"	f	signature:( scrollbar_T *sb, long val, long size, long max)
gui_mch_set_scrollbar_thumb	vim/vim/src/gui_photon.c	/^gui_mch_set_scrollbar_thumb(scrollbar_T *sb, int val, int size, int max)$/;"	f	signature:(scrollbar_T *sb, int val, int size, int max)
gui_mch_set_scrollbar_thumb	vim/vim/src/gui_w32.c	/^gui_mch_set_scrollbar_thumb($/;"	f	signature:( scrollbar_T *sb, long val, long size, long max)
gui_mch_set_shellsize	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_shellsize(int width, int height,$/;"	f	signature:(int width, int height, int min_width UNUSED, int min_height UNUSED, int base_width UNUSED, int base_height UNUSED, int direction UNUSED)
gui_mch_set_shellsize	vim/vim/src/gui_mac.c	/^gui_mch_set_shellsize($/;"	f	signature:( int width, int height, int min_width, int min_height, int base_width, int base_height, int direction)
gui_mch_set_shellsize	vim/vim/src/gui_photon.c	/^gui_mch_set_shellsize(int width, int height,$/;"	f	signature:(int width, int height, int min_width, int min_height, int base_width, int base_height, int direction)
gui_mch_set_shellsize	vim/vim/src/gui_w32.c	/^gui_mch_set_shellsize($/;"	f	signature:( int width, int height, int min_width UNUSED, int min_height UNUSED, int base_width UNUSED, int base_height UNUSED, int direction)
gui_mch_set_shellsize	vim/vim/src/gui_x11.c	/^gui_mch_set_shellsize($/;"	f	signature:( int width, int height, int min_width, int min_height, int base_width, int base_height, int direction UNUSED)
gui_mch_set_sp_color	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_sp_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_sp_color	vim/vim/src/gui_mac.c	/^gui_mch_set_sp_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_sp_color	vim/vim/src/gui_photon.c	/^gui_mch_set_sp_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_sp_color	vim/vim/src/gui_w32.c	/^gui_mch_set_sp_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_sp_color	vim/vim/src/gui_x11.c	/^gui_mch_set_sp_color(guicolor_T color)$/;"	f	signature:(guicolor_T color)
gui_mch_set_text_area_pos	vim/vim/src/gui_athena.c	/^gui_mch_set_text_area_pos($/;"	f	signature:( int x, int y, int w, int h)
gui_mch_set_text_area_pos	vim/vim/src/gui_gtk.c	/^gui_mch_set_text_area_pos(int x, int y, int w, int h)$/;"	f	signature:(int x, int y, int w, int h)
gui_mch_set_text_area_pos	vim/vim/src/gui_mac.c	/^gui_mch_set_text_area_pos(int x, int y, int w, int h)$/;"	f	signature:(int x, int y, int w, int h)
gui_mch_set_text_area_pos	vim/vim/src/gui_motif.c	/^gui_mch_set_text_area_pos($/;"	f	signature:( int x UNUSED, int y UNUSED, int w UNUSED, int h UNUSED)
gui_mch_set_text_area_pos	vim/vim/src/gui_photon.c	/^gui_mch_set_text_area_pos(int x, int y, int w, int h)$/;"	f	signature:(int x, int y, int w, int h)
gui_mch_set_text_area_pos	vim/vim/src/gui_w32.c	/^gui_mch_set_text_area_pos(int x, int y, int w, int h)$/;"	f	signature:(int x, int y, int w, int h)
gui_mch_set_toolbar_pos	vim/vim/src/gui_athena.c	/^gui_mch_set_toolbar_pos($/;"	f	signature:( int x, int y, int w, int h)
gui_mch_set_winpos	vim/vim/src/gui_gtk_x11.c	/^gui_mch_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_set_winpos	vim/vim/src/gui_mac.c	/^gui_mch_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_set_winpos	vim/vim/src/gui_photon.c	/^gui_mch_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_set_winpos	vim/vim/src/gui_w32.c	/^gui_mch_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_set_winpos	vim/vim/src/gui_x11.c	/^gui_mch_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_setmouse	vim/vim/src/gui_gtk_x11.c	/^gui_mch_setmouse(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_setmouse	vim/vim/src/gui_mac.c	/^gui_mch_setmouse(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_setmouse	vim/vim/src/gui_photon.c	/^gui_mch_setmouse(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_setmouse	vim/vim/src/gui_w32.c	/^gui_mch_setmouse(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_setmouse	vim/vim/src/gui_x11.c	/^gui_mch_setmouse(int x, int y)$/;"	f	signature:(int x, int y)
gui_mch_settitle	vim/vim/src/gui_gtk_x11.c	/^gui_mch_settitle(char_u *title, char_u *icon UNUSED)$/;"	f	signature:(char_u *title, char_u *icon UNUSED)
gui_mch_settitle	vim/vim/src/gui_mac.c	/^gui_mch_settitle(char_u *title, char_u *icon)$/;"	f	signature:(char_u *title, char_u *icon)
gui_mch_settitle	vim/vim/src/gui_photon.c	/^gui_mch_settitle(char_u *title,	char_u *icon)$/;"	f	signature:(char_u *title, char_u *icon)
gui_mch_settitle	vim/vim/src/gui_w32.c	/^gui_mch_settitle($/;"	f	signature:( char_u *title, char_u *icon UNUSED)
gui_mch_show_popupmenu	vim/vim/src/gui_athena.c	/^gui_mch_show_popupmenu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_show_popupmenu	vim/vim/src/gui_gtk.c	/^gui_mch_show_popupmenu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_show_popupmenu	vim/vim/src/gui_mac.c	/^gui_mch_show_popupmenu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_show_popupmenu	vim/vim/src/gui_motif.c	/^gui_mch_show_popupmenu(vimmenu_T *menu UNUSED)$/;"	f	signature:(vimmenu_T *menu UNUSED)
gui_mch_show_popupmenu	vim/vim/src/gui_photon.c	/^gui_mch_show_popupmenu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_show_popupmenu	vim/vim/src/gui_w32.c	/^gui_mch_show_popupmenu(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mch_show_popupmenu_at	vim/vim/src/gui_w32.c	/^gui_mch_show_popupmenu_at(vimmenu_T *menu, int x, int y)$/;"	f	file:	signature:(vimmenu_T *menu, int x, int y)
gui_mch_show_tabline	vim/vim/src/gui_gtk_x11.c	/^gui_mch_show_tabline(int showit)$/;"	f	signature:(int showit)
gui_mch_show_tabline	vim/vim/src/gui_mac.c	/^gui_mch_show_tabline(int showit)$/;"	f	signature:(int showit)
gui_mch_show_tabline	vim/vim/src/gui_motif.c	/^gui_mch_show_tabline(int showit)$/;"	f	signature:(int showit)
gui_mch_show_tabline	vim/vim/src/gui_w32.c	/^gui_mch_show_tabline(int showit)$/;"	f	signature:(int showit)
gui_mch_show_toolbar	vim/vim/src/gui_athena.c	/^gui_mch_show_toolbar(int showit)$/;"	f	signature:(int showit)
gui_mch_show_toolbar	vim/vim/src/gui_gtk_x11.c	/^gui_mch_show_toolbar(int showit)$/;"	f	signature:(int showit)
gui_mch_show_toolbar	vim/vim/src/gui_motif.c	/^gui_mch_show_toolbar(int showit)$/;"	f	signature:(int showit)
gui_mch_show_toolbar	vim/vim/src/gui_photon.c	/^gui_mch_show_toolbar(int showit)$/;"	f	signature:(int showit)
gui_mch_show_toolbar	vim/vim/src/gui_w32.c	/^gui_mch_show_toolbar(int showit)$/;"	f	signature:(int showit)
gui_mch_showing_tabline	vim/vim/src/gui_gtk_x11.c	/^gui_mch_showing_tabline(void)$/;"	f	signature:(void)
gui_mch_showing_tabline	vim/vim/src/gui_mac.c	/^gui_mch_showing_tabline(void)$/;"	f	signature:(void)
gui_mch_showing_tabline	vim/vim/src/gui_motif.c	/^gui_mch_showing_tabline(void)$/;"	f	signature:(void)
gui_mch_showing_tabline	vim/vim/src/gui_w32.c	/^gui_mch_showing_tabline(void)$/;"	f	signature:(void)
gui_mch_start_blink	vim/vim/src/gui_gtk_x11.c	/^gui_mch_start_blink(void)$/;"	f	signature:(void)
gui_mch_start_blink	vim/vim/src/gui_mac.c	/^gui_mch_start_blink(void)$/;"	f	signature:(void)
gui_mch_start_blink	vim/vim/src/gui_photon.c	/^gui_mch_start_blink(void)$/;"	f	signature:(void)
gui_mch_start_blink	vim/vim/src/gui_w32.c	/^gui_mch_start_blink(void)$/;"	f	signature:(void)
gui_mch_start_blink	vim/vim/src/gui_x11.c	/^gui_mch_start_blink(void)$/;"	f	signature:(void)
gui_mch_stop_blink	vim/vim/src/gui_gtk_x11.c	/^gui_mch_stop_blink(void)$/;"	f	signature:(void)
gui_mch_stop_blink	vim/vim/src/gui_mac.c	/^gui_mch_stop_blink(void)$/;"	f	signature:(void)
gui_mch_stop_blink	vim/vim/src/gui_photon.c	/^gui_mch_stop_blink(void)$/;"	f	signature:(void)
gui_mch_stop_blink	vim/vim/src/gui_w32.c	/^gui_mch_stop_blink(void)$/;"	f	signature:(void)
gui_mch_stop_blink	vim/vim/src/gui_x11.c	/^gui_mch_stop_blink(void)$/;"	f	signature:(void)
gui_mch_submenu_change	vim/vim/src/gui_athena.c	/^gui_mch_submenu_change($/;"	f	file:	signature:( vimmenu_T *menu, int colors)
gui_mch_submenu_change	vim/vim/src/gui_athena.c	/^static void gui_mch_submenu_change(vimmenu_T *mp, int colors);$/;"	p	file:	signature:(vimmenu_T *mp, int colors)
gui_mch_tearoff	vim/vim/src/gui_w32.c	/^gui_mch_tearoff($/;"	f	file:	signature:( char_u *title, vimmenu_T *menu, int initX, int initY)
gui_mch_tearoff	vim/vim/src/gui_w32.c	/^static void gui_mch_tearoff(char_u *title, vimmenu_T *menu, int initX, int initY);$/;"	p	file:	signature:(char_u *title, vimmenu_T *menu, int initX, int initY)
gui_mch_text_area_extra_height	vim/vim/src/gui_motif.c	/^gui_mch_text_area_extra_height(void)$/;"	f	signature:(void)
gui_mch_toggle_tearoffs	vim/vim/src/gui_athena.c	/^gui_mch_toggle_tearoffs(int enable UNUSED)$/;"	f	signature:(int enable UNUSED)
gui_mch_toggle_tearoffs	vim/vim/src/gui_gtk.c	/^gui_mch_toggle_tearoffs(int enable UNUSED)$/;"	f	signature:(int enable UNUSED)
gui_mch_toggle_tearoffs	vim/vim/src/gui_gtk.c	/^gui_mch_toggle_tearoffs(int enable)$/;"	f	signature:(int enable)
gui_mch_toggle_tearoffs	vim/vim/src/gui_mac.c	/^gui_mch_toggle_tearoffs(int enable)$/;"	f	signature:(int enable)
gui_mch_toggle_tearoffs	vim/vim/src/gui_motif.c	/^gui_mch_toggle_tearoffs(int enable)$/;"	f	signature:(int enable)
gui_mch_toggle_tearoffs	vim/vim/src/gui_photon.c	/^gui_mch_toggle_tearoffs(int enable)$/;"	f	signature:(int enable)
gui_mch_toggle_tearoffs	vim/vim/src/menu.c	/^gui_mch_toggle_tearoffs(int enable)$/;"	f	signature:(int enable)
gui_mch_uninit	vim/vim/src/gui_x11.c	/^gui_mch_uninit(void)$/;"	f	signature:(void)
gui_mch_unmaximize	vim/vim/src/gui_gtk_x11.c	/^gui_mch_unmaximize(void)$/;"	f	signature:(void)
gui_mch_unpost_balloon	vim/vim/src/gui_beval.c	/^gui_mch_unpost_balloon(BalloonEval *beval)$/;"	f	signature:(BalloonEval *beval)
gui_mch_update	vim/vim/src/gui_gtk_x11.c	/^gui_mch_update(void)$/;"	f	signature:(void)
gui_mch_update	vim/vim/src/gui_mac.c	/^gui_mch_update(void)$/;"	f	signature:(void)
gui_mch_update	vim/vim/src/gui_photon.c	/^gui_mch_update(void)$/;"	f	signature:(void)
gui_mch_update	vim/vim/src/gui_w32.c	/^gui_mch_update(void)$/;"	f	signature:(void)
gui_mch_update	vim/vim/src/gui_x11.c	/^gui_mch_update(void)$/;"	f	signature:(void)
gui_mch_update_tabline	vim/vim/src/gui_gtk_x11.c	/^gui_mch_update_tabline(void)$/;"	f	signature:(void)
gui_mch_update_tabline	vim/vim/src/gui_mac.c	/^gui_mch_update_tabline(void)$/;"	f	signature:(void)
gui_mch_update_tabline	vim/vim/src/gui_motif.c	/^gui_mch_update_tabline(void)$/;"	f	signature:(void)
gui_mch_update_tabline	vim/vim/src/gui_w32.c	/^gui_mch_update_tabline(void)$/;"	f	signature:(void)
gui_mch_wait_for_chars	vim/vim/src/gui_gtk_x11.c	/^gui_mch_wait_for_chars(long wtime)$/;"	f	signature:(long wtime)
gui_mch_wait_for_chars	vim/vim/src/gui_mac.c	/^gui_mch_wait_for_chars(int wtime)$/;"	f	signature:(int wtime)
gui_mch_wait_for_chars	vim/vim/src/gui_photon.c	/^gui_mch_wait_for_chars(int wtime)$/;"	f	signature:(int wtime)
gui_mch_wait_for_chars	vim/vim/src/gui_w32.c	/^gui_mch_wait_for_chars(int wtime)$/;"	f	signature:(int wtime)
gui_mch_wait_for_chars	vim/vim/src/gui_x11.c	/^gui_mch_wait_for_chars(long wtime)$/;"	f	signature:(long wtime)
gui_mch_wide_font_changed	vim/vim/src/gui_w32.c	/^gui_mch_wide_font_changed(void)$/;"	f	signature:(void)
gui_menu_cb	vim/vim/src/gui.c	/^gui_menu_cb(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_motif_add_actext	vim/vim/src/gui_motif.c	/^gui_motif_add_actext(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
gui_motif_add_actext	vim/vim/src/gui_motif.c	/^static void gui_motif_add_actext(vimmenu_T *menu);$/;"	p	file:	signature:(vimmenu_T *menu)
gui_motif_create_fontlist	vim/vim/src/gui_motif.c	/^gui_motif_create_fontlist(XFontStruct *font)$/;"	f	signature:(XFontStruct *font)
gui_motif_fontset2fontlist	vim/vim/src/gui_motif.c	/^gui_motif_fontset2fontlist(XFontSet *fontset)$/;"	f	signature:(XFontSet *fontset)
gui_motif_menu_colors	vim/vim/src/gui_motif.c	/^gui_motif_menu_colors(Widget id)$/;"	f	file:	signature:(Widget id)
gui_motif_menu_colors	vim/vim/src/gui_motif.c	/^static void gui_motif_menu_colors(Widget id);$/;"	p	file:	signature:(Widget id)
gui_motif_menu_fontlist	vim/vim/src/gui_motif.c	/^gui_motif_menu_fontlist(Widget id UNUSED)$/;"	f	signature:(Widget id UNUSED)
gui_motif_scroll_colors	vim/vim/src/gui_motif.c	/^gui_motif_scroll_colors(Widget id)$/;"	f	file:	signature:(Widget id)
gui_motif_scroll_colors	vim/vim/src/gui_motif.c	/^static void gui_motif_scroll_colors(Widget id);$/;"	p	file:	signature:(Widget id)
gui_motif_set_mnemonics	vim/vim/src/gui_motif.c	/^gui_motif_set_mnemonics(int enable)$/;"	f	signature:(int enable)
gui_motif_synch_fonts	vim/vim/src/gui_motif.c	/^gui_motif_synch_fonts(void)$/;"	f	signature:(void)
gui_motif_update_mousemodel	vim/vim/src/gui_motif.c	/^gui_motif_update_mousemodel(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
gui_mouse_correct	vim/vim/src/gui.c	/^gui_mouse_correct(void)$/;"	f	signature:(void)
gui_mouse_moved	vim/vim/src/gui.c	/^gui_mouse_moved(int x, int y)$/;"	f	signature:(int x, int y)
gui_mswin_find_menu	vim/vim/src/gui_w32.c	/^gui_mswin_find_menu($/;"	f	file:	signature:( vimmenu_T *pMenu, int id)
gui_mswin_find_scrollbar	vim/vim/src/gui_w32.c	/^gui_mswin_find_scrollbar(HWND hwnd)$/;"	f	file:	signature:(HWND hwnd)
gui_mswin_get_menu_height	vim/vim/src/gui_w32.c	/^gui_mswin_get_menu_height($/;"	f	file:	signature:( int fix_window)
gui_mswin_get_menu_height	vim/vim/src/gui_w32.c	/^static int gui_mswin_get_menu_height(int fix_window);$/;"	p	file:	signature:(int fix_window)
gui_mswin_get_valid_dimensions	vim/vim/src/gui_w32.c	/^gui_mswin_get_valid_dimensions($/;"	f	file:	signature:( int w, int h, int *valid_w, int *valid_h)
gui_mswin_rm_blink_timer	vim/vim/src/gui_w32.c	/^gui_mswin_rm_blink_timer(void)$/;"	f	file:	signature:(void)
gui_new_scrollbar_colors	vim/vim/src/gui.c	/^gui_new_scrollbar_colors(void)$/;"	f	signature:(void)
gui_new_shellsize	vim/vim/src/gui.c	/^gui_new_shellsize(void)$/;"	f	signature:(void)
gui_outstr	vim/vim/src/gui.c	/^gui_outstr(char_u *s, int len)$/;"	f	file:	signature:(char_u *s, int len)
gui_outstr	vim/vim/src/gui.c	/^static void gui_outstr(char_u *, int);$/;"	p	file:	signature:(char_u *, int)
gui_outstr_nowrap	vim/vim/src/gui.c	/^gui_outstr_nowrap($/;"	f	signature:( char_u *s, int len, int flags, guicolor_T fg, guicolor_T bg, int back)
gui_ph_dialog_close	vim/vim/src/gui_photon.c	/^gui_ph_dialog_close(int button, void *data)$/;"	f	file:	signature:(int button, void *data)
gui_ph_dialog_esc	vim/vim/src/gui_photon.c	/^gui_ph_dialog_esc(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_dialog_text	vim/vim/src/gui_photon.c	/^static PtWidget_t *gui_ph_dialog_text = NULL;$/;"	v	file:
gui_ph_dialog_text_enter	vim/vim/src/gui_photon.c	/^gui_ph_dialog_text_enter(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_draw_end	vim/vim/src/gui_photon.c	/^gui_ph_draw_end(void)$/;"	f	file:	signature:(void)
gui_ph_draw_end	vim/vim/src/gui_photon.c	/^static void gui_ph_draw_end(void);$/;"	p	file:	signature:(void)
gui_ph_draw_start	vim/vim/src/gui_photon.c	/^gui_ph_draw_start(void)$/;"	f	file:	signature:(void)
gui_ph_draw_start	vim/vim/src/gui_photon.c	/^static void gui_ph_draw_start(void);$/;"	p	file:	signature:(void)
gui_ph_encoding_changed	vim/vim/src/gui_photon.c	/^gui_ph_encoding_changed(int new_encoding)$/;"	f	signature:(int new_encoding)
gui_ph_find_buffer_item	vim/vim/src/gui_photon.c	/^gui_ph_find_buffer_item(char_u *name)$/;"	f	file:	signature:(char_u *name)
gui_ph_get_font	vim/vim/src/gui_photon.c	/^gui_ph_get_font($/;"	f	file:	signature:( char_u *font_name, int_u font_flags, int_u font_size, int_u enforce )
gui_ph_get_panelgroup_margins	vim/vim/src/gui_photon.c	/^gui_ph_get_panelgroup_margins($/;"	f	file:	signature:( short *top, short *bottom, short *left, short *right)
gui_ph_get_panelgroup_margins	vim/vim/src/gui_photon.c	/^static void gui_ph_get_panelgroup_margins(short*, short*, short*, short*);$/;"	p	file:	signature:(short*, short*, short*, short*)
gui_ph_handle_buffer_remove	vim/vim/src/gui_photon.c	/^gui_ph_handle_buffer_remove($/;"	f	file:	signature:( PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_focus	vim/vim/src/gui_photon.c	/^gui_ph_handle_focus(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_focus	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_focus;	\/* focus change of text area *\/$/;"	v	file:
gui_ph_handle_keyboard	vim/vim/src/gui_photon.c	/^gui_ph_handle_keyboard(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_keyboard	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_keyboard;$/;"	v	file:
gui_ph_handle_menu	vim/vim/src/gui_photon.c	/^gui_ph_handle_menu(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_menu	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_menu;$/;"	v	file:
gui_ph_handle_menu_resize	vim/vim/src/gui_photon.c	/^gui_ph_handle_menu_resize($/;"	f	file:	signature:( PtWidget_t *widget, void *other, PtCallbackInfo_t *info)
gui_ph_handle_menu_resize	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_menu_resize;$/;"	v	file:
gui_ph_handle_menu_unrealized	vim/vim/src/gui_photon.c	/^gui_ph_handle_menu_unrealized($/;"	f	file:	signature:( PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_menu_unrealized	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_menu_unrealized;$/;"	v	file:
gui_ph_handle_mouse	vim/vim/src/gui_photon.c	/^gui_ph_handle_mouse(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_mouse	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_mouse;$/;"	v	file:
gui_ph_handle_pg_change	vim/vim/src/gui_photon.c	/^gui_ph_handle_pg_change($/;"	f	file:	signature:( PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_pulldown_menu	vim/vim/src/gui_photon.c	/^gui_ph_handle_pulldown_menu($/;"	f	file:	signature:( PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_pulldown_menu	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_pulldown_menu;$/;"	v	file:
gui_ph_handle_raw_draw	vim/vim/src/gui_photon.c	/^gui_ph_handle_raw_draw(PtWidget_t *widget, PhTile_t *damage)$/;"	f	file:	signature:(PtWidget_t *widget, PhTile_t *damage)
gui_ph_handle_scrollbar	vim/vim/src/gui_photon.c	/^gui_ph_handle_scrollbar(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_scrollbar	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_scrollbar;$/;"	v	file:
gui_ph_handle_timer_cursor	vim/vim/src/gui_photon.c	/^gui_ph_handle_timer_cursor($/;"	f	file:	signature:( PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_timer_cursor	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_timer_cursor;$/;"	v	file:
gui_ph_handle_timer_timeout	vim/vim/src/gui_photon.c	/^gui_ph_handle_timer_timeout(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_timer_timeout	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_timer_timeout;$/;"	v	file:
gui_ph_handle_window_cb	vim/vim/src/gui_photon.c	/^gui_ph_handle_window_cb(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_handle_window_cb	vim/vim/src/gui_photon.c	/^static PtCallbackF_t gui_ph_handle_window_cb;$/;"	v	file:
gui_ph_handle_window_open	vim/vim/src/gui_photon.c	/^gui_ph_handle_window_open($/;"	f	file:	signature:( PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_is_buffer_item	vim/vim/src/gui_photon.c	/^gui_ph_is_buffer_item(vimmenu_T *menu, vimmenu_T *parent)$/;"	f	file:	signature:(vimmenu_T *menu, vimmenu_T *parent)
gui_ph_mouse_color	vim/vim/src/gui_photon.c	/^static PgColor_t gui_ph_mouse_color =	Pg_BLACK;$/;"	v	file:
gui_ph_pane_resize	vim/vim/src/gui_photon.c	/^gui_ph_pane_resize(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)$/;"	f	file:	signature:(PtWidget_t *widget, void *data, PtCallbackInfo_t *info)
gui_ph_parse_font_name	vim/vim/src/gui_photon.c	/^gui_ph_parse_font_name($/;"	f	file:	signature:( char_u *vim_font, char_u **font_name, int_u *font_flags, int_u *font_size)
gui_ph_pg_add_buffer	vim/vim/src/gui_photon.c	/^gui_ph_pg_add_buffer(char *name)$/;"	f	file:	signature:(char *name)
gui_ph_pg_remove_buffer	vim/vim/src/gui_photon.c	/^gui_ph_pg_remove_buffer(char *name)$/;"	f	file:	signature:(char *name)
gui_ph_pg_set_buffer_num	vim/vim/src/gui_photon.c	/^gui_ph_pg_set_buffer_num(int_u buf_num)$/;"	f	file:	signature:(int_u buf_num)
gui_ph_position_menu	vim/vim/src/gui_photon.c	/^gui_ph_position_menu(PtWidget_t *widget, int priority)$/;"	f	file:	signature:(PtWidget_t *widget, int priority)
gui_ph_raw_offset	vim/vim/src/gui_photon.c	/^static PhPoint_t    gui_ph_raw_offset;$/;"	v	file:
gui_ph_resize_container	vim/vim/src/gui_photon.c	/^gui_ph_resize_container(void)$/;"	f	file:	signature:(void)
gui_ph_show_tooltip	vim/vim/src/gui_photon.c	/^static PtWidget_t * gui_ph_show_tooltip(PtWidget_t *window,$/;"	f	file:	signature:(PtWidget_t *window, PtWidget_t *widget, int position, char *text, char *font, PgColor_t fill_color, PgColor_t text_color)
gui_ph_show_tooltip	vim/vim/src/gui_photon.c	/^static PtWidget_t * gui_ph_show_tooltip(PtWidget_t *window,$/;"	p	file:	signature:(PtWidget_t *window, PtWidget_t *widget, int position, char *text, char *font, PgColor_t fill_color, PgColor_t text_color)
gui_ph_timer_cursor	vim/vim/src/gui_photon.c	/^static PtWidget_t   *gui_ph_timer_cursor;   \/* handle cursor blinking *\/$/;"	v	file:
gui_ph_timer_timeout	vim/vim/src/gui_photon.c	/^static PtWidget_t   *gui_ph_timer_timeout;  \/* used in gui_mch_wait_for_chars *\/$/;"	v	file:
gui_ph_toolbar_find_icon	vim/vim/src/gui_photon.c	/^gui_ph_toolbar_find_icon(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
gui_ph_toolbar_find_icon	vim/vim/src/gui_photon.c	/^static PhImage_t *gui_ph_toolbar_find_icon(vimmenu_T *menu);$/;"	p	file:	signature:(vimmenu_T *menu)
gui_ph_toolbar_images	vim/vim/src/gui_photon.c	/^static PhImage_t *gui_ph_toolbar_images[] = {$/;"	v	file:
gui_ph_toolbar_load_icon	vim/vim/src/gui_photon.c	/^gui_ph_toolbar_load_icon(char_u *iconfile)$/;"	f	file:	signature:(char_u *iconfile)
gui_position_components	vim/vim/src/gui.c	/^gui_position_components(int total_width UNUSED)$/;"	f	file:	signature:(int total_width UNUSED)
gui_position_components	vim/vim/src/gui.c	/^static void gui_position_components(int);$/;"	p	file:	signature:(int)
gui_position_menu	vim/vim/src/gui.c	/^gui_position_menu(void)$/;"	f	signature:(void)
gui_prepare	vim/vim/src/gui.c	/^gui_prepare(int *argc, char **argv)$/;"	f	signature:(int *argc, char **argv)
gui_prev_topfill	vim/vim/src/globals.h	/^EXTERN int	gui_prev_topfill INIT(= 0);$/;"	v
gui_prev_topline	vim/vim/src/globals.h	/^EXTERN linenr_T gui_prev_topline INIT(= 0);$/;"	v
gui_read_child_pipe	vim/vim/src/gui.c	/^gui_read_child_pipe(int fd)$/;"	f	file:	signature:(int fd)
gui_read_child_pipe	vim/vim/src/gui.c	/^static int gui_read_child_pipe(int fd);$/;"	p	file:	signature:(int fd)
gui_redraw	vim/vim/src/gui.c	/^gui_redraw($/;"	f	signature:( int x, int y, int w, int h)
gui_redraw_block	vim/vim/src/gui.c	/^gui_redraw_block($/;"	f	signature:( int row1, int col1, int row2, int col2, int flags)
gui_remove_scrollbars	vim/vim/src/gui.c	/^gui_remove_scrollbars(void)$/;"	f	signature:(void)
gui_reset_scroll_region	vim/vim/src/gui.c	/^gui_reset_scroll_region(void)$/;"	f	signature:(void)
gui_resize_shell	vim/vim/src/gui.c	/^gui_resize_shell(int pixel_width, int pixel_height)$/;"	f	signature:(int pixel_width, int pixel_height)
gui_screenchar	vim/vim/src/gui.c	/^gui_screenchar($/;"	f	file:	signature:( int off, int flags, guicolor_T fg, guicolor_T bg, int back)
gui_screenchar	vim/vim/src/gui.c	/^static int gui_screenchar(int off, int flags, guicolor_T fg, guicolor_T bg, int back);$/;"	p	file:	signature:(int off, int flags, guicolor_T fg, guicolor_T bg, int back)
gui_screenstr	vim/vim/src/gui.c	/^gui_screenstr($/;"	f	file:	signature:( int off, int len, int flags, guicolor_T fg, guicolor_T bg, int back)
gui_screenstr	vim/vim/src/gui.c	/^static int gui_screenstr(int off, int len, int flags, guicolor_T fg, guicolor_T bg, int back);$/;"	p	file:	signature:(int off, int len, int flags, guicolor_T fg, guicolor_T bg, int back)
gui_send_mouse_event	vim/vim/src/gui.c	/^gui_send_mouse_event($/;"	f	signature:( int button, int x, int y, int repeated_click, int_u modifiers)
gui_set_bg_color	vim/vim/src/gui.c	/^gui_set_bg_color(char_u *name)$/;"	f	file:	signature:(char_u *name)
gui_set_bg_color	vim/vim/src/gui.c	/^static void gui_set_bg_color(char_u *name);$/;"	p	file:	signature:(char_u *name)
gui_set_cursor	vim/vim/src/gui.c	/^gui_set_cursor(int row, int col)$/;"	f	signature:(int row, int col)
gui_set_fg_color	vim/vim/src/gui.c	/^gui_set_fg_color(char_u *name)$/;"	f	file:	signature:(char_u *name)
gui_set_fg_color	vim/vim/src/gui.c	/^static void gui_set_fg_color(char_u *name);$/;"	p	file:	signature:(char_u *name)
gui_set_shellsize	vim/vim/src/gui.c	/^gui_set_shellsize($/;"	f	signature:( int mustset UNUSED, int fit_to_display, int direction)
gui_shell_closed	vim/vim/src/gui.c	/^gui_shell_closed(void)$/;"	f	signature:(void)
gui_show_popupmenu	vim/vim/src/menu.c	/^gui_show_popupmenu(void)$/;"	f	signature:(void)
gui_start	vim/vim/src/gui.c	/^gui_start(void)$/;"	f	signature:(void)
gui_start_highlight	vim/vim/src/gui.c	/^gui_start_highlight(int mask)$/;"	f	signature:(int mask)
gui_stop_highlight	vim/vim/src/gui.c	/^gui_stop_highlight(int mask)$/;"	f	signature:(int mask)
gui_undraw_cursor	vim/vim/src/gui.c	/^gui_undraw_cursor(void)$/;"	f	signature:(void)
gui_update_cursor	vim/vim/src/gui.c	/^gui_update_cursor($/;"	f	signature:( int force, int clear_selection)
gui_update_cursor_later	vim/vim/src/gui.c	/^gui_update_cursor_later(void)$/;"	f	signature:(void)
gui_update_horiz_scrollbar	vim/vim/src/gui.c	/^gui_update_horiz_scrollbar(int force)$/;"	f	file:	signature:(int force)
gui_update_horiz_scrollbar	vim/vim/src/gui.c	/^static void gui_update_horiz_scrollbar(int);$/;"	p	file:	signature:(int)
gui_update_menus	vim/vim/src/menu.c	/^gui_update_menus(int modes)$/;"	f	signature:(int modes)
gui_update_menus_recurse	vim/vim/src/menu.c	/^gui_update_menus_recurse(vimmenu_T *menu, int mode)$/;"	f	file:	signature:(vimmenu_T *menu, int mode)
gui_update_menus_recurse	vim/vim/src/menu.c	/^static void gui_update_menus_recurse(vimmenu_T *, int);$/;"	p	file:	signature:(vimmenu_T *, int)
gui_update_screen	vim/vim/src/gui.c	/^gui_update_screen(void)$/;"	f	signature:(void)
gui_update_scrollbars	vim/vim/src/gui.c	/^gui_update_scrollbars($/;"	f	signature:( int force)
gui_update_tabline	vim/vim/src/gui.c	/^gui_update_tabline(void)$/;"	f	signature:(void)
gui_use_tabline	vim/vim/src/gui.c	/^gui_use_tabline(void)$/;"	f	signature:(void)
gui_w32_get_menu_font	vim/vim/src/gui_w32.c	/^gui_w32_get_menu_font(LOGFONT *lf)$/;"	f	file:	signature:(LOGFONT *lf)
gui_wait_for_chars	vim/vim/src/gui.c	/^gui_wait_for_chars(long wtime)$/;"	f	signature:(long wtime)
gui_wait_for_chars_or_timer	vim/vim/src/gui.c	/^gui_wait_for_chars_or_timer(long wtime)$/;"	f	file:	signature:(long wtime)
gui_win_pos_T	vim/vim/src/gui.h	/^} gui_win_pos_T;$/;"	t	typeref:enum:__anon152
gui_win_x	vim/vim/src/globals.h	/^EXTERN int	gui_win_x INIT(= -1);$/;"	v
gui_win_y	vim/vim/src/globals.h	/^EXTERN int	gui_win_y INIT(= -1);$/;"	v
gui_wingoto_xy	vim/vim/src/gui.c	/^gui_wingoto_xy(int x, int y)$/;"	f	file:	signature:(int x, int y)
gui_wingoto_xy	vim/vim/src/gui.c	/^static void gui_wingoto_xy(int x, int y);$/;"	p	file:	signature:(int x, int y)
gui_write	vim/vim/src/gui.c	/^gui_write($/;"	f	signature:( char_u *s, int len)
gui_x11_blink_cb	vim/vim/src/gui_x11.c	/^gui_x11_blink_cb($/;"	f	file:	signature:( XtPointer timed_out UNUSED, XtIntervalId *interval_id UNUSED)
gui_x11_blink_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_blink_cb(XtPointer timed_out, XtIntervalId *interval_id);$/;"	p	file:	signature:(XtPointer timed_out, XtIntervalId *interval_id)
gui_x11_callbacks	vim/vim/src/gui_x11.c	/^gui_x11_callbacks(Widget textArea, Widget vimForm)$/;"	f	signature:(Widget textArea, Widget vimForm)
gui_x11_check_copy_area	vim/vim/src/gui_x11.c	/^gui_x11_check_copy_area(void)$/;"	f	file:	signature:(void)
gui_x11_check_copy_area	vim/vim/src/gui_x11.c	/^static void gui_x11_check_copy_area(void);$/;"	p	file:	signature:(void)
gui_x11_create_blank_mouse	vim/vim/src/gui_x11.c	/^gui_x11_create_blank_mouse(void)$/;"	f	file:	signature:(void)
gui_x11_create_blank_mouse	vim/vim/src/gui_x11.c	/^static Cursor gui_x11_create_blank_mouse(void);$/;"	p	file:	signature:(void)
gui_x11_create_widgets	vim/vim/src/gui_athena.c	/^gui_x11_create_widgets(void)$/;"	f	signature:(void)
gui_x11_create_widgets	vim/vim/src/gui_motif.c	/^gui_x11_create_widgets(void)$/;"	f	signature:(void)
gui_x11_destroy_widgets	vim/vim/src/gui_athena.c	/^gui_x11_destroy_widgets(void)$/;"	f	signature:(void)
gui_x11_destroy_widgets	vim/vim/src/gui_motif.c	/^gui_x11_destroy_widgets(void)$/;"	f	signature:(void)
gui_x11_enter_cb	vim/vim/src/gui_x11.c	/^gui_x11_enter_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer data UNUSED, XEvent *event UNUSED, Boolean *dum UNUSED)
gui_x11_enter_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_enter_cb(Widget w, XtPointer data, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer data, XEvent *event, Boolean *dum)
gui_x11_expose_cb	vim/vim/src/gui_x11.c	/^gui_x11_expose_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer dud UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_expose_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_expose_cb(Widget w, XtPointer dud, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer dud, XEvent *event, Boolean *dum)
gui_x11_focus_change_cb	vim/vim/src/gui_x11.c	/^gui_x11_focus_change_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer data UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_focus_change_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_focus_change_cb(Widget w, XtPointer data, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer data, XEvent *event, Boolean *dum)
gui_x11_get_last_mouse_event	vim/vim/src/gui_x11.c	/^gui_x11_get_last_mouse_event(void)$/;"	f	signature:(void)
gui_x11_get_wid	vim/vim/src/gui_athena.c	/^gui_x11_get_wid(void)$/;"	f	signature:(void)
gui_x11_get_wid	vim/vim/src/gui_motif.c	/^gui_x11_get_wid(void)$/;"	f	signature:(void)
gui_x11_key_hit_cb	vim/vim/src/gui_x11.c	/^gui_x11_key_hit_cb($/;"	f	signature:( Widget w UNUSED, XtPointer dud UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_leave_cb	vim/vim/src/gui_x11.c	/^gui_x11_leave_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer data UNUSED, XEvent *event UNUSED, Boolean *dum UNUSED)
gui_x11_leave_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_leave_cb(Widget w, XtPointer data, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer data, XEvent *event, Boolean *dum)
gui_x11_menu_cb	vim/vim/src/gui_x11.c	/^gui_x11_menu_cb($/;"	f	signature:( Widget w UNUSED, XtPointer client_data, XtPointer call_data UNUSED)
gui_x11_mouse_cb	vim/vim/src/gui_x11.c	/^gui_x11_mouse_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer dud UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_mouse_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_mouse_cb(Widget w, XtPointer data, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer data, XEvent *event, Boolean *dum)
gui_x11_resize_window_cb	vim/vim/src/gui_x11.c	/^gui_x11_resize_window_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer dud UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_resize_window_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_resize_window_cb(Widget w, XtPointer dud, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer dud, XEvent *event, Boolean *dum)
gui_x11_send_event_handler	vim/vim/src/gui_x11.c	/^gui_x11_send_event_handler($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_send_event_handler	vim/vim/src/gui_x11.c	/^static void gui_x11_send_event_handler(Widget, XtPointer, XEvent *, Boolean *);$/;"	p	file:	signature:(Widget, XtPointer, XEvent *, Boolean *)
gui_x11_set_back_color	vim/vim/src/gui_athena.c	/^gui_x11_set_back_color(void)$/;"	f	signature:(void)
gui_x11_set_back_color	vim/vim/src/gui_motif.c	/^gui_x11_set_back_color(void)$/;"	f	signature:(void)
gui_x11_timer_cb	vim/vim/src/gui_x11.c	/^gui_x11_timer_cb($/;"	f	file:	signature:( XtPointer timed_out, XtIntervalId *interval_id UNUSED)
gui_x11_timer_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_timer_cb(XtPointer timed_out, XtIntervalId *interval_id);$/;"	p	file:	signature:(XtPointer timed_out, XtIntervalId *interval_id)
gui_x11_visibility_cb	vim/vim/src/gui_x11.c	/^gui_x11_visibility_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer dud UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_visibility_cb	vim/vim/src/gui_x11.c	/^static void gui_x11_visibility_cb(Widget w, XtPointer dud, XEvent *event, Boolean *dum);$/;"	p	file:	signature:(Widget w, XtPointer dud, XEvent *event, Boolean *dum)
gui_x11_wm_protocol_handler	vim/vim/src/gui_x11.c	/^gui_x11_wm_protocol_handler($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XEvent *event, Boolean *dum UNUSED)
gui_x11_wm_protocol_handler	vim/vim/src/gui_x11.c	/^static void gui_x11_wm_protocol_handler(Widget, XtPointer, XEvent *, Boolean *);$/;"	p	file:	signature:(Widget, XtPointer, XEvent *, Boolean *)
gui_xm_select_font	vim/vim/src/gui_xmdlg.c	/^gui_xm_select_font(char_u *current)$/;"	f	signature:(char_u *current)
gui_xy2colrow	vim/vim/src/gui.c	/^gui_xy2colrow(int x, int y, int *colp)$/;"	f	signature:(int x, int y, int *colp)
guicolor_T	vim/vim/src/gui.h	/^typedef long	    guicolor_T;	\/* handle for a GUI color; for X11 this should$/;"	t
guicolor_T	vim/vim/src/structs.h	98;"	d
guint	vim/vim/src/gui_gtk_x11.c	72;"	d	file:
guint8	vim/vim/src/gui_gtk.c	90;"	d	file:
hD2D1DLL	vim/vim/src/gui_dwrite.cpp	/^static HINSTANCE hD2D1DLL = NULL;$/;"	v	file:
hDWriteDLL	vim/vim/src/gui_dwrite.cpp	/^static HINSTANCE hDWriteDLL = NULL;$/;"	v	file:
hDlgPrint	vim/vim/src/os_mswin.c	/^static HWND		hDlgPrint;$/;"	v	file:
hIconvDLL	vim/vim/src/mbyte.c	/^static HINSTANCE hIconvDLL = 0;$/;"	v	file:
hImage	vim/vim/src/gui_w32.c	/^    HANDLE	hImage;$/;"	m	struct:_signicon_t	file:	access:public
hLibImm	vim/vim/src/gui_w32.c	/^static HINSTANCE hLibImm = NULL;$/;"	v	file:
hLibintlDLL	vim/vim/src/GvimExt/gvimext.cpp	/^static HINSTANCE hLibintlDLL = 0;$/;"	v	file:
hLibintlDLL	vim/vim/src/os_win32.c	/^static HINSTANCE hLibintlDLL = NULL;$/;"	v	file:
hMsvcrtDLL	vim/vim/src/mbyte.c	/^static HINSTANCE hMsvcrtDLL = 0;$/;"	v	file:
hMzGC	vim/vim/src/if_mzsch.c	/^static HINSTANCE hMzGC = 0;$/;"	v	file:
hMzSch	vim/vim/src/if_mzsch.c	/^static HINSTANCE hMzSch = 0;$/;"	v	file:
hOrigin	vim/vim/src/gui_at_fs.c	/^    int		hOrigin;$/;"	m	struct:__anon236	file:	access:public
hProc	vim/vim/src/if_cscope.h	/^    HANDLE	    hProc;	\/* cscope process handle *\/$/;"	m	struct:csi	access:public
hShape	vim/vim/src/gui_w32.c	/^    HANDLE	hShape;	\/* Mask bitmap handle *\/$/;"	m	struct:_signicon_t	file:	access:public
hTclLib	vim/vim/src/if_tcl.c	/^static HANDLE hTclLib = NULL;$/;"	v	file:
hWinPtyDLL	vim/vim/src/terminal.c	/^static HINSTANCE hWinPtyDLL = NULL;$/;"	v	file:
had_end	vim/vim/src/fold.c	/^    int		had_end;	\/* level of fold that is forced to end above$/;"	m	struct:__anon95	file:	access:public
had_endbrace	vim/vim/src/regexp.c	/^static char_u	had_endbrace[NSUBEXP];	\/* flags, TRUE if end of () found *\/$/;"	v	file:
had_eol	vim/vim/src/regexp.c	/^static int	had_eol;	\/* TRUE when EOL found by vim_regcomp() *\/$/;"	v	file:
half_shape	vim/vim/src/arabic.c	/^half_shape(int c)$/;"	f	file:	signature:(int c)
half_shape	vim/vim/src/arabic.c	/^static int  half_shape(int c);$/;"	p	file:	signature:(int c)
halfpage	vim/vim/src/move.c	/^halfpage(int flag, linenr_T Prenum)$/;"	f	signature:(int flag, linenr_T Prenum)
han_index	vim/vim/src/hangulin.c	821;"	d	file:
handle	vim/vim/runtime/tools/demoserver.py	/^    def handle(self):$/;"	m	class:ThreadedTCPRequestHandler	access:public
handle	vim/vim/src/testdir/test_channel.py	/^    def handle(self):$/;"	m	class:ThreadedTCPRequestHandler	access:public
handle	vim/vim/src/testdir/test_netbeans.py	/^    def handle(self):$/;"	m	class:ThreadedTCPRequestHandler	access:public
handle_damage	vim/vim/src/terminal.c	/^handle_damage(VTermRect rect, void *user)$/;"	f	file:	signature:(VTermRect rect, void *user)
handle_drop	vim/vim/src/ex_docmd.c	/^handle_drop($/;"	f	signature:( int filec, char_u **filev, int split)
handle_focus_event	vim/vim/src/os_win32.c	/^handle_focus_event(INPUT_RECORD ir)$/;"	f	file:	signature:(INPUT_RECORD ir)
handle_io	vim/vim/src/channel.c	/^handle_io(typval_T *item, ch_part_T part, jobopt_T *opt)$/;"	f	file:	signature:(typval_T *item, ch_part_T part, jobopt_T *opt)
handle_key_queue	vim/vim/src/netbeans.c	/^handle_key_queue(void)$/;"	f	file:	signature:(void)
handle_mode	vim/vim/src/channel.c	/^handle_mode(typval_T *item, jobopt_T *opt, ch_mode_T *modep, int jo)$/;"	f	file:	signature:(typval_T *item, jobopt_T *opt, ch_mode_T *modep, int jo)
handle_movecursor	vim/vim/src/terminal.c	/^handle_movecursor($/;"	f	file:	signature:( VTermPos pos, VTermPos oldpos UNUSED, int visible, void *user)
handle_moverect	vim/vim/src/terminal.c	/^handle_moverect(VTermRect dest UNUSED, VTermRect src UNUSED, void *user)$/;"	f	file:	signature:(VTermRect dest UNUSED, VTermRect src UNUSED, void *user)
handle_resize	vim/vim/src/os_unix.c	/^handle_resize(void)$/;"	f	file:	signature:(void)
handle_resize	vim/vim/src/os_unix.c	/^static void handle_resize(void);$/;"	p	file:	signature:(void)
handle_resize	vim/vim/src/terminal.c	/^handle_resize(int rows, int cols, void *user)$/;"	f	file:	signature:(int rows, int cols, void *user)
handle_settermprop	vim/vim/src/terminal.c	/^handle_settermprop($/;"	f	file:	signature:( VTermProp prop, VTermValue *value, void *user)
handle_subscript	vim/vim/src/eval.c	/^handle_subscript($/;"	f	signature:( char_u **arg, typval_T *rettv, int evaluate, int verbose)
handle_swap_exists	vim/vim/src/buffer.c	/^handle_swap_exists(bufref_T *old_curbuf)$/;"	f	signature:(bufref_T *old_curbuf)
handle_tabmenu	vim/vim/src/normal.c	/^handle_tabmenu(void)$/;"	f	signature:(void)
handle_viminfo_history	vim/vim/src/ex_getln.c	/^handle_viminfo_history($/;"	f	signature:( garray_T *values, int writing)
handle_viminfo_mark	vim/vim/src/mark.c	/^handle_viminfo_mark(garray_T *values, int force)$/;"	f	signature:(garray_T *values, int force)
handle_viminfo_register	vim/vim/src/ops.c	/^handle_viminfo_register(garray_T *values, int force)$/;"	f	signature:(garray_T *values, int force)
handle_x_keys	vim/vim/src/misc2.c	/^handle_x_keys(int key)$/;"	f	signature:(int key)
handler_id	vim/vim/src/gui.h	/^    unsigned long handler_id;   \/* Id of "value_changed" signal handler *\/$/;"	m	struct:GuiScrollbar	access:public
handler_routine	vim/vim/src/os_win32.c	/^handler_routine($/;"	f	file:	signature:( DWORD dwCtrlType)
hangul_automata2	vim/vim/src/hangulin.c	/^hangul_automata2(char_u *buf, int_u *c)$/;"	f	file:	signature:(char_u *buf, int_u *c)
hangul_automata2	vim/vim/src/hangulin.c	/^static int hangul_automata2(char_u *buf, unsigned int *c);$/;"	p	file:	signature:(char_u *buf, unsigned int *c)
hangul_automata3	vim/vim/src/hangulin.c	/^hangul_automata3(char_u *buf, int_u *c)$/;"	f	file:	signature:(char_u *buf, int_u *c)
hangul_automata3	vim/vim/src/hangulin.c	/^static int hangul_automata3(char_u *buf, unsigned int *c);$/;"	p	file:	signature:(char_u *buf, unsigned int *c)
hangul_composing_buffer_get	vim/vim/src/hangulin.c	/^hangul_composing_buffer_get(int *p_len)$/;"	f	signature:(int *p_len)
hangul_input_clear	vim/vim/src/hangulin.c	/^hangul_input_clear(void)$/;"	f	signature:(void)
hangul_input_process	vim/vim/src/hangulin.c	/^hangul_input_process(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
hangul_input_state	vim/vim/src/hangulin.c	/^static int hangul_input_state = 0;$/;"	v	file:
hangul_input_state_get	vim/vim/src/hangulin.c	/^hangul_input_state_get(void)$/;"	f	signature:(void)
hangul_input_state_set	vim/vim/src/hangulin.c	/^hangul_input_state_set(int state)$/;"	f	signature:(int state)
hangul_input_state_toggle	vim/vim/src/hangulin.c	/^hangul_input_state_toggle(void)$/;"	f	signature:(void)
hangul_keyboard_set	vim/vim/src/hangulin.c	/^hangul_keyboard_set(void)$/;"	f	signature:(void)
hangul_keyboard_type	vim/vim/src/hangulin.c	/^static int hangul_keyboard_type = HANGUL_DEFAULT_KEYBOARD;$/;"	v	file:
hangul_string_convert	vim/vim/src/hangulin.c	/^hangul_string_convert(char_u *buf, int *p_len)$/;"	f	signature:(char_u *buf, int *p_len)
hardcopy_line	vim/vim/src/hardcopy.c	/^hardcopy_line($/;"	f	file:	signature:( prt_settings_T *psettings, int page_line, prt_pos_T *ppos)
hardcopy_line	vim/vim/src/hardcopy.c	/^static colnr_T hardcopy_line(prt_settings_T *psettings, int page_line, prt_pos_T *ppos);$/;"	p	file:	signature:(prt_settings_T *psettings, int page_line, prt_pos_T *ppos)
hasAnyFolding	vim/vim/src/fold.c	/^hasAnyFolding(win_T *win)$/;"	f	signature:(win_T *win)
hasFolding	vim/vim/src/fold.c	/^hasFolding(linenr_T lnum, linenr_T *firstp, linenr_T *lastp)$/;"	f	signature:(linenr_T lnum, linenr_T *firstp, linenr_T *lastp)
hasFoldingWin	vim/vim/src/fold.c	/^hasFoldingWin($/;"	f	signature:( win_T *win, linenr_T lnum, linenr_T *firstp, linenr_T *lastp, int cache, foldinfo_T *infop)
has_any_channel	vim/vim/src/channel.c	/^has_any_channel(void)$/;"	f	signature:(void)
has_autocmd	vim/vim/src/fileio.c	/^has_autocmd(event_T event, char_u *sfname, buf_T *buf)$/;"	f	signature:(event_T event, char_u *sfname, buf_T *buf)
has_backref	vim/vim/src/regexp.h	/^    int			has_backref;	\/* pattern contains \\1 .. \\9 *\/$/;"	m	struct:__anon144	access:public
has_charset	vim/vim/src/hardcopy.c	/^    int		has_charset;$/;"	m	struct:prt_ps_charset_S	file:	access:public
has_cmdundefined	vim/vim/src/fileio.c	/^has_cmdundefined(void)$/;"	f	signature:(void)
has_color	vim/vim/src/structs.h	/^    int		has_color;$/;"	m	struct:__anon206	access:public
has_compl_option	vim/vim/src/edit.c	/^has_compl_option(int dict_opt)$/;"	f	file:	signature:(int dict_opt)
has_compl_option	vim/vim/src/edit.c	/^static int  has_compl_option(int dict_opt);$/;"	p	file:	signature:(int dict_opt)
has_cont_list	vim/vim/src/syntax.c	/^    char	has_cont_list;	\/* TRUE if "cont_list" can be used *\/$/;"	m	struct:__anon137	file:	access:public
has_count	vim/vim/src/ex_docmd.c	/^    int		has_count;  \/* :123verbose  :3tab *\/$/;"	m	struct:cmdmod	file:	access:public
has_cursorhold	vim/vim/src/fileio.c	/^has_cursorhold(void)$/;"	f	signature:(void)
has_cursormoved	vim/vim/src/fileio.c	/^has_cursormoved(void)$/;"	f	signature:(void)
has_cursormovedI	vim/vim/src/fileio.c	/^has_cursormovedI(void)$/;"	f	signature:(void)
has_dash_c_arg	vim/vim/src/main.c	/^static int has_dash_c_arg = FALSE;$/;"	v	file:
has_env_var	vim/vim/src/misc1.c	/^has_env_var(char_u *p)$/;"	f	file:	signature:(char_u *p)
has_env_var	vim/vim/src/misc1.c	/^static int has_env_var(char_u *p);$/;"	p	file:	signature:(char_u *p)
has_format_option	vim/vim/src/option.c	/^has_format_option(int x)$/;"	f	signature:(int x)
has_funcundefined	vim/vim/src/fileio.c	/^has_funcundefined(void)$/;"	f	signature:(void)
has_gvim	vim/vim/src/dosinst.c	/^int	has_gvim = 0;		\/* installable gvim.exe exists *\/$/;"	v
has_insertcharpre	vim/vim/src/fileio.c	/^has_insertcharpre(void)$/;"	f	signature:(void)
has_loop_cmd	vim/vim/src/ex_eval.c	/^has_loop_cmd(char_u *p)$/;"	f	signature:(char_u *p)
has_mbyte	vim/vim/src/globals.h	/^EXTERN int	has_mbyte INIT(= 0);		\/* any multi-byte encoding *\/$/;"	v
has_mouse_termcode	vim/vim/src/term.c	/^static int has_mouse_termcode = 0;$/;"	v	file:
has_non_ascii	vim/vim/src/misc2.c	/^has_non_ascii(char_u *s)$/;"	f	signature:(char_u *s)
has_patch	vim/vim/src/version.c	/^has_patch(int n)$/;"	f	signature:(int n)
has_pending_job	vim/vim/src/channel.c	/^has_pending_job(void)$/;"	f	signature:(void)
has_pim	vim/vim/src/regexp_nfa.c	/^    int		    has_pim;	\/* TRUE when any state has a PIM *\/$/;"	m	struct:__anon121	file:	access:public
has_profiling	vim/vim/src/ex_cmds2.c	/^has_profiling($/;"	f	signature:( int file, char_u *fname, int *fp)
has_special_wildchar	vim/vim/src/misc1.c	/^has_special_wildchar(char_u *p)$/;"	f	file:	signature:(char_u *p)
has_special_wildchar	vim/vim/src/misc1.c	/^static int has_special_wildchar(char_u *p);$/;"	p	file:	signature:(char_u *p)
has_state_with_pos	vim/vim/src/regexp_nfa.c	/^has_state_with_pos($/;"	f	file:	signature:( nfa_list_T *l, nfa_state_T *state, regsubs_T *subs, nfa_pim_T *pim)
has_state_with_pos	vim/vim/src/regexp_nfa.c	/^static int has_state_with_pos(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs, nfa_pim_T *pim);$/;"	p	file:	signature:(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs, nfa_pim_T *pim)
has_submenu	vim/vim/src/gui_athena.c	/^has_submenu(Widget widget)$/;"	f	file:	signature:(Widget widget)
has_submenu	vim/vim/src/gui_athena.c	/^static Boolean	has_submenu(Widget);$/;"	p	file:
has_textchanged	vim/vim/src/fileio.c	/^has_textchanged(void)$/;"	f	signature:(void)
has_textchangedI	vim/vim/src/fileio.c	/^has_textchangedI(void)$/;"	f	signature:(void)
has_vim	vim/vim/src/dosinst.c	/^int	has_vim = 0;		\/* installable vim.exe exists *\/$/;"	v
has_zend	vim/vim/src/regexp.h	/^    int			has_zend;	\/* pattern contains \\ze *\/$/;"	m	struct:__anon144	access:public
hash_T	vim/vim/src/structs.h	/^typedef long_u hash_T;		\/* Type for hi_hash *\/$/;"	t
hash_add	vim/vim/src/hashtab.c	/^hash_add(hashtab_T *ht, char_u *key)$/;"	f	signature:(hashtab_T *ht, char_u *key)
hash_add_item	vim/vim/src/hashtab.c	/^hash_add_item($/;"	f	signature:( hashtab_T *ht, hashitem_T *hi, char_u *key, hash_T hash)
hash_clear	vim/vim/src/hashtab.c	/^hash_clear(hashtab_T *ht)$/;"	f	signature:(hashtab_T *ht)
hash_clear_all	vim/vim/src/hashtab.c	/^hash_clear_all(hashtab_T *ht, int off)$/;"	f	signature:(hashtab_T *ht, int off)
hash_debug_results	vim/vim/src/hashtab.c	/^hash_debug_results(void)$/;"	f	signature:(void)
hash_find	vim/vim/src/hashtab.c	/^hash_find(hashtab_T *ht, char_u *key)$/;"	f	signature:(hashtab_T *ht, char_u *key)
hash_hash	vim/vim/src/hashtab.c	/^hash_hash(char_u *key)$/;"	f	signature:(char_u *key)
hash_init	vim/vim/src/hashtab.c	/^hash_init(hashtab_T *ht)$/;"	f	signature:(hashtab_T *ht)
hash_lock	vim/vim/src/hashtab.c	/^hash_lock(hashtab_T *ht)$/;"	f	signature:(hashtab_T *ht)
hash_lookup	vim/vim/src/hashtab.c	/^hash_lookup(hashtab_T *ht, char_u *key, hash_T hash)$/;"	f	signature:(hashtab_T *ht, char_u *key, hash_T hash)
hash_may_resize	vim/vim/src/hashtab.c	/^hash_may_resize($/;"	f	file:	signature:( hashtab_T *ht, int minitems)
hash_may_resize	vim/vim/src/hashtab.c	/^static int hash_may_resize(hashtab_T *ht, int minitems);$/;"	p	file:	signature:(hashtab_T *ht, int minitems)
hash_remove	vim/vim/src/hashtab.c	/^hash_remove(hashtab_T *ht, hashitem_T *hi)$/;"	f	signature:(hashtab_T *ht, hashitem_T *hi)
hash_removed	vim/vim/src/globals.h	/^EXTERN char_u	hash_removed;$/;"	v
hash_unlock	vim/vim/src/hashtab.c	/^hash_unlock(hashtab_T *ht)$/;"	f	signature:(hashtab_T *ht)
hashitem_S	vim/vim/src/structs.h	/^typedef struct hashitem_S$/;"	s
hashitem_S::hi_hash	vim/vim/src/structs.h	/^    long_u	hi_hash;	\/* cached hash number of hi_key *\/$/;"	m	struct:hashitem_S	access:public
hashitem_S::hi_key	vim/vim/src/structs.h	/^    char_u	*hi_key;$/;"	m	struct:hashitem_S	access:public
hashitem_T	vim/vim/src/structs.h	/^} hashitem_T;$/;"	t	typeref:struct:hashitem_S
hashkey	vim/vim/src/spellfile.c	/^	char_u	hashkey[6];	\/* the hash key, only used while compressing *\/$/;"	m	union:wordnode_S::__anon5	file:	access:public
hashtab_T	vim/vim/src/structs.h	/^} hashtab_T;$/;"	t	typeref:struct:hashtable_S
hashtable_S	vim/vim/src/structs.h	/^typedef struct hashtable_S$/;"	s
hashtable_S::ht_array	vim/vim/src/structs.h	/^    hashitem_T	*ht_array;	\/* points to the array, allocated when it's$/;"	m	struct:hashtable_S	access:public
hashtable_S::ht_error	vim/vim/src/structs.h	/^    int		ht_error;	\/* when set growing failed, can't add more$/;"	m	struct:hashtable_S	access:public
hashtable_S::ht_filled	vim/vim/src/structs.h	/^    long_u	ht_filled;	\/* number of items used + removed *\/$/;"	m	struct:hashtable_S	access:public
hashtable_S::ht_locked	vim/vim/src/structs.h	/^    int		ht_locked;	\/* counter for hash_lock() *\/$/;"	m	struct:hashtable_S	access:public
hashtable_S::ht_mask	vim/vim/src/structs.h	/^    long_u	ht_mask;	\/* mask used for hash value (nr of items in$/;"	m	struct:hashtable_S	access:public
hashtable_S::ht_smallarray	vim/vim/src/structs.h	/^    hashitem_T	ht_smallarray[HT_INIT_SIZE];   \/* initial array *\/$/;"	m	struct:hashtable_S	access:public
hashtable_S::ht_used	vim/vim/src/structs.h	/^    long_u	ht_used;	\/* number of items used *\/$/;"	m	struct:hashtable_S	access:public
hasnum	vim/vim/src/structs.h	/^    int		hasnum;$/;"	m	struct:__anon204	access:public
have_dollars	vim/vim/src/os_unix.c	/^have_dollars(int num, char_u **file)$/;"	f	file:	signature:(int num, char_u **file)
have_dollars	vim/vim/src/os_unix.c	/^static int  have_dollars(int, char_u **);$/;"	p	file:	signature:(int, char_u **)
have_wildcard	vim/vim/src/os_unix.c	/^have_wildcard(int num, char_u **file)$/;"	f	file:	signature:(int num, char_u **file)
have_wildcard	vim/vim/src/os_unix.c	/^static int  have_wildcard(int, char_u **);$/;"	p	file:	signature:(int, char_u **)
hdr	vim/vim/src/gui_w32.c	/^    NMHDR	hdr;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
hdr	vim/vim/src/gui_w32.c	/^    NMHDR	hdr;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
hdr	vim/vim/src/gui_w32.c	/^    NMHDR      hdr;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
head	vim/vim/src/if_xcmdsrv.c	/^static x_queue_T head = {NULL, 0, NULL, NULL};$/;"	v	file:
head	vim/vim/src/tag.c	/^    char_u	*head;		\/* start of pattern head *\/$/;"	m	struct:__anon155	file:	access:public
header_count	vim/vim/src/undo.c	/^static int header_count;$/;"	v	file:
headlen	vim/vim/src/tag.c	/^    int		headlen;	\/* length of head[] *\/$/;"	m	struct:__anon155	file:	access:public
height	vim/vim/src/gui.h	/^    int		height;		\/* Current height of scroll bar in rows *\/$/;"	m	struct:GuiScrollbar	access:public
height	vim/vim/src/hardcopy.c	/^    float	height;$/;"	m	struct:prt_mediasize_S	file:	access:public
height	vim/vim/src/move.c	/^    int		    height;	\/* height of added line *\/$/;"	m	struct:__anon151	file:	access:public
height	vim/vim/src/xpm/include/simx.h	/^    unsigned int height;$/;"	m	struct:__anon87	access:public
height	vim/vim/src/xpm/include/xpm.h	/^    unsigned int height;		\/* Returns the height of the created$/;"	m	struct:__anon93	access:public
height	vim/vim/src/xpm/include/xpm.h	/^    unsigned int height;	\/* image height *\/$/;"	m	struct:__anon91	access:public
help	vim/vim/src/if_cscope.h	/^    char *  help;$/;"	m	struct:__anon68	access:public
help_compare	vim/vim/src/ex_cmds.c	/^	help_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
help_compare	vim/vim/src/ex_cmds.c	/^help_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
help_heuristic	vim/vim/src/ex_cmds.c	/^help_heuristic($/;"	f	signature:( char_u *matched_string, int offset, int wrong_case)
helptags_cb	vim/vim/src/ex_cmds.c	/^helptags_cb(char_u *fname, void *cookie)$/;"	f	file:	signature:(char_u *fname, void *cookie)
helptags_one	vim/vim/src/ex_cmds.c	/^helptags_one($/;"	f	file:	signature:( char_u *dir, char_u *ext, char_u *tagfname, int add_help_tags)
helptext	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static char *helptext[] = {$/;"	v	file:
hex2nr	vim/vim/src/charset.c	/^hex2nr(int c)$/;"	f	signature:(int c)
hex_digit	vim/vim/src/term.c	/^hex_digit(int c)$/;"	f	file:	signature:(int c)
hexhex2nr	vim/vim/src/charset.c	/^hexhex2nr(char_u *p)$/;"	f	signature:(char_u *p)
hexx	vim/vim/src/xxd/xxd.c	/^char hexxa[] = "0123456789abcdef0123456789ABCDEF", *hexx = hexxa;$/;"	v
hexxa	vim/vim/src/xxd/xxd.c	/^char hexxa[] = "0123456789abcdef0123456789ABCDEF", *hexx = hexxa;$/;"	v
hi	vim/vim/src/if_py_both.h	/^    hashitem_T	*hi;$/;"	m	struct:__anon101	access:public
hi_hash	vim/vim/src/structs.h	/^    long_u	hi_hash;	\/* cached hash number of hi_key *\/$/;"	m	struct:hashitem_S	access:public
hi_key	vim/vim/src/structs.h	/^    char_u	*hi_key;$/;"	m	struct:hashitem_S	access:public
hi_to_py	vim/vim/src/if_py_both.h	/^typedef PyObject *(*hi_to_py)(hashitem_T *);$/;"	t
hide	vim/vim/src/structs.h	/^    int		hide;			\/* TRUE when ":hide" was used *\/$/;"	m	struct:__anon171	access:public
highest_patch	vim/vim/src/version.c	/^highest_patch(void)$/;"	f	signature:(void)
highlight_attr	vim/vim/src/globals.h	/^EXTERN int	highlight_attr[HLF_COUNT];  \/* Highl. attr for each context. *\/$/;"	v
highlight_changed	vim/vim/src/syntax.c	/^highlight_changed(void)$/;"	f	signature:(void)
highlight_clear	vim/vim/src/syntax.c	/^highlight_clear(int idx)$/;"	f	file:	signature:(int idx)
highlight_clear	vim/vim/src/syntax.c	/^static void highlight_clear(int idx);$/;"	p	file:	signature:(int idx)
highlight_color	vim/vim/src/syntax.c	/^highlight_color($/;"	f	signature:( int id, char_u *what, int modec)
highlight_exists	vim/vim/src/syntax.c	/^highlight_exists(char_u *name)$/;"	f	signature:(char_u *name)
highlight_ga	vim/vim/src/syntax.c	/^static garray_T highlight_ga;	\/* highlight groups for 'highlight' option *\/$/;"	v	file:
highlight_gui_color_rgb	vim/vim/src/syntax.c	/^highlight_gui_color_rgb($/;"	f	signature:( int id, int fg)
highlight_gui_started	vim/vim/src/syntax.c	/^highlight_gui_started(void)$/;"	f	signature:(void)
highlight_has_attr	vim/vim/src/syntax.c	/^highlight_has_attr($/;"	f	signature:( int id, int flag, int modec)
highlight_init_both	vim/vim/src/syntax.c	/^static char *(highlight_init_both[]) =$/;"	v	file:
highlight_init_dark	vim/vim/src/syntax.c	/^static char *(highlight_init_dark[]) =$/;"	v	file:
highlight_init_light	vim/vim/src/syntax.c	/^static char *(highlight_init_light[]) =$/;"	v	file:
highlight_list	vim/vim/src/syntax.c	/^highlight_list(void)$/;"	f	file:	signature:(void)
highlight_list	vim/vim/src/syntax.c	/^static void highlight_list(void);$/;"	p	file:	signature:(void)
highlight_list_arg	vim/vim/src/syntax.c	/^highlight_list_arg($/;"	f	file:	signature:( int id, int didh, int type, int iarg, char_u *sarg, char *name)
highlight_list_arg	vim/vim/src/syntax.c	/^static int highlight_list_arg(int id, int didh, int type, int iarg, char_u *sarg, char *name);$/;"	p	file:	signature:(int id, int didh, int type, int iarg, char_u *sarg, char *name)
highlight_list_one	vim/vim/src/syntax.c	/^highlight_list_one(int id)$/;"	f	file:	signature:(int id)
highlight_list_one	vim/vim/src/syntax.c	/^static void highlight_list_one(int id);$/;"	p	file:	signature:(int id)
highlight_list_two	vim/vim/src/syntax.c	/^highlight_list_two(int cnt, int attr)$/;"	f	file:	signature:(int cnt, int attr)
highlight_list_two	vim/vim/src/syntax.c	/^static void highlight_list_two(int cnt, int attr);$/;"	p	file:	signature:(int cnt, int attr)
highlight_mask	vim/vim/src/gui.h	/^    int		highlight_mask;	    \/* Highlight attribute mask *\/$/;"	m	struct:Gui	access:public
highlight_match	vim/vim/src/globals.h	/^EXTERN int	highlight_match INIT(= FALSE);	\/* show search match pos *\/$/;"	v
highlight_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap highlight_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
highlight_stlnc	vim/vim/src/globals.h	/^EXTERN int	highlight_stlnc[9];		\/* On top of user *\/$/;"	v
highlight_user	vim/vim/src/globals.h	/^EXTERN int	highlight_user[9];		\/* User[1-9] attributes *\/$/;"	v
hinst	vim/vim/src/gui_w32.c	/^	HINSTANCE hinst;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
hinst	vim/vim/src/gui_w32.c	/^    HINSTANCE	hinst;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
hinst	vim/vim/src/gui_w32.c	/^    HINSTANCE	hinst;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
hinst	vim/vim/src/gui_w32.c	/^    HINSTANCE  hinst;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
hinstLua	vim/vim/src/if_lua.c	/^static HANDLE hinstLua = NULL;$/;"	v	file:
hinstPy3	vim/vim/src/if_python3.c	/^static HINSTANCE hinstPy3 = 0; \/* Instance of python.dll *\/$/;"	v	file:
hinstPython	vim/vim/src/if_python.c	/^static HINSTANCE hinstPython = 0; \/* Instance of python.dll *\/$/;"	v	file:
hinstRuby	vim/vim/src/if_ruby.c	/^static HINSTANCE hinstRuby = NULL; \/* Instance of ruby.dll *\/$/;"	v	file:
hints_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *hints_cmt;		\/* Comment of the hints section *\/$/;"	m	struct:__anon92	access:public
hints_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *hints_cmt;                    \/* Comment of the hints section *\/$/;"	m	struct:__anon93	access:public
hisidx	vim/vim/src/ex_getln.c	/^static int	hisidx[HIST_COUNT] = {-1, -1, -1, -1, -1};  \/* lastused entry *\/$/;"	v	file:
hislen	vim/vim/src/ex_getln.c	/^static int	hislen = 0;		\/* actual length of history tables *\/$/;"	v	file:
hisnum	vim/vim/src/ex_getln.c	/^    int		hisnum;		\/* identifying number *\/$/;"	m	struct:hist_entry	file:	access:public
hisnum	vim/vim/src/ex_getln.c	/^static int	hisnum[HIST_COUNT] = {0, 0, 0, 0, 0};$/;"	v	file:
hisstr	vim/vim/src/ex_getln.c	/^    char_u	*hisstr;	\/* actual entry, separator char after the NUL *\/$/;"	m	struct:hist_entry	file:	access:public
hist_char2type	vim/vim/src/ex_getln.c	/^hist_char2type(int c)$/;"	f	file:	signature:(int c)
hist_char2type	vim/vim/src/ex_getln.c	/^static int	hist_char2type(int c);$/;"	p	file:	signature:(int c)
hist_entry	vim/vim/src/ex_getln.c	/^typedef struct hist_entry$/;"	s	file:
hist_entry::hisnum	vim/vim/src/ex_getln.c	/^    int		hisnum;		\/* identifying number *\/$/;"	m	struct:hist_entry	file:	access:public
hist_entry::hisstr	vim/vim/src/ex_getln.c	/^    char_u	*hisstr;	\/* actual entry, separator char after the NUL *\/$/;"	m	struct:hist_entry	file:	access:public
hist_entry::time_set	vim/vim/src/ex_getln.c	/^    time_t	time_set;	\/* when it was typed, zero if unknown *\/$/;"	m	struct:hist_entry	file:	access:public
hist_entry::viminfo	vim/vim/src/ex_getln.c	/^    int		viminfo;	\/* when TRUE hisstr comes from viminfo *\/$/;"	m	struct:hist_entry	file:	access:public
hist_type2char	vim/vim/src/ex_getln.c	/^hist_type2char($/;"	f	file:	signature:( int type, int use_question)
hist_type2char	vim/vim/src/ex_getln.c	/^static int	hist_type2char(int type, int use_question);$/;"	p	file:	signature:(int type, int use_question)
histentry_T	vim/vim/src/ex_getln.c	/^} histentry_T;$/;"	t	typeref:struct:hist_entry	file:
history	vim/vim/src/ex_getln.c	/^static histentry_T *(history[HIST_COUNT]) = {NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
history_names	vim/vim/src/ex_getln.c	/^static char *(history_names[]) =$/;"	v	file:
hit_return_msg	vim/vim/src/message.c	/^hit_return_msg(void)$/;"	f	file:	signature:(void)
hit_return_msg	vim/vim/src/message.c	/^static void hit_return_msg(void);$/;"	p	file:	signature:(void)
hkmap	vim/vim/src/edit.c	/^hkmap(int c)$/;"	f	signature:(int c)
hl	vim/vim/src/structs.h	/^    match_T	hl;	    \/* struct for doing the actual highlighting *\/$/;"	m	struct:matchitem	access:public
hl_attr_table	vim/vim/src/syntax.c	/^static int hl_attr_table[] =$/;"	v	file:
hl_combine_attr	vim/vim/src/syntax.c	/^hl_combine_attr(int char_attr, int prim_attr)$/;"	f	signature:(int char_attr, int prim_attr)
hl_do_font	vim/vim/src/syntax.c	/^hl_do_font($/;"	f	file:	signature:( int idx, char_u *arg, int do_normal, int do_menu UNUSED, int do_tooltip UNUSED, int free_font)
hl_do_font	vim/vim/src/syntax.c	/^static void hl_do_font(int idx, char_u *arg, int do_normal, int do_menu, int do_tooltip, int free_font);$/;"	p	file:	signature:(int idx, char_u *arg, int do_normal, int do_menu, int do_tooltip, int free_font)
hl_get_font_name	vim/vim/src/syntax.c	/^hl_get_font_name(void)$/;"	f	signature:(void)
hl_group	vim/vim/src/syntax.c	/^struct hl_group$/;"	s	file:
hl_group::sg_cleared	vim/vim/src/syntax.c	/^    int		sg_cleared;	\/* "hi clear" was used *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_cterm	vim/vim/src/syntax.c	/^    int		sg_cterm;	\/* "cterm=" highlighting attr *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_cterm_attr	vim/vim/src/syntax.c	/^    int		sg_cterm_attr;	\/* Screen attr for color term mode *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_cterm_bg	vim/vim/src/syntax.c	/^    int		sg_cterm_bg;	\/* terminal bg color number + 1 *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_cterm_bold	vim/vim/src/syntax.c	/^    int		sg_cterm_bold;	\/* bold attr was set for light color *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_cterm_fg	vim/vim/src/syntax.c	/^    int		sg_cterm_fg;	\/* terminal fg color number + 1 *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_font	vim/vim/src/syntax.c	/^    GuiFont	sg_font;	\/* GUI font handle *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_font_name	vim/vim/src/syntax.c	/^    char_u	*sg_font_name;  \/* GUI font or fontset name *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_fontset	vim/vim/src/syntax.c	/^    GuiFontset	sg_fontset;	\/* GUI fontset handle *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui	vim/vim/src/syntax.c	/^    int		sg_gui;		\/* "gui=" highlighting attributes *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_attr	vim/vim/src/syntax.c	/^    int		sg_gui_attr;    \/* Screen attr for GUI mode *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_bg	vim/vim/src/syntax.c	/^    guicolor_T	sg_gui_bg;	\/* GUI background color handle *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_bg_name	vim/vim/src/syntax.c	/^    char_u	*sg_gui_bg_name;\/* GUI background color name *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_fg	vim/vim/src/syntax.c	/^    guicolor_T	sg_gui_fg;	\/* GUI foreground color handle *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_fg_name	vim/vim/src/syntax.c	/^    char_u	*sg_gui_fg_name;\/* GUI foreground color name *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_sp	vim/vim/src/syntax.c	/^    guicolor_T	sg_gui_sp;	\/* GUI special color handle *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_gui_sp_name	vim/vim/src/syntax.c	/^    char_u	*sg_gui_sp_name;\/* GUI special color name *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_link	vim/vim/src/syntax.c	/^    int		sg_link;	\/* link to this highlight group ID *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_name	vim/vim/src/syntax.c	/^    char_u	*sg_name;	\/* highlight group name *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_name_u	vim/vim/src/syntax.c	/^    char_u	*sg_name_u;	\/* uppercase of sg_name *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_scriptID	vim/vim/src/syntax.c	/^    scid_T	sg_scriptID;	\/* script in which the group was last set *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_set	vim/vim/src/syntax.c	/^    int		sg_set;		\/* combination of SG_* flags *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_start	vim/vim/src/syntax.c	/^    char_u	*sg_start;	\/* terminal string for start highl *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_stop	vim/vim/src/syntax.c	/^    char_u	*sg_stop;	\/* terminal string for stop highl *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_term	vim/vim/src/syntax.c	/^    int		sg_term;	\/* "term=" highlighting attributes *\/$/;"	m	struct:hl_group	file:	access:public
hl_group::sg_term_attr	vim/vim/src/syntax.c	/^    int		sg_term_attr;	\/* Screen attr for term mode *\/$/;"	m	struct:hl_group	file:	access:public
hl_has_settings	vim/vim/src/syntax.c	/^hl_has_settings(int idx, int check_link)$/;"	f	file:	signature:(int idx, int check_link)
hl_has_settings	vim/vim/src/syntax.c	/^static int hl_has_settings(int idx, int check_link);$/;"	p	file:	signature:(int idx, int check_link)
hl_name_table	vim/vim/src/syntax.c	/^static char *(hl_name_table[]) =$/;"	v	file:
hl_set_bg_color_name	vim/vim/src/syntax.c	/^hl_set_bg_color_name($/;"	f	signature:( char_u *name)
hl_set_fg_color_name	vim/vim/src/syntax.c	/^hl_set_fg_color_name($/;"	f	signature:( char_u *name)
hl_set_font_name	vim/vim/src/syntax.c	/^hl_set_font_name(char_u *font_name)$/;"	f	signature:(char_u *font_name)
hlf_T	vim/vim/src/vim.h	/^} hlf_T;$/;"	t	typeref:enum:__anon243
hlg_id	vim/vim/src/structs.h	/^    int		hlg_id;	    \/* highlight group ID *\/$/;"	m	struct:matchitem	access:public
hold_gui_events	vim/vim/src/globals.h	/^EXTERN volatile int hold_gui_events INIT(= 0);$/;"	v
home_replace	vim/vim/src/misc1.c	/^home_replace($/;"	f	signature:( buf_T *buf, char_u *src, char_u *dst, int dstlen, int one)
home_replace_save	vim/vim/src/misc1.c	/^home_replace_save($/;"	f	signature:( buf_T *buf, char_u *src)
homedir	vim/vim/src/misc1.c	/^static char_u	*homedir = NULL;$/;"	v	file:
hpux	vim/vim/src/pty.c	111;"	d	file:
hres	vim/vim/src/GvimExt/gvimext.cpp	/^HRESULT hres = 0;$/;"	v
ht	vim/vim/src/if_py_both.h	/^    hashtab_T	*ht;$/;"	m	struct:__anon101	access:public
ht	vim/vim/src/structs.h	/^    hashtab_T		*ht;$/;"	m	struct:ht_stack_S	access:public
ht_array	vim/vim/src/if_py_both.h	/^    hashitem_T	*ht_array;$/;"	m	struct:__anon101	access:public
ht_array	vim/vim/src/structs.h	/^    hashitem_T	*ht_array;	\/* points to the array, allocated when it's$/;"	m	struct:hashtable_S	access:public
ht_error	vim/vim/src/structs.h	/^    int		ht_error;	\/* when set growing failed, can't add more$/;"	m	struct:hashtable_S	access:public
ht_filled	vim/vim/src/structs.h	/^    long_u	ht_filled;	\/* number of items used + removed *\/$/;"	m	struct:hashtable_S	access:public
ht_locked	vim/vim/src/structs.h	/^    int		ht_locked;	\/* counter for hash_lock() *\/$/;"	m	struct:hashtable_S	access:public
ht_mask	vim/vim/src/structs.h	/^    long_u	ht_mask;	\/* mask used for hash value (nr of items in$/;"	m	struct:hashtable_S	access:public
ht_smallarray	vim/vim/src/structs.h	/^    hashitem_T	ht_smallarray[HT_INIT_SIZE];   \/* initial array *\/$/;"	m	struct:hashtable_S	access:public
ht_stack_S	vim/vim/src/structs.h	/^typedef struct ht_stack_S$/;"	s
ht_stack_S::ht	vim/vim/src/structs.h	/^    hashtab_T		*ht;$/;"	m	struct:ht_stack_S	access:public
ht_stack_S::prev	vim/vim/src/structs.h	/^    struct ht_stack_S	*prev;$/;"	m	struct:ht_stack_S	typeref:struct:ht_stack_S::ht_stack_S	access:public
ht_stack_T	vim/vim/src/structs.h	/^} ht_stack_T;$/;"	t	typeref:struct:ht_stack_S
ht_used	vim/vim/src/if_py_both.h	/^    long_u	ht_used;$/;"	m	struct:__anon101	access:public
ht_used	vim/vim/src/structs.h	/^    long_u	ht_used;	\/* number of items used *\/$/;"	m	struct:hashtable_S	access:public
html_atom	vim/vim/src/gui_gtk_x11.c	/^static GdkAtom html_atom = GDK_NONE;$/;"	v	file:
htonl2	vim/vim/src/blowfish.c	379;"	d	file:
htonl2	vim/vim/src/blowfish.c	383;"	d	file:
huntype	vim/vim/src/xxd/xxd.c	/^huntype($/;"	f	file:	signature:( FILE *fpi, FILE *fpo, FILE *fperr, int cols, int hextype, long base_off)
huntype	vim/vim/src/xxd/xxd.c	/^static int huntype __P((FILE *, FILE *, FILE *, int, int, long));$/;"	p	file:	signature:(FILE *, FILE *, FILE *, int, int, long)
hwnd	vim/vim/src/gui_w32.c	/^	HWND hwnd;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
hwnd	vim/vim/src/os_mswin.c	/^    HWND hwnd;$/;"	m	struct:server_id	file:	access:public
i_acute	vim/vim/src/regexp_nfa.c	795;"	d	file:
i_circumflex	vim/vim/src/regexp_nfa.c	796;"	d	file:
i_diaeresis	vim/vim/src/regexp_nfa.c	797;"	d	file:
i_grave	vim/vim/src/regexp_nfa.c	794;"	d	file:
iceconn	vim/vim/src/os_unix.c	/^    IceConn iceconn;	    \/* The ICE connection ID *\/$/;"	m	struct:__anon74	file:	access:public
icon_builtin	vim/vim/src/structs.h	/^    int		icon_builtin;	    \/* icon names is BuiltIn{nr} *\/$/;"	m	struct:VimMenu	access:public
icon_link_names	vim/vim/src/dosinst.h	/^char *(icon_link_names[ICON_COUNT]) =$/;"	v
icon_name	vim/vim/src/gui_gtk.c	/^    const char *icon_name;$/;"	m	struct:IconNames	file:	access:public
icon_names	vim/vim/src/dosinst.h	/^char *(icon_names[ICON_COUNT]) =$/;"	v
icon_size_changed_foreach	vim/vim/src/gui_gtk_x11.c	/^icon_size_changed_foreach(GtkWidget *widget, gpointer user_data)$/;"	f	file:	signature:(GtkWidget *widget, gpointer user_data)
iconfile	vim/vim/src/structs.h	/^    char_u	*iconfile;	    \/* name of file for icon or NULL *\/$/;"	m	struct:VimMenu	access:public
iconidx	vim/vim/src/structs.h	/^    int		iconidx;	    \/* icon index (-1 if not set) *\/$/;"	m	struct:VimMenu	access:public
iconv	vim/vim/src/globals.h	/^EXTERN size_t (*iconv) (iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);$/;"	v
iconv_close	vim/vim/src/globals.h	/^EXTERN int (*iconv_close) (iconv_t cd);$/;"	v
iconv_enabled	vim/vim/src/mbyte.c	/^iconv_enabled(int verbose)$/;"	f	signature:(int verbose)
iconv_end	vim/vim/src/mbyte.c	/^iconv_end(void)$/;"	f	signature:(void)
iconv_errno	vim/vim/src/globals.h	/^EXTERN int* (*iconv_errno) (void);$/;"	v
iconv_open	vim/vim/src/globals.h	/^EXTERN iconv_t (*iconv_open) (const char *tocode, const char *fromcode);$/;"	v
iconv_string	vim/vim/src/mbyte.c	/^iconv_string($/;"	f	file:	signature:( vimconv_T *vcp, char_u *str, int slen, int *unconvlenp, int *resultlenp)
iconv_string	vim/vim/src/mbyte.c	/^static char_u *iconv_string(vimconv_T *vcp, char_u *str, int slen, int *unconvlenp, int *resultlenp);$/;"	p	file:	signature:(vimconv_T *vcp, char_u *str, int slen, int *unconvlenp, int *resultlenp)
iconv_t	vim/vim/src/structs.h	/^typedef struct _iconv_t *iconv_t;$/;"	t	typeref:struct:_iconv_t
iconv_t	vim/vim/src/structs.h	/^typedef void *iconv_t;$/;"	t
iconvctl	vim/vim/src/globals.h	/^EXTERN int (*iconvctl) (iconv_t cd, int request, void *argument);$/;"	v
id	vim/vim/src/gui.h	/^    ControlHandle id;		\/* A handle to the scrollbar *\/$/;"	m	struct:GuiScrollbar	access:public
id	vim/vim/src/gui.h	/^    GtkWidget *id;		\/* Id of real scroll bar *\/$/;"	m	struct:GuiScrollbar	access:public
id	vim/vim/src/gui.h	/^    HWND	id;		\/* Id of real scroll bar *\/$/;"	m	struct:GuiScrollbar	access:public
id	vim/vim/src/gui.h	/^    PtWidget_t	*id;$/;"	m	struct:GuiScrollbar	access:public
id	vim/vim/src/gui.h	/^    Widget	id;		\/* Id of real scroll bar *\/$/;"	m	struct:GuiScrollbar	access:public
id	vim/vim/src/gui_motif.c	/^    int	    id;$/;"	m	struct:dialog_callback_arg	file:	access:public
id	vim/vim/src/if_xcmdsrv.c	/^    Window  id;$/;"	m	struct:ServerReply	file:	access:public
id	vim/vim/src/regexp.h	/^    int			id;$/;"	m	struct:nfa_state	access:public
id	vim/vim/src/regexp_nfa.c	/^    int		    id;		\/* ID of the list *\/$/;"	m	struct:__anon121	file:	access:public
id	vim/vim/src/structs.h	/^    GtkWidget	*id;		    \/* Manage this to enable item *\/$/;"	m	struct:VimMenu	access:public
id	vim/vim/src/structs.h	/^    PtWidget_t	*id;$/;"	m	struct:VimMenu	access:public
id	vim/vim/src/structs.h	/^    UINT	id;		    \/* Id of menu item *\/$/;"	m	struct:VimMenu	access:public
id	vim/vim/src/structs.h	/^    Widget	id;		    \/* Manage this to enable item *\/$/;"	m	struct:VimMenu	access:public
id	vim/vim/src/structs.h	/^    int		id;		\/* highlight group ID *\/$/;"	m	struct:cursor_entry	access:public
id	vim/vim/src/structs.h	/^    int		id;		\/* id of this arglist *\/$/;"	m	struct:arglist	access:public
id	vim/vim/src/structs.h	/^    int		id;		\/* unique identifier for each placed sign *\/$/;"	m	struct:signlist	access:public
id	vim/vim/src/structs.h	/^    int		id;	    \/* match ID *\/$/;"	m	struct:matchitem	access:public
id	vim/vim/src/structs.h	/^    short	id;		\/* highlight group ID of item *\/$/;"	m	struct:sp_syn	access:public
id	vim/vim/src/syntax.c	/^    int		id;$/;"	m	struct:__anon139	file:	access:public
id1_codes	vim/vim/src/memline.c	/^static int id1_codes[] = {$/;"	v	file:
id_lm	vim/vim/src/structs.h	/^    int		id_lm;		\/* highlight group ID for :lmap mode *\/$/;"	m	struct:cursor_entry	access:public
ident	vim/vim/src/gui.h	/^    long	ident;		\/* Unique identifier for each scrollbar *\/$/;"	m	struct:GuiScrollbar	access:public
idopt_T	vim/vim/src/option.c	/^} idopt_T;$/;"	t	typeref:enum:__anon159	file:
idx	vim/vim/src/evalfunc.c	/^    int		idx;$/;"	m	struct:__anon251	file:	access:public
idx	vim/vim/src/gui_mac.c	/^    short   idx;$/;"	m	struct:__anon225	file:	access:public
idx_T	vim/vim/src/spell.h	/^typedef int idx_T;$/;"	t
idx_T	vim/vim/src/spell.h	/^typedef long idx_T;$/;"	t
iemsg	vim/vim/src/message.c	/^iemsg(char_u *s)$/;"	f	signature:(char_u *s)
iemsg2	vim/vim/src/message.c	/^iemsg2(char_u *s, char_u *a1)$/;"	f	signature:(char_u *s, char_u *a1)
iemsgn	vim/vim/src/message.c	/^iemsgn(char_u *s, long n)$/;"	f	signature:(char_u *s, long n)
if_already	vim/vim/runtime/doc/makehtml.awk	/^function if_already() {$/;"	f
if_level	vim/vim/src/ex_docmd.c	/^static int	if_level = 0;		\/* depth in :if *\/$/;"	v	file:
ignore_enter	vim/vim/src/gui_gtk.c	/^    int		ignore_enter;	    \/* no default button, ignore "Enter" *\/$/;"	m	struct:_DialogInfo	file:	access:public
ignore_error	vim/vim/src/message.c	/^ignore_error(char_u *msg)$/;"	f	file:	signature:(char_u *msg)
ignore_error_for_testing	vim/vim/src/message.c	/^ignore_error_for_testing(char_u *error)$/;"	f	signature:(char_u *error)
ignore_error_list	vim/vim/src/message.c	/^static garray_T ignore_error_list = GA_EMPTY;$/;"	v	file:
ignore_script	vim/vim/src/globals.h	/^EXTERN int	ignore_script INIT(= FALSE);  \/* ignore script input *\/$/;"	v
ignore_tabline_evt	vim/vim/src/gui_gtk_x11.c	/^static int ignore_tabline_evt = FALSE;$/;"	v	file:
ignorecase	vim/vim/src/search.c	/^ignorecase(char_u *pat)$/;"	f	signature:(char_u *pat)
ignorecase_opt	vim/vim/src/search.c	/^ignorecase_opt(char_u *pat, int ic_in, int scs)$/;"	f	signature:(char_u *pat, int ic_in, int scs)
ignored	vim/vim/src/globals.h	/^EXTERN int ignored;$/;"	v
ignoredp	vim/vim/src/globals.h	/^EXTERN char *ignoredp;$/;"	v
illegal_char	vim/vim/src/option.c	/^illegal_char(char_u *errbuf, int c)$/;"	f	file:	signature:(char_u *errbuf, int c)
illegal_char	vim/vim/src/option.c	/^static char_u *illegal_char(char_u *, int);$/;"	p	file:	signature:(char_u *, int)
illegal_slash	vim/vim/src/misc2.c	/^illegal_slash(const char *name)$/;"	f	file:	signature:(const char *name)
im_activatekey_keyval	vim/vim/src/mbyte.c	/^static unsigned int  im_activatekey_keyval = GDK_VoidSymbol;$/;"	v	file:
im_activatekey_state	vim/vim/src/mbyte.c	/^static unsigned int  im_activatekey_state  = 0;$/;"	v	file:
im_add_to_input	vim/vim/src/mbyte.c	/^im_add_to_input(char_u *str, int len)$/;"	f	file:	signature:(char_u *str, int len)
im_commit_cb	vim/vim/src/mbyte.c	/^im_commit_cb(GtkIMContext *context UNUSED,$/;"	f	file:	signature:(GtkIMContext *context UNUSED, const gchar *str, gpointer data UNUSED)
im_commit_handler_id	vim/vim/src/mbyte.c	/^static unsigned long im_commit_handler_id  = 0;$/;"	v	file:
im_correct_cursor	vim/vim/src/mbyte.c	/^im_correct_cursor(int num_move_back)$/;"	f	file:	signature:(int num_move_back)
im_delete_preedit	vim/vim/src/mbyte.c	/^im_delete_preedit(void)$/;"	f	file:	signature:(void)
im_get_feedback_attr	vim/vim/src/mbyte.c	/^im_get_feedback_attr(int col)$/;"	f	signature:(int col)
im_get_status	vim/vim/src/gui_mac.c	/^im_get_status(void)$/;"	f	signature:(void)
im_get_status	vim/vim/src/gui_w32.c	/^im_get_status(void)$/;"	f	signature:(void)
im_get_status	vim/vim/src/hangulin.c	/^im_get_status(void)$/;"	f	signature:(void)
im_get_status	vim/vim/src/mbyte.c	/^im_get_status(void)$/;"	f	signature:(void)
im_initialized	vim/vim/src/gui_mac.c	/^static int		     im_initialized = 0;$/;"	v	file:
im_is_active	vim/vim/src/gui_mac.c	/^static int im_is_active = FALSE;$/;"	v	file:
im_is_active	vim/vim/src/mbyte.c	/^static int im_is_active	       = FALSE;	\/* IM is enabled for current mode    *\/$/;"	v	file:
im_is_preediting	vim/vim/src/mbyte.c	/^im_is_preediting(void)$/;"	f	signature:(void)
im_on_window_switch	vim/vim/src/gui_mac.c	/^im_on_window_switch(int active)$/;"	f	file:	signature:(int active)
im_on_window_switch	vim/vim/src/gui_mac.c	/^static void im_on_window_switch(int active);$/;"	p	file:	signature:(int active)
im_preedit_changed_cb	vim/vim/src/mbyte.c	/^im_preedit_changed_cb(GtkIMContext *context, gpointer data UNUSED)$/;"	f	file:	signature:(GtkIMContext *context, gpointer data UNUSED)
im_preedit_cursor	vim/vim/src/mbyte.c	/^static int im_preedit_cursor   = 0;	\/* cursor offset in characters       *\/$/;"	v	file:
im_preedit_end_cb	vim/vim/src/mbyte.c	/^im_preedit_end_cb(GtkIMContext *context UNUSED, gpointer data UNUSED)$/;"	f	file:	signature:(GtkIMContext *context UNUSED, gpointer data UNUSED)
im_preedit_start_cb	vim/vim/src/mbyte.c	/^im_preedit_start_cb(GtkIMContext *context UNUSED, gpointer data UNUSED)$/;"	f	file:	signature:(GtkIMContext *context UNUSED, gpointer data UNUSED)
im_preedit_trailing	vim/vim/src/mbyte.c	/^static int im_preedit_trailing = 0;	\/* number of characters after cursor *\/$/;"	v	file:
im_save_status	vim/vim/src/ui.c	/^im_save_status(long *psave)$/;"	f	signature:(long *psave)
im_set_active	vim/vim/src/gui_mac.c	/^im_set_active(int active)$/;"	f	signature:(int active)
im_set_active	vim/vim/src/gui_w32.c	/^im_set_active(int active)$/;"	f	signature:(int active)
im_set_active	vim/vim/src/mbyte.c	/^im_set_active(int active)$/;"	f	signature:(int active)
im_set_font	vim/vim/src/gui_w32.c	/^im_set_font(LOGFONT *lf)$/;"	f	signature:(LOGFONT *lf)
im_set_position	vim/vim/src/gui_mac.c	/^im_set_position(int row, int col)$/;"	f	signature:(int row, int col)
im_set_position	vim/vim/src/gui_w32.c	/^im_set_position(int row, int col)$/;"	f	signature:(int row, int col)
im_set_position	vim/vim/src/mbyte.c	/^im_set_position(int row UNUSED, int col UNUSED)$/;"	f	signature:(int row UNUSED, int col UNUSED)
im_set_position	vim/vim/src/mbyte.c	/^im_set_position(int row, int col)$/;"	f	signature:(int row, int col)
im_show_info	vim/vim/src/mbyte.c	/^im_show_info(void)$/;"	f	file:	signature:(void)
im_shutdown	vim/vim/src/mbyte.c	/^im_shutdown(void)$/;"	f	signature:(void)
im_string_to_keyval	vim/vim/src/mbyte.c	/^im_string_to_keyval(const char *str, unsigned int *keyval, unsigned int *state)$/;"	f	file:	signature:(const char *str, unsigned int *keyval, unsigned int *state)
im_synthesize_keypress	vim/vim/src/mbyte.c	/^im_synthesize_keypress(unsigned int keyval, unsigned int state)$/;"	f	file:	signature:(unsigned int keyval, unsigned int state)
im_xim_isvalid_imactivate	vim/vim/src/mbyte.c	/^im_xim_isvalid_imactivate(void)$/;"	f	signature:(void)
image	vim/vim/src/structs.h	/^    Pixmap	image;		    \/* Toolbar image *\/$/;"	m	struct:VimMenu	access:public
iminfo	vim/vim/Makefile	/^	echo "set notitle noicon nocp nomodeline viminfo=" >no_title.vim$/;"	m
imp_PyExc_AttributeError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_AttributeError;$/;"	v	file:
imp_PyExc_ImportError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_ImportError;$/;"	v	file:
imp_PyExc_IndexError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_IndexError;$/;"	v	file:
imp_PyExc_KeyError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_KeyError;$/;"	v	file:
imp_PyExc_KeyboardInterrupt	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_KeyboardInterrupt;$/;"	v	file:
imp_PyExc_OverflowError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_OverflowError;$/;"	v	file:
imp_PyExc_RuntimeError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_RuntimeError;$/;"	v	file:
imp_PyExc_SystemExit	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_SystemExit;$/;"	v	file:
imp_PyExc_TypeError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_TypeError;$/;"	v	file:
imp_PyExc_ValueError	vim/vim/src/if_python.c	/^static PyObject *imp_PyExc_ValueError;$/;"	v	file:
inAtomic	vim/vim/src/netbeans.c	/^static int inAtomic = 0;$/;"	v	file:
in_cinkeys	vim/vim/src/edit.c	/^in_cinkeys($/;"	f	signature:( int keytyped, int when, int line_is_empty)
in_focus	vim/vim/src/gui.h	/^    int		in_focus;	    \/* Vim has input focus *\/$/;"	m	struct:Gui	access:public
in_free_unref_items	vim/vim/src/globals.h	/^EXTERN int  in_free_unref_items INIT(= FALSE);$/;"	v
in_history	vim/vim/src/ex_getln.c	/^in_history($/;"	f	file:	signature:( int type, char_u *str, int move_to_front, int sep, int writing)
in_history	vim/vim/src/ex_getln.c	/^static int	in_history(int, char_u *, int, int, int);$/;"	p	file:	signature:(int, char_u *, int, int, int)
in_html_tag	vim/vim/src/search.c	/^in_html_tag($/;"	f	file:	signature:( int end_tag)
in_html_tag	vim/vim/src/search.c	/^static int in_html_tag(int);$/;"	p	file:	signature:(int)
in_id_list	vim/vim/src/syntax.c	/^in_id_list($/;"	f	file:	signature:( stateitem_T *cur_si, short *list, struct sp_syn *ssp, int contained)
in_id_list	vim/vim/src/syntax.c	/^static int in_id_list(stateitem_T *item, short *cont_list, struct sp_syn *ssp, int contained);$/;"	p	file:	signature:(stateitem_T *item, short *cont_list, struct sp_syn *ssp, int contained)
in_mch_delay	vim/vim/src/os_unix.c	/^static volatile int in_mch_delay = FALSE;    \/* sleeping in mch_delay() *\/$/;"	v	file:
in_pixels	vim/vim/src/gui_xmdlg.c	/^    Boolean	in_pixels;	\/* toggle state - size in pixels  *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
in_use	vim/vim/src/gui.h	/^    int		in_use;		    \/* Is the GUI being used? *\/$/;"	m	struct:Gui	access:public
in_use	vim/vim/src/regexp_nfa.c	/^    int	    in_use; \/* number of subexpr with useful info *\/$/;"	m	struct:__anon116	file:	access:public
in_win_border	vim/vim/src/charset.c	/^in_win_border(win_T *wp, colnr_T vcol)$/;"	f	signature:(win_T *wp, colnr_T vcol)
inbuf	vim/vim/src/ui.c	/^static char_u	inbuf[INBUFLEN + MAX_KEY_CODE_LEN];$/;"	v	file:
inbufcount	vim/vim/src/ui.c	/^static int	inbufcount = 0;	    \/* number of chars in inbuf[] *\/$/;"	v	file:
inc	vim/vim/src/misc2.c	/^inc(pos_T *lp)$/;"	f	signature:(pos_T *lp)
inc_cRefThisDLL	vim/vim/src/GvimExt/gvimext.cpp	/^inc_cRefThisDLL()$/;"	f	file:	signature:()
inc_cursor	vim/vim/src/misc2.c	/^inc_cursor(void)$/;"	f	signature:(void)
inc_msg_scrolled	vim/vim/src/message.c	/^inc_msg_scrolled(void)$/;"	f	file:	signature:(void)
inc_msg_scrolled	vim/vim/src/message.c	/^static void inc_msg_scrolled(void);$/;"	p	file:	signature:(void)
inc_tag	vim/vim/src/structs.h	/^    int		inc_tag;	\/* ":syn include" unique tag *\/$/;"	m	struct:sp_syn	access:public
inchar	vim/vim/src/getchar.c	/^inchar($/;"	f	file:	signature:( char_u *buf, int maxlen, long wait_time, int tb_change_cnt)
inchar	vim/vim/src/getchar.c	/^static int	inchar(char_u *buf, int maxlen, long wait_time, int tb_change_cnt);$/;"	p	file:	signature:(char_u *buf, int maxlen, long wait_time, int tb_change_cnt)
inchar_time	vim/vim/src/ex_cmds2.c	/^static proftime_T inchar_time;$/;"	v	file:
incl	vim/vim/src/misc2.c	/^incl(pos_T *lp)$/;"	f	signature:(pos_T *lp)
include_default	vim/vim/src/syntax.c	/^static int include_default = 0;	\/* when 1 include "default" *\/$/;"	v	file:
include_groups	vim/vim/src/fileio.c	/^static int include_groups = FALSE;$/;"	v	file:
include_link	vim/vim/src/syntax.c	/^static int include_link = 0;	\/* when 2 include "link" and "clear" *\/$/;"	v	file:
include_none	vim/vim/src/syntax.c	/^static int include_none = 0;	\/* when 1 include "None" *\/$/;"	v	file:
included_patches	vim/vim/src/version.c	/^static int included_patches[] =$/;"	v	file:
inclusive	vim/vim/src/structs.h	/^    int		inclusive;	\/* TRUE if char motion is inclusive (only$/;"	m	struct:oparg_S	access:public
ind_find_start_CORS	vim/vim/src/misc1.c	/^ind_find_start_CORS(void)	    \/* XXX *\/$/;"	f	file:	signature:(void)
ind_find_start_CORS	vim/vim/src/misc1.c	/^static pos_T *ind_find_start_CORS(void);$/;"	p	file:	signature:(void)
ind_find_start_comment	vim/vim/src/misc1.c	/^ind_find_start_comment(void)	    \/* XXX *\/$/;"	f	file:	signature:(void)
ind_find_start_comment	vim/vim/src/misc1.c	/^static pos_T *ind_find_start_comment(void);$/;"	p	file:	signature:(void)
index	vim/vim/src/os_vms.c	/^    ITEM	index;$/;"	m	struct:__anon28	file:	access:public
index	vim/vim/src/spellfile.c	/^	int	index;		\/* index in written nodes (valid after first$/;"	m	union:wordnode_S::__anon5	file:	access:public
index_to_key	vim/vim/src/memfile_test.c	25;"	d	file:
indir	vim/vim/src/option.c	/^    idopt_T	indir;		\/* global option: PV_NONE;$/;"	m	struct:vimoption	file:	access:public
infinity_str	vim/vim/src/message.c	/^infinity_str(int positive,$/;"	f	file:	signature:(int positive, char fmt_spec, int force_sign, int space_for_positive)
info	vim/vim/src/dehqx.py	/^info = conv.FInfo$/;"	v
info_message	vim/vim/src/globals.h	/^EXTERN int	info_message INIT(= FALSE); \/* printing informative message *\/$/;"	v
info_pointer	vim/vim/src/structs.h	/^typedef struct info_pointer$/;"	s
info_pointer::ip_bnum	vim/vim/src/structs.h	/^    blocknr_T	ip_bnum;	\/* block number *\/$/;"	m	struct:info_pointer	access:public
info_pointer::ip_high	vim/vim/src/structs.h	/^    linenr_T	ip_high;	\/* highest lnum in this block *\/$/;"	m	struct:info_pointer	access:public
info_pointer::ip_index	vim/vim/src/structs.h	/^    int		ip_index;	\/* index for block with current lnum *\/$/;"	m	struct:info_pointer	access:public
info_pointer::ip_low	vim/vim/src/structs.h	/^    linenr_T	ip_low;		\/* lowest lnum in this block *\/$/;"	m	struct:info_pointer	access:public
infoptr_T	vim/vim/src/structs.h	/^} infoptr_T;	\/* block\/index pair *\/$/;"	t	typeref:struct:info_pointer
inindent	vim/vim/src/misc1.c	/^inindent(int extra)$/;"	f	signature:(int extra)
init	vim/vim/src/libvterm/src/vterm_internal.h	/^  void (*init) (VTermEncoding *enc, void *data);$/;"	m	struct:VTermEncoding	access:public
initDone	vim/vim/src/netbeans.c	/^    unsigned int	 initDone:1;$/;"	m	struct:nbbuf_struct	file:	access:public
init_bat_choice	vim/vim/src/dosinst.c	/^init_bat_choice(int target)$/;"	f	file:	signature:(int target)
init_bat_choices	vim/vim/src/dosinst.c	/^init_bat_choices(void)$/;"	f	file:	signature:(void)
init_changedtick	vim/vim/src/buffer.c	/^init_changedtick(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
init_chartab	vim/vim/src/charset.c	/^init_chartab(void)$/;"	f	signature:(void)
init_class_tab	vim/vim/src/regexp.c	/^init_class_tab(void)$/;"	f	file:	signature:(void)
init_class_tab	vim/vim/src/regexp.c	/^static void	init_class_tab(void);$/;"	p	file:	signature:(void)
init_directories_choice	vim/vim/src/dosinst.c	/^init_directories_choice(void)$/;"	f	file:	signature:(void)
init_exn_catching_apply	vim/vim/src/if_mzsch.c	/^init_exn_catching_apply(void)$/;"	f	file:	signature:(void)
init_exn_catching_apply	vim/vim/src/if_mzsch.c	/^static void init_exn_catching_apply(void);$/;"	p	file:	signature:(void)
init_fn	vim/vim/src/crypt.c	/^    void (* init_fn)(cryptstate_T *state, char_u *key,$/;"	m	struct:__anon214	file:	access:public
init_gui_options	vim/vim/src/option.c	/^init_gui_options(void)$/;"	f	signature:(void)
init_highlight	vim/vim/src/syntax.c	/^init_highlight($/;"	f	signature:( int both, int reset)
init_history	vim/vim/src/ex_getln.c	/^init_history(void)$/;"	f	signature:(void)
init_homedir	vim/vim/src/misc1.c	/^init_homedir(void)$/;"	f	signature:(void)
init_locale	vim/vim/src/main.c	/^init_locale(void)$/;"	f	file:	signature:(void)
init_locale	vim/vim/src/main.c	/^static void init_locale(void);$/;"	p	file:	signature:(void)
init_locales	vim/vim/src/ex_cmds2.c	/^init_locales(void)$/;"	f	file:	signature:(void)
init_logfont	vim/vim/src/os_mswin.c	/^init_logfont(LOGFONT *lf)$/;"	f	file:	signature:(LOGFONT *lf)
init_mappings	vim/vim/src/getchar.c	/^init_mappings(void)$/;"	f	signature:(void)
init_mouse_wheel	vim/vim/src/gui_w32.c	/^init_mouse_wheel(void)$/;"	f	file:	signature:(void)
init_normal_cmds	vim/vim/src/normal.c	/^init_normal_cmds(void)$/;"	f	signature:(void)
init_openwith_choice	vim/vim/src/dosinst.c	/^init_openwith_choice(void)$/;"	f	file:	signature:(void)
init_popup_choice	vim/vim/src/dosinst.c	/^init_popup_choice(void)$/;"	f	file:	signature:(void)
init_preedit_start_col	vim/vim/src/mbyte.c	/^init_preedit_start_col(void)$/;"	f	file:	signature:(void)
init_pyxversion	vim/vim/src/ex_cmds2.c	/^init_pyxversion(void)$/;"	f	signature:(void)
init_range_cmd	vim/vim/src/if_py_both.h	/^init_range_cmd(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
init_range_eval	vim/vim/src/if_py_both.h	/^init_range_eval(typval_T *rettv UNUSED)$/;"	f	signature:(typval_T *rettv UNUSED)
init_search_hl	vim/vim/src/screen.c	/^init_search_hl(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
init_search_hl	vim/vim/src/screen.c	/^static void init_search_hl(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
init_shortcut_choices	vim/vim/src/dosinst.c	/^init_shortcut_choices(void)$/;"	f	file:	signature:(void)
init_signal_stack	vim/vim/src/os_unix.c	/^init_signal_stack(void)$/;"	f	file:	signature:(void)
init_signal_stack	vim/vim/src/os_unix.c	/^static void init_signal_stack(void);$/;"	p	file:	signature:(void)
init_spell_chartab	vim/vim/src/spell.c	/^init_spell_chartab(void)$/;"	f	signature:(void)
init_spellfile	vim/vim/src/spellfile.c	/^init_spellfile(void)$/;"	f	file:	signature:(void)
init_spellfile	vim/vim/src/spellfile.c	/^static void init_spellfile(void);$/;"	p	file:	signature:(void)
init_startmenu_choice	vim/vim/src/dosinst.c	/^init_startmenu_choice(void)$/;"	f	file:	signature:(void)
init_static_list	vim/vim/src/list.c	/^init_static_list(staticList10_T *sl)$/;"	f	signature:(staticList10_T *sl)
init_structs	vim/vim/src/if_py_both.h	/^init_structs(void)$/;"	f	signature:(void)
init_syl_tab	vim/vim/src/spell.c	/^init_syl_tab(slang_T *slang)$/;"	f	signature:(slang_T *slang)
init_syn_patterns	vim/vim/src/syntax.c	/^init_syn_patterns(void)$/;"	f	file:	signature:(void)
init_syn_patterns	vim/vim/src/syntax.c	/^static void init_syn_patterns(void);$/;"	p	file:	signature:(void)
init_sys_path	vim/vim/src/if_py_both.h	/^init_sys_path(void)$/;"	f	signature:(void)
init_tv	vim/vim/src/eval.c	/^init_tv(typval_T *varp)$/;"	f	signature:(typval_T *varp)
init_typebuf	vim/vim/src/getchar.c	/^init_typebuf(void)$/;"	f	file:	signature:(void)
init_typebuf	vim/vim/src/getchar.c	/^static void	init_typebuf(void);$/;"	p	file:	signature:(void)
init_types	vim/vim/src/if_py_both.h	/^init_types(void)$/;"	f	signature:(void)
init_users	vim/vim/src/misc1.c	/^init_users(void)$/;"	f	file:	signature:(void)
init_users	vim/vim/src/misc1.c	/^static void init_users(void);$/;"	p	file:	signature:(void)
init_utf8	vim/vim/src/libvterm/src/encoding.c	/^static void init_utf8(VTermEncoding *enc UNUSED, void *data_)$/;"	f	file:	signature:(VTermEncoding *enc UNUSED, void *data_)
init_var_dict	vim/vim/src/eval.c	/^init_var_dict(dict_T *dict, dictitem_T *dict_var, int scope)$/;"	f	signature:(dict_T *dict, dictitem_T *dict_var, int scope)
init_vimrc_choices	vim/vim/src/dosinst.c	/^init_vimrc_choices(void)$/;"	f	file:	signature:(void)
init_window_hints_state	vim/vim/src/gui_gtk_x11.c	/^static int init_window_hints_state = 0;$/;"	v	file:
init_write_reg	vim/vim/src/ops.c	/^init_write_reg($/;"	f	file:	signature:( int name, yankreg_T **old_y_previous, yankreg_T **old_y_current, int must_append, int *yank_type UNUSED)
init_yank	vim/vim/src/ops.c	/^init_yank(void)$/;"	f	signature:(void)
initchr	vim/vim/src/regexp.c	/^initchr(char_u *str)$/;"	f	file:	signature:(char_u *str)
initchr	vim/vim/src/regexp.c	/^static void	initchr(char_u *);$/;"	p	file:	signature:(char_u *)
initialFileCmd	vim/vim/src/workshop.c	/^static char	*initialFileCmd;	\/* save command but defer doing it *\/$/;"	v	file:
initialise_findrep	vim/vim/src/gui_w32.c	/^initialise_findrep(char_u *initial_string)$/;"	f	file:	signature:(char_u *initial_string)
initialise_tabline	vim/vim/src/gui_mac.c	/^initialise_tabline(void)$/;"	f	file:	signature:(void)
initialise_tabline	vim/vim/src/gui_mac.c	/^static void initialise_tabline(void);$/;"	p	file:	signature:(void)
initialise_tabline	vim/vim/src/gui_w32.c	/^initialise_tabline(void)$/;"	f	file:	signature:(void)
initialise_tabline	vim/vim/src/gui_w32.c	/^static void initialise_tabline(void);$/;"	p	file:	signature:(void)
initialise_toolbar	vim/vim/src/gui_w32.c	/^initialise_toolbar(void)$/;"	f	file:	signature:(void)
initialise_toolbar	vim/vim/src/gui_w32.c	/^static void initialise_toolbar(void);$/;"	p	file:	signature:(void)
initialised	vim/vim/src/if_python.c	/^static int initialised = 0;$/;"	v	file:
initialized	vim/vim/src/if_mzsch.c	/^static int initialized = FALSE;$/;"	v	file:
initmap	vim/vim/src/getchar.c	/^static struct initmap$/;"	s	file:
initmap::arg	vim/vim/src/getchar.c	/^    char_u	*arg;$/;"	m	struct:initmap	file:	access:public
initmap::mode	vim/vim/src/getchar.c	/^    int		mode;$/;"	m	struct:initmap	file:	access:public
initmappings	vim/vim/src/getchar.c	/^} initmappings[] =$/;"	v	typeref:struct:initmap	file:
initmaster	vim/vim/src/pty.c	/^initmaster(int f UNUSED)$/;"	f	file:	signature:(int f UNUSED)
initmaster	vim/vim/src/pty.c	/^static void initmaster(int);$/;"	p	file:	signature:(int)
initpen	vim/vim/src/libvterm/include/vterm.h	/^  int (*initpen)(void *user);$/;"	m	struct:__anon60	access:public
inmacro	vim/vim/src/search.c	/^inmacro(char_u *opt, char_u *s)$/;"	f	file:	signature:(char_u *opt, char_u *s)
inmacro	vim/vim/src/search.c	/^static int inmacro(char_u *, char_u *);$/;"	p	file:	signature:(char_u *, char_u *)
inplace_hex2bytes	vim/vim/src/libvterm/t/harness.c	/^static size_t inplace_hex2bytes(char *s)$/;"	f	file:	signature:(char *s)
input	vim/vim/src/dehqx.py	/^input = sys.argv[1]$/;"	v
inputHandler	vim/vim/src/integration.c	/^static XtInputId inputHandler;		\/* Cookie for input *\/$/;"	v	file:
input_available	vim/vim/src/getchar.c	/^input_available(void)$/;"	f	signature:(void)
input_conv	vim/vim/src/globals.h	/^EXTERN vimconv_T input_conv;			\/* type of input conversion *\/$/;"	v
input_fn	vim/vim/src/ex_getln.c	/^    int		input_fn;	\/* when TRUE Invoked for input() function *\/$/;"	m	struct:cmdline_info	file:	access:public
input_style	vim/vim/src/mbyte.c	/^static XIMStyle	input_style;$/;"	v	file:
input_timer_cb	vim/vim/src/gui_gtk_x11.c	/^input_timer_cb(gpointer data)$/;"	f	file:	signature:(gpointer data)
inputsecret_flag	vim/vim/src/evalfunc.c	/^static int inputsecret_flag = 0;$/;"	v	file:
ins_at_eol	vim/vim/src/globals.h	/^EXTERN int	ins_at_eol INIT(= FALSE); \/* put cursor after eol when$/;"	v
ins_bs	vim/vim/src/edit.c	/^ins_bs($/;"	f	file:	signature:( int c, int mode, int *inserted_space_p)
ins_bs	vim/vim/src/edit.c	/^static int  ins_bs(int c, int mode, int *inserted_space_p);$/;"	p	file:	signature:(int c, int mode, int *inserted_space_p)
ins_bs_one	vim/vim/src/edit.c	/^ins_bs_one(colnr_T *vcolp)$/;"	f	file:	signature:(colnr_T *vcolp)
ins_bs_one	vim/vim/src/edit.c	/^static void ins_bs_one(colnr_T *vcolp);$/;"	p	file:	signature:(colnr_T *vcolp)
ins_bytes	vim/vim/src/misc1.c	/^ins_bytes(char_u *p)$/;"	f	signature:(char_u *p)
ins_bytes_len	vim/vim/src/misc1.c	/^ins_bytes_len(char_u *p, int len)$/;"	f	signature:(char_u *p, int len)
ins_char	vim/vim/src/misc1.c	/^ins_char(int c)$/;"	f	signature:(int c)
ins_char_bytes	vim/vim/src/misc1.c	/^ins_char_bytes(char_u *buf, int charlen)$/;"	f	signature:(char_u *buf, int charlen)
ins_char_typebuf	vim/vim/src/getchar.c	/^ins_char_typebuf(int c)$/;"	f	signature:(int c)
ins_compl_accept_char	vim/vim/src/edit.c	/^ins_compl_accept_char(int c)$/;"	f	file:	signature:(int c)
ins_compl_accept_char	vim/vim/src/edit.c	/^static int  ins_compl_accept_char(int c);$/;"	p	file:	signature:(int c)
ins_compl_active	vim/vim/src/edit.c	/^ins_compl_active(void)$/;"	f	signature:(void)
ins_compl_add	vim/vim/src/edit.c	/^ins_compl_add($/;"	f	file:	signature:( char_u *str, int len, int icase, char_u *fname, char_u **cptext, int cdir, int flags, int adup)
ins_compl_add	vim/vim/src/edit.c	/^static int ins_compl_add(char_u *str, int len, int icase, char_u *fname, char_u **cptext, int cdir, int flags, int adup);$/;"	p	file:	signature:(char_u *str, int len, int icase, char_u *fname, char_u **cptext, int cdir, int flags, int adup)
ins_compl_add_dict	vim/vim/src/edit.c	/^ins_compl_add_dict(dict_T *dict)$/;"	f	file:	signature:(dict_T *dict)
ins_compl_add_dict	vim/vim/src/edit.c	/^static void ins_compl_add_dict(dict_T *dict);$/;"	p	file:	signature:(dict_T *dict)
ins_compl_add_infercase	vim/vim/src/edit.c	/^ins_compl_add_infercase($/;"	f	signature:( char_u *str, int len, int icase, char_u *fname, int dir, int flags)
ins_compl_add_list	vim/vim/src/edit.c	/^ins_compl_add_list(list_T *list)$/;"	f	file:	signature:(list_T *list)
ins_compl_add_list	vim/vim/src/edit.c	/^static void ins_compl_add_list(list_T *list);$/;"	p	file:	signature:(list_T *list)
ins_compl_add_matches	vim/vim/src/edit.c	/^ins_compl_add_matches($/;"	f	file:	signature:( int num_matches, char_u **matches, int icase)
ins_compl_add_matches	vim/vim/src/edit.c	/^static void ins_compl_add_matches(int num_matches, char_u **matches, int icase);$/;"	p	file:	signature:(int num_matches, char_u **matches, int icase)
ins_compl_add_tv	vim/vim/src/edit.c	/^ins_compl_add_tv(typval_T *tv, int dir)$/;"	f	signature:(typval_T *tv, int dir)
ins_compl_addfrommatch	vim/vim/src/edit.c	/^ins_compl_addfrommatch(void)$/;"	f	file:	signature:(void)
ins_compl_addfrommatch	vim/vim/src/edit.c	/^static void ins_compl_addfrommatch(void);$/;"	p	file:	signature:(void)
ins_compl_addleader	vim/vim/src/edit.c	/^ins_compl_addleader(int c)$/;"	f	file:	signature:(int c)
ins_compl_addleader	vim/vim/src/edit.c	/^static void ins_compl_addleader(int c);$/;"	p	file:	signature:(int c)
ins_compl_bs	vim/vim/src/edit.c	/^ins_compl_bs(void)$/;"	f	file:	signature:(void)
ins_compl_bs	vim/vim/src/edit.c	/^static int  ins_compl_bs(void);$/;"	p	file:	signature:(void)
ins_compl_check_keys	vim/vim/src/edit.c	/^ins_compl_check_keys(int frequency, int in_compl_func)$/;"	f	signature:(int frequency, int in_compl_func)
ins_compl_clear	vim/vim/src/edit.c	/^ins_compl_clear(void)$/;"	f	file:	signature:(void)
ins_compl_clear	vim/vim/src/edit.c	/^static void ins_compl_clear(void);$/;"	p	file:	signature:(void)
ins_compl_del_pum	vim/vim/src/edit.c	/^ins_compl_del_pum(void)$/;"	f	file:	signature:(void)
ins_compl_del_pum	vim/vim/src/edit.c	/^static void ins_compl_del_pum(void);$/;"	p	file:	signature:(void)
ins_compl_delete	vim/vim/src/edit.c	/^ins_compl_delete(void)$/;"	f	file:	signature:(void)
ins_compl_delete	vim/vim/src/edit.c	/^static void ins_compl_delete(void);$/;"	p	file:	signature:(void)
ins_compl_dictionaries	vim/vim/src/edit.c	/^ins_compl_dictionaries($/;"	f	file:	signature:( char_u *dict_start, char_u *pat, int flags, int thesaurus)
ins_compl_dictionaries	vim/vim/src/edit.c	/^static void ins_compl_dictionaries(char_u *dict, char_u *pat, int flags, int thesaurus);$/;"	p	file:	signature:(char_u *dict, char_u *pat, int flags, int thesaurus)
ins_compl_equal	vim/vim/src/edit.c	/^ins_compl_equal(compl_T *match, char_u *str, int len)$/;"	f	file:	signature:(compl_T *match, char_u *str, int len)
ins_compl_equal	vim/vim/src/edit.c	/^static int  ins_compl_equal(compl_T *match, char_u *str, int len);$/;"	p	file:	signature:(compl_T *match, char_u *str, int len)
ins_compl_files	vim/vim/src/edit.c	/^ins_compl_files($/;"	f	file:	signature:( int count, char_u **files, int thesaurus, int flags, regmatch_T *regmatch, char_u *buf, int *dir)
ins_compl_files	vim/vim/src/edit.c	/^static void ins_compl_files(int count, char_u **files, int thesaurus, int flags, regmatch_T *regmatch, char_u *buf, int *dir);$/;"	p	file:	signature:(int count, char_u **files, int thesaurus, int flags, regmatch_T *regmatch, char_u *buf, int *dir)
ins_compl_fixRedoBufForLeader	vim/vim/src/edit.c	/^ins_compl_fixRedoBufForLeader(char_u *ptr_arg)$/;"	f	file:	signature:(char_u *ptr_arg)
ins_compl_fixRedoBufForLeader	vim/vim/src/edit.c	/^static void ins_compl_fixRedoBufForLeader(char_u *ptr_arg);$/;"	p	file:	signature:(char_u *ptr_arg)
ins_compl_free	vim/vim/src/edit.c	/^ins_compl_free(void)$/;"	f	file:	signature:(void)
ins_compl_free	vim/vim/src/edit.c	/^static void ins_compl_free(void);$/;"	p	file:	signature:(void)
ins_compl_get_exp	vim/vim/src/edit.c	/^ins_compl_get_exp(pos_T *ini)$/;"	f	file:	signature:(pos_T *ini)
ins_compl_get_exp	vim/vim/src/edit.c	/^static int  ins_compl_get_exp(pos_T *ini);$/;"	p	file:	signature:(pos_T *ini)
ins_compl_insert	vim/vim/src/edit.c	/^ins_compl_insert(int in_compl_func)$/;"	f	file:	signature:(int in_compl_func)
ins_compl_insert	vim/vim/src/edit.c	/^static void ins_compl_insert(int in_compl_func);$/;"	p	file:	signature:(int in_compl_func)
ins_compl_key2count	vim/vim/src/edit.c	/^ins_compl_key2count(int c)$/;"	f	file:	signature:(int c)
ins_compl_key2count	vim/vim/src/edit.c	/^static int  ins_compl_key2count(int c);$/;"	p	file:	signature:(int c)
ins_compl_key2dir	vim/vim/src/edit.c	/^ins_compl_key2dir(int c)$/;"	f	file:	signature:(int c)
ins_compl_key2dir	vim/vim/src/edit.c	/^static int  ins_compl_key2dir(int c);$/;"	p	file:	signature:(int c)
ins_compl_len	vim/vim/src/edit.c	/^ins_compl_len(void)$/;"	f	file:	signature:(void)
ins_compl_len	vim/vim/src/edit.c	/^static int  ins_compl_len(void);$/;"	p	file:	signature:(void)
ins_compl_longest_match	vim/vim/src/edit.c	/^ins_compl_longest_match(compl_T *match)$/;"	f	file:	signature:(compl_T *match)
ins_compl_longest_match	vim/vim/src/edit.c	/^static void ins_compl_longest_match(compl_T *match);$/;"	p	file:	signature:(compl_T *match)
ins_compl_make_cyclic	vim/vim/src/edit.c	/^ins_compl_make_cyclic(void)$/;"	f	file:	signature:(void)
ins_compl_make_cyclic	vim/vim/src/edit.c	/^static int  ins_compl_make_cyclic(void);$/;"	p	file:	signature:(void)
ins_compl_need_restart	vim/vim/src/edit.c	/^ins_compl_need_restart(void)$/;"	f	file:	signature:(void)
ins_compl_need_restart	vim/vim/src/edit.c	/^static int  ins_compl_need_restart(void);$/;"	p	file:	signature:(void)
ins_compl_new_leader	vim/vim/src/edit.c	/^ins_compl_new_leader(void)$/;"	f	file:	signature:(void)
ins_compl_new_leader	vim/vim/src/edit.c	/^static void ins_compl_new_leader(void);$/;"	p	file:	signature:(void)
ins_compl_next	vim/vim/src/edit.c	/^ins_compl_next($/;"	f	file:	signature:( int allow_get_expansion, int count, int insert_match, int in_compl_func)
ins_compl_next	vim/vim/src/edit.c	/^static int  ins_compl_next(int allow_get_expansion, int count, int insert_match, int in_compl_func);$/;"	p	file:	signature:(int allow_get_expansion, int count, int insert_match, int in_compl_func)
ins_compl_next_buf	vim/vim/src/edit.c	/^ins_compl_next_buf(buf_T *buf, int flag)$/;"	f	file:	signature:(buf_T *buf, int flag)
ins_compl_next_buf	vim/vim/src/edit.c	/^static buf_T *ins_compl_next_buf(buf_T *buf, int flag);$/;"	p	file:	signature:(buf_T *buf, int flag)
ins_compl_prep	vim/vim/src/edit.c	/^ins_compl_prep(int c)$/;"	f	file:	signature:(int c)
ins_compl_prep	vim/vim/src/edit.c	/^static int  ins_compl_prep(int c);$/;"	p	file:	signature:(int c)
ins_compl_pum_key	vim/vim/src/edit.c	/^ins_compl_pum_key(int c)$/;"	f	file:	signature:(int c)
ins_compl_pum_key	vim/vim/src/edit.c	/^static int  ins_compl_pum_key(int c);$/;"	p	file:	signature:(int c)
ins_compl_restart	vim/vim/src/edit.c	/^ins_compl_restart(void)$/;"	f	file:	signature:(void)
ins_compl_restart	vim/vim/src/edit.c	/^static void ins_compl_restart(void);$/;"	p	file:	signature:(void)
ins_compl_set_original_text	vim/vim/src/edit.c	/^ins_compl_set_original_text(char_u *str)$/;"	f	file:	signature:(char_u *str)
ins_compl_set_original_text	vim/vim/src/edit.c	/^static void ins_compl_set_original_text(char_u *str);$/;"	p	file:	signature:(char_u *str)
ins_compl_show_pum	vim/vim/src/edit.c	/^ins_compl_show_pum(void)$/;"	f	signature:(void)
ins_compl_upd_pum	vim/vim/src/edit.c	/^ins_compl_upd_pum(void)$/;"	f	file:	signature:(void)
ins_compl_upd_pum	vim/vim/src/edit.c	/^static void ins_compl_upd_pum(void);$/;"	p	file:	signature:(void)
ins_compl_use_match	vim/vim/src/edit.c	/^ins_compl_use_match(int c)$/;"	f	file:	signature:(int c)
ins_compl_use_match	vim/vim/src/edit.c	/^static int  ins_compl_use_match(int c);$/;"	p	file:	signature:(int c)
ins_complete	vim/vim/src/edit.c	/^ins_complete(int c, int enable_pum)$/;"	f	file:	signature:(int c, int enable_pum)
ins_complete	vim/vim/src/edit.c	/^static int  ins_complete(int c, int enable_pum);$/;"	p	file:	signature:(int c, int enable_pum)
ins_copychar	vim/vim/src/edit.c	/^ins_copychar(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
ins_ctrl_	vim/vim/src/edit.c	/^ins_ctrl_(void)$/;"	f	file:	signature:(void)
ins_ctrl_	vim/vim/src/edit.c	/^static void ins_ctrl_(void);$/;"	p	file:	signature:(void)
ins_ctrl_ey	vim/vim/src/edit.c	/^ins_ctrl_ey(int tc)$/;"	f	file:	signature:(int tc)
ins_ctrl_ey	vim/vim/src/edit.c	/^static int  ins_ctrl_ey(int tc);$/;"	p	file:	signature:(int tc)
ins_ctrl_g	vim/vim/src/edit.c	/^ins_ctrl_g(void)$/;"	f	file:	signature:(void)
ins_ctrl_g	vim/vim/src/edit.c	/^static void ins_ctrl_g(void);$/;"	p	file:	signature:(void)
ins_ctrl_hat	vim/vim/src/edit.c	/^ins_ctrl_hat(void)$/;"	f	file:	signature:(void)
ins_ctrl_hat	vim/vim/src/edit.c	/^static void ins_ctrl_hat(void);$/;"	p	file:	signature:(void)
ins_ctrl_o	vim/vim/src/edit.c	/^ins_ctrl_o(void)$/;"	f	file:	signature:(void)
ins_ctrl_o	vim/vim/src/edit.c	/^static void ins_ctrl_o(void);$/;"	p	file:	signature:(void)
ins_ctrl_v	vim/vim/src/edit.c	/^ins_ctrl_v(void)$/;"	f	file:	signature:(void)
ins_ctrl_v	vim/vim/src/edit.c	/^static void ins_ctrl_v(void);$/;"	p	file:	signature:(void)
ins_ctrl_x	vim/vim/src/edit.c	/^ins_ctrl_x(void)$/;"	f	file:	signature:(void)
ins_ctrl_x	vim/vim/src/edit.c	/^static void ins_ctrl_x(void);$/;"	p	file:	signature:(void)
ins_del	vim/vim/src/edit.c	/^ins_del(void)$/;"	f	file:	signature:(void)
ins_del	vim/vim/src/edit.c	/^static void ins_del(void);$/;"	p	file:	signature:(void)
ins_digraph	vim/vim/src/edit.c	/^ins_digraph(void)$/;"	f	file:	signature:(void)
ins_digraph	vim/vim/src/edit.c	/^static int  ins_digraph(void);$/;"	p	file:	signature:(void)
ins_down	vim/vim/src/edit.c	/^ins_down($/;"	f	file:	signature:( int startcol)
ins_down	vim/vim/src/edit.c	/^static void ins_down(int startcol);$/;"	p	file:	signature:(int startcol)
ins_drop	vim/vim/src/edit.c	/^ins_drop(void)$/;"	f	file:	signature:(void)
ins_drop	vim/vim/src/edit.c	/^static void ins_drop(void);$/;"	p	file:	signature:(void)
ins_end	vim/vim/src/edit.c	/^ins_end(int c)$/;"	f	file:	signature:(int c)
ins_end	vim/vim/src/edit.c	/^static void ins_end(int c);$/;"	p	file:	signature:(int c)
ins_eol	vim/vim/src/edit.c	/^ins_eol(int c)$/;"	f	file:	signature:(int c)
ins_eol	vim/vim/src/edit.c	/^static int  ins_eol(int c);$/;"	p	file:	signature:(int c)
ins_esc	vim/vim/src/edit.c	/^ins_esc($/;"	f	file:	signature:( long *count, int cmdchar, int nomove)
ins_esc	vim/vim/src/edit.c	/^static int  ins_esc(long *count, int cmdchar, int nomove);$/;"	p	file:	signature:(long *count, int cmdchar, int nomove)
ins_home	vim/vim/src/edit.c	/^ins_home(int c)$/;"	f	file:	signature:(int c)
ins_home	vim/vim/src/edit.c	/^static void ins_home(int c);$/;"	p	file:	signature:(int c)
ins_horscroll	vim/vim/src/edit.c	/^ins_horscroll(void)$/;"	f	signature:(void)
ins_insert	vim/vim/src/edit.c	/^ins_insert(int replaceState)$/;"	f	file:	signature:(int replaceState)
ins_insert	vim/vim/src/edit.c	/^static void ins_insert(int replaceState);$/;"	p	file:	signature:(int replaceState)
ins_left	vim/vim/src/edit.c	/^ins_left($/;"	f	file:	signature:( int end_change)
ins_left	vim/vim/src/edit.c	/^static void ins_left(int end_change);$/;"	p	file:	signature:(int end_change)
ins_mouse	vim/vim/src/edit.c	/^ins_mouse(int c)$/;"	f	file:	signature:(int c)
ins_mouse	vim/vim/src/edit.c	/^static void ins_mouse(int c);$/;"	p	file:	signature:(int c)
ins_mousescroll	vim/vim/src/edit.c	/^ins_mousescroll(int dir)$/;"	f	file:	signature:(int dir)
ins_mousescroll	vim/vim/src/edit.c	/^static void ins_mousescroll(int dir);$/;"	p	file:	signature:(int dir)
ins_need_undo	vim/vim/src/edit.c	/^static int	ins_need_undo;		\/* call u_save() before inserting a$/;"	v	file:
ins_pagedown	vim/vim/src/edit.c	/^ins_pagedown(void)$/;"	f	file:	signature:(void)
ins_pagedown	vim/vim/src/edit.c	/^static void ins_pagedown(void);$/;"	p	file:	signature:(void)
ins_pageup	vim/vim/src/edit.c	/^ins_pageup(void)$/;"	f	file:	signature:(void)
ins_pageup	vim/vim/src/edit.c	/^static void ins_pageup(void);$/;"	p	file:	signature:(void)
ins_redraw	vim/vim/src/edit.c	/^ins_redraw($/;"	f	file:	signature:( int ready UNUSED)
ins_redraw	vim/vim/src/edit.c	/^static void ins_redraw(int ready);$/;"	p	file:	signature:(int ready)
ins_reg	vim/vim/src/edit.c	/^ins_reg(void)$/;"	f	file:	signature:(void)
ins_reg	vim/vim/src/edit.c	/^static void ins_reg(void);$/;"	p	file:	signature:(void)
ins_right	vim/vim/src/edit.c	/^ins_right($/;"	f	file:	signature:( int end_change)
ins_right	vim/vim/src/edit.c	/^static void ins_right(int end_change);$/;"	p	file:	signature:(int end_change)
ins_s_left	vim/vim/src/edit.c	/^ins_s_left(void)$/;"	f	file:	signature:(void)
ins_s_left	vim/vim/src/edit.c	/^static void ins_s_left(void);$/;"	p	file:	signature:(void)
ins_s_right	vim/vim/src/edit.c	/^ins_s_right(void)$/;"	f	file:	signature:(void)
ins_s_right	vim/vim/src/edit.c	/^static void ins_s_right(void);$/;"	p	file:	signature:(void)
ins_scroll	vim/vim/src/edit.c	/^ins_scroll(void)$/;"	f	signature:(void)
ins_shift	vim/vim/src/edit.c	/^ins_shift(int c, int lastc)$/;"	f	file:	signature:(int c, int lastc)
ins_shift	vim/vim/src/edit.c	/^static void ins_shift(int c, int lastc);$/;"	p	file:	signature:(int c, int lastc)
ins_start_select	vim/vim/src/edit.c	/^ins_start_select(int c)$/;"	f	file:	signature:(int c)
ins_start_select	vim/vim/src/edit.c	/^static int ins_start_select(int c);$/;"	p	file:	signature:(int c)
ins_str	vim/vim/src/misc1.c	/^ins_str(char_u *s)$/;"	f	signature:(char_u *s)
ins_tab	vim/vim/src/edit.c	/^ins_tab(void)$/;"	f	file:	signature:(void)
ins_tab	vim/vim/src/edit.c	/^static int  ins_tab(void);$/;"	p	file:	signature:(void)
ins_tabline	vim/vim/src/edit.c	/^ins_tabline(int c)$/;"	f	file:	signature:(int c)
ins_tabline	vim/vim/src/edit.c	/^static void ins_tabline(int c);$/;"	p	file:	signature:(int c)
ins_try_si	vim/vim/src/edit.c	/^ins_try_si(int c)$/;"	f	file:	signature:(int c)
ins_try_si	vim/vim/src/edit.c	/^static void ins_try_si(int c);$/;"	p	file:	signature:(int c)
ins_typebuf	vim/vim/src/getchar.c	/^ins_typebuf($/;"	f	signature:( char_u *str, int noremap, int offset, int nottyped, int silent)
ins_up	vim/vim/src/edit.c	/^ins_up($/;"	f	file:	signature:( int startcol)
ins_up	vim/vim/src/edit.c	/^static void ins_up(int startcol);$/;"	p	file:	signature:(int startcol)
insecure_flag	vim/vim/src/option.c	/^insecure_flag(int opt_idx, int opt_flags)$/;"	f	file:	signature:(int opt_idx, int opt_flags)
insecure_flag	vim/vim/src/option.c	/^static long_u *insecure_flag(int opt_idx, int opt_flags);$/;"	p	file:	signature:(int opt_idx, int opt_flags)
insecure_flag	vim/vim/src/option.c	3285;"	d	file:
insensitive_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap insensitive_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
insert	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int insert:1;$/;"	m	struct:VTermState::__anon35	access:public
insertDone	vim/vim/src/netbeans.c	/^    unsigned int	 insertDone:1;$/;"	m	struct:nbbuf_struct	file:	access:public
insert_buffer_line_list	vim/vim/src/if_mzsch.c	/^insert_buffer_line_list(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
insert_buffer_line_list	vim/vim/src/if_mzsch.c	/^static Scheme_Object *insert_buffer_line_list(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
insert_lines	vim/vim/src/os_win32.c	/^insert_lines(unsigned cLines)$/;"	f	file:	signature:(unsigned cLines)
insert_lines	vim/vim/src/os_win32.c	/^static void insert_lines(unsigned cLines);$/;"	p	file:	signature:(unsigned cLines)
insert_reg	vim/vim/src/ops.c	/^insert_reg($/;"	f	signature:( int regname, int literally)
insert_sign	vim/vim/src/buffer.c	/^insert_sign($/;"	f	file:	signature:( buf_T *buf, signlist_T *prev, signlist_T *next, int id, linenr_T lnum, int typenr)
insert_sign	vim/vim/src/buffer.c	/^static void insert_sign(buf_T *buf, signlist_T *prev, signlist_T *next, int id, linenr_T lnum, int typenr);$/;"	p	file:	signature:(buf_T *buf, signlist_T *prev, signlist_T *next, int id, linenr_T lnum, int typenr)
insert_special	vim/vim/src/edit.c	/^insert_special($/;"	f	file:	signature:( int c, int allow_modmask, int ctrlv)
insert_special	vim/vim/src/edit.c	/^static void insert_special(int, int, int);$/;"	p	file:	signature:(int, int, int)
insert_timer	vim/vim/src/ex_cmds2.c	/^insert_timer(timer_T *timer)$/;"	f	file:	signature:(timer_T *timer)
insertchar	vim/vim/src/edit.c	/^insertchar($/;"	f	signature:( int c, int flags, int second_indent)
inspect_system	vim/vim/src/dosinst.c	/^inspect_system(void)$/;"	f	file:	signature:(void)
install	vim/vim/src/dosinst.c	/^install(void)$/;"	f	file:	signature:(void)
install_OLE_register	vim/vim/src/dosinst.c	/^install_OLE_register(void)$/;"	f	file:	signature:(void)
install_bat_choice	vim/vim/src/dosinst.c	/^install_bat_choice(int idx)$/;"	f	file:	signature:(int idx)
install_config	build_all.sh	/^function install_config()$/;"	f
install_openwith	vim/vim/src/dosinst.c	/^static int	install_openwith = 0;$/;"	v	file:
install_plugin	build_all.sh	/^function install_plugin()$/;"	f
install_popup	vim/vim/src/dosinst.c	/^static int	install_popup = 0;$/;"	v	file:
install_python_libs	build_all.sh	/^function install_python_libs()$/;"	f
install_registry	vim/vim/src/dosinst.c	/^install_registry(void)$/;"	f	file:	signature:(void)
install_shortcut_evim	vim/vim/src/dosinst.c	/^install_shortcut_evim(int idx)$/;"	f	signature:(int idx)
install_shortcut_gview	vim/vim/src/dosinst.c	/^install_shortcut_gview(int idx)$/;"	f	signature:(int idx)
install_shortcut_gvim	vim/vim/src/dosinst.c	/^install_shortcut_gvim(int idx)$/;"	f	signature:(int idx)
install_start_menu	vim/vim/src/dosinst.c	/^install_start_menu(int idx)$/;"	f	file:	signature:(int idx)
install_vim	build_all.sh	/^function install_vim()$/;"	f
install_vim_source_package	build_all.sh	/^function install_vim_source_package()$/;"	f
install_vimfilesdir	vim/vim/src/dosinst.c	/^install_vimfilesdir(int idx)$/;"	f	file:	signature:(int idx)
install_vimrc	vim/vim/src/dosinst.c	/^install_vimrc(int idx)$/;"	f	file:	signature:(int idx)
install_vimtool	build_all.sh	/^function install_vimtool()$/;"	f
installdir	vim/vim/src/dosinst.h	/^char	installdir[BUFSIZE];	\/* top of the installation dir, where the$/;"	v
installfunc	vim/vim/src/dosinst.c	/^    void    (*installfunc)(int idx);	\/* function to install this choice *\/$/;"	m	struct:choice	file:	access:public
instr	vim/vim/src/vim.h	2356;"	d
int_cmp	vim/vim/src/option.c	/^int_cmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
int_cmp	vim/vim/src/option.c	/^static int int_cmp(const void *a, const void *b);$/;"	p	file:	signature:(const void *a, const void *b)
int_u	vim/vim/src/vim.h	/^typedef unsigned int	int_u;$/;"	t
int_wordlist	vim/vim/src/spell.h	/^SPELL_EXTERN char_u	*int_wordlist SPELL_INIT(= NULL);$/;"	v
int_wordlist_spl	vim/vim/src/spell.c	/^int_wordlist_spl(char_u *fname)$/;"	f	file:	signature:(char_u *fname)
int_wordlist_spl	vim/vim/src/spell.c	/^static void int_wordlist_spl(char_u *fname);$/;"	p	file:	signature:(char_u *fname)
intable	vim/vim/src/mbyte.c	/^intable(struct interval *table, size_t size, int c)$/;"	f	file:	signature:(struct interval *table, size_t size, int c)
intel_gpu_workaround	vim/vim/src/gui_w32.c	/^intel_gpu_workaround(void)$/;"	f	file:	signature:(void)
interactive	vim/vim/src/dosinst.h	/^int	interactive;		\/* non-zero when running interactively *\/$/;"	v
internal_error	vim/vim/src/message.c	/^internal_error(char *where)$/;"	f	signature:(char *where)
internal_format	vim/vim/src/edit.c	/^internal_format($/;"	f	file:	signature:( int textwidth, int second_indent, int flags, int format_only, int c)
internal_format	vim/vim/src/edit.c	/^static void internal_format(int textwidth, int second_indent, int flags, int format_only, int c);$/;"	p	file:	signature:(int textwidth, int second_indent, int flags, int format_only, int c)
interp	vim/vim/src/if_tcl.c	/^    Tcl_Interp	*interp;$/;"	m	struct:ref	file:	access:public
interp	vim/vim/src/if_tcl.c	/^    Tcl_Interp *interp;$/;"	m	struct:__anon140	file:	access:public
interval	vim/vim/src/libvterm/src/unicode.c	/^struct interval {$/;"	s	file:
interval	vim/vim/src/mbyte.c	/^struct interval$/;"	s	file:
interval::first	vim/vim/src/libvterm/src/unicode.c	/^  int first;$/;"	m	struct:interval	file:	access:public
interval::first	vim/vim/src/mbyte.c	/^    long first;$/;"	m	struct:interval	file:	access:public
interval::last	vim/vim/src/libvterm/src/unicode.c	/^  int last;$/;"	m	struct:interval	file:	access:public
interval::last	vim/vim/src/mbyte.c	/^    long last;$/;"	m	struct:interval	file:	access:public
intr_char	vim/vim/src/globals.h	/^EXTERN int	intr_char INIT(= 0);	    \/* extra interrupt character *\/$/;"	v
intro_message	vim/vim/src/version.c	/^intro_message($/;"	f	signature:( int colon)
invalid_bot	vim/vim/src/fold.c	/^static linenr_T invalid_bot = (linenr_T)0;$/;"	v	file:
invalid_range	vim/vim/src/ex_docmd.c	/^invalid_range(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
invalid_range	vim/vim/src/ex_docmd.c	/^static char_u	*invalid_range(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
invalid_top	vim/vim/src/fold.c	/^static linenr_T invalid_top = (linenr_T)0;$/;"	v	file:
invalidate_botline	vim/vim/src/move.c	/^invalidate_botline(void)$/;"	f	signature:(void)
invalidate_botline_win	vim/vim/src/move.c	/^invalidate_botline_win(win_T *wp)$/;"	f	signature:(win_T *wp)
invalidate_current_state	vim/vim/src/syntax.c	/^invalidate_current_state(void)$/;"	f	file:	signature:(void)
invalidate_current_state	vim/vim/src/syntax.c	/^static void invalidate_current_state(void);$/;"	p	file:	signature:(void)
invert_gc	vim/vim/src/gui.h	/^    GC		invert_gc;$/;"	m	struct:Gui	access:public
invoke_callback	vim/vim/src/channel.c	/^invoke_callback(channel_T *channel, char_u *callback, partial_T *partial,$/;"	f	file:	signature:(channel_T *channel, char_u *callback, partial_T *partial, typval_T *argv)
invoke_edit	vim/vim/src/normal.c	/^invoke_edit($/;"	f	file:	signature:( cmdarg_T *cap, int repl, int cmd, int startln)
invoke_edit	vim/vim/src/normal.c	/^static void	invoke_edit(cmdarg_T *cap, int repl, int cmd, int startln);$/;"	p	file:	signature:(cmdarg_T *cap, int repl, int cmd, int startln)
invoke_one_time_callback	vim/vim/src/channel.c	/^invoke_one_time_callback($/;"	f	file:	signature:( channel_T *channel, cbq_T *cbhead, cbq_T *item, typval_T *argv)
io_ga	vim/vim/src/if_py_both.h	/^static garray_T io_ga = {0, 0, 1, 80, NULL};$/;"	v
iochan	vim/vim/src/os_vms.c	/^static short	iochan;			\/* TTY I\/O channel *\/$/;"	v	file:
iosb	vim/vim/src/os_vms.c	/^static short	iosb[4];		\/* IO status block *\/$/;"	v	file:
ip_bnum	vim/vim/src/structs.h	/^    blocknr_T	ip_bnum;	\/* block number *\/$/;"	m	struct:info_pointer	access:public
ip_high	vim/vim/src/structs.h	/^    linenr_T	ip_high;	\/* highest lnum in this block *\/$/;"	m	struct:info_pointer	access:public
ip_index	vim/vim/src/structs.h	/^    int		ip_index;	\/* index for block with current lnum *\/$/;"	m	struct:info_pointer	access:public
ip_low	vim/vim/src/structs.h	/^    linenr_T	ip_low;		\/* lowest lnum in this block *\/$/;"	m	struct:info_pointer	access:public
isMapped	vim/vim/src/integration.c	/^isMapped(Widget widget)$/;"	f	file:	signature:(Widget widget)
isNetbeansBuffer	vim/vim/src/netbeans.c	/^isNetbeansBuffer(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
isNetbeansModified	vim/vim/src/netbeans.c	/^isNetbeansModified(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
isPanelVisible	vim/vim/src/gui_mac.c	/^    Boolean isPanelVisible;$/;"	m	struct:__anon223	file:	access:public
isShowing	vim/vim/src/workshop.c	/^isShowing($/;"	f	file:	signature:( int lnum)
isShowing	vim/vim/src/workshop.c	/^static Boolean	 isShowing(int);$/;"	p	file:	signature:(int)
isWindowMapped	vim/vim/src/integration.c	/^isWindowMapped(Display *display, Window win)$/;"	f	file:	signature:(Display *display, Window win)
is_MAX	vim/vim/src/ops.c	/^    int		is_MAX;		\/* TRUE if curswant==MAXCOL when starting *\/$/;"	m	struct:block_def	file:	access:public
is_Magic	vim/vim/src/regexp.c	256;"	d	file:
is_VIsual	vim/vim/src/structs.h	/^    int		is_VIsual;	\/* operator on Visual area *\/$/;"	m	struct:oparg_S	access:public
is_acl_inherited	vim/vim/src/os_win32.c	/^is_acl_inherited(PACL acl)$/;"	f	file:	signature:(PACL acl)
is_addpos	vim/vim/src/structs.h	/^    int		is_addpos;	\/* position specified directly by$/;"	m	struct:__anon201	access:public
is_aff_rule	vim/vim/src/spellfile.c	/^is_aff_rule($/;"	f	file:	signature:( char_u **items, int itemcnt, char *rulename, int mincount)
is_aff_rule	vim/vim/src/spellfile.c	/^static int is_aff_rule(char_u **items, int itemcnt, char *rulename, int	 mincount);$/;"	p	file:	signature:(char_u **items, int itemcnt, char *rulename, int mincount)
is_autocmd_blocked	vim/vim/src/fileio.c	/^is_autocmd_blocked(void)$/;"	f	signature:(void)
is_cjk_font	vim/vim/src/gui_gtk_x11.c	/^is_cjk_font(PangoFontDescription *font_desc)$/;"	f	file:	signature:(PangoFontDescription *font_desc)
is_click	vim/vim/src/misc2.c	/^    int	    is_click;		\/* Is it a mouse button click event? *\/$/;"	m	struct:mousetable	file:	access:public
is_clipboard_needs_update	vim/vim/src/ui.c	/^is_clipboard_needs_update()$/;"	f
is_col_tabstop	vim/vim/src/libvterm/src/state.c	/^static int is_col_tabstop(VTermState *state, int col)$/;"	f	file:	signature:(VTermState *state, int col)
is_cursor_in_scrollregion	vim/vim/src/libvterm/src/state.c	/^static int is_cursor_in_scrollregion(const VTermState *state)$/;"	f	file:	signature:(const VTermState *state)
is_cygpty	vim/vim/src/iscygpty.c	/^int is_cygpty(int fd)$/;"	f	signature:(int fd)
is_cygpty	vim/vim/src/iscygpty.h	/^int is_cygpty(int fd);$/;"	p	signature:(int fd)
is_cygpty_used	vim/vim/src/iscygpty.c	/^int is_cygpty_used(void)$/;"	f	signature:(void)
is_cygpty_used	vim/vim/src/iscygpty.h	/^int is_cygpty_used(void);$/;"	p	signature:(void)
is_dev_fd_file	vim/vim/src/fileio.c	/^is_dev_fd_file(char_u *fname)$/;"	f	signature:(char_u *fname)
is_drag	vim/vim/src/misc2.c	/^    int	    is_drag;		\/* Is it a mouse drag event? *\/$/;"	m	struct:mousetable	file:	access:public
is_etag	vim/vim/src/tag.c	/^    int		is_etag;	\/* TRUE for emacs tag *\/$/;"	m	struct:tag_pointers	file:	access:public
is_ident	vim/vim/src/normal.c	/^is_ident(char_u *line, int offset)$/;"	f	file:	signature:(char_u *line, int offset)
is_ignore_draw	vim/vim/src/gui_photon.c	/^static int is_ignore_draw = FALSE;$/;"	v	file:
is_key_pressed	vim/vim/src/gui_gtk_x11.c	/^static gboolean is_key_pressed = FALSE;$/;"	v	file:
is_mouse_key	vim/vim/src/misc1.c	/^is_mouse_key(int c)$/;"	f	signature:(int c)
is_not_a_term	vim/vim/src/main.c	/^is_not_a_term()$/;"	f
is_oneChar	vim/vim/src/ops.c	/^    int		is_oneChar;	\/* TRUE if block within one character *\/$/;"	m	struct:block_def	file:	access:public
is_one_char	vim/vim/src/search.c	/^is_one_char(char_u *pattern, int move, pos_T *cur)$/;"	f	file:	signature:(char_u *pattern, int move, pos_T *cur)
is_one_char	vim/vim/src/search.c	/^static int is_one_char(char_u *pattern, int move, pos_T *cur);$/;"	p	file:	signature:(char_u *pattern, int move, pos_T *cur)
is_photon_available	vim/vim/src/os_qnx.c	/^int is_photon_available;$/;"	v
is_qf_entry_present	vim/vim/src/quickfix.c	/^is_qf_entry_present(qf_info_T *qi, qfline_T *qf_ptr)$/;"	f	file:	signature:(qf_info_T *qi, qfline_T *qf_ptr)
is_qf_win	vim/vim/src/quickfix.c	/^is_qf_win(win_T *win, qf_info_T *qi)$/;"	f	file:	signature:(win_T *win, qf_info_T *qi)
is_qf_win	vim/vim/src/quickfix.c	/^static int	is_qf_win(win_T *win, qf_info_T *qi);$/;"	p	file:	signature:(win_T *win, qf_info_T *qi)
is_short	vim/vim/src/ops.c	/^    int		is_short;	\/* TRUE if line is too short to fit in block *\/$/;"	m	struct:block_def	file:	access:public
is_simple_key	vim/vim/src/json.c	/^is_simple_key(char_u *key)$/;"	f	file:	signature:(char_u *key)
is_timeout	vim/vim/src/gui_photon.c	/^static short	    is_timeout;		    \/* Has the timeout occurred? *\/$/;"	v	file:
is_unique	vim/vim/src/misc1.c	/^is_unique(char_u *maybe_unique, garray_T *gap, int i)$/;"	f	file:	signature:(char_u *maybe_unique, garray_T *gap, int i)
is_unique	vim/vim/src/misc1.c	/^static int is_unique(char_u *maybe_unique, garray_T *gap, int i);$/;"	p	file:	signature:(char_u *maybe_unique, garray_T *gap, int i)
is_wprefix	vim/vim/src/iscygpty.c	104;"	d	file:
isinf	vim/vim/src/macros.h	/^     static __inline int isinf(double x) { return !_finite(x) && !_isnan(x); }$/;"	f	signature:(double x)
isinf	vim/vim/src/macros.h	/^     static inline int isinf(double x) { return !isnan(x) && isnan(x - x); }$/;"	f	signature:(double x)
isnan	vim/vim/src/macros.h	/^     static inline int isnan(double x) { return x != x; }$/;"	f	signature:(double x)
isnan	vim/vim/src/macros.h	342;"	d
istate	vim/vim/src/regexp_nfa.c	/^static int istate;	\/* Index in the state vector, used in alloc_state() *\/$/;"	v	file:
istermoption	vim/vim/src/option.c	/^istermoption(struct vimoption *p)$/;"	f	file:	signature:(struct vimoption *p)
istermoption	vim/vim/src/option.c	/^static int  istermoption(struct vimoption *);$/;"	p	file:	signature:(struct vimoption *)
ital_font	vim/vim/src/gui.h	/^    GuiFont	ital_font;	    \/* Italic font *\/$/;"	m	struct:Gui	access:public
italic	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int italic    : 1;$/;"	m	struct:__anon61	access:public
italic	vim/vim/src/libvterm/src/screen.c	/^  unsigned int italic    : 1;$/;"	m	struct:__anon29	file:	access:public
italic	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int italic:1;$/;"	m	struct:VTermPen	access:public
italic	vim/vim/src/libvterm/t/harness.c	/^  int italic;$/;"	m	struct:__anon42	file:	access:public
italic	vim/vim/src/structs.h	/^    int		italic;$/;"	m	struct:__anon205	access:public
item	vim/vim/src/evalfunc.c	/^    listitem_T	*item;$/;"	m	struct:__anon251	file:	access:public
item_compare	vim/vim/src/evalfunc.c	/^	item_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
item_compare	vim/vim/src/evalfunc.c	/^item_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
item_compare2	vim/vim/src/evalfunc.c	/^	item_compare2(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
item_compare2	vim/vim/src/evalfunc.c	/^item_compare2(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
item_compare_float	vim/vim/src/evalfunc.c	/^    int		item_compare_float;$/;"	m	struct:__anon252	file:	access:public
item_compare_func	vim/vim/src/evalfunc.c	/^    char_u	*item_compare_func;$/;"	m	struct:__anon252	file:	access:public
item_compare_func_err	vim/vim/src/evalfunc.c	/^    int		item_compare_func_err;$/;"	m	struct:__anon252	file:	access:public
item_compare_ic	vim/vim/src/evalfunc.c	/^    int		item_compare_ic;$/;"	m	struct:__anon252	file:	access:public
item_compare_keep_zero	vim/vim/src/evalfunc.c	/^    int		item_compare_keep_zero;$/;"	m	struct:__anon252	file:	access:public
item_compare_numbers	vim/vim/src/evalfunc.c	/^    int		item_compare_numbers;$/;"	m	struct:__anon252	file:	access:public
item_compare_numeric	vim/vim/src/evalfunc.c	/^    int		item_compare_numeric;$/;"	m	struct:__anon252	file:	access:public
item_compare_partial	vim/vim/src/evalfunc.c	/^    partial_T	*item_compare_partial;$/;"	m	struct:__anon252	file:	access:public
item_compare_selfdict	vim/vim/src/evalfunc.c	/^    dict_T	*item_compare_selfdict;$/;"	m	struct:__anon252	file:	access:public
item_copy	vim/vim/src/eval.c	/^item_copy($/;"	f	signature:( typval_T *from, typval_T *to, int deep, int copyID)
item_lock	vim/vim/src/eval.c	/^item_lock(typval_T *tv, int deep, int lock)$/;"	f	file:	signature:(typval_T *tv, int deep, int lock)
item_lock	vim/vim/src/eval.c	/^static void item_lock(typval_T *tv, int deep, int lock);$/;"	p	file:	signature:(typval_T *tv, int deep, int lock)
itemcode	vim/vim/src/os_vms.c	/^    short	itemcode;$/;"	m	struct:__anon26	file:	access:public
j	vim/vim/runtime/tutor/tutor.cs	/^   ** Pro pohyb kurzoru pou¾ívej klávesy h,j,k,l jak je znázornìno ní¾e. **$/;"	p
j_charsets	vim/vim/src/hardcopy.c	/^static struct prt_ps_charset_S j_charsets[] =$/;"	v	typeref:struct:prt_ps_charset_S	file:
j_encodings	vim/vim/src/hardcopy.c	/^static struct prt_ps_encoding_S j_encodings[] =$/;"	v	typeref:struct:prt_ps_encoding_S	file:
jd_key	vim/vim/src/json.c	/^    char_u	  *jd_key;$/;"	m	struct:__anon150	file:	access:public
jd_key_tv	vim/vim/src/json.c	/^    typval_T	  jd_key_tv;$/;"	m	struct:__anon150	file:	access:public
jd_tv	vim/vim/src/json.c	/^    typval_T	  jd_tv;	\/* the list or dict *\/$/;"	m	struct:__anon150	file:	access:public
jd_type	vim/vim/src/json.c	/^    json_decode_T jd_type;$/;"	m	struct:__anon150	file:	access:public
jo_block_write	vim/vim/src/structs.h	/^    int		jo_block_write;	\/* for testing only *\/$/;"	m	struct:__anon197	access:public
jo_callback	vim/vim/src/structs.h	/^    char_u	*jo_callback;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
jo_channel	vim/vim/src/structs.h	/^    channel_T	*jo_channel;$/;"	m	struct:__anon197	access:public
jo_close_cb	vim/vim/src/structs.h	/^    char_u	*jo_close_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
jo_close_partial	vim/vim/src/structs.h	/^    partial_T	*jo_close_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
jo_drop_never	vim/vim/src/structs.h	/^    int		jo_drop_never;$/;"	m	struct:__anon197	access:public
jo_err_cb	vim/vim/src/structs.h	/^    char_u	*jo_err_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
jo_err_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_err_mode;$/;"	m	struct:__anon197	access:public
jo_err_partial	vim/vim/src/structs.h	/^    partial_T	*jo_err_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
jo_err_timeout	vim/vim/src/structs.h	/^    int		jo_err_timeout;$/;"	m	struct:__anon197	access:public
jo_exit_cb	vim/vim/src/structs.h	/^    char_u	*jo_exit_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
jo_exit_partial	vim/vim/src/structs.h	/^    partial_T	*jo_exit_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
jo_id	vim/vim/src/structs.h	/^    int		jo_id;$/;"	m	struct:__anon197	access:public
jo_in_bot	vim/vim/src/structs.h	/^    linenr_T	jo_in_bot;$/;"	m	struct:__anon197	access:public
jo_in_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_in_mode;$/;"	m	struct:__anon197	access:public
jo_in_top	vim/vim/src/structs.h	/^    linenr_T	jo_in_top;$/;"	m	struct:__anon197	access:public
jo_io	vim/vim/src/structs.h	/^    job_io_T	jo_io[4];	\/* PART_OUT, PART_ERR, PART_IN *\/$/;"	m	struct:__anon197	access:public
jo_io_buf	vim/vim/src/structs.h	/^    int		jo_io_buf[4];$/;"	m	struct:__anon197	access:public
jo_io_name	vim/vim/src/structs.h	/^    char_u	*jo_io_name[4];	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
jo_io_name_buf	vim/vim/src/structs.h	/^    char_u	jo_io_name_buf[4][NUMBUFLEN];$/;"	m	struct:__anon197	access:public
jo_message	vim/vim/src/structs.h	/^    int		jo_message[4];$/;"	m	struct:__anon197	access:public
jo_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_mode;$/;"	m	struct:__anon197	access:public
jo_modifiable	vim/vim/src/structs.h	/^    int		jo_modifiable[4];$/;"	m	struct:__anon197	access:public
jo_out_cb	vim/vim/src/structs.h	/^    char_u	*jo_out_cb;	\/* not allocated! *\/$/;"	m	struct:__anon197	access:public
jo_out_mode	vim/vim/src/structs.h	/^    ch_mode_T	jo_out_mode;$/;"	m	struct:__anon197	access:public
jo_out_partial	vim/vim/src/structs.h	/^    partial_T	*jo_out_partial; \/* not referenced! *\/$/;"	m	struct:__anon197	access:public
jo_out_timeout	vim/vim/src/structs.h	/^    int		jo_out_timeout;$/;"	m	struct:__anon197	access:public
jo_part	vim/vim/src/structs.h	/^    int		jo_part;$/;"	m	struct:__anon197	access:public
jo_partial	vim/vim/src/structs.h	/^    partial_T	*jo_partial;	\/* not referenced! *\/$/;"	m	struct:__anon197	access:public
jo_pty	vim/vim/src/structs.h	/^    int		jo_pty;$/;"	m	struct:__anon197	access:public
jo_set	vim/vim/src/structs.h	/^    int		jo_set;		\/* JO_ bits for values that were set *\/$/;"	m	struct:__anon197	access:public
jo_set2	vim/vim/src/structs.h	/^    int		jo_set2;	\/* JO2_ bits for values that were set *\/$/;"	m	struct:__anon197	access:public
jo_soe_buf	vim/vim/src/structs.h	/^    char_u	jo_soe_buf[NUMBUFLEN];$/;"	m	struct:__anon197	access:public
jo_stoponexit	vim/vim/src/structs.h	/^    char_u	*jo_stoponexit;$/;"	m	struct:__anon197	access:public
jo_term_cols	vim/vim/src/structs.h	/^    int		jo_term_cols;$/;"	m	struct:__anon197	access:public
jo_term_rows	vim/vim/src/structs.h	/^    int		jo_term_rows;$/;"	m	struct:__anon197	access:public
jo_timeout	vim/vim/src/structs.h	/^    int		jo_timeout;$/;"	m	struct:__anon197	access:public
jo_waittime	vim/vim/src/structs.h	/^    int		jo_waittime;$/;"	m	struct:__anon197	access:public
job_T	vim/vim/src/structs.h	/^typedef struct jobvar_S job_T;$/;"	t	typeref:struct:jobvar_S
job_alloc	vim/vim/src/channel.c	/^job_alloc(void)$/;"	f	signature:(void)
job_channel_still_useful	vim/vim/src/channel.c	/^job_channel_still_useful(job_T *job)$/;"	f	file:	signature:(job_T *job)
job_check_ended	vim/vim/src/channel.c	/^job_check_ended(void)$/;"	f	signature:(void)
job_cleanup	vim/vim/src/channel.c	/^job_cleanup(job_T *job)$/;"	f	signature:(job_T *job)
job_free	vim/vim/src/channel.c	/^job_free(job_T *job)$/;"	f	file:	signature:(job_T *job)
job_free_all	vim/vim/src/channel.c	/^job_free_all(void)$/;"	f	signature:(void)
job_free_contents	vim/vim/src/channel.c	/^job_free_contents(job_T *job)$/;"	f	file:	signature:(job_T *job)
job_free_job	vim/vim/src/channel.c	/^job_free_job(job_T *job)$/;"	f	file:	signature:(job_T *job)
job_info	vim/vim/src/channel.c	/^job_info(job_T *job, dict_T *dict)$/;"	f	signature:(job_T *job, dict_T *dict)
job_io_T	vim/vim/src/structs.h	/^} job_io_T;$/;"	t	typeref:enum:__anon194
job_io_file_open	vim/vim/src/os_win32.c	/^job_io_file_open($/;"	f	file:	signature:( char_u *fname, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes)
job_need_end_check	vim/vim/src/channel.c	/^job_need_end_check(job_T *job)$/;"	f	file:	signature:(job_T *job)
job_set_options	vim/vim/src/channel.c	/^job_set_options(job_T *job, jobopt_T *opt)$/;"	f	signature:(job_T *job, jobopt_T *opt)
job_start	vim/vim/src/channel.c	/^job_start(typval_T *argvars, jobopt_T *opt_arg)$/;"	f	signature:(typval_T *argvars, jobopt_T *opt_arg)
job_status	vim/vim/src/channel.c	/^job_status(job_T *job)$/;"	f	signature:(job_T *job)
job_still_useful	vim/vim/src/channel.c	/^job_still_useful(job_T *job)$/;"	f	file:	signature:(job_T *job)
job_stop	vim/vim/src/channel.c	/^job_stop(job_T *job, typval_T *argvars, char *type)$/;"	f	signature:(job_T *job, typval_T *argvars, char *type)
job_stop_on_exit	vim/vim/src/channel.c	/^job_stop_on_exit(void)$/;"	f	signature:(void)
job_unref	vim/vim/src/channel.c	/^job_unref(job_T *job)$/;"	f	signature:(job_T *job)
jobname	vim/vim/src/structs.h	/^    char_u	*jobname;$/;"	m	struct:__anon206	access:public
jobopt_T	vim/vim/src/structs.h	/^} jobopt_T;$/;"	t	typeref:struct:__anon197
jobstatus_T	vim/vim/src/structs.h	/^} jobstatus_T;$/;"	t	typeref:enum:__anon192
jobvar_S	vim/vim/src/structs.h	/^struct jobvar_S$/;"	s
jobvar_S::jv_channel	vim/vim/src/structs.h	/^    channel_T	*jv_channel;	\/* channel for I\/O, reference counted *\/$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_copyID	vim/vim/src/structs.h	/^    int		jv_copyID;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_exit_cb	vim/vim/src/structs.h	/^    char_u	*jv_exit_cb;	\/* allocated *\/$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_exit_partial	vim/vim/src/structs.h	/^    partial_T	*jv_exit_partial;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_exitval	vim/vim/src/structs.h	/^    int		jv_exitval;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_in_buf	vim/vim/src/structs.h	/^    buf_T	*jv_in_buf;	\/* buffer from "in-name" *\/$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_job_object	vim/vim/src/structs.h	/^    HANDLE		jv_job_object;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_next	vim/vim/src/structs.h	/^    job_T	*jv_next;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_pid	vim/vim/src/structs.h	/^    pid_t	jv_pid;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_prev	vim/vim/src/structs.h	/^    job_T	*jv_prev;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_proc_info	vim/vim/src/structs.h	/^    PROCESS_INFORMATION	jv_proc_info;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_refcount	vim/vim/src/structs.h	/^    int		jv_refcount;	\/* reference count *\/$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_status	vim/vim/src/structs.h	/^    jobstatus_T	jv_status;$/;"	m	struct:jobvar_S	access:public
jobvar_S::jv_stoponexit	vim/vim/src/structs.h	/^    char_u	*jv_stoponexit; \/* allocated *\/$/;"	m	struct:jobvar_S	access:public
johab_fcon_to_wan	vim/vim/src/hangulin.c	/^static const char_u johab_fcon_to_wan[] =$/;"	v	file:
johab_lcon_to_wan	vim/vim/src/hangulin.c	/^static const char_u johab_lcon_to_wan[] =$/;"	v	file:
johab_vow_to_wan	vim/vim/src/hangulin.c	/^static const char_u johab_vow_to_wan[] =$/;"	v	file:
join_S	vim/vim/src/list.c	/^typedef struct join_S {$/;"	s	file:
join_S::s	vim/vim/src/list.c	/^    char_u	*s;$/;"	m	struct:join_S	file:	access:public
join_S::tofree	vim/vim/src/list.c	/^    char_u	*tofree;$/;"	m	struct:join_S	file:	access:public
join_T	vim/vim/src/list.c	/^} join_T;$/;"	t	typeref:struct:join_S	file:
jq_next	vim/vim/src/structs.h	/^    jsonq_T	*jq_next;$/;"	m	struct:jsonq_S	access:public
jq_no_callback	vim/vim/src/structs.h	/^    int		jq_no_callback; \/* TRUE when no callback was found *\/$/;"	m	struct:jsonq_S	access:public
jq_prev	vim/vim/src/structs.h	/^    jsonq_T	*jq_prev;$/;"	m	struct:jsonq_S	access:public
jq_value	vim/vim/src/structs.h	/^    typval_T	*jq_value;$/;"	m	struct:jsonq_S	access:public
js_buf	vim/vim/src/structs.h	/^    char_u	*js_buf;	\/* text to be decoded *\/$/;"	m	struct:js_reader	access:public
js_cookie	vim/vim/src/structs.h	/^    void	*js_cookie;	\/* can be used by js_fill *\/$/;"	m	struct:js_reader	access:public
js_cookie_arg	vim/vim/src/structs.h	/^    int		js_cookie_arg;	\/* can be used by js_fill *\/$/;"	m	struct:js_reader	access:public
js_end	vim/vim/src/structs.h	/^    char_u	*js_end;	\/* NUL in js_buf *\/$/;"	m	struct:js_reader	access:public
js_fill	vim/vim/src/structs.h	/^    int		(*js_fill)(struct js_reader *);$/;"	m	struct:js_reader	access:public
js_read_T	vim/vim/src/structs.h	/^typedef struct js_reader js_read_T;$/;"	t	typeref:struct:js_reader
js_reader	vim/vim/src/structs.h	/^struct js_reader$/;"	s
js_reader::js_buf	vim/vim/src/structs.h	/^    char_u	*js_buf;	\/* text to be decoded *\/$/;"	m	struct:js_reader	access:public
js_reader::js_cookie	vim/vim/src/structs.h	/^    void	*js_cookie;	\/* can be used by js_fill *\/$/;"	m	struct:js_reader	access:public
js_reader::js_cookie_arg	vim/vim/src/structs.h	/^    int		js_cookie_arg;	\/* can be used by js_fill *\/$/;"	m	struct:js_reader	access:public
js_reader::js_end	vim/vim/src/structs.h	/^    char_u	*js_end;	\/* NUL in js_buf *\/$/;"	m	struct:js_reader	access:public
js_reader::js_fill	vim/vim/src/structs.h	/^    int		(*js_fill)(struct js_reader *);$/;"	m	struct:js_reader	access:public
js_reader::js_used	vim/vim/src/structs.h	/^    int		js_used;	\/* bytes used from js_buf *\/$/;"	m	struct:js_reader	access:public
js_used	vim/vim/src/structs.h	/^    int		js_used;	\/* bytes used from js_buf *\/$/;"	m	struct:js_reader	access:public
json_dec_item_T	vim/vim/src/json.c	/^} json_dec_item_T;$/;"	t	typeref:struct:__anon150	file:
json_decode	vim/vim/src/json.c	/^json_decode(js_read_T *reader, typval_T *res, int options)$/;"	f	signature:(js_read_T *reader, typval_T *res, int options)
json_decode_T	vim/vim/src/json.c	/^} json_decode_T;$/;"	t	typeref:enum:__anon149	file:
json_decode_all	vim/vim/src/json.c	/^json_decode_all(js_read_T *reader, typval_T *res, int options)$/;"	f	signature:(js_read_T *reader, typval_T *res, int options)
json_decode_item	vim/vim/src/json.c	/^json_decode_item(js_read_T *reader, typval_T *res, int options)$/;"	f	file:	signature:(js_read_T *reader, typval_T *res, int options)
json_decode_item	vim/vim/src/json.c	/^static int json_decode_item(js_read_T *reader, typval_T *res, int options);$/;"	p	file:	signature:(js_read_T *reader, typval_T *res, int options)
json_decode_string	vim/vim/src/json.c	/^json_decode_string(js_read_T *reader, typval_T *res, int quote)$/;"	f	file:	signature:(js_read_T *reader, typval_T *res, int quote)
json_encode	vim/vim/src/json.c	/^json_encode(typval_T *val, int options)$/;"	f	signature:(typval_T *val, int options)
json_encode_gap	vim/vim/src/json.c	/^json_encode_gap(garray_T *gap, typval_T *val, int options)$/;"	f	file:	signature:(garray_T *gap, typval_T *val, int options)
json_encode_item	vim/vim/src/json.c	/^json_encode_item(garray_T *gap, typval_T *val, int copyID, int options)$/;"	f	file:	signature:(garray_T *gap, typval_T *val, int copyID, int options)
json_encode_item	vim/vim/src/json.c	/^static int json_encode_item(garray_T *gap, typval_T *val, int copyID, int options);$/;"	p	file:	signature:(garray_T *gap, typval_T *val, int copyID, int options)
json_encode_nr_expr	vim/vim/src/json.c	/^json_encode_nr_expr(int nr, typval_T *val, int options)$/;"	f	signature:(int nr, typval_T *val, int options)
json_find_end	vim/vim/src/json.c	/^json_find_end(js_read_T *reader, int options)$/;"	f	signature:(js_read_T *reader, int options)
json_skip_white	vim/vim/src/json.c	/^json_skip_white(js_read_T *reader)$/;"	f	file:	signature:(js_read_T *reader)
jsonq_S	vim/vim/src/structs.h	/^struct jsonq_S$/;"	s
jsonq_S::jq_next	vim/vim/src/structs.h	/^    jsonq_T	*jq_next;$/;"	m	struct:jsonq_S	access:public
jsonq_S::jq_no_callback	vim/vim/src/structs.h	/^    int		jq_no_callback; \/* TRUE when no callback was found *\/$/;"	m	struct:jsonq_S	access:public
jsonq_S::jq_prev	vim/vim/src/structs.h	/^    jsonq_T	*jq_prev;$/;"	m	struct:jsonq_S	access:public
jsonq_S::jq_value	vim/vim/src/structs.h	/^    typval_T	*jq_value;$/;"	m	struct:jsonq_S	access:public
jsonq_T	vim/vim/src/structs.h	/^typedef struct jsonq_S jsonq_T;$/;"	t	typeref:struct:jsonq_S
jumpProc	vim/vim/src/gui_at_sb.h	/^    XtCallbackList jumpProc;	\/* same as thumbProc but pass data by ref *\/$/;"	m	struct:__anon84	access:public
jump_to_mouse	vim/vim/src/ui.c	/^jump_to_mouse($/;"	f	signature:( int flags, int *inclusive, int which_button)
jumpto_tag	vim/vim/src/tag.c	/^jumpto_tag($/;"	f	file:	signature:( char_u *lbuf, int forceit, int keep_help)
jumpto_tag	vim/vim/src/tag.c	/^static int jumpto_tag(char_u *lbuf, int forceit, int keep_help);$/;"	p	file:	signature:(char_u *lbuf, int forceit, int keep_help)
jv_channel	vim/vim/src/structs.h	/^    channel_T	*jv_channel;	\/* channel for I\/O, reference counted *\/$/;"	m	struct:jobvar_S	access:public
jv_copyID	vim/vim/src/structs.h	/^    int		jv_copyID;$/;"	m	struct:jobvar_S	access:public
jv_exit_cb	vim/vim/src/structs.h	/^    char_u	*jv_exit_cb;	\/* allocated *\/$/;"	m	struct:jobvar_S	access:public
jv_exit_partial	vim/vim/src/structs.h	/^    partial_T	*jv_exit_partial;$/;"	m	struct:jobvar_S	access:public
jv_exitval	vim/vim/src/structs.h	/^    int		jv_exitval;$/;"	m	struct:jobvar_S	access:public
jv_in_buf	vim/vim/src/structs.h	/^    buf_T	*jv_in_buf;	\/* buffer from "in-name" *\/$/;"	m	struct:jobvar_S	access:public
jv_job_object	vim/vim/src/structs.h	/^    HANDLE		jv_job_object;$/;"	m	struct:jobvar_S	access:public
jv_next	vim/vim/src/structs.h	/^    job_T	*jv_next;$/;"	m	struct:jobvar_S	access:public
jv_pid	vim/vim/src/structs.h	/^    pid_t	jv_pid;$/;"	m	struct:jobvar_S	access:public
jv_prev	vim/vim/src/structs.h	/^    job_T	*jv_prev;$/;"	m	struct:jobvar_S	access:public
jv_proc_info	vim/vim/src/structs.h	/^    PROCESS_INFORMATION	jv_proc_info;$/;"	m	struct:jobvar_S	access:public
jv_refcount	vim/vim/src/structs.h	/^    int		jv_refcount;	\/* reference count *\/$/;"	m	struct:jobvar_S	access:public
jv_status	vim/vim/src/structs.h	/^    jobstatus_T	jv_status;$/;"	m	struct:jobvar_S	access:public
jv_stoponexit	vim/vim/src/structs.h	/^    char_u	*jv_stoponexit; \/* allocated *\/$/;"	m	struct:jobvar_S	access:public
k	vim/vim/runtime/tutor/tutor.cs	/^   ** Pro pohyb kurzoru pou¾ívej klávesy h,j,k,l jak je znázornìno ní¾e. **$/;"	p
kCreateEmpty	vim/vim/src/gui_mac.c	119;"	d	file:
kCreateRect	vim/vim/src/gui_mac.c	120;"	d	file:
kDestroy	vim/vim/src/gui_mac.c	121;"	d	file:
kMyDataBrowserAttributeListViewAlternatingRowColors	vim/vim/src/gui_mac.c	/^enum { kMyDataBrowserAttributeListViewAlternatingRowColors = (1 << 1) };$/;"	e	enum:__anon228	file:
kNothing	vim/vim/src/gui_mac.c	118;"	d	file:
kTabContextMenuId	vim/vim/src/gui_mac.c	/^    kTabContextMenuId = 42$/;"	e	enum:__anon226	file:
kTabsColumn	vim/vim/src/gui_mac.c	/^    kTabsColumn = 'Tabs'$/;"	e	enum:__anon227	file:
k_char	vim/vim/src/structs.h	/^    int		k_char;		\/* conceal substitute character *\/$/;"	m	struct:keyentry	access:public
k_charsets	vim/vim/src/hardcopy.c	/^static struct prt_ps_charset_S k_charsets[] =$/;"	v	typeref:struct:prt_ps_charset_S	file:
k_encodings	vim/vim/src/hardcopy.c	/^static struct prt_ps_encoding_S k_encodings[] =$/;"	v	typeref:struct:prt_ps_encoding_S	file:
k_syn	vim/vim/src/structs.h	/^    struct sp_syn k_syn;	\/* struct passed to in_id_list() *\/$/;"	m	struct:keyentry	typeref:struct:keyentry::sp_syn	access:public
ke_next	vim/vim/src/structs.h	/^    keyentry_T	*ke_next;	\/* next entry with identical "keyword[]" *\/$/;"	m	struct:keyentry	access:public
keep_filetype	vim/vim/src/globals.h	/^EXTERN int	keep_filetype INIT(= FALSE);	\/* value for did_filetype when$/;"	v
keep_help_flag	vim/vim/src/globals.h	/^EXTERN int	keep_help_flag INIT(= FALSE); \/* doing :ta from help file *\/$/;"	v
keep_msg	vim/vim/src/globals.h	/^EXTERN char_u	*keep_msg INIT(= NULL);	    \/* msg to be shown after redraw *\/$/;"	v
keep_msg_attr	vim/vim/src/globals.h	/^EXTERN int	keep_msg_attr INIT(= 0);    \/* highlight attr for keep_msg *\/$/;"	v
keep_msg_more	vim/vim/src/globals.h	/^EXTERN int	keep_msg_more INIT(= FALSE); \/* keep_msg was set by msgmore() *\/$/;"	v
keepalt	vim/vim/src/structs.h	/^    int		keepalt;		\/* TRUE when ":keepalt" was used *\/$/;"	m	struct:__anon171	access:public
keepend_level	vim/vim/src/syntax.c	/^static int keepend_level = -1;$/;"	v	file:
keepjumps	vim/vim/src/structs.h	/^    int		keepjumps;		\/* TRUE when ":keepjumps" was used *\/$/;"	m	struct:__anon171	access:public
keepmarks	vim/vim/src/structs.h	/^    int		keepmarks;		\/* TRUE when ":keepmarks" was used *\/$/;"	m	struct:__anon171	access:public
keeppatterns	vim/vim/src/structs.h	/^    int		keeppatterns;		\/* TRUE when ":keeppatterns" was used *\/$/;"	m	struct:__anon171	access:public
key	vim/vim/src/misc2.c	/^    int	    key;	\/* Special key code or ascii value *\/$/;"	m	struct:key_name_entry	file:	access:public
keyEventHandlerUPP	vim/vim/src/gui_mac.c	/^static EventHandlerUPP keyEventHandlerUPP = NULL;$/;"	v	file:
keyHead	vim/vim/src/netbeans.c	/^static keyQ_T keyHead; \/* dummy node, header for circular queue *\/$/;"	v	file:
keyQ_T	vim/vim/src/netbeans.c	/^typedef struct keyqueue keyQ_T;$/;"	t	typeref:struct:keyqueue	file:
key_event	vim/vim/src/gui_beval.c	/^key_event(BalloonEval *beval, unsigned keyval, int is_keypress)$/;"	f	file:	signature:(BalloonEval *beval, unsigned keyval, int is_keypress)
key_event	vim/vim/src/gui_beval.c	/^static void key_event(BalloonEval *, unsigned, int);$/;"	p	file:	signature:(BalloonEval *, unsigned, int)
key_extra	vim/vim/src/keymap.h	/^enum key_extra$/;"	g
key_name_entry	vim/vim/src/misc2.c	/^static struct key_name_entry$/;"	s	file:
key_name_entry::key	vim/vim/src/misc2.c	/^    int	    key;	\/* Special key code or ascii value *\/$/;"	m	struct:key_name_entry	file:	access:public
key_name_entry::name	vim/vim/src/misc2.c	/^    char_u  *name;	\/* Name of key *\/$/;"	m	struct:key_name_entry	file:	access:public
key_names	vim/vim/src/term.c	/^static char *(key_names[]) =$/;"	v	file:
key_names_table	vim/vim/src/misc2.c	/^} key_names_table[] =$/;"	v	typeref:struct:key_name_entry	file:
key_press_event	vim/vim/src/gui_gtk_x11.c	/^key_press_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventKey *event, gpointer data UNUSED)
key_release_event	vim/vim/src/gui_gtk_x11.c	/^key_release_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventKey *event, gpointer data UNUSED)
key_sym	vim/vim/src/gui_gtk_x11.c	/^    guint key_sym;$/;"	m	struct:special_key	file:	access:public
key_sym	vim/vim/src/gui_mac.c	/^    KeySym  key_sym;$/;"	m	struct:__anon224	file:	access:public
key_sym	vim/vim/src/gui_photon.c	/^    int	    key_sym;$/;"	m	struct:__anon240	file:	access:public
key_sym	vim/vim/src/gui_w32.c	/^    UINT    key_sym;$/;"	m	struct:__anon246	file:	access:public
key_sym	vim/vim/src/gui_x11.c	/^    KeySym  key_sym;$/;"	m	struct:specialkey	file:	access:public
keycodes	vim/vim/src/libvterm/src/keyboard.c	/^static keycodes_s keycodes[] = {$/;"	v	file:
keycodes_fn	vim/vim/src/libvterm/src/keyboard.c	/^static keycodes_s keycodes_fn[] = {$/;"	v	file:
keycodes_kp	vim/vim/src/libvterm/src/keyboard.c	/^static keycodes_s keycodes_kp[] = {$/;"	v	file:
keycodes_s	vim/vim/src/libvterm/src/keyboard.c	/^} keycodes_s;$/;"	t	typeref:struct:__anon31	file:
keyentry	vim/vim/src/structs.h	/^struct keyentry$/;"	s
keyentry::flags	vim/vim/src/structs.h	/^    int		flags;$/;"	m	struct:keyentry	access:public
keyentry::k_char	vim/vim/src/structs.h	/^    int		k_char;		\/* conceal substitute character *\/$/;"	m	struct:keyentry	access:public
keyentry::k_syn	vim/vim/src/structs.h	/^    struct sp_syn k_syn;	\/* struct passed to in_id_list() *\/$/;"	m	struct:keyentry	typeref:struct:keyentry::sp_syn	access:public
keyentry::ke_next	vim/vim/src/structs.h	/^    keyentry_T	*ke_next;	\/* next entry with identical "keyword[]" *\/$/;"	m	struct:keyentry	access:public
keyentry::keyword	vim/vim/src/structs.h	/^    char_u	keyword[1];	\/* actually longer *\/$/;"	m	struct:keyentry	access:public
keyentry::next_list	vim/vim/src/structs.h	/^    short	*next_list;	\/* ID list for next match (if non-zero) *\/$/;"	m	struct:keyentry	access:public
keyentry_T	vim/vim/src/structs.h	/^typedef struct keyentry keyentry_T;$/;"	t	typeref:struct:keyentry
keyhit_callback	vim/vim/src/gui_athena.c	/^keyhit_callback($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XEvent *event, Boolean *cont UNUSED)
keyhit_callback	vim/vim/src/gui_athena.c	/^static void keyhit_callback(Widget w, XtPointer client_data, XEvent *event, Boolean *cont);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XEvent *event, Boolean *cont)
keyhit_callback	vim/vim/src/gui_motif.c	/^keyhit_callback($/;"	f	file:	signature:( Widget w, XtPointer client_data UNUSED, XEvent *event, Boolean *cont UNUSED)
keyhit_callback	vim/vim/src/gui_motif.c	/^static void keyhit_callback(Widget w, XtPointer client_data, XEvent *event, Boolean *cont);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XEvent *event, Boolean *cont)
keymap_init	vim/vim/src/digraph.c	/^keymap_init(void)$/;"	f	signature:(void)
keymap_unload	vim/vim/src/digraph.c	/^keymap_unload(void)$/;"	f	file:	signature:(void)
keymap_unload	vim/vim/src/digraph.c	/^static void keymap_unload(void);$/;"	p	file:	signature:(void)
keypad	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int keypad:1;$/;"	m	struct:VTermState::__anon35	access:public
keyqueue	vim/vim/src/netbeans.c	/^struct keyqueue$/;"	s	file:
keyqueue::keystr	vim/vim/src/netbeans.c	/^    char_u	    *keystr;$/;"	m	struct:keyqueue	file:	access:public
keyqueue::next	vim/vim/src/netbeans.c	/^    struct keyqueue *next;$/;"	m	struct:keyqueue	typeref:struct:keyqueue::keyqueue	file:	access:public
keyqueue::prev	vim/vim/src/netbeans.c	/^    struct keyqueue *prev;$/;"	m	struct:keyqueue	typeref:struct:keyqueue::keyqueue	file:	access:public
keys	vim/vim/src/crypt_zip.c	/^    u32_T keys[3];$/;"	m	struct:__anon154	file:	access:public
keystr	vim/vim/src/netbeans.c	/^    char_u	    *keystr;$/;"	m	struct:keyqueue	file:	access:public
keysum	vim/vim/src/blowfish.c	/^    UINT32_T keysum;$/;"	m	struct:__anon73	file:	access:public
keyval_to_string	vim/vim/src/gui_gtk_x11.c	/^keyval_to_string(unsigned int keyval, unsigned int state, char_u *string)$/;"	f	file:	signature:(unsigned int keyval, unsigned int state, char_u *string)
keyword	vim/vim/src/structs.h	/^    char_u	keyword[1];	\/* actually longer *\/$/;"	m	struct:keyentry	access:public
keyword	vim/vim/src/syntax.c	/^    int		keyword;	\/* TRUE for ":syn keyword" *\/$/;"	m	struct:__anon137	file:	access:public
kind_table_for_2	vim/vim/src/hangulin.c	/^kind_table_for_2(int c)$/;"	f	file:	signature:(int c)
kind_table_for_3	vim/vim/src/hangulin.c	/^static short_u kind_table_for_3[] =$/;"	v	file:
km_startsel	vim/vim/src/globals.h	/^EXTERN int	km_startsel INIT(= FALSE);$/;"	v
km_stopsel	vim/vim/src/globals.h	/^EXTERN int	km_stopsel INIT(= FALSE);$/;"	v
kmap_T	vim/vim/src/digraph.c	/^} kmap_T;$/;"	t	typeref:struct:__anon153	file:
ks_table1	vim/vim/src/hangulin.c	/^static const char_u ks_table1[][3] =$/;"	v	file:
ks_table2	vim/vim/src/hangulin.c	/^static const unsigned short ks_table2[][4] =$/;"	v	file:
ksmd_str	vim/vim/src/term.c	/^static char ksmd_str[20];$/;"	v	file:
ksme_str	vim/vim/src/term.c	/^static char ksme_str[20];$/;"	v	file:
ksmr_str	vim/vim/src/term.c	/^static char ksmr_str[20];$/;"	v	file:
l	vim/vim/src/hangulin.c	/^static int f=F_NULL, m=M_NULL, l=L_NULL;$/;"	v	file:
lParam	vim/vim/src/gui_w32.c	/^	LPARAM lParam;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
lParam	vim/vim/src/gui_w32.c	/^    LPARAM	lParam;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
lParam	vim/vim/src/gui_w32.c	/^    LPARAM	lParam;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
lParam	vim/vim/src/gui_w32.c	/^    LPARAM     lParam;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
l_avars	vim/vim/src/structs.h	/^    dict_T	l_avars;	\/* a: argument variables *\/$/;"	m	struct:funccall_S	access:public
l_avars_var	vim/vim/src/structs.h	/^    dictitem_T	l_avars_var;	\/* variable for a: scope *\/$/;"	m	struct:funccall_S	access:public
l_listitems	vim/vim/src/structs.h	/^    listitem_T	l_listitems[MAX_FUNC_ARGS];	\/* listitems for a:000 *\/$/;"	m	struct:funccall_S	access:public
l_varlist	vim/vim/src/structs.h	/^    list_T	l_varlist;	\/* list for a:000 *\/$/;"	m	struct:funccall_S	access:public
l_vars	vim/vim/src/structs.h	/^    dict_T	l_vars;		\/* l: local function variables *\/$/;"	m	struct:funccall_S	access:public
l_vars_var	vim/vim/src/structs.h	/^    dictitem_T	l_vars_var;	\/* variable for l: scope *\/$/;"	m	struct:funccall_S	access:public
label	vim/vim/src/gui_xmebwp.h	/^    XmLabelPart label;$/;"	m	struct:_XmEnhancedButtonRec	access:public
label	vim/vim/src/structs.h	/^    GtkWidget   *label;		    \/* Used by "set wak=" code. *\/$/;"	m	struct:VimMenu	access:public
label_class	vim/vim/src/gui_xmebwp.h	/^    XmLabelClassPart label_class;$/;"	m	struct:__anon4	access:public
label_expose	vim/vim/src/gui_motif.c	/^label_expose(Widget _w, XEvent *_event, Region _region)$/;"	f	file:	signature:(Widget _w, XEvent *_event, Region _region)
label_expose	vim/vim/src/gui_motif.c	/^static void label_expose(Widget _w, XEvent *_event, Region _region);$/;"	p	file:	signature:(Widget _w, XEvent *_event, Region _region)
label_location	vim/vim/src/gui_xmebwp.h	/^    int label_location;$/;"	m	struct:_XmEnhancedButtonPart	access:public
lalloc	vim/vim/src/misc2.c	/^lalloc(long_u size, int message)$/;"	f	signature:(long_u size, int message)
lalloc_clear	vim/vim/src/misc2.c	/^lalloc_clear(long_u size, int message)$/;"	f	signature:(long_u size, int message)
lalloc_id	vim/vim/src/misc2.c	/^lalloc_id(long_u size, int message, alloc_id_T id UNUSED)$/;"	f	signature:(long_u size, int message, alloc_id_T id UNUSED)
langmap_adjust_mb	vim/vim/src/option.c	/^langmap_adjust_mb(int c)$/;"	f	signature:(int c)
langmap_entry_T	vim/vim/src/option.c	/^} langmap_entry_T;$/;"	t	typeref:struct:__anon160	file:
langmap_init	vim/vim/src/option.c	/^langmap_init(void)$/;"	f	file:	signature:(void)
langmap_init	vim/vim/src/option.c	/^static void langmap_init(void);$/;"	p	file:	signature:(void)
langmap_mapchar	vim/vim/src/globals.h	/^EXTERN char_u	langmap_mapchar[256];	\/* mapping for language keys *\/$/;"	v
langmap_mapga	vim/vim/src/option.c	/^static garray_T langmap_mapga;$/;"	v	file:
langmap_set	vim/vim/src/option.c	/^langmap_set(void)$/;"	f	file:	signature:(void)
langmap_set	vim/vim/src/option.c	/^static void langmap_set(void);$/;"	p	file:	signature:(void)
langmap_set_entry	vim/vim/src/option.c	/^langmap_set_entry(int from, int to)$/;"	f	file:	signature:(int from, int to)
langmap_set_entry	vim/vim/src/option.c	/^static void langmap_set_entry(int from, int to);$/;"	p	file:	signature:(int from, int to)
langp_S	vim/vim/src/spell.h	/^typedef struct langp_S$/;"	s
langp_S::lp_region	vim/vim/src/spell.h	/^    int		lp_region;	\/* bitmask for region or REGION_ALL *\/$/;"	m	struct:langp_S	access:public
langp_S::lp_replang	vim/vim/src/spell.h	/^    slang_T	*lp_replang;	\/* language used for REP items or NULL *\/$/;"	m	struct:langp_S	access:public
langp_S::lp_sallang	vim/vim/src/spell.h	/^    slang_T	*lp_sallang;	\/* language used for sound folding or NULL *\/$/;"	m	struct:langp_S	access:public
langp_S::lp_slang	vim/vim/src/spell.h	/^    slang_T	*lp_slang;	\/* info for this language *\/$/;"	m	struct:langp_S	access:public
langp_T	vim/vim/src/spell.h	/^} langp_T;$/;"	t	typeref:struct:langp_S
last	vim/vim/src/fileio.c	/^    char	    last;		\/* last command in list *\/$/;"	m	struct:AutoCmd	file:	access:public
last	vim/vim/src/fileio.c	/^    char	    last;		\/* last pattern for apply_autocmds() *\/$/;"	m	struct:AutoPat	file:	access:public
last	vim/vim/src/libvterm/src/unicode.c	/^  int last;$/;"	m	struct:interval	file:	access:public
last	vim/vim/src/mbyte.c	/^    long last;$/;"	m	struct:interval	file:	access:public
lastMouseTick	vim/vim/src/gui_mac.c	/^static long lastMouseTick = 0;$/;"	v	file:
last_breakp	vim/vim/src/ex_cmds2.c	/^static int last_breakp = 0;	\/* nr of last defined breakpoint *\/$/;"	v	file:
last_changedtick	vim/vim/src/globals.h	/^EXTERN varnumber_T last_changedtick INIT(= 0);   \/* for TextChanged event *\/$/;"	v
last_changedtick_buf	vim/vim/src/globals.h	/^EXTERN buf_T	*last_changedtick_buf INIT(= NULL);$/;"	v
last_cmdline	vim/vim/src/globals.h	/^EXTERN char_u	*last_cmdline INIT(= NULL); \/* last command line (for ":) *\/$/;"	v
last_csearch	vim/vim/src/search.c	/^last_csearch(void)$/;"	f	signature:(void)
last_csearch_forward	vim/vim/src/search.c	/^last_csearch_forward(void)$/;"	f	signature:(void)
last_csearch_until	vim/vim/src/search.c	/^last_csearch_until(void)$/;"	f	signature:(void)
last_cursormoved	vim/vim/src/globals.h	/^EXTERN pos_T	last_cursormoved	      \/* for CursorMoved event *\/$/;"	v
last_event	vim/vim/src/fileio.c	/^static event_T	last_event;$/;"	v	file:
last_group	vim/vim/src/fileio.c	/^static int	last_group;$/;"	v	file:
last_idx	vim/vim/src/search.c	/^static int last_idx = 0;	\/* index in spats[] for RE_LAST *\/$/;"	v	file:
last_insert	vim/vim/src/edit.c	/^static char_u	*last_insert = NULL;	\/* the text of the previous insert,$/;"	v	file:
last_insert_skip	vim/vim/src/edit.c	/^static int	last_insert_skip; \/* nr of chars in front of previous insert *\/$/;"	v	file:
last_l	vim/vim/src/hangulin.c	/^static int last_l = -1, last_ll = -1;$/;"	v	file:
last_ll	vim/vim/src/hangulin.c	/^static int last_l = -1, last_ll = -1;$/;"	v	file:
last_maptick	vim/vim/src/ex_getln.c	/^static int	last_maptick = -1;	\/* last seen maptick *\/$/;"	v	file:
last_matchgroup	vim/vim/src/syntax.c	/^static int  last_matchgroup;$/;"	v	file:
last_mouse_event	vim/vim/src/gui_x11.c	/^static XButtonPressedEvent last_mouse_event;$/;"	v	file:
last_msg_hist	vim/vim/src/message.c	/^static struct msg_hist *last_msg_hist = NULL;$/;"	v	typeref:struct:msg_hist	file:
last_msgchunk	vim/vim/src/message.c	/^static msgchunk_T *last_msgchunk = NULL; \/* last displayed text *\/$/;"	v	file:
last_pat_prog	vim/vim/src/search.c	/^last_pat_prog(regmmatch_T *regmatch)$/;"	f	signature:(regmmatch_T *regmatch)
last_recorded_len	vim/vim/src/getchar.c	/^static int	last_recorded_len = 0;	\/* number of last recorded chars *\/$/;"	v	file:
last_search_pat	vim/vim/src/search.c	/^last_search_pat(void)$/;"	f	signature:(void)
last_set_msg	vim/vim/src/eval.c	/^last_set_msg(scid_T scriptID)$/;"	f	signature:(scid_T scriptID)
last_shape	vim/vim/src/gui_gtk_x11.c	/^static int last_shape = 0;$/;"	v	file:
last_shape	vim/vim/src/gui_photon.c	/^static int last_shape = 0;$/;"	v	file:
last_shape	vim/vim/src/gui_x11.c	/^static int last_shape = 0;$/;"	v	file:
last_sourcing_lnum	vim/vim/src/message.c	/^static int	last_sourcing_lnum = 0;$/;"	v	file:
last_sourcing_name	vim/vim/src/message.c	/^static char_u   *last_sourcing_name = NULL;$/;"	v	file:
last_status	vim/vim/src/window.c	/^last_status($/;"	f	signature:( int morewin)
last_status_rec	vim/vim/src/window.c	/^last_status_rec(frame_T *fr, int statusline)$/;"	f	file:	signature:(frame_T *fr, int statusline)
last_status_rec	vim/vim/src/window.c	/^static void last_status_rec(frame_T *fr, int statusline);$/;"	p	file:	signature:(frame_T *fr, int statusline)
last_t_cmd	vim/vim/src/search.c	/^static int last_t_cmd = TRUE;		\/* last search t_cmd *\/$/;"	v	file:
last_timer_id	vim/vim/src/ex_cmds2.c	/^static long	last_timer_id = 0;$/;"	v	file:
last_win_id	vim/vim/src/window.c	/^static int last_win_id = LOWEST_WIN_ID - 1;$/;"	v	file:
last_window	vim/vim/src/window.c	/^last_window(void)$/;"	f	file:	signature:(void)
last_window	vim/vim/src/window.c	/^static int last_window(void);$/;"	p	file:	signature:(void)
lastbuf	vim/vim/src/globals.h	/^EXTERN buf_T	*lastbuf INIT(= NULL);	\/* last buffer *\/$/;"	v
lastc	vim/vim/src/search.c	/^static char_u lastc[2] = {NUL, NUL};	\/* last character searched for *\/$/;"	v	file:
lastc_bytelen	vim/vim/src/search.c	/^static int	lastc_bytelen = 1;	\/* >1 for multi-byte char *\/$/;"	v	file:
lastc_bytes	vim/vim/src/search.c	/^static char_u	lastc_bytes[MB_MAXBYTES + 1];$/;"	v	file:
lastcdir	vim/vim/src/search.c	/^static int lastcdir = FORWARD;		\/* last direction of character search *\/$/;"	v	file:
lastdict	vim/vim/src/if_py_both.h	/^static pylinkedlist_T *lastdict = NULL;$/;"	v
lastfunc	vim/vim/src/if_py_both.h	/^static pylinkedlist_T *lastfunc = NULL;$/;"	v
lasticon	vim/vim/src/buffer.c	/^static char_u *lasticon = NULL;$/;"	v	file:
lastlist	vim/vim/src/if_py_both.h	/^static pylinkedlist_T *lastlist = NULL;$/;"	v
lastlist	vim/vim/src/regexp.h	/^    int			lastlist[2]; \/* 0: normal, 1: recursive *\/$/;"	m	struct:nfa_state	access:public
lastmark	vim/vim/src/undo.c	/^static int	lastmark = 0;$/;"	v	file:
lastoption	vim/vim/src/if_py_both.h	/^    void	*lastoption;$/;"	m	struct:__anon106	access:public
lasttitle	vim/vim/src/buffer.c	/^static char_u *lasttitle = NULL;$/;"	v	file:
lastwin	vim/vim/src/globals.h	/^EXTERN win_T	*lastwin;		\/* last window *\/$/;"	v
lastwin	vim/vim/src/globals.h	568;"	d
latin1flags	vim/vim/src/charset.c	/^static char_u latin1flags[257] = "                                                                 UUUUUUUUUUUUUUUUUUUUUUUUUU      llllllllllllllllllllllllll                                                                     UUUUUUUUUUUUUUUUUUUUUUU UUUUUUUllllllllllllllllllllllll llllllll";$/;"	v	file:
latin1lower	vim/vim/src/charset.c	/^static char_u latin1lower[257] = "                                 !\\"#$%&'()*+,-.\/0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xd7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff";$/;"	v	file:
latin1upper	vim/vim/src/charset.c	/^static char_u latin1upper[257] = "                                 !\\"#$%&'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xf7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xff";$/;"	v	file:
latin9_to_ucs	vim/vim/src/gui_w32.c	/^latin9_to_ucs(char_u *text, int len, WCHAR *unicodebuf)$/;"	f	file:	signature:(char_u *text, int len, WCHAR *unicodebuf)
latin_char2bytes	vim/vim/src/mbyte.c	/^latin_char2bytes(int c, char_u *buf)$/;"	f	signature:(int c, char_u *buf)
latin_char2cells	vim/vim/src/mbyte.c	/^latin_char2cells(int c UNUSED)$/;"	f	signature:(int c UNUSED)
latin_char2len	vim/vim/src/mbyte.c	/^latin_char2len(int c UNUSED)$/;"	f	signature:(int c UNUSED)
latin_head_off	vim/vim/src/mbyte.c	/^latin_head_off(char_u *base UNUSED, char_u *p UNUSED)$/;"	f	signature:(char_u *base UNUSED, char_u *p UNUSED)
latin_off2cells	vim/vim/src/mbyte.c	/^latin_off2cells(unsigned off UNUSED, unsigned max_off UNUSED)$/;"	f	signature:(unsigned off UNUSED, unsigned max_off UNUSED)
latin_ptr2cells	vim/vim/src/mbyte.c	/^latin_ptr2cells(char_u *p UNUSED)$/;"	f	signature:(char_u *p UNUSED)
latin_ptr2cells_len	vim/vim/src/mbyte.c	/^latin_ptr2cells_len(char_u *p UNUSED, int size UNUSED)$/;"	f	signature:(char_u *p UNUSED, int size UNUSED)
latin_ptr2char	vim/vim/src/mbyte.c	/^latin_ptr2char(char_u *p)$/;"	f	signature:(char_u *p)
latin_ptr2len	vim/vim/src/mbyte.c	/^latin_ptr2len(char_u *p)$/;"	f	signature:(char_u *p)
latin_ptr2len_len	vim/vim/src/mbyte.c	/^latin_ptr2len_len(char_u *p, int size)$/;"	f	signature:(char_u *p, int size)
lbase	vim/vim/src/if_tcl.c	/^    int lbase;$/;"	m	struct:__anon140	file:	access:public
lbr_chartabsize	vim/vim/src/charset.c	/^lbr_chartabsize($/;"	f	signature:( char_u *line UNUSED, unsigned char *s, colnr_T col)
lbr_chartabsize_adv	vim/vim/src/charset.c	/^lbr_chartabsize_adv($/;"	f	signature:( char_u *line, char_u **s, colnr_T col)
lc_active	vim/vim/src/globals.h	/^EXTERN volatile int lc_active INIT(= FALSE); \/* TRUE when lc_jump_env is valid. *\/$/;"	v
lc_jump_env	vim/vim/src/globals.h	/^EXTERN JMP_BUF lc_jump_env;	\/* argument to SETJMP() *\/$/;"	v
lc_signal	vim/vim/src/globals.h	/^EXTERN volatile int lc_signal;	\/* caught signal number, 0 when no was signal$/;"	v
lcon	vim/vim/src/hangulin.c	/^lcon(int c)$/;"	f	file:	signature:(int c)
lcs_conceal	vim/vim/src/globals.h	/^EXTERN int	lcs_conceal INIT(= ' ');$/;"	v
lcs_eol	vim/vim/src/globals.h	/^EXTERN int	lcs_eol INIT(= '$');$/;"	v
lcs_ext	vim/vim/src/globals.h	/^EXTERN int	lcs_ext INIT(= NUL);$/;"	v
lcs_nbsp	vim/vim/src/globals.h	/^EXTERN int	lcs_nbsp INIT(= NUL);$/;"	v
lcs_prec	vim/vim/src/globals.h	/^EXTERN int	lcs_prec INIT(= NUL);$/;"	v
lcs_space	vim/vim/src/globals.h	/^EXTERN int	lcs_space INIT(= NUL);$/;"	v
lcs_tab1	vim/vim/src/globals.h	/^EXTERN int	lcs_tab1 INIT(= NUL);$/;"	v
lcs_tab2	vim/vim/src/globals.h	/^EXTERN int	lcs_tab2 INIT(= NUL);$/;"	v
lcs_trail	vim/vim/src/globals.h	/^EXTERN int	lcs_trail INIT(= NUL);$/;"	v
lead_spaces	vim/vim/src/hardcopy.c	/^    int		lead_spaces;	    \/* remaining spaces for a TAB *\/$/;"	m	struct:__anon212	file:	access:public
leave_cleanup	vim/vim/src/ex_eval.c	/^leave_cleanup(cleanup_T *csp)$/;"	f	signature:(cleanup_T *csp)
leave_notify_event	vim/vim/src/gui_gtk_x11.c	/^leave_notify_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventCrossing *event UNUSED, gpointer data UNUSED)
leave_tabpage	vim/vim/src/window.c	/^leave_tabpage($/;"	f	file:	signature:( buf_T *new_curbuf UNUSED, int trigger_leave_autocmds UNUSED)
leave_tabpage	vim/vim/src/window.c	/^static int leave_tabpage(buf_T *new_curbuf, int trigger_leave_autocmds);$/;"	p	file:	signature:(buf_T *new_curbuf, int trigger_leave_autocmds)
left_sbar_x	vim/vim/src/gui.h	/^    int		left_sbar_x;	    \/* Calculated x coord for left scrollbar *\/$/;"	m	struct:Gui	access:public
leftcol_changed	vim/vim/src/misc2.c	/^leftcol_changed(void)$/;"	f	signature:(void)
leftrightmargin	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int leftrightmargin:1;$/;"	m	struct:VTermState::__anon35	access:public
len	vim/vim/src/hardcopy.c	/^    int		len;$/;"	m	struct:prt_dsc_comment_S	file:	access:public
len	vim/vim/src/hardcopy.c	/^    int		len;$/;"	m	struct:prt_dsc_line_S	file:	access:public
len	vim/vim/src/hardcopy.c	/^    int     len;$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
len	vim/vim/src/if_xcmdsrv.c	/^    long_u		len;$/;"	m	struct:x_cmdqueue	file:	access:public
len	vim/vim/src/regexp_nfa.c	/^    int		    len;	\/* max nr of states in "t" *\/$/;"	m	struct:__anon121	file:	access:public
len	vim/vim/src/structs.h	/^    int		len;	\/* length: 0 - to the end of line *\/$/;"	m	struct:__anon202	access:public
len	vim/vim/src/tag.c	/^    int		len;		\/* length of pat[] *\/$/;"	m	struct:__anon155	file:	access:public
len	vim/vim/src/term.c	/^    int	    len;	    \/* STRLEN(code) *\/$/;"	m	struct:termcode	file:	access:public
lenfunc	vim/vim/src/if_python.c	107;"	d	file:
length	vim/vim/src/gui_at_sb.h	/^    Dimension	  length;	\/* either height or width *\/$/;"	m	struct:__anon84	access:public
length	vim/vim/src/os_vms.c	/^	    char	length;$/;"	m	struct:__anon23::__anon24::__anon25	file:	access:public
level	vim/vim/src/ex_cmds2.c	/^    int		level;		\/* top nesting level of sourced file *\/$/;"	m	struct:source_cookie	file:	access:public
level	vim/vim/src/structs.h	/^    int		level;		\/* top nesting level of executed function *\/$/;"	m	struct:funccall_S	access:public
li_next	vim/vim/src/structs.h	/^    listitem_T	*li_next;	\/* next item in list *\/$/;"	m	struct:listitem_S	access:public
li_prev	vim/vim/src/structs.h	/^    listitem_T	*li_prev;	\/* previous item in list *\/$/;"	m	struct:listitem_S	access:public
li_tv	vim/vim/src/structs.h	/^    typval_T	li_tv;		\/* type and value of the variable *\/$/;"	m	struct:listitem_S	access:public
libcall_common	vim/vim/src/evalfunc.c	/^libcall_common(typval_T *argvars UNUSED, typval_T *rettv, int type)$/;"	f	file:	signature:(typval_T *argvars UNUSED, typval_T *rettv, int type)
libintl_putenv	vim/vim/src/vim.h	599;"	d
libintl_wputenv	vim/vim/src/vim.h	600;"	d
limit_pos	vim/vim/src/syntax.c	/^limit_pos(lpos_T *pos, lpos_T *limit)$/;"	f	file:	signature:(lpos_T *pos, lpos_T *limit)
limit_pos	vim/vim/src/syntax.c	/^static void limit_pos(lpos_T *pos, lpos_T *limit);$/;"	p	file:	signature:(lpos_T *pos, lpos_T *limit)
limit_pos_zero	vim/vim/src/syntax.c	/^limit_pos_zero($/;"	f	file:	signature:( lpos_T *pos, lpos_T *limit)
limit_pos_zero	vim/vim/src/syntax.c	/^static void limit_pos_zero(lpos_T *pos, lpos_T *limit);$/;"	p	file:	signature:(lpos_T *pos, lpos_T *limit)
limit_screen_size	vim/vim/src/term.c	/^limit_screen_size(void)$/;"	f	signature:(void)
limit_thumb	vim/vim/src/gui_at_sb.h	/^    Bool	limit_thumb;	\/* limit thumb to inside scrollbar *\/$/;"	m	struct:__anon84	access:public
limitscore_T	vim/vim/src/spell.c	/^} limitscore_T;$/;"	t	typeref:struct:__anon83	file:
line	vim/vim/runtime/macros/maze/mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
line	vim/vim/src/ex_cmds.c	/^	} line;$/;"	m	union:__anon215::__anon216	typeref:struct:__anon215::__anon216::__anon217	file:	access:public
line	vim/vim/src/ex_docmd.c	/^    char_u	*line;		\/* command line *\/$/;"	m	struct:__anon16	file:	access:public
line	vim/vim/src/regexp_nfa.c	/^	} line[NSUBEXP];$/;"	m	union:__anon116::__anon117	typeref:struct:__anon116::__anon117::linepos	file:	access:public
line	vim/vim/src/search.c	/^    int		line;		\/* search has line offset *\/$/;"	m	struct:soffset	file:	access:public
line1	vim/vim/src/ex_cmds.h	/^    linenr_T	line1;		\/* the first line number *\/$/;"	m	struct:exarg	access:public
line1	vim/vim/src/spellfile.c	/^static char line1[PRINTLINESIZE];$/;"	v	file:
line2	vim/vim/src/ex_cmds.h	/^    linenr_T	line2;		\/* the second line number or count *\/$/;"	m	struct:exarg	access:public
line2	vim/vim/src/spellfile.c	/^static char line2[PRINTLINESIZE];$/;"	v	file:
line3	vim/vim/src/spellfile.c	/^static char line3[PRINTLINESIZE];$/;"	v	file:
lineFolded	vim/vim/src/fold.c	/^lineFolded(win_T *win, linenr_T lnum)$/;"	f	signature:(win_T *win, linenr_T lnum)
lineNum	vim/vim/src/gui_mac.c	/^    short lineNum; \/\/ line to select (<0 to specify range)$/;"	m	struct:SelectionRange	file:	access:public
line_breakcheck	vim/vim/src/misc1.c	/^line_breakcheck(void)$/;"	f	signature:(void)
line_count	vim/vim/src/structs.h	/^    long	line_count;	\/* number of lines from op_start to op_end$/;"	m	struct:oparg_S	access:public
line_count_info	vim/vim/src/ops.c	/^line_count_info($/;"	f	file:	signature:( char_u *line, varnumber_T *wc, varnumber_T *cc, varnumber_T limit, int eol_size)
line_count_info	vim/vim/src/ops.c	/^static varnumber_T line_count_info(char_u *line, varnumber_T *wc, varnumber_T *cc, varnumber_T limit, int eol_size);$/;"	p	file:	signature:(char_u *line, varnumber_T *wc, varnumber_T *cc, varnumber_T limit, int eol_size)
line_end	vim/vim/src/hardcopy.c	/^    int     line_end;$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
line_in_range	vim/vim/src/if_mzsch.c	/^line_in_range(linenr_T lnum, buf_T *buf)$/;"	f	file:	signature:(linenr_T lnum, buf_T *buf)
line_in_range	vim/vim/src/if_mzsch.c	/^static int line_in_range(linenr_T, buf_T *);$/;"	p	file:	signature:(linenr_T, buf_T *)
line_s_current	vim/vim/src/if_ruby.c	/^static VALUE line_s_current(void)$/;"	f	file:	signature:(void)
line_start	vim/vim/src/hardcopy.c	/^    int     line_start;$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
linebuf	vim/vim/src/quickfix.c	/^    char_u	*linebuf;$/;"	m	struct:__anon13	file:	access:public
lineclear	vim/vim/src/screen.c	/^lineclear(unsigned off, int width)$/;"	f	file:	signature:(unsigned off, int width)
lineclear	vim/vim/src/screen.c	/^static void lineclear(unsigned off, int width);$/;"	p	file:	signature:(unsigned off, int width)
linecopy	vim/vim/src/screen.c	/^linecopy(int to, int from, win_T *wp)$/;"	f	file:	signature:(int to, int from, win_T *wp)
linecopy	vim/vim/src/screen.c	/^static void linecopy(int to, int from, win_T *wp);$/;"	p	file:	signature:(int to, int from, win_T *wp)
linefeed	vim/vim/src/libvterm/src/state.c	/^static void linefeed(VTermState *state)$/;"	f	file:	signature:(VTermState *state)
lineinfo	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermLineInfo *lineinfo;$/;"	m	struct:VTermState	access:public
lineinvalid	vim/vim/src/screen.c	/^lineinvalid(unsigned off, int width)$/;"	f	file:	signature:(unsigned off, int width)
lineinvalid	vim/vim/src/screen.c	/^static void lineinvalid(unsigned off, int width);$/;"	p	file:	signature:(unsigned off, int width)
linelen	vim/vim/src/ex_cmds.c	/^linelen(int *has_tab)$/;"	f	file:	signature:(int *has_tab)
linelen	vim/vim/src/ex_cmds.c	/^static int linelen(int *has_tab);$/;"	p	file:	signature:(int *has_tab)
linelen	vim/vim/src/quickfix.c	/^    int		linelen;$/;"	m	struct:__anon13	file:	access:public
linenr	vim/vim/src/structs.h	/^    int		linenr;		\/* next line to be executed *\/$/;"	m	struct:funccall_S	access:public
linenr_T	vim/vim/src/structs.h	/^typedef long		linenr_T;$/;"	t
linenr_T	vim/vim/src/vim.h	/^typedef long	linenr_T;		\/* line number type *\/$/;"	t
lineoff_T	vim/vim/src/move.c	/^} lineoff_T;$/;"	t	typeref:struct:__anon151	file:
linepos	vim/vim/src/regexp_nfa.c	/^	struct linepos$/;"	s	union:__anon116::__anon117	file:	access:public
lines	vim/vim/src/xpm/include/xpm.h	/^    char **lines;		\/* pointer to the extension array of strings *\/$/;"	m	struct:__anon89	access:public
lines_gap	vim/vim/src/ex_docmd.c	/^    garray_T	*lines_gap;		\/* growarray with line info *\/$/;"	m	struct:loop_cookie	file:	access:public
lines_left	vim/vim/src/globals.h	/^EXTERN int	lines_left INIT(= -1);	    \/* lines left for listing *\/$/;"	v
lines_per_page	vim/vim/src/structs.h	/^    int		lines_per_page;$/;"	m	struct:__anon206	access:public
linetabsize	vim/vim/src/charset.c	/^linetabsize(char_u *s)$/;"	f	signature:(char_u *s)
linetabsize_col	vim/vim/src/charset.c	/^linetabsize_col(int startcol, char_u *s)$/;"	f	signature:(int startcol, char_u *s)
linewhite	vim/vim/src/search.c	/^linewhite(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
lisp_match	vim/vim/src/misc1.c	/^lisp_match(char_u *p)$/;"	f	file:	signature:(char_u *p)
lisp_match	vim/vim/src/misc1.c	/^static int lisp_match(char_u *p);$/;"	p	file:	signature:(char_u *p)
list	vim/vim/src/gui_xmdlg.c	/^    Widget	list[NONE];$/;"	m	struct:_SharedFontSelData	file:	access:public
list	vim/vim/src/if_py_both.h	/^    list_T	*list;$/;"	m	struct:__anon102	access:public
list	vim/vim/src/if_py_both.h	/^    list_T	*list;$/;"	m	struct:__anon103	access:public
list	vim/vim/src/regexp_nfa.c	/^    } list;$/;"	m	struct:__anon116	typeref:union:__anon116::__anon117	file:	access:public
list	vim/vim/src/structs.h	/^    list_T		*list;$/;"	m	struct:list_stack_S	access:public
list1	vim/vim/src/regexp_nfa.c	/^list1($/;"	f	file:	signature:( nfa_state_T **outp)
list1	vim/vim/src/regexp_nfa.c	/^static Ptrlist *list1(nfa_state_T **outp);$/;"	p	file:	signature:(nfa_state_T **outp)
list2fpos	vim/vim/src/eval.c	/^list2fpos($/;"	f	signature:( typval_T *arg, pos_T *posp, int *fnump, colnr_T *curswantp)
list2proftime	vim/vim/src/evalfunc.c	/^list2proftime(typval_T *arg, proftime_T *tm)$/;"	f	file:	signature:(typval_T *arg, proftime_T *tm)
list2proftime	vim/vim/src/evalfunc.c	/^static int list2proftime(typval_T *arg, proftime_T *tm);$/;"	p	file:	signature:(typval_T *arg, proftime_T *tm)
list2string	vim/vim/src/list.c	/^list2string(typval_T *tv, int copyID, int restore_copyID)$/;"	f	signature:(typval_T *tv, int copyID, int restore_copyID)
list_T	vim/vim/src/structs.h	/^typedef struct listvar_S list_T;$/;"	t	typeref:struct:listvar_S
list_add_watch	vim/vim/src/list.c	/^list_add_watch(list_T *l, listwatch_T *lw)$/;"	f	signature:(list_T *l, listwatch_T *lw)
list_alloc	vim/vim/src/list.c	/^list_alloc(void)$/;"	f	signature:(void)
list_append	vim/vim/src/list.c	/^list_append(list_T *l, listitem_T *item)$/;"	f	signature:(list_T *l, listitem_T *item)
list_append_dict	vim/vim/src/list.c	/^list_append_dict(list_T *list, dict_T *dict)$/;"	f	signature:(list_T *list, dict_T *dict)
list_append_number	vim/vim/src/list.c	/^list_append_number(list_T *l, varnumber_T n)$/;"	f	signature:(list_T *l, varnumber_T n)
list_append_string	vim/vim/src/list.c	/^list_append_string(list_T *l, char_u *str, int len)$/;"	f	signature:(list_T *l, char_u *str, int len)
list_append_tv	vim/vim/src/list.c	/^list_append_tv(list_T *l, typval_T *tv)$/;"	f	signature:(list_T *l, typval_T *tv)
list_arg_vars	vim/vim/src/eval.c	/^list_arg_vars(exarg_T *eap, char_u *arg, int *first)$/;"	f	file:	signature:(exarg_T *eap, char_u *arg, int *first)
list_arg_vars	vim/vim/src/eval.c	/^static char_u *list_arg_vars(exarg_T *eap, char_u *arg, int *first);$/;"	p	file:	signature:(exarg_T *eap, char_u *arg, int *first)
list_buf_vars	vim/vim/src/eval.c	/^list_buf_vars(int *first)$/;"	f	file:	signature:(int *first)
list_buf_vars	vim/vim/src/eval.c	/^static void list_buf_vars(int *first);$/;"	p	file:	signature:(int *first)
list_concat	vim/vim/src/list.c	/^list_concat(list_T *l1, list_T *l2, typval_T *tv)$/;"	f	signature:(list_T *l1, list_T *l2, typval_T *tv)
list_copy	vim/vim/src/list.c	/^list_copy(list_T *orig, int deep, int copyID)$/;"	f	signature:(list_T *orig, int deep, int copyID)
list_equal	vim/vim/src/list.c	/^list_equal($/;"	f	signature:( list_T *l1, list_T *l2, int ic, int recursive)
list_extend	vim/vim/src/list.c	/^list_extend(list_T *l1, list_T *l2, listitem_T *bef)$/;"	f	signature:(list_T *l1, list_T *l2, listitem_T *bef)
list_features	vim/vim/src/version.c	/^list_features(void)$/;"	f	file:	signature:(void)
list_features	vim/vim/src/version.c	/^static void list_features(void);$/;"	p	file:	signature:(void)
list_find	vim/vim/src/list.c	/^list_find(list_T *l, long n)$/;"	f	signature:(list_T *l, long n)
list_find_nr	vim/vim/src/list.c	/^list_find_nr($/;"	f	signature:( list_T *l, long idx, int *errorp)
list_find_str	vim/vim/src/list.c	/^list_find_str(list_T *l, long idx)$/;"	f	signature:(list_T *l, long idx)
list_fix_watch	vim/vim/src/list.c	/^list_fix_watch(list_T *l, listitem_T *item)$/;"	f	signature:(list_T *l, listitem_T *item)
list_free	vim/vim/src/list.c	/^list_free(list_T *l)$/;"	f	signature:(list_T *l)
list_free_contents	vim/vim/src/list.c	/^list_free_contents(list_T *l)$/;"	f	file:	signature:(list_T *l)
list_free_items	vim/vim/src/list.c	/^list_free_items(int copyID)$/;"	f	signature:(int copyID)
list_free_list	vim/vim/src/list.c	/^list_free_list(list_T  *l)$/;"	f	file:	signature:(list_T *l)
list_free_nonref	vim/vim/src/list.c	/^list_free_nonref(int copyID)$/;"	f	signature:(int copyID)
list_func_head	vim/vim/src/userfunc.c	/^list_func_head(ufunc_T *fp, int indent)$/;"	f	file:	signature:(ufunc_T *fp, int indent)
list_func_vars	vim/vim/src/userfunc.c	/^list_func_vars(int *first)$/;"	f	signature:(int *first)
list_glob_vars	vim/vim/src/eval.c	/^list_glob_vars(int *first)$/;"	f	file:	signature:(int *first)
list_glob_vars	vim/vim/src/eval.c	/^static void list_glob_vars(int *first);$/;"	p	file:	signature:(int *first)
list_hashtable_vars	vim/vim/src/eval.c	/^list_hashtable_vars($/;"	f	signature:( hashtab_T *ht, char_u *prefix, int empty, int *first)
list_idx_of_item	vim/vim/src/list.c	/^list_idx_of_item(list_T *l, listitem_T *item)$/;"	f	signature:(list_T *l, listitem_T *item)
list_insert	vim/vim/src/list.c	/^list_insert(list_T *l, listitem_T *ni, listitem_T *item)$/;"	f	signature:(list_T *l, listitem_T *ni, listitem_T *item)
list_insert_tv	vim/vim/src/list.c	/^list_insert_tv(list_T *l, typval_T *tv, listitem_T *item)$/;"	f	signature:(list_T *l, typval_T *tv, listitem_T *item)
list_join	vim/vim/src/list.c	/^list_join($/;"	f	signature:( garray_T *gap, list_T *l, char_u *sep, int echo_style, int restore_copyID, int copyID)
list_join_inner	vim/vim/src/list.c	/^list_join_inner($/;"	f	file:	signature:( garray_T *gap, list_T *l, char_u *sep, int echo_style, int restore_copyID, int copyID, garray_T *join_gap)
list_len	vim/vim/src/list.c	/^list_len(list_T *l)$/;"	f	signature:(list_T *l)
list_one_var	vim/vim/src/eval.c	/^list_one_var(dictitem_T *v, char_u *prefix, int *first)$/;"	f	file:	signature:(dictitem_T *v, char_u *prefix, int *first)
list_one_var	vim/vim/src/eval.c	/^static void list_one_var(dictitem_T *v, char_u *prefix, int *first);$/;"	p	file:	signature:(dictitem_T *v, char_u *prefix, int *first)
list_one_var_a	vim/vim/src/eval.c	/^list_one_var_a($/;"	f	file:	signature:( char_u *prefix, char_u *name, int type, char_u *string, int *first)
list_one_var_a	vim/vim/src/eval.c	/^static void list_one_var_a(char_u *prefix, char_u *name, int type, char_u *string, int *first);$/;"	p	file:	signature:(char_u *prefix, char_u *name, int type, char_u *string, int *first)
list_py_concat	vim/vim/src/if_py_both.h	/^list_py_concat(list_T *l, PyObject *obj, PyObject *lookup_dict)$/;"	f	signature:(list_T *l, PyObject *obj, PyObject *lookup_dict)
list_rem_watch	vim/vim/src/list.c	/^list_rem_watch(list_T *l, listwatch_T *lwrem)$/;"	f	signature:(list_T *l, listwatch_T *lwrem)
list_restore	vim/vim/src/if_py_both.h	/^list_restore(Py_ssize_t numadded, Py_ssize_t numreplaced, Py_ssize_t slicelen,$/;"	f	signature:(Py_ssize_t numadded, Py_ssize_t numreplaced, Py_ssize_t slicelen, list_T *l, listitem_T **lis, listitem_T *lastaddedli)
list_script_vars	vim/vim/src/eval.c	/^list_script_vars(int *first)$/;"	f	file:	signature:(int *first)
list_script_vars	vim/vim/src/eval.c	/^static void list_script_vars(int *first);$/;"	p	file:	signature:(int *first)
list_stack_S	vim/vim/src/structs.h	/^typedef struct list_stack_S$/;"	s
list_stack_S::list	vim/vim/src/structs.h	/^    list_T		*list;$/;"	m	struct:list_stack_S	access:public
list_stack_S::prev	vim/vim/src/structs.h	/^    struct list_stack_S	*prev;$/;"	m	struct:list_stack_S	typeref:struct:list_stack_S::list_stack_S	access:public
list_stack_T	vim/vim/src/structs.h	/^} list_stack_T;$/;"	t	typeref:struct:list_stack_S
list_tab_vars	vim/vim/src/eval.c	/^list_tab_vars(int *first)$/;"	f	file:	signature:(int *first)
list_tab_vars	vim/vim/src/eval.c	/^static void list_tab_vars(int *first);$/;"	p	file:	signature:(int *first)
list_unref	vim/vim/src/list.c	/^list_unref(list_T *l)$/;"	f	signature:(list_T *l)
list_version	vim/vim/src/version.c	/^list_version(void)$/;"	f	signature:(void)
list_vim_vars	vim/vim/src/eval.c	/^list_vim_vars(int *first)$/;"	f	file:	signature:(int *first)
list_vim_vars	vim/vim/src/eval.c	/^static void list_vim_vars(int *first);$/;"	p	file:	signature:(int *first)
list_win_vars	vim/vim/src/eval.c	/^list_win_vars(int *first)$/;"	f	file:	signature:(int *first)
list_win_vars	vim/vim/src/eval.c	/^static void list_win_vars(int *first);$/;"	p	file:	signature:(int *first)
listcmd_busy	vim/vim/src/globals.h	/^EXTERN int	listcmd_busy INIT(= FALSE); \/* set when :argdo, :windo or$/;"	v
listdigraphs	vim/vim/src/digraph.c	/^listdigraphs(void)$/;"	f	signature:(void)
listitem_S	vim/vim/src/structs.h	/^struct listitem_S$/;"	s
listitem_S::li_next	vim/vim/src/structs.h	/^    listitem_T	*li_next;	\/* next item in list *\/$/;"	m	struct:listitem_S	access:public
listitem_S::li_prev	vim/vim/src/structs.h	/^    listitem_T	*li_prev;	\/* previous item in list *\/$/;"	m	struct:listitem_S	access:public
listitem_S::li_tv	vim/vim/src/structs.h	/^    typval_T	li_tv;		\/* type and value of the variable *\/$/;"	m	struct:listitem_S	access:public
listitem_T	vim/vim/src/structs.h	/^typedef struct listitem_S listitem_T;$/;"	t	typeref:struct:listitem_S
listitem_alloc	vim/vim/src/list.c	/^listitem_alloc(void)$/;"	f	signature:(void)
listitem_free	vim/vim/src/list.c	/^listitem_free(listitem_T *item)$/;"	f	signature:(listitem_T *item)
listitem_remove	vim/vim/src/list.c	/^listitem_remove(list_T *l, listitem_T *item)$/;"	f	signature:(list_T *l, listitem_T *item)
listiterinfo_T	vim/vim/src/if_py_both.h	/^} listiterinfo_T;$/;"	t	typeref:struct:__anon103
listvar_S	vim/vim/src/structs.h	/^struct listvar_S$/;"	s
listvar_S::lv_copyID	vim/vim/src/structs.h	/^    int		lv_copyID;	\/* ID used by deepcopy() *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_copylist	vim/vim/src/structs.h	/^    list_T	*lv_copylist;	\/* copied list used by deepcopy() *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_first	vim/vim/src/structs.h	/^    listitem_T	*lv_first;	\/* first item, NULL if none *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_idx	vim/vim/src/structs.h	/^    int		lv_idx;		\/* cached index of an item *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_idx_item	vim/vim/src/structs.h	/^    listitem_T	*lv_idx_item;	\/* when not NULL item at index "lv_idx" *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_last	vim/vim/src/structs.h	/^    listitem_T	*lv_last;	\/* last item, NULL if none *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_len	vim/vim/src/structs.h	/^    int		lv_len;		\/* number of items *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_lock	vim/vim/src/structs.h	/^    char	lv_lock;	\/* zero, VAR_LOCKED, VAR_FIXED *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_refcount	vim/vim/src/structs.h	/^    int		lv_refcount;	\/* reference count *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_used_next	vim/vim/src/structs.h	/^    list_T	*lv_used_next;	\/* next list in used lists list *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_used_prev	vim/vim/src/structs.h	/^    list_T	*lv_used_prev;	\/* previous list in used lists list *\/$/;"	m	struct:listvar_S	access:public
listvar_S::lv_watch	vim/vim/src/structs.h	/^    listwatch_T	*lv_watch;	\/* first watcher, NULL if none *\/$/;"	m	struct:listvar_S	access:public
listwatch_S	vim/vim/src/structs.h	/^struct listwatch_S$/;"	s
listwatch_S::lw_item	vim/vim/src/structs.h	/^    listitem_T		*lw_item;	\/* item being watched *\/$/;"	m	struct:listwatch_S	access:public
listwatch_S::lw_next	vim/vim/src/structs.h	/^    listwatch_T		*lw_next;	\/* next watcher *\/$/;"	m	struct:listwatch_S	access:public
listwatch_T	vim/vim/src/structs.h	/^typedef struct listwatch_S listwatch_T;$/;"	t	typeref:struct:listwatch_S
literal	vim/vim/src/libvterm/src/keyboard.c	/^  char literal;$/;"	m	struct:__anon31	file:	access:public
literal	vim/vim/src/structs.h	/^    int		literal;		\/* don't expand file names *\/$/;"	m	struct:__anon210	access:public
ll_di	vim/vim/src/structs.h	/^    dictitem_T	*ll_di;		\/* The dictitem or NULL *\/$/;"	m	struct:lval_S	access:public
ll_dict	vim/vim/src/structs.h	/^    dict_T	*ll_dict;	\/* The Dictionary or NULL *\/$/;"	m	struct:lval_S	access:public
ll_empty2	vim/vim/src/structs.h	/^    int		ll_empty2;	\/* Second index is empty: [i:] *\/$/;"	m	struct:lval_S	access:public
ll_exp_name	vim/vim/src/structs.h	/^    char_u	*ll_exp_name;	\/* NULL or expanded name in allocated memory. *\/$/;"	m	struct:lval_S	access:public
ll_free_all	vim/vim/src/quickfix.c	/^ll_free_all(qf_info_T **pqi)$/;"	f	file:	signature:(qf_info_T **pqi)
ll_free_all	vim/vim/src/quickfix.c	/^static void	ll_free_all(qf_info_T **pqi);$/;"	p	file:	signature:(qf_info_T **pqi)
ll_get_or_alloc_list	vim/vim/src/quickfix.c	/^ll_get_or_alloc_list(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
ll_get_or_alloc_list	vim/vim/src/quickfix.c	/^static qf_info_T *ll_get_or_alloc_list(win_T *);$/;"	p	file:	signature:(win_T *)
ll_li	vim/vim/src/structs.h	/^    listitem_T	*ll_li;		\/* The list item or NULL. *\/$/;"	m	struct:lval_S	access:public
ll_list	vim/vim/src/structs.h	/^    list_T	*ll_list;	\/* The list or NULL. *\/$/;"	m	struct:lval_S	access:public
ll_n1	vim/vim/src/structs.h	/^    long	ll_n1;		\/* First index for list *\/$/;"	m	struct:lval_S	access:public
ll_n2	vim/vim/src/structs.h	/^    long	ll_n2;		\/* Second index for list range *\/$/;"	m	struct:lval_S	access:public
ll_name	vim/vim/src/structs.h	/^    char_u	*ll_name;	\/* start of variable name (can be NULL) *\/$/;"	m	struct:lval_S	access:public
ll_new_list	vim/vim/src/quickfix.c	/^ll_new_list(void)$/;"	f	file:	signature:(void)
ll_new_list	vim/vim/src/quickfix.c	/^static qf_info_T *ll_new_list(void);$/;"	p	file:	signature:(void)
ll_newkey	vim/vim/src/structs.h	/^    char_u	*ll_newkey;	\/* New key for Dict in alloc. mem or NULL. *\/$/;"	m	struct:lval_S	access:public
ll_range	vim/vim/src/structs.h	/^    int		ll_range;	\/* TRUE when a [i:j] range was used *\/$/;"	m	struct:lval_S	access:public
ll_tv	vim/vim/src/structs.h	/^    typval_T	*ll_tv;		\/* Typeval of item being used.  If "newkey"$/;"	m	struct:lval_S	access:public
llpos_T	vim/vim/src/structs.h	/^} llpos_T;$/;"	t	typeref:struct:__anon202
lnkname	vim/vim/src/dosinst.h	/^    char	*lnkname;	\/* shortcut file name *\/$/;"	m	struct:__anon142	access:public
lnum	vim/vim/src/ex_cmds.c	/^    linenr_T	lnum;			\/* line number *\/$/;"	m	struct:__anon215	file:	access:public
lnum	vim/vim/src/ex_docmd.c	/^    linenr_T	lnum;		\/* sourcing_lnum of the line *\/$/;"	m	struct:__anon16	file:	access:public
lnum	vim/vim/src/fold.c	/^    linenr_T	lnum;		\/* current line number *\/$/;"	m	struct:__anon95	file:	access:public
lnum	vim/vim/src/move.c	/^    linenr_T	    lnum;	\/* line number *\/$/;"	m	struct:__anon151	file:	access:public
lnum	vim/vim/src/quickfix.c	/^    long	lnum;$/;"	m	struct:__anon14	file:	access:public
lnum	vim/vim/src/search.c	/^    linenr_T	lnum;		\/* Line we were up to in file *\/$/;"	m	struct:SearchedFile	file:	access:public
lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;		\/* line number which has this sign *\/$/;"	m	struct:signlist	access:public
lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* line number *\/$/;"	m	struct:__anon161	access:public
lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* line number *\/$/;"	m	struct:__anon162	access:public
lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* line number *\/$/;"	m	struct:__anon202	access:public
lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;	\/* the line to search for a match *\/$/;"	m	struct:__anon201	access:public
lnum_save	vim/vim/src/fold.c	/^    linenr_T	lnum_save;	\/* line nr used by foldUpdateIEMSRecurse() *\/$/;"	m	struct:__anon95	file:	access:public
lnumlast	vim/vim/src/quickfix.c	/^    linenr_T	lnumlast;$/;"	m	struct:__anon13	file:	access:public
load_base_module	vim/vim/src/if_mzsch.c	/^load_base_module(void *data)$/;"	f	file:	signature:(void *data)
load_base_module_failed	vim/vim/src/if_mzsch.c	/^static int load_base_module_failed = FALSE;$/;"	v	file:
load_base_module_on_error	vim/vim/src/if_mzsch.c	/^load_base_module_on_error(void *data UNUSED)$/;"	f	file:	signature:(void *data UNUSED)
load_buffer_by_name	vim/vim/src/workshop.c	/^load_buffer_by_name($/;"	f	file:	signature:( char *filename, int lnum)
load_buffer_by_name	vim/vim/src/workshop.c	/^static void	 load_buffer_by_name(char *, int);$/;"	p	file:	signature:(char *, int)
load_colors	vim/vim/src/syntax.c	/^load_colors(char_u *name)$/;"	f	signature:(char_u *name)
load_current_state	vim/vim/src/syntax.c	/^load_current_state(synstate_T *from)$/;"	f	file:	signature:(synstate_T *from)
load_current_state	vim/vim/src/syntax.c	/^static void load_current_state(synstate_T *from);$/;"	p	file:	signature:(synstate_T *from)
load_dll	vim/vim/src/if_lua.c	74;"	d	file:
load_dll	vim/vim/src/if_lua.c	78;"	d	file:
load_dll	vim/vim/src/if_python.c	137;"	d	file:
load_dll	vim/vim/src/if_python.c	139;"	d	file:
load_dll	vim/vim/src/if_python.c	144;"	d	file:
load_dll	vim/vim/src/if_python3.c	129;"	d	file:
load_dll	vim/vim/src/if_python3.c	131;"	d	file:
load_dll	vim/vim/src/if_python3.c	136;"	d	file:
load_dll	vim/vim/src/if_ruby.c	69;"	d	file:
load_dll	vim/vim/src/if_ruby.c	74;"	d	file:
load_dll	vim/vim/src/if_tcl.c	167;"	d	file:
load_dll	vim/vim/src/if_tcl.c	172;"	d	file:
load_dummy_buffer	vim/vim/src/quickfix.c	/^load_dummy_buffer($/;"	f	file:	signature:( char_u *fname, char_u *dirname_start, char_u *resulting_dir)
load_dummy_buffer	vim/vim/src/quickfix.c	/^static buf_T	*load_dummy_buffer(char_u *fname, char_u *dirname_start, char_u *resulting_dir);$/;"	p	file:	signature:(char_u *fname, char_u *dirname_start, char_u *resulting_dir)
load_menu_iconfile	vim/vim/src/gui_gtk.c	/^load_menu_iconfile(char_u *name, GtkIconSize icon_size)$/;"	f	file:	signature:(char_u *name, GtkIconSize icon_size)
load_start_packages	vim/vim/src/ex_cmds2.c	/^load_start_packages(void)$/;"	f	signature:(void)
load_window	vim/vim/src/workshop.c	/^load_window($/;"	f	file:	signature:( char *filename, int lnum)
load_window	vim/vim/src/workshop.c	/^static void	 load_window(char *, int lnum);$/;"	p	file:	signature:(char *, int lnum)
local_xsmp_handle_requests	vim/vim/src/gui_gtk_x11.c	/^local_xsmp_handle_requests($/;"	f	file:	signature:( GIOChannel *source UNUSED, GIOCondition condition, gpointer data)
local_xsmp_handle_requests	vim/vim/src/gui_x11.c	/^local_xsmp_handle_requests($/;"	f	file:	signature:( XtPointer c UNUSED, int *s UNUSED, XtInputId *i UNUSED)
local_xsmp_handle_requests	vim/vim/src/gui_x11.c	/^static void local_xsmp_handle_requests(XtPointer c, int *s, XtInputId *i);$/;"	p	file:	signature:(XtPointer c, int *s, XtInputId *i)
locales	vim/vim/src/ex_cmds2.c	/^static char_u	**locales = NULL;	\/* Array of all available locales *\/$/;"	v	file:
lock2name	vim/vim/src/os_amiga.c	/^lock2name(BPTR lock, char_u *buf, long len)$/;"	f	file:	signature:(BPTR lock, char_u *buf, long len)
lock2name	vim/vim/src/os_amiga.c	/^static int lock2name(BPTR lock, char_u *buf, long   len);$/;"	p	file:	signature:(BPTR lock, char_u *buf, long len)
lockmarks	vim/vim/src/structs.h	/^    int		lockmarks;		\/* TRUE when ":lockmarks" was used *\/$/;"	m	struct:__anon171	access:public
log_fd	vim/vim/src/channel.c	/^static FILE *log_fd = NULL;$/;"	v	file:
log_fd	vim/vim/src/regexp_nfa.c	/^static FILE *log_fd;$/;"	v	file:
log_start	vim/vim/src/channel.c	/^static proftime_T log_start;$/;"	v	file:
log_subexpr	vim/vim/src/regexp_nfa.c	/^log_subexpr(regsub_T *sub)$/;"	f	file:	signature:(regsub_T *sub)
log_subexpr	vim/vim/src/regexp_nfa.c	/^static void log_subexpr(regsub_T *sub);$/;"	p	file:	signature:(regsub_T *sub)
log_subsexpr	vim/vim/src/regexp_nfa.c	/^log_subsexpr(regsubs_T *subs)$/;"	f	file:	signature:(regsubs_T *subs)
log_subsexpr	vim/vim/src/regexp_nfa.c	/^static void log_subsexpr(regsubs_T *subs);$/;"	p	file:	signature:(regsubs_T *subs)
log_tr	vim/vim/src/term.c	/^log_tr(char *msg)$/;"	f	file:	signature:(char *msg)
logfont2name	vim/vim/src/gui_w32.c	/^logfont2name(LOGFONT lf)$/;"	f	file:	signature:(LOGFONT lf)
longVersion	vim/vim/src/version.c	/^char	*longVersion = VIM_VERSION_LONG;$/;"	v
longVersion	vim/vim/src/version.c	/^char	*longVersion = VIM_VERSION_LONG_DATE __DATE__ " " __TIME__ ")";$/;"	v
longVersion	vim/vim/src/version.c	/^char	longVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)$/;"	v
long_i	vim/vim/src/vim.h	/^typedef		 __int64	long_i;$/;"	t
long_i	vim/vim/src/vim.h	/^typedef		 long __w64     long_i;$/;"	t
long_to_char	vim/vim/src/memline.c	/^long_to_char(long n, char_u *s)$/;"	f	file:	signature:(long n, char_u *s)
long_to_char	vim/vim/src/memline.c	/^static void long_to_char(long, char_u *);$/;"	p	file:	signature:(long, char_u *)
long_u	vim/vim/src/vim.h	/^typedef unsigned __int64	long_u;$/;"	t
long_u	vim/vim/src/vim.h	/^typedef unsigned long __w64	long_u;$/;"	t
longest_lnum	vim/vim/src/gui.c	/^static linenr_T longest_lnum = 0;$/;"	v	file:
lookup	vim/vim/src/nbdebug.c	/^lookup($/;"	f	file:	signature:( char *file)
lookup	vim/vim/src/nbdebug.c	/^static int	 lookup(char *);$/;"	p	file:	signature:(char *)
lookup	vim/vim/src/wsdebug.c	/^lookup($/;"	f	file:	signature:( char *file)
lookup	vim/vim/src/wsdebug.c	/^static int	 lookup(char *);$/;"	p	file:	signature:(char *)
lookupVerb	vim/vim/src/workshop.c	/^lookupVerb($/;"	f	file:	signature:( char *verb, int skip)
lookupVerb	vim/vim/src/workshop.c	/^static char	*lookupVerb(char *, int);$/;"	p	file:	signature:(char *, int)
lookup_colour	vim/vim/src/libvterm/src/pen.c	/^static int lookup_colour(const VTermState *state, int palette, const long args[], int argcount, VTermColor *col, int *index)$/;"	f	file:	signature:(const VTermState *state, int palette, const long args[], int argcount, VTermColor *col, int *index)
lookup_colour_ansi	vim/vim/src/libvterm/src/pen.c	/^static int lookup_colour_ansi(const VTermState *state, long index, VTermColor *col)$/;"	f	file:	signature:(const VTermState *state, long index, VTermColor *col)
lookup_colour_palette	vim/vim/src/libvterm/src/pen.c	/^static int lookup_colour_palette(const VTermState *state, long index, VTermColor *col)$/;"	f	file:	signature:(const VTermState *state, long index, VTermColor *col)
lookup_menu_iconfile	vim/vim/src/gui_gtk.c	/^lookup_menu_iconfile(char_u *iconfile, char_u *dest)$/;"	f	file:	signature:(char_u *iconfile, char_u *dest)
loop_cookie	vim/vim/src/ex_docmd.c	/^struct loop_cookie$/;"	s	file:
loop_cookie::cookie	vim/vim/src/ex_docmd.c	/^    void	*cookie;$/;"	m	struct:loop_cookie	file:	access:public
loop_cookie::current_line	vim/vim/src/ex_docmd.c	/^    int		current_line;		\/* last read line from growarray *\/$/;"	m	struct:loop_cookie	file:	access:public
loop_cookie::getline	vim/vim/src/ex_docmd.c	/^    char_u	*(*getline)(int, void *, int);$/;"	m	struct:loop_cookie	file:	access:public
loop_cookie::lines_gap	vim/vim/src/ex_docmd.c	/^    garray_T	*lines_gap;		\/* growarray with line info *\/$/;"	m	struct:loop_cookie	file:	access:public
loop_cookie::repeating	vim/vim/src/ex_docmd.c	/^    int		repeating;		\/* TRUE when looping a second time *\/$/;"	m	struct:loop_cookie	file:	access:public
loose_clipboard	vim/vim/src/os_unix.c	/^loose_clipboard(void)$/;"	f	file:	signature:(void)
loose_clipboard	vim/vim/src/os_unix.c	/^static void loose_clipboard(void);$/;"	p	file:	signature:(void)
lowest_marked	vim/vim/src/memline.c	/^static linenr_T	lowest_marked = 0;$/;"	v	file:
lp_region	vim/vim/src/spell.h	/^    int		lp_region;	\/* bitmask for region or REGION_ALL *\/$/;"	m	struct:langp_S	access:public
lp_replang	vim/vim/src/spell.h	/^    slang_T	*lp_replang;	\/* language used for REP items or NULL *\/$/;"	m	struct:langp_S	access:public
lp_sallang	vim/vim/src/spell.h	/^    slang_T	*lp_sallang;	\/* language used for sound folding or NULL *\/$/;"	m	struct:langp_S	access:public
lp_slang	vim/vim/src/spell.h	/^    slang_T	*lp_slang;	\/* info for this language *\/$/;"	m	struct:langp_S	access:public
lpos	vim/vim/src/misc1.c	/^    lpos_T  lpos;$/;"	m	struct:__anon148	file:	access:public
lpos_T	vim/vim/src/structs.h	/^} lpos_T;$/;"	t	typeref:struct:__anon162
lpszText	vim/vim/src/gui_w32.c	/^	LPSTR lpszText;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
lpszText	vim/vim/src/gui_w32.c	/^    LPSTR	lpszText;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
lpszText	vim/vim/src/gui_w32.c	/^    LPSTR      lpszText;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
lpszText	vim/vim/src/gui_w32.c	/^    LPWSTR	lpszText;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
lpwAlign	vim/vim/src/gui_w32.c	/^lpwAlign($/;"	f	file:	signature:( LPWORD lpIn)
lpwAlign	vim/vim/src/gui_w32.c	/^static LPWORD lpwAlign(LPWORD);$/;"	p	file:
lrF_sub	vim/vim/src/farsi.c	/^lrF_sub(char_u *ibuf)$/;"	f	signature:(char_u *ibuf)
lrFswap	vim/vim/src/farsi.c	/^lrFswap(char_u *cmdbuf, int len)$/;"	f	signature:(char_u *cmdbuf, int len)
lrswap	vim/vim/src/farsi.c	/^lrswap(char_u *ibuf)$/;"	f	signature:(char_u *ibuf)
lrswapbuf	vim/vim/src/farsi.c	/^lrswapbuf(char_u *buf, int len)$/;"	f	file:	signature:(char_u *buf, int len)
luaL_addlstring	vim/vim/src/if_lua.c	106;"	d	file:
luaL_argerror	vim/vim/src/if_lua.c	96;"	d	file:
luaL_buffinit	vim/vim/src/if_lua.c	105;"	d	file:
luaL_checkany	vim/vim/src/if_lua.c	98;"	d	file:
luaL_checkinteger	vim/vim/src/if_lua.c	100;"	d	file:
luaL_checklstring	vim/vim/src/if_lua.c	99;"	d	file:
luaL_checktype	vim/vim/src/if_lua.c	102;"	d	file:
luaL_error	vim/vim/src/if_lua.c	103;"	d	file:
luaL_loadbuffer	vim/vim/src/if_lua.c	90;"	d	file:
luaL_loadbufferx	vim/vim/src/if_lua.c	95;"	d	file:
luaL_loadfile	vim/vim/src/if_lua.c	89;"	d	file:
luaL_loadfilex	vim/vim/src/if_lua.c	94;"	d	file:
luaL_newstate	vim/vim/src/if_lua.c	104;"	d	file:
luaL_openlib	vim/vim/src/if_lua.c	87;"	d	file:
luaL_openlibs	vim/vim/src/if_lua.c	171;"	d	file:
luaL_optinteger	vim/vim/src/if_lua.c	101;"	d	file:
luaL_prepbuffer	vim/vim/src/if_lua.c	86;"	d	file:
luaL_prepbuffsize	vim/vim/src/if_lua.c	92;"	d	file:
luaL_pushresult	vim/vim/src/if_lua.c	107;"	d	file:
luaL_register	vim/vim/src/if_lua.c	85;"	d	file:
luaL_setfuncs	vim/vim/src/if_lua.c	93;"	d	file:
luaL_typeerror	vim/vim/src/if_lua.c	/^luaL_typeerror (lua_State *L, int narg, const char *tname)$/;"	f	file:	signature:(lua_State *L, int narg, const char *tname)
luaL_typeerror	vim/vim/src/if_lua.c	64;"	d	file:
luaL_typerror	vim/vim/src/if_lua.c	88;"	d	file:
luaV_Buffer	vim/vim/src/if_lua.c	/^typedef buf_T *luaV_Buffer;$/;"	t	file:
luaV_Buffer_mt	vim/vim/src/if_lua.c	/^static const luaL_Reg luaV_Buffer_mt[] = {$/;"	v	file:
luaV_Dict	vim/vim/src/if_lua.c	/^typedef dict_T *luaV_Dict;$/;"	t	file:
luaV_Dict_mt	vim/vim/src/if_lua.c	/^static const luaL_Reg luaV_Dict_mt[] = {$/;"	v	file:
luaV_List	vim/vim/src/if_lua.c	/^typedef list_T *luaV_List;$/;"	t	file:
luaV_List_mt	vim/vim/src/if_lua.c	/^static const luaL_Reg luaV_List_mt[] = {$/;"	v	file:
luaV_Reg	vim/vim/src/if_lua.c	/^} luaV_Reg;$/;"	t	typeref:struct:__anon80	file:
luaV_Window	vim/vim/src/if_lua.c	/^typedef win_T *luaV_Window;$/;"	t	file:
luaV_Window_mt	vim/vim/src/if_lua.c	/^static const luaL_Reg luaV_Window_mt[] = {$/;"	v	file:
luaV_addlstring	vim/vim/src/if_lua.c	/^luaV_addlstring(luaL_Buffer *b, const char *s, size_t l, int toline)$/;"	f	file:	signature:(luaL_Buffer *b, const char *s, size_t l, int toline)
luaV_beep	vim/vim/src/if_lua.c	/^luaV_beep(lua_State *L UNUSED)$/;"	f	file:	signature:(lua_State *L UNUSED)
luaV_buffer	vim/vim/src/if_lua.c	/^luaV_buffer(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_call	vim/vim/src/if_lua.c	/^luaV_buffer_call(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_index	vim/vim/src/if_lua.c	/^luaV_buffer_index(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_insert	vim/vim/src/if_lua.c	/^luaV_buffer_insert(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_isvalid	vim/vim/src/if_lua.c	/^luaV_buffer_isvalid(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_len	vim/vim/src/if_lua.c	/^luaV_buffer_len(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_newindex	vim/vim/src/if_lua.c	/^luaV_buffer_newindex(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_next	vim/vim/src/if_lua.c	/^luaV_buffer_next(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_buffer_previous	vim/vim/src/if_lua.c	/^luaV_buffer_previous(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_checkcache	vim/vim/src/if_lua.c	/^luaV_checkcache(lua_State *L, void *p)$/;"	f	file:	signature:(lua_State *L, void *p)
luaV_checksandbox	vim/vim/src/if_lua.c	54;"	d	file:
luaV_checkudata	vim/vim/src/if_lua.c	/^luaV_checkudata(lua_State *L, int ud, const char *tname)$/;"	f	file:	signature:(lua_State *L, int ud, const char *tname)
luaV_checkvalid	vim/vim/src/if_lua.c	464;"	d	file:
luaV_command	vim/vim/src/if_lua.c	/^luaV_command(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_debug	vim/vim/src/if_lua.c	/^luaV_debug(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_dict	vim/vim/src/if_lua.c	/^luaV_dict(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_dict_call	vim/vim/src/if_lua.c	/^luaV_dict_call (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_dict_index	vim/vim/src/if_lua.c	/^luaV_dict_index (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_dict_iter	vim/vim/src/if_lua.c	/^luaV_dict_iter (lua_State *L UNUSED)$/;"	f	file:	signature:(lua_State *L UNUSED)
luaV_dict_len	vim/vim/src/if_lua.c	/^luaV_dict_len (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_dict_newindex	vim/vim/src/if_lua.c	/^luaV_dict_newindex (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_dll	vim/vim/src/if_lua.c	/^static const luaV_Reg luaV_dll[] = {$/;"	v	file:
luaV_emsg	vim/vim/src/if_lua.c	57;"	d	file:
luaV_eval	vim/vim/src/if_lua.c	/^luaV_eval(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_free	vim/vim/src/if_lua.c	/^luaV_free(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_freetype	vim/vim/src/if_lua.c	/^luaV_freetype(buf_T, buffer)$/;"	f
luaV_freetype	vim/vim/src/if_lua.c	1788;"	d	file:
luaV_function	vim/vim/src/if_lua.c	/^typedef void **luaV_function;$/;"	t	file:
luaV_getfield	vim/vim/src/if_lua.c	51;"	d	file:
luaV_getudata	vim/vim/src/if_lua.c	44;"	d	file:
luaV_line	vim/vim/src/if_lua.c	/^luaV_line(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list	vim/vim/src/if_lua.c	/^luaV_list(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_add	vim/vim/src/if_lua.c	/^luaV_list_add (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_call	vim/vim/src/if_lua.c	/^luaV_list_call (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_index	vim/vim/src/if_lua.c	/^luaV_list_index (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_insert	vim/vim/src/if_lua.c	/^luaV_list_insert (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_iter	vim/vim/src/if_lua.c	/^luaV_list_iter (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_len	vim/vim/src/if_lua.c	/^luaV_list_len (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_list_newindex	vim/vim/src/if_lua.c	/^luaV_list_newindex (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_luaeval	vim/vim/src/if_lua.c	/^luaV_luaeval (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_module	vim/vim/src/if_lua.c	/^static const luaL_Reg luaV_module[] = {$/;"	v	file:
luaV_msg	vim/vim/src/if_lua.c	56;"	d	file:
luaV_msgfunc	vim/vim/src/if_lua.c	/^luaV_msgfunc(lua_State *L, msgfunc_T mf)$/;"	f	file:	signature:(lua_State *L, msgfunc_T mf)
luaV_newdict	vim/vim/src/if_lua.c	/^luaV_newdict (lua_State *L, dict_T *dic)$/;"	f	file:	signature:(lua_State *L, dict_T *dic)
luaV_newlist	vim/vim/src/if_lua.c	/^luaV_newlist (lua_State *L, list_T *lis)$/;"	f	file:	signature:(lua_State *L, list_T *lis)
luaV_newmetatable	vim/vim/src/if_lua.c	/^luaV_newmetatable(lua_State *L, const char *tname)$/;"	f	file:	signature:(lua_State *L, const char *tname)
luaV_newstate	vim/vim/src/if_lua.c	/^luaV_newstate(void)$/;"	f	file:	signature:(void)
luaV_newtype	vim/vim/src/if_lua.c	635;"	d	file:
luaV_open	vim/vim/src/if_lua.c	/^luaV_open(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_openlib	vim/vim/src/if_lua.c	63;"	d	file:
luaV_openlib	vim/vim/src/if_lua.c	66;"	d	file:
luaV_print	vim/vim/src/if_lua.c	/^luaV_print(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_pushdict	vim/vim/src/if_lua.c	/^static luaV_Dict *luaV_pushdict (lua_State *L, dict_T *dic);$/;"	p	file:	signature:(lua_State *L, dict_T *dic)
luaV_pushline	vim/vim/src/if_lua.c	/^luaV_pushline(lua_State *L, buf_T *buf, linenr_T n)$/;"	f	file:	signature:(lua_State *L, buf_T *buf, linenr_T n)
luaV_pushlist	vim/vim/src/if_lua.c	/^static luaV_List *luaV_pushlist (lua_State *L, list_T *lis);$/;"	p	file:	signature:(lua_State *L, list_T *lis)
luaV_pushtype	vim/vim/src/if_lua.c	647;"	d	file:
luaV_pushtypval	vim/vim/src/if_lua.c	/^luaV_pushtypval(lua_State *L, typval_T *tv)$/;"	f	file:	signature:(lua_State *L, typval_T *tv)
luaV_setrange	vim/vim/src/if_lua.c	/^luaV_setrange(lua_State *L, int line1, int line2)$/;"	f	file:	signature:(lua_State *L, int line1, int line2)
luaV_setref	vim/vim/src/if_lua.c	/^luaV_setref (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_setudata	vim/vim/src/if_lua.c	47;"	d	file:
luaV_toline	vim/vim/src/if_lua.c	/^luaV_toline(lua_State *L, int pos)$/;"	f	file:	signature:(lua_State *L, int pos)
luaV_totypval	vim/vim/src/if_lua.c	/^luaV_totypval (lua_State *L, int pos, typval_T *tv)$/;"	f	file:	signature:(lua_State *L, int pos, typval_T *tv)
luaV_toudata	vim/vim/src/if_lua.c	/^luaV_toudata(lua_State *L, int ud, const char *tname)$/;"	f	file:	signature:(lua_State *L, int ud, const char *tname)
luaV_type	vim/vim/src/if_lua.c	/^luaV_type(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_type_tostring	vim/vim/src/if_lua.c	667;"	d	file:
luaV_unbox	vim/vim/src/if_lua.c	462;"	d	file:
luaV_window	vim/vim/src/if_lua.c	/^luaV_window(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_window_call	vim/vim/src/if_lua.c	/^luaV_window_call(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_window_index	vim/vim/src/if_lua.c	/^luaV_window_index(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_window_isvalid	vim/vim/src/if_lua.c	/^luaV_window_isvalid(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_window_newindex	vim/vim/src/if_lua.c	/^luaV_window_newindex (lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_window_next	vim/vim/src/if_lua.c	/^luaV_window_next(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
luaV_window_previous	vim/vim/src/if_lua.c	/^luaV_window_previous(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
lua_call	vim/vim/src/if_lua.c	112;"	d	file:
lua_callk	vim/vim/src/if_lua.c	117;"	d	file:
lua_close	vim/vim/src/if_lua.c	131;"	d	file:
lua_copy	vim/vim/src/if_lua.c	128;"	d	file:
lua_createtable	vim/vim/src/if_lua.c	154;"	d	file:
lua_enabled	vim/vim/src/if_lua.c	/^lua_enabled(int verbose)$/;"	f	signature:(int verbose)
lua_end	vim/vim/src/if_lua.c	/^lua_end(void)$/;"	f	signature:(void)
lua_getfield	vim/vim/src/if_lua.c	151;"	d	file:
lua_getglobal	vim/vim/src/if_lua.c	119;"	d	file:
lua_getmetatable	vim/vim/src/if_lua.c	156;"	d	file:
lua_gettop	vim/vim/src/if_lua.c	132;"	d	file:
lua_init	vim/vim/src/if_lua.c	/^lua_init(void)$/;"	f	file:	signature:(void)
lua_isnumber	vim/vim/src/if_lua.c	135;"	d	file:
lua_isopen	vim/vim/src/if_lua.c	/^lua_isopen(void)$/;"	f	file:	signature:(void)
lua_isstring	vim/vim/src/if_lua.c	136;"	d	file:
lua_link_init	vim/vim/src/if_lua.c	/^lua_link_init(char *libname, int verbose)$/;"	f	file:	signature:(char *libname, int verbose)
lua_newuserdata	vim/vim/src/if_lua.c	155;"	d	file:
lua_next	vim/vim/src/if_lua.c	161;"	d	file:
lua_pcall	vim/vim/src/if_lua.c	113;"	d	file:
lua_pcallk	vim/vim/src/if_lua.c	118;"	d	file:
lua_pushboolean	vim/vim/src/if_lua.c	149;"	d	file:
lua_pushcclosure	vim/vim/src/if_lua.c	148;"	d	file:
lua_pushfstring	vim/vim/src/if_lua.c	147;"	d	file:
lua_pushinteger	vim/vim/src/if_lua.c	144;"	d	file:
lua_pushlightuserdata	vim/vim/src/if_lua.c	150;"	d	file:
lua_pushlstring	vim/vim/src/if_lua.c	145;"	d	file:
lua_pushnil	vim/vim/src/if_lua.c	142;"	d	file:
lua_pushnumber	vim/vim/src/if_lua.c	143;"	d	file:
lua_pushstring	vim/vim/src/if_lua.c	146;"	d	file:
lua_pushvalue	vim/vim/src/if_lua.c	134;"	d	file:
lua_rawequal	vim/vim/src/if_lua.c	138;"	d	file:
lua_rawget	vim/vim/src/if_lua.c	152;"	d	file:
lua_rawgeti	vim/vim/src/if_lua.c	153;"	d	file:
lua_rawset	vim/vim/src/if_lua.c	158;"	d	file:
lua_rawseti	vim/vim/src/if_lua.c	159;"	d	file:
lua_remove	vim/vim/src/if_lua.c	124;"	d	file:
lua_replace	vim/vim/src/if_lua.c	123;"	d	file:
lua_rotate	vim/vim/src/if_lua.c	127;"	d	file:
lua_setfield	vim/vim/src/if_lua.c	157;"	d	file:
lua_setglobal	vim/vim/src/if_lua.c	120;"	d	file:
lua_setmetatable	vim/vim/src/if_lua.c	160;"	d	file:
lua_settop	vim/vim/src/if_lua.c	133;"	d	file:
lua_toboolean	vim/vim/src/if_lua.c	139;"	d	file:
lua_tointeger	vim/vim/src/if_lua.c	111;"	d	file:
lua_tointegerx	vim/vim/src/if_lua.c	116;"	d	file:
lua_tolstring	vim/vim/src/if_lua.c	140;"	d	file:
lua_tonumber	vim/vim/src/if_lua.c	110;"	d	file:
lua_tonumberx	vim/vim/src/if_lua.c	115;"	d	file:
lua_touserdata	vim/vim/src/if_lua.c	141;"	d	file:
lua_type	vim/vim/src/if_lua.c	137;"	d	file:
lua_typename	vim/vim/src/if_lua.c	130;"	d	file:
luaopen_base	vim/vim/src/if_lua.c	163;"	d	file:
luaopen_debug	vim/vim/src/if_lua.c	170;"	d	file:
luaopen_io	vim/vim/src/if_lua.c	167;"	d	file:
luaopen_math	vim/vim/src/if_lua.c	166;"	d	file:
luaopen_os	vim/vim/src/if_lua.c	168;"	d	file:
luaopen_package	vim/vim/src/if_lua.c	169;"	d	file:
luaopen_string	vim/vim/src/if_lua.c	165;"	d	file:
luaopen_table	vim/vim/src/if_lua.c	164;"	d	file:
luaopen_vim	vim/vim/src/if_lua.c	/^luaopen_vim(lua_State *L)$/;"	f	file:	signature:(lua_State *L)
lv_copyID	vim/vim/src/structs.h	/^    int		lv_copyID;	\/* ID used by deepcopy() *\/$/;"	m	struct:listvar_S	access:public
lv_copylist	vim/vim/src/structs.h	/^    list_T	*lv_copylist;	\/* copied list used by deepcopy() *\/$/;"	m	struct:listvar_S	access:public
lv_first	vim/vim/src/structs.h	/^    listitem_T	*lv_first;	\/* first item, NULL if none *\/$/;"	m	struct:listvar_S	access:public
lv_idx	vim/vim/src/structs.h	/^    int		lv_idx;		\/* cached index of an item *\/$/;"	m	struct:listvar_S	access:public
lv_idx_item	vim/vim/src/structs.h	/^    listitem_T	*lv_idx_item;	\/* when not NULL item at index "lv_idx" *\/$/;"	m	struct:listvar_S	access:public
lv_last	vim/vim/src/structs.h	/^    listitem_T	*lv_last;	\/* last item, NULL if none *\/$/;"	m	struct:listvar_S	access:public
lv_len	vim/vim/src/structs.h	/^    int		lv_len;		\/* number of items *\/$/;"	m	struct:listvar_S	access:public
lv_lock	vim/vim/src/structs.h	/^    char	lv_lock;	\/* zero, VAR_LOCKED, VAR_FIXED *\/$/;"	m	struct:listvar_S	access:public
lv_refcount	vim/vim/src/structs.h	/^    int		lv_refcount;	\/* reference count *\/$/;"	m	struct:listvar_S	access:public
lv_used_next	vim/vim/src/structs.h	/^    list_T	*lv_used_next;	\/* next list in used lists list *\/$/;"	m	struct:listvar_S	access:public
lv_used_prev	vim/vim/src/structs.h	/^    list_T	*lv_used_prev;	\/* previous list in used lists list *\/$/;"	m	struct:listvar_S	access:public
lv_watch	vim/vim/src/structs.h	/^    listwatch_T	*lv_watch;	\/* first watcher, NULL if none *\/$/;"	m	struct:listvar_S	access:public
lval_S	vim/vim/src/structs.h	/^typedef struct lval_S$/;"	s
lval_S::ll_di	vim/vim/src/structs.h	/^    dictitem_T	*ll_di;		\/* The dictitem or NULL *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_dict	vim/vim/src/structs.h	/^    dict_T	*ll_dict;	\/* The Dictionary or NULL *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_empty2	vim/vim/src/structs.h	/^    int		ll_empty2;	\/* Second index is empty: [i:] *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_exp_name	vim/vim/src/structs.h	/^    char_u	*ll_exp_name;	\/* NULL or expanded name in allocated memory. *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_li	vim/vim/src/structs.h	/^    listitem_T	*ll_li;		\/* The list item or NULL. *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_list	vim/vim/src/structs.h	/^    list_T	*ll_list;	\/* The list or NULL. *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_n1	vim/vim/src/structs.h	/^    long	ll_n1;		\/* First index for list *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_n2	vim/vim/src/structs.h	/^    long	ll_n2;		\/* Second index for list range *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_name	vim/vim/src/structs.h	/^    char_u	*ll_name;	\/* start of variable name (can be NULL) *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_newkey	vim/vim/src/structs.h	/^    char_u	*ll_newkey;	\/* New key for Dict in alloc. mem or NULL. *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_range	vim/vim/src/structs.h	/^    int		ll_range;	\/* TRUE when a [i:j] range was used *\/$/;"	m	struct:lval_S	access:public
lval_S::ll_tv	vim/vim/src/structs.h	/^    typval_T	*ll_tv;		\/* Typeval of item being used.  If "newkey"$/;"	m	struct:lval_S	access:public
lval_T	vim/vim/src/structs.h	/^} lval_T;$/;"	t	typeref:struct:lval_S
lvl	vim/vim/src/fold.c	/^    int		lvl;		\/* current level (-1 for undefined) *\/$/;"	m	struct:__anon95	file:	access:public
lvl_next	vim/vim/src/fold.c	/^    int		lvl_next;	\/* level used for next line *\/$/;"	m	struct:__anon95	file:	access:public
lw	vim/vim/src/if_py_both.h	/^    listwatch_T	lw;$/;"	m	struct:__anon103	access:public
lw_item	vim/vim/src/structs.h	/^    listitem_T		*lw_item;	\/* item being watched *\/$/;"	m	struct:listwatch_S	access:public
lw_next	vim/vim/src/structs.h	/^    listwatch_T		*lw_next;	\/* next watcher *\/$/;"	m	struct:listwatch_S	access:public
m	vim/vim/src/hangulin.c	/^static int f=F_NULL, m=M_NULL, l=L_NULL;$/;"	v	file:
mAdjustedAdvances	vim/vim/src/gui_dwrite.cpp	/^    FLOAT *mAdjustedAdvances;$/;"	m	class:AdjustedGlyphRun	file:	access:private
mBrush	vim/vim/src/gui_dwrite.cpp	/^    ID2D1SolidColorBrush *mBrush;$/;"	m	struct:DWriteContext	file:	access:public
mD2D1Factory	vim/vim/src/gui_dwrite.cpp	/^    ID2D1Factory *mD2D1Factory;$/;"	m	struct:DWriteContext	file:	access:public
mDWriteFactory	vim/vim/src/gui_dwrite.cpp	/^    IDWriteFactory *mDWriteFactory;$/;"	m	struct:DWriteContext	file:	access:public
mDelta	vim/vim/src/gui_dwrite.cpp	/^    FLOAT mDelta;$/;"	m	class:AdjustedGlyphRun	file:	access:private
mDpiScaleX	vim/vim/src/gui_dwrite.cpp	/^    FLOAT mDpiScaleX;$/;"	m	struct:DWriteContext	file:	access:public
mDpiScaleY	vim/vim/src/gui_dwrite.cpp	/^    FLOAT mDpiScaleY;$/;"	m	struct:DWriteContext	file:	access:public
mDrawing	vim/vim/src/gui_dwrite.cpp	/^    bool mDrawing;$/;"	m	struct:DWriteContext	file:	access:public
mFontStyle	vim/vim/src/gui_dwrite.cpp	/^    DWRITE_FONT_STYLE mFontStyle;$/;"	m	struct:DWriteContext	file:	access:public
mFontWeight	vim/vim/src/gui_dwrite.cpp	/^    DWRITE_FONT_WEIGHT mFontWeight;$/;"	m	struct:DWriteContext	file:	access:public
mGdiInterop	vim/vim/src/gui_dwrite.cpp	/^    IDWriteGdiInterop *mGdiInterop;$/;"	m	struct:DWriteContext	file:	access:public
mLastHFont	vim/vim/src/gui_dwrite.cpp	/^    HFONT mLastHFont;$/;"	m	struct:DWriteContext	file:	access:public
mRT	vim/vim/src/gui_dwrite.cpp	/^    ID2D1DCRenderTarget *mRT;$/;"	m	struct:DWriteContext	file:	access:public
mRenderingParams	vim/vim/src/gui_dwrite.cpp	/^    IDWriteRenderingParams *mRenderingParams;$/;"	m	struct:DWriteContext	file:	access:public
mTextAntialiasMode	vim/vim/src/gui_dwrite.cpp	/^    D2D1_TEXT_ANTIALIAS_MODE mTextAntialiasMode;$/;"	m	struct:DWriteContext	file:	access:public
mTextFormat	vim/vim/src/gui_dwrite.cpp	/^    IDWriteTextFormat *mTextFormat;$/;"	m	struct:DWriteContext	file:	access:public
mVIM	vim/vim/src/if_ruby.c	/^static VALUE mVIM;$/;"	v	file:
m_ChangeDir	vim/vim/src/VisVim/Commands.cpp	/^	int	m_ChangeDir;$/;"	m	class:CMainDialog	file:	access:public
m_bDevStudioEditor	vim/vim/src/VisVim/Commands.cpp	/^	BOOL	m_bDevStudioEditor;$/;"	m	class:CMainDialog	file:	access:public
m_bNewTabs	vim/vim/src/VisVim/Commands.cpp	/^	BOOL	m_bNewTabs;$/;"	m	class:CMainDialog	file:	access:public
m_color	vim/vim/src/xpm/include/xpm.h	/^    char *m_color;		\/* monochrom default *\/$/;"	m	struct:__anon90	access:public
m_expr	vim/vim/src/structs.h	/^    char	m_expr;		\/* <expr> used, m_str is an expression *\/$/;"	m	struct:mapblock	access:public
m_info	vim/vim/src/structs.h	/^struct m_info$/;"	s
m_info::m_next	vim/vim/src/structs.h	/^    minfo_T	*m_next;	\/* pointer to next free chunk in the list *\/$/;"	m	struct:m_info	access:public
m_info::m_size	vim/vim/src/structs.h	/^    long_u	m_size;		\/* size of the chunk (including m_info) *\/$/;"	m	struct:m_info	access:public
m_keylen	vim/vim/src/structs.h	/^    int		m_keylen;	\/* strlen(m_keys) *\/$/;"	m	struct:mapblock	access:public
m_keys	vim/vim/src/structs.h	/^    char_u	*m_keys;	\/* mapped from, lhs *\/$/;"	m	struct:mapblock	access:public
m_mode	vim/vim/src/structs.h	/^    int		m_mode;		\/* valid mode *\/$/;"	m	struct:mapblock	access:public
m_next	vim/vim/src/structs.h	/^    mapblock_T	*m_next;	\/* next mapblock in list *\/$/;"	m	struct:mapblock	access:public
m_next	vim/vim/src/structs.h	/^    minfo_T	*m_next;	\/* pointer to next free chunk in the list *\/$/;"	m	struct:m_info	access:public
m_noremap	vim/vim/src/structs.h	/^    int		m_noremap;	\/* if non-zero no re-mapping for m_str *\/$/;"	m	struct:mapblock	access:public
m_nowait	vim/vim/src/structs.h	/^    char	m_nowait;	\/* <nowait> used *\/$/;"	m	struct:mapblock	access:public
m_onlyone	vim/vim/src/window.c	/^static char *m_onlyone = N_("Already only one window");$/;"	v	file:
m_orig_str	vim/vim/src/structs.h	/^    char_u	*m_orig_str;	\/* rhs as entered by the user *\/$/;"	m	struct:mapblock	access:public
m_script_ID	vim/vim/src/structs.h	/^    scid_T	m_script_ID;	\/* ID of script where map was defined *\/$/;"	m	struct:mapblock	access:public
m_silent	vim/vim/src/structs.h	/^    char	m_silent;	\/* <silent> used, don't echo commands *\/$/;"	m	struct:mapblock	access:public
m_size	vim/vim/src/structs.h	/^    long_u	m_size;		\/* size of the chunk (including m_info) *\/$/;"	m	struct:m_info	access:public
m_str	vim/vim/src/structs.h	/^    char_u	*m_str;		\/* mapped to, rhs *\/$/;"	m	struct:mapblock	access:public
macMoveDialogItem	vim/vim/src/gui_mac.c	/^macMoveDialogItem($/;"	f	file:	signature:( DialogRef theDialog, short itemNumber, short X, short Y, Rect *inBox)
macSetDialogItemText	vim/vim/src/gui_mac.c	/^macSetDialogItemText($/;"	f	file:	signature:( DialogRef theDialog, short itemNumber, Str255 itemName)
macSizeDialogItem	vim/vim/src/gui_mac.c	/^macSizeDialogItem($/;"	f	file:	signature:( DialogRef theDialog, short itemNumber, short width, short height)
mac_conv_cleanup	vim/vim/src/os_mac_conv.c	/^mac_conv_cleanup(void)$/;"	f	signature:(void)
mac_conv_init	vim/vim/src/os_mac_conv.c	/^mac_conv_init(void)$/;"	f	signature:(void)
mac_enc_to_cfstring	vim/vim/src/os_mac_conv.c	/^mac_enc_to_cfstring($/;"	f	signature:( char_u *from, size_t fromLen)
mac_enc_to_utf16	vim/vim/src/os_mac_conv.c	/^mac_enc_to_utf16($/;"	f	signature:( char_u *from, size_t fromLen, size_t *actualLen)
mac_lang_init	vim/vim/src/os_mac_conv.c	/^mac_lang_init(void)$/;"	f	signature:(void)
mac_precompose_path	vim/vim/src/os_mac_conv.c	/^mac_precompose_path($/;"	f	signature:( char_u *decompPath, size_t decompLen, size_t *precompLen)
mac_string_convert	vim/vim/src/os_mac_conv.c	/^mac_string_convert($/;"	f	signature:( char_u *ptr, int len, int *lenp, int fail_on_error, int from_enc, int to_enc, int *unconvlenp)
mac_utf16_to_enc	vim/vim/src/os_mac_conv.c	/^mac_utf16_to_enc($/;"	f	signature:( unsigned short *from, size_t fromLen, size_t *actualLen)
mac_utf16_to_utf8	vim/vim/src/os_mac_conv.c	/^mac_utf16_to_utf8($/;"	f	file:	signature:( UniChar *from, size_t fromLen, size_t *actualLen)
mac_utf16_to_utf8	vim/vim/src/os_mac_conv.c	/^static char_u	    *mac_utf16_to_utf8(UniChar *from, size_t fromLen, size_t *actualLen);$/;"	p	file:	signature:(UniChar *from, size_t fromLen, size_t *actualLen)
mac_utf8_to_utf16	vim/vim/src/os_mac_conv.c	/^mac_utf8_to_utf16($/;"	f	file:	signature:( char_u *from, size_t fromLen, size_t *actualLen)
mac_utf8_to_utf16	vim/vim/src/os_mac_conv.c	/^static UniChar	    *mac_utf8_to_utf16(char_u *from, size_t fromLen, size_t *actualLen);$/;"	p	file:	signature:(char_u *from, size_t fromLen, size_t *actualLen)
macroman2enc	vim/vim/src/os_mac_conv.c	/^macroman2enc($/;"	f	signature:( char_u *ptr, long *sizep, long real_size)
magic	vim/vim/src/crypt.c	/^    char    *magic;	\/* magic bytes stored in file header *\/$/;"	m	struct:__anon214	file:	access:public
magic	vim/vim/src/search.c	/^    int		    magic;	\/* magicness of the pattern *\/$/;"	m	struct:spat	file:	access:public
magick	vim/vim/src/gui_gtk_x11.c	2765;"	d	file:
magick	vim/vim/src/gui_gtk_x11.c	2769;"	d	file:
magick	vim/vim/src/gui_gtk_x11.c	2771;"	d	file:
magick	vim/vim/src/gui_gtk_x11.c	2772;"	d	file:
magick	vim/vim/src/gui_gtk_x11.c	2774;"	d	file:
magick	vim/vim/src/gui_gtk_x11.c	2775;"	d	file:
magick	vim/vim/src/gui_gtk_x11.c	2777;"	d	file:
main	vim/vim/runtime/doc/doctags.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vim/vim/runtime/macros/maze/maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	f
main	vim/vim/runtime/macros/maze/mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	f
main	vim/vim/runtime/macros/maze/mazeclean.c	/^main (C)$/;"	f
main	vim/vim/runtime/tools/blink.c	/^main(void)$/;"	f	signature:(void)
main	vim/vim/runtime/tools/ccfilter.c	/^int main( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
main	vim/vim/runtime/tools/xcmdsrv_client.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vim/vim/src/dosinst.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vim/vim/src/if_python.c	77;"	d	file:
main	vim/vim/src/if_python3.c	81;"	d	file:
main	vim/vim/src/json_test.c	/^main(void)$/;"	f	signature:(void)
main	vim/vim/src/kword_test.c	/^main(void)$/;"	f	signature:(void)
main	vim/vim/src/libvterm/bin/unterm.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	vim/vim/src/libvterm/bin/vterm-dump.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	vim/vim/src/libvterm/t/harness.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vim/vim/src/memfile_test.c	/^main(void)$/;"	f	signature:(void)
main	vim/vim/src/message_test.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vim/vim/src/os_vms_mms.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	vim/vim/src/po/sjiscorr.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vim/vim/src/tee/tee.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	vim/vim/src/testdir/test_makeencoding.py	/^def main():$/;"	f	access:public
main	vim/vim/src/uninstal.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	vim/vim/src/vimrun.c	/^main(void)$/;"	f	signature:(void)
main	vim/vim/src/xxd/xxd.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main_errors	vim/vim/src/main.c	/^static char *(main_errors[]) =$/;"	v	file:
main_loop	vim/vim/src/main.c	/^main_loop($/;"	f	signature:( int cmdwin, int noexmode)
main_msg	vim/vim/src/main.c	/^main_msg(char *s)$/;"	f	file:	signature:(char *s)
main_msg	vim/vim/src/main.c	/^static void main_msg(char *s);$/;"	p	file:	signature:(char *s)
main_start_gui	vim/vim/src/main.c	/^main_start_gui(void)$/;"	f	file:	signature:(void)
main_start_gui	vim/vim/src/main.c	/^static void main_start_gui(void);$/;"	p	file:	signature:(void)
mainerr	vim/vim/src/main.c	/^mainerr($/;"	f	file:	signature:( int n, char_u *str)
mainerr	vim/vim/src/main.c	/^static void mainerr(int, char_u *);$/;"	p	file:	signature:(int, char_u *)
mainerr_arg_missing	vim/vim/src/main.c	/^mainerr_arg_missing(char_u *str)$/;"	f	signature:(char_u *str)
mainwin	vim/vim/src/gui.h	/^    GtkWidget	*mainwin;	    \/* top level GTK window *\/$/;"	m	struct:Gui	access:public
mainwin_destroy_cb	vim/vim/src/gui_gtk_x11.c	/^mainwin_destroy_cb(GObject *object UNUSED, gpointer data UNUSED)$/;"	f	file:	signature:(GObject *object UNUSED, gpointer data UNUSED)
mainwin_event_cb	vim/vim/src/gui_beval.c	/^mainwin_event_cb(GtkWidget *widget UNUSED, GdkEvent *event, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEvent *event, gpointer data)
mainwin_event_cb	vim/vim/src/gui_beval.c	/^static gint mainwin_event_cb(GtkWidget *, GdkEvent *, gpointer);$/;"	p	file:	signature:(GtkWidget *, GdkEvent *, gpointer)
mainwin_realize	vim/vim/src/gui_gtk_x11.c	/^mainwin_realize(GtkWidget *widget UNUSED, gpointer data UNUSED)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer data UNUSED)
mainwin_screen_changed_cb	vim/vim/src/gui_gtk_x11.c	/^mainwin_screen_changed_cb(GtkWidget  *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkScreen *previous_screen UNUSED, gpointer data UNUSED)
make_bom	vim/vim/src/fileio.c	/^make_bom(char_u *buf, char_u *name)$/;"	f	file:	signature:(char_u *buf, char_u *name)
make_bom	vim/vim/src/fileio.c	/^static int make_bom(char_u *buf, char_u *name);$/;"	p	file:	signature:(char_u *buf, char_u *name)
make_case_word	vim/vim/src/spell.c	/^make_case_word(char_u *fword, char_u *cword, int flags)$/;"	f	file:	signature:(char_u *fword, char_u *cword, int flags)
make_case_word	vim/vim/src/spell.c	/^static void make_case_word(char_u *fword, char_u *cword, int flags);$/;"	p	file:	signature:(char_u *fword, char_u *cword, int flags)
make_connection	vim/vim/src/evalfunc.c	/^make_connection(void)$/;"	f	file:	signature:(void)
make_connection	vim/vim/src/evalfunc.c	/^static void make_connection(void);$/;"	p	file:	signature:(void)
make_crc_tab	vim/vim/src/crypt_zip.c	/^make_crc_tab(void)$/;"	f	file:	signature:(void)
make_crc_tab	vim/vim/src/crypt_zip.c	/^static void make_crc_tab(void);$/;"	p	file:	signature:(void)
make_expanded_name	vim/vim/src/eval.c	/^make_expanded_name($/;"	f	file:	signature:( char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end)
make_expanded_name	vim/vim/src/eval.c	/^static char_u * make_expanded_name(char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end);$/;"	p	file:	signature:(char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end)
make_extmatch	vim/vim/src/regexp.c	/^make_extmatch(void)$/;"	f	file:	signature:(void)
make_extmatch	vim/vim/src/regexp.c	/^static reg_extmatch_T *make_extmatch(void);$/;"	p	file:	signature:(void)
make_filter_cmd	vim/vim/src/ex_cmds.c	/^make_filter_cmd($/;"	f	signature:( char_u *cmd, char_u *itmp, char_u *otmp)
make_modules	vim/vim/src/if_mzsch.c	/^make_modules(void)$/;"	f	file:	signature:(void)
make_modules	vim/vim/src/if_mzsch.c	/^static void make_modules(void);$/;"	p	file:	signature:(void)
make_partial	vim/vim/src/userfunc.c	/^make_partial(dict_T *selfdict_in, typval_T *rettv)$/;"	f	signature:(dict_T *selfdict_in, typval_T *rettv)
make_percent_swname	vim/vim/src/memline.c	/^make_percent_swname(char_u *dir, char_u *name)$/;"	f	file:	signature:(char_u *dir, char_u *name)
make_percent_swname	vim/vim/src/memline.c	/^static char_u *make_percent_swname(char_u *dir, char_u *name);$/;"	p	file:	signature:(char_u *dir, char_u *name)
make_pull_name	vim/vim/src/gui_athena.c	/^make_pull_name(char_u * name)$/;"	f	file:	signature:(char_u * name)
make_pull_name	vim/vim/src/gui_athena.c	/^static char_u	*make_pull_name(char_u * name);$/;"	p	file:	signature:(char_u * name)
make_snapshot	vim/vim/src/window.c	/^make_snapshot(int idx)$/;"	f	signature:(int idx)
make_snapshot_rec	vim/vim/src/window.c	/^make_snapshot_rec(frame_T *fr, frame_T **frp)$/;"	f	file:	signature:(frame_T *fr, frame_T **frp)
make_snapshot_rec	vim/vim/src/window.c	/^static void make_snapshot_rec(frame_T *fr, frame_T **frp);$/;"	p	file:	signature:(frame_T *fr, frame_T **frp)
make_tabpages	vim/vim/src/window.c	/^make_tabpages(int maxcount)$/;"	f	signature:(int maxcount)
make_tooltip	vim/vim/src/gui_w32.c	/^make_tooltip(BalloonEval *beval, char *text, POINT pt)$/;"	f	file:	signature:(BalloonEval *beval, char *text, POINT pt)
make_tooltip	vim/vim/src/gui_w32.c	/^static void make_tooltip(BalloonEval *beval, char *text, POINT pt);$/;"	p	file:	signature:(BalloonEval *beval, char *text, POINT pt)
make_version	vim/vim/src/version.c	/^make_version(void)$/;"	f	signature:(void)
make_windows	vim/vim/src/window.c	/^make_windows($/;"	f	signature:( int count, int vertical UNUSED)
makefoldset	vim/vim/src/option.c	/^makefoldset(FILE *fd)$/;"	f	signature:(FILE *fd)
makemap	vim/vim/src/getchar.c	/^makemap($/;"	f	signature:( FILE *fd, buf_T *buf)
makeopens	vim/vim/src/ex_docmd.c	/^makeopens($/;"	f	file:	signature:( FILE *fd, char_u *dirnow)
makeopens	vim/vim/src/ex_docmd.c	/^static int	makeopens(FILE *fd, char_u *dirnow);$/;"	p	file:	signature:(FILE *fd, char_u *dirnow)
makeset	vim/vim/src/option.c	/^makeset(FILE *fd, int opt_flags, int local_only)$/;"	f	signature:(FILE *fd, int opt_flags, int local_only)
makeswapname	vim/vim/src/memline.c	/^makeswapname($/;"	f	signature:( char_u *fname, char_u *ffname UNUSED, buf_T *buf, char_u *dir_name)
maketitle	vim/vim/src/buffer.c	/^maketitle(void)$/;"	f	signature:(void)
malloc	vim/vim/src/libvterm/include/vterm.h	/^  void *(*malloc)(size_t size, void *allocdata);$/;"	m	struct:__anon58	access:public
manage_centered	vim/vim/src/gui_motif.c	/^manage_centered(Widget dialog_child)$/;"	f	signature:(Widget dialog_child)
map_clear	vim/vim/src/getchar.c	/^map_clear($/;"	f	signature:( char_u *cmdp, char_u *arg UNUSED, int forceit, int abbr)
map_clear_int	vim/vim/src/getchar.c	/^map_clear_int($/;"	f	signature:( buf_T *buf UNUSED, int mode, int local UNUSED, int abbr)
map_finder_callback	vim/vim/src/if_py_both.h	/^map_finder_callback(char_u *path, void *_data)$/;"	f	signature:(char_u *path, void *_data)
map_free	vim/vim/src/getchar.c	/^map_free(mapblock_T **mpp)$/;"	f	file:	signature:(mapblock_T **mpp)
map_free	vim/vim/src/getchar.c	/^static void	map_free(mapblock_T **);$/;"	p	file:	signature:(mapblock_T **)
map_mode_to_chars	vim/vim/src/getchar.c	/^map_mode_to_chars(int mode)$/;"	f	signature:(int mode)
map_rtp_callback	vim/vim/src/if_py_both.h	/^map_rtp_callback(char_u *path, void *_data)$/;"	f	signature:(char_u *path, void *_data)
map_rtp_data	vim/vim/src/if_py_both.h	/^} map_rtp_data;$/;"	t	typeref:struct:__anon98
map_to_exists	vim/vim/src/getchar.c	/^map_to_exists(char_u *str, char_u *modechars, int abbr)$/;"	f	signature:(char_u *str, char_u *modechars, int abbr)
map_to_exists_mode	vim/vim/src/getchar.c	/^map_to_exists_mode(char_u *rhs, int mode, int abbr)$/;"	f	signature:(char_u *rhs, int mode, int abbr)
mapblock	vim/vim/src/structs.h	/^struct mapblock$/;"	s
mapblock::m_expr	vim/vim/src/structs.h	/^    char	m_expr;		\/* <expr> used, m_str is an expression *\/$/;"	m	struct:mapblock	access:public
mapblock::m_keylen	vim/vim/src/structs.h	/^    int		m_keylen;	\/* strlen(m_keys) *\/$/;"	m	struct:mapblock	access:public
mapblock::m_keys	vim/vim/src/structs.h	/^    char_u	*m_keys;	\/* mapped from, lhs *\/$/;"	m	struct:mapblock	access:public
mapblock::m_mode	vim/vim/src/structs.h	/^    int		m_mode;		\/* valid mode *\/$/;"	m	struct:mapblock	access:public
mapblock::m_next	vim/vim/src/structs.h	/^    mapblock_T	*m_next;	\/* next mapblock in list *\/$/;"	m	struct:mapblock	access:public
mapblock::m_noremap	vim/vim/src/structs.h	/^    int		m_noremap;	\/* if non-zero no re-mapping for m_str *\/$/;"	m	struct:mapblock	access:public
mapblock::m_nowait	vim/vim/src/structs.h	/^    char	m_nowait;	\/* <nowait> used *\/$/;"	m	struct:mapblock	access:public
mapblock::m_orig_str	vim/vim/src/structs.h	/^    char_u	*m_orig_str;	\/* rhs as entered by the user *\/$/;"	m	struct:mapblock	access:public
mapblock::m_script_ID	vim/vim/src/structs.h	/^    scid_T	m_script_ID;	\/* ID of script where map was defined *\/$/;"	m	struct:mapblock	access:public
mapblock::m_silent	vim/vim/src/structs.h	/^    char	m_silent;	\/* <silent> used, don't echo commands *\/$/;"	m	struct:mapblock	access:public
mapblock::m_str	vim/vim/src/structs.h	/^    char_u	*m_str;		\/* mapped to, rhs *\/$/;"	m	struct:mapblock	access:public
mapblock_T	vim/vim/src/structs.h	/^typedef struct mapblock mapblock_T;$/;"	t	typeref:struct:mapblock
maphash	vim/vim/src/getchar.c	/^static mapblock_T	*(maphash[256]);$/;"	v	file:
maphash_valid	vim/vim/src/getchar.c	/^static int		maphash_valid = FALSE;$/;"	v	file:
mapped	vim/vim/src/gui_gtk_f.c	/^    gint mapped;$/;"	m	struct:_GtkFormChild	file:	access:public
mapped_ctrl_c	vim/vim/src/globals.h	/^EXTERN int	mapped_ctrl_c INIT(= FALSE); \/* modes where CTRL-C is mapped *\/$/;"	v
mapsigntype	vim/vim/src/netbeans.c	/^mapsigntype(nbbuf_T *buf, int localsigntype)$/;"	f	file:	signature:(nbbuf_T *buf, int localsigntype)
mapsigntype	vim/vim/src/netbeans.c	/^static int  mapsigntype(nbbuf_T *, int localsigntype);$/;"	p	file:	signature:(nbbuf_T *, int localsigntype)
maptick	vim/vim/src/globals.h	/^EXTERN int	maptick INIT(= 0);	\/* tick for each non-mapped char *\/$/;"	v
mark	vim/vim/src/structs.h	/^    pos_T	mark;		\/* cursor position *\/$/;"	m	struct:filemark	access:public
mark_adjust	vim/vim/src/mark.c	/^mark_adjust($/;"	f	signature:( linenr_T line1, linenr_T line2, long amount, long amount_after)
mark_adjust_internal	vim/vim/src/mark.c	/^mark_adjust_internal($/;"	f	file:	signature:( linenr_T line1, linenr_T line2, long amount, long amount_after, int adjust_folds UNUSED)
mark_adjust_internal	vim/vim/src/mark.c	/^static void mark_adjust_internal(linenr_T line1, linenr_T line2, long amount,$/;"	p	file:	signature:(linenr_T line1, linenr_T line2, long amount, long amount_after, int adjust_folds)
mark_adjust_nofold	vim/vim/src/mark.c	/^mark_adjust_nofold($/;"	f	signature:( linenr_T line1, linenr_T line2, long amount, long amount_after)
mark_col_adjust	vim/vim/src/mark.c	/^mark_col_adjust($/;"	f	signature:( linenr_T lnum, colnr_T mincol, long lnum_amount, long col_amount)
mark_line	vim/vim/src/mark.c	/^mark_line(pos_T *mp, int lead_len)$/;"	f	file:	signature:(pos_T *mp, int lead_len)
mark_line	vim/vim/src/mark.c	/^static char_u *mark_line(pos_T *mp, int lead_len);$/;"	p	file:	signature:(pos_T *mp, int lead_len)
mark_quickfix_ctx	vim/vim/src/quickfix.c	/^mark_quickfix_ctx(qf_info_T *qi, int copyID)$/;"	f	file:	signature:(qf_info_T *qi, int copyID)
mask_pixel	vim/vim/src/xpm/include/xpm.h	/^    unsigned int mask_pixel;            \/* Color table index of transparent$/;"	m	struct:__anon93	access:public
match	vim/vim/src/gui_xmdlg.c	/^match(SharedFontSelData *data, enum ListSpecifier l, int i)$/;"	f	file:	signature:(SharedFontSelData *data, enum ListSpecifier l, int i)
match	vim/vim/src/structs.h	/^    long	match;		\/* nr of times matched *\/$/;"	m	struct:__anon198	access:public
match	vim/vim/src/structs.h	/^    regmmatch_T	match;	    \/* regexp program for pattern *\/$/;"	m	struct:matchitem	access:public
match	vim/vim/src/syntax.c	/^    int		match;$/;"	m	struct:__anon139	file:	access:public
match_T	vim/vim/src/structs.h	/^} match_T;$/;"	t	typeref:struct:__anon201
match_add	vim/vim/src/window.c	/^match_add($/;"	f	signature:( win_T *wp, char_u *grp, char_u *pat, int prio, int id, list_T *pos_list, char_u *conceal_char UNUSED)
match_backref	vim/vim/src/regexp_nfa.c	/^match_backref($/;"	f	file:	signature:( regsub_T *sub, int subidx, int *bytelen)
match_backref	vim/vim/src/regexp_nfa.c	/^static int match_backref(regsub_T *sub, int subidx, int *bytelen);$/;"	p	file:	signature:(regsub_T *sub, int subidx, int *bytelen)
match_checkcompoundpattern	vim/vim/src/spell.c	/^match_checkcompoundpattern($/;"	f	file:	signature:( char_u *ptr, int wlen, garray_T *gap)
match_checkcompoundpattern	vim/vim/src/spell.c	/^static int match_checkcompoundpattern(char_u *ptr, int wlen, garray_T *gap);$/;"	p	file:	signature:(char_u *ptr, int wlen, garray_T *gap)
match_compoundrule	vim/vim/src/spell.c	/^match_compoundrule(slang_T *slang, char_u *compflags)$/;"	f	file:	signature:(slang_T *slang, char_u *compflags)
match_compoundrule	vim/vim/src/spell.c	/^static int match_compoundrule(slang_T *slang, char_u *compflags);$/;"	p	file:	signature:(slang_T *slang, char_u *compflags)
match_delete	vim/vim/src/window.c	/^match_delete(win_T *wp, int id, int perr)$/;"	f	signature:(win_T *wp, int id, int perr)
match_file_list	vim/vim/src/fileio.c	/^match_file_list(char_u *list, char_u *sfname, char_u *ffname)$/;"	f	signature:(char_u *list, char_u *sfname, char_u *ffname)
match_file_pat	vim/vim/src/fileio.c	/^match_file_pat($/;"	f	file:	signature:( char_u *pattern, regprog_T **prog, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs)
match_file_pat	vim/vim/src/fileio.c	/^static int match_file_pat(char_u *pattern, regprog_T **prog, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs);$/;"	p	file:	signature:(char_u *pattern, regprog_T **prog, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs)
match_follows	vim/vim/src/regexp_nfa.c	/^match_follows(nfa_state_T *startstate, int depth)$/;"	f	file:	signature:(nfa_state_T *startstate, int depth)
match_follows	vim/vim/src/regexp_nfa.c	/^static int match_follows(nfa_state_T *startstate, int depth);$/;"	p	file:	signature:(nfa_state_T *startstate, int depth)
match_suffix	vim/vim/src/misc1.c	/^match_suffix(char_u *fname)$/;"	f	signature:(char_u *fname)
match_text	vim/vim/src/regexp.h	/^    char_u		*match_text;	\/* plain text to match with *\/$/;"	m	struct:__anon144	access:public
match_user	vim/vim/src/misc1.c	/^int match_user(char_u* name)$/;"	f	signature:(char_u* name)
match_with_backref	vim/vim/src/regexp.c	/^match_with_backref($/;"	f	file:	signature:( linenr_T start_lnum, colnr_T start_col, linenr_T end_lnum, colnr_T end_col, int *bytelen)
match_with_backref	vim/vim/src/regexp.c	/^static int	match_with_backref(linenr_T start_lnum, colnr_T start_col, linenr_T end_lnum, colnr_T end_col, int *bytelen);$/;"	p	file:	signature:(linenr_T start_lnum, colnr_T start_col, linenr_T end_lnum, colnr_T end_col, int *bytelen)
match_zref	vim/vim/src/regexp_nfa.c	/^match_zref($/;"	f	file:	signature:( int subidx, int *bytelen)
match_zref	vim/vim/src/regexp_nfa.c	/^static int match_zref(int subidx, int *bytelen);$/;"	p	file:	signature:(int subidx, int *bytelen)
matched	vim/vim/src/search.c	/^    int		matched;	\/* Found a match in this file *\/$/;"	m	struct:SearchedFile	file:	access:public
matches	vim/vim/src/regexp.h	/^    char_u		*matches[NSUBEXP];$/;"	m	struct:__anon147	access:public
matchinf_S	vim/vim/src/spell.c	/^typedef struct matchinf_S$/;"	s	file:
matchinf_S::mi_capflags	vim/vim/src/spell.c	/^    int		mi_capflags;		\/* WF_ONECAP WF_ALLCAP WF_KEEPCAP *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_cend	vim/vim/src/spell.c	/^    char_u	*mi_cend;		\/* char after what was used for$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_compextra	vim/vim/src/spell.c	/^    int		mi_compextra;		\/* nr of COMPOUNDROOT words *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_compflags	vim/vim/src/spell.c	/^    char_u	mi_compflags[MAXWLEN];	\/* flags for compound words used *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_complen	vim/vim/src/spell.c	/^    int		mi_complen;		\/* nr of compound words used *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_compoff	vim/vim/src/spell.c	/^    int		mi_compoff;		\/* start of following word offset *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_cprefixlen	vim/vim/src/spell.c	/^    int		mi_cprefixlen;		\/* byte length of prefix in original$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_end	vim/vim/src/spell.c	/^    char_u	*mi_end;		\/* end of matching word so far *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_end2	vim/vim/src/spell.c	/^    char_u	*mi_end2;		\/* "mi_end" without following word *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_fend	vim/vim/src/spell.c	/^    char_u	*mi_fend;		\/* next char to be added to mi_fword *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_fword	vim/vim/src/spell.c	/^    char_u	mi_fword[MAXWLEN + 1];	\/* mi_word case-folded *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_fwordlen	vim/vim/src/spell.c	/^    int		mi_fwordlen;		\/* nr of valid bytes in mi_fword *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_lp	vim/vim/src/spell.c	/^    langp_T	*mi_lp;			\/* info for language and region *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_prefarridx	vim/vim/src/spell.c	/^    int		mi_prefarridx;		\/* index in sl_pidxs with list of$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_prefcnt	vim/vim/src/spell.c	/^    int		mi_prefcnt;		\/* number of entries at mi_prefarridx *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_prefixlen	vim/vim/src/spell.c	/^    int		mi_prefixlen;		\/* byte length of prefix *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_result	vim/vim/src/spell.c	/^    int		mi_result;		\/* result so far: SP_BAD, SP_OK, etc. *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_result2	vim/vim/src/spell.c	/^    int		mi_result2;		\/* "mi_resul" without following word *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_win	vim/vim/src/spell.c	/^    win_T	*mi_win;		\/* buffer being checked *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_S::mi_word	vim/vim/src/spell.c	/^    char_u	*mi_word;		\/* start of word being checked *\/$/;"	m	struct:matchinf_S	file:	access:public
matchinf_T	vim/vim/src/spell.c	/^} matchinf_T;$/;"	t	typeref:struct:matchinf_S	file:
matchitem	vim/vim/src/structs.h	/^struct matchitem$/;"	s
matchitem::conceal_char	vim/vim/src/structs.h	/^    int		conceal_char; \/* cchar for Conceal highlighting *\/$/;"	m	struct:matchitem	access:public
matchitem::hl	vim/vim/src/structs.h	/^    match_T	hl;	    \/* struct for doing the actual highlighting *\/$/;"	m	struct:matchitem	access:public
matchitem::hlg_id	vim/vim/src/structs.h	/^    int		hlg_id;	    \/* highlight group ID *\/$/;"	m	struct:matchitem	access:public
matchitem::id	vim/vim/src/structs.h	/^    int		id;	    \/* match ID *\/$/;"	m	struct:matchitem	access:public
matchitem::match	vim/vim/src/structs.h	/^    regmmatch_T	match;	    \/* regexp program for pattern *\/$/;"	m	struct:matchitem	access:public
matchitem::next	vim/vim/src/structs.h	/^    matchitem_T	*next;$/;"	m	struct:matchitem	access:public
matchitem::pattern	vim/vim/src/structs.h	/^    char_u	*pattern;   \/* pattern to highlight *\/$/;"	m	struct:matchitem	access:public
matchitem::pos	vim/vim/src/structs.h	/^    posmatch_T	pos;	    \/* position matches *\/$/;"	m	struct:matchitem	access:public
matchitem::priority	vim/vim/src/structs.h	/^    int		priority;   \/* match priority *\/$/;"	m	struct:matchitem	access:public
matchitem_T	vim/vim/src/structs.h	/^typedef struct matchitem matchitem_T;$/;"	t	typeref:struct:matchitem
max	vim/vim/src/gui.h	/^    long	max;		\/* Number of lines in buffer *\/$/;"	m	struct:GuiScrollbar	access:public
max	vim/vim/src/gui_at_sb.h	/^    float	  max;		\/* Maximum value for top *\/$/;"	m	struct:__anon84	access:public
max_alist_id	vim/vim/src/globals.h	/^EXTERN int	max_alist_id INIT(= 0);	    \/* the previous argument list id *\/$/;"	v
max_min	vim/vim/src/evalfunc.c	/^max_min(typval_T *argvars, typval_T *rettv, int domax)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int domax)
max_min	vim/vim/src/evalfunc.c	/^static void max_min(typval_T *argvars, typval_T *rettv, int domax);$/;"	p	file:	signature:(typval_T *argvars, typval_T *rettv, int domax)
max_topfill	vim/vim/src/move.c	/^max_topfill(void)$/;"	f	file:	signature:(void)
max_topfill	vim/vim/src/move.c	/^static void max_topfill(void);$/;"	p	file:	signature:(void)
maxa	vim/vim/src/if_mzsch.c	/^    int		maxa;$/;"	m	struct:__anon9	file:	access:public
maxval	vim/vim/src/regexp.c	/^    long	maxval;$/;"	m	struct:regstar_S	file:	access:public
may_adjust_color_count	vim/vim/src/term.c	/^may_adjust_color_count(int val)$/;"	f	file:	signature:(int val)
may_clear_cmdline	vim/vim/src/normal.c	/^may_clear_cmdline(void)$/;"	f	file:	signature:(void)
may_clear_cmdline	vim/vim/src/normal.c	/^static void	may_clear_cmdline(void);$/;"	p	file:	signature:(void)
may_clear_sb_text	vim/vim/src/message.c	/^may_clear_sb_text(void)$/;"	f	signature:(void)
may_core_dump	vim/vim/src/os_unix.c	/^may_core_dump(void)$/;"	f	file:	signature:(void)
may_core_dump	vim/vim/src/os_unix.c	/^static void may_core_dump(void);$/;"	p	file:	signature:(void)
may_garbage_collect	vim/vim/src/globals.h	/^EXTERN int	may_garbage_collect INIT(= FALSE);$/;"	v
may_get_selection	vim/vim/src/ops.c	/^may_get_selection(int regname)$/;"	f	signature:(int regname)
may_invoke_callback	vim/vim/src/channel.c	/^may_invoke_callback(channel_T *channel, ch_part_T part)$/;"	f	file:	signature:(channel_T *channel, ch_part_T part)
may_open_tabpage	vim/vim/src/window.c	/^may_open_tabpage(void)$/;"	f	signature:(void)
may_req_ambiguous_char_width	vim/vim/src/term.c	/^may_req_ambiguous_char_width(void)$/;"	f	signature:(void)
may_req_bg_color	vim/vim/src/term.c	/^may_req_bg_color(void)$/;"	f	signature:(void)
may_req_termresponse	vim/vim/src/term.c	/^may_req_termresponse(void)$/;"	f	signature:(void)
may_restore_clipboard	vim/vim/src/os_unix.c	/^may_restore_clipboard(void)$/;"	f	file:	signature:(void)
may_restore_clipboard	vim/vim/src/os_unix.c	/^static void may_restore_clipboard(void);$/;"	p	file:	signature:(void)
may_set_selection	vim/vim/src/ops.c	/^may_set_selection(void)$/;"	f	file:	signature:(void)
may_set_selection	vim/vim/src/ops.c	/^static void	may_set_selection(void);$/;"	p	file:	signature:(void)
may_start_select	vim/vim/src/normal.c	/^may_start_select(int c)$/;"	f	signature:(int c)
may_sync_undo	vim/vim/src/getchar.c	/^may_sync_undo(void)$/;"	f	file:	signature:(void)
may_sync_undo	vim/vim/src/getchar.c	/^static void	may_sync_undo(void);$/;"	p	file:	signature:(void)
may_toggle_cursor	vim/vim/src/terminal.c	/^may_toggle_cursor(term_T *term)$/;"	f	file:	signature:(term_T *term)
maybe_intro_message	vim/vim/src/version.c	/^maybe_intro_message(void)$/;"	f	signature:(void)
mb_adjust_cursor	vim/vim/src/mbyte.c	/^mb_adjust_cursor(void)$/;"	f	signature:(void)
mb_adjust_opend	vim/vim/src/ops.c	/^mb_adjust_opend(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
mb_adjust_opend	vim/vim/src/ops.c	/^static void	mb_adjust_opend(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
mb_adjustpos	vim/vim/src/mbyte.c	/^mb_adjustpos(buf_T *buf, pos_T *lp)$/;"	f	signature:(buf_T *buf, pos_T *lp)
mb_bytelen_tab	vim/vim/src/globals.h	/^EXTERN char	mb_bytelen_tab[256];$/;"	v
mb_charlen	vim/vim/src/mbyte.c	/^mb_charlen(char_u *str)$/;"	f	signature:(char_u *str)
mb_charlen_len	vim/vim/src/mbyte.c	/^mb_charlen_len(char_u *str, int len)$/;"	f	signature:(char_u *str, int len)
mb_copy_char	vim/vim/src/mbyte.c	/^mb_copy_char(char_u **fp, char_u **tp)$/;"	f	signature:(char_u **fp, char_u **tp)
mb_cptr2char_adv	vim/vim/src/mbyte.c	/^mb_cptr2char_adv(char_u **pp)$/;"	f	signature:(char_u **pp)
mb_decompose	vim/vim/src/regexp.c	/^mb_decompose(int c, int *c1, int *c2, int *c3)$/;"	f	file:	signature:(int c, int *c1, int *c2, int *c3)
mb_decompose	vim/vim/src/regexp.c	/^static void mb_decompose(int c, int *c1, int *c2, int *c3);$/;"	p	file:	signature:(int c, int *c1, int *c2, int *c3)
mb_fix_col	vim/vim/src/mbyte.c	/^mb_fix_col(int col, int row)$/;"	f	signature:(int col, int row)
mb_get_class	vim/vim/src/mbyte.c	/^mb_get_class(char_u *p)$/;"	f	signature:(char_u *p)
mb_get_class_buf	vim/vim/src/mbyte.c	/^mb_get_class_buf(char_u *p, buf_T *buf)$/;"	f	signature:(char_u *p, buf_T *buf)
mb_init	vim/vim/src/mbyte.c	/^mb_init(void)$/;"	f	signature:(void)
mb_lefthalve	vim/vim/src/mbyte.c	/^mb_lefthalve(int row, int col)$/;"	f	signature:(int row, int col)
mb_off_next	vim/vim/src/mbyte.c	/^mb_off_next(char_u *base, char_u *p)$/;"	f	signature:(char_u *base, char_u *p)
mb_prevptr	vim/vim/src/mbyte.c	/^mb_prevptr($/;"	f	signature:( char_u *line, char_u *p)
mb_ptr2char_adv	vim/vim/src/mbyte.c	/^mb_ptr2char_adv(char_u **pp)$/;"	f	signature:(char_u **pp)
mb_replace_pop_ins	vim/vim/src/edit.c	/^mb_replace_pop_ins(int cc)$/;"	f	file:	signature:(int cc)
mb_replace_pop_ins	vim/vim/src/edit.c	/^static void mb_replace_pop_ins(int cc);$/;"	p	file:	signature:(int cc)
mb_str2wide	vim/vim/src/spellfile.c	/^mb_str2wide(char_u *s)$/;"	f	file:	signature:(char_u *s)
mb_str2wide	vim/vim/src/spellfile.c	/^static int *mb_str2wide(char_u *s);$/;"	p	file:	signature:(char_u *s)
mb_string2cells	vim/vim/src/mbyte.c	/^mb_string2cells(char_u *p, int len)$/;"	f	signature:(char_u *p, int len)
mb_strnicmp	vim/vim/src/mbyte.c	/^mb_strnicmp(char_u *s1, char_u *s2, size_t nn)$/;"	f	signature:(char_u *s1, char_u *s2, size_t nn)
mb_tail_off	vim/vim/src/mbyte.c	/^mb_tail_off(char_u *base, char_u *p)$/;"	f	signature:(char_u *base, char_u *p)
mb_unescape	vim/vim/src/mbyte.c	/^mb_unescape(char_u **pp)$/;"	f	signature:(char_u **pp)
mbfont_opts	vim/vim/src/hardcopy.c	/^static option_table_T mbfont_opts[OPT_MBFONT_NUM_OPTIONS] =$/;"	v	file:
mcase	vim/vim/src/gui_gtk.c	/^    GtkWidget *mcase;	\/* 'Match case' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
mcase	vim/vim/src/gui_motif.c	/^    Widget mcase;	\/* 'match case' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
mch_FullName	vim/vim/src/os_amiga.c	/^mch_FullName($/;"	f	signature:( char_u *fname, char_u *buf, int len, int force)
mch_FullName	vim/vim/src/os_mswin.c	/^mch_FullName($/;"	f	signature:( char_u *fname, char_u *buf, int len, int force UNUSED)
mch_FullName	vim/vim/src/os_unix.c	/^mch_FullName($/;"	f	signature:( char_u *fname, char_u *buf, int len, int force)
mch_access	vim/vim/src/macros.h	183;"	d
mch_access	vim/vim/src/macros.h	192;"	d
mch_access	vim/vim/src/os_win32.c	/^mch_access(char *n, int p)$/;"	f	signature:(char *n, int p)
mch_avail_mem	vim/vim/src/os_amiga.c	/^mch_avail_mem(int special)$/;"	f	signature:(int special)
mch_breakcheck	vim/vim/src/os_amiga.c	/^mch_breakcheck(int force)$/;"	f	signature:(int force)
mch_breakcheck	vim/vim/src/os_unix.c	/^mch_breakcheck(int force)$/;"	f	signature:(int force)
mch_breakcheck	vim/vim/src/os_win32.c	/^mch_breakcheck(int force)$/;"	f	signature:(int force)
mch_call_shell	vim/vim/src/os_amiga.c	/^mch_call_shell($/;"	f	signature:( char_u *cmd, int options)
mch_call_shell	vim/vim/src/os_unix.c	/^mch_call_shell($/;"	f	signature:( char_u *cmd, int options)
mch_call_shell	vim/vim/src/os_win32.c	/^mch_call_shell($/;"	f	signature:( char_u *cmd, int options)
mch_can_exe	vim/vim/src/os_amiga.c	/^mch_can_exe(char_u *name, char_u **path, int use_path)$/;"	f	signature:(char_u *name, char_u **path, int use_path)
mch_can_exe	vim/vim/src/os_unix.c	/^mch_can_exe(char_u *name, char_u **path, int use_path)$/;"	f	signature:(char_u *name, char_u **path, int use_path)
mch_can_exe	vim/vim/src/os_win32.c	/^mch_can_exe(char_u *name, char_u **path, int use_path)$/;"	f	signature:(char_u *name, char_u **path, int use_path)
mch_can_restore_icon	vim/vim/src/os_amiga.c	/^mch_can_restore_icon(void)$/;"	f	signature:(void)
mch_can_restore_icon	vim/vim/src/os_mswin.c	/^mch_can_restore_icon(void)$/;"	f	signature:(void)
mch_can_restore_icon	vim/vim/src/os_unix.c	/^mch_can_restore_icon(void)$/;"	f	signature:(void)
mch_can_restore_title	vim/vim/src/os_amiga.c	/^mch_can_restore_title(void)$/;"	f	signature:(void)
mch_can_restore_title	vim/vim/src/os_mswin.c	/^mch_can_restore_title(void)$/;"	f	signature:(void)
mch_can_restore_title	vim/vim/src/os_unix.c	/^mch_can_restore_title(void)$/;"	f	signature:(void)
mch_char_avail	vim/vim/src/os_amiga.c	/^mch_char_avail(void)$/;"	f	signature:(void)
mch_char_avail	vim/vim/src/os_mswin.c	/^mch_char_avail(void)$/;"	f	signature:(void)
mch_char_avail	vim/vim/src/os_unix.c	/^mch_char_avail(void)$/;"	f	signature:(void)
mch_char_avail	vim/vim/src/os_win32.c	/^mch_char_avail(void)$/;"	f	signature:(void)
mch_chdir	vim/vim/src/dosinst.h	/^mch_chdir(char *path)$/;"	f	signature:(char *path)
mch_chdir	vim/vim/src/os_amiga.h	226;"	d
mch_chdir	vim/vim/src/os_mswin.c	/^mch_chdir(char *path)$/;"	f	signature:(char *path)
mch_chdir	vim/vim/src/os_unix.c	/^mch_chdir(char *path)$/;"	f	signature:(char *path)
mch_check_win	vim/vim/src/os_amiga.c	/^mch_check_win(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
mch_check_win	vim/vim/src/os_unix.c	/^mch_check_win(int argc UNUSED, char **argv UNUSED)$/;"	f	signature:(int argc UNUSED, char **argv UNUSED)
mch_check_win	vim/vim/src/os_win32.c	/^mch_check_win($/;"	f	signature:( int argc UNUSED, char **argv UNUSED)
mch_clear_job	vim/vim/src/os_unix.c	/^mch_clear_job(job_T *job)$/;"	f	signature:(job_T *job)
mch_clear_job	vim/vim/src/os_win32.c	/^mch_clear_job(job_T *job)$/;"	f	signature:(job_T *job)
mch_copy_file_attribute	vim/vim/src/os_win32.c	/^mch_copy_file_attribute(char_u *from, char_u *to)$/;"	f	signature:(char_u *from, char_u *to)
mch_copy_sec	vim/vim/src/os_unix.c	/^mch_copy_sec(char_u *from_file, char_u *to_file)$/;"	f	signature:(char_u *from_file, char_u *to_file)
mch_delay	vim/vim/src/os_amiga.c	/^mch_delay(long msec, int ignoreinput)$/;"	f	signature:(long msec, int ignoreinput)
mch_delay	vim/vim/src/os_unix.c	/^mch_delay(long msec, int ignoreinput)$/;"	f	signature:(long msec, int ignoreinput)
mch_delay	vim/vim/src/os_win32.c	/^mch_delay($/;"	f	signature:( long msec, int ignoreinput UNUSED)
mch_detect_ended_job	vim/vim/src/os_unix.c	/^mch_detect_ended_job(job_T *job_list)$/;"	f	signature:(job_T *job_list)
mch_detect_ended_job	vim/vim/src/os_win32.c	/^mch_detect_ended_job(job_T *job_list)$/;"	f	signature:(job_T *job_list)
mch_didjmp	vim/vim/src/os_unix.c	/^mch_didjmp(void)$/;"	f	signature:(void)
mch_dirname	vim/vim/src/os_amiga.c	/^mch_dirname(char_u *buf, int len)$/;"	f	signature:(char_u *buf, int len)
mch_dirname	vim/vim/src/os_unix.c	/^mch_dirname(char_u *buf, int len)$/;"	f	signature:(char_u *buf, int len)
mch_dirname	vim/vim/src/os_win32.c	/^mch_dirname($/;"	f	signature:( char_u *buf, int len)
mch_early_init	vim/vim/src/os_amiga.c	/^mch_early_init(void)$/;"	f	signature:(void)
mch_early_init	vim/vim/src/os_mswin.c	/^mch_early_init(void)$/;"	f	signature:(void)
mch_early_init	vim/vim/src/os_unix.c	/^mch_early_init(void)$/;"	f	signature:(void)
mch_endjmp	vim/vim/src/os_unix.c	/^mch_endjmp(void)$/;"	f	signature:(void)
mch_errmsg	vim/vim/src/message.c	/^mch_errmsg(char *str)$/;"	f	signature:(char *str)
mch_errmsg	vim/vim/src/message.c	2963;"	d	file:
mch_errmsg	vim/vim/src/vim.h	2126;"	d
mch_exit	vim/vim/src/os_amiga.c	/^mch_exit(int r)$/;"	f	signature:(int r)
mch_exit	vim/vim/src/os_mswin.c	/^mch_exit(int r)$/;"	f	signature:(int r)
mch_exit	vim/vim/src/os_unix.c	/^mch_exit(int r)$/;"	f	signature:(int r)
mch_exit	vim/vim/src/os_win32.c	/^mch_exit(int r)$/;"	f	signature:(int r)
mch_expand_wildcards	vim/vim/src/os_unix.c	/^mch_expand_wildcards($/;"	f	signature:( int num_pat, char_u **pat, int *num_file, char_u ***file, int flags)
mch_expand_wildcards	vim/vim/src/os_vms.c	/^mch_expand_wildcards(int num_pat, char_u **pat, int *num_file, char_u ***file, int flags)$/;"	f	signature:(int num_pat, char_u **pat, int *num_file, char_u ***file, int flags)
mch_expandpath	vim/vim/src/misc1.c	/^mch_expandpath($/;"	f	signature:( garray_T *gap, char_u *path, int flags)
mch_expandpath	vim/vim/src/os_amiga.c	/^mch_expandpath($/;"	f	signature:( garray_T *gap, char_u *pat, int flags)
mch_expandpath	vim/vim/src/os_unix.c	/^mch_expandpath($/;"	f	signature:( garray_T *gap, char_u *path, int flags)
mch_expandpath	vim/vim/src/os_vms.c	/^mch_expandpath(garray_T *gap, char_u *path, int flags)$/;"	f	signature:(garray_T *gap, char_u *path, int flags)
mch_fopen	vim/vim/src/macros.h	185;"	d
mch_fopen	vim/vim/src/macros.h	195;"	d
mch_fopen	vim/vim/src/os_win32.c	/^mch_fopen(char *name, char *mode)$/;"	f	signature:(char *name, char *mode)
mch_free_acl	vim/vim/src/os_unix.c	/^mch_free_acl(vim_acl_T aclent)$/;"	f	signature:(vim_acl_T aclent)
mch_free_acl	vim/vim/src/os_win32.c	/^mch_free_acl(vim_acl_T acl)$/;"	f	signature:(vim_acl_T acl)
mch_free_mem	vim/vim/src/os_unix.c	/^mch_free_mem(void)$/;"	f	signature:(void)
mch_fstat	vim/vim/src/macros.h	186;"	d
mch_fstat	vim/vim/src/macros.h	197;"	d
mch_get_acl	vim/vim/src/os_unix.c	/^mch_get_acl(char_u *fname UNUSED)$/;"	f	signature:(char_u *fname UNUSED)
mch_get_acl	vim/vim/src/os_win32.c	/^mch_get_acl(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_get_host_name	vim/vim/src/os_amiga.c	/^mch_get_host_name(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
mch_get_host_name	vim/vim/src/os_unix.c	/^mch_get_host_name(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
mch_get_host_name	vim/vim/src/os_win32.c	/^mch_get_host_name($/;"	f	signature:( char_u *s, int len)
mch_get_pid	vim/vim/src/os_amiga.c	/^mch_get_pid(void)$/;"	f	signature:(void)
mch_get_pid	vim/vim/src/os_unix.c	/^mch_get_pid(void)$/;"	f	signature:(void)
mch_get_pid	vim/vim/src/os_win32.c	/^mch_get_pid(void)$/;"	f	signature:(void)
mch_get_shellsize	vim/vim/src/os_amiga.c	/^mch_get_shellsize(void)$/;"	f	signature:(void)
mch_get_shellsize	vim/vim/src/os_mswin.c	/^mch_get_shellsize(void)$/;"	f	signature:(void)
mch_get_shellsize	vim/vim/src/os_unix.c	/^mch_get_shellsize(void)$/;"	f	signature:(void)
mch_get_shellsize	vim/vim/src/os_vms.c	/^mch_get_shellsize(void)$/;"	f	signature:(void)
mch_get_shellsize	vim/vim/src/os_win32.c	/^mch_get_shellsize(void)$/;"	f	signature:(void)
mch_get_uname	vim/vim/src/os_unix.c	/^mch_get_uname(uid_t uid, char_u *s, int len)$/;"	f	signature:(uid_t uid, char_u *s, int len)
mch_get_user_name	vim/vim/src/os_amiga.c	/^mch_get_user_name(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
mch_get_user_name	vim/vim/src/os_unix.c	/^mch_get_user_name(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
mch_get_user_name	vim/vim/src/os_win32.c	/^mch_get_user_name($/;"	f	signature:( char_u *s, int len)
mch_get_winpos	vim/vim/src/os_mswin.c	/^mch_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
mch_getenv	vim/vim/src/os_amiga.c	/^mch_getenv(char_u *var)$/;"	f	signature:(char_u *var)
mch_getenv	vim/vim/src/os_mac.h	249;"	d
mch_getenv	vim/vim/src/os_mac.h	252;"	d
mch_getenv	vim/vim/src/os_mac.h	258;"	d
mch_getenv	vim/vim/src/os_unix.h	450;"	d
mch_getenv	vim/vim/src/os_unix.h	452;"	d
mch_getenv	vim/vim/src/os_vms.c	/^mch_getenv(char_u *lognam)$/;"	f	signature:(char_u *lognam)
mch_getenv	vim/vim/src/os_win32.h	208;"	d
mch_getperm	vim/vim/src/os_amiga.c	/^mch_getperm(char_u *name)$/;"	f	signature:(char_u *name)
mch_getperm	vim/vim/src/os_unix.c	/^mch_getperm(char_u *name)$/;"	f	signature:(char_u *name)
mch_getperm	vim/vim/src/os_win32.c	/^mch_getperm(char_u *name)$/;"	f	signature:(char_u *name)
mch_gpm_process	vim/vim/src/os_unix.c	/^mch_gpm_process(void)$/;"	f	file:	signature:(void)
mch_gpm_process	vim/vim/src/os_unix.c	/^static int mch_gpm_process(void);$/;"	p	file:	signature:(void)
mch_has_exp_wildcard	vim/vim/src/os_amiga.c	/^mch_has_exp_wildcard(char_u *p)$/;"	f	signature:(char_u *p)
mch_has_exp_wildcard	vim/vim/src/os_mswin.c	/^mch_has_exp_wildcard(char_u *p)$/;"	f	signature:(char_u *p)
mch_has_exp_wildcard	vim/vim/src/os_unix.c	/^mch_has_exp_wildcard(char_u *p)$/;"	f	signature:(char_u *p)
mch_has_wildcard	vim/vim/src/os_amiga.c	/^mch_has_wildcard(char_u *p)$/;"	f	signature:(char_u *p)
mch_has_wildcard	vim/vim/src/os_mswin.c	/^mch_has_wildcard(char_u *p)$/;"	f	signature:(char_u *p)
mch_has_wildcard	vim/vim/src/os_unix.c	/^mch_has_wildcard(char_u *p)$/;"	f	signature:(char_u *p)
mch_hide	vim/vim/src/os_amiga.c	/^mch_hide(char_u *name)$/;"	f	signature:(char_u *name)
mch_hide	vim/vim/src/os_unix.c	/^mch_hide(char_u *name UNUSED)$/;"	f	signature:(char_u *name UNUSED)
mch_hide	vim/vim/src/os_win32.c	/^mch_hide(char_u *name)$/;"	f	signature:(char_u *name)
mch_icon_load	vim/vim/src/os_mswin.c	/^mch_icon_load(HANDLE *iconp)$/;"	f	signature:(HANDLE *iconp)
mch_icon_load_cb	vim/vim/src/os_mswin.c	/^mch_icon_load_cb(char_u *fname, void *cookie)$/;"	f	file:	signature:(char_u *fname, void *cookie)
mch_inchar	vim/vim/src/os_amiga.c	/^mch_inchar($/;"	f	signature:( char_u *buf, int maxlen, long time, int tb_change_cnt)
mch_inchar	vim/vim/src/os_unix.c	/^mch_inchar($/;"	f	signature:( char_u *buf, int maxlen, long wtime, int tb_change_cnt)
mch_inchar	vim/vim/src/os_win32.c	/^mch_inchar($/;"	f	signature:( char_u *buf UNUSED, int maxlen UNUSED, long time UNUSED, int tb_change_cnt UNUSED)
mch_init	vim/vim/src/os_amiga.c	/^mch_init(void)$/;"	f	signature:(void)
mch_init	vim/vim/src/os_unix.c	/^mch_init(void)$/;"	f	signature:(void)
mch_init	vim/vim/src/os_win32.c	/^mch_init(void)$/;"	f	signature:(void)
mch_input_isatty	vim/vim/src/os_amiga.c	/^mch_input_isatty(void)$/;"	f	signature:(void)
mch_input_isatty	vim/vim/src/os_mswin.c	/^mch_input_isatty(void)$/;"	f	signature:(void)
mch_input_isatty	vim/vim/src/os_unix.c	/^mch_input_isatty(void)$/;"	f	signature:(void)
mch_isFullName	vim/vim/src/os_amiga.c	/^mch_isFullName(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_isFullName	vim/vim/src/os_mswin.c	/^mch_isFullName(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_isFullName	vim/vim/src/os_unix.c	/^mch_isFullName(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_is_hard_link	vim/vim/src/os_win32.c	/^mch_is_hard_link(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_is_linked	vim/vim/src/os_win32.c	/^mch_is_linked(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_is_symbolic_link	vim/vim/src/os_win32.c	/^mch_is_symbolic_link(char_u *name)$/;"	f	signature:(char_u *name)
mch_isdir	vim/vim/src/os_amiga.c	/^mch_isdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_isdir	vim/vim/src/os_unix.c	/^mch_isdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_isdir	vim/vim/src/os_win32.c	/^mch_isdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_ishidden	vim/vim/src/os_win32.c	/^mch_ishidden(char_u *name)$/;"	f	signature:(char_u *name)
mch_isrealdir	vim/vim/src/os_unix.c	/^mch_isrealdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_isrealdir	vim/vim/src/os_win32.c	/^mch_isrealdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_job_start	vim/vim/src/os_unix.c	/^mch_job_start(char **argv, job_T *job, jobopt_T *options)$/;"	f	signature:(char **argv, job_T *job, jobopt_T *options)
mch_job_start	vim/vim/src/os_win32.c	/^mch_job_start(char *cmd, job_T *job, jobopt_T *options)$/;"	f	signature:(char *cmd, job_T *job, jobopt_T *options)
mch_job_status	vim/vim/src/os_unix.c	/^mch_job_status(job_T *job)$/;"	f	signature:(job_T *job)
mch_job_status	vim/vim/src/os_win32.c	/^mch_job_status(job_T *job)$/;"	f	signature:(job_T *job)
mch_libcall	vim/vim/src/os_mswin.c	/^mch_libcall($/;"	f	signature:( char_u *libname, char_u *funcname, char_u *argstring, int argint, char_u **string_result, int *number_result)
mch_libcall	vim/vim/src/os_unix.c	/^mch_libcall($/;"	f	signature:( char_u *libname, char_u *funcname, char_u *argstring, int argint, char_u **string_result, int *number_result)
mch_lstat	vim/vim/src/macros.h	210;"	d
mch_lstat	vim/vim/src/macros.h	212;"	d
mch_memmove	vim/vim/src/os_unix.h	430;"	d
mch_memmove	vim/vim/src/os_unix.h	433;"	d
mch_memmove	vim/vim/src/os_unix.h	436;"	d
mch_memmove	vim/vim/src/vim.h	1734;"	d
mch_mkdir	vim/vim/src/os_amiga.c	/^mch_mkdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_mkdir	vim/vim/src/os_win32.c	/^mch_mkdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_msg	vim/vim/src/message.c	/^mch_msg(char *str)$/;"	f	signature:(char *str)
mch_msg	vim/vim/src/message.c	2966;"	d	file:
mch_msg	vim/vim/src/vim.h	2128;"	d
mch_new_shellsize	vim/vim/src/os_amiga.c	/^mch_new_shellsize(void)$/;"	f	signature:(void)
mch_new_shellsize	vim/vim/src/os_mswin.c	/^mch_new_shellsize(void)$/;"	f	signature:(void)
mch_new_shellsize	vim/vim/src/os_unix.c	/^mch_new_shellsize(void)$/;"	f	signature:(void)
mch_new_shellsize	vim/vim/src/os_win32.c	/^mch_new_shellsize(void)$/;"	f	signature:(void)
mch_nodetype	vim/vim/src/os_amiga.c	/^mch_nodetype(char_u *name)$/;"	f	signature:(char_u *name)
mch_nodetype	vim/vim/src/os_unix.c	/^mch_nodetype(char_u *name)$/;"	f	signature:(char_u *name)
mch_nodetype	vim/vim/src/os_win32.c	/^mch_nodetype(char_u *name)$/;"	f	signature:(char_u *name)
mch_open	vim/vim/src/macros.h	217;"	d
mch_open	vim/vim/src/macros.h	225;"	d
mch_open	vim/vim/src/macros.h	228;"	d
mch_open	vim/vim/src/os_win32.c	/^mch_open(char *name, int flags, int mode)$/;"	f	signature:(char *name, int flags, int mode)
mch_open_rw	vim/vim/src/macros.h	235;"	d
mch_open_rw	vim/vim/src/macros.h	238;"	d
mch_open_rw	vim/vim/src/macros.h	240;"	d
mch_parse_cmd	vim/vim/src/os_unix.c	/^mch_parse_cmd(char_u *cmd, int use_shcf, char ***argv, int *argc)$/;"	f	signature:(char_u *cmd, int use_shcf, char ***argv, int *argc)
mch_post_buffer_write	vim/vim/src/gui_mac.c	/^mch_post_buffer_write(buf_T *buf)$/;"	f	signature:(buf_T *buf)
mch_print_begin	vim/vim/src/hardcopy.c	/^mch_print_begin(prt_settings_T *psettings)$/;"	f	signature:(prt_settings_T *psettings)
mch_print_begin	vim/vim/src/os_mswin.c	/^mch_print_begin(prt_settings_T *psettings)$/;"	f	signature:(prt_settings_T *psettings)
mch_print_begin_page	vim/vim/src/hardcopy.c	/^mch_print_begin_page(char_u *str UNUSED)$/;"	f	signature:(char_u *str UNUSED)
mch_print_begin_page	vim/vim/src/os_mswin.c	/^mch_print_begin_page(char_u *msg)$/;"	f	signature:(char_u *msg)
mch_print_blank_page	vim/vim/src/hardcopy.c	/^mch_print_blank_page(void)$/;"	f	signature:(void)
mch_print_blank_page	vim/vim/src/os_mswin.c	/^mch_print_blank_page(void)$/;"	f	signature:(void)
mch_print_cleanup	vim/vim/src/hardcopy.c	/^mch_print_cleanup(void)$/;"	f	signature:(void)
mch_print_cleanup	vim/vim/src/os_mswin.c	/^mch_print_cleanup(void)$/;"	f	signature:(void)
mch_print_end	vim/vim/src/hardcopy.c	/^mch_print_end(prt_settings_T *psettings)$/;"	f	signature:(prt_settings_T *psettings)
mch_print_end	vim/vim/src/os_mswin.c	/^mch_print_end(prt_settings_T *psettings UNUSED)$/;"	f	signature:(prt_settings_T *psettings UNUSED)
mch_print_end_page	vim/vim/src/hardcopy.c	/^mch_print_end_page(void)$/;"	f	signature:(void)
mch_print_end_page	vim/vim/src/os_mswin.c	/^mch_print_end_page(void)$/;"	f	signature:(void)
mch_print_init	vim/vim/src/hardcopy.c	/^mch_print_init($/;"	f	signature:( prt_settings_T *psettings, char_u *jobname, int forceit UNUSED)
mch_print_init	vim/vim/src/os_mswin.c	/^mch_print_init(prt_settings_T *psettings, char_u *jobname, int forceit)$/;"	f	signature:(prt_settings_T *psettings, char_u *jobname, int forceit)
mch_print_set_bg	vim/vim/src/hardcopy.c	/^mch_print_set_bg(long_u bgcol)$/;"	f	signature:(long_u bgcol)
mch_print_set_bg	vim/vim/src/os_mswin.c	/^mch_print_set_bg(long_u bgcol)$/;"	f	signature:(long_u bgcol)
mch_print_set_fg	vim/vim/src/hardcopy.c	/^mch_print_set_fg(long_u fgcol)$/;"	f	signature:(long_u fgcol)
mch_print_set_fg	vim/vim/src/os_mswin.c	/^mch_print_set_fg(long_u fgcol)$/;"	f	signature:(long_u fgcol)
mch_print_set_font	vim/vim/src/hardcopy.c	/^mch_print_set_font(int iBold, int iItalic, int iUnderline)$/;"	f	signature:(int iBold, int iItalic, int iUnderline)
mch_print_set_font	vim/vim/src/os_mswin.c	/^mch_print_set_font(int iBold, int iItalic, int iUnderline)$/;"	f	signature:(int iBold, int iItalic, int iUnderline)
mch_print_start_line	vim/vim/src/hardcopy.c	/^mch_print_start_line(int margin, int page_line)$/;"	f	signature:(int margin, int page_line)
mch_print_start_line	vim/vim/src/os_mswin.c	/^mch_print_start_line(int margin, int page_line)$/;"	f	signature:(int margin, int page_line)
mch_print_text_out	vim/vim/src/hardcopy.c	/^mch_print_text_out(char_u *p, int len UNUSED)$/;"	f	signature:(char_u *p, int len UNUSED)
mch_print_text_out	vim/vim/src/os_mswin.c	/^mch_print_text_out(char_u *p, int len)$/;"	f	signature:(char_u *p, int len)
mch_remove	vim/vim/src/os_amiga.h	224;"	d
mch_remove	vim/vim/src/os_mac.h	246;"	d
mch_remove	vim/vim/src/os_unix.h	76;"	d
mch_remove	vim/vim/src/os_unix.h	81;"	d
mch_remove	vim/vim/src/os_win32.c	/^mch_remove(char_u *name)$/;"	f	signature:(char_u *name)
mch_rename	vim/vim/src/os_amiga.h	225;"	d
mch_rename	vim/vim/src/os_mac.h	245;"	d
mch_rename	vim/vim/src/os_unix.c	/^mch_rename(const char *src, const char *dest)$/;"	f	signature:(const char *src, const char *dest)
mch_rename	vim/vim/src/os_unix.h	/^int mch_rename(const char *src, const char *dest);$/;"	p	signature:(const char *src, const char *dest)
mch_rename	vim/vim/src/os_unix.h	442;"	d
mch_rename	vim/vim/src/os_win32.c	/^mch_rename($/;"	f	signature:( const char *pszOldFile, const char *pszNewFile)
mch_report_winsize	vim/vim/src/os_unix.c	/^mch_report_winsize(int fd, int rows, int cols)$/;"	f	signature:(int fd, int rows, int cols)
mch_resolve_shortcut	vim/vim/src/os_mswin.c	/^mch_resolve_shortcut(char_u *fname)$/;"	f	signature:(char_u *fname)
mch_restore_title	vim/vim/src/os_amiga.c	/^mch_restore_title(int which)$/;"	f	signature:(int which)
mch_restore_title	vim/vim/src/os_mswin.c	/^mch_restore_title(int which UNUSED)$/;"	f	signature:(int which UNUSED)
mch_restore_title	vim/vim/src/os_unix.c	/^mch_restore_title(int which)$/;"	f	signature:(int which)
mch_rmdir	vim/vim/src/macros.h	189;"	d
mch_rmdir	vim/vim/src/os_unix.h	80;"	d
mch_rmdir	vim/vim/src/os_win32.c	/^mch_rmdir(char_u *name)$/;"	f	signature:(char_u *name)
mch_screenmode	vim/vim/src/os_amiga.c	/^mch_screenmode(char_u *arg)$/;"	f	signature:(char_u *arg)
mch_screenmode	vim/vim/src/os_mswin.c	/^mch_screenmode(char_u *arg UNUSED)$/;"	f	signature:(char_u *arg UNUSED)
mch_screenmode	vim/vim/src/os_unix.c	/^mch_screenmode(char_u *arg UNUSED)$/;"	f	signature:(char_u *arg UNUSED)
mch_set_acl	vim/vim/src/os_unix.c	/^mch_set_acl(char_u *fname UNUSED, vim_acl_T aclent)$/;"	f	signature:(char_u *fname UNUSED, vim_acl_T aclent)
mch_set_acl	vim/vim/src/os_win32.c	/^mch_set_acl(char_u *fname, vim_acl_T acl)$/;"	f	signature:(char_u *fname, vim_acl_T acl)
mch_set_cursor_shape	vim/vim/src/os_win32.c	/^mch_set_cursor_shape(int thickness)$/;"	f	file:	signature:(int thickness)
mch_set_mouse_shape	vim/vim/src/gui_gtk_x11.c	/^mch_set_mouse_shape(int shape)$/;"	f	signature:(int shape)
mch_set_mouse_shape	vim/vim/src/gui_photon.c	/^mch_set_mouse_shape(int shape)$/;"	f	signature:(int shape)
mch_set_mouse_shape	vim/vim/src/gui_w32.c	/^mch_set_mouse_shape(int shape)$/;"	f	signature:(int shape)
mch_set_mouse_shape	vim/vim/src/gui_x11.c	/^mch_set_mouse_shape(int shape)$/;"	f	signature:(int shape)
mch_set_normal_colors	vim/vim/src/os_win32.c	/^mch_set_normal_colors(void)$/;"	f	signature:(void)
mch_set_shellsize	vim/vim/src/os_amiga.c	/^mch_set_shellsize(void)$/;"	f	signature:(void)
mch_set_shellsize	vim/vim/src/os_mswin.c	/^mch_set_shellsize(void)$/;"	f	signature:(void)
mch_set_shellsize	vim/vim/src/os_unix.c	/^mch_set_shellsize(void)$/;"	f	signature:(void)
mch_set_shellsize	vim/vim/src/os_vms.c	/^mch_set_shellsize(void)$/;"	f	signature:(void)
mch_set_shellsize	vim/vim/src/os_win32.c	/^mch_set_shellsize(void)$/;"	f	signature:(void)
mch_set_winpos	vim/vim/src/os_mswin.c	/^mch_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
mch_set_winsize_now	vim/vim/src/os_win32.c	/^mch_set_winsize_now(void)$/;"	f	signature:(void)
mch_setenv	vim/vim/src/os_amiga.c	/^mch_setenv(char *var, char *value, int x)$/;"	f	signature:(char *var, char *value, int x)
mch_setenv	vim/vim/src/os_mac.h	250;"	d
mch_setenv	vim/vim/src/os_mac.h	254;"	d
mch_setenv	vim/vim/src/os_mac.h	259;"	d
mch_setenv	vim/vim/src/os_unix.h	454;"	d
mch_setenv	vim/vim/src/os_vms.c	/^mch_setenv(char *var, char *value, int x)$/;"	f	signature:(char *var, char *value, int x)
mch_setenv	vim/vim/src/os_win32.c	/^mch_setenv(char *var, char *value, int x)$/;"	f	signature:(char *var, char *value, int x)
mch_setmouse	vim/vim/src/os_unix.c	/^mch_setmouse(int on)$/;"	f	signature:(int on)
mch_setmouse	vim/vim/src/os_win32.c	/^mch_setmouse(int on UNUSED)$/;"	f	signature:(int on UNUSED)
mch_setmouse	vim/vim/src/os_win32.c	/^mch_setmouse(int on)$/;"	f	signature:(int on)
mch_setperm	vim/vim/src/os_amiga.c	/^mch_setperm(char_u *name, long perm)$/;"	f	signature:(char_u *name, long perm)
mch_setperm	vim/vim/src/os_unix.c	/^mch_setperm(char_u *name, long perm)$/;"	f	signature:(char_u *name, long perm)
mch_setperm	vim/vim/src/os_win32.c	/^mch_setperm(char_u *name, long perm)$/;"	f	signature:(char_u *name, long perm)
mch_settitle	vim/vim/src/os_amiga.c	/^mch_settitle(char_u *title, char_u *icon)$/;"	f	signature:(char_u *title, char_u *icon)
mch_settitle	vim/vim/src/os_mswin.c	/^mch_settitle($/;"	f	signature:( char_u *title, char_u *icon)
mch_settitle	vim/vim/src/os_unix.c	/^mch_settitle(char_u *title, char_u *icon)$/;"	f	signature:(char_u *title, char_u *icon)
mch_settmode	vim/vim/src/os_amiga.c	/^mch_settmode(int tmode)$/;"	f	signature:(int tmode)
mch_settmode	vim/vim/src/os_mswin.c	/^mch_settmode(int tmode UNUSED)$/;"	f	signature:(int tmode UNUSED)
mch_settmode	vim/vim/src/os_unix.c	/^mch_settmode(int tmode)$/;"	f	signature:(int tmode)
mch_settmode	vim/vim/src/os_vms.c	/^mch_settmode(int tmode)$/;"	f	signature:(int tmode)
mch_settmode	vim/vim/src/os_win32.c	/^mch_settmode(int tmode)$/;"	f	signature:(int tmode)
mch_stackcheck	vim/vim/src/os_unix.c	/^mch_stackcheck(char *p)$/;"	f	signature:(char *p)
mch_startjmp	vim/vim/src/os_unix.c	/^mch_startjmp(void)$/;"	f	signature:(void)
mch_stat	vim/vim/src/macros.h	188;"	d
mch_stat	vim/vim/src/macros.h	199;"	d
mch_stat	vim/vim/src/macros.h	202;"	d
mch_stat	vim/vim/src/macros.h	204;"	d
mch_stop_job	vim/vim/src/os_unix.c	/^mch_stop_job(job_T *job, char_u *how)$/;"	f	signature:(job_T *job, char_u *how)
mch_stop_job	vim/vim/src/os_win32.c	/^mch_stop_job(job_T *job, char_u *how)$/;"	f	signature:(job_T *job, char_u *how)
mch_suspend	vim/vim/src/os_amiga.c	/^mch_suspend(void)$/;"	f	signature:(void)
mch_suspend	vim/vim/src/os_mswin.c	/^mch_suspend(void)$/;"	f	signature:(void)
mch_suspend	vim/vim/src/os_unix.c	/^mch_suspend(void)$/;"	f	signature:(void)
mch_system	vim/vim/src/os_win32.c	/^mch_system(char *cmd, int options)$/;"	f	file:	signature:(char *cmd, int options)
mch_system	vim/vim/src/os_win32.c	4620;"	d	file:
mch_system_classic	vim/vim/src/os_win32.c	/^mch_system_classic(char *cmd, int options)$/;"	f	file:	signature:(char *cmd, int options)
mch_system_piped	vim/vim/src/os_win32.c	/^mch_system_piped(char *cmd, int options)$/;"	f	file:	signature:(char *cmd, int options)
mch_total_mem	vim/vim/src/os_unix.c	/^mch_total_mem(int special UNUSED)$/;"	f	signature:(int special UNUSED)
mch_total_mem	vim/vim/src/os_win32.c	/^mch_total_mem(int special UNUSED)$/;"	f	signature:(int special UNUSED)
mch_update_cursor	vim/vim/src/os_win32.c	/^mch_update_cursor(void)$/;"	f	signature:(void)
mch_wrename	vim/vim/src/os_win32.c	/^mch_wrename(WCHAR *wold, WCHAR *wnew)$/;"	f	signature:(WCHAR *wold, WCHAR *wnew)
mch_writable	vim/vim/src/os_win32.c	/^mch_writable(char_u *name)$/;"	f	signature:(char_u *name)
mch_write	vim/vim/src/os_amiga.c	/^mch_write(char_u *p, int len)$/;"	f	signature:(char_u *p, int len)
mch_write	vim/vim/src/os_unix.c	/^mch_write(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
mch_write	vim/vim/src/os_win32.c	/^mch_write($/;"	f	signature:( char_u *s UNUSED, int len UNUSED)
mch_write	vim/vim/src/os_win32.c	/^mch_write($/;"	f	signature:( char_u *s, int len)
mcmd_e	vim/vim/src/if_cscope.h	/^} mcmd_e;$/;"	t	typeref:enum:__anon70
medium	vim/vim/src/GvimExt/gvimext.cpp	/^STGMEDIUM medium;$/;"	v
mediumVersion	vim/vim/src/version.c	/^static char	*mediumVersion = VIM_VERSION_MEDIUM;$/;"	v	file:
mem_allocated	vim/vim/src/misc2.c	/^static long_u mem_allocated;$/;"	v	file:
mem_allocs	vim/vim/src/misc2.c	/^static long_u mem_allocs[MEM_SIZES];$/;"	v	file:
mem_freed	vim/vim/src/misc2.c	/^static long_u mem_freed;$/;"	v	file:
mem_frees	vim/vim/src/misc2.c	/^static long_u mem_frees[MEM_SIZES];$/;"	v	file:
mem_peak	vim/vim/src/misc2.c	/^static long_u mem_peak;$/;"	v	file:
mem_post_alloc	vim/vim/src/misc2.c	/^mem_post_alloc($/;"	f	file:	signature:( void **pp, size_t size)
mem_post_alloc	vim/vim/src/misc2.c	/^static void mem_post_alloc(void **pp, size_t size);$/;"	p	file:	signature:(void **pp, size_t size)
mem_pre_alloc_l	vim/vim/src/misc2.c	/^mem_pre_alloc_l(long_u *sizep)$/;"	f	file:	signature:(long_u *sizep)
mem_pre_alloc_l	vim/vim/src/misc2.c	/^static void mem_pre_alloc_l(long_u *sizep);$/;"	p	file:	signature:(long_u *sizep)
mem_pre_alloc_s	vim/vim/src/misc2.c	/^mem_pre_alloc_s(size_t *sizep)$/;"	f	file:	signature:(size_t *sizep)
mem_pre_alloc_s	vim/vim/src/misc2.c	/^static void mem_pre_alloc_s(size_t *sizep);$/;"	p	file:	signature:(size_t *sizep)
mem_pre_free	vim/vim/src/misc2.c	/^mem_pre_free(void **pp)$/;"	f	file:	signature:(void **pp)
mem_pre_free	vim/vim/src/misc2.c	/^static void mem_pre_free(void **pp);$/;"	p	file:	signature:(void **pp)
mem_realloc	vim/vim/src/misc2.c	/^mem_realloc(void *ptr, size_t size)$/;"	f	signature:(void *ptr, size_t size)
memfile	vim/vim/src/structs.h	/^struct memfile$/;"	s
memfile::mf_blocknr_max	vim/vim/src/structs.h	/^    blocknr_T	mf_blocknr_max;		\/* highest positive block number + 1*\/$/;"	m	struct:memfile	access:public
memfile::mf_blocknr_min	vim/vim/src/structs.h	/^    blocknr_T	mf_blocknr_min;		\/* lowest negative block number - 1 *\/$/;"	m	struct:memfile	access:public
memfile::mf_buffer	vim/vim/src/structs.h	/^    buf_T	*mf_buffer;		\/* buffer this memfile is for *\/$/;"	m	struct:memfile	access:public
memfile::mf_dirty	vim/vim/src/structs.h	/^    int		mf_dirty;		\/* TRUE if there are dirty blocks *\/$/;"	m	struct:memfile	access:public
memfile::mf_fd	vim/vim/src/structs.h	/^    int		mf_fd;			\/* file descriptor *\/$/;"	m	struct:memfile	access:public
memfile::mf_ffname	vim/vim/src/structs.h	/^    char_u	*mf_ffname;		\/* idem, full path *\/$/;"	m	struct:memfile	access:public
memfile::mf_fname	vim/vim/src/structs.h	/^    char_u	*mf_fname;		\/* name of the file *\/$/;"	m	struct:memfile	access:public
memfile::mf_free_first	vim/vim/src/structs.h	/^    bhdr_T	*mf_free_first;		\/* first block_hdr in free list *\/$/;"	m	struct:memfile	access:public
memfile::mf_hash	vim/vim/src/structs.h	/^    mf_hashtab_T mf_hash;		\/* hash lists *\/$/;"	m	struct:memfile	access:public
memfile::mf_infile_count	vim/vim/src/structs.h	/^    blocknr_T	mf_infile_count;	\/* number of pages in the file *\/$/;"	m	struct:memfile	access:public
memfile::mf_neg_count	vim/vim/src/structs.h	/^    blocknr_T	mf_neg_count;		\/* number of negative blocks numbers *\/$/;"	m	struct:memfile	access:public
memfile::mf_old_cm	vim/vim/src/structs.h	/^    int		mf_old_cm;$/;"	m	struct:memfile	access:public
memfile::mf_old_key	vim/vim/src/structs.h	/^    char_u	*mf_old_key;$/;"	m	struct:memfile	access:public
memfile::mf_old_seed	vim/vim/src/structs.h	/^    char_u	mf_old_seed[MF_SEED_LEN];$/;"	m	struct:memfile	access:public
memfile::mf_page_size	vim/vim/src/structs.h	/^    unsigned	mf_page_size;		\/* number of bytes in a page *\/$/;"	m	struct:memfile	access:public
memfile::mf_seed	vim/vim/src/structs.h	/^    char_u	mf_seed[MF_SEED_LEN];	\/* seed for encryption *\/$/;"	m	struct:memfile	access:public
memfile::mf_trans	vim/vim/src/structs.h	/^    mf_hashtab_T mf_trans;		\/* trans lists *\/$/;"	m	struct:memfile	access:public
memfile::mf_used_count	vim/vim/src/structs.h	/^    unsigned	mf_used_count;		\/* number of pages in used list *\/$/;"	m	struct:memfile	access:public
memfile::mf_used_count_max	vim/vim/src/structs.h	/^    unsigned	mf_used_count_max;	\/* maximum number of pages in memory *\/$/;"	m	struct:memfile	access:public
memfile::mf_used_first	vim/vim/src/structs.h	/^    bhdr_T	*mf_used_first;		\/* mru block_hdr in used list *\/$/;"	m	struct:memfile	access:public
memfile::mf_used_last	vim/vim/src/structs.h	/^    bhdr_T	*mf_used_last;		\/* lru block_hdr in used list *\/$/;"	m	struct:memfile	access:public
memfile_T	vim/vim/src/structs.h	/^typedef struct memfile	    memfile_T;$/;"	t	typeref:struct:memfile
memline	vim/vim/src/structs.h	/^typedef struct memline$/;"	s
memline::ml_chunksize	vim/vim/src/structs.h	/^    chunksize_T *ml_chunksize;$/;"	m	struct:memline	access:public
memline::ml_flags	vim/vim/src/structs.h	/^    int		ml_flags;$/;"	m	struct:memline	access:public
memline::ml_line_count	vim/vim/src/structs.h	/^    linenr_T	ml_line_count;	\/* number of lines in the buffer *\/$/;"	m	struct:memline	access:public
memline::ml_line_lnum	vim/vim/src/structs.h	/^    linenr_T	ml_line_lnum;	\/* line number of cached line, 0 if not valid *\/$/;"	m	struct:memline	access:public
memline::ml_line_ptr	vim/vim/src/structs.h	/^    char_u	*ml_line_ptr;	\/* pointer to cached line *\/$/;"	m	struct:memline	access:public
memline::ml_locked	vim/vim/src/structs.h	/^    bhdr_T	*ml_locked;	\/* block used by last ml_get *\/$/;"	m	struct:memline	access:public
memline::ml_locked_high	vim/vim/src/structs.h	/^    linenr_T	ml_locked_high;	\/* last line in ml_locked *\/$/;"	m	struct:memline	access:public
memline::ml_locked_lineadd	vim/vim/src/structs.h	/^    int		ml_locked_lineadd;  \/* number of lines inserted in ml_locked *\/$/;"	m	struct:memline	access:public
memline::ml_locked_low	vim/vim/src/structs.h	/^    linenr_T	ml_locked_low;	\/* first line in ml_locked *\/$/;"	m	struct:memline	access:public
memline::ml_mfp	vim/vim/src/structs.h	/^    memfile_T	*ml_mfp;	\/* pointer to associated memfile *\/$/;"	m	struct:memline	access:public
memline::ml_numchunks	vim/vim/src/structs.h	/^    int		ml_numchunks;$/;"	m	struct:memline	access:public
memline::ml_stack	vim/vim/src/structs.h	/^    infoptr_T	*ml_stack;	\/* stack of pointer blocks (array of IPTRs) *\/$/;"	m	struct:memline	access:public
memline::ml_stack_size	vim/vim/src/structs.h	/^    int		ml_stack_size;	\/* total number of entries in ml_stack *\/$/;"	m	struct:memline	access:public
memline::ml_stack_top	vim/vim/src/structs.h	/^    int		ml_stack_top;	\/* current top of ml_stack *\/$/;"	m	struct:memline	access:public
memline::ml_usedchunks	vim/vim/src/structs.h	/^    int		ml_usedchunks;$/;"	m	struct:memline	access:public
memline_T	vim/vim/src/structs.h	/^} memline_T;$/;"	t	typeref:struct:memline
menuBar	vim/vim/src/gui_athena.c	/^static Widget menuBar = (Widget)0;$/;"	v	file:
menuBar	vim/vim/src/gui_motif.c	/^static Widget menuBar;$/;"	v	file:
menuMap	vim/vim/src/workshop.c	/^static MenuMap	*menuMap;		\/* list of verb\/menu mappings *\/$/;"	v	file:
menuMapMax	vim/vim/src/workshop.c	/^static int	 menuMapMax;		\/* allocated size of menuMap *\/$/;"	v	file:
menuMapSize	vim/vim/src/workshop.c	/^static int	 menuMapSize;		\/* current size of menuMap *\/$/;"	v	file:
menuTrans	vim/vim/src/gui_athena.c	/^static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;$/;"	v	file:
menu_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_bg_pixel;		\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
menu_def_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_def_bg_pixel;  \/* Default menu background *\/$/;"	m	struct:Gui	access:public
menu_def_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_def_fg_pixel;  \/* Default menu foreground *\/$/;"	m	struct:Gui	access:public
menu_enabled	vim/vim/src/gui_motif.c	/^static int menu_enabled = TRUE;$/;"	v	file:
menu_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	menu_fg_pixel;		\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
menu_font	vim/vim/src/gui.h	/^    GuiFont	menu_font;	    \/* menu item font *\/$/;"	m	struct:Gui	access:public
menu_fontset	vim/vim/src/gui.h	/^    GuiFontset	menu_fontset;	    \/* set of fonts for multi-byte chars *\/$/;"	m	struct:Gui	access:public
menu_handle	vim/vim/src/structs.h	/^    MenuHandle	menu_handle;$/;"	m	struct:VimMenu	access:public
menu_height	vim/vim/src/gui.h	/^    int		menu_height;	    \/* Height of the menu bar *\/$/;"	m	struct:Gui	access:public
menu_height_fixed	vim/vim/src/gui.h	/^    char	menu_height_fixed;  \/* TRUE if menu height fixed *\/$/;"	m	struct:Gui	access:public
menu_id	vim/vim/src/structs.h	/^    short	menu_id;	    \/* the menu id to which this item belong *\/$/;"	m	struct:VimMenu	access:public
menu_is_active	vim/vim/src/gui.h	/^    char	menu_is_active;	    \/* TRUE if menu is present *\/$/;"	m	struct:Gui	access:public
menu_is_child_of_popup	vim/vim/src/menu.c	/^menu_is_child_of_popup(vimmenu_T *menu)$/;"	f	signature:(vimmenu_T *menu)
menu_is_hidden	vim/vim/src/menu.c	/^menu_is_hidden(char_u *name)$/;"	f	file:	signature:(char_u *name)
menu_is_hidden	vim/vim/src/menu.c	/^static int menu_is_hidden(char_u *name);$/;"	p	file:	signature:(char_u *name)
menu_is_menubar	vim/vim/src/menu.c	/^menu_is_menubar(char_u *name)$/;"	f	signature:(char_u *name)
menu_is_popup	vim/vim/src/menu.c	/^menu_is_popup(char_u *name)$/;"	f	signature:(char_u *name)
menu_is_separator	vim/vim/src/menu.c	/^menu_is_separator(char_u *name)$/;"	f	signature:(char_u *name)
menu_is_tearoff	vim/vim/src/menu.c	/^menu_is_tearoff(char_u *name UNUSED)$/;"	f	file:	signature:(char_u *name UNUSED)
menu_is_tearoff	vim/vim/src/menu.c	/^static int menu_is_tearoff(char_u *name);$/;"	p	file:	signature:(char_u *name)
menu_is_toolbar	vim/vim/src/menu.c	/^menu_is_toolbar(char_u *name)$/;"	f	signature:(char_u *name)
menu_item_activate	vim/vim/src/gui_gtk.c	/^menu_item_activate(GtkWidget *widget UNUSED, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget UNUSED, gpointer data)
menu_item_new	vim/vim/src/gui_gtk.c	/^menu_item_new(vimmenu_T *menu, GtkWidget *parent_widget)$/;"	f	file:	signature:(vimmenu_T *menu, GtkWidget *parent_widget)
menu_mode_chars	vim/vim/src/menu.c	/^static char_u	menu_mode_chars[] = {'n', 'v', 's', 'o', 'i', 'c', 't'};$/;"	v	file:
menu_nable_recurse	vim/vim/src/menu.c	/^menu_nable_recurse($/;"	f	file:	signature:( vimmenu_T *menu, char_u *name, int modes, int enable)
menu_nable_recurse	vim/vim/src/menu.c	/^static int menu_nable_recurse(vimmenu_T *menu, char_u *name, int modes, int enable);$/;"	p	file:	signature:(vimmenu_T *menu, char_u *name, int modes, int enable)
menu_name_equal	vim/vim/src/menu.c	/^menu_name_equal(char_u *name, vimmenu_T *menu)$/;"	f	file:	signature:(char_u *name, vimmenu_T *menu)
menu_name_equal	vim/vim/src/menu.c	/^static int menu_name_equal(char_u *name, vimmenu_T *menu);$/;"	p	file:	signature:(char_u *name, vimmenu_T *menu)
menu_name_skip	vim/vim/src/menu.c	/^menu_name_skip(char_u *name)$/;"	f	signature:(char_u *name)
menu_namecmp	vim/vim/src/menu.c	/^menu_namecmp(char_u *name, char_u *mname)$/;"	f	file:	signature:(char_u *name, char_u *mname)
menu_namecmp	vim/vim/src/menu.c	/^static int menu_namecmp(char_u *name, char_u *mname);$/;"	p	file:	signature:(char_u *name, char_u *mname)
menu_skip_part	vim/vim/src/menu.c	/^menu_skip_part(char_u *p)$/;"	f	file:	signature:(char_u *p)
menu_skip_part	vim/vim/src/menu.c	/^static char_u *menu_skip_part(char_u *p);$/;"	p	file:	signature:(char_u *p)
menu_stock_ids	vim/vim/src/gui_gtk.c	/^static const char * const menu_stock_ids[] =$/;"	v	file:
menu_text	vim/vim/src/menu.c	/^menu_text(char_u *str, int *mnemonic, char_u **actext)$/;"	f	file:	signature:(char_u *str, int *mnemonic, char_u **actext)
menu_text	vim/vim/src/menu.c	/^static char_u *menu_text(char_u *text, int *mnemonic, char_u **actext);$/;"	p	file:	signature:(char_u *text, int *mnemonic, char_u **actext)
menu_themed_names	vim/vim/src/gui_gtk.c	/^static const char * const menu_themed_names[] =$/;"	v	file:
menu_title_removing_mnemonic	vim/vim/src/gui_mac.c	/^menu_title_removing_mnemonic(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
menu_translate_tab_and_shift	vim/vim/src/menu.c	/^menu_translate_tab_and_shift(char_u *arg_start)$/;"	f	file:	signature:(char_u *arg_start)
menu_translate_tab_and_shift	vim/vim/src/menu.c	/^static char_u *menu_translate_tab_and_shift(char_u *arg_start);$/;"	p	file:	signature:(char_u *arg_start)
menu_unescape_name	vim/vim/src/menu.c	/^menu_unescape_name(char_u *name)$/;"	f	file:	signature:(char_u *name)
menu_unescape_name	vim/vim/src/menu.c	/^static void menu_unescape_name(char_u	*p);$/;"	p	file:	signature:(char_u *p)
menu_width	vim/vim/src/gui.h	/^    int		menu_width;	    \/* Width of the menu bar *\/$/;"	m	struct:Gui	access:public
menubar	vim/vim/src/gui.h	/^    GtkWidget	*menubar;	    \/* menubar *\/$/;"	m	struct:Gui	access:public
menubar_h	vim/vim/src/gui.h	/^    GtkWidget	*menubar_h;	    \/* menubar handle *\/$/;"	m	struct:Gui	access:public
menutrans_T	vim/vim/src/menu.c	/^} menutrans_T;$/;"	t	typeref:struct:__anon213	file:
menutrans_ga	vim/vim/src/menu.c	/^static garray_T menutrans_ga = {0, 0, 0, 0, NULL};$/;"	v	file:
menutrans_lookup	vim/vim/src/menu.c	/^menutrans_lookup(char_u *name, int len)$/;"	f	file:	signature:(char_u *name, int len)
menutrans_lookup	vim/vim/src/menu.c	/^static char_u *menutrans_lookup(char_u *name, int len);$/;"	p	file:	signature:(char_u *name, int len)
merge_history	vim/vim/src/ex_getln.c	/^merge_history(int type)$/;"	f	file:	signature:(int type)
messageFromEserve	vim/vim/src/integration.c	/^messageFromEserve(XtPointer clientData UNUSED,$/;"	f	signature:(XtPointer clientData UNUSED, int *dum1 UNUSED, XtInputId *dum2 UNUSED)
messageFromEserve	vim/vim/src/integration.c	/^static void messageFromEserve(XtPointer clientData, int *dum1, XtInputId *dum2);$/;"	p	file:	signature:(XtPointer clientData, int *dum1, XtInputId *dum2)
messageFromServer	vim/vim/src/channel.c	/^messageFromServer(GIOChannel *unused1 UNUSED,$/;"	f	file:	signature:(GIOChannel *unused1 UNUSED, GIOCondition unused2 UNUSED, gpointer clientData)
messageFromServer	vim/vim/src/channel.c	/^messageFromServer(XtPointer clientData,$/;"	f	file:	signature:(XtPointer clientData, int *unused1 UNUSED, XtInputId *unused2 UNUSED)
messageFromServer	vim/vim/src/channel.c	/^messageFromServer(gpointer clientData,$/;"	f	file:	signature:(gpointer clientData, gint unused1 UNUSED, GdkInputCondition unused2 UNUSED)
message_filtered	vim/vim/src/message.c	/^message_filtered(char_u *msg)$/;"	f	signature:(char_u *msg)
message_window	vim/vim/src/os_mswin.c	/^HWND message_window = 0;	    \/* window that's handling messages *\/$/;"	v
messages	vim/vim/src/structs.h	/^    struct msglist	*messages;	\/* message(s) causing error exception *\/$/;"	m	struct:vim_exception	typeref:struct:vim_exception::msglist	access:public
messaging	vim/vim/src/screen.c	/^messaging(void)$/;"	f	signature:(void)
method_nr	vim/vim/src/structs.h	/^    int	    method_nr;$/;"	m	struct:__anon199	access:public
method_state	vim/vim/src/structs.h	/^    void    *method_state;  \/* method-specific state information *\/$/;"	m	struct:__anon199	access:public
mf_alloc_bhdr	vim/vim/src/memfile.c	/^mf_alloc_bhdr(memfile_T *mfp, int page_count)$/;"	f	file:	signature:(memfile_T *mfp, int page_count)
mf_alloc_bhdr	vim/vim/src/memfile.c	/^static bhdr_T *mf_alloc_bhdr(memfile_T *, int);$/;"	p	file:	signature:(memfile_T *, int)
mf_blocknr_max	vim/vim/src/structs.h	/^    blocknr_T	mf_blocknr_max;		\/* highest positive block number + 1*\/$/;"	m	struct:memfile	access:public
mf_blocknr_min	vim/vim/src/structs.h	/^    blocknr_T	mf_blocknr_min;		\/* lowest negative block number - 1 *\/$/;"	m	struct:memfile	access:public
mf_buffer	vim/vim/src/structs.h	/^    buf_T	*mf_buffer;		\/* buffer this memfile is for *\/$/;"	m	struct:memfile	access:public
mf_close	vim/vim/src/memfile.c	/^mf_close(memfile_T *mfp, int del_file)$/;"	f	signature:(memfile_T *mfp, int del_file)
mf_close_file	vim/vim/src/memfile.c	/^mf_close_file($/;"	f	signature:( buf_T *buf, int getlines)
mf_dirty	vim/vim/src/structs.h	/^    int		mf_dirty;		\/* TRUE if there are dirty blocks *\/$/;"	m	struct:memfile	access:public
mf_do_open	vim/vim/src/memfile.c	/^mf_do_open($/;"	f	file:	signature:( memfile_T *mfp, char_u *fname, int flags)
mf_do_open	vim/vim/src/memfile.c	/^static void mf_do_open(memfile_T *, char_u *, int);$/;"	p	file:	signature:(memfile_T *, char_u *, int)
mf_dont_release	vim/vim/src/globals.h	/^EXTERN int	mf_dont_release INIT(= FALSE);	\/* don't release blocks *\/$/;"	v
mf_fd	vim/vim/src/structs.h	/^    int		mf_fd;			\/* file descriptor *\/$/;"	m	struct:memfile	access:public
mf_ffname	vim/vim/src/structs.h	/^    char_u	*mf_ffname;		\/* idem, full path *\/$/;"	m	struct:memfile	access:public
mf_find_hash	vim/vim/src/memfile.c	/^mf_find_hash(memfile_T *mfp, blocknr_T nr)$/;"	f	file:	signature:(memfile_T *mfp, blocknr_T nr)
mf_find_hash	vim/vim/src/memfile.c	/^static bhdr_T *mf_find_hash(memfile_T *, blocknr_T);$/;"	p	file:	signature:(memfile_T *, blocknr_T)
mf_fname	vim/vim/src/structs.h	/^    char_u	*mf_fname;		\/* name of the file *\/$/;"	m	struct:memfile	access:public
mf_free	vim/vim/src/memfile.c	/^mf_free(memfile_T *mfp, bhdr_T *hp)$/;"	f	signature:(memfile_T *mfp, bhdr_T *hp)
mf_free_bhdr	vim/vim/src/memfile.c	/^mf_free_bhdr(bhdr_T *hp)$/;"	f	file:	signature:(bhdr_T *hp)
mf_free_bhdr	vim/vim/src/memfile.c	/^static void mf_free_bhdr(bhdr_T *);$/;"	p	file:	signature:(bhdr_T *)
mf_free_first	vim/vim/src/structs.h	/^    bhdr_T	*mf_free_first;		\/* first block_hdr in free list *\/$/;"	m	struct:memfile	access:public
mf_fullname	vim/vim/src/memfile.c	/^mf_fullname(memfile_T *mfp)$/;"	f	signature:(memfile_T *mfp)
mf_get	vim/vim/src/memfile.c	/^mf_get(memfile_T *mfp, blocknr_T nr, int page_count)$/;"	f	signature:(memfile_T *mfp, blocknr_T nr, int page_count)
mf_hash	vim/vim/src/structs.h	/^    mf_hashtab_T mf_hash;		\/* hash lists *\/$/;"	m	struct:memfile	access:public
mf_hash_add_item	vim/vim/src/memfile.c	/^mf_hash_add_item(mf_hashtab_T *mht, mf_hashitem_T *mhi)$/;"	f	file:	signature:(mf_hashtab_T *mht, mf_hashitem_T *mhi)
mf_hash_add_item	vim/vim/src/memfile.c	/^static void mf_hash_add_item(mf_hashtab_T *, mf_hashitem_T *);$/;"	p	file:	signature:(mf_hashtab_T *, mf_hashitem_T *)
mf_hash_find	vim/vim/src/memfile.c	/^mf_hash_find(mf_hashtab_T *mht, blocknr_T key)$/;"	f	file:	signature:(mf_hashtab_T *mht, blocknr_T key)
mf_hash_find	vim/vim/src/memfile.c	/^static mf_hashitem_T *mf_hash_find(mf_hashtab_T *, blocknr_T);$/;"	p	file:	signature:(mf_hashtab_T *, blocknr_T)
mf_hash_free	vim/vim/src/memfile.c	/^mf_hash_free(mf_hashtab_T *mht)$/;"	f	file:	signature:(mf_hashtab_T *mht)
mf_hash_free	vim/vim/src/memfile.c	/^static void mf_hash_free(mf_hashtab_T *);$/;"	p	file:	signature:(mf_hashtab_T *)
mf_hash_free_all	vim/vim/src/memfile.c	/^mf_hash_free_all(mf_hashtab_T *mht)$/;"	f	file:	signature:(mf_hashtab_T *mht)
mf_hash_free_all	vim/vim/src/memfile.c	/^static void mf_hash_free_all(mf_hashtab_T *);$/;"	p	file:	signature:(mf_hashtab_T *)
mf_hash_grow	vim/vim/src/memfile.c	/^mf_hash_grow(mf_hashtab_T *mht)$/;"	f	file:	signature:(mf_hashtab_T *mht)
mf_hash_grow	vim/vim/src/memfile.c	/^static int mf_hash_grow(mf_hashtab_T *);$/;"	p	file:	signature:(mf_hashtab_T *)
mf_hash_init	vim/vim/src/memfile.c	/^mf_hash_init(mf_hashtab_T *mht)$/;"	f	file:	signature:(mf_hashtab_T *mht)
mf_hash_init	vim/vim/src/memfile.c	/^static void mf_hash_init(mf_hashtab_T *);$/;"	p	file:	signature:(mf_hashtab_T *)
mf_hash_rem_item	vim/vim/src/memfile.c	/^mf_hash_rem_item(mf_hashtab_T *mht, mf_hashitem_T *mhi)$/;"	f	file:	signature:(mf_hashtab_T *mht, mf_hashitem_T *mhi)
mf_hash_rem_item	vim/vim/src/memfile.c	/^static void mf_hash_rem_item(mf_hashtab_T *, mf_hashitem_T *);$/;"	p	file:	signature:(mf_hashtab_T *, mf_hashitem_T *)
mf_hashitem_S	vim/vim/src/structs.h	/^struct mf_hashitem_S$/;"	s
mf_hashitem_S::mhi_key	vim/vim/src/structs.h	/^    blocknr_T	    mhi_key;$/;"	m	struct:mf_hashitem_S	access:public
mf_hashitem_S::mhi_next	vim/vim/src/structs.h	/^    mf_hashitem_T   *mhi_next;$/;"	m	struct:mf_hashitem_S	access:public
mf_hashitem_S::mhi_prev	vim/vim/src/structs.h	/^    mf_hashitem_T   *mhi_prev;$/;"	m	struct:mf_hashitem_S	access:public
mf_hashitem_T	vim/vim/src/structs.h	/^typedef struct mf_hashitem_S mf_hashitem_T;$/;"	t	typeref:struct:mf_hashitem_S
mf_hashtab_S	vim/vim/src/structs.h	/^typedef struct mf_hashtab_S$/;"	s
mf_hashtab_S::mht_buckets	vim/vim/src/structs.h	/^    mf_hashitem_T   **mht_buckets;  \/* points to mht_small_buckets or$/;"	m	struct:mf_hashtab_S	access:public
mf_hashtab_S::mht_count	vim/vim/src/structs.h	/^    long_u	    mht_count;	    \/* nr of items inserted into hashtable *\/$/;"	m	struct:mf_hashtab_S	access:public
mf_hashtab_S::mht_fixed	vim/vim/src/structs.h	/^    char	    mht_fixed;	    \/* non-zero value forbids growth *\/$/;"	m	struct:mf_hashtab_S	access:public
mf_hashtab_S::mht_mask	vim/vim/src/structs.h	/^    long_u	    mht_mask;	    \/* mask used for hash value (nr of items$/;"	m	struct:mf_hashtab_S	access:public
mf_hashtab_S::mht_small_buckets	vim/vim/src/structs.h	/^    mf_hashitem_T   *mht_small_buckets[MHT_INIT_SIZE];   \/* initial buckets *\/$/;"	m	struct:mf_hashtab_S	access:public
mf_hashtab_T	vim/vim/src/structs.h	/^} mf_hashtab_T;$/;"	t	typeref:struct:mf_hashtab_S
mf_infile_count	vim/vim/src/structs.h	/^    blocknr_T	mf_infile_count;	\/* number of pages in the file *\/$/;"	m	struct:memfile	access:public
mf_ins_free	vim/vim/src/memfile.c	/^mf_ins_free(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_ins_free	vim/vim/src/memfile.c	/^static void mf_ins_free(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_ins_hash	vim/vim/src/memfile.c	/^mf_ins_hash(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_ins_hash	vim/vim/src/memfile.c	/^static void mf_ins_hash(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_ins_used	vim/vim/src/memfile.c	/^mf_ins_used(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_ins_used	vim/vim/src/memfile.c	/^static void mf_ins_used(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_need_trans	vim/vim/src/memfile.c	/^mf_need_trans(memfile_T *mfp)$/;"	f	signature:(memfile_T *mfp)
mf_neg_count	vim/vim/src/structs.h	/^    blocknr_T	mf_neg_count;		\/* number of negative blocks numbers *\/$/;"	m	struct:memfile	access:public
mf_new	vim/vim/src/memfile.c	/^mf_new(memfile_T *mfp, int negative, int page_count)$/;"	f	signature:(memfile_T *mfp, int negative, int page_count)
mf_new_page_size	vim/vim/src/memfile.c	/^mf_new_page_size(memfile_T *mfp, unsigned new_size)$/;"	f	signature:(memfile_T *mfp, unsigned new_size)
mf_old_cm	vim/vim/src/structs.h	/^    int		mf_old_cm;$/;"	m	struct:memfile	access:public
mf_old_key	vim/vim/src/structs.h	/^    char_u	*mf_old_key;$/;"	m	struct:memfile	access:public
mf_old_seed	vim/vim/src/structs.h	/^    char_u	mf_old_seed[MF_SEED_LEN];$/;"	m	struct:memfile	access:public
mf_open	vim/vim/src/memfile.c	/^mf_open(char_u *fname, int flags)$/;"	f	signature:(char_u *fname, int flags)
mf_open_file	vim/vim/src/memfile.c	/^mf_open_file(memfile_T *mfp, char_u *fname)$/;"	f	signature:(memfile_T *mfp, char_u *fname)
mf_page_size	vim/vim/src/structs.h	/^    unsigned	mf_page_size;		\/* number of bytes in a page *\/$/;"	m	struct:memfile	access:public
mf_put	vim/vim/src/memfile.c	/^mf_put($/;"	f	signature:( memfile_T *mfp, bhdr_T *hp, int dirty, int infile)
mf_read	vim/vim/src/memfile.c	/^mf_read(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_read	vim/vim/src/memfile.c	/^static int  mf_read(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_release	vim/vim/src/memfile.c	/^mf_release(memfile_T *mfp, int page_count)$/;"	f	file:	signature:(memfile_T *mfp, int page_count)
mf_release	vim/vim/src/memfile.c	/^static bhdr_T *mf_release(memfile_T *, int);$/;"	p	file:	signature:(memfile_T *, int)
mf_release_all	vim/vim/src/memfile.c	/^mf_release_all(void)$/;"	f	signature:(void)
mf_rem_free	vim/vim/src/memfile.c	/^mf_rem_free(memfile_T *mfp)$/;"	f	file:	signature:(memfile_T *mfp)
mf_rem_free	vim/vim/src/memfile.c	/^static bhdr_T *mf_rem_free(memfile_T *);$/;"	p	file:	signature:(memfile_T *)
mf_rem_hash	vim/vim/src/memfile.c	/^mf_rem_hash(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_rem_hash	vim/vim/src/memfile.c	/^static void mf_rem_hash(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_rem_used	vim/vim/src/memfile.c	/^mf_rem_used(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_rem_used	vim/vim/src/memfile.c	/^static void mf_rem_used(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_seed	vim/vim/src/structs.h	/^    char_u	mf_seed[MF_SEED_LEN];	\/* seed for encryption *\/$/;"	m	struct:memfile	access:public
mf_set_dirty	vim/vim/src/memfile.c	/^mf_set_dirty(memfile_T *mfp)$/;"	f	signature:(memfile_T *mfp)
mf_set_ffname	vim/vim/src/memfile.c	/^mf_set_ffname(memfile_T *mfp)$/;"	f	signature:(memfile_T *mfp)
mf_sync	vim/vim/src/memfile.c	/^mf_sync(memfile_T *mfp, int flags)$/;"	f	signature:(memfile_T *mfp, int flags)
mf_trans	vim/vim/src/structs.h	/^    mf_hashtab_T mf_trans;		\/* trans lists *\/$/;"	m	struct:memfile	access:public
mf_trans_add	vim/vim/src/memfile.c	/^mf_trans_add(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_trans_add	vim/vim/src/memfile.c	/^static int  mf_trans_add(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_trans_del	vim/vim/src/memfile.c	/^mf_trans_del(memfile_T *mfp, blocknr_T old_nr)$/;"	f	signature:(memfile_T *mfp, blocknr_T old_nr)
mf_used_count	vim/vim/src/structs.h	/^    unsigned	mf_used_count;		\/* number of pages in used list *\/$/;"	m	struct:memfile	access:public
mf_used_count_max	vim/vim/src/structs.h	/^    unsigned	mf_used_count_max;	\/* maximum number of pages in memory *\/$/;"	m	struct:memfile	access:public
mf_used_first	vim/vim/src/structs.h	/^    bhdr_T	*mf_used_first;		\/* mru block_hdr in used list *\/$/;"	m	struct:memfile	access:public
mf_used_last	vim/vim/src/structs.h	/^    bhdr_T	*mf_used_last;		\/* lru block_hdr in used list *\/$/;"	m	struct:memfile	access:public
mf_write	vim/vim/src/memfile.c	/^mf_write(memfile_T *mfp, bhdr_T *hp)$/;"	f	file:	signature:(memfile_T *mfp, bhdr_T *hp)
mf_write	vim/vim/src/memfile.c	/^static int  mf_write(memfile_T *, bhdr_T *);$/;"	p	file:	signature:(memfile_T *, bhdr_T *)
mf_write_block	vim/vim/src/memfile.c	/^mf_write_block($/;"	f	file:	signature:( memfile_T *mfp, bhdr_T *hp, off_T offset UNUSED, unsigned size)
mf_write_block	vim/vim/src/memfile.c	/^static int  mf_write_block(memfile_T *mfp, bhdr_T *hp, off_T offset, unsigned size);$/;"	p	file:	signature:(memfile_T *mfp, bhdr_T *hp, off_T offset, unsigned size)
mhi_key	vim/vim/src/structs.h	/^    blocknr_T	    mhi_key;$/;"	m	struct:mf_hashitem_S	access:public
mhi_next	vim/vim/src/structs.h	/^    mf_hashitem_T   *mhi_next;$/;"	m	struct:mf_hashitem_S	access:public
mhi_prev	vim/vim/src/structs.h	/^    mf_hashitem_T   *mhi_prev;$/;"	m	struct:mf_hashitem_S	access:public
mht_buckets	vim/vim/src/structs.h	/^    mf_hashitem_T   **mht_buckets;  \/* points to mht_small_buckets or$/;"	m	struct:mf_hashtab_S	access:public
mht_count	vim/vim/src/structs.h	/^    long_u	    mht_count;	    \/* nr of items inserted into hashtable *\/$/;"	m	struct:mf_hashtab_S	access:public
mht_fixed	vim/vim/src/structs.h	/^    char	    mht_fixed;	    \/* non-zero value forbids growth *\/$/;"	m	struct:mf_hashtab_S	access:public
mht_mask	vim/vim/src/structs.h	/^    long_u	    mht_mask;	    \/* mask used for hash value (nr of items$/;"	m	struct:mf_hashtab_S	access:public
mht_small_buckets	vim/vim/src/structs.h	/^    mf_hashitem_T   *mht_small_buckets[MHT_INIT_SIZE];   \/* initial buckets *\/$/;"	m	struct:mf_hashtab_S	access:public
mi_capflags	vim/vim/src/spell.c	/^    int		mi_capflags;		\/* WF_ONECAP WF_ALLCAP WF_KEEPCAP *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_cend	vim/vim/src/spell.c	/^    char_u	*mi_cend;		\/* char after what was used for$/;"	m	struct:matchinf_S	file:	access:public
mi_compextra	vim/vim/src/spell.c	/^    int		mi_compextra;		\/* nr of COMPOUNDROOT words *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_compflags	vim/vim/src/spell.c	/^    char_u	mi_compflags[MAXWLEN];	\/* flags for compound words used *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_complen	vim/vim/src/spell.c	/^    int		mi_complen;		\/* nr of compound words used *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_compoff	vim/vim/src/spell.c	/^    int		mi_compoff;		\/* start of following word offset *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_cprefixlen	vim/vim/src/spell.c	/^    int		mi_cprefixlen;		\/* byte length of prefix in original$/;"	m	struct:matchinf_S	file:	access:public
mi_cprefixlen	vim/vim/src/spell.c	231;"	d	file:
mi_end	vim/vim/src/spell.c	/^    char_u	*mi_end;		\/* end of matching word so far *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_end2	vim/vim/src/spell.c	/^    char_u	*mi_end2;		\/* "mi_end" without following word *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_fend	vim/vim/src/spell.c	/^    char_u	*mi_fend;		\/* next char to be added to mi_fword *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_fword	vim/vim/src/spell.c	/^    char_u	mi_fword[MAXWLEN + 1];	\/* mi_word case-folded *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_fwordlen	vim/vim/src/spell.c	/^    int		mi_fwordlen;		\/* nr of valid bytes in mi_fword *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_lp	vim/vim/src/spell.c	/^    langp_T	*mi_lp;			\/* info for language and region *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_prefarridx	vim/vim/src/spell.c	/^    int		mi_prefarridx;		\/* index in sl_pidxs with list of$/;"	m	struct:matchinf_S	file:	access:public
mi_prefcnt	vim/vim/src/spell.c	/^    int		mi_prefcnt;		\/* number of entries at mi_prefarridx *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_prefixlen	vim/vim/src/spell.c	/^    int		mi_prefixlen;		\/* byte length of prefix *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_result	vim/vim/src/spell.c	/^    int		mi_result;		\/* result so far: SP_BAD, SP_OK, etc. *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_result2	vim/vim/src/spell.c	/^    int		mi_result2;		\/* "mi_resul" without following word *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_win	vim/vim/src/spell.c	/^    win_T	*mi_win;		\/* buffer being checked *\/$/;"	m	struct:matchinf_S	file:	access:public
mi_word	vim/vim/src/spell.c	/^    char_u	*mi_word;		\/* start of word being checked *\/$/;"	m	struct:matchinf_S	file:	access:public
min_rows	vim/vim/src/window.c	/^min_rows(void)$/;"	f	signature:(void)
min_thumb	vim/vim/src/gui_at_sb.h	/^    Dimension	  min_thumb;	\/* minimum size for the thumb. *\/$/;"	m	struct:__anon84	access:public
mina	vim/vim/src/if_mzsch.c	/^    int		mina;	\/* arity information *\/$/;"	m	struct:__anon9	file:	access:public
minfo_T	vim/vim/src/structs.h	/^typedef struct m_info minfo_T;$/;"	t	typeref:struct:m_info
minlen	vim/vim/src/ex_docmd.c	/^    int		minlen;$/;"	m	struct:cmdmod	file:	access:public
minval	vim/vim/src/regexp.c	/^    long	minval;$/;"	m	struct:regstar_S	file:	access:public
mk_wcwidth	vim/vim/src/libvterm/src/unicode.c	/^static int mk_wcwidth(uint32_t ucs)$/;"	f	file:	signature:(uint32_t ucs)
mkdir_recurse	vim/vim/src/evalfunc.c	/^mkdir_recurse(char_u *dir, int prot)$/;"	f	file:	signature:(char_u *dir, int prot)
mkdir_recurse	vim/vim/src/evalfunc.c	/^static int mkdir_recurse(char_u *dir, int prot);$/;"	p	file:	signature:(char_u *dir, int prot)
mksession_nl	vim/vim/src/ex_docmd.c	/^static int mksession_nl = FALSE;    \/* use NL only in put_eol() *\/$/;"	v	file:
mkspell	vim/vim/src/spellfile.c	/^mkspell($/;"	f	signature:( int fcount, char_u **fnames, int ascii, int over_write, int added_word)
ml_add_stack	vim/vim/src/memline.c	/^ml_add_stack(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
ml_add_stack	vim/vim/src/memline.c	/^static int ml_add_stack(buf_T *);$/;"	p	file:	signature:(buf_T *)
ml_append	vim/vim/src/memline.c	/^ml_append($/;"	f	signature:( linenr_T lnum, char_u *line, colnr_T len, int newfile)
ml_append_buf	vim/vim/src/memline.c	/^ml_append_buf($/;"	f	signature:( buf_T *buf, linenr_T lnum, char_u *line, colnr_T len, int newfile)
ml_append_int	vim/vim/src/memline.c	/^ml_append_int($/;"	f	file:	signature:( buf_T *buf, linenr_T lnum, char_u *line, colnr_T len, int newfile, int mark)
ml_append_int	vim/vim/src/memline.c	/^static int ml_append_int(buf_T *, linenr_T, char_u *, colnr_T, int, int);$/;"	p	file:	signature:(buf_T *, linenr_T, char_u *, colnr_T, int, int)
ml_check_b0_id	vim/vim/src/memline.c	/^ml_check_b0_id(ZERO_BL *b0p)$/;"	f	file:	signature:(ZERO_BL *b0p)
ml_check_b0_id	vim/vim/src/memline.c	/^static int ml_check_b0_id(ZERO_BL *b0p);$/;"	p	file:	signature:(ZERO_BL *b0p)
ml_chunksize	vim/vim/src/structs.h	/^    chunksize_T *ml_chunksize;$/;"	m	struct:memline	access:public
ml_chunksize	vim/vim/src/structs.h	/^typedef struct ml_chunksize$/;"	s
ml_chunksize::mlcs_numlines	vim/vim/src/structs.h	/^    int		mlcs_numlines;$/;"	m	struct:ml_chunksize	access:public
ml_chunksize::mlcs_totalsize	vim/vim/src/structs.h	/^    long	mlcs_totalsize;$/;"	m	struct:ml_chunksize	access:public
ml_clearmarked	vim/vim/src/memline.c	/^ml_clearmarked(void)$/;"	f	signature:(void)
ml_close	vim/vim/src/memline.c	/^ml_close(buf_T *buf, int del_file)$/;"	f	signature:(buf_T *buf, int del_file)
ml_close_all	vim/vim/src/memline.c	/^ml_close_all(int del_file)$/;"	f	signature:(int del_file)
ml_close_notmod	vim/vim/src/memline.c	/^ml_close_notmod(void)$/;"	f	signature:(void)
ml_crypt_prepare	vim/vim/src/memline.c	/^ml_crypt_prepare(memfile_T *mfp, off_T offset, int reading)$/;"	f	file:	signature:(memfile_T *mfp, off_T offset, int reading)
ml_crypt_prepare	vim/vim/src/memline.c	/^static cryptstate_T *ml_crypt_prepare(memfile_T *mfp, off_T offset, int reading);$/;"	p	file:	signature:(memfile_T *mfp, off_T offset, int reading)
ml_decrypt_data	vim/vim/src/memline.c	/^ml_decrypt_data($/;"	f	signature:( memfile_T *mfp, char_u *data, off_T offset, unsigned size)
ml_delete	vim/vim/src/memline.c	/^ml_delete(linenr_T lnum, int message)$/;"	f	signature:(linenr_T lnum, int message)
ml_delete_int	vim/vim/src/memline.c	/^ml_delete_int(buf_T *buf, linenr_T lnum, int message)$/;"	f	file:	signature:(buf_T *buf, linenr_T lnum, int message)
ml_delete_int	vim/vim/src/memline.c	/^static int ml_delete_int(buf_T *, linenr_T, int);$/;"	p	file:	signature:(buf_T *, linenr_T, int)
ml_encrypt_data	vim/vim/src/memline.c	/^ml_encrypt_data($/;"	f	signature:( memfile_T *mfp, char_u *data, off_T offset, unsigned size)
ml_find_line	vim/vim/src/memline.c	/^ml_find_line(buf_T *buf, linenr_T lnum, int action)$/;"	f	file:	signature:(buf_T *buf, linenr_T lnum, int action)
ml_find_line	vim/vim/src/memline.c	/^static bhdr_T *ml_find_line(buf_T *, linenr_T, int);$/;"	p	file:	signature:(buf_T *, linenr_T, int)
ml_find_line_or_offset	vim/vim/src/memline.c	/^ml_find_line_or_offset(buf_T *buf, linenr_T lnum, long *offp)$/;"	f	signature:(buf_T *buf, linenr_T lnum, long *offp)
ml_firstmarked	vim/vim/src/memline.c	/^ml_firstmarked(void)$/;"	f	signature:(void)
ml_flags	vim/vim/src/structs.h	/^    int		ml_flags;$/;"	m	struct:memline	access:public
ml_flush_line	vim/vim/src/memline.c	/^ml_flush_line(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
ml_flush_line	vim/vim/src/memline.c	/^static void ml_flush_line(buf_T *);$/;"	p	file:	signature:(buf_T *)
ml_get	vim/vim/src/memline.c	/^ml_get(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
ml_get_buf	vim/vim/src/memline.c	/^ml_get_buf($/;"	f	signature:( buf_T *buf, linenr_T lnum, int will_change)
ml_get_curline	vim/vim/src/memline.c	/^ml_get_curline(void)$/;"	f	signature:(void)
ml_get_cursor	vim/vim/src/memline.c	/^ml_get_cursor(void)$/;"	f	signature:(void)
ml_get_pos	vim/vim/src/memline.c	/^ml_get_pos(pos_T *pos)$/;"	f	signature:(pos_T *pos)
ml_line_alloced	vim/vim/src/memline.c	/^ml_line_alloced(void)$/;"	f	signature:(void)
ml_line_count	vim/vim/src/structs.h	/^    linenr_T	ml_line_count;	\/* number of lines in the buffer *\/$/;"	m	struct:memline	access:public
ml_line_lnum	vim/vim/src/structs.h	/^    linenr_T	ml_line_lnum;	\/* line number of cached line, 0 if not valid *\/$/;"	m	struct:memline	access:public
ml_line_ptr	vim/vim/src/structs.h	/^    char_u	*ml_line_ptr;	\/* pointer to cached line *\/$/;"	m	struct:memline	access:public
ml_lineadd	vim/vim/src/memline.c	/^ml_lineadd(buf_T *buf, int count)$/;"	f	file:	signature:(buf_T *buf, int count)
ml_lineadd	vim/vim/src/memline.c	/^static void ml_lineadd(buf_T *, int);$/;"	p	file:	signature:(buf_T *, int)
ml_locked	vim/vim/src/structs.h	/^    bhdr_T	*ml_locked;	\/* block used by last ml_get *\/$/;"	m	struct:memline	access:public
ml_locked_high	vim/vim/src/structs.h	/^    linenr_T	ml_locked_high;	\/* last line in ml_locked *\/$/;"	m	struct:memline	access:public
ml_locked_lineadd	vim/vim/src/structs.h	/^    int		ml_locked_lineadd;  \/* number of lines inserted in ml_locked *\/$/;"	m	struct:memline	access:public
ml_locked_low	vim/vim/src/structs.h	/^    linenr_T	ml_locked_low;	\/* first line in ml_locked *\/$/;"	m	struct:memline	access:public
ml_mfp	vim/vim/src/structs.h	/^    memfile_T	*ml_mfp;	\/* pointer to associated memfile *\/$/;"	m	struct:memline	access:public
ml_new_data	vim/vim/src/memline.c	/^ml_new_data(memfile_T *mfp, int negative, int page_count)$/;"	f	file:	signature:(memfile_T *mfp, int negative, int page_count)
ml_new_data	vim/vim/src/memline.c	/^static bhdr_T *ml_new_data(memfile_T *, int, int);$/;"	p	file:	signature:(memfile_T *, int, int)
ml_new_ptr	vim/vim/src/memline.c	/^ml_new_ptr(memfile_T *mfp)$/;"	f	file:	signature:(memfile_T *mfp)
ml_new_ptr	vim/vim/src/memline.c	/^static bhdr_T *ml_new_ptr(memfile_T *);$/;"	p	file:	signature:(memfile_T *)
ml_numchunks	vim/vim/src/structs.h	/^    int		ml_numchunks;$/;"	m	struct:memline	access:public
ml_open	vim/vim/src/memline.c	/^ml_open(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ml_open_file	vim/vim/src/memline.c	/^ml_open_file(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ml_open_files	vim/vim/src/memline.c	/^ml_open_files(void)$/;"	f	signature:(void)
ml_preserve	vim/vim/src/memline.c	/^ml_preserve(buf_T *buf, int message)$/;"	f	signature:(buf_T *buf, int message)
ml_recover	vim/vim/src/memline.c	/^ml_recover(void)$/;"	f	signature:(void)
ml_replace	vim/vim/src/memline.c	/^ml_replace(linenr_T lnum, char_u *line, int copy)$/;"	f	signature:(linenr_T lnum, char_u *line, int copy)
ml_set_b0_crypt	vim/vim/src/memline.c	/^ml_set_b0_crypt(buf_T *buf, ZERO_BL *b0p)$/;"	f	file:	signature:(buf_T *buf, ZERO_BL *b0p)
ml_set_b0_crypt	vim/vim/src/memline.c	/^static void ml_set_b0_crypt(buf_T *buf, ZERO_BL *b0p);$/;"	p	file:	signature:(buf_T *buf, ZERO_BL *b0p)
ml_set_crypt_key	vim/vim/src/memline.c	/^ml_set_crypt_key($/;"	f	signature:( buf_T *buf, char_u *old_key, char_u *old_cm)
ml_set_mfp_crypt	vim/vim/src/memline.c	/^ml_set_mfp_crypt(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
ml_set_mfp_crypt	vim/vim/src/memline.c	/^static void ml_set_mfp_crypt(buf_T *buf);$/;"	p	file:	signature:(buf_T *buf)
ml_setflags	vim/vim/src/memline.c	/^ml_setflags(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ml_setmarked	vim/vim/src/memline.c	/^ml_setmarked(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
ml_setname	vim/vim/src/memline.c	/^ml_setname(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ml_stack	vim/vim/src/structs.h	/^    infoptr_T	*ml_stack;	\/* stack of pointer blocks (array of IPTRs) *\/$/;"	m	struct:memline	access:public
ml_stack_size	vim/vim/src/structs.h	/^    int		ml_stack_size;	\/* total number of entries in ml_stack *\/$/;"	m	struct:memline	access:public
ml_stack_top	vim/vim/src/structs.h	/^    int		ml_stack_top;	\/* current top of ml_stack *\/$/;"	m	struct:memline	access:public
ml_sync_all	vim/vim/src/memline.c	/^ml_sync_all(int check_file, int check_char)$/;"	f	signature:(int check_file, int check_char)
ml_timestamp	vim/vim/src/memline.c	/^ml_timestamp(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ml_upd_block0	vim/vim/src/memline.c	/^ml_upd_block0(buf_T *buf, upd_block0_T what)$/;"	f	file:	signature:(buf_T *buf, upd_block0_T what)
ml_upd_block0	vim/vim/src/memline.c	/^static void ml_upd_block0(buf_T *buf, upd_block0_T what);$/;"	p	file:	signature:(buf_T *buf, upd_block0_T what)
ml_updatechunk	vim/vim/src/memline.c	/^ml_updatechunk($/;"	f	file:	signature:( buf_T *buf, linenr_T line, long len, int updtype)
ml_updatechunk	vim/vim/src/memline.c	/^static void ml_updatechunk(buf_T *buf, long line, long len, int updtype);$/;"	p	file:	signature:(buf_T *buf, long line, long len, int updtype)
ml_usedchunks	vim/vim/src/structs.h	/^    int		ml_usedchunks;$/;"	m	struct:memline	access:public
mlcs_numlines	vim/vim/src/structs.h	/^    int		mlcs_numlines;$/;"	m	struct:ml_chunksize	access:public
mlcs_totalsize	vim/vim/src/structs.h	/^    long	mlcs_totalsize;$/;"	m	struct:ml_chunksize	access:public
mnemonic	vim/vim/src/structs.h	/^    int		mnemonic;	    \/* mnemonic key (after '&') *\/$/;"	m	struct:VimMenu	access:public
mnemonic_event	vim/vim/src/gui_motif.c	/^mnemonic_event(Widget w, XtPointer call_data UNUSED, XKeyEvent *event)$/;"	f	file:	signature:(Widget w, XtPointer call_data UNUSED, XKeyEvent *event)
mod_flag	vim/vim/src/misc2.c	/^    short	mod_flag;	\/* Bit(s) for particular key modifier *\/$/;"	m	struct:modmasktable	file:	access:public
mod_mask	vim/vim/src/globals.h	/^EXTERN int	mod_mask INIT(= 0x0);		\/* current key modifiers *\/$/;"	v
mod_mask	vim/vim/src/misc2.c	/^    short	mod_mask;	\/* Bit-mask for particular key modifier *\/$/;"	m	struct:modmasktable	file:	access:public
mod_mask_table	vim/vim/src/misc2.c	/^} mod_mask_table[] =$/;"	v	typeref:struct:modmasktable	file:
mode	vim/vim/src/getchar.c	/^    int		mode;$/;"	m	struct:initmap	file:	access:public
mode	vim/vim/src/libvterm/src/vterm_internal.h	/^    } mode;$/;"	m	struct:VTermState::__anon36	typeref:struct:VTermState::__anon36::__anon37	access:public
mode	vim/vim/src/libvterm/src/vterm_internal.h	/^  } mode;$/;"	m	struct:VTerm	typeref:struct:VTerm::__anon38	access:public
mode	vim/vim/src/libvterm/src/vterm_internal.h	/^  } mode;$/;"	m	struct:VTermState	typeref:struct:VTermState::__anon35	access:public
mode	vim/vim/src/vim.h	/^    short_u	mode;		\/* Select by char, word, or line. *\/$/;"	m	struct:VimClipboard	access:public
mode_displayed	vim/vim/src/globals.h	/^EXTERN int	mode_displayed INIT(= FALSE);	\/* mode is being displayed *\/$/;"	v
modec	vim/vim/src/structs.h	/^    int		modec;$/;"	m	struct:__anon206	access:public
modes	vim/vim/src/structs.h	/^    int		modes;		    \/* Which modes is this menu visible for? *\/$/;"	m	struct:VimMenu	access:public
modified	vim/vim/src/netbeans.c	/^    unsigned int	 modified:1;$/;"	m	struct:nbbuf_struct	file:	access:public
modified_was_set	vim/vim/src/globals.h	/^EXTERN int	modified_was_set;		\/* did ":set modified" *\/$/;"	v
modifier_keys_table	vim/vim/src/misc2.c	/^static char_u modifier_keys_table[] =$/;"	v	file:
modifier_len	vim/vim/src/ex_docmd.c	/^modifier_len(char_u *cmd)$/;"	f	signature:(char_u *cmd)
modifiers_gdk2mouse	vim/vim/src/gui_gtk_x11.c	/^modifiers_gdk2mouse(guint state)$/;"	f	file:	signature:(guint state)
modifiers_gdk2vim	vim/vim/src/gui_gtk_x11.c	/^modifiers_gdk2vim(guint state)$/;"	f	file:	signature:(guint state)
modify_fname	vim/vim/src/eval.c	/^modify_fname($/;"	f	signature:( char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen)
modlen	vim/vim/src/term.c	/^    int	    modlen;	    \/* length of part before ";*~". *\/$/;"	m	struct:termcode	file:	access:public
modmasktable	vim/vim/src/misc2.c	/^static struct modmasktable$/;"	s	file:
modmasktable::mod_flag	vim/vim/src/misc2.c	/^    short	mod_flag;	\/* Bit(s) for particular key modifier *\/$/;"	m	struct:modmasktable	file:	access:public
modmasktable::mod_mask	vim/vim/src/misc2.c	/^    short	mod_mask;	\/* Bit-mask for particular key modifier *\/$/;"	m	struct:modmasktable	file:	access:public
modmasktable::name	vim/vim/src/misc2.c	/^    char_u	name;		\/* Single letter name of modifier *\/$/;"	m	struct:modmasktable	file:	access:public
modname	vim/vim/src/fileio.c	/^modname($/;"	f	signature:( char_u *fname, char_u *ext, int prepend_dot)
modré	vim/vim/runtime/tutor/tutor.cs	/^      3)  Fialky jsou modré,$/;"	p
module	vim/vim/src/if_py_both.h	/^    PyObject	*module;$/;"	m	struct:__anon97	access:public
moreenv	vim/vim/src/misc2.c	/^moreenv(void)$/;"	f	file:	signature:(void)
moreenv	vim/vim/src/misc2.c	/^static int  moreenv(void);	\/* incr. size of env. *\/$/;"	p	file:	signature:(void)
mostly_ignore	vim/vim/src/os_beos.c	/^mostly_ignore(int sig)$/;"	f	file:	signature:(int sig)
motif_get_toolbar_colors	vim/vim/src/gui_motif.c	/^motif_get_toolbar_colors($/;"	f	signature:( Pixel *bgp, Pixel *fgp, Pixel *bsp, Pixel *tsp, Pixel *hsp)
motif_tabline_timer_cb	vim/vim/src/gui_motif.c	/^motif_tabline_timer_cb ($/;"	f	file:	signature:( XtPointer timed_out, XtIntervalId *interval_id UNUSED)
motion_force	vim/vim/src/structs.h	/^    int		motion_force;	\/* force motion type: 'v', 'V' or CTRL-V *\/$/;"	m	struct:oparg_S	access:public
motion_notify_event	vim/vim/src/gui_gtk_x11.c	/^motion_notify_event(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventMotion *event, gpointer data UNUSED)
motion_repeat_offset	vim/vim/src/gui_gtk_x11.c	/^static int   motion_repeat_offset = FALSE;$/;"	v	file:
motion_repeat_timer	vim/vim/src/gui_gtk_x11.c	/^static guint motion_repeat_timer  = 0;$/;"	v	file:
motion_repeat_timer_cb	vim/vim/src/gui_gtk_x11.c	/^motion_repeat_timer_cb(gpointer data UNUSED)$/;"	f	file:	signature:(gpointer data UNUSED)
motion_repeat_timer_cb	vim/vim/src/gui_gtk_x11.c	/^static gboolean  motion_repeat_timer_cb(gpointer);$/;"	p	file:
motion_repeat_timer_cb	vim/vim/src/gui_gtk_x11.c	/^static gint  motion_repeat_timer_cb(gpointer);$/;"	p	file:
motion_type	vim/vim/src/structs.h	/^    int		motion_type;	\/* type of the current cursor motion *\/$/;"	m	struct:oparg_S	access:public
mouseWheelHandlerUPP	vim/vim/src/gui_mac.c	/^static EventHandlerUPP mouseWheelHandlerUPP = NULL;$/;"	v	file:
mouse_buttons	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_buttons;$/;"	m	struct:VTermState	access:public
mouse_choice	vim/vim/src/dosinst.c	/^int	mouse_choice = (int)mouse_mswin;$/;"	v
mouse_choices	vim/vim/src/dosinst.c	/^char	*(mouse_choices[]) =$/;"	v
mouse_click_timer	vim/vim/src/gui_gtk_x11.c	/^static guint mouse_click_timer = 0;$/;"	v	file:
mouse_click_timer_cb	vim/vim/src/gui_gtk_x11.c	/^mouse_click_timer_cb(gpointer data)$/;"	f	file:	signature:(gpointer data)
mouse_col	vim/vim/src/globals.h	/^EXTERN int	mouse_col;$/;"	v
mouse_col	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_col, mouse_row;$/;"	m	struct:VTermState	access:public
mouse_comp_pos	vim/vim/src/ui.c	/^mouse_comp_pos($/;"	f	signature:( win_T *win, int *rowp, int *colp, linenr_T *lnump)
mouse_dragging	vim/vim/src/globals.h	/^EXTERN int	mouse_dragging INIT(= 0);	\/* extending Visual area with$/;"	v
mouse_find_win	vim/vim/src/ui.c	/^mouse_find_win(int *rowp, int *colp UNUSED)$/;"	f	signature:(int *rowp, int *colp UNUSED)
mouse_flags	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_flags;$/;"	m	struct:VTermState	access:public
mouse_has	vim/vim/src/term.c	/^mouse_has(int c)$/;"	f	signature:(int c)
mouse_model_popup	vim/vim/src/term.c	/^mouse_model_popup(void)$/;"	f	signature:(void)
mouse_mswin	vim/vim/src/dosinst.c	/^    mouse_mswin$/;"	e	enum:__anon135	file:
mouse_past_bottom	vim/vim/src/globals.h	/^EXTERN int	mouse_past_bottom INIT(= FALSE);\/* mouse below last line *\/$/;"	v
mouse_past_eol	vim/vim/src/globals.h	/^EXTERN int	mouse_past_eol INIT(= FALSE);	\/* mouse right of line *\/$/;"	v
mouse_protocol	vim/vim/src/libvterm/src/vterm_internal.h	/^  enum { MOUSE_X10, MOUSE_UTF8, MOUSE_SGR, MOUSE_RXVT } mouse_protocol;$/;"	m	struct:VTermState	typeref:enum:VTermState::__anon34	access:public
mouse_row	vim/vim/src/globals.h	/^EXTERN int	mouse_row;$/;"	v
mouse_row	vim/vim/src/libvterm/src/vterm_internal.h	/^  int mouse_col, mouse_row;$/;"	m	struct:VTermState	access:public
mouse_scroll_lines	vim/vim/src/gui_w32.c	/^static int mouse_scroll_lines = 0;$/;"	v	file:
mouse_table	vim/vim/src/misc2.c	/^} mouse_table[] =$/;"	v	typeref:struct:mousetable	file:
mouse_text	vim/vim/src/dosinst.c	/^char	*mouse_text = "- The mouse %s";$/;"	v
mouse_timed_out	vim/vim/src/gui_gtk_x11.c	/^static int mouse_timed_out = TRUE;$/;"	v	file:
mouse_xterm	vim/vim/src/dosinst.c	/^    mouse_xterm = 1,$/;"	e	enum:__anon135	file:
mousetable	vim/vim/src/misc2.c	/^static struct mousetable$/;"	s	file:
mousetable::button	vim/vim/src/misc2.c	/^    int	    button;		\/* Which mouse button is it? *\/$/;"	m	struct:mousetable	file:	access:public
mousetable::is_click	vim/vim/src/misc2.c	/^    int	    is_click;		\/* Is it a mouse button click event? *\/$/;"	m	struct:mousetable	file:	access:public
mousetable::is_drag	vim/vim/src/misc2.c	/^    int	    is_drag;		\/* Is it a mouse drag event? *\/$/;"	m	struct:mousetable	file:	access:public
mousetable::pseudo_code	vim/vim/src/misc2.c	/^    int	    pseudo_code;	\/* Code for pseudo mouse event *\/$/;"	m	struct:mousetable	file:	access:public
move_lines	vim/vim/src/fileio.c	/^move_lines(buf_T *frombuf, buf_T *tobuf)$/;"	f	file:	signature:(buf_T *frombuf, buf_T *tobuf)
move_lines	vim/vim/src/fileio.c	/^static int move_lines(buf_T *frombuf, buf_T *tobuf);$/;"	p	file:	signature:(buf_T *frombuf, buf_T *tobuf)
movechangelist	vim/vim/src/mark.c	/^movechangelist(int count)$/;"	f	signature:(int count)
movecursor	vim/vim/src/libvterm/include/vterm.h	/^  int (*movecursor)(VTermPos pos, VTermPos oldpos, int visible, void *user);$/;"	m	struct:__anon60	access:public
movecursor	vim/vim/src/libvterm/include/vterm.h	/^  int (*movecursor)(VTermPos pos, VTermPos oldpos, int visible, void *user);$/;"	m	struct:__anon63	access:public
movecursor	vim/vim/src/libvterm/src/screen.c	/^static int movecursor(VTermPos pos, VTermPos oldpos, int visible, void *user)$/;"	f	file:	signature:(VTermPos pos, VTermPos oldpos, int visible, void *user)
movecursor	vim/vim/src/libvterm/t/harness.c	/^static int movecursor(VTermPos pos, VTermPos oldpos, int visible, void *user)$/;"	f	file:	signature:(VTermPos pos, VTermPos oldpos, int visible, void *user)
movemark	vim/vim/src/mark.c	/^movemark(int count)$/;"	f	signature:(int count)
moverect	vim/vim/src/libvterm/include/vterm.h	/^  int (*moverect)(VTermRect dest, VTermRect src, void *user);$/;"	m	struct:__anon60	access:public
moverect	vim/vim/src/libvterm/include/vterm.h	/^  int (*moverect)(VTermRect dest, VTermRect src, void *user);$/;"	m	struct:__anon63	access:public
moverect	vim/vim/src/libvterm/t/harness.c	/^static int moverect(VTermRect dest, VTermRect src, void *user)$/;"	f	file:	signature:(VTermRect dest, VTermRect src, void *user)
moverect_internal	vim/vim/src/libvterm/src/screen.c	/^static int moverect_internal(VTermRect dest, VTermRect src, void *user)$/;"	f	file:	signature:(VTermRect dest, VTermRect src, void *user)
moverect_user	vim/vim/src/libvterm/src/screen.c	/^static int moverect_user(VTermRect dest, VTermRect src, void *user)$/;"	f	file:	signature:(VTermRect dest, VTermRect src, void *user)
mparm_T	vim/vim/src/structs.h	/^} mparm_T;$/;"	t	typeref:struct:__anon210
mr_pattern	vim/vim/src/search.c	/^static char_u	    *mr_pattern = NULL;	\/* pattern used by search_regcomp() *\/$/;"	v	file:
mr_pattern_alloced	vim/vim/src/search.c	/^static int	    mr_pattern_alloced = FALSE; \/* mr_pattern was allocated *\/$/;"	v	file:
msg	vim/vim/src/gui_beval.h	/^    char_u		*msg;$/;"	m	struct:BalloonEvalStruct	access:public
msg	vim/vim/src/message.c	/^    char_u		*msg;$/;"	m	struct:msg_hist	file:	access:public
msg	vim/vim/src/message.c	/^msg(char_u *s)$/;"	f	signature:(char_u *s)
msg	vim/vim/src/structs.h	/^    char_u		*msg;		\/* original message *\/$/;"	m	struct:msglist	access:public
msgCB	vim/vim/src/gui_beval.h	/^    void		(*msgCB)(struct BalloonEvalStruct *, int);$/;"	m	struct:BalloonEvalStruct	access:public
msg_add_eol	vim/vim/src/fileio.c	/^msg_add_eol(void)$/;"	f	file:	signature:(void)
msg_add_eol	vim/vim/src/fileio.c	/^static void msg_add_eol(void);$/;"	p	file:	signature:(void)
msg_add_fileformat	vim/vim/src/fileio.c	/^msg_add_fileformat(int eol_type)$/;"	f	file:	signature:(int eol_type)
msg_add_fileformat	vim/vim/src/fileio.c	/^static int msg_add_fileformat(int eol_type);$/;"	p	file:	signature:(int eol_type)
msg_add_fname	vim/vim/src/fileio.c	/^msg_add_fname(buf_T *buf, char_u *fname)$/;"	f	signature:(buf_T *buf, char_u *fname)
msg_add_lines	vim/vim/src/fileio.c	/^msg_add_lines($/;"	f	signature:( int insert_space, long lnum, off_T nchars)
msg_advance	vim/vim/src/message.c	/^msg_advance(int col)$/;"	f	signature:(int col)
msg_attr	vim/vim/src/message.c	/^msg_attr(char_u *s, int attr)$/;"	f	signature:(char_u *s, int attr)
msg_attr_keep	vim/vim/src/message.c	/^msg_attr_keep($/;"	f	signature:( char_u *s, int attr, int keep)
msg_buf	vim/vim/src/globals.h	/^EXTERN char_u	msg_buf[MSG_BUF_LEN];	\/* small buffer for messages *\/$/;"	v
msg_check	vim/vim/src/message.c	/^msg_check(void)$/;"	f	signature:(void)
msg_check_screen	vim/vim/src/message.c	/^msg_check_screen(void)$/;"	f	file:	signature:(void)
msg_check_screen	vim/vim/src/message.c	/^static int  msg_check_screen(void);$/;"	p	file:	signature:(void)
msg_clr_cmdline	vim/vim/src/message.c	/^msg_clr_cmdline(void)$/;"	f	signature:(void)
msg_clr_eos	vim/vim/src/message.c	/^msg_clr_eos(void)$/;"	f	signature:(void)
msg_clr_eos_force	vim/vim/src/message.c	/^msg_clr_eos_force(void)$/;"	f	signature:(void)
msg_col	vim/vim/src/globals.h	/^EXTERN int	msg_col;$/;"	v
msg_compressing	vim/vim/src/spellfile.c	/^static char *msg_compressing = N_("Compressing word tree...");$/;"	v	file:
msg_didany	vim/vim/src/globals.h	/^EXTERN int	msg_didany INIT(= FALSE);   \/* msg_outstr() was used at all *\/$/;"	v
msg_didout	vim/vim/src/globals.h	/^EXTERN int	msg_didout INIT(= FALSE);   \/* msg_outstr() was used in line *\/$/;"	v
msg_end	vim/vim/src/message.c	/^msg_end(void)$/;"	f	signature:(void)
msg_end_prompt	vim/vim/src/message.c	/^msg_end_prompt(void)$/;"	f	signature:(void)
msg_hist	vim/vim/src/message.c	/^struct msg_hist$/;"	s	file:
msg_hist::attr	vim/vim/src/message.c	/^    int			attr;$/;"	m	struct:msg_hist	file:	access:public
msg_hist::msg	vim/vim/src/message.c	/^    char_u		*msg;$/;"	m	struct:msg_hist	file:	access:public
msg_hist::next	vim/vim/src/message.c	/^    struct msg_hist	*next;$/;"	m	struct:msg_hist	typeref:struct:msg_hist::msg_hist	file:	access:public
msg_hist_len	vim/vim/src/message.c	/^static int msg_hist_len = 0;$/;"	v	file:
msg_hist_off	vim/vim/src/globals.h	/^EXTERN int      msg_hist_off INIT(= FALSE); \/* don't add messages to history *\/$/;"	v
msg_home_replace	vim/vim/src/message.c	/^msg_home_replace(char_u *fname)$/;"	f	signature:(char_u *fname)
msg_home_replace_attr	vim/vim/src/message.c	/^msg_home_replace_attr(char_u *fname, int attr)$/;"	f	file:	signature:(char_u *fname, int attr)
msg_home_replace_attr	vim/vim/src/message.c	/^static void msg_home_replace_attr(char_u *fname, int attr);$/;"	p	file:	signature:(char_u *fname, int attr)
msg_home_replace_hl	vim/vim/src/message.c	/^msg_home_replace_hl(char_u *fname)$/;"	f	signature:(char_u *fname)
msg_list	vim/vim/src/globals.h	/^EXTERN struct msglist **msg_list INIT(= NULL);$/;"	v	typeref:struct:
msg_loclist	vim/vim/src/buffer.c	/^static char *msg_loclist = N_("[Location List]");$/;"	v	file:
msg_make	vim/vim/src/message.c	/^msg_make(char_u *arg)$/;"	f	signature:(char_u *arg)
msg_may_trunc	vim/vim/src/message.c	/^msg_may_trunc(int force, char_u *s)$/;"	f	signature:(int force, char_u *s)
msg_moremsg	vim/vim/src/message.c	/^msg_moremsg(int full)$/;"	f	signature:(int full)
msg_no_items	vim/vim/src/syntax.c	/^static char msg_no_items[] = N_("No Syntax items defined for this buffer");$/;"	v	file:
msg_no_more	vim/vim/src/globals.h	/^EXTERN int	msg_no_more INIT(= FALSE);  \/* don't use more prompt, truncate$/;"	v
msg_nowait	vim/vim/src/globals.h	/^EXTERN int	msg_nowait INIT(= FALSE);   \/* don't wait for this msg *\/$/;"	v
msg_outnum	vim/vim/src/message.c	/^msg_outnum(long n)$/;"	f	signature:(long n)
msg_outtrans	vim/vim/src/message.c	/^msg_outtrans(char_u *str)$/;"	f	signature:(char_u *str)
msg_outtrans_attr	vim/vim/src/message.c	/^msg_outtrans_attr(char_u *str, int attr)$/;"	f	signature:(char_u *str, int attr)
msg_outtrans_len	vim/vim/src/message.c	/^msg_outtrans_len(char_u *str, int len)$/;"	f	signature:(char_u *str, int len)
msg_outtrans_len_attr	vim/vim/src/message.c	/^msg_outtrans_len_attr(char_u *msgstr, int len, int attr)$/;"	f	signature:(char_u *msgstr, int len, int attr)
msg_outtrans_one	vim/vim/src/message.c	/^msg_outtrans_one(char_u *p, int attr)$/;"	f	signature:(char_u *p, int attr)
msg_outtrans_special	vim/vim/src/message.c	/^msg_outtrans_special($/;"	f	signature:( char_u *strstart, int from)
msg_pos_mode	vim/vim/src/screen.c	/^msg_pos_mode(void)$/;"	f	file:	signature:(void)
msg_pos_mode	vim/vim/src/screen.c	/^static void msg_pos_mode(void);$/;"	p	file:	signature:(void)
msg_prt_line	vim/vim/src/message.c	/^msg_prt_line(char_u *s, int list)$/;"	f	signature:(char_u *s, int list)
msg_putchar	vim/vim/src/message.c	/^msg_putchar(int c)$/;"	f	signature:(int c)
msg_putchar_attr	vim/vim/src/message.c	/^msg_putchar_attr(int c, int attr)$/;"	f	signature:(int c, int attr)
msg_puts	vim/vim/src/message.c	/^msg_puts(char_u *s)$/;"	f	signature:(char_u *s)
msg_puts_attr	vim/vim/src/message.c	/^msg_puts_attr(char_u *s, int attr)$/;"	f	signature:(char_u *s, int attr)
msg_puts_attr_len	vim/vim/src/message.c	/^msg_puts_attr_len(char_u *str, int maxlen, int attr)$/;"	f	file:	signature:(char_u *str, int maxlen, int attr)
msg_puts_attr_len	vim/vim/src/message.c	/^static void msg_puts_attr_len(char_u *str, int maxlen, int attr);$/;"	p	file:	signature:(char_u *str, int maxlen, int attr)
msg_puts_display	vim/vim/src/message.c	/^msg_puts_display($/;"	f	file:	signature:( char_u *str, int maxlen, int attr, int recurse)
msg_puts_display	vim/vim/src/message.c	/^static void msg_puts_display(char_u *str, int maxlen, int attr, int recurse);$/;"	p	file:	signature:(char_u *str, int maxlen, int attr, int recurse)
msg_puts_long_attr	vim/vim/src/message.c	/^msg_puts_long_attr(char_u *longstr, int attr)$/;"	f	signature:(char_u *longstr, int attr)
msg_puts_long_len_attr	vim/vim/src/message.c	/^msg_puts_long_len_attr(char_u *longstr, int len, int attr)$/;"	f	signature:(char_u *longstr, int len, int attr)
msg_puts_printf	vim/vim/src/message.c	/^msg_puts_printf(char_u *str, int maxlen)$/;"	f	file:	signature:(char_u *str, int maxlen)
msg_puts_printf	vim/vim/src/message.c	/^static void msg_puts_printf(char_u *str, int maxlen);$/;"	p	file:	signature:(char_u *str, int maxlen)
msg_puts_title	vim/vim/src/message.c	/^msg_puts_title($/;"	f	signature:( char_u *s)
msg_qflist	vim/vim/src/buffer.c	/^static char *msg_qflist = N_("[Quickfix List]");$/;"	v	file:
msg_row	vim/vim/src/globals.h	/^EXTERN int	msg_row;$/;"	v
msg_sb_eol	vim/vim/src/message.c	/^msg_sb_eol(void)$/;"	f	signature:(void)
msg_sb_start	vim/vim/src/message.c	/^msg_sb_start(msgchunk_T *mps)$/;"	f	file:	signature:(msgchunk_T *mps)
msg_sb_start	vim/vim/src/message.c	/^static msgchunk_T *msg_sb_start(msgchunk_T *mps);$/;"	p	file:	signature:(msgchunk_T *mps)
msg_screen_putchar	vim/vim/src/message.c	/^msg_screen_putchar(int c, int attr)$/;"	f	file:	signature:(int c, int attr)
msg_screen_putchar	vim/vim/src/message.c	/^static void msg_screen_putchar(int c, int attr);$/;"	p	file:	signature:(int c, int attr)
msg_scroll	vim/vim/src/globals.h	/^EXTERN int	msg_scroll INIT(= FALSE);   \/* msg_start() will scroll *\/$/;"	v
msg_scroll_up	vim/vim/src/message.c	/^msg_scroll_up(void)$/;"	f	file:	signature:(void)
msg_scroll_up	vim/vim/src/message.c	/^static void msg_scroll_up(void);$/;"	p	file:	signature:(void)
msg_scrolled	vim/vim/src/globals.h	/^EXTERN int	msg_scrolled;	\/* Number of screen lines that windows have$/;"	v
msg_scrolled_ign	vim/vim/src/globals.h	/^EXTERN int	msg_scrolled_ign INIT(= FALSE);$/;"	v
msg_show_console_dialog	vim/vim/src/message.c	/^msg_show_console_dialog($/;"	f	file:	signature:( char_u *message, char_u *buttons, int dfltbutton)
msg_show_console_dialog	vim/vim/src/message.c	/^static char_u *msg_show_console_dialog(char_u *message, char_u *buttons, int dfltbutton);$/;"	p	file:	signature:(char_u *message, char_u *buttons, int dfltbutton)
msg_silent	vim/vim/src/globals.h	/^EXTERN int	msg_silent INIT(= 0);	\/* don't print messages *\/$/;"	v
msg_source	vim/vim/src/message.c	/^msg_source(int attr)$/;"	f	signature:(int attr)
msg_start	vim/vim/src/message.c	/^msg_start(void)$/;"	f	signature:(void)
msg_starthere	vim/vim/src/message.c	/^msg_starthere(void)$/;"	f	signature:(void)
msg_strtrunc	vim/vim/src/message.c	/^msg_strtrunc($/;"	f	signature:( char_u *s, int force)
msg_trunc_attr	vim/vim/src/message.c	/^msg_trunc_attr(char_u *s, int force, int attr)$/;"	f	signature:(char_u *s, int force, int attr)
msg_use_printf	vim/vim/src/message.c	/^msg_use_printf(void)$/;"	f	signature:(void)
msg_wait_for_multiple_objects	vim/vim/src/os_win32.c	/^msg_wait_for_multiple_objects($/;"	f	file:	signature:( DWORD nCount, LPHANDLE pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask)
msgchunk_S	vim/vim/src/message.c	/^struct msgchunk_S$/;"	s	file:
msgchunk_S::sb_attr	vim/vim/src/message.c	/^    int		sb_attr;	\/* text attributes *\/$/;"	m	struct:msgchunk_S	file:	access:public
msgchunk_S::sb_eol	vim/vim/src/message.c	/^    char	sb_eol;		\/* TRUE when line ends after this text *\/$/;"	m	struct:msgchunk_S	file:	access:public
msgchunk_S::sb_msg_col	vim/vim/src/message.c	/^    int		sb_msg_col;	\/* column in which text starts *\/$/;"	m	struct:msgchunk_S	file:	access:public
msgchunk_S::sb_next	vim/vim/src/message.c	/^    msgchunk_T	*sb_next;$/;"	m	struct:msgchunk_S	file:	access:public
msgchunk_S::sb_prev	vim/vim/src/message.c	/^    msgchunk_T	*sb_prev;$/;"	m	struct:msgchunk_S	file:	access:public
msgchunk_S::sb_text	vim/vim/src/message.c	/^    char_u	sb_text[1];	\/* text to be displayed, actually longer *\/$/;"	m	struct:msgchunk_S	file:	access:public
msgchunk_T	vim/vim/src/message.c	/^typedef struct msgchunk_S msgchunk_T;$/;"	t	typeref:struct:msgchunk_S	file:
msgfunc_T	vim/vim/src/if_lua.c	/^typedef void (*msgfunc_T)(char_u *);$/;"	t	file:
msglist	vim/vim/src/structs.h	/^struct msglist$/;"	s
msglist::msg	vim/vim/src/structs.h	/^    char_u		*msg;		\/* original message *\/$/;"	m	struct:msglist	access:public
msglist::next	vim/vim/src/structs.h	/^    struct msglist	*next;		\/* next of several messages in a row *\/$/;"	m	struct:msglist	typeref:struct:msglist::msglist	access:public
msglist::throw_msg	vim/vim/src/structs.h	/^    char_u		*throw_msg;	\/* msg to throw: usually original one *\/$/;"	m	struct:msglist	access:public
msgmore	vim/vim/src/misc1.c	/^msgmore(long n)$/;"	f	signature:(long n)
mshape	vim/vim/src/structs.h	/^    int		mshape;		\/* one of the MSHAPE defines *\/$/;"	m	struct:cursor_entry	access:public
mshape_idcs	vim/vim/src/gui_w32.c	/^static LPCSTR mshape_idcs[] =$/;"	v	file:
mshape_ids	vim/vim/src/gui_gtk_x11.c	/^static const int mshape_ids[] =$/;"	v	file:
mshape_ids	vim/vim/src/gui_photon.c	/^static int mshape_ids[] =$/;"	v	file:
mshape_ids	vim/vim/src/gui_x11.c	/^static int mshape_ids[] =$/;"	v	file:
mshape_names	vim/vim/src/misc2.c	/^static char * mshape_names[] =$/;"	v	file:
mt_names	vim/vim/src/tag.c	/^static char	*mt_names[MT_COUNT\/2] =$/;"	v	file:
mtime	vim/vim/src/gui_at_fs.c	/^    time_t	mtime;$/;"	m	struct:__anon236	file:	access:public
multi	vim/vim/src/regexp_nfa.c	/^	} multi[NSUBEXP];$/;"	m	union:__anon116::__anon117	typeref:struct:__anon116::__anon117::multipos	file:	access:public
multiline_balloon_available	vim/vim/src/gui_w32.c	/^multiline_balloon_available(void)$/;"	f	signature:(void)
multipos	vim/vim/src/regexp_nfa.c	/^	struct multipos$/;"	s	union:__anon116::__anon117	file:	access:public
must_redraw	vim/vim/src/globals.h	/^EXTERN int	must_redraw INIT(= 0);	    \/* type of redraw necessary *\/$/;"	v
myDataBrowserChangeAttributes	vim/vim/src/gui_mac.c	/^myDataBrowserChangeAttributes(ControlRef inDataBrowser,$/;"	f	file:	signature:(ControlRef inDataBrowser, OptionBits inAttributesToSet, OptionBits inAttributesToClear)
my_acl	vim/vim/src/os_win32.c	/^struct my_acl$/;"	s	file:
my_acl::pDacl	vim/vim/src/os_win32.c	/^    PACL		    pDacl;$/;"	m	struct:my_acl	file:	access:public
my_acl::pSacl	vim/vim/src/os_win32.c	/^    PACL		    pSacl;$/;"	m	struct:my_acl	file:	access:public
my_acl::pSecurityDescriptor	vim/vim/src/os_win32.c	/^    PSECURITY_DESCRIPTOR    pSecurityDescriptor;$/;"	m	struct:my_acl	file:	access:public
my_acl::pSidGroup	vim/vim/src/os_win32.c	/^    PSID		    pSidGroup;$/;"	m	struct:my_acl	file:	access:public
my_acl::pSidOwner	vim/vim/src/os_win32.c	/^    PSID		    pSidOwner;$/;"	m	struct:my_acl	file:	access:public
my_fullpath	vim/vim/src/dosinst.h	/^my_fullpath(char *buf, char *fname, int len)$/;"	f	signature:(char *buf, char *fname, int len)
my_fullpath	vim/vim/src/dosinst.h	513;"	d
my_iconv_open	vim/vim/src/mbyte.c	/^my_iconv_open(char_u *to, char_u *from)$/;"	f	signature:(char_u *to, char_u *from)
myexit	vim/vim/src/dosinst.h	/^myexit(int n)$/;"	f	signature:(int n)
myfread	vim/vim/src/tee/tee.c	/^myfread(char *buf, int elsize \/*ignored*\/, int max, FILE *fp)$/;"	f	signature:(char *buf, int elsize , int max, FILE *fp)
myresetstkoflw	vim/vim/src/os_win32.c	/^myresetstkoflw(void)$/;"	f	signature:(void)
mytoupper	vim/vim/src/dosinst.h	/^mytoupper(int c)$/;"	f	signature:(int c)
mz_buffer_type	vim/vim/src/if_mzsch.c	/^static Scheme_Type mz_buffer_type;$/;"	v	file:
mz_fix_cursor	vim/vim/src/if_mzsch.c	/^mz_fix_cursor(int lo, int hi, int extra)$/;"	f	file:	signature:(int lo, int hi, int extra)
mz_fix_cursor	vim/vim/src/if_mzsch.c	/^static void mz_fix_cursor(int lo, int hi, int extra);$/;"	p	file:	signature:(int lo, int hi, int extra)
mz_threads_allow	vim/vim/src/if_mzsch.c	/^static int mz_threads_allow = 0;$/;"	v	file:
mz_window_type	vim/vim/src/if_mzsch.c	/^static Scheme_Type mz_window_type;$/;"	v	file:
mzgc_imports	vim/vim/src/if_mzsch.c	/^static Thunk_Info mzgc_imports[] = {$/;"	v	file:
mzsch_imports	vim/vim/src/if_mzsch.c	/^static Thunk_Info mzsch_imports[] = {$/;"	v	file:
mzscheme_beep	vim/vim/src/if_mzsch.c	/^mzscheme_beep(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
mzscheme_beep	vim/vim/src/if_mzsch.c	/^static Scheme_Object *mzscheme_beep(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
mzscheme_buffer_free	vim/vim/src/if_mzsch.c	/^mzscheme_buffer_free(buf_T *buf)$/;"	f	signature:(buf_T *buf)
mzscheme_call_vim	vim/vim/src/evalfunc.c	/^mzscheme_call_vim(char_u *name, typval_T *args, typval_T *rettv)$/;"	f	signature:(char_u *name, typval_T *args, typval_T *rettv)
mzscheme_enabled	vim/vim/src/if_mzsch.c	/^mzscheme_enabled(int verbose)$/;"	f	signature:(int verbose)
mzscheme_end	vim/vim/src/if_mzsch.c	/^mzscheme_end(void)$/;"	f	signature:(void)
mzscheme_env_main	vim/vim/src/if_mzsch.c	/^mzscheme_env_main(Scheme_Env *env, int argc UNUSED, char **argv UNUSED)$/;"	f	file:	signature:(Scheme_Env *env, int argc UNUSED, char **argv UNUSED)
mzscheme_env_main	vim/vim/src/if_mzsch.c	/^static int mzscheme_env_main(Scheme_Env *env, int argc, char **argv);$/;"	p	file:	signature:(Scheme_Env *env, int argc, char **argv)
mzscheme_init	vim/vim/src/if_mzsch.c	/^mzscheme_init(void)$/;"	f	file:	signature:(void)
mzscheme_init	vim/vim/src/if_mzsch.c	/^static int mzscheme_init(void);$/;"	p	file:	signature:(void)
mzscheme_main	vim/vim/src/if_mzsch.c	/^mzscheme_main(void)$/;"	f	signature:(void)
mzscheme_open_buffer	vim/vim/src/if_mzsch.c	/^mzscheme_open_buffer(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
mzscheme_open_buffer	vim/vim/src/if_mzsch.c	/^static Scheme_Object *mzscheme_open_buffer(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
mzscheme_runtime_link_init	vim/vim/src/if_mzsch.c	/^mzscheme_runtime_link_init(char *sch_dll, char *gc_dll, int verbose)$/;"	f	file:	signature:(char *sch_dll, char *gc_dll, int verbose)
mzscheme_runtime_link_init	vim/vim/src/if_mzsch.c	/^static int mzscheme_runtime_link_init(char *sch_dll, char *gc_dll,$/;"	p	file:	signature:(char *sch_dll, char *gc_dll, int verbose)
mzscheme_to_vim	vim/vim/src/if_mzsch.c	/^mzscheme_to_vim(Scheme_Object *obj, typval_T *tv)$/;"	f	file:	signature:(Scheme_Object *obj, typval_T *tv)
mzscheme_to_vim	vim/vim/src/if_mzsch.c	/^static int mzscheme_to_vim(Scheme_Object *obj, typval_T *tv);$/;"	p	file:	signature:(Scheme_Object *obj, typval_T *tv)
mzscheme_to_vim_impl	vim/vim/src/if_mzsch.c	/^mzscheme_to_vim_impl(Scheme_Object *obj, typval_T *tv, int depth,$/;"	f	file:	signature:(Scheme_Object *obj, typval_T *tv, int depth, Scheme_Hash_Table *visited)
mzscheme_to_vim_impl	vim/vim/src/if_mzsch.c	/^static int mzscheme_to_vim_impl(Scheme_Object *obj, typval_T *tv, int depth,$/;"	p	file:	signature:(Scheme_Object *obj, typval_T *tv, int depth, Scheme_Hash_Table *visited)
mzscheme_window_free	vim/vim/src/if_mzsch.c	/^mzscheme_window_free(win_T *win)$/;"	f	signature:(win_T *win)
mzshort	vim/vim/src/if_mzsch.c	/^typedef int mzshort;$/;"	t	file:
mzthreads_allowed	vim/vim/src/if_mzsch.c	/^mzthreads_allowed(void)$/;"	f	signature:(void)
mzvim_check_threads	vim/vim/src/if_mzsch.c	/^mzvim_check_threads(void)$/;"	f	signature:(void)
mzvim_reset_timer	vim/vim/src/if_mzsch.c	/^mzvim_reset_timer(void)$/;"	f	signature:(void)
místo	vim/vim/runtime/tutor/tutor.cs	/^     první znak za místo, kde má být text vlo¾ený.$/;"	p
n	vim/vim/src/regexp_nfa.c	/^    int		    n;		\/* nr of states currently in "t" *\/$/;"	m	struct:__anon121	file:	access:public
nArgsW	vim/vim/src/os_win32.c	/^static int	nArgsW = 0;$/;"	v	file:
nChars	vim/vim/src/gui_at_fs.c	/^    int		nChars;$/;"	m	struct:__anon236	file:	access:public
nCopyAnsiToWideChar	vim/vim/src/gui_w32.c	/^nCopyAnsiToWideChar($/;"	f	file:	signature:( LPWORD lpWCStr, LPSTR lpAnsiIn)
nCopyAnsiToWideChar	vim/vim/src/gui_w32.c	/^static int nCopyAnsiToWideChar(LPWORD, LPSTR);$/;"	p	file:
nEntries	vim/vim/src/gui_at_fs.c	/^    int		nEntries;$/;"	m	struct:__anon236	file:	access:public
nIndexHigh	vim/vim/src/if_cscope.h	/^    DWORD	    nIndexHigh;	\/* st_ino has no meaning in the Windows *\/$/;"	m	struct:csi	access:public
nIndexLow	vim/vim/src/if_cscope.h	/^    DWORD	    nIndexLow;$/;"	m	struct:csi	access:public
nVolume	vim/vim/src/if_cscope.h	/^    DWORD	    nVolume;	\/* Volume serial number, instead of st_dev *\/$/;"	m	struct:csi	access:public
n_collated_copies	vim/vim/src/structs.h	/^    int		n_collated_copies;$/;"	m	struct:__anon206	access:public
n_commands	vim/vim/src/structs.h	/^    int		n_commands;		     \/* no. of commands from + or -c *\/$/;"	m	struct:__anon210	access:public
n_opencmd	vim/vim/src/normal.c	/^n_opencmd(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
n_opencmd	vim/vim/src/normal.c	/^static void	n_opencmd(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
n_pre_commands	vim/vim/src/structs.h	/^    int		n_pre_commands;		     \/* no. of commands from --cmd *\/$/;"	m	struct:__anon210	access:public
n_start_visual_mode	vim/vim/src/normal.c	/^n_start_visual_mode(int c)$/;"	f	file:	signature:(int c)
n_start_visual_mode	vim/vim/src/normal.c	/^static void	n_start_visual_mode(int c);$/;"	p	file:	signature:(int c)
n_swapchar	vim/vim/src/normal.c	/^n_swapchar(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
n_swapchar	vim/vim/src/normal.c	/^static void	n_swapchar(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
n_uncollated_copies	vim/vim/src/structs.h	/^    int		n_uncollated_copies;$/;"	m	struct:__anon206	access:public
n_virguilla	vim/vim/src/regexp_nfa.c	798;"	d	file:
nalloc_pixels	vim/vim/src/xpm/include/xpm.h	/^    int nalloc_pixels;			\/* Returns the number of alloc'ed$/;"	m	struct:__anon93	access:public
name	vim/vim/src/crypt.c	/^    char    *name;	\/* encryption name as used in 'cryptmethod' *\/$/;"	m	struct:__anon214	file:	access:public
name	vim/vim/src/dosinst.h	/^    char	*name;		\/* Vim exe name (without .exe) *\/$/;"	m	struct:__anon142	access:public
name	vim/vim/src/ex_docmd.c	/^    char	*name;$/;"	m	struct:cmdmod	file:	access:public
name	vim/vim/src/ex_docmd.c	/^    char    *name;$/;"	m	struct:__anon17	file:	access:public
name	vim/vim/src/ex_docmd.c	/^    char    *name;$/;"	m	struct:__anon18	file:	access:public
name	vim/vim/src/fileio.c	/^    char	*name;	\/* event name *\/$/;"	m	struct:event_name	file:	access:public
name	vim/vim/src/gui_at_fs.c	/^    char	*name;$/;"	m	struct:__anon237	file:	access:public
name	vim/vim/src/gui_gtk_x11.c	/^    const char	    *name;$/;"	m	struct:__anon157	file:	access:public
name	vim/vim/src/gui_xmdlg.c	/^    Widget	name;$/;"	m	struct:_SharedFontSelData	file:	access:public
name	vim/vim/src/hardcopy.c	/^    char	*name;$/;"	m	struct:prt_mediasize_S	file:	access:public
name	vim/vim/src/hardcopy.c	/^    char_u  name[64];$/;"	m	struct:prt_ps_resource_S	file:	access:public
name	vim/vim/src/if_cscope.h	/^    char *  name;$/;"	m	struct:__anon68	access:public
name	vim/vim/src/if_lua.c	/^    const char *name;$/;"	m	struct:__anon80	file:	access:public
name	vim/vim/src/if_mzsch.c	/^    char	    *name;$/;"	m	struct:__anon10	file:	access:public
name	vim/vim/src/if_mzsch.c	/^    char	*name;$/;"	m	struct:__anon9	file:	access:public
name	vim/vim/src/if_mzsch.c	/^    char    *name;$/;"	m	struct:__anon11	file:	access:public
name	vim/vim/src/if_py_both.h	/^    char	*name;$/;"	m	struct:numeric_constant	access:public
name	vim/vim/src/if_py_both.h	/^    char	*name;$/;"	m	struct:object_constant	access:public
name	vim/vim/src/if_py_both.h	/^    char_u	*name;$/;"	m	struct:__anon104	access:public
name	vim/vim/src/if_python.c	/^    char *name;$/;"	m	struct:__anon249	file:	access:public
name	vim/vim/src/if_python3.c	/^    char *name;$/;"	m	struct:__anon222	file:	access:public
name	vim/vim/src/if_ruby.c	/^    char *name;$/;"	m	struct:__anon234	file:	access:public
name	vim/vim/src/if_tcl.c	/^    char* name;$/;"	m	struct:__anon141	file:	access:public
name	vim/vim/src/mbyte.c	/^{   char *name;		int canon;}$/;"	m	struct:__anon2	file:	access:public
name	vim/vim/src/mbyte.c	/^{   char *name;		int prop;		int codepage;}$/;"	m	struct:__anon1	file:	access:public
name	vim/vim/src/misc2.c	/^    char_u	name;		\/* Single letter name of modifier *\/$/;"	m	struct:modmasktable	file:	access:public
name	vim/vim/src/misc2.c	/^    char_u  *name;	\/* Name of key *\/$/;"	m	struct:key_name_entry	file:	access:public
name	vim/vim/src/os_mswin.c	/^    char	*name;$/;"	m	struct:charset_pair	file:	access:public
name	vim/vim/src/os_mswin.c	/^    char	*name;$/;"	m	struct:quality_pair	file:	access:public
name	vim/vim/src/os_mswin.c	/^    char_u *name;$/;"	m	struct:server_id	file:	access:public
name	vim/vim/src/os_unix.c	/^    char    *name;	\/* Signal name (not char_u!). *\/$/;"	m	struct:signalinfo	file:	access:public
name	vim/vim/src/search.c	/^    char_u	*name;		\/* Full name of file *\/$/;"	m	struct:SearchedFile	file:	access:public
name	vim/vim/src/structs.h	/^    char	*name;		\/* mode name (fixed) *\/$/;"	m	struct:cursor_entry	access:public
name	vim/vim/src/structs.h	/^    char_u	*name;		    \/* Name of menu, possibly translated *\/$/;"	m	struct:VimMenu	access:public
name	vim/vim/src/structs.h	/^    const char	*name;$/;"	m	struct:__anon204	access:public
name	vim/vim/src/syntax.c	/^    char	*name;$/;"	m	struct:name_list	file:	access:public
name	vim/vim/src/syntax.c	/^    char    *name;			\/* subcommand name *\/$/;"	m	struct:subcommand	file:	access:public
name	vim/vim/src/term.c	/^    char_u  name[2];	    \/* termcap name of entry *\/$/;"	m	struct:termcode	file:	access:public
name	vim/vim/src/workshop.c	/^    char	*name;			\/* name of the menu *\/$/;"	m	struct:__anon233	file:	access:public
name	vim/vim/src/xpm/include/xpm.h	/^    char *name;			\/* Symbolic color name *\/$/;"	m	struct:__anon88	access:public
name	vim/vim/src/xpm/include/xpm.h	/^    char *name;			\/* name of the extension *\/$/;"	m	struct:__anon89	access:public
nameStrip	vim/vim/src/workshop.c	/^nameStrip($/;"	f	file:	signature:( char *raw)
name_c0	vim/vim/src/libvterm/bin/vterm-dump.c	/^static const char *name_c0[] = {$/;"	v	file:
name_c1	vim/vim/src/libvterm/bin/vterm-dump.c	/^static const char *name_c1[] = {$/;"	v	file:
name_callback	vim/vim/src/gui_xmdlg.c	/^name_callback(Widget w,$/;"	f	file:	signature:(Widget w, SharedFontSelData *data, XmListCallbackStruct *call_data)
name_csi_plain	vim/vim/src/libvterm/bin/vterm-dump.c	/^static const char *name_csi_plain[] = {$/;"	v	file:
name_list	vim/vim/src/syntax.c	/^struct name_list$/;"	s	file:
name_list::flag	vim/vim/src/syntax.c	/^    int		flag;$/;"	m	struct:name_list	file:	access:public
name_list::name	vim/vim/src/syntax.c	/^    char	*name;$/;"	m	struct:name_list	file:	access:public
name_part	vim/vim/src/gui_xmdlg.c	/^name_part(char *font, char *buf)$/;"	f	file:	signature:(char *font, char *buf)
name_to_mod_mask	vim/vim/src/misc2.c	/^name_to_mod_mask(int c)$/;"	f	signature:(int c)
namebuf	vim/vim/src/quickfix.c	/^    char_u	*namebuf;$/;"	m	struct:__anon14	file:	access:public
namedfm	vim/vim/src/mark.c	/^static xfmark_T namedfm[NMARKS + EXTRA_MARKS];		\/* marks with file nr *\/$/;"	v	file:
names	vim/vim/src/gui_xmdlg.c	/^    char	**names;	\/* font name array of arrays *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
napsal	vim/vim/runtime/tutor/tutor.cs	/^Poznámka: Pokud si nìkdy nejsi jist nìèím, co jsi napsal, stlaè <ESC> pro$/;"	p
nb_bufp2nbbuf_fire	vim/vim/src/netbeans.c	/^nb_bufp2nbbuf_fire(buf_T *bufp, int *bufnop)$/;"	f	file:	signature:(buf_T *bufp, int *bufnop)
nb_channel	vim/vim/src/netbeans.c	/^static channel_T *nb_channel = NULL;$/;"	v	file:
nb_channel_closed	vim/vim/src/netbeans.c	/^nb_channel_closed(void)$/;"	f	file:	signature:(void)
nb_debug	vim/vim/src/nbdebug.c	/^FILE		*nb_debug = NULL;$/;"	v
nb_dlevel	vim/vim/src/nbdebug.c	/^u_int		 nb_dlevel = 0;		\/* nb_debug verbosity level *\/$/;"	v
nb_do_cmd	vim/vim/src/netbeans.c	/^nb_do_cmd($/;"	f	file:	signature:( int bufno, char_u *cmd, int func, int cmdno, char_u *args)
nb_do_cmd	vim/vim/src/netbeans.c	/^static int  nb_do_cmd(int, char_u *, int, int, char_u *);$/;"	p	file:	signature:(int, char_u *, int, int, char_u *)
nb_free	vim/vim/src/netbeans.c	/^nb_free(void)$/;"	f	file:	signature:(void)
nb_free	vim/vim/src/netbeans.c	/^static void nb_free(void);$/;"	p	file:	signature:(void)
nb_get_buf	vim/vim/src/netbeans.c	/^nb_get_buf(int bufno)$/;"	f	file:	signature:(int bufno)
nb_getbufno	vim/vim/src/netbeans.c	/^nb_getbufno(buf_T *bufp)$/;"	f	file:	signature:(buf_T *bufp)
nb_init_graphics	vim/vim/src/netbeans.c	/^nb_init_graphics(void)$/;"	f	file:	signature:(void)
nb_init_graphics	vim/vim/src/netbeans.c	/^static void nb_init_graphics(void);$/;"	p	file:	signature:(void)
nb_joinlines	vim/vim/src/netbeans.c	/^nb_joinlines(linenr_T first, linenr_T other)$/;"	f	file:	signature:(linenr_T first, linenr_T other)
nb_parse_cmd	vim/vim/src/netbeans.c	/^nb_parse_cmd(char_u *cmd)$/;"	f	file:	signature:(char_u *cmd)
nb_parse_cmd	vim/vim/src/netbeans.c	/^static void nb_parse_cmd(char_u *);$/;"	p	file:	signature:(char_u *)
nb_partialremove	vim/vim/src/netbeans.c	/^nb_partialremove(linenr_T lnum, colnr_T first, colnr_T last)$/;"	f	file:	signature:(linenr_T lnum, colnr_T first, colnr_T last)
nb_quote	vim/vim/src/netbeans.c	/^nb_quote(char_u *txt)$/;"	f	file:	signature:(char_u *txt)
nb_reply_nil	vim/vim/src/netbeans.c	/^nb_reply_nil(int cmdno)$/;"	f	file:	signature:(int cmdno)
nb_reply_nr	vim/vim/src/netbeans.c	/^nb_reply_nr(int cmdno, long result)$/;"	f	file:	signature:(int cmdno, long result)
nb_reply_text	vim/vim/src/netbeans.c	/^nb_reply_text(int cmdno, char_u *result)$/;"	f	file:	signature:(int cmdno, char_u *result)
nb_send	vim/vim/src/netbeans.c	/^nb_send(char *buf, char *fun)$/;"	f	file:	signature:(char *buf, char *fun)
nb_send	vim/vim/src/netbeans.c	/^static void nb_send(char *buf, char *fun);$/;"	p	file:	signature:(char *buf, char *fun)
nb_set_curbuf	vim/vim/src/netbeans.c	/^nb_set_curbuf(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
nb_set_curbuf	vim/vim/src/netbeans.c	/^static void nb_set_curbuf(buf_T *buf);$/;"	p	file:	signature:(buf_T *buf)
nb_unquote	vim/vim/src/netbeans.c	/^nb_unquote(char_u *p, char_u **endp)$/;"	f	file:	signature:(char_u *p, char_u **endp)
nbbuf_T	vim/vim/src/netbeans.c	/^typedef struct nbbuf_struct nbbuf_T;$/;"	t	typeref:struct:nbbuf_struct	file:
nbbuf_number	vim/vim/src/netbeans.c	/^    int			 nbbuf_number;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct	vim/vim/src/netbeans.c	/^struct nbbuf_struct$/;"	s	file:
nbbuf_struct::bufp	vim/vim/src/netbeans.c	/^    buf_T		*bufp;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::displayname	vim/vim/src/netbeans.c	/^    char		*displayname;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::fireChanges	vim/vim/src/netbeans.c	/^    unsigned int	 fireChanges:1;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::initDone	vim/vim/src/netbeans.c	/^    unsigned int	 initDone:1;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::insertDone	vim/vim/src/netbeans.c	/^    unsigned int	 insertDone:1;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::modified	vim/vim/src/netbeans.c	/^    unsigned int	 modified:1;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::nbbuf_number	vim/vim/src/netbeans.c	/^    int			 nbbuf_number;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::signmap	vim/vim/src/netbeans.c	/^    int			*signmap;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::signmaplen	vim/vim/src/netbeans.c	/^    short_u		 signmaplen;$/;"	m	struct:nbbuf_struct	file:	access:public
nbbuf_struct::signmapused	vim/vim/src/netbeans.c	/^    short_u		 signmapused;$/;"	m	struct:nbbuf_struct	file:	access:public
nbdb	vim/vim/src/nbdebug.c	/^void		 nbdb(char *, ...);$/;"	p	file:	signature:(char *, ...)
nbdbg	vim/vim/src/nbdebug.c	/^nbdbg($/;"	f	signature:( char *fmt, ...)
nbdbg	vim/vim/src/nbdebug.h	/^nbdbg($/;"	f	signature:( char *fmt, ...)
nbdbg	vim/vim/src/nbdebug.h	/^void		 nbdbg(char *, ...);$/;"	p	signature:(char *, ...)
nbdebug	vim/vim/src/nbdebug.h	26;"	d
nbdebug	vim/vim/src/vim.h	2323;"	d
nbdebug_log_init	vim/vim/src/nbdebug.c	/^nbdebug_log_init($/;"	f	signature:( char *log_var, char *level_var)
nbdebug_log_init	vim/vim/src/nbdebug.h	/^void nbdebug_log_init(char *log_var, char *level_var);$/;"	p	signature:(char *log_var, char *level_var)
nbdebug_wait	vim/vim/src/nbdebug.c	/^void nbdebug_wait($/;"	f	signature:( u_int wait_flags, char *wait_var, u_int wait_secs)
nbdebug_wait	vim/vim/src/nbdebug.h	/^void nbdebug_wait(u_int wait_flags, char *wait_var, u_int wait_secs);$/;"	p	signature:(u_int wait_flags, char *wait_var, u_int wait_secs)
nchar	vim/vim/src/structs.h	/^    int		nchar;		\/* next command character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
ncharC1	vim/vim/src/structs.h	/^    int		ncharC1;	\/* first composing character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
ncharC2	vim/vim/src/structs.h	/^    int		ncharC2;	\/* second composing character (optional) *\/$/;"	m	struct:cmdarg_S	access:public
ncolors	vim/vim/src/xpm/include/xpm.h	/^    unsigned int ncolors;	\/* number of colors *\/$/;"	m	struct:__anon91	access:public
ncolors	vim/vim/src/xpm/include/xpm.h	/^    unsigned int ncolors;               \/* Number of colors *\/$/;"	m	struct:__anon93	access:public
need_check_timestamps	vim/vim/src/globals.h	/^EXTERN int	need_check_timestamps INIT(= FALSE); \/* need to check file$/;"	v
need_clear_subexpr	vim/vim/src/regexp.c	/^static int	need_clear_subexpr;	\/* subexpressions still need to be$/;"	v	file:
need_clear_zsubexpr	vim/vim/src/regexp.c	/^static int	need_clear_zsubexpr = FALSE;	\/* extmatch subexpressions$/;"	v	file:
need_clr_eos	vim/vim/src/globals.h	/^EXTERN int	need_clr_eos INIT(= FALSE); \/* need to clear text before$/;"	v
need_conversion	vim/vim/src/fileio.c	/^need_conversion(char_u *fenc)$/;"	f	file:	signature:(char_u *fenc)
need_conversion	vim/vim/src/fileio.c	/^static int need_conversion(char_u *fenc);$/;"	p	file:	signature:(char_u *fenc)
need_cursor_line_redraw	vim/vim/src/globals.h	/^EXTERN int		need_cursor_line_redraw INIT(= FALSE);$/;"	v
need_fileinfo	vim/vim/src/globals.h	/^EXTERN int	need_fileinfo INIT(= FALSE);\/* do fileinfo() after redraw *\/$/;"	v
need_gather	vim/vim/src/term.c	/^static int	need_gather = FALSE;	    \/* need to fill termleader[] *\/$/;"	v	file:
need_highlight_changed	vim/vim/src/globals.h	/^EXTERN int	need_highlight_changed INIT(= TRUE);$/;"	v
need_key_msg	vim/vim/src/globals.h	/^EXTERN char need_key_msg[] INIT(= N_("Need encryption key for \\"%s\\""));$/;"	v
need_maketitle	vim/vim/src/globals.h	/^EXTERN int	need_maketitle INIT(= TRUE); \/* call maketitle() soon *\/$/;"	v
need_mouse_correct	vim/vim/src/globals.h	/^EXTERN int	need_mouse_correct INIT(= FALSE);$/;"	v
need_rb_str_new_cstr	vim/vim/src/if_ruby.c	271;"	d	file:
need_rethrow	vim/vim/src/ex_docmd.c	/^    int		need_rethrow;$/;"	m	struct:dbg_stuff	file:	access:public
need_rethrow	vim/vim/src/globals.h	/^EXTERN int need_rethrow INIT(= FALSE);$/;"	v
need_start_insertmode	vim/vim/src/globals.h	/^EXTERN int	need_start_insertmode INIT(= FALSE);$/;"	v
need_uninstall_entry	vim/vim/src/dosinst.c	/^static int	need_uninstall_entry = 0;$/;"	v	file:
need_vimrun_warning	vim/vim/src/os_win32.c	/^static int need_vimrun_warning = FALSE;$/;"	v	file:
need_wait_return	vim/vim/src/globals.h	/^EXTERN int	need_wait_return INIT(= 0); \/* need to wait for return later *\/$/;"	v
needs_charset	vim/vim/src/hardcopy.c	/^    int		needs_charset;$/;"	m	struct:prt_ps_encoding_S	file:	access:public
needupdate	vim/vim/src/netbeans.c	/^static int needupdate = 0;$/;"	v	file:
nested	vim/vim/src/fileio.c	/^    char	    nested;		\/* If autocommands nest here *\/$/;"	m	struct:AutoCmd	file:	access:public
netbeansArg	vim/vim/src/globals.h	/^EXTERN char *netbeansArg INIT(= NULL);	\/* the -nb[:host:port:passwd] arg *\/$/;"	v
netbeansFireChanges	vim/vim/src/globals.h	/^EXTERN int netbeansFireChanges INIT(= 1); \/* send buffer changes if != 0 *\/$/;"	v
netbeansForcedQuit	vim/vim/src/globals.h	/^EXTERN int netbeansForcedQuit INIT(= 0);\/* don't write modified files *\/$/;"	v
netbeansReadFile	vim/vim/src/globals.h	/^EXTERN int netbeansReadFile INIT(= 1);	\/* OK to read from disk if != 0 *\/$/;"	v
netbeansSuppressNoLines	vim/vim/src/globals.h	/^EXTERN int netbeansSuppressNoLines INIT(= 0); \/* skip "No lines in buffer" *\/$/;"	v
netbeans_active	vim/vim/src/netbeans.c	/^netbeans_active(void)$/;"	f	signature:(void)
netbeans_beval_cb	vim/vim/src/netbeans.c	/^netbeans_beval_cb($/;"	f	signature:( BalloonEval *beval, int state UNUSED)
netbeans_button_release	vim/vim/src/netbeans.c	/^netbeans_button_release(int button)$/;"	f	signature:(int button)
netbeans_close	vim/vim/src/netbeans.c	/^netbeans_close(void)$/;"	f	file:	signature:(void)
netbeans_connect	vim/vim/src/netbeans.c	/^netbeans_connect(char *params, int doabort)$/;"	f	file:	signature:(char *params, int doabort)
netbeans_connect	vim/vim/src/netbeans.c	/^static int netbeans_connect(char *, int);$/;"	p	file:	signature:(char *, int)
netbeans_deleted_all_lines	vim/vim/src/netbeans.c	/^netbeans_deleted_all_lines(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
netbeans_draw_multisign_indicator	vim/vim/src/gui_w32.c	/^netbeans_draw_multisign_indicator(int row)$/;"	f	signature:(int row)
netbeans_draw_multisign_indicator	vim/vim/src/netbeans.c	/^netbeans_draw_multisign_indicator(int row)$/;"	f	signature:(int row)
netbeans_end	vim/vim/src/netbeans.c	/^netbeans_end(void)$/;"	f	signature:(void)
netbeans_file_activated	vim/vim/src/netbeans.c	/^netbeans_file_activated(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
netbeans_file_killed	vim/vim/src/netbeans.c	/^netbeans_file_killed(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
netbeans_file_opened	vim/vim/src/netbeans.c	/^netbeans_file_opened(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
netbeans_frame_moved	vim/vim/src/netbeans.c	/^netbeans_frame_moved(int new_x, int new_y)$/;"	f	signature:(int new_x, int new_y)
netbeans_gutter_click	vim/vim/src/netbeans.c	/^netbeans_gutter_click(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
netbeans_inserted	vim/vim/src/netbeans.c	/^netbeans_inserted($/;"	f	signature:( buf_T *bufp, linenr_T linenr, colnr_T col, char_u *txt, int newlen)
netbeans_is_guarded	vim/vim/src/netbeans.c	/^netbeans_is_guarded(linenr_T top, linenr_T bot)$/;"	f	signature:(linenr_T top, linenr_T bot)
netbeans_keycommand	vim/vim/src/netbeans.c	/^netbeans_keycommand(int key)$/;"	f	signature:(int key)
netbeans_keyname	vim/vim/src/netbeans.c	/^netbeans_keyname(int key, char *buf)$/;"	f	file:	signature:(int key, char *buf)
netbeans_keystring	vim/vim/src/netbeans.c	/^netbeans_keystring(char_u *keyName)$/;"	f	file:	signature:(char_u *keyName)
netbeans_keystring	vim/vim/src/netbeans.c	/^static int netbeans_keystring(char_u *keystr);$/;"	p	file:	signature:(char_u *keystr)
netbeans_open	vim/vim/src/netbeans.c	/^netbeans_open(char *params, int doabort)$/;"	f	signature:(char *params, int doabort)
netbeans_parse_messages	vim/vim/src/netbeans.c	/^netbeans_parse_messages(void)$/;"	f	signature:(void)
netbeans_removed	vim/vim/src/netbeans.c	/^netbeans_removed($/;"	f	signature:( buf_T *bufp, linenr_T linenr, colnr_T col, long len)
netbeans_save_buffer	vim/vim/src/netbeans.c	/^netbeans_save_buffer(buf_T *bufp)$/;"	f	signature:(buf_T *bufp)
netbeans_send_disconnect	vim/vim/src/netbeans.c	/^netbeans_send_disconnect(void)$/;"	f	signature:(void)
netbeans_unmodified	vim/vim/src/netbeans.c	/^netbeans_unmodified(buf_T *bufp UNUSED)$/;"	f	signature:(buf_T *bufp UNUSED)
new	vim/vim/src/VisVim/Commands.cpp	8;"	d	file:
new	vim/vim/src/VisVim/DSAddIn.cpp	7;"	d	file:
new	vim/vim/src/VisVim/OleAut.cpp	41;"	d	file:
new	vim/vim/src/VisVim/VisVim.cpp	11;"	d	file:
newFoldLevel	vim/vim/src/fold.c	/^newFoldLevel(void)$/;"	f	signature:(void)
newFoldLevelWin	vim/vim/src/fold.c	/^newFoldLevelWin(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
newFoldLevelWin	vim/vim/src/fold.c	/^static void newFoldLevelWin(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
new_cmdpos	vim/vim/src/ex_getln.c	/^static int	new_cmdpos;	\/* position set by set_cmdline_pos() *\/$/;"	v	file:
new_curbuf	vim/vim/src/structs.h	/^    bufref_T	new_curbuf;	\/* new curbuf *\/$/;"	m	struct:__anon203	access:public
new_curwin	vim/vim/src/structs.h	/^    win_T	*new_curwin;	\/* new curwin *\/$/;"	m	struct:__anon203	access:public
new_fnames_from_AEDesc	vim/vim/src/gui_mac.c	/^new_fnames_from_AEDesc(AEDesc *theList, long *numFiles, OSErr *error)$/;"	f	signature:(AEDesc *theList, long *numFiles, OSErr *error)
new_frame	vim/vim/src/window.c	/^new_frame(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
new_frame	vim/vim/src/window.c	/^static void new_frame(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
new_insert_skip	vim/vim/src/edit.c	/^static int	new_insert_skip;  \/* nr of chars in front of current insert *\/$/;"	v	file:
new_last_cmdline	vim/vim/src/globals.h	/^EXTERN char_u	*new_last_cmdline INIT(= NULL);	\/* new value for last_cmdline *\/$/;"	v
new_pixel_height	vim/vim/src/globals.h	/^EXTERN int	new_pixel_height INIT(= 0);$/;"	v
new_pixel_width	vim/vim/src/globals.h	/^EXTERN int	new_pixel_width INIT(= 0);$/;"	v
new_script_vars	vim/vim/src/eval.c	/^new_script_vars(scid_T id)$/;"	f	signature:(scid_T id)
newenv	vim/vim/src/misc2.c	/^newenv(void)$/;"	f	file:	signature:(void)
newenv	vim/vim/src/misc2.c	/^static int  newenv(void);	\/* copy env. from stack to heap *\/$/;"	p	file:	signature:(void)
newline	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int newline:1;$/;"	m	struct:VTermState::__anon35	access:public
newline_csi_plain	vim/vim/src/libvterm/bin/vterm-dump.c	/^static const int newline_csi_plain[] = {$/;"	v	file:
newline_on_exit	vim/vim/src/globals.h	/^EXTERN int	newline_on_exit INIT(= FALSE);	\/* did msg in altern. screen *\/$/;"	v
next	vim/vim/src/fileio.c	/^    struct AutoCmd  *next;		\/* Next AutoCmd in list *\/$/;"	m	struct:AutoCmd	typeref:struct:AutoCmd::AutoCmd	file:	access:public
next	vim/vim/src/fileio.c	/^    struct AutoPat  *next;		\/* next AutoPat in AutoPat list *\/$/;"	m	struct:AutoPat	typeref:struct:AutoPat::AutoPat	file:	access:public
next	vim/vim/src/fileio.c	/^    struct AutoPatCmd   *next;	\/* chain of active apc-s for auto-invalidation*\/$/;"	m	struct:AutoPatCmd	typeref:struct:AutoPatCmd::AutoPatCmd	file:	access:public
next	vim/vim/src/if_py_both.h	/^    nextfun next;$/;"	m	struct:__anon99	access:public
next	vim/vim/src/if_tcl.c	/^    struct ref	*next;$/;"	m	struct:ref	typeref:struct:ref::ref	file:	access:public
next	vim/vim/src/if_xcmdsrv.c	/^    struct x_cmdqueue	*next;$/;"	m	struct:x_cmdqueue	typeref:struct:x_cmdqueue::x_cmdqueue	file:	access:public
next	vim/vim/src/message.c	/^    struct msg_hist	*next;$/;"	m	struct:msg_hist	typeref:struct:msg_hist::msg_hist	file:	access:public
next	vim/vim/src/netbeans.c	/^    struct keyqueue *next;$/;"	m	struct:keyqueue	typeref:struct:keyqueue::keyqueue	file:	access:public
next	vim/vim/src/quickfix.c	/^    efm_T	    *next;	\/* pointer to next (NULL if last) *\/$/;"	m	struct:efm_S	file:	access:public
next	vim/vim/src/quickfix.c	/^    struct dir_stack_T	*next;$/;"	m	struct:dir_stack_T	typeref:struct:dir_stack_T::dir_stack_T	file:	access:public
next	vim/vim/src/regexp_nfa.c	/^    Ptrlist	*next;$/;"	m	union:Ptrlist	file:	access:public
next	vim/vim/src/spellfile.c	/^	wordnode_T *next;	\/* next node with same hash key *\/$/;"	m	union:wordnode_S::__anon6	file:	access:public
next	vim/vim/src/structs.h	/^    eslist_T	*next;			\/* next element on the list *\/$/;"	m	struct:eslist_elem	access:public
next	vim/vim/src/structs.h	/^    matchitem_T	*next;$/;"	m	struct:matchitem	access:public
next	vim/vim/src/structs.h	/^    signlist_T	*next;		\/* next signlist entry *\/$/;"	m	struct:signlist	access:public
next	vim/vim/src/structs.h	/^    struct msglist	*next;		\/* next of several messages in a row *\/$/;"	m	struct:msglist	typeref:struct:msglist::msglist	access:public
next	vim/vim/src/structs.h	/^    vimmenu_T	*next;		    \/* Next item in menu *\/$/;"	m	struct:VimMenu	access:public
nextPtr	vim/vim/src/if_xcmdsrv.c	/^    struct PendingCommand *nextPtr;$/;"	m	struct:PendingCommand	typeref:struct:PendingCommand::PendingCommand	file:	access:public
next_ch_id	vim/vim/src/channel.c	/^static int next_ch_id = 0;$/;"	v	file:
next_fenc	vim/vim/src/fileio.c	/^next_fenc(char_u **pp)$/;"	f	file:	signature:(char_u **pp)
next_fenc	vim/vim/src/fileio.c	/^static char_u *next_fenc(char_u **pp);$/;"	p	file:	signature:(char_u **pp)
next_for_item	vim/vim/src/eval.c	/^next_for_item(void *fi_void, char_u *arg)$/;"	f	signature:(void *fi_void, char_u *arg)
next_list	vim/vim/src/structs.h	/^    short	*next_list;	\/* ID list for next match (if non-zero) *\/$/;"	m	struct:keyentry	access:public
next_list	vim/vim/src/syntax.c	/^    short	*next_list;	\/* group IDs for "nextgroup" argument *\/$/;"	m	struct:__anon137	file:	access:public
next_match_col	vim/vim/src/syntax.c	/^static int next_match_col;		\/* column for start of next match *\/$/;"	v	file:
next_match_end_idx	vim/vim/src/syntax.c	/^static int next_match_end_idx;		\/* ID of group for end pattn or zero *\/$/;"	v	file:
next_match_eoe_pos	vim/vim/src/syntax.c	/^static lpos_T next_match_eoe_pos;	\/* pos. for end of end pattern *\/$/;"	v	file:
next_match_eos_pos	vim/vim/src/syntax.c	/^static lpos_T next_match_eos_pos;	\/* end of start pattn (start region) *\/$/;"	v	file:
next_match_extmatch	vim/vim/src/syntax.c	/^static reg_extmatch_T *next_match_extmatch = NULL;$/;"	v	file:
next_match_flags	vim/vim/src/syntax.c	/^static long next_match_flags;		\/* flags for next match *\/$/;"	v	file:
next_match_h_endpos	vim/vim/src/syntax.c	/^static lpos_T next_match_h_endpos;	\/* pos. for highl. end of next match *\/$/;"	v	file:
next_match_h_startpos	vim/vim/src/syntax.c	/^static lpos_T next_match_h_startpos;  \/* pos. for highl. start of next match *\/$/;"	v	file:
next_match_idx	vim/vim/src/syntax.c	/^static int next_match_idx;		\/* index of matched item *\/$/;"	v	file:
next_match_m_endpos	vim/vim/src/syntax.c	/^static lpos_T next_match_m_endpos;	\/* position for end of next match *\/$/;"	v	file:
next_search_hl	vim/vim/src/screen.c	/^next_search_hl($/;"	f	file:	signature:( win_T *win, match_T *shl, linenr_T lnum, colnr_T mincol, matchitem_T *cur)
next_search_hl	vim/vim/src/screen.c	/^static void next_search_hl(win_T *win, match_T *shl, linenr_T lnum, colnr_T mincol, matchitem_T *cur);$/;"	p	file:	signature:(win_T *win, match_T *shl, linenr_T lnum, colnr_T mincol, matchitem_T *cur)
next_search_hl_pos	vim/vim/src/screen.c	/^next_search_hl_pos($/;"	f	file:	signature:( match_T *shl, linenr_T lnum, posmatch_T *posmatch, colnr_T mincol)
next_search_hl_pos	vim/vim/src/screen.c	/^static int next_search_hl_pos(match_T *shl, linenr_T lnum, posmatch_T *pos, colnr_T mincol);$/;"	p	file:	signature:(match_T *shl, linenr_T lnum, posmatch_T *pos, colnr_T mincol)
next_seqnr	vim/vim/src/syntax.c	/^static int next_seqnr = 1;		\/* value to use for si_seqnr *\/$/;"	v	file:
next_sign_typenr	vim/vim/src/ex_cmds.c	/^static int	next_sign_typenr = 1;$/;"	v	file:
nextb	vim/vim/src/regexp.c	/^    int		nextb;		\/* next byte *\/$/;"	m	struct:regstar_S	file:	access:public
nextb_ic	vim/vim/src/regexp.c	/^    int		nextb_ic;	\/* next byte reverse case *\/$/;"	m	struct:regstar_S	file:	access:public
nextchr	vim/vim/src/regexp.c	/^     int	nextchr;$/;"	m	struct:__anon124	file:	access:public
nextchr	vim/vim/src/regexp.c	/^static int	nextchr;	\/* used for ungetchr() *\/$/;"	v	file:
nextcmd	vim/vim/src/ex_cmds.h	/^    char_u	*nextcmd;	\/* next command (NULL if none) *\/$/;"	m	struct:exarg	access:public
nextcmd	vim/vim/src/fileio.c	/^    AutoCmd	*nextcmd;	\/* next AutoCmd to execute *\/$/;"	m	struct:AutoPatCmd	file:	access:public
nextensions	vim/vim/src/xpm/include/xpm.h	/^    unsigned int nextensions;		\/* Number of extensions *\/$/;"	m	struct:__anon93	access:public
nextensions	vim/vim/src/xpm/include/xpm.h	/^    unsigned int nextensions;	\/* number of extensions *\/$/;"	m	struct:__anon92	access:public
nextent	vim/vim/src/termlib.c	/^nextent(char *tbuf, FILE *termcap, int buflen)$/;"	f	file:	signature:(char *tbuf, FILE *termcap, int buflen)
nextent	vim/vim/src/termlib.c	/^static int  nextent(char *, FILE *, int);$/;"	p	file:	signature:(char *, FILE *, int)
nextfun	vim/vim/src/if_py_both.h	/^typedef PyObject *(*nextfun)(void **);$/;"	t
nextline	vim/vim/src/ex_cmds2.c	/^    char_u      *nextline;      \/* if not NULL: line that was read ahead *\/$/;"	m	struct:source_cookie	file:	access:public
nextwild	vim/vim/src/ex_getln.c	/^nextwild($/;"	f	file:	signature:( expand_T *xp, int type, int options, int escape)
nextwild	vim/vim/src/ex_getln.c	/^static int	nextwild(expand_T *xp, int type, int options, int escape);$/;"	p	file:	signature:(expand_T *xp, int type, int options, int escape)
nfa_alt_listid	vim/vim/src/regexp_nfa.c	/^static int nfa_alt_listid;$/;"	v	file:
nfa_classcodes	vim/vim/src/regexp_nfa.c	/^static int nfa_classcodes[] = {$/;"	v	file:
nfa_did_time_out	vim/vim/src/regexp_nfa.c	/^nfa_did_time_out()$/;"	f	file:
nfa_dump	vim/vim/src/regexp_nfa.c	/^nfa_dump(nfa_regprog_T *prog)$/;"	f	file:	signature:(nfa_regprog_T *prog)
nfa_dump	vim/vim/src/regexp_nfa.c	/^static void nfa_dump(nfa_regprog_T *prog);$/;"	p	file:	signature:(nfa_regprog_T *prog)
nfa_emit_equi_class	vim/vim/src/regexp_nfa.c	/^nfa_emit_equi_class(int c)$/;"	f	file:	signature:(int c)
nfa_emit_equi_class	vim/vim/src/regexp_nfa.c	/^static int nfa_emit_equi_class(int c);$/;"	p	file:	signature:(int c)
nfa_endp	vim/vim/src/regexp_nfa.c	/^static save_se_T *nfa_endp = NULL;$/;"	v	file:
nfa_get_match_text	vim/vim/src/regexp_nfa.c	/^nfa_get_match_text(nfa_state_T *start)$/;"	f	file:	signature:(nfa_state_T *start)
nfa_get_match_text	vim/vim/src/regexp_nfa.c	/^static char_u *nfa_get_match_text(nfa_state_T *start);$/;"	p	file:	signature:(nfa_state_T *start)
nfa_get_reganch	vim/vim/src/regexp_nfa.c	/^nfa_get_reganch(nfa_state_T *start, int depth)$/;"	f	file:	signature:(nfa_state_T *start, int depth)
nfa_get_reganch	vim/vim/src/regexp_nfa.c	/^static int nfa_get_reganch(nfa_state_T *start, int depth);$/;"	p	file:	signature:(nfa_state_T *start, int depth)
nfa_get_regstart	vim/vim/src/regexp_nfa.c	/^nfa_get_regstart(nfa_state_T *start, int depth)$/;"	f	file:	signature:(nfa_state_T *start, int depth)
nfa_get_regstart	vim/vim/src/regexp_nfa.c	/^static int nfa_get_regstart(nfa_state_T *start, int depth);$/;"	p	file:	signature:(nfa_state_T *start, int depth)
nfa_has_backref	vim/vim/src/regexp_nfa.c	/^static int nfa_has_backref;$/;"	v	file:
nfa_has_zend	vim/vim/src/regexp_nfa.c	/^static int nfa_has_zend;$/;"	v	file:
nfa_has_zsubexpr	vim/vim/src/regexp_nfa.c	/^static int nfa_has_zsubexpr;$/;"	v	file:
nfa_list_T	vim/vim/src/regexp_nfa.c	/^} nfa_list_T;$/;"	t	typeref:struct:__anon121	file:
nfa_listid	vim/vim/src/regexp_nfa.c	/^static int nfa_listid;$/;"	v	file:
nfa_ll_index	vim/vim/src/regexp_nfa.c	/^static int nfa_ll_index = 0;$/;"	v	file:
nfa_match	vim/vim/src/regexp_nfa.c	/^static int nfa_match;$/;"	v	file:
nfa_max_width	vim/vim/src/regexp_nfa.c	/^nfa_max_width(nfa_state_T *startstate, int depth)$/;"	f	file:	signature:(nfa_state_T *startstate, int depth)
nfa_max_width	vim/vim/src/regexp_nfa.c	/^static int nfa_max_width(nfa_state_T *startstate, int depth);$/;"	p	file:	signature:(nfa_state_T *startstate, int depth)
nfa_nsubexpr	vim/vim/src/regexp_nfa.c	/^static int nfa_nsubexpr;$/;"	v	file:
nfa_pim_S	vim/vim/src/regexp_nfa.c	/^struct nfa_pim_S$/;"	s	file:
nfa_pim_S::__anon119::pos	vim/vim/src/regexp_nfa.c	/^	lpos_T	pos;$/;"	m	union:nfa_pim_S::__anon119	file:	access:public
nfa_pim_S::__anon119::ptr	vim/vim/src/regexp_nfa.c	/^	char_u	*ptr;$/;"	m	union:nfa_pim_S::__anon119	file:	access:public
nfa_pim_S::end	vim/vim/src/regexp_nfa.c	/^    } end;			\/* where the match must end *\/$/;"	m	struct:nfa_pim_S	typeref:union:nfa_pim_S::__anon119	file:	access:public
nfa_pim_S::result	vim/vim/src/regexp_nfa.c	/^    int		result;		\/* NFA_PIM_*, see below *\/$/;"	m	struct:nfa_pim_S	file:	access:public
nfa_pim_S::state	vim/vim/src/regexp_nfa.c	/^    nfa_state_T	*state;		\/* the invisible match start state *\/$/;"	m	struct:nfa_pim_S	file:	access:public
nfa_pim_S::subs	vim/vim/src/regexp_nfa.c	/^    regsubs_T	subs;		\/* submatch info, only party used *\/$/;"	m	struct:nfa_pim_S	file:	access:public
nfa_pim_T	vim/vim/src/regexp_nfa.c	/^typedef struct nfa_pim_S nfa_pim_T;$/;"	t	typeref:struct:nfa_pim_S	file:
nfa_postfix_dump	vim/vim/src/regexp_nfa.c	/^nfa_postfix_dump(char_u *expr, int retval)$/;"	f	file:	signature:(char_u *expr, int retval)
nfa_postfix_dump	vim/vim/src/regexp_nfa.c	/^static void nfa_postfix_dump(char_u *expr, int retval);$/;"	p	file:	signature:(char_u *expr, int retval)
nfa_postprocess	vim/vim/src/regexp_nfa.c	/^nfa_postprocess(nfa_regprog_T *prog)$/;"	f	file:	signature:(nfa_regprog_T *prog)
nfa_postprocess	vim/vim/src/regexp_nfa.c	/^static void nfa_postprocess(nfa_regprog_T *prog);$/;"	p	file:	signature:(nfa_regprog_T *prog)
nfa_print_state	vim/vim/src/regexp_nfa.c	/^nfa_print_state(FILE *debugf, nfa_state_T *state)$/;"	f	file:	signature:(FILE *debugf, nfa_state_T *state)
nfa_print_state	vim/vim/src/regexp_nfa.c	/^static void nfa_print_state(FILE *debugf, nfa_state_T *state);$/;"	p	file:	signature:(FILE *debugf, nfa_state_T *state)
nfa_print_state2	vim/vim/src/regexp_nfa.c	/^nfa_print_state2(FILE *debugf, nfa_state_T *state, garray_T *indent)$/;"	f	file:	signature:(FILE *debugf, nfa_state_T *state, garray_T *indent)
nfa_print_state2	vim/vim/src/regexp_nfa.c	/^static void nfa_print_state2(FILE *debugf, nfa_state_T *state, garray_T *indent);$/;"	p	file:	signature:(FILE *debugf, nfa_state_T *state, garray_T *indent)
nfa_re_flags	vim/vim/src/regexp_nfa.c	/^static int nfa_re_flags;$/;"	v	file:
nfa_re_num_cmp	vim/vim/src/regexp_nfa.c	/^nfa_re_num_cmp(long_u val, int op, long_u pos)$/;"	f	file:	signature:(long_u val, int op, long_u pos)
nfa_re_num_cmp	vim/vim/src/regexp_nfa.c	/^static int nfa_re_num_cmp(long_u val, int op, long_u pos);$/;"	p	file:	signature:(long_u val, int op, long_u pos)
nfa_recognize_char_class	vim/vim/src/regexp_nfa.c	/^nfa_recognize_char_class(char_u *start, char_u *end, int extra_newl)$/;"	f	file:	signature:(char_u *start, char_u *end, int extra_newl)
nfa_recognize_char_class	vim/vim/src/regexp_nfa.c	/^static int nfa_recognize_char_class(char_u *start, char_u *end, int extra_newl);$/;"	p	file:	signature:(char_u *start, char_u *end, int extra_newl)
nfa_reg	vim/vim/src/regexp_nfa.c	/^nfa_reg($/;"	f	file:	signature:( int paren)
nfa_reg	vim/vim/src/regexp_nfa.c	/^static int nfa_reg(int paren);$/;"	p	file:	signature:(int paren)
nfa_regatom	vim/vim/src/regexp_nfa.c	/^nfa_regatom(void)$/;"	f	file:	signature:(void)
nfa_regatom	vim/vim/src/regexp_nfa.c	/^static int nfa_regatom(void);$/;"	p	file:	signature:(void)
nfa_regbranch	vim/vim/src/regexp_nfa.c	/^nfa_regbranch(void)$/;"	f	file:	signature:(void)
nfa_regbranch	vim/vim/src/regexp_nfa.c	/^static int nfa_regbranch(void);$/;"	p	file:	signature:(void)
nfa_regcomp	vim/vim/src/regexp_nfa.c	/^nfa_regcomp(char_u *expr, int re_flags)$/;"	f	file:	signature:(char_u *expr, int re_flags)
nfa_regcomp	vim/vim/src/regexp_nfa.c	/^static regprog_T *nfa_regcomp(char_u *expr, int re_flags);$/;"	p	file:	signature:(char_u *expr, int re_flags)
nfa_regcomp_start	vim/vim/src/regexp_nfa.c	/^nfa_regcomp_start($/;"	f	file:	signature:( char_u *expr, int re_flags)
nfa_regcomp_start	vim/vim/src/regexp_nfa.c	/^static int nfa_regcomp_start(char_u *expr, int re_flags);$/;"	p	file:	signature:(char_u *expr, int re_flags)
nfa_regconcat	vim/vim/src/regexp_nfa.c	/^nfa_regconcat(void)$/;"	f	file:	signature:(void)
nfa_regconcat	vim/vim/src/regexp_nfa.c	/^static int nfa_regconcat(void);$/;"	p	file:	signature:(void)
nfa_regengine	vim/vim/src/regexp.c	/^static regengine_T nfa_regengine =$/;"	v	file:
nfa_regengine	vim/vim/src/regexp.c	/^static regengine_T nfa_regengine;$/;"	v	file:
nfa_regexec_both	vim/vim/src/regexp_nfa.c	/^nfa_regexec_both($/;"	f	file:	signature:( char_u *line, colnr_T startcol, proftime_T *tm, int *timed_out)
nfa_regexec_both	vim/vim/src/regexp_nfa.c	/^static long nfa_regexec_both(char_u *line, colnr_T col, proftime_T *tm, int *timed_out);$/;"	p	file:	signature:(char_u *line, colnr_T col, proftime_T *tm, int *timed_out)
nfa_regexec_multi	vim/vim/src/regexp_nfa.c	/^nfa_regexec_multi($/;"	f	file:	signature:( regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm, int *timed_out)
nfa_regexec_multi	vim/vim/src/regexp_nfa.c	/^static long nfa_regexec_multi(regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm, int *timed_out);$/;"	p	file:	signature:(regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm, int *timed_out)
nfa_regexec_nl	vim/vim/src/regexp_nfa.c	/^nfa_regexec_nl($/;"	f	file:	signature:( regmatch_T *rmp, char_u *line, colnr_T col, int line_lbr)
nfa_regexec_nl	vim/vim/src/regexp_nfa.c	/^static int  nfa_regexec_nl(regmatch_T *rmp, char_u *line, colnr_T col, int line_lbr);$/;"	p	file:	signature:(regmatch_T *rmp, char_u *line, colnr_T col, int line_lbr)
nfa_regfree	vim/vim/src/regexp_nfa.c	/^nfa_regfree(regprog_T *prog)$/;"	f	file:	signature:(regprog_T *prog)
nfa_regfree	vim/vim/src/regexp_nfa.c	/^static void nfa_regfree(regprog_T *prog);$/;"	p	file:	signature:(regprog_T *prog)
nfa_regmatch	vim/vim/src/regexp_nfa.c	/^nfa_regmatch($/;"	f	file:	signature:( nfa_regprog_T *prog, nfa_state_T *start, regsubs_T *submatch, regsubs_T *m)
nfa_regmatch	vim/vim/src/regexp_nfa.c	/^static int nfa_regmatch(nfa_regprog_T *prog, nfa_state_T *start, regsubs_T *submatch, regsubs_T *m);$/;"	p	file:	signature:(nfa_regprog_T *prog, nfa_state_T *start, regsubs_T *submatch, regsubs_T *m)
nfa_regpiece	vim/vim/src/regexp_nfa.c	/^nfa_regpiece(void)$/;"	f	file:	signature:(void)
nfa_regpiece	vim/vim/src/regexp_nfa.c	/^static int nfa_regpiece(void);$/;"	p	file:	signature:(void)
nfa_regprog_T	vim/vim/src/regexp.h	/^} nfa_regprog_T;$/;"	t	typeref:struct:__anon144
nfa_regtry	vim/vim/src/regexp_nfa.c	/^nfa_regtry($/;"	f	file:	signature:( nfa_regprog_T *prog, colnr_T col, proftime_T *tm UNUSED, int *timed_out UNUSED)
nfa_regtry	vim/vim/src/regexp_nfa.c	/^static long nfa_regtry(nfa_regprog_T *prog, colnr_T col, proftime_T *tm, int *timed_out);$/;"	p	file:	signature:(nfa_regprog_T *prog, colnr_T col, proftime_T *tm, int *timed_out)
nfa_restore_listids	vim/vim/src/regexp_nfa.c	/^nfa_restore_listids(nfa_regprog_T *prog, int *list)$/;"	f	file:	signature:(nfa_regprog_T *prog, int *list)
nfa_restore_listids	vim/vim/src/regexp_nfa.c	/^static void nfa_restore_listids(nfa_regprog_T *prog, int *list);$/;"	p	file:	signature:(nfa_regprog_T *prog, int *list)
nfa_save_listids	vim/vim/src/regexp_nfa.c	/^nfa_save_listids(nfa_regprog_T *prog, int *list)$/;"	f	file:	signature:(nfa_regprog_T *prog, int *list)
nfa_save_listids	vim/vim/src/regexp_nfa.c	/^static void nfa_save_listids(nfa_regprog_T *prog, int *list);$/;"	p	file:	signature:(nfa_regprog_T *prog, int *list)
nfa_set_code	vim/vim/src/regexp_nfa.c	/^nfa_set_code(int c)$/;"	f	file:	signature:(int c)
nfa_set_code	vim/vim/src/regexp_nfa.c	/^static void nfa_set_code(int c);$/;"	p	file:	signature:(int c)
nfa_state	vim/vim/src/regexp.h	/^struct nfa_state$/;"	s
nfa_state::c	vim/vim/src/regexp.h	/^    int			c;$/;"	m	struct:nfa_state	access:public
nfa_state::id	vim/vim/src/regexp.h	/^    int			id;$/;"	m	struct:nfa_state	access:public
nfa_state::lastlist	vim/vim/src/regexp.h	/^    int			lastlist[2]; \/* 0: normal, 1: recursive *\/$/;"	m	struct:nfa_state	access:public
nfa_state::out	vim/vim/src/regexp.h	/^    nfa_state_T		*out;$/;"	m	struct:nfa_state	access:public
nfa_state::out1	vim/vim/src/regexp.h	/^    nfa_state_T		*out1;$/;"	m	struct:nfa_state	access:public
nfa_state::val	vim/vim/src/regexp.h	/^    int			val;$/;"	m	struct:nfa_state	access:public
nfa_state_T	vim/vim/src/regexp.h	/^typedef struct nfa_state nfa_state_T;$/;"	t	typeref:struct:nfa_state
nfa_thread_T	vim/vim/src/regexp_nfa.c	/^} nfa_thread_T;$/;"	t	typeref:struct:__anon120	file:
nfa_time_count	vim/vim/src/regexp_nfa.c	/^static int         nfa_time_count;$/;"	v	file:
nfa_time_limit	vim/vim/src/regexp_nfa.c	/^static proftime_T  *nfa_time_limit;$/;"	v	file:
nfa_timed_out	vim/vim/src/regexp_nfa.c	/^static int	   *nfa_timed_out;$/;"	v	file:
nlines	vim/vim/src/xpm/include/xpm.h	/^    unsigned int nlines;	\/* number of lines in this extension *\/$/;"	m	struct:__anon89	access:public
no_Magic	vim/vim/src/regexp.c	/^no_Magic(int x)$/;"	f	file:	signature:(int x)
no_abbr	vim/vim/src/globals.h	/^EXTERN int	no_abbr INIT(= TRUE);	\/* TRUE when no abbreviations loaded *\/$/;"	v
no_check_timestamps	vim/vim/src/globals.h	/^EXTERN int	no_check_timestamps INIT(= 0);	\/* Don't check timestamps *\/$/;"	v
no_console_input	vim/vim/src/gui.c	/^no_console_input(void)$/;"	f	signature:(void)
no_hlsearch	vim/vim/src/globals.h	/^EXTERN int	no_hlsearch INIT(= FALSE);$/;"	v
no_lines_msg	vim/vim/src/globals.h	/^EXTERN char_u no_lines_msg[]	INIT(= N_("--No lines in buffer--"));$/;"	v
no_mapping	vim/vim/src/globals.h	/^EXTERN int no_mapping INIT(= FALSE);	\/* currently no mapping allowed *\/$/;"	v
no_scs	vim/vim/src/search.c	/^    int		    no_scs;	\/* no smartcase for this pattern *\/$/;"	m	struct:spat	file:	access:public
no_smartcase	vim/vim/src/globals.h	/^EXTERN int	no_smartcase INIT(= FALSE);	\/* don't use 'smartcase' once *\/$/;"	v
no_spell_checking	vim/vim/src/spell.c	/^no_spell_checking(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
no_spell_checking	vim/vim/src/spell.c	/^static int no_spell_checking(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
no_swap_file	vim/vim/src/structs.h	/^    int		no_swap_file;		\/* "-n" argument used *\/$/;"	m	struct:__anon210	access:public
no_u_sync	vim/vim/src/globals.h	/^EXTERN int no_u_sync INIT(= 0);		\/* Don't call u_sync() *\/$/;"	v
no_vim	build_all.sh	/^function no_vim()$/;"	f
no_viminfo	vim/vim/src/ex_cmds.c	/^no_viminfo(void)$/;"	f	file:	signature:(void)
no_viminfo	vim/vim/src/ex_cmds.c	/^static int no_viminfo(void);$/;"	p	file:	signature:(void)
no_wait_return	vim/vim/src/globals.h	/^EXTERN int	no_wait_return INIT(= 0);   \/* don't wait for return for now *\/$/;"	v
no_win_do_lines_ins	vim/vim/src/globals.h	/^EXTERN int	no_win_do_lines_ins INIT(= FALSE); \/* don't insert lines *\/$/;"	v
no_zero_mapping	vim/vim/src/globals.h	/^EXTERN int no_zero_mapping INIT(= 0);	\/* mapping zero not allowed *\/$/;"	v
noalt	vim/vim/src/gui_gtk.c	/^    int		noalt;		    \/* accept accelerators without Alt *\/$/;"	m	struct:_DialogInfo	file:	access:public
node_compress	vim/vim/src/spellfile.c	/^node_compress($/;"	f	file:	signature:( spellinfo_T *spin, wordnode_T *node, hashtab_T *ht, int *tot)
node_compress	vim/vim/src/spellfile.c	/^static int node_compress(spellinfo_T *spin, wordnode_T *node, hashtab_T *ht, int *tot);$/;"	p	file:	signature:(spellinfo_T *spin, wordnode_T *node, hashtab_T *ht, int *tot)
node_equal	vim/vim/src/spellfile.c	/^node_equal(wordnode_T *n1, wordnode_T *n2)$/;"	f	file:	signature:(wordnode_T *n1, wordnode_T *n2)
node_equal	vim/vim/src/spellfile.c	/^static int node_equal(wordnode_T *n1, wordnode_T *n2);$/;"	p	file:	signature:(wordnode_T *n1, wordnode_T *n2)
nofile_fname	vim/vim/src/tag.c	/^static char_u	*nofile_fname = NULL;	\/* fname for NOTAGFILE error *\/$/;"	v	file:
nofold_len	vim/vim/src/spell.c	/^nofold_len(char_u *fword, int flen, char_u *word)$/;"	f	file:	signature:(char_u *fword, int flen, char_u *word)
nofold_len	vim/vim/src/spell.c	/^static int nofold_len(char_u *fword, int flen, char_u *word);$/;"	p	file:	signature:(char_u *fword, int flen, char_u *word)
non_zero_arg	vim/vim/src/evalfunc.c	/^non_zero_arg(typval_T *argvars)$/;"	f	file:	signature:(typval_T *argvars)
noremap	vim/vim/src/structs.h	/^    int		noremap[MENU_MODES]; \/* A REMAP_ flag for each mode *\/$/;"	m	struct:VimMenu	access:public
noremapbuf_init	vim/vim/src/getchar.c	/^static char_u	noremapbuf_init[TYPELEN_INIT];	\/* initial typebuf.tb_noremap *\/$/;"	v	file:
norm	vim/vim/src/regexp_nfa.c	/^    regsub_T	norm; \/* \\( .. \\) matches *\/$/;"	m	struct:__anon118	file:	access:public
norm_font	vim/vim/src/gui.h	/^    GuiFont	norm_font;	    \/* Normal font *\/$/;"	m	struct:Gui	access:public
norm_logfont	vim/vim/src/gui_w32.c	/^static LOGFONT norm_logfont;$/;"	v	file:
norm_pixel	vim/vim/src/gui.h	/^    guicolor_T	norm_pixel;	    \/* Color of normal text *\/$/;"	m	struct:Gui	access:public
normal_cmd	vim/vim/src/normal.c	/^normal_cmd($/;"	f	signature:( oparg_T *oap, int toplevel UNUSED)
normal_pixmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap normal_pixmap;$/;"	m	struct:_XmEnhancedButtonPart	access:public
normal_search	vim/vim/src/normal.c	/^normal_search($/;"	f	file:	signature:( cmdarg_T *cap, int dir, char_u *pat, int opt)
normal_search	vim/vim/src/normal.c	/^static int	normal_search(cmdarg_T *cap, int dir, char_u *pat, int opt);$/;"	p	file:	signature:(cmdarg_T *cap, int dir, char_u *pat, int opt)
normvideo	vim/vim/src/os_win32.c	/^normvideo(void)$/;"	f	file:	signature:(void)
normvideo	vim/vim/src/os_win32.c	/^static void normvideo(void);$/;"	p	file:	signature:(void)
noswapfile	vim/vim/src/structs.h	/^    int		noswapfile;		\/* TRUE when ":noswapfile" was used *\/$/;"	m	struct:__anon171	access:public
not_a_term	vim/vim/src/structs.h	/^    int		not_a_term;		\/* no warning for missing term? *\/$/;"	m	struct:__anon210	access:public
not_exiting	vim/vim/src/ex_docmd.c	/^not_exiting(void)$/;"	f	signature:(void)
not_writing	vim/vim/src/ex_cmds.c	/^not_writing(void)$/;"	f	signature:(void)
notify_multithread	vim/vim/src/if_mzsch.c	/^notify_multithread(int on)$/;"	f	file:	signature:(int on)
npixels	vim/vim/src/xpm/include/xpm.h	/^    unsigned int npixels;		\/* Number of used pixels *\/$/;"	m	struct:__anon93	access:public
nr2hex	vim/vim/src/charset.c	/^nr2hex(unsigned c)$/;"	f	file:	signature:(unsigned c)
nr2hex	vim/vim/src/charset.c	/^static unsigned nr2hex(unsigned c);$/;"	p	file:	signature:(unsigned c)
nr_trans	vim/vim/src/structs.h	/^struct nr_trans$/;"	s
nr_trans::nt_hashitem	vim/vim/src/structs.h	/^    mf_hashitem_T nt_hashitem;		\/* header for hash table and key *\/$/;"	m	struct:nr_trans	access:public
nr_trans::nt_new_bnum	vim/vim/src/structs.h	/^    blocknr_T	nt_new_bnum;		\/* new, positive, number *\/$/;"	m	struct:nr_trans	access:public
nstate	vim/vim/src/regexp.h	/^    int			nstate;$/;"	m	struct:__anon144	access:public
nstate	vim/vim/src/regexp_nfa.c	/^static int nstate;	\/* Number of states in the NFA. Also used when$/;"	v	file:
nsubexp	vim/vim/src/regexp.h	/^    int			nsubexp;	\/* number of () *\/$/;"	m	struct:__anon144	access:public
nt_hashitem	vim/vim/src/structs.h	/^    mf_hashitem_T nt_hashitem;		\/* header for hash table and key *\/$/;"	m	struct:nr_trans	access:public
nt_new_bnum	vim/vim/src/structs.h	/^    blocknr_T	nt_new_bnum;		\/* new, positive, number *\/$/;"	m	struct:nr_trans	access:public
nt_old_bnum	vim/vim/src/structs.h	498;"	d
nul	vim/vim/src/os_vms.c	/^    int		nul;$/;"	m	struct:__anon27	file:	access:public
nul	vim/vim/src/os_vms.c	/^    int	nul;$/;"	m	struct:__anon28	file:	access:public
null_libintl_bind_textdomain_codeset	vim/vim/src/os_win32.c	/^null_libintl_bind_textdomain_codeset($/;"	f	file:	signature:( const char *domainname UNUSED, const char *codeset UNUSED)
null_libintl_bind_textdomain_codeset	vim/vim/src/os_win32.c	/^static char *null_libintl_bind_textdomain_codeset(const char *, const char *);$/;"	p	file:	signature:(const char *, const char *)
null_libintl_bindtextdomain	vim/vim/src/GvimExt/gvimext.cpp	/^null_libintl_bindtextdomain(const char * \/* domainname *\/, const char * \/* dirname *\/)$/;"	f	file:	signature:(const char * , const char * )
null_libintl_bindtextdomain	vim/vim/src/GvimExt/gvimext.cpp	/^static char *null_libintl_bindtextdomain(const char *, const char *);$/;"	p	file:	signature:(const char *, const char *)
null_libintl_bindtextdomain	vim/vim/src/os_win32.c	/^null_libintl_bindtextdomain($/;"	f	file:	signature:( const char *domainname UNUSED, const char *dirname UNUSED)
null_libintl_bindtextdomain	vim/vim/src/os_win32.c	/^static char *null_libintl_bindtextdomain(const char *, const char *);$/;"	p	file:	signature:(const char *, const char *)
null_libintl_gettext	vim/vim/src/GvimExt/gvimext.cpp	/^null_libintl_gettext(const char *msgid)$/;"	f	file:	signature:(const char *msgid)
null_libintl_gettext	vim/vim/src/GvimExt/gvimext.cpp	/^static char *null_libintl_gettext(const char *);$/;"	p	file:	signature:(const char *)
null_libintl_gettext	vim/vim/src/os_win32.c	/^null_libintl_gettext(const char *msgid)$/;"	f	file:	signature:(const char *msgid)
null_libintl_gettext	vim/vim/src/os_win32.c	/^static char *null_libintl_gettext(const char *);$/;"	p	file:	signature:(const char *)
null_libintl_ngettext	vim/vim/src/os_win32.c	/^null_libintl_ngettext($/;"	f	file:	signature:( const char *msgid, const char *msgid_plural, unsigned long n)
null_libintl_ngettext	vim/vim/src/os_win32.c	/^static char *null_libintl_ngettext(const char *, const char *, unsigned long n);$/;"	p	file:	signature:(const char *, const char *, unsigned long n)
null_libintl_putenv	vim/vim/src/os_win32.c	/^null_libintl_putenv(const char *envstring UNUSED)$/;"	f	signature:(const char *envstring UNUSED)
null_libintl_putenv	vim/vim/src/os_win32.c	/^static int null_libintl_putenv(const char *);$/;"	p	file:	signature:(const char *)
null_libintl_textdomain	vim/vim/src/GvimExt/gvimext.cpp	/^null_libintl_textdomain(const char*  \/* domainname *\/)$/;"	f	file:	signature:(const char* )
null_libintl_textdomain	vim/vim/src/GvimExt/gvimext.cpp	/^static char *null_libintl_textdomain(const char *);$/;"	p	file:	signature:(const char *)
null_libintl_textdomain	vim/vim/src/os_win32.c	/^null_libintl_textdomain(const char *domainname UNUSED)$/;"	f	file:	signature:(const char *domainname UNUSED)
null_libintl_textdomain	vim/vim/src/os_win32.c	/^static char *null_libintl_textdomain(const char *);$/;"	p	file:	signature:(const char *)
null_libintl_wputenv	vim/vim/src/os_win32.c	/^null_libintl_wputenv(const wchar_t *envstring UNUSED)$/;"	f	signature:(const wchar_t *envstring UNUSED)
null_libintl_wputenv	vim/vim/src/os_win32.c	/^static int null_libintl_wputenv(const wchar_t *);$/;"	p	file:	signature:(const wchar_t *)
num	vim/vim/src/gui_xmdlg.c	/^    int		num;		\/* number of font names *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
num_alloc	vim/vim/src/misc2.c	/^static long_u num_alloc;$/;"	v	file:
num_charsets	vim/vim/src/hardcopy.c	/^    int				num_charsets;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
num_cols	vim/vim/src/gui.h	/^    int		num_cols;	    \/* Number of columns *\/$/;"	m	struct:Gui	access:public
num_complex_braces	vim/vim/src/regexp.c	/^static int	num_complex_braces; \/* Complex \\{...} count *\/$/;"	v	file:
num_encodings	vim/vim/src/hardcopy.c	/^    int				num_encodings;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
num_freed	vim/vim/src/misc2.c	/^static long_u num_freed;$/;"	v	file:
num_panels	vim/vim/src/gui_photon.c	/^static ushort_t	num_panels = 0;$/;"	v	file:
num_rows	vim/vim/src/gui.h	/^    int		num_rows;	    \/* Number of rows *\/$/;"	m	struct:Gui	access:public
num_windows	vim/vim/src/dosinst.c	/^static int num_windows;$/;"	v	file:
number	vim/vim/src/libvterm/include/vterm.h	/^  int number;$/;"	m	union:__anon51	access:public
number	vim/vim/src/structs.h	/^    long	number;$/;"	m	struct:__anon204	access:public
number	vim/vim/src/structs.h	/^    prt_text_attr_T number;$/;"	m	struct:__anon206	access:public
number_width	vim/vim/src/screen.c	/^number_width(win_T *wp)$/;"	f	signature:(win_T *wp)
number_width	vim/vim/src/vim.h	2140;"	d
numchars	vim/vim/src/os_vms.c	/^    unsigned short numchars;$/;"	m	struct:typeahead_st	file:	access:public
numeric_constant	vim/vim/src/if_py_both.h	/^static struct numeric_constant {$/;"	s
numeric_constant::name	vim/vim/src/if_py_both.h	/^    char	*name;$/;"	m	struct:numeric_constant	access:public
numeric_constant::val	vim/vim/src/if_py_both.h	/^    int		val;$/;"	m	struct:numeric_constant	access:public
numeric_constants	vim/vim/src/if_py_both.h	/^} numeric_constants[] = {$/;"	v	typeref:struct:numeric_constant
numsymbols	vim/vim/src/xpm/include/xpm.h	/^    unsigned int numsymbols;		\/* Number of symbols *\/$/;"	m	struct:__anon93	access:public
nv_Replace	vim/vim/src/normal.c	/^nv_Replace(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_Replace	vim/vim/src/normal.c	/^static void	nv_Replace(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_Undo	vim/vim/src/normal.c	/^nv_Undo(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_Undo	vim/vim/src/normal.c	/^static void	nv_Undo(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_Zet	vim/vim/src/normal.c	/^nv_Zet(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_Zet	vim/vim/src/normal.c	/^static void	nv_Zet(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_abbrev	vim/vim/src/normal.c	/^nv_abbrev(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_abbrev	vim/vim/src/normal.c	/^static void	nv_abbrev(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_addsub	vim/vim/src/normal.c	/^nv_addsub(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_addsub	vim/vim/src/normal.c	/^static void	nv_addsub(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_at	vim/vim/src/normal.c	/^nv_at(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_at	vim/vim/src/normal.c	/^static void	nv_at(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_bck_word	vim/vim/src/normal.c	/^nv_bck_word(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_bck_word	vim/vim/src/normal.c	/^static void	nv_bck_word(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_beginline	vim/vim/src/normal.c	/^nv_beginline(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_beginline	vim/vim/src/normal.c	/^static void	nv_beginline(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_brace	vim/vim/src/normal.c	/^nv_brace(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_brace	vim/vim/src/normal.c	/^static void	nv_brace(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_brackets	vim/vim/src/normal.c	/^nv_brackets(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_brackets	vim/vim/src/normal.c	/^static void	nv_brackets(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_clear	vim/vim/src/normal.c	/^nv_clear(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_clear	vim/vim/src/normal.c	/^static void	nv_clear(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_cmd	vim/vim/src/normal.c	/^static const struct nv_cmd$/;"	s	file:
nv_cmd::cmd_arg	vim/vim/src/normal.c	/^    short	cmd_arg;	\/* value for ca.arg *\/$/;"	m	struct:nv_cmd	file:	access:public
nv_cmd::cmd_char	vim/vim/src/normal.c	/^    int		cmd_char;	\/* (first) command character *\/$/;"	m	struct:nv_cmd	file:	access:public
nv_cmd::cmd_flags	vim/vim/src/normal.c	/^    short_u	cmd_flags;	\/* NV_ flags *\/$/;"	m	struct:nv_cmd	file:	access:public
nv_cmd::cmd_func	vim/vim/src/normal.c	/^    nv_func_T   cmd_func;	\/* function for this command *\/$/;"	m	struct:nv_cmd	file:	access:public
nv_cmd_idx	vim/vim/src/normal.c	/^static short nv_cmd_idx[NV_CMDS_SIZE];$/;"	v	file:
nv_cmds	vim/vim/src/normal.c	/^} nv_cmds[] =$/;"	v	typeref:struct:nv_cmd	file:
nv_colon	vim/vim/src/normal.c	/^nv_colon(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_colon	vim/vim/src/normal.c	/^static void	nv_colon(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_compare	vim/vim/src/normal.c	/^		nv_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
nv_compare	vim/vim/src/normal.c	/^nv_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
nv_csearch	vim/vim/src/normal.c	/^nv_csearch(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_csearch	vim/vim/src/normal.c	/^static void	nv_csearch(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_ctrlg	vim/vim/src/normal.c	/^nv_ctrlg(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_ctrlg	vim/vim/src/normal.c	/^static void	nv_ctrlg(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_ctrlh	vim/vim/src/normal.c	/^nv_ctrlh(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_ctrlh	vim/vim/src/normal.c	/^static void	nv_ctrlh(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_ctrlo	vim/vim/src/normal.c	/^nv_ctrlo(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_ctrlo	vim/vim/src/normal.c	/^static void	nv_ctrlo(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_cursorhold	vim/vim/src/normal.c	/^nv_cursorhold(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_cursorhold	vim/vim/src/normal.c	/^static void	nv_cursorhold(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_cursormark	vim/vim/src/normal.c	/^nv_cursormark(cmdarg_T *cap, int flag, pos_T *pos)$/;"	f	file:	signature:(cmdarg_T *cap, int flag, pos_T *pos)
nv_cursormark	vim/vim/src/normal.c	/^static void	nv_cursormark(cmdarg_T *cap, int flag, pos_T *pos);$/;"	p	file:	signature:(cmdarg_T *cap, int flag, pos_T *pos)
nv_diffgetput	vim/vim/src/diff.c	/^nv_diffgetput(int put, long count)$/;"	f	signature:(int put, long count)
nv_dollar	vim/vim/src/normal.c	/^nv_dollar(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_dollar	vim/vim/src/normal.c	/^static void	nv_dollar(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_dot	vim/vim/src/normal.c	/^nv_dot(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_dot	vim/vim/src/normal.c	/^static void	nv_dot(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_down	vim/vim/src/normal.c	/^nv_down(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_down	vim/vim/src/normal.c	/^static void	nv_down(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_drop	vim/vim/src/normal.c	/^nv_drop(cmdarg_T *cap UNUSED)$/;"	f	file:	signature:(cmdarg_T *cap UNUSED)
nv_drop	vim/vim/src/normal.c	/^static void	nv_drop(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_edit	vim/vim/src/normal.c	/^nv_edit(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_edit	vim/vim/src/normal.c	/^static void	nv_edit(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_end	vim/vim/src/normal.c	/^nv_end(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_end	vim/vim/src/normal.c	/^static void	nv_end(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_error	vim/vim/src/normal.c	/^nv_error(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_error	vim/vim/src/normal.c	/^static void	nv_error(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_esc	vim/vim/src/normal.c	/^nv_esc(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_esc	vim/vim/src/normal.c	/^static void	nv_esc(cmdarg_T *oap);$/;"	p	file:	signature:(cmdarg_T *oap)
nv_exmode	vim/vim/src/normal.c	/^nv_exmode(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_exmode	vim/vim/src/normal.c	/^static void	nv_exmode(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_findpar	vim/vim/src/normal.c	/^nv_findpar(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_findpar	vim/vim/src/normal.c	/^static void	nv_findpar(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_func_T	vim/vim/src/normal.c	/^typedef void (*nv_func_T)(cmdarg_T *cap);$/;"	t	file:
nv_g_cmd	vim/vim/src/normal.c	/^nv_g_cmd(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_g_cmd	vim/vim/src/normal.c	/^static void	nv_g_cmd(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_gd	vim/vim/src/normal.c	/^nv_gd($/;"	f	file:	signature:( oparg_T *oap, int nchar, int thisblock)
nv_gd	vim/vim/src/normal.c	/^static void	nv_gd(oparg_T *oap, int nchar, int thisblock);$/;"	p	file:	signature:(oparg_T *oap, int nchar, int thisblock)
nv_gomark	vim/vim/src/normal.c	/^nv_gomark(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_gomark	vim/vim/src/normal.c	/^static void	nv_gomark(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_goto	vim/vim/src/normal.c	/^nv_goto(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_goto	vim/vim/src/normal.c	/^static void	nv_goto(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_gotofile	vim/vim/src/normal.c	/^nv_gotofile(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_gotofile	vim/vim/src/normal.c	/^static void	nv_gotofile(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_halfpage	vim/vim/src/normal.c	/^nv_halfpage(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_halfpage	vim/vim/src/normal.c	/^static void	nv_halfpage(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_hat	vim/vim/src/normal.c	/^nv_hat(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_hat	vim/vim/src/normal.c	/^static void	nv_hat(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_help	vim/vim/src/normal.c	/^nv_help(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_help	vim/vim/src/normal.c	/^static void	nv_help(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_home	vim/vim/src/normal.c	/^nv_home(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_home	vim/vim/src/normal.c	/^static void	nv_home(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_hor_scrollbar	vim/vim/src/normal.c	/^nv_hor_scrollbar(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_hor_scrollbar	vim/vim/src/normal.c	/^static void	nv_hor_scrollbar(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_ident	vim/vim/src/normal.c	/^nv_ident(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_ident	vim/vim/src/normal.c	/^static void	nv_ident(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_ignore	vim/vim/src/normal.c	/^nv_ignore(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_ignore	vim/vim/src/normal.c	/^static void	nv_ignore(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_join	vim/vim/src/normal.c	/^nv_join(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_join	vim/vim/src/normal.c	/^static void	nv_join(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_kundo	vim/vim/src/normal.c	/^nv_kundo(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_kundo	vim/vim/src/normal.c	/^static void	nv_kundo(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_left	vim/vim/src/normal.c	/^nv_left(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_left	vim/vim/src/normal.c	/^static void	nv_left(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_lineop	vim/vim/src/normal.c	/^nv_lineop(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_lineop	vim/vim/src/normal.c	/^static void	nv_lineop(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_mark	vim/vim/src/normal.c	/^nv_mark(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_mark	vim/vim/src/normal.c	/^static void	nv_mark(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_max_linear	vim/vim/src/normal.c	/^static int nv_max_linear;$/;"	v	file:
nv_mouse	vim/vim/src/normal.c	/^nv_mouse(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_mouse	vim/vim/src/normal.c	/^static void	nv_mouse(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_mousescroll	vim/vim/src/normal.c	/^nv_mousescroll(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_mousescroll	vim/vim/src/normal.c	/^static void	nv_mousescroll(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_nbcmd	vim/vim/src/normal.c	/^nv_nbcmd(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_nbcmd	vim/vim/src/normal.c	/^static void	nv_nbcmd(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_next	vim/vim/src/normal.c	/^nv_next(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_next	vim/vim/src/normal.c	/^static void	nv_next(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_nop	vim/vim/src/normal.c	/^nv_nop(cmdarg_T *cap UNUSED)$/;"	f	file:	signature:(cmdarg_T *cap UNUSED)
nv_nop	vim/vim/src/normal.c	/^static void	nv_nop(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_normal	vim/vim/src/normal.c	/^nv_normal(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_normal	vim/vim/src/normal.c	/^static void	nv_normal(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_object	vim/vim/src/normal.c	/^nv_object($/;"	f	file:	signature:( cmdarg_T *cap)
nv_object	vim/vim/src/normal.c	/^static void	nv_object(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_open	vim/vim/src/normal.c	/^nv_open(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_open	vim/vim/src/normal.c	/^static void	nv_open(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_operator	vim/vim/src/normal.c	/^nv_operator(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_operator	vim/vim/src/normal.c	/^static void	nv_operator(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_optrans	vim/vim/src/normal.c	/^nv_optrans(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_optrans	vim/vim/src/normal.c	/^static void	nv_optrans(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_page	vim/vim/src/normal.c	/^nv_page(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_page	vim/vim/src/normal.c	/^static void	nv_page(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_pcmark	vim/vim/src/normal.c	/^nv_pcmark(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_pcmark	vim/vim/src/normal.c	/^static void	nv_pcmark(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_percent	vim/vim/src/normal.c	/^nv_percent(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_percent	vim/vim/src/normal.c	/^static void	nv_percent(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_pipe	vim/vim/src/normal.c	/^nv_pipe(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_pipe	vim/vim/src/normal.c	/^static void	nv_pipe(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_put	vim/vim/src/normal.c	/^nv_put(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_put	vim/vim/src/normal.c	/^static void	nv_put(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_record	vim/vim/src/normal.c	/^nv_record(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_record	vim/vim/src/normal.c	/^static void	nv_record(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_redo	vim/vim/src/normal.c	/^nv_redo(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_redo	vim/vim/src/normal.c	/^static void	nv_redo(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_regname	vim/vim/src/normal.c	/^nv_regname(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_regname	vim/vim/src/normal.c	/^static void	nv_regname(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_replace	vim/vim/src/normal.c	/^nv_replace(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_replace	vim/vim/src/normal.c	/^static void	nv_replace(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_right	vim/vim/src/normal.c	/^nv_right(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_right	vim/vim/src/normal.c	/^static void	nv_right(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_screengo	vim/vim/src/normal.c	/^nv_screengo(oparg_T *oap, int dir, long dist)$/;"	f	file:	signature:(oparg_T *oap, int dir, long dist)
nv_screengo	vim/vim/src/normal.c	/^static int	nv_screengo(oparg_T *oap, int dir, long dist);$/;"	p	file:	signature:(oparg_T *oap, int dir, long dist)
nv_scroll	vim/vim/src/normal.c	/^nv_scroll(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_scroll	vim/vim/src/normal.c	/^static void	nv_scroll(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_scroll_line	vim/vim/src/normal.c	/^nv_scroll_line(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_scroll_line	vim/vim/src/normal.c	/^static void	nv_scroll_line(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_search	vim/vim/src/normal.c	/^nv_search(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_search	vim/vim/src/normal.c	/^static void	nv_search(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_select	vim/vim/src/normal.c	/^nv_select(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_select	vim/vim/src/normal.c	/^static void	nv_select(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_subst	vim/vim/src/normal.c	/^nv_subst(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_subst	vim/vim/src/normal.c	/^static void	nv_subst(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_suspend	vim/vim/src/normal.c	/^nv_suspend(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_suspend	vim/vim/src/normal.c	/^static void	nv_suspend(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_tabline	vim/vim/src/normal.c	/^nv_tabline(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_tabline	vim/vim/src/normal.c	/^static void	nv_tabline(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_tabmenu	vim/vim/src/normal.c	/^nv_tabmenu(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_tabmenu	vim/vim/src/normal.c	/^static void	nv_tabmenu(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_tagpop	vim/vim/src/normal.c	/^nv_tagpop(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_tagpop	vim/vim/src/normal.c	/^static void	nv_tagpop(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_tilde	vim/vim/src/normal.c	/^nv_tilde(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_tilde	vim/vim/src/normal.c	/^static void	nv_tilde(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_undo	vim/vim/src/normal.c	/^nv_undo(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_undo	vim/vim/src/normal.c	/^static void	nv_undo(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_up	vim/vim/src/normal.c	/^nv_up(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_up	vim/vim/src/normal.c	/^static void	nv_up(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_ver_scrollbar	vim/vim/src/normal.c	/^nv_ver_scrollbar(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_ver_scrollbar	vim/vim/src/normal.c	/^static void	nv_ver_scrollbar(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_visual	vim/vim/src/normal.c	/^nv_visual(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_visual	vim/vim/src/normal.c	/^static void	nv_visual(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_vreplace	vim/vim/src/normal.c	/^nv_vreplace(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_vreplace	vim/vim/src/normal.c	/^static void	nv_vreplace(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_window	vim/vim/src/normal.c	/^nv_window(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_window	vim/vim/src/normal.c	/^static void	nv_window(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_wordcmd	vim/vim/src/normal.c	/^nv_wordcmd(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_wordcmd	vim/vim/src/normal.c	/^static void	nv_wordcmd(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
nv_zet	vim/vim/src/normal.c	/^nv_zet(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
nv_zet	vim/vim/src/normal.c	/^static void	nv_zet(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
o_acute	vim/vim/src/regexp_nfa.c	800;"	d	file:
o_circumflex	vim/vim/src/regexp_nfa.c	801;"	d	file:
o_diaeresis	vim/vim/src/regexp_nfa.c	803;"	d	file:
o_grave	vim/vim/src/regexp_nfa.c	799;"	d	file:
o_slash	vim/vim/src/regexp_nfa.c	804;"	d	file:
o_virguilla	vim/vim/src/regexp_nfa.c	802;"	d	file:
oap	vim/vim/src/structs.h	/^    oparg_T	*oap;		\/* Operator arguments *\/$/;"	m	struct:cmdarg_S	access:public
object_constant	vim/vim/src/if_py_both.h	/^static struct object_constant {$/;"	s
object_constant::name	vim/vim/src/if_py_both.h	/^    char	*name;$/;"	m	struct:object_constant	access:public
object_constant::valObject	vim/vim/src/if_py_both.h	/^    PyObject	*valObject;$/;"	m	struct:object_constant	access:public
object_constants	vim/vim/src/if_py_both.h	/^} object_constants[] = {$/;"	v	typeref:struct:object_constant
objtbl	vim/vim/src/if_ruby.c	/^static VALUE objtbl;$/;"	v	file:
off	vim/vim/src/fold.c	/^    linenr_T	off;		\/* offset between lnum and real line number *\/$/;"	m	struct:__anon95	file:	access:public
off	vim/vim/src/search.c	/^    long	off;		\/* line or char offset *\/$/;"	m	struct:soffset	file:	access:public
off	vim/vim/src/search.c	/^    struct soffset  off;$/;"	m	struct:spat	typeref:struct:spat::soffset	file:	access:public
off2pos	vim/vim/src/netbeans.c	/^off2pos(buf_T *buf, long offset)$/;"	f	file:	signature:(buf_T *buf, long offset)
off2pos	vim/vim/src/netbeans.c	/^static pos_T *off2pos(buf_T *, long);$/;"	p	file:	signature:(buf_T *, long)
off_T	vim/vim/src/vim.h	/^typedef __int64 off_T;$/;"	t
off_T	vim/vim/src/vim.h	/^typedef long off_T;$/;"	t
off_T	vim/vim/src/vim.h	/^typedef off_t off_T;$/;"	t
off_t	vim/vim/src/if_ruby.c	125;"	d	file:
off_t	vim/vim/src/os_amiga.h	/^typedef long off_t;$/;"	t
offset	vim/vim/src/mbyte.c	/^    int offset;$/;"	m	struct:__anon3	file:	access:public
offset2bytes	vim/vim/src/spellfile.c	/^offset2bytes(int nr, char_u *buf)$/;"	f	file:	signature:(int nr, char_u *buf)
offset2bytes	vim/vim/src/spellfile.c	/^static int offset2bytes(int nr, char_u *buf);$/;"	p	file:	signature:(int nr, char_u *buf)
offsetX	vim/vim/src/gui_dwrite.cpp	/^    FLOAT offsetX;$/;"	m	struct:GdiTextRendererContext	file:	access:public
ok	vim/vim/src/gui_xmdlg.c	/^    Widget	ok;$/;"	m	struct:_SharedFontSelData	file:	access:public
ok_callback	vim/vim/src/gui_xmdlg.c	/^ok_callback(Widget w UNUSED,$/;"	f	file:	signature:(Widget w UNUSED, SharedFontSelData *data, XmPushButtonCallbackStruct *call_data UNUSED)
old	vim/vim/src/gui_xmdlg.c	/^    XFontStruct	*old;		\/* font data structure for sample display *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
oldEvent	vim/vim/src/gui_at_sb.c	/^    XEvent *oldEvent;$/;"	m	struct:EventData	file:	access:public
old_char	vim/vim/src/getchar.c	/^static int old_char = -1;	\/* character put back by vungetc() *\/$/;"	v	file:
old_char	vim/vim/src/structs.h	/^    int			old_char;$/;"	m	struct:__anon180	access:public
old_fn	vim/vim/src/if_py_both.h	/^static writefn old_fn = NULL;$/;"	v
old_indent	vim/vim/src/edit.c	/^static int	old_indent = 0;		\/* for ^^D command in insert mode *\/$/;"	v	file:
old_label_expose	vim/vim/src/gui_motif.c	/^static XtExposeProc old_label_expose = NULL;$/;"	v	file:
old_list	vim/vim/src/gui_xmdlg.c	/^    XmFontList	old_list;	\/* font data structure for sample display *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
old_mod_mask	vim/vim/src/getchar.c	/^static int old_mod_mask;	\/* mod_mask for ungotten character *\/$/;"	v	file:
old_mod_mask	vim/vim/src/structs.h	/^    int			old_mod_mask;$/;"	m	struct:__anon180	access:public
old_mouse_col	vim/vim/src/getchar.c	/^static int old_mouse_col;	\/* mouse_col related to old_char *\/$/;"	v	file:
old_mouse_row	vim/vim/src/getchar.c	/^static int old_mouse_row;	\/* mouse_row related to old_char *\/$/;"	v	file:
old_mouse_shape	vim/vim/src/misc2.c	/^static int old_mouse_shape = 0;$/;"	v	file:
old_redobuff	vim/vim/src/getchar.c	/^static buffheader_T old_redobuff = {{NULL, {NUL}}, NULL, 0, 0};$/;"	v	file:
old_showcmd_buf	vim/vim/src/normal.c	/^static char_u	old_showcmd_buf[SHOWCMD_BUFLEN];  \/* For push_showcmd() *\/$/;"	v	file:
old_sub	vim/vim/src/ex_cmds.c	/^static char_u	*old_sub = NULL;	\/* previous substitute pattern *\/$/;"	v	file:
old_termresponse	vim/vim/src/fileio.c	/^static char_u	*old_termresponse = NULL;$/;"	v	file:
oldbat	vim/vim/src/dosinst.h	/^    char	*oldbat;	\/* path to existing xxx.bat or NULL *\/$/;"	m	struct:__anon142	access:public
oldenv	vim/vim/src/GvimExt/gvimext.cpp	/^static wchar_t *oldenv = NULL;$/;"	v	file:
oldexe	vim/vim/src/dosinst.h	/^    char	*oldexe;	\/* path to existing xxx.exe or NULL *\/$/;"	m	struct:__anon142	access:public
oldicon	vim/vim/src/os_unix.c	/^static char_u	*oldicon = NULL;$/;"	v	file:
oldtitle	vim/vim/src/os_unix.c	/^static char_u	*oldtitle = NULL;$/;"	v	file:
oldvimrc	vim/vim/src/dosinst.c	/^char	oldvimrc[BUFSIZE];	\/* name of existing vimrc file *\/$/;"	v
oldwindowtitle	vim/vim/src/os_amiga.c	/^static char_u		*oldwindowtitle = NULL;$/;"	v	file:
ole_error	vim/vim/src/gui_w32.c	/^ole_error(char *arg)$/;"	f	file:	signature:(char *arg)
on_control	vim/vim/src/libvterm/src/state.c	/^static int on_control(unsigned char control, void *user)$/;"	f	file:	signature:(unsigned char control, void *user)
on_csi	vim/vim/src/libvterm/src/state.c	/^static int on_csi(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)$/;"	f	file:	signature:(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)
on_dcs	vim/vim/src/libvterm/src/state.c	/^static int on_dcs(const char *command, size_t cmdlen, void *user)$/;"	f	file:	signature:(const char *command, size_t cmdlen, void *user)
on_escape	vim/vim/src/libvterm/src/state.c	/^static int on_escape(const char *bytes, size_t len, void *user)$/;"	f	file:	signature:(const char *bytes, size_t len, void *user)
on_osc	vim/vim/src/libvterm/src/state.c	/^static int on_osc(const char *command, size_t cmdlen, void *user)$/;"	f	file:	signature:(const char *command, size_t cmdlen, void *user)
on_resize	vim/vim/src/libvterm/src/state.c	/^static int on_resize(int rows, int cols, void *user)$/;"	f	file:	signature:(int rows, int cols, void *user)
on_resize	vim/vim/src/libvterm/src/state.c	/^static int on_resize(int rows, int cols, void *user);$/;"	p	file:	signature:(int rows, int cols, void *user)
on_select_tab	vim/vim/src/gui_gtk_x11.c	/^on_select_tab($/;"	f	file:	signature:( GtkNotebook *notebook UNUSED, gpointer *page UNUSED, gint idx, gpointer data UNUSED)
on_tabline_menu	vim/vim/src/gui_gtk_x11.c	/^on_tabline_menu(GtkWidget *widget, GdkEvent *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEvent *event)
on_text	vim/vim/src/libvterm/src/state.c	/^static int on_text(const char bytes[], size_t len, void *user)$/;"	f	file:	signature:(const char bytes[], size_t len, void *user)
oneLineTextEditTranslations	vim/vim/src/gui_at_fs.c	/^static char *oneLineTextEditTranslations = "\\$/;"	v	file:
one_adjust	vim/vim/src/mark.c	987;"	d	file:
one_adjust_nodel	vim/vim/src/mark.c	1002;"	d	file:
one_exactly	vim/vim/src/regexp.c	/^static int	one_exactly = FALSE;	\/* only do one char for EXACTLY *\/$/;"	v	file:
one_window	vim/vim/src/window.c	/^one_window(void)$/;"	f	signature:(void)
onecap_copy	vim/vim/src/spell.c	/^onecap_copy($/;"	f	signature:( char_u *word, char_u *wcopy, int upper)
oneleft	vim/vim/src/edit.c	/^oneleft(void)$/;"	f	signature:(void)
onepage	vim/vim/src/move.c	/^onepage(int dir, long count)$/;"	f	signature:(int dir, long count)
oneright	vim/vim/src/edit.c	/^oneright(void)$/;"	f	signature:(void)
only_one_window	vim/vim/src/window.c	/^only_one_window(void)$/;"	f	signature:(void)
only_vim	build_all.sh	/^function only_vim()$/;"	f
opFoldRange	vim/vim/src/fold.c	/^opFoldRange($/;"	f	signature:( linenr_T first, linenr_T last, int opening, int recurse, int had_visual)
op_addsub	vim/vim/src/ops.c	/^op_addsub($/;"	f	signature:( oparg_T *oap, linenr_T Prenum1, int g_cmd)
op_change	vim/vim/src/ops.c	/^op_change(oparg_T *oap)$/;"	f	signature:(oparg_T *oap)
op_colon	vim/vim/src/normal.c	/^op_colon(oparg_T *oap)$/;"	f	file:	signature:(oparg_T *oap)
op_colon	vim/vim/src/normal.c	/^static void	op_colon(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
op_delete	vim/vim/src/ops.c	/^op_delete(oparg_T *oap)$/;"	f	signature:(oparg_T *oap)
op_format	vim/vim/src/ops.c	/^op_format($/;"	f	signature:( oparg_T *oap, int keep_cursor)
op_formatexpr	vim/vim/src/ops.c	/^op_formatexpr(oparg_T *oap)$/;"	f	signature:(oparg_T *oap)
op_function	vim/vim/src/normal.c	/^op_function(oparg_T *oap UNUSED)$/;"	f	file:	signature:(oparg_T *oap UNUSED)
op_function	vim/vim/src/normal.c	/^static void	op_function(oparg_T *oap);$/;"	p	file:	signature:(oparg_T *oap)
op_insert	vim/vim/src/ops.c	/^op_insert(oparg_T *oap, long count1)$/;"	f	signature:(oparg_T *oap, long count1)
op_on_lines	vim/vim/src/ops.c	/^op_on_lines(int op)$/;"	f	signature:(int op)
op_reindent	vim/vim/src/ops.c	/^op_reindent(oparg_T *oap, int (*how)(void))$/;"	f	signature:(oparg_T *oap, int (*how)(void))
op_replace	vim/vim/src/ops.c	/^op_replace(oparg_T *oap, int c)$/;"	f	signature:(oparg_T *oap, int c)
op_shift	vim/vim/src/ops.c	/^op_shift(oparg_T *oap, int curs_top, int amount)$/;"	f	signature:(oparg_T *oap, int curs_top, int amount)
op_tilde	vim/vim/src/ops.c	/^op_tilde(oparg_T *oap)$/;"	f	signature:(oparg_T *oap)
op_type	vim/vim/src/structs.h	/^    int		op_type;	\/* current pending operator type *\/$/;"	m	struct:oparg_S	access:public
op_yank	vim/vim/src/ops.c	/^op_yank(oparg_T *oap, int deleting, int mess)$/;"	f	signature:(oparg_T *oap, int deleting, int mess)
oparg_S	vim/vim/src/structs.h	/^typedef struct oparg_S$/;"	s
oparg_S::block_mode	vim/vim/src/structs.h	/^    int		block_mode;	\/* current operator is Visual block mode *\/$/;"	m	struct:oparg_S	access:public
oparg_S::cursor_start	vim/vim/src/structs.h	/^    pos_T	cursor_start;	\/* cursor position before motion for "gw" *\/$/;"	m	struct:oparg_S	access:public
oparg_S::empty	vim/vim/src/structs.h	/^    int		empty;		\/* op_start and op_end the same (only used by$/;"	m	struct:oparg_S	access:public
oparg_S::end	vim/vim/src/structs.h	/^    pos_T	end;		\/* end of the operator *\/$/;"	m	struct:oparg_S	access:public
oparg_S::end_adjusted	vim/vim/src/structs.h	/^    int		end_adjusted;	\/* backuped b_op_end one char (only used by$/;"	m	struct:oparg_S	access:public
oparg_S::end_vcol	vim/vim/src/structs.h	/^    colnr_T	end_vcol;	\/* end col for block mode operator *\/$/;"	m	struct:oparg_S	access:public
oparg_S::inclusive	vim/vim/src/structs.h	/^    int		inclusive;	\/* TRUE if char motion is inclusive (only$/;"	m	struct:oparg_S	access:public
oparg_S::is_VIsual	vim/vim/src/structs.h	/^    int		is_VIsual;	\/* operator on Visual area *\/$/;"	m	struct:oparg_S	access:public
oparg_S::line_count	vim/vim/src/structs.h	/^    long	line_count;	\/* number of lines from op_start to op_end$/;"	m	struct:oparg_S	access:public
oparg_S::motion_force	vim/vim/src/structs.h	/^    int		motion_force;	\/* force motion type: 'v', 'V' or CTRL-V *\/$/;"	m	struct:oparg_S	access:public
oparg_S::motion_type	vim/vim/src/structs.h	/^    int		motion_type;	\/* type of the current cursor motion *\/$/;"	m	struct:oparg_S	access:public
oparg_S::op_type	vim/vim/src/structs.h	/^    int		op_type;	\/* current pending operator type *\/$/;"	m	struct:oparg_S	access:public
oparg_S::prev_count0	vim/vim/src/structs.h	/^    long	prev_count0;	\/* ca.count0 saved for K_CURSORHOLD *\/$/;"	m	struct:oparg_S	access:public
oparg_S::prev_opcount	vim/vim/src/structs.h	/^    long	prev_opcount;	\/* ca.opcount saved for K_CURSORHOLD *\/$/;"	m	struct:oparg_S	access:public
oparg_S::regname	vim/vim/src/structs.h	/^    int		regname;	\/* register to use for the operator *\/$/;"	m	struct:oparg_S	access:public
oparg_S::start	vim/vim/src/structs.h	/^    pos_T	start;		\/* start of the operator *\/$/;"	m	struct:oparg_S	access:public
oparg_S::start_vcol	vim/vim/src/structs.h	/^    colnr_T	start_vcol;	\/* start col for block mode operator *\/$/;"	m	struct:oparg_S	access:public
oparg_S::use_reg_one	vim/vim/src/structs.h	/^    int		use_reg_one;	\/* TRUE if delete uses reg 1 even when not$/;"	m	struct:oparg_S	access:public
oparg_T	vim/vim/src/structs.h	/^} oparg_T;$/;"	t	typeref:struct:oparg_S
opchars	vim/vim/src/ops.c	/^static char opchars[][3] =$/;"	v	file:
opcount	vim/vim/src/globals.h	/^EXTERN long	opcount INIT(= 0);	\/* count for pending operator *\/$/;"	v
opcount	vim/vim/src/structs.h	/^    long	opcount;	\/* count before an operator *\/$/;"	m	struct:cmdarg_S	access:public
openFold	vim/vim/src/fold.c	/^openFold(linenr_T lnum, long count)$/;"	f	signature:(linenr_T lnum, long count)
openFoldRecurse	vim/vim/src/fold.c	/^openFoldRecurse(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
open_app_context	vim/vim/src/ui.c	/^open_app_context(void)$/;"	f	signature:(void)
open_buffer	vim/vim/src/buffer.c	/^open_buffer($/;"	f	signature:( int read_stdin, exarg_T *eap, int flags)
open_cmdwin	vim/vim/src/ex_getln.c	/^open_cmdwin(void)$/;"	f	file:	signature:(void)
open_cmdwin	vim/vim/src/ex_getln.c	/^static int	open_cmdwin(void);$/;"	p	file:	signature:(void)
open_exfile	vim/vim/src/ex_docmd.c	/^open_exfile($/;"	f	signature:( char_u *fname, int forceit, char *mode)
open_line	vim/vim/src/misc1.c	/^open_line($/;"	f	signature:( int dir, int flags, int second_line_indent)
open_pty	vim/vim/src/os_unix.c	/^open_pty(int *pty_master_fd, int *pty_slave_fd)$/;"	f	file:	signature:(int *pty_master_fd, int *pty_slave_fd)
open_spellbuf	vim/vim/src/spell.c	/^open_spellbuf(void)$/;"	f	signature:(void)
openscript	vim/vim/src/getchar.c	/^openscript($/;"	f	signature:( char_u *name, int directly)
openwith_gvim_path	vim/vim/src/uninstal.c	/^openwith_gvim_path(char *buf)$/;"	f	file:	signature:(char *buf)
opt_strings_flags	vim/vim/src/option.c	/^opt_strings_flags($/;"	f	file:	signature:( char_u *val, char **values, unsigned *flagp, int list)
opt_strings_flags	vim/vim/src/option.c	/^static int opt_strings_flags(char_u *val, char **values, unsigned *flagp, int list);$/;"	p	file:	signature:(char_u *val, char **values, unsigned *flagp, int list)
opt_type	vim/vim/src/if_py_both.h	/^    int		opt_type;$/;"	m	struct:__anon105	access:public
opt_type	vim/vim/src/if_py_both.h	/^    int		opt_type;$/;"	m	struct:__anon106	access:public
option_expand	vim/vim/src/option.c	/^option_expand(int opt_idx, char_u *val)$/;"	f	file:	signature:(int opt_idx, char_u *val)
option_expand	vim/vim/src/option.c	/^static char_u *option_expand(int opt_idx, char_u *val);$/;"	p	file:	signature:(int opt_idx, char_u *val)
option_iter_next	vim/vim/src/option.c	/^option_iter_next(void **option, int opt_type)$/;"	f	signature:(void **option, int opt_type)
option_table_T	vim/vim/src/structs.h	/^} option_table_T;$/;"	t	typeref:struct:__anon204
option_value2string	vim/vim/src/option.c	/^option_value2string($/;"	f	file:	signature:( struct vimoption *opp, int opt_flags)
option_value2string	vim/vim/src/option.c	/^static void option_value2string(struct vimoption *, int opt_flags);$/;"	p	file:	signature:(struct vimoption *, int opt_flags)
option_was_set	vim/vim/src/option.c	/^option_was_set(char_u *name)$/;"	f	signature:(char_u *name)
optioncmd	vim/vim/src/if_tcl.c	/^optioncmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
options	vim/vim/src/option.c	/^static struct vimoption options[] =$/;"	v	typeref:struct:vimoption	file:
optiterinfo_T	vim/vim/src/if_py_both.h	/^} optiterinfo_T;$/;"	t	typeref:struct:__anon106
optval_default	vim/vim/src/option.c	/^optval_default(struct vimoption *p, char_u *varp)$/;"	f	file:	signature:(struct vimoption *p, char_u *varp)
optval_default	vim/vim/src/option.c	/^static int optval_default(struct vimoption *, char_u *varp);$/;"	p	file:	signature:(struct vimoption *, char_u *varp)
orgmode	vim/vim/src/os_vms.c	/^static TT_MODE	orgmode;$/;"	v	file:
orientation	vim/vim/src/gui_at_sb.h	/^    XtOrientation orientation;	\/* horizontal or vertical *\/$/;"	m	struct:__anon84	access:public
orig_line_count	vim/vim/src/globals.h	/^EXTERN int	orig_line_count INIT(= 0);  \/* Line count when "gR" started *\/$/;"	v
orig_topfill	vim/vim/src/term.c	/^static int orig_topfill = 0;$/;"	v	file:
orig_topline	vim/vim/src/term.c	/^static linenr_T orig_topline = 0;$/;"	v	file:
origin	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int origin:1;$/;"	m	struct:VTermState::__anon35	access:public
origin_end_col	vim/vim/src/vim.h	/^    short_u	origin_end_col;$/;"	m	struct:VimClipboard	access:public
origin_row	vim/vim/src/vim.h	/^    short_u	origin_row;$/;"	m	struct:VimClipboard	access:public
origin_start_col	vim/vim/src/vim.h	/^    short_u	origin_start_col;$/;"	m	struct:VimClipboard	access:public
osc	vim/vim/src/libvterm/include/vterm.h	/^  int (*osc)(const char *command, size_t cmdlen, void *user);$/;"	m	struct:__anon59	access:public
ospeed	vim/vim/src/os_mac.h	57;"	d
ospeed	vim/vim/src/term.c	/^short ospeed;$/;"	v
ospeed	vim/vim/src/termlib.c	/^short	ospeed;		      \/* Baud rate (1-16, 1=300, 16=19200), as in stty *\/$/;"	v
osver	vim/vim/src/xxd/xxd.c	/^char osver[] = " (Win32)";$/;"	v
osver	vim/vim/src/xxd/xxd.c	/^char osver[] = "";$/;"	v
other_sourcing_name	vim/vim/src/message.c	/^other_sourcing_name(void)$/;"	f	file:	signature:(void)
other_sourcing_name	vim/vim/src/message.c	/^static int other_sourcing_name(void);$/;"	p	file:	signature:(void)
otherfile	vim/vim/src/buffer.c	/^otherfile(char_u *ffname)$/;"	f	signature:(char_u *ffname)
otherfile_buf	vim/vim/src/buffer.c	/^otherfile_buf($/;"	f	file:	signature:( buf_T *buf, char_u *ffname , stat_T *stp )
otherfile_buf	vim/vim/src/buffer.c	/^static int	otherfile_buf(buf_T *buf, char_u *ffname);$/;"	p	file:	signature:(buf_T *buf, char_u *ffname)
otherfile_buf	vim/vim/src/buffer.c	/^static int	otherfile_buf(buf_T *buf, char_u *ffname, stat_T *stp);$/;"	p	file:	signature:(buf_T *buf, char_u *ffname, stat_T *stp)
out	vim/vim/src/dehqx.py	/^out = conv.FName$/;"	v
out	vim/vim/src/regexp.h	/^    nfa_state_T		*out;$/;"	m	struct:nfa_state	access:public
out	vim/vim/src/regexp_nfa.c	/^    Ptrlist	*out;$/;"	m	struct:Frag	file:	access:public
out1	vim/vim/src/regexp.h	/^    nfa_state_T		*out1;$/;"	m	struct:nfa_state	access:public
out_buf	vim/vim/src/term.c	/^static char_u		out_buf[OUT_SIZE + 1];$/;"	v	file:
out_char	vim/vim/src/term.c	/^out_char(unsigned c)$/;"	f	signature:(unsigned c)
out_char_nf	vim/vim/src/term.c	/^out_char_nf(unsigned c)$/;"	f	file:	signature:(unsigned c)
out_char_nf	vim/vim/src/term.c	/^static void out_char_nf(unsigned);$/;"	p	file:	signature:(unsigned)
out_data	vim/vim/src/dehqx.py	/^out_data = out$/;"	v
out_flush	vim/vim/src/term.c	/^out_flush(void)$/;"	f	signature:(void)
out_flush_check	vim/vim/src/term.c	/^out_flush_check(void)$/;"	f	signature:(void)
out_num	vim/vim/src/os_amiga.c	/^out_num(long n)$/;"	f	file:	signature:(long n)
out_num	vim/vim/src/os_amiga.c	/^static void out_num(long n);$/;"	p	file:	signature:(long n)
out_pos	vim/vim/src/term.c	/^static int		out_pos = 0;	\/* number of chars in out_buf *\/$/;"	v	file:
out_rsrc	vim/vim/src/dehqx.py	/^out_rsrc = out + '.rsrcfork'$/;"	v
out_str	vim/vim/src/term.c	/^out_str(char_u *s)$/;"	f	signature:(char_u *s)
out_str_cf	vim/vim/src/term.c	/^out_str_cf(char_u *s)$/;"	f	signature:(char_u *s)
out_str_nf	vim/vim/src/term.c	/^out_str_nf(char_u *s)$/;"	f	signature:(char_u *s)
out_trash	vim/vim/src/term.c	/^out_trash(void)$/;"	f	signature:(void)
outbuffer	vim/vim/src/libvterm/src/vterm_internal.h	/^  char  *outbuffer;$/;"	m	struct:VTerm	access:public
outbuffer_cur	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t outbuffer_cur;$/;"	m	struct:VTerm	access:public
outbuffer_is_full	vim/vim/src/libvterm/src/vterm.c	/^static int outbuffer_is_full(VTerm *vt)$/;"	f	file:	signature:(VTerm *vt)
outbuffer_len	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t outbuffer_len;$/;"	m	struct:VTerm	access:public
outfile	vim/vim/src/dehqx.py	/^    outfile = open(out_rsrc, 'wb')$/;"	v
outfile	vim/vim/src/dehqx.py	/^outfile = open(out_data, 'wb')$/;"	v
outfile	vim/vim/src/structs.h	/^    char_u	*outfile;$/;"	m	struct:__anon206	access:public
outputDeadKey_rePost	vim/vim/src/gui_w32.c	/^outputDeadKey_rePost(MSG originalMsg)$/;"	f	file:	signature:(MSG originalMsg)
output_conv	vim/vim/src/globals.h	/^EXTERN vimconv_T output_conv;			\/* type of output conversion *\/$/;"	v
output_mouse	vim/vim/src/libvterm/src/mouse.c	/^static void output_mouse(VTermState *state, int code, int pressed, int modifiers, int col, int row)$/;"	f	file:	signature:(VTermState *state, int code, int pressed, int modifiers, int col, int row)
overrideShellWidgetClass	vim/vim/src/gui_gtk_vms.h	669;"	d
overstrike	vim/vim/src/ex_getln.c	/^    int		overstrike;	\/* Typing mode on the command line.  Shared by$/;"	m	struct:cmdline_info	file:	access:public
owned	vim/vim/src/vim.h	/^    int		owned;		\/* Flag: do we own the selection? *\/$/;"	m	struct:VimClipboard	access:public
p3imp_PyExc_AttributeError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_AttributeError;$/;"	v	file:
p3imp_PyExc_ImportError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_ImportError;$/;"	v	file:
p3imp_PyExc_IndexError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_IndexError;$/;"	v	file:
p3imp_PyExc_KeyError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_KeyError;$/;"	v	file:
p3imp_PyExc_KeyboardInterrupt	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_KeyboardInterrupt;$/;"	v	file:
p3imp_PyExc_OverflowError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_OverflowError;$/;"	v	file:
p3imp_PyExc_RuntimeError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_RuntimeError;$/;"	v	file:
p3imp_PyExc_SystemExit	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_SystemExit;$/;"	v	file:
p3imp_PyExc_TypeError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_TypeError;$/;"	v	file:
p3imp_PyExc_ValueError	vim/vim/src/if_python3.c	/^static PyObject *p3imp_PyExc_ValueError;$/;"	v	file:
pD2D1CreateFactory	vim/vim/src/gui_dwrite.cpp	/^static PD2D1CREATEFACTORY pD2D1CreateFactory = NULL;$/;"	v	file:
pDWriteCreateFactory	vim/vim/src/gui_dwrite.cpp	/^static PDWRITECREATEFACTORY pDWriteCreateFactory = NULL;$/;"	v	file:
pDacl	vim/vim/src/os_win32.c	/^    PACL		    pDacl;$/;"	m	struct:my_acl	file:	access:public
pDispatchMessage	vim/vim/src/os_win32.h	217;"	d
pDispatchMessage	vim/vim/src/os_win32.h	222;"	d
pGetFileInformationByHandleEx	vim/vim/src/iscygpty.c	/^static pfnGetFileInformationByHandleEx pGetFileInformationByHandleEx = NULL;$/;"	v	file:
pGetFileInformationByHandleEx	vim/vim/src/iscygpty.c	99;"	d	file:
pGetMessage	vim/vim/src/os_win32.h	218;"	d
pGetMessage	vim/vim/src/os_win32.h	223;"	d
pGetUserDefaultLocaleName	vim/vim/src/gui_dwrite.cpp	/^static PGETUSERDEFAULTLOCALENAME pGetUserDefaultLocaleName = NULL;$/;"	v	file:
pIApp	vim/vim/src/glbl_ime.cpp	/^static IActiveIMMApp *pIApp = NULL;$/;"	v	file:
pIMsg	vim/vim/src/glbl_ime.cpp	/^static IActiveIMMMessagePumpOwner *pIMsg = NULL;$/;"	v	file:
pImmAssociateContext	vim/vim/src/gui_w32.c	/^static HIMC (WINAPI *pImmAssociateContext)(HWND, HIMC);$/;"	v	file:
pImmAssociateContext	vim/vim/src/gui_w32.c	4441;"	d	file:
pImmGetCompositionFont	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmGetCompositionFont)(HIMC, LPLOGFONTA);$/;"	v	file:
pImmGetCompositionFont	vim/vim/src/gui_w32.c	4445;"	d	file:
pImmGetCompositionStringA	vim/vim/src/gui_w32.c	/^static LONG (WINAPI *pImmGetCompositionStringA)(HIMC, DWORD, LPVOID, DWORD);$/;"	v	file:
pImmGetCompositionStringA	vim/vim/src/gui_w32.c	4438;"	d	file:
pImmGetCompositionStringW	vim/vim/src/gui_w32.c	/^static LONG (WINAPI *pImmGetCompositionStringW)(HIMC, DWORD, LPVOID, DWORD);$/;"	v	file:
pImmGetCompositionStringW	vim/vim/src/gui_w32.c	4439;"	d	file:
pImmGetContext	vim/vim/src/gui_w32.c	/^static HIMC (WINAPI *pImmGetContext)(HWND);$/;"	v	file:
pImmGetContext	vim/vim/src/gui_w32.c	4440;"	d	file:
pImmGetConversionStatus	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmGetConversionStatus)(HIMC, LPDWORD, LPDWORD);$/;"	v	file:
pImmGetConversionStatus	vim/vim/src/gui_w32.c	4448;"	d	file:
pImmGetOpenStatus	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmGetOpenStatus)(HIMC);$/;"	v	file:
pImmGetOpenStatus	vim/vim/src/gui_w32.c	4443;"	d	file:
pImmReleaseContext	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmReleaseContext)(HWND, HIMC);$/;"	v	file:
pImmReleaseContext	vim/vim/src/gui_w32.c	4442;"	d	file:
pImmSetCompositionFont	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmSetCompositionFont)(HIMC, LPLOGFONTA);$/;"	v	file:
pImmSetCompositionFont	vim/vim/src/gui_w32.c	4446;"	d	file:
pImmSetCompositionWindow	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmSetCompositionWindow)(HIMC, LPCOMPOSITIONFORM);$/;"	v	file:
pImmSetCompositionWindow	vim/vim/src/gui_w32.c	4447;"	d	file:
pImmSetConversionStatus	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmSetConversionStatus)(HIMC, DWORD, DWORD);$/;"	v	file:
pImmSetConversionStatus	vim/vim/src/gui_w32.c	4449;"	d	file:
pImmSetOpenStatus	vim/vim/src/gui_w32.c	/^static BOOL (WINAPI *pImmSetOpenStatus)(HIMC, BOOL);$/;"	v	file:
pImmSetOpenStatus	vim/vim/src/gui_w32.c	4444;"	d	file:
pIsDialogMessage	vim/vim/src/os_win32.h	219;"	d
pIsDialogMessage	vim/vim/src/os_win32.h	224;"	d
pPeekMessage	vim/vim/src/os_win32.h	220;"	d
pPeekMessage	vim/vim/src/os_win32.h	225;"	d
pRenderTarget_	vim/vim/src/gui_dwrite.cpp	/^    IDWriteBitmapRenderTarget* pRenderTarget_;$/;"	m	class:FINAL	file:	access:private
pRenderingParams_	vim/vim/src/gui_dwrite.cpp	/^    IDWriteRenderingParams* pRenderingParams_;$/;"	m	class:FINAL	file:	access:private
pSacl	vim/vim/src/os_win32.c	/^    PACL		    pSacl;$/;"	m	struct:my_acl	file:	access:public
pSaveInst	vim/vim/src/os_w32exe.c	/^static void (_cdecl *pSaveInst)(HINSTANCE);$/;"	v	file:
pSecurityDescriptor	vim/vim/src/os_win32.c	/^    PSECURITY_DESCRIPTOR    pSecurityDescriptor;$/;"	m	struct:my_acl	file:	access:public
pSidGroup	vim/vim/src/os_win32.c	/^    PSID		    pSidGroup;$/;"	m	struct:my_acl	file:	access:public
pSidOwner	vim/vim/src/os_win32.c	/^    PSID		    pSidOwner;$/;"	m	struct:my_acl	file:	access:public
p_acd	vim/vim/src/option.h	/^EXTERN int	p_acd;		\/* 'autochdir' *\/$/;"	v
p_ai	vim/vim/src/option.c	/^static int	p_ai;$/;"	v	file:
p_ai_nopaste	vim/vim/src/option.c	/^static int	p_ai_nopaste;$/;"	v	file:
p_aleph	vim/vim/src/option.h	/^EXTERN long	p_aleph;	\/* 'aleph' *\/$/;"	v
p_altkeymap	vim/vim/src/option.h	/^EXTERN int	p_altkeymap;	\/* 'altkeymap' *\/$/;"	v
p_ambw	vim/vim/src/option.h	/^EXTERN char_u	*p_ambw;	\/* 'ambiwidth' *\/$/;"	v
p_ambw_values	vim/vim/src/option.c	/^static char *(p_ambw_values[]) = {"single", "double", NULL};$/;"	v	file:
p_antialias	vim/vim/src/option.h	/^EXTERN int	*p_antialias;	\/* 'antialias' *\/$/;"	v
p_ar	vim/vim/src/option.h	/^EXTERN int	p_ar;		\/* 'autoread' *\/$/;"	v
p_ari	vim/vim/src/option.h	/^EXTERN int	p_ari;		\/* 'allowrevins' *\/$/;"	v
p_arshape	vim/vim/src/option.h	/^EXTERN int	p_arshape;	\/* 'arabicshape' *\/$/;"	v
p_aw	vim/vim/src/option.h	/^EXTERN int	p_aw;		\/* 'autowrite' *\/$/;"	v
p_awa	vim/vim/src/option.h	/^EXTERN int	p_awa;		\/* 'autowriteall' *\/$/;"	v
p_bdir	vim/vim/src/option.h	/^EXTERN char_u	*p_bdir;	\/* 'backupdir' *\/$/;"	v
p_bdlay	vim/vim/src/option.h	/^EXTERN long	p_bdlay;	\/* 'balloondelay' *\/$/;"	v
p_beval	vim/vim/src/option.h	/^EXTERN int	p_beval;	\/* 'ballooneval' *\/$/;"	v
p_bex	vim/vim/src/option.h	/^EXTERN char_u	*p_bex;		\/* 'backupext' *\/$/;"	v
p_bexpr	vim/vim/src/option.h	/^EXTERN char_u	*p_bexpr;$/;"	v
p_bg	vim/vim/src/option.h	/^EXTERN char_u	*p_bg;		\/* 'background' *\/$/;"	v
p_bg_values	vim/vim/src/option.c	/^static char *(p_bg_values[]) = {"light", "dark", NULL};$/;"	v	file:
p_bh	vim/vim/src/option.c	/^static char_u	*p_bh;$/;"	v	file:
p_bin	vim/vim/src/option.c	/^static int	p_bin;$/;"	v	file:
p_bk	vim/vim/src/option.h	/^EXTERN int	p_bk;		\/* 'backup' *\/$/;"	v
p_bkc	vim/vim/src/option.h	/^EXTERN char_u	*p_bkc;		\/* 'backupcopy' *\/$/;"	v
p_bkc_values	vim/vim/src/option.h	/^static char *(p_bkc_values[]) = {"yes", "auto", "no", "breaksymlink", "breakhardlink", NULL};$/;"	v
p_bl	vim/vim/src/option.c	/^static int	p_bl;$/;"	v	file:
p_bo	vim/vim/src/option.h	/^EXTERN char_u	*p_bo;		\/* 'belloff' *\/$/;"	v
p_bo_values	vim/vim/src/option.h	/^static char *(p_bo_values[]) = {"all", "backspace", "cursor", "complete",$/;"	v
p_bomb	vim/vim/src/option.c	/^static int	p_bomb;$/;"	v	file:
p_breakat	vim/vim/src/option.h	/^EXTERN char_u	*p_breakat;	\/* 'breakat' *\/$/;"	v
p_bs	vim/vim/src/option.h	/^EXTERN char_u	*p_bs;		\/* 'backspace' *\/$/;"	v
p_bs_values	vim/vim/src/option.c	/^static char *(p_bs_values[]) = {"indent", "eol", "start", NULL};$/;"	v	file:
p_bsdir	vim/vim/src/option.h	/^EXTERN char_u	*p_bsdir;	\/* 'browsedir' *\/$/;"	v
p_bsdir_values	vim/vim/src/option.c	/^static char *(p_bsdir_values[]) = {"current", "last", "buffer", NULL};$/;"	v	file:
p_bsk	vim/vim/src/option.h	/^EXTERN char_u	*p_bsk;		\/* 'backupskip' *\/$/;"	v
p_bt	vim/vim/src/option.c	/^static char_u	*p_bt;$/;"	v	file:
p_bufhidden_values	vim/vim/src/option.c	/^static char *(p_bufhidden_values[]) = {"hide", "unload", "delete", "wipe", NULL};$/;"	v	file:
p_buftype_values	vim/vim/src/option.c	/^static char *(p_buftype_values[]) = {"nofile", "nowrite", "quickfix", "help", "terminal", "acwrite", NULL};$/;"	v	file:
p_buftype_values	vim/vim/src/option.c	/^static char *(p_buftype_values[]) = {"nofile", "nowrite", "quickfix", "help", "terminal", NULL};$/;"	v	file:
p_cb	vim/vim/src/option.h	/^EXTERN char_u	*p_cb;		\/* 'clipboard' *\/$/;"	v
p_cc	vim/vim/src/option.h	/^EXTERN char_u   *p_cc;		\/* 'colorcolumn' *\/$/;"	v
p_cc_cols	vim/vim/src/option.h	/^EXTERN int      p_cc_cols[256]; \/* array for 'colorcolumn' columns *\/$/;"	v
p_ccv	vim/vim/src/option.h	/^EXTERN char_u	*p_ccv;		\/* 'charconvert' *\/$/;"	v
p_cdpath	vim/vim/src/option.h	/^EXTERN char_u	*p_cdpath;	\/* 'cdpath' *\/$/;"	v
p_cedit	vim/vim/src/option.h	/^EXTERN char_u	*p_cedit;	\/* 'cedit' *\/$/;"	v
p_cfu	vim/vim/src/option.c	/^static char_u	*p_cfu;$/;"	v	file:
p_ch	vim/vim/src/option.h	/^EXTERN long	p_ch;		\/* 'cmdheight' *\/$/;"	v
p_ci	vim/vim/src/option.c	/^static int	p_ci;$/;"	v	file:
p_cin	vim/vim/src/option.c	/^static int	p_cin;$/;"	v	file:
p_cink	vim/vim/src/option.c	/^static char_u	*p_cink;$/;"	v	file:
p_cino	vim/vim/src/option.c	/^static char_u	*p_cino;$/;"	v	file:
p_cinw	vim/vim/src/option.c	/^static char_u	*p_cinw;$/;"	v	file:
p_cm	vim/vim/src/option.h	/^EXTERN char_u	*p_cm;		\/* 'cryptmethod' *\/$/;"	v
p_cm_values	vim/vim/src/option.c	/^static char *(p_cm_values[]) = {"zip", "blowfish", "blowfish2", NULL};$/;"	v	file:
p_cmp	vim/vim/src/option.h	/^EXTERN char_u	*p_cmp;		\/* 'casemap' *\/$/;"	v
p_cmp_values	vim/vim/src/option.h	/^static char *(p_cmp_values[]) = {"internal", "keepascii", NULL};$/;"	v
p_cms	vim/vim/src/option.c	/^static char_u	*p_cms;$/;"	v	file:
p_com	vim/vim/src/option.c	/^static char_u	*p_com;$/;"	v	file:
p_confirm	vim/vim/src/option.h	/^EXTERN int	p_confirm;	\/* 'confirm' *\/$/;"	v
p_cot	vim/vim/src/option.h	/^EXTERN char_u	*p_cot;		\/* 'completeopt' *\/$/;"	v
p_cot_values	vim/vim/src/option.c	/^static char *(p_cot_values[]) = {"menu", "menuone", "longest", "preview", "noinsert", "noselect", NULL};$/;"	v	file:
p_cp	vim/vim/src/option.h	/^EXTERN int	p_cp;		\/* 'compatible' *\/$/;"	v
p_cpo	vim/vim/src/option.h	/^EXTERN char_u	*p_cpo;		\/* 'cpoptions' *\/$/;"	v
p_cpt	vim/vim/src/option.c	/^static char_u	*p_cpt;$/;"	v	file:
p_cspc	vim/vim/src/option.h	/^EXTERN long	p_cspc;		\/* 'cscopepathcomp' *\/$/;"	v
p_csprg	vim/vim/src/option.h	/^EXTERN char_u	*p_csprg;	\/* 'cscopeprg' *\/$/;"	v
p_csqf	vim/vim/src/option.h	/^EXTERN char_u	*p_csqf;	\/* 'cscopequickfix' *\/$/;"	v
p_csre	vim/vim/src/option.h	/^EXTERN int	p_csre;		\/* 'cscoperelative' *\/$/;"	v
p_cst	vim/vim/src/option.h	/^EXTERN int	p_cst;		\/* 'cscopetag' *\/$/;"	v
p_csto	vim/vim/src/option.h	/^EXTERN long	p_csto;		\/* 'cscopetagorder' *\/$/;"	v
p_csverbose	vim/vim/src/option.h	/^EXTERN int	p_csverbose;	\/* 'cscopeverbose' *\/$/;"	v
p_cwh	vim/vim/src/option.h	/^EXTERN long	p_cwh;		\/* 'cmdwinheight' *\/$/;"	v
p_debug	vim/vim/src/option.h	/^EXTERN char_u	*p_debug;	\/* 'debug' *\/$/;"	v
p_debug_values	vim/vim/src/option.c	/^static char *(p_debug_values[]) = {"msg", "throw", "beep", NULL};$/;"	v	file:
p_deco	vim/vim/src/option.h	/^EXTERN int	p_deco;		\/* 'delcombine' *\/$/;"	v
p_def	vim/vim/src/option.h	/^EXTERN char_u	*p_def;		\/* 'define' *\/$/;"	v
p_dex	vim/vim/src/option.h	/^EXTERN char_u	*p_dex;		\/* 'diffexpr' *\/$/;"	v
p_dg	vim/vim/src/option.h	/^EXTERN int	p_dg;		\/* 'digraph' *\/$/;"	v
p_dict	vim/vim/src/option.h	/^EXTERN char_u	*p_dict;	\/* 'dictionary' *\/$/;"	v
p_dip	vim/vim/src/option.h	/^EXTERN char_u	*p_dip;		\/* 'diffopt' *\/$/;"	v
p_dir	vim/vim/src/option.h	/^EXTERN char_u	*p_dir;		\/* 'directory' *\/$/;"	v
p_dy	vim/vim/src/option.h	/^EXTERN char_u	*p_dy;		\/* 'display' *\/$/;"	v
p_dy_values	vim/vim/src/option.h	/^static char *(p_dy_values[]) = {"lastline", "truncate", "uhex", NULL};$/;"	v
p_ea	vim/vim/src/option.h	/^EXTERN int	p_ea;		\/* 'equalalways' *\/$/;"	v
p_ead	vim/vim/src/option.h	/^EXTERN char_u	*p_ead;		\/* 'eadirection' *\/$/;"	v
p_ead_values	vim/vim/src/option.c	/^static char *(p_ead_values[]) = {"both", "ver", "hor", NULL};$/;"	v	file:
p_eb	vim/vim/src/option.h	/^EXTERN int	p_eb;		\/* 'errorbells' *\/$/;"	v
p_ed	vim/vim/src/option.h	/^EXTERN int	p_ed;		\/* 'edcompatible' *\/$/;"	v
p_ef	vim/vim/src/option.h	/^EXTERN char_u	*p_ef;		\/* 'errorfile' *\/$/;"	v
p_efm	vim/vim/src/option.h	/^EXTERN char_u	*p_efm;		\/* 'errorformat' *\/$/;"	v
p_ei	vim/vim/src/option.h	/^EXTERN char_u	*p_ei;		\/* 'eventignore' *\/$/;"	v
p_ek	vim/vim/src/option.h	/^EXTERN int	p_ek;		\/* 'esckeys' *\/$/;"	v
p_emoji	vim/vim/src/option.h	/^EXTERN char_u	*p_emoji;	\/* 'emoji' *\/$/;"	v
p_enc	vim/vim/src/option.h	/^EXTERN char_u	*p_enc;		\/* 'encoding' *\/$/;"	v
p_eol	vim/vim/src/option.c	/^static int	p_eol;$/;"	v	file:
p_ep	vim/vim/src/option.h	/^EXTERN char_u	*p_ep;		\/* 'equalprg' *\/$/;"	v
p_et	vim/vim/src/option.c	/^static int	p_et;$/;"	v	file:
p_et_nobin	vim/vim/src/option.c	/^static int	p_et_nobin;$/;"	v	file:
p_et_nopaste	vim/vim/src/option.c	/^static int	p_et_nopaste;$/;"	v	file:
p_exrc	vim/vim/src/option.h	/^EXTERN int	p_exrc;		\/* 'exrc' *\/$/;"	v
p_fcl	vim/vim/src/option.h	/^EXTERN char_u	*p_fcl;		\/* 'foldclose' *\/$/;"	v
p_fcl_values	vim/vim/src/option.c	/^static char *(p_fcl_values[]) = {"all", NULL};$/;"	v	file:
p_fcs	vim/vim/src/option.h	/^EXTERN char_u	*p_fcs;		\/* 'fillchar' *\/$/;"	v
p_fdls	vim/vim/src/option.h	/^EXTERN long	p_fdls;		\/* 'foldlevelstart' *\/$/;"	v
p_fdm_values	vim/vim/src/option.c	/^static char *(p_fdm_values[]) = {"manual", "expr", "marker", "indent", "syntax",$/;"	v	file:
p_fdo	vim/vim/src/option.h	/^EXTERN char_u	*p_fdo;		\/* 'foldopen' *\/$/;"	v
p_fdo_values	vim/vim/src/option.h	/^static char *(p_fdo_values[]) = {"all", "block", "hor", "mark", "percent",$/;"	v
p_fenc	vim/vim/src/option.c	/^static char_u	*p_fenc;$/;"	v	file:
p_fencs	vim/vim/src/option.h	/^EXTERN char_u	*p_fencs;	\/* 'fileencodings' *\/$/;"	v
p_fex	vim/vim/src/option.c	/^static char_u	*p_fex;$/;"	v	file:
p_ff	vim/vim/src/option.c	/^static char_u	*p_ff;$/;"	v	file:
p_ff_values	vim/vim/src/option.c	/^static char *(p_ff_values[]) = {FF_UNIX, FF_DOS, FF_MAC, NULL};$/;"	v	file:
p_ffs	vim/vim/src/option.h	/^EXTERN char_u	*p_ffs;		\/* 'fileformats' *\/$/;"	v
p_fic	vim/vim/src/option.h	/^EXTERN long	p_fic;		\/* 'fileignorecase' *\/$/;"	v
p_fixeol	vim/vim/src/option.c	/^static int	p_fixeol;$/;"	v	file:
p_fkmap	vim/vim/src/option.h	/^EXTERN int	p_fkmap;	\/* 'fkmap' *\/$/;"	v
p_flp	vim/vim/src/option.c	/^static char_u	*p_flp;$/;"	v	file:
p_fo	vim/vim/src/option.c	/^static char_u	*p_fo;$/;"	v	file:
p_fp	vim/vim/src/option.h	/^EXTERN char_u	*p_fp;		\/* 'formatprg' *\/$/;"	v
p_fs	vim/vim/src/option.h	/^EXTERN int	p_fs;		\/* 'fsync' *\/$/;"	v
p_ft	vim/vim/src/option.c	/^static char_u	*p_ft;$/;"	v	file:
p_gd	vim/vim/src/option.h	/^EXTERN int	p_gd;		\/* 'gdefault' *\/$/;"	v
p_gefm	vim/vim/src/option.h	/^EXTERN char_u	*p_gefm;	\/* 'grepformat' *\/$/;"	v
p_ghr	vim/vim/src/option.h	/^EXTERN long	p_ghr;		\/* 'guiheadroom' *\/$/;"	v
p_go	vim/vim/src/option.h	/^EXTERN char_u	*p_go;		\/* 'guioptions' *\/$/;"	v
p_gp	vim/vim/src/option.h	/^EXTERN char_u	*p_gp;		\/* 'grepprg' *\/$/;"	v
p_gtl	vim/vim/src/option.h	/^EXTERN char_u	*p_gtl;		\/* 'guitablabel' *\/$/;"	v
p_gtt	vim/vim/src/option.h	/^EXTERN char_u	*p_gtt;		\/* 'guitabtooltip' *\/$/;"	v
p_guicursor	vim/vim/src/option.h	/^EXTERN char_u	*p_guicursor;	\/* 'guicursor' *\/$/;"	v
p_guifont	vim/vim/src/option.h	/^EXTERN char_u	*p_guifont;	\/* 'guifont' *\/$/;"	v
p_guifontset	vim/vim/src/option.h	/^EXTERN char_u	*p_guifontset;	\/* 'guifontset' *\/$/;"	v
p_guifontwide	vim/vim/src/option.h	/^EXTERN char_u	*p_guifontwide;	\/* 'guifontwide' *\/$/;"	v
p_guipty	vim/vim/src/option.h	/^EXTERN int	p_guipty;	\/* 'guipty' *\/$/;"	v
p_header	vim/vim/src/option.h	/^EXTERN char_u	*p_header;	\/* 'printheader' *\/$/;"	v
p_hf	vim/vim/src/option.h	/^EXTERN char_u	*p_hf;		\/* 'helpfile' *\/$/;"	v
p_hh	vim/vim/src/option.h	/^EXTERN long	p_hh;		\/* 'helpheight' *\/$/;"	v
p_hi	vim/vim/src/option.h	/^EXTERN long	p_hi;		\/* 'history' *\/$/;"	v
p_hid	vim/vim/src/option.h	/^EXTERN int	p_hid;		\/* 'hidden' *\/$/;"	v
p_hkmap	vim/vim/src/option.h	/^EXTERN int	p_hkmap;	\/* 'hkmap' *\/$/;"	v
p_hkmapp	vim/vim/src/option.h	/^EXTERN int	p_hkmapp;	\/* 'hkmapp' *\/$/;"	v
p_hl	vim/vim/src/option.h	/^EXTERN char_u	*p_hl;		\/* 'highlight' *\/$/;"	v
p_hlg	vim/vim/src/option.h	/^EXTERN char_u	*p_hlg;		\/* 'helplang' *\/$/;"	v
p_hls	vim/vim/src/option.h	/^EXTERN int	p_hls;		\/* 'hlsearch' *\/$/;"	v
p_ic	vim/vim/src/option.h	/^EXTERN int	p_ic;		\/* 'ignorecase' *\/$/;"	v
p_icon	vim/vim/src/option.h	/^EXTERN int	p_icon;		\/* 'icon' *\/$/;"	v
p_iconstring	vim/vim/src/option.h	/^EXTERN char_u	*p_iconstring;	\/* 'iconstring' *\/$/;"	v
p_im	vim/vim/src/option.h	/^EXTERN int	p_im;		\/* 'insertmode' *\/$/;"	v
p_imaf	vim/vim/src/option.h	/^EXTERN char_u	*p_imaf;	\/* 'imactivatefunc' *\/$/;"	v
p_imak	vim/vim/src/option.h	/^EXTERN char_u	*p_imak;	\/* 'imactivatekey' *\/$/;"	v
p_imcmdline	vim/vim/src/option.h	/^EXTERN int	p_imcmdline;	\/* 'imcmdline' *\/$/;"	v
p_imdisable	vim/vim/src/option.h	/^EXTERN int	p_imdisable;	\/* 'imdisable' *\/$/;"	v
p_iminsert	vim/vim/src/option.c	/^static long	p_iminsert;$/;"	v	file:
p_imsearch	vim/vim/src/option.c	/^static long	p_imsearch;$/;"	v	file:
p_imsf	vim/vim/src/option.h	/^EXTERN char_u	*p_imsf;	\/* 'imstatusfunc' *\/$/;"	v
p_inc	vim/vim/src/option.h	/^EXTERN char_u	*p_inc;$/;"	v
p_inde	vim/vim/src/option.c	/^static char_u	*p_inde;$/;"	v	file:
p_indk	vim/vim/src/option.c	/^static char_u	*p_indk;$/;"	v	file:
p_inex	vim/vim/src/option.c	/^static char_u	*p_inex;$/;"	v	file:
p_inf	vim/vim/src/option.c	/^static int	p_inf;$/;"	v	file:
p_is	vim/vim/src/option.h	/^EXTERN int	p_is;		\/* 'incsearch' *\/$/;"	v
p_isf	vim/vim/src/option.h	/^EXTERN char_u	*p_isf;		\/* 'isfname' *\/$/;"	v
p_isi	vim/vim/src/option.h	/^EXTERN char_u	*p_isi;		\/* 'isident' *\/$/;"	v
p_isk	vim/vim/src/option.c	/^static char_u	*p_isk;$/;"	v	file:
p_isp	vim/vim/src/option.h	/^EXTERN char_u	*p_isp;		\/* 'isprint' *\/$/;"	v
p_js	vim/vim/src/option.h	/^EXTERN int	p_js;		\/* 'joinspaces' *\/$/;"	v
p_key	vim/vim/src/option.c	/^static char_u	*p_key;$/;"	v	file:
p_keymap	vim/vim/src/option.c	/^static char_u	*p_keymap;$/;"	v	file:
p_km	vim/vim/src/option.h	/^EXTERN char_u	*p_km;		\/* 'keymodel' *\/$/;"	v
p_km_values	vim/vim/src/option.c	/^static char *(p_km_values[]) = {"startsel", "stopsel", NULL};$/;"	v	file:
p_kp	vim/vim/src/option.h	/^EXTERN char_u	*p_kp;		\/* 'keywordprg' *\/$/;"	v
p_langmap	vim/vim/src/option.h	/^EXTERN char_u	*p_langmap;	\/* 'langmap'*\/$/;"	v
p_lcs	vim/vim/src/option.h	/^EXTERN char_u	*p_lcs;		\/* 'listchars' *\/$/;"	v
p_li	vim/vim/src/quickfix.c	/^    listitem_T	*p_li;$/;"	m	struct:__anon13	file:	access:public
p_linespace	vim/vim/src/option.h	/^EXTERN long	p_linespace;	\/* 'linespace' *\/$/;"	v
p_lisp	vim/vim/src/option.c	/^static int	p_lisp;$/;"	v	file:
p_lispwords	vim/vim/src/option.h	/^EXTERN char_u	*p_lispwords;	\/* 'lispwords' *\/$/;"	v
p_lm	vim/vim/src/option.h	/^EXTERN char_u	*p_lm;		\/* 'langmenu' *\/$/;"	v
p_lnr	vim/vim/src/option.h	/^EXTERN int	p_lnr;		\/* 'langnoremap' *\/$/;"	v
p_lpl	vim/vim/src/option.h	/^EXTERN int	p_lpl;		\/* 'loadplugins' *\/$/;"	v
p_lrm	vim/vim/src/option.h	/^EXTERN int	p_lrm;		\/* 'langremap' *\/$/;"	v
p_ls	vim/vim/src/option.h	/^EXTERN long	p_ls;		\/* 'laststatus' *\/$/;"	v
p_luadll	vim/vim/src/option.h	/^EXTERN char_u	*p_luadll;	\/* 'luadll' *\/$/;"	v
p_lz	vim/vim/src/option.h	/^EXTERN int	p_lz;		\/* 'lazyredraw' *\/$/;"	v
p_ma	vim/vim/src/option.c	/^static int	p_ma;$/;"	v	file:
p_macatsui	vim/vim/src/option.h	/^EXTERN int	p_macatsui;	\/* 'macatsui' *\/$/;"	v
p_macatsui_last	vim/vim/src/gui_mac.c	/^int	    p_macatsui_last;$/;"	v
p_magic	vim/vim/src/option.h	/^EXTERN int	p_magic;	\/* 'magic' *\/$/;"	v
p_mat	vim/vim/src/option.h	/^EXTERN long	p_mat;		\/* 'matchtime' *\/$/;"	v
p_mco	vim/vim/src/option.h	/^EXTERN long	p_mco;		\/* 'maxcombine' *\/$/;"	v
p_mef	vim/vim/src/option.h	/^EXTERN char_u	*p_mef;		\/* 'makeef' *\/$/;"	v
p_menc	vim/vim/src/option.h	/^EXTERN char_u	*p_menc;	\/* 'makeencoding' *\/$/;"	v
p_mfd	vim/vim/src/option.h	/^EXTERN long	p_mfd;		\/* 'maxfuncdepth' *\/$/;"	v
p_mh	vim/vim/src/option.h	/^EXTERN int	p_mh;		\/* 'mousehide' *\/$/;"	v
p_mis	vim/vim/src/option.h	/^EXTERN long	p_mis;		\/* 'menuitems' *\/$/;"	v
p_ml	vim/vim/src/option.c	/^static int	p_ml;$/;"	v	file:
p_ml_nobin	vim/vim/src/option.c	/^static int	p_ml_nobin;$/;"	v	file:
p_mls	vim/vim/src/option.h	/^EXTERN long	p_mls;		\/* 'modelines' *\/$/;"	v
p_mm	vim/vim/src/option.h	/^EXTERN long	p_mm;		\/* 'maxmem' *\/$/;"	v
p_mmd	vim/vim/src/option.h	/^EXTERN long	p_mmd;		\/* 'maxmapdepth' *\/$/;"	v
p_mmp	vim/vim/src/option.h	/^EXTERN long	p_mmp;		\/* 'maxmempattern' *\/$/;"	v
p_mmt	vim/vim/src/option.h	/^EXTERN long	p_mmt;		\/* 'maxmemtot' *\/$/;"	v
p_mod	vim/vim/src/option.c	/^static int	p_mod;$/;"	v	file:
p_more	vim/vim/src/option.h	/^EXTERN int	p_more;		\/* 'more' *\/$/;"	v
p_mouse	vim/vim/src/option.h	/^EXTERN char_u	*p_mouse;	\/* 'mouse' *\/$/;"	v
p_mousef	vim/vim/src/option.h	/^EXTERN int	p_mousef;	\/* 'mousefocus' *\/$/;"	v
p_mousem	vim/vim/src/option.h	/^EXTERN char_u	*p_mousem;	\/* 'mousemodel' *\/$/;"	v
p_mousem_values	vim/vim/src/option.c	/^static char *(p_mousem_values[]) = {"extend", "popup", "popup_setpos", "mac", NULL};$/;"	v	file:
p_mouseshape	vim/vim/src/option.h	/^EXTERN char_u	*p_mouseshape;	\/* 'mouseshape' *\/$/;"	v
p_mouset	vim/vim/src/option.h	/^EXTERN long	p_mouset;	\/* 'mousetime' *\/$/;"	v
p_mp	vim/vim/src/option.h	/^EXTERN char_u	*p_mp;		\/* 'makeprg' *\/$/;"	v
p_mps	vim/vim/src/option.c	/^static char_u	*p_mps;$/;"	v	file:
p_msm	vim/vim/src/option.h	/^EXTERN char_u	*p_msm;		\/* 'mkspellmem' *\/$/;"	v
p_mzq	vim/vim/src/option.h	/^EXTERN long	p_mzq;		\/* 'mzquantum *\/$/;"	v
p_nf	vim/vim/src/option.c	/^static char_u	*p_nf;$/;"	v	file:
p_nf_values	vim/vim/src/option.c	/^static char *(p_nf_values[]) = {"bin", "octal", "hex", "alpha", NULL};$/;"	v	file:
p_odev	vim/vim/src/option.h	/^EXTERN int	p_odev;		\/* 'opendevice' *\/$/;"	v
p_ofu	vim/vim/src/option.c	/^static char_u	*p_ofu;$/;"	v	file:
p_opfunc	vim/vim/src/option.h	/^EXTERN char_u	*p_opfunc;	\/* 'operatorfunc' *\/$/;"	v
p_para	vim/vim/src/option.h	/^EXTERN char_u	*p_para;	\/* 'paragraphs' *\/$/;"	v
p_paste	vim/vim/src/option.h	/^EXTERN int	p_paste;	\/* 'paste' *\/$/;"	v
p_path	vim/vim/src/option.h	/^EXTERN char_u	*p_path;	\/* 'path' *\/$/;"	v
p_pdev	vim/vim/src/option.h	/^EXTERN char_u	*p_pdev;	\/* 'printdevice' *\/$/;"	v
p_penc	vim/vim/src/option.h	/^EXTERN char_u	*p_penc;	\/* 'printencoding' *\/$/;"	v
p_perldll	vim/vim/src/option.h	/^EXTERN char_u	*p_perldll;	\/* 'perldll' *\/$/;"	v
p_pex	vim/vim/src/option.h	/^EXTERN char_u	*p_pex;		\/* 'patchexpr' *\/$/;"	v
p_pexpr	vim/vim/src/option.h	/^EXTERN char_u	*p_pexpr;	\/* 'printexpr' *\/$/;"	v
p_pfn	vim/vim/src/option.h	/^EXTERN char_u	*p_pfn;		\/* 'printfont' *\/$/;"	v
p_ph	vim/vim/src/option.h	/^EXTERN long	p_ph;		\/* 'pumheight' *\/$/;"	v
p_pi	vim/vim/src/option.c	/^static int	p_pi;$/;"	v	file:
p_pm	vim/vim/src/option.h	/^EXTERN char_u	*p_pm;		\/* 'patchmode' *\/$/;"	v
p_pmcs	vim/vim/src/option.h	/^EXTERN char_u	*p_pmcs;	\/* 'printmbcharset' *\/$/;"	v
p_pmfn	vim/vim/src/option.h	/^EXTERN char_u	*p_pmfn;	\/* 'printmbfont' *\/$/;"	v
p_popt	vim/vim/src/option.h	/^EXTERN char_u	*p_popt;	\/* 'printoptions' *\/$/;"	v
p_pp	vim/vim/src/option.h	/^EXTERN char_u	*p_pp;		\/* 'packpath' *\/$/;"	v
p_prompt	vim/vim/src/option.h	/^EXTERN int	p_prompt;	\/* 'prompt' *\/$/;"	v
p_pt	vim/vim/src/option.h	/^EXTERN char_u	*p_pt;		\/* 'pastetoggle' *\/$/;"	v
p_pvh	vim/vim/src/option.h	/^EXTERN long	p_pvh;		\/* 'previewheight' *\/$/;"	v
p_py3dll	vim/vim/src/option.h	/^EXTERN char_u	*p_py3dll;	\/* 'pythonthreedll' *\/$/;"	v
p_pydll	vim/vim/src/option.h	/^EXTERN char_u	*p_pydll;	\/* 'pythondll' *\/$/;"	v
p_pyx	vim/vim/src/option.h	/^EXTERN long	p_pyx;		\/* 'pyxversion' *\/$/;"	v
p_qe	vim/vim/src/option.c	/^static char_u	*p_qe;$/;"	v	file:
p_rdt	vim/vim/src/option.h	/^EXTERN long	p_rdt;		\/* 'redrawtime' *\/$/;"	v
p_re	vim/vim/src/option.h	/^EXTERN long	p_re;		\/* 'regexpengine' *\/$/;"	v
p_remap	vim/vim/src/option.h	/^EXTERN int	p_remap;	\/* 'remap' *\/$/;"	v
p_report	vim/vim/src/option.h	/^EXTERN long	p_report;	\/* 'report' *\/$/;"	v
p_ri	vim/vim/src/option.h	/^EXTERN int	p_ri;		\/* 'revins' *\/$/;"	v
p_ro	vim/vim/src/option.c	/^static int	p_ro;$/;"	v	file:
p_rop	vim/vim/src/option.h	/^EXTERN char_u	*p_rop;		\/* 'renderoptions' *\/$/;"	v
p_rs	vim/vim/src/option.h	/^EXTERN int	p_rs;		\/* 'restorescreen' *\/$/;"	v
p_rtp	vim/vim/src/option.h	/^EXTERN char_u	*p_rtp;		\/* 'runtimepath' *\/$/;"	v
p_ru	vim/vim/src/option.h	/^EXTERN int	p_ru;		\/* 'ruler' *\/$/;"	v
p_rubydll	vim/vim/src/option.h	/^EXTERN char_u	*p_rubydll;	\/* 'rubydll' *\/$/;"	v
p_ruf	vim/vim/src/option.h	/^EXTERN char_u	*p_ruf;		\/* 'rulerformat' *\/$/;"	v
p_sb	vim/vim/src/option.h	/^EXTERN int	p_sb;		\/* 'splitbelow' *\/$/;"	v
p_sbo	vim/vim/src/option.h	/^EXTERN char_u	*p_sbo;		\/* 'scrollopt' *\/$/;"	v
p_sbr	vim/vim/src/option.h	/^EXTERN char_u	*p_sbr;		\/* 'showbreak' *\/$/;"	v
p_sc	vim/vim/src/option.h	/^EXTERN int	p_sc;		\/* 'showcmd' *\/$/;"	v
p_scbopt_values	vim/vim/src/option.c	/^static char *(p_scbopt_values[]) = {"ver", "hor", "jump", NULL};$/;"	v	file:
p_scl	vim/vim/src/option.h	/^EXTERN char_u  *p_scl;		\/* signcolumn *\/$/;"	v
p_scl_values	vim/vim/src/option.c	/^static char *(p_scl_values[]) = {"yes", "no", "auto", NULL};$/;"	v	file:
p_scs	vim/vim/src/option.h	/^EXTERN int	p_scs;		\/* 'smartcase' *\/$/;"	v
p_sections	vim/vim/src/option.h	/^EXTERN char_u	*p_sections;	\/* 'sections' *\/$/;"	v
p_secure	vim/vim/src/option.h	/^EXTERN int	p_secure;	\/* 'secure' *\/$/;"	v
p_sel	vim/vim/src/option.h	/^EXTERN char_u	*p_sel;		\/* 'selection' *\/$/;"	v
p_sel_values	vim/vim/src/option.c	/^static char *(p_sel_values[]) = {"inclusive", "exclusive", "old", NULL};$/;"	v	file:
p_sft	vim/vim/src/option.h	/^EXTERN int	p_sft;		\/* 'showfulltag' *\/$/;"	v
p_sh	vim/vim/src/option.h	/^EXTERN char_u	*p_sh;		\/* 'shell' *\/$/;"	v
p_shcf	vim/vim/src/option.h	/^EXTERN char_u	*p_shcf;	\/* 'shellcmdflag' *\/$/;"	v
p_shm	vim/vim/src/option.h	/^EXTERN char_u	*p_shm;		\/* 'shortmess' *\/$/;"	v
p_shq	vim/vim/src/option.h	/^EXTERN char_u	*p_shq;		\/* 'shellquote' *\/$/;"	v
p_si	vim/vim/src/option.c	/^static int	p_si;$/;"	v	file:
p_siso	vim/vim/src/option.h	/^EXTERN long	p_siso;		\/* 'sidescrolloff' *\/$/;"	v
p_sj	vim/vim/src/option.h	/^EXTERN long	p_sj;		\/* 'scrolljump' *\/$/;"	v
p_slm	vim/vim/src/option.h	/^EXTERN char_u	*p_slm;		\/* 'selectmode' *\/$/;"	v
p_slm_values	vim/vim/src/option.c	/^static char *(p_slm_values[]) = {"mouse", "key", "cmd", NULL};$/;"	v	file:
p_sm	vim/vim/src/option.h	/^EXTERN int	p_sm;		\/* 'showmatch' *\/$/;"	v
p_smc	vim/vim/src/option.c	/^static long	p_smc;$/;"	v	file:
p_smd	vim/vim/src/option.h	/^EXTERN int	p_smd;		\/* 'showmode' *\/$/;"	v
p_sn	vim/vim/src/option.c	/^static int	p_sn;$/;"	v	file:
p_so	vim/vim/src/option.h	/^EXTERN long	p_so;		\/* 'scrolloff' *\/$/;"	v
p_sol	vim/vim/src/option.h	/^EXTERN int	p_sol;		\/* 'startofline' *\/$/;"	v
p_sp	vim/vim/src/option.h	/^EXTERN char_u	*p_sp;		\/* 'shellpipe' *\/$/;"	v
p_spc	vim/vim/src/option.c	/^static char_u	*p_spc;$/;"	v	file:
p_spf	vim/vim/src/option.c	/^static char_u	*p_spf;$/;"	v	file:
p_spl	vim/vim/src/option.c	/^static char_u	*p_spl;$/;"	v	file:
p_spr	vim/vim/src/option.h	/^EXTERN int	p_spr;		\/* 'splitright' *\/$/;"	v
p_sps	vim/vim/src/option.h	/^EXTERN char_u	*p_sps;		\/* 'spellsuggest' *\/$/;"	v
p_sr	vim/vim/src/option.h	/^EXTERN int	p_sr;		\/* 'shiftround' *\/$/;"	v
p_srr	vim/vim/src/option.h	/^EXTERN char_u	*p_srr;		\/* 'shellredir' *\/$/;"	v
p_ss	vim/vim/src/option.h	/^EXTERN long	p_ss;		\/* 'sidescroll' *\/$/;"	v
p_ssl	vim/vim/src/option.h	/^EXTERN int	p_ssl;		\/* 'shellslash' *\/$/;"	v
p_ssop	vim/vim/src/option.h	/^EXTERN char_u	*p_ssop;	\/* 'sessionoptions' *\/$/;"	v
p_ssop_values	vim/vim/src/option.h	/^static char *(p_ssop_values[]) = {"buffers", "winpos", "resize", "winsize",$/;"	v
p_st	vim/vim/src/option.h	/^EXTERN long	p_st;		\/* 'shelltype' *\/$/;"	v
p_sta	vim/vim/src/option.h	/^EXTERN int	p_sta;		\/* 'smarttab' *\/$/;"	v
p_stal	vim/vim/src/option.h	/^EXTERN long	p_stal;		\/* 'showtabline' *\/$/;"	v
p_stl	vim/vim/src/option.h	/^EXTERN char_u	*p_stl;		\/* 'statusline' *\/$/;"	v
p_stmp	vim/vim/src/option.h	/^EXTERN int	p_stmp;		\/* 'shelltemp' *\/$/;"	v
p_str	vim/vim/src/quickfix.c	/^    char_u	*p_str;$/;"	m	struct:__anon13	file:	access:public
p_sts	vim/vim/src/option.c	/^static long	p_sts;$/;"	v	file:
p_sts_nopaste	vim/vim/src/option.c	/^static long	p_sts_nopaste;$/;"	v	file:
p_su	vim/vim/src/option.h	/^EXTERN char_u	*p_su;		\/* 'suffixes' *\/$/;"	v
p_sua	vim/vim/src/option.c	/^static char_u	*p_sua;$/;"	v	file:
p_sw	vim/vim/src/option.c	/^static long	p_sw;$/;"	v	file:
p_swb	vim/vim/src/option.h	/^EXTERN char_u	*p_swb;		\/* 'switchbuf' *\/$/;"	v
p_swb_values	vim/vim/src/option.h	/^static char *(p_swb_values[]) = {"useopen", "usetab", "split", "newtab", "vsplit", NULL};$/;"	v
p_swf	vim/vim/src/option.c	/^static int	p_swf;$/;"	v	file:
p_sws	vim/vim/src/option.h	/^EXTERN char_u	*p_sws;		\/* 'swapsync' *\/$/;"	v
p_sxe	vim/vim/src/option.h	/^EXTERN char_u	*p_sxe;		\/* 'shellxescape' *\/$/;"	v
p_sxq	vim/vim/src/option.h	/^EXTERN char_u	*p_sxq;		\/* 'shellxquote' *\/$/;"	v
p_syn	vim/vim/src/option.c	/^static char_u	*p_syn;$/;"	v	file:
p_ta	vim/vim/src/option.h	/^EXTERN int	p_ta;		\/* 'textauto' *\/$/;"	v
p_tags	vim/vim/src/option.h	/^EXTERN char_u	*p_tags;	\/* 'tags' *\/$/;"	v
p_tal	vim/vim/src/option.h	/^EXTERN char_u	*p_tal;		\/* 'tabline' *\/$/;"	v
p_tbi	vim/vim/src/option.h	/^EXTERN int	p_tbi;		\/* 'ttybuiltin' *\/$/;"	v
p_tbidi	vim/vim/src/option.h	/^EXTERN int	p_tbidi;	\/* 'termbidi' *\/$/;"	v
p_tbis	vim/vim/src/option.h	/^EXTERN char_u	*p_tbis;	\/* 'toolbariconsize' *\/$/;"	v
p_tbis_values	vim/vim/src/option.h	/^static char *(p_tbis_values[]) = {"tiny", "small", "medium", "large", "huge", "giant", NULL};$/;"	v
p_tbs	vim/vim/src/option.h	/^EXTERN int	p_tbs;		\/* 'tagbsearch' *\/$/;"	v
p_tc	vim/vim/src/option.h	/^EXTERN char_u	*p_tc;		\/* 'tagcase' *\/$/;"	v
p_tc_values	vim/vim/src/option.h	/^static char *(p_tc_values[]) = {"followic", "ignore", "match", "followscs", "smart", NULL};$/;"	v
p_tcldll	vim/vim/src/option.h	/^EXTERN char_u	*p_tcldll;	\/* 'tcldll' *\/$/;"	v
p_tenc	vim/vim/src/option.h	/^EXTERN char_u	*p_tenc;	\/* 'termencoding' *\/$/;"	v
p_term	vim/vim/src/option.c	3136;"	d	file:
p_terse	vim/vim/src/option.h	/^EXTERN int	p_terse;	\/* 'terse' *\/$/;"	v
p_tf	vim/vim/src/option.h	/^EXTERN int	p_tf;		\/* 'ttyfast' *\/$/;"	v
p_tgc	vim/vim/src/option.h	/^EXTERN int	p_tgc;		\/* 'termguicolors' *\/$/;"	v
p_tgst	vim/vim/src/option.h	/^EXTERN int	p_tgst;		\/* 'tagstack' *\/$/;"	v
p_timeout	vim/vim/src/option.h	/^EXTERN int	p_timeout;	\/* 'timeout' *\/$/;"	v
p_title	vim/vim/src/option.h	/^EXTERN int	p_title;	\/* 'title' *\/$/;"	v
p_titlelen	vim/vim/src/option.h	/^EXTERN long	p_titlelen;	\/* 'titlelen' *\/$/;"	v
p_titleold	vim/vim/src/option.h	/^EXTERN char_u	*p_titleold;	\/* 'titleold' *\/$/;"	v
p_titlestring	vim/vim/src/option.h	/^EXTERN char_u	*p_titlestring;	\/* 'titlestring' *\/$/;"	v
p_tl	vim/vim/src/option.h	/^EXTERN long	p_tl;		\/* 'taglength' *\/$/;"	v
p_tm	vim/vim/src/option.h	/^EXTERN long	p_tm;		\/* 'timeoutlen' *\/$/;"	v
p_to	vim/vim/src/option.h	/^EXTERN int	p_to;		\/* 'tildeop' *\/$/;"	v
p_toolbar	vim/vim/src/option.h	/^EXTERN char_u	*p_toolbar;	\/* 'toolbar' *\/$/;"	v
p_toolbar_values	vim/vim/src/option.h	/^static char *(p_toolbar_values[]) = {"text", "icons", "tooltips", "horiz", NULL};$/;"	v
p_tpm	vim/vim/src/option.h	/^EXTERN long	p_tpm;		\/* 'tabpagemax' *\/$/;"	v
p_tr	vim/vim/src/option.h	/^EXTERN int	p_tr;		\/* 'tagrelative' *\/$/;"	v
p_ts	vim/vim/src/option.c	/^static long	p_ts;$/;"	v	file:
p_tsr	vim/vim/src/option.h	/^EXTERN char_u	*p_tsr;		\/* 'thesaurus' *\/$/;"	v
p_ttimeout	vim/vim/src/option.h	/^EXTERN int	p_ttimeout;	\/* 'ttimeout' *\/$/;"	v
p_ttm	vim/vim/src/option.h	/^EXTERN long	p_ttm;		\/* 'ttimeoutlen' *\/$/;"	v
p_ttym	vim/vim/src/option.h	/^EXTERN char_u	*p_ttym;	\/* 'ttymouse' *\/$/;"	v
p_ttym_values	vim/vim/src/option.h	/^static char *(p_ttym_values[]) = {"xterm", "xterm2", "dec", "netterm", "jsbterm", "pterm", "urxvt", "sgr", NULL};$/;"	v
p_ttyscroll	vim/vim/src/option.h	/^EXTERN long	p_ttyscroll;	\/* 'ttyscroll' *\/$/;"	v
p_tw	vim/vim/src/option.c	/^static long	p_tw;$/;"	v	file:
p_tw_nobin	vim/vim/src/option.c	/^static long	p_tw_nobin;$/;"	v	file:
p_tw_nopaste	vim/vim/src/option.c	/^static long	p_tw_nopaste;$/;"	v	file:
p_tx	vim/vim/src/option.c	/^static int	p_tx;$/;"	v	file:
p_uc	vim/vim/src/option.h	/^EXTERN long	p_uc;		\/* 'updatecount' *\/$/;"	v
p_udf	vim/vim/src/option.c	/^static int	p_udf;$/;"	v	file:
p_udir	vim/vim/src/option.h	/^EXTERN char_u	*p_udir;	\/* 'undodir' *\/$/;"	v
p_ul	vim/vim/src/option.h	/^EXTERN long	p_ul;		\/* 'undolevels' *\/$/;"	v
p_ur	vim/vim/src/option.h	/^EXTERN long	p_ur;		\/* 'undoreload' *\/$/;"	v
p_ut	vim/vim/src/option.h	/^EXTERN long	p_ut;		\/* 'updatetime' *\/$/;"	v
p_vb	vim/vim/src/option.h	/^EXTERN int	p_vb;		\/* 'visualbell' *\/$/;"	v
p_vdir	vim/vim/src/option.h	/^EXTERN char_u	*p_vdir;	\/* 'viewdir' *\/$/;"	v
p_ve	vim/vim/src/option.h	/^EXTERN char_u	*p_ve;		\/* 'virtualedit' *\/$/;"	v
p_ve_values	vim/vim/src/option.h	/^static char *(p_ve_values[]) = {"block", "insert", "all", "onemore", NULL};$/;"	v
p_verbose	vim/vim/src/option.h	/^EXTERN long	p_verbose;	\/* 'verbose' *\/$/;"	v
p_vfile	vim/vim/src/option.h	/^char_u	*p_vfile = (char_u *)""; \/* used before options are initialized *\/$/;"	v
p_viminfo	vim/vim/src/option.h	/^EXTERN char_u	*p_viminfo;	\/* 'viminfo' *\/$/;"	v
p_viminfofile	vim/vim/src/option.h	/^EXTERN char_u	*p_viminfofile;	\/* 'viminfofile' *\/$/;"	v
p_vop	vim/vim/src/option.h	/^EXTERN char_u	*p_vop;		\/* 'viewoptions' *\/$/;"	v
p_wa	vim/vim/src/option.h	/^EXTERN int	p_wa;		\/* 'writeany' *\/$/;"	v
p_wak	vim/vim/src/option.h	/^EXTERN char_u	*p_wak;		\/* 'winaltkeys' *\/$/;"	v
p_wak_values	vim/vim/src/option.c	/^static char *(p_wak_values[]) = {"yes", "menu", "no", NULL};$/;"	v	file:
p_warn	vim/vim/src/option.h	/^EXTERN int	p_warn;		\/* 'warn' *\/$/;"	v
p_wb	vim/vim/src/option.h	/^EXTERN int	p_wb;		\/* 'writebackup' *\/$/;"	v
p_wc	vim/vim/src/option.h	/^EXTERN long	p_wc;		\/* 'wildchar' *\/$/;"	v
p_wcm	vim/vim/src/option.h	/^EXTERN long	p_wcm;		\/* 'wildcharm' *\/$/;"	v
p_wd	vim/vim/src/option.h	/^EXTERN long	p_wd;		\/* 'writedelay' *\/$/;"	v
p_wh	vim/vim/src/option.h	/^EXTERN long	p_wh;		\/* 'winheight' *\/$/;"	v
p_wic	vim/vim/src/option.h	/^EXTERN long	p_wic;		\/* 'wildignorecase' *\/$/;"	v
p_wig	vim/vim/src/option.h	/^EXTERN char_u	*p_wig;		\/* 'wildignore' *\/$/;"	v
p_wim	vim/vim/src/option.h	/^EXTERN char_u	*p_wim;		\/* 'wildmode' *\/$/;"	v
p_window	vim/vim/src/option.h	/^EXTERN long	p_window;	\/* 'window' *\/$/;"	v
p_wiv	vim/vim/src/option.h	/^EXTERN int	p_wiv;		\/* 'weirdinvert' *\/$/;"	v
p_wiw	vim/vim/src/option.h	/^EXTERN long	p_wiw;		\/* 'winwidth' *\/$/;"	v
p_wm	vim/vim/src/option.c	/^static long	p_wm;$/;"	v	file:
p_wm_nobin	vim/vim/src/option.c	/^static long	p_wm_nobin;$/;"	v	file:
p_wm_nopaste	vim/vim/src/option.c	/^static long	p_wm_nopaste;$/;"	v	file:
p_wmh	vim/vim/src/option.h	/^EXTERN long	p_wmh;		\/* 'winminheight' *\/$/;"	v
p_wmnu	vim/vim/src/option.h	/^EXTERN int	p_wmnu;		\/* 'wildmenu' *\/$/;"	v
p_wmw	vim/vim/src/option.h	/^EXTERN long	p_wmw;		\/* 'winminwidth' *\/$/;"	v
p_wop	vim/vim/src/option.h	/^EXTERN char_u	*p_wop;		\/* 'wildoptions' *\/$/;"	v
p_wop_values	vim/vim/src/option.c	/^static char *(p_wop_values[]) = {"tagfile", NULL};$/;"	v	file:
p_write	vim/vim/src/option.h	/^EXTERN int	p_write;	\/* 'write' *\/$/;"	v
p_ws	vim/vim/src/option.h	/^EXTERN int	p_ws;		\/* 'wrapscan' *\/$/;"	v
p_ww	vim/vim/src/option.h	/^EXTERN char_u	*p_ww;		\/* 'whichwrap' *\/$/;"	v
page_count	vim/vim/src/hardcopy.c	/^static int	page_count;$/;"	v	file:
panel_titles	vim/vim/src/gui_photon.c	/^static char	**panel_titles = NULL;$/;"	v	file:
paragraph_start	vim/vim/src/ops.c	/^paragraph_start(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
params	vim/vim/src/main.c	/^static mparm_T	params;$/;"	v	file:
parent	vim/vim/src/structs.h	/^    vimmenu_T	*parent;	    \/* Parent of menu *\/$/;"	m	struct:VimMenu	access:public
parentTrans	vim/vim/src/gui_athena.c	/^static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;$/;"	v	file:
parent_class	vim/vim/src/gui_gtk_f.c	/^static GtkWidgetClass *parent_class = NULL;$/;"	v	file:
parent_class	vim/vim/src/gui_gtk_f.h	/^    GtkContainerClass parent_class;$/;"	m	struct:_GtkFormClass	access:public
parseMarker	vim/vim/src/fold.c	/^parseMarker(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
parseMarker	vim/vim/src/fold.c	/^static void parseMarker(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
parse_addr_type_arg	vim/vim/src/ex_docmd.c	/^parse_addr_type_arg($/;"	f	signature:( char_u *value, int vallen, long *argt, int *addr_type_arg)
parse_builtin_tcap	vim/vim/src/term.c	/^parse_builtin_tcap(char_u *term)$/;"	f	file:	signature:(char_u *term)
parse_builtin_tcap	vim/vim/src/term.c	/^static void parse_builtin_tcap(char_u *s);$/;"	p	file:	signature:(char_u *s)
parse_cino	vim/vim/src/misc1.c	/^parse_cino(buf_T *buf)$/;"	f	signature:(buf_T *buf)
parse_command_name	vim/vim/src/main.c	/^parse_command_name(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
parse_command_name	vim/vim/src/main.c	/^static void parse_command_name(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
parse_compl_arg	vim/vim/src/ex_docmd.c	/^parse_compl_arg($/;"	f	signature:( char_u *value, int vallen, int *complp, long *argt, char_u **compl_arg UNUSED)
parse_efm_option	vim/vim/src/quickfix.c	/^parse_efm_option(char_u *efm)$/;"	f	file:	signature:(char_u *efm)
parse_list_options	vim/vim/src/hardcopy.c	/^parse_list_options($/;"	f	file:	signature:( char_u *option_str, option_table_T *table, int table_size)
parse_list_options	vim/vim/src/hardcopy.c	/^static char_u *parse_list_options(char_u *option_str, option_table_T *table, int table_size);$/;"	p	file:	signature:(char_u *option_str, option_table_T *table, int table_size)
parse_match	vim/vim/src/tag.c	/^parse_match($/;"	f	file:	signature:( char_u *lbuf, tagptrs_T *tagp)
parse_match	vim/vim/src/tag.c	/^static int parse_match(char_u *lbuf, tagptrs_T *tagp);$/;"	p	file:	signature:(char_u *lbuf, tagptrs_T *tagp)
parse_printmbfont	vim/vim/src/hardcopy.c	/^parse_printmbfont(void)$/;"	f	signature:(void)
parse_printoptions	vim/vim/src/hardcopy.c	/^parse_printoptions(void)$/;"	f	signature:(void)
parse_queued_messages	vim/vim/src/misc2.c	/^parse_queued_messages(void)$/;"	f	signature:(void)
parse_shape_opt	vim/vim/src/misc2.c	/^parse_shape_opt(int what)$/;"	f	signature:(int what)
parse_state_T	vim/vim/src/regexp.c	/^} parse_state_T;$/;"	t	typeref:struct:__anon124	file:
parse_tag_line	vim/vim/src/tag.c	/^parse_tag_line($/;"	f	file:	signature:( char_u *lbuf, int is_etag, tagptrs_T *tagp)
parse_tag_line	vim/vim/src/tag.c	/^static int parse_tag_line(char_u *lbuf, int is_etag, tagptrs_T *tagp);$/;"	p	file:	signature:(char_u *lbuf, int is_etag, tagptrs_T *tagp)
parse_tag_line	vim/vim/src/tag.c	/^static int parse_tag_line(char_u *lbuf, tagptrs_T *tagp);$/;"	p	file:	signature:(char_u *lbuf, tagptrs_T *tagp)
parse_uri_list	vim/vim/src/gui_gtk_x11.c	/^parse_uri_list(int *count, char_u *data, int len)$/;"	f	file:	signature:(int *count, char_u *data, int len)
parser_callbacks	vim/vim/src/libvterm/src/state.c	/^static const VTermParserCallbacks parser_callbacks = {$/;"	v	file:
parser_callbacks	vim/vim/src/libvterm/src/vterm_internal.h	/^  const VTermParserCallbacks *parser_callbacks;$/;"	m	struct:VTerm	access:public
parser_cbs	vim/vim/src/libvterm/bin/vterm-dump.c	/^static VTermParserCallbacks parser_cbs = {$/;"	v	file:
parser_cbs	vim/vim/src/libvterm/t/harness.c	/^static VTermParserCallbacks parser_cbs = {$/;"	v	file:
parser_control	vim/vim/src/libvterm/bin/vterm-dump.c	/^static int parser_control(unsigned char control, void *user)$/;"	f	file:	signature:(unsigned char control, void *user)
parser_control	vim/vim/src/libvterm/t/harness.c	/^static int parser_control(unsigned char control, void *user)$/;"	f	file:	signature:(unsigned char control, void *user)
parser_csi	vim/vim/src/libvterm/bin/vterm-dump.c	/^static int parser_csi(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)$/;"	f	file:	signature:(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)
parser_csi	vim/vim/src/libvterm/t/harness.c	/^static int parser_csi(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)$/;"	f	file:	signature:(const char *leader, const long args[], int argcount, const char *intermed, char command, void *user)
parser_dcs	vim/vim/src/libvterm/bin/vterm-dump.c	/^static int parser_dcs(const char *command, size_t cmdlen, void *user)$/;"	f	file:	signature:(const char *command, size_t cmdlen, void *user)
parser_dcs	vim/vim/src/libvterm/t/harness.c	/^static int parser_dcs(const char *command, size_t cmdlen, void *user)$/;"	f	file:	signature:(const char *command, size_t cmdlen, void *user)
parser_escape	vim/vim/src/libvterm/bin/vterm-dump.c	/^static int parser_escape(const char bytes[], size_t len, void *user)$/;"	f	file:	signature:(const char bytes[], size_t len, void *user)
parser_escape	vim/vim/src/libvterm/t/harness.c	/^static int parser_escape(const char bytes[], size_t len, void *user)$/;"	f	file:	signature:(const char bytes[], size_t len, void *user)
parser_osc	vim/vim/src/libvterm/bin/vterm-dump.c	/^static int parser_osc(const char *command, size_t cmdlen, void *user)$/;"	f	file:	signature:(const char *command, size_t cmdlen, void *user)
parser_osc	vim/vim/src/libvterm/t/harness.c	/^static int parser_osc(const char *command, size_t cmdlen, void *user)$/;"	f	file:	signature:(const char *command, size_t cmdlen, void *user)
parser_state	vim/vim/src/libvterm/src/vterm_internal.h	/^  } parser_state;$/;"	m	struct:VTerm	typeref:enum:VTerm::VTermParserState	access:public
parser_text	vim/vim/src/libvterm/bin/vterm-dump.c	/^static int parser_text(const char bytes[], size_t len, void *user)$/;"	f	file:	signature:(const char bytes[], size_t len, void *user)
parser_text	vim/vim/src/libvterm/t/harness.c	/^static int parser_text(const char bytes[], size_t len, void *user)$/;"	f	file:	signature:(const char bytes[], size_t len, void *user)
part_from_char	vim/vim/src/channel.c	/^part_from_char(int c)$/;"	f	file:	signature:(int c)
part_names	vim/vim/src/channel.c	/^static char *part_names[] = {"sock", "out", "err", "in"};$/;"	v	file:
partial_S	vim/vim/src/structs.h	/^struct partial_S$/;"	s
partial_S::pt_argc	vim/vim/src/structs.h	/^    int		pt_argc;	\/* number of arguments *\/$/;"	m	struct:partial_S	access:public
partial_S::pt_argv	vim/vim/src/structs.h	/^    typval_T	*pt_argv;	\/* arguments in allocated array *\/$/;"	m	struct:partial_S	access:public
partial_S::pt_auto	vim/vim/src/structs.h	/^    int		pt_auto;	\/* when TRUE the partial was created for using$/;"	m	struct:partial_S	access:public
partial_S::pt_dict	vim/vim/src/structs.h	/^    dict_T	*pt_dict;	\/* dict for "self" *\/$/;"	m	struct:partial_S	access:public
partial_S::pt_func	vim/vim/src/structs.h	/^    ufunc_T	*pt_func;	\/* function pointer; when NULL lookup function$/;"	m	struct:partial_S	access:public
partial_S::pt_name	vim/vim/src/structs.h	/^    char_u	*pt_name;	\/* function name; when NULL use$/;"	m	struct:partial_S	access:public
partial_S::pt_refcount	vim/vim/src/structs.h	/^    int		pt_refcount;	\/* reference count *\/$/;"	m	struct:partial_S	access:public
partial_T	vim/vim/src/structs.h	/^typedef struct partial_S partial_T;$/;"	t	typeref:struct:partial_S
partial_free	vim/vim/src/eval.c	/^partial_free(partial_T *pt)$/;"	f	file:	signature:(partial_T *pt)
partial_name	vim/vim/src/eval.c	/^partial_name(partial_T *pt)$/;"	f	signature:(partial_T *pt)
partial_unref	vim/vim/src/eval.c	/^partial_unref(partial_T *pt)$/;"	f	signature:(partial_T *pt)
password	vim/vim/src/blowfish.c	/^    char_u   password[64];$/;"	m	struct:__anon73	file:	access:public
paste_mode_T	vim/vim/src/vim.h	/^} paste_mode_T;$/;"	t	typeref:enum:__anon245
paste_option_changed	vim/vim/src/option.c	/^paste_option_changed(void)$/;"	f	file:	signature:(void)
paste_option_changed	vim/vim/src/option.c	/^static void paste_option_changed(void);$/;"	p	file:	signature:(void)
pat	vim/vim/src/fileio.c	/^    char_u	    *pat;		\/* pattern as typed (NULL when pattern$/;"	m	struct:AutoPat	file:	access:public
pat	vim/vim/src/search.c	/^    char_u	    *pat;	\/* the pattern (in allocated memory) or NULL *\/$/;"	m	struct:spat	file:	access:public
pat	vim/vim/src/tag.c	/^    char_u	*pat;		\/* the pattern *\/$/;"	m	struct:__anon155	file:	access:public
pat_T	vim/vim/src/tag.c	/^} pat_T;$/;"	t	typeref:struct:__anon155	file:
pat_has_uppercase	vim/vim/src/search.c	/^pat_has_uppercase(char_u *pat)$/;"	f	signature:(char_u *pat)
patch	vim/vim/src/regexp_nfa.c	/^patch(Ptrlist *l, nfa_state_T *s)$/;"	f	file:	signature:(Ptrlist *l, nfa_state_T *s)
patch	vim/vim/src/regexp_nfa.c	/^static void patch(Ptrlist *l, nfa_state_T *s);$/;"	p	file:	signature:(Ptrlist *l, nfa_state_T *s)
path	vim/vim/src/gui_at_fs.c	/^    char	*path;$/;"	m	struct:__anon236	file:	access:public
path_is_url	vim/vim/src/window.c	/^path_is_url(char_u *p)$/;"	f	file:	signature:(char_u *p)
path_is_url	vim/vim/src/window.c	/^static int path_is_url(char_u *p);$/;"	p	file:	signature:(char_u *p)
path_with_url	vim/vim/src/window.c	/^path_with_url(char_u *fname)$/;"	f	signature:(char_u *fname)
pathcmp	vim/vim/src/dosinst.c	/^pathcmp(char *p, int plen, char *q, int qlen)$/;"	f	file:	signature:(char *p, int plen, char *q, int qlen)
pathcmp	vim/vim/src/misc2.c	/^pathcmp(const char *p, const char *q, int maxlen)$/;"	f	signature:(const char *p, const char *q, int maxlen)
patlen	vim/vim/src/fileio.c	/^    int		    patlen;		\/* strlen() of pat *\/$/;"	m	struct:AutoPat	file:	access:public
pattern	vim/vim/src/quickfix.c	/^    char	*pattern;$/;"	m	struct:fmtpattern	file:	access:public
pattern	vim/vim/src/quickfix.c	/^    char_u	*pattern;$/;"	m	struct:__anon14	file:	access:public
pattern	vim/vim/src/regexp.h	/^    char_u		*pattern;$/;"	m	struct:__anon144	access:public
pattern	vim/vim/src/structs.h	/^    char_u	*pattern;   \/* pattern to highlight *\/$/;"	m	struct:matchitem	access:public
pattern	vim/vim/src/syntax.c	/^    char_u	*pattern;$/;"	m	struct:__anon139	file:	access:public
pattern_match	vim/vim/src/eval.c	/^pattern_match(char_u *pat, char_u *text, int ic)$/;"	f	file:	signature:(char_u *pat, char_u *text, int ic)
pause_time	vim/vim/src/ex_cmds2.c	/^static proftime_T pause_time;$/;"	v	file:
pax	vim/vim/src/blowfish.c	/^    UINT32_T	pax[18];	    \/* P-array *\/$/;"	m	struct:__anon72	file:	access:public
pax_init	vim/vim/src/blowfish.c	/^static UINT32_T pax_init[18] = {$/;"	v	file:
pb_count	vim/vim/src/memline.c	/^    short_u	pb_count;	\/* number of pointers in this block *\/$/;"	m	struct:pointer_block	file:	access:public
pb_count_max	vim/vim/src/memline.c	/^    short_u	pb_count_max;	\/* maximum value for pb_count *\/$/;"	m	struct:pointer_block	file:	access:public
pb_id	vim/vim/src/memline.c	/^    short_u	pb_id;		\/* ID for pointer block: PTR_ID *\/$/;"	m	struct:pointer_block	file:	access:public
pb_pointer	vim/vim/src/memline.c	/^    PTR_EN	pb_pointer[1];	\/* list of pointers to blocks (actually longer)$/;"	m	struct:pointer_block	file:	access:public
pc_attr	vim/vim/src/edit.c	/^static int  pc_attr;$/;"	v	file:
pc_bytes	vim/vim/src/edit.c	/^static char_u pc_bytes[MB_MAXBYTES + 1]; \/* saved bytes *\/$/;"	v	file:
pc_col	vim/vim/src/edit.c	/^static int  pc_col;$/;"	v	file:
pc_row	vim/vim/src/edit.c	/^static int  pc_row;$/;"	v	file:
pc_status	vim/vim/src/edit.c	/^static int  pc_status;$/;"	v	file:
pchar_cursor	vim/vim/src/misc1.c	/^pchar_cursor(int c)$/;"	f	signature:(int c)
pe_bnum	vim/vim/src/memline.c	/^    blocknr_T	pe_bnum;	\/* block number *\/$/;"	m	struct:pointer_entry	file:	access:public
pe_line_count	vim/vim/src/memline.c	/^    linenr_T	pe_line_count;	\/* number of lines in this branch *\/$/;"	m	struct:pointer_entry	file:	access:public
pe_old_lnum	vim/vim/src/memline.c	/^    linenr_T	pe_old_lnum;	\/* lnum for this block (for recovery) *\/$/;"	m	struct:pointer_entry	file:	access:public
pe_page_count	vim/vim/src/memline.c	/^    int		pe_page_count;	\/* number of pages in block pe_bnum *\/$/;"	m	struct:pointer_entry	file:	access:public
peek_console_input	vim/vim/src/os_win32.c	/^peek_console_input($/;"	f	file:	signature:( HANDLE hInput, INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpEvents)
peekchr	vim/vim/src/regexp.c	/^peekchr(void)$/;"	f	file:	signature:(void)
peekchr	vim/vim/src/regexp.c	/^static int	peekchr(void);$/;"	p	file:	signature:(void)
pen	vim/vim/src/libvterm/src/screen.c	/^  ScreenPen pen;$/;"	m	struct:VTermScreen	file:	access:public
pen	vim/vim/src/libvterm/src/screen.c	/^  ScreenPen pen;$/;"	m	struct:__anon30	file:	access:public
pen	vim/vim/src/libvterm/src/vterm_internal.h	/^    struct VTermPen pen;$/;"	m	struct:VTermState::__anon36	typeref:struct:VTermState::__anon36::VTermPen	access:public
pen	vim/vim/src/libvterm/src/vterm_internal.h	/^  struct VTermPen pen;$/;"	m	struct:VTermState	typeref:struct:VTermState::VTermPen	access:public
pending	vim/vim/src/structs.h	/^    int pending;		\/* error\/interrupt\/exception state *\/$/;"	m	struct:cleanup_stuff	access:public
pendingCommands	vim/vim/src/if_xcmdsrv.c	/^static PendingCommand *pendingCommands = NULL;$/;"	v	file:
pending_scroll_downward	vim/vim/src/libvterm/src/screen.c	/^  int pending_scroll_downward, pending_scroll_rightward;$/;"	m	struct:VTermScreen	file:	access:public
pending_scroll_rightward	vim/vim/src/libvterm/src/screen.c	/^  int pending_scroll_downward, pending_scroll_rightward;$/;"	m	struct:VTermScreen	file:	access:public
pending_scrollrect	vim/vim/src/libvterm/src/screen.c	/^  VTermRect pending_scrollrect;$/;"	m	struct:VTermScreen	file:	access:public
percentage	vim/vim/src/structs.h	/^    int		percentage;	\/* percentage of cell for bar *\/$/;"	m	struct:cursor_entry	access:public
perlpath	vim/vim/src/Makefile	/^	perlpath=`.\/which.sh perl` && sed -e "s+\/usr\/bin\/perl+$$perlpath+" $(TOOLSSOURCE)\/efm_perl.pl >$(DEST_TOOLS)\/efm_perl.pl$/;"	m
perror	vim/vim/src/xxd/xxd.c	/^extern void perror __P((char *));$/;"	p	file:	signature:(char *)
pexpand_cmds	vim/vim/src/ex_cmds2.c	/^static char *pexpand_cmds[] = {$/;"	v	file:
pexpand_what	vim/vim/src/ex_cmds2.c	/^} pexpand_what;$/;"	v	typeref:enum:__anon123	file:
pfnGetFileInformationByHandleEx	vim/vim/src/iscygpty.c	/^typedef BOOL (WINAPI *pfnGetFileInformationByHandleEx)($/;"	t	file:
pg_margin_bottom	vim/vim/src/gui_photon.c	/^static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;$/;"	v	file:
pg_margin_left	vim/vim/src/gui_photon.c	/^static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;$/;"	v	file:
pg_margin_right	vim/vim/src/gui_photon.c	/^static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;$/;"	v	file:
pg_margin_top	vim/vim/src/gui_photon.c	/^static short pg_margin_left, pg_margin_right, pg_margin_top, pg_margin_bottom;$/;"	v	file:
pid	vim/vim/src/if_cscope.h	/^    DWORD	    pid;	\/* PID of the connected cscope process. *\/$/;"	m	struct:csi	access:public
pid	vim/vim/src/if_cscope.h	/^    pid_t	    pid;	\/* PID of the connected cscope process. *\/$/;"	m	struct:csi	access:public
pim	vim/vim/src/regexp_nfa.c	/^    nfa_pim_T	pim;		\/* if pim.result != NFA_PIM_UNUSED: postponed$/;"	m	struct:__anon120	file:	access:public
pim_equal	vim/vim/src/regexp_nfa.c	/^pim_equal(nfa_pim_T *one, nfa_pim_T *two)$/;"	f	file:	signature:(nfa_pim_T *one, nfa_pim_T *two)
pim_equal	vim/vim/src/regexp_nfa.c	/^static int pim_equal(nfa_pim_T *one, nfa_pim_T *two);$/;"	p	file:	signature:(nfa_pim_T *one, nfa_pim_T *two)
pim_info	vim/vim/src/regexp_nfa.c	/^pim_info(nfa_pim_T *pim)$/;"	f	file:	signature:(nfa_pim_T *pim)
pim_info	vim/vim/src/regexp_nfa.c	/^static char *pim_info(nfa_pim_T *pim);$/;"	p	file:	signature:(nfa_pim_T *pim)
pixel	vim/vim/src/xpm/include/simx.h	/^    Pixel pixel;$/;"	m	struct:__anon86	access:public
pixel	vim/vim/src/xpm/include/xpm.h	/^    Pixel pixel;		\/* Color pixel *\/$/;"	m	struct:__anon88	access:public
pixelGeometry	vim/vim/src/gui_dwrite.h	/^    int pixelGeometry;$/;"	m	struct:DWriteRenderingParams	access:public
pixels	vim/vim/src/xpm/include/xpm.h	/^    Pixel *pixels;			\/* List of used color pixels *\/$/;"	m	struct:__anon93	access:public
pixels_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *pixels_cmt;		\/* Comment of the pixels section *\/$/;"	m	struct:__anon92	access:public
pixels_cmt	vim/vim/src/xpm/include/xpm.h	/^    char *pixels_cmt;                   \/* Comment of the pixels section *\/$/;"	m	struct:__anon93	access:public
pixels_to_points	vim/vim/src/gui_w32.c	/^pixels_to_points(int pixels, int vertical)$/;"	f	file:	signature:(int pixels, int vertical)
pixmap_data	vim/vim/src/gui_xmebwp.h	/^    String pixmap_data;$/;"	m	struct:_XmEnhancedButtonPart	access:public
pixmap_depth	vim/vim/src/gui_xmebwp.h	/^    int pixmap_depth;$/;"	m	struct:_XmEnhancedButtonPart	access:public
pixmap_file	vim/vim/src/gui_xmebwp.h	/^    String pixmap_file;$/;"	m	struct:_XmEnhancedButtonPart	access:public
pixmap_height	vim/vim/src/gui_xmebwp.h	/^    Dimension pixmap_height;$/;"	m	struct:_XmEnhancedButtonPart	access:public
pixmap_width	vim/vim/src/gui_xmebwp.h	/^    Dimension pixmap_width;$/;"	m	struct:_XmEnhancedButtonPart	access:public
pixval	vim/vim/src/gui.h	/^    int		pixval;		\/* pixel count of value *\/$/;"	m	struct:GuiScrollbar	access:public
plain_vgetc	vim/vim/src/getchar.c	/^plain_vgetc(void)$/;"	f	signature:(void)
plaintxt	vim/vim/src/blowfish.c	/^    char_u   plaintxt[9];$/;"	m	struct:__anon73	file:	access:public
pldebug	vim/vim/src/integration.c	/^pldebug($/;"	f	signature:( char *fmt, ...)
pldebug	vim/vim/src/integration.c	/^static void pldebug(char *, ...);$/;"	p	file:	signature:(char *, ...)
plines	vim/vim/src/misc1.c	/^plines(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
plines_m_win	vim/vim/src/misc1.c	/^plines_m_win(win_T *wp, linenr_T first, linenr_T last)$/;"	f	signature:(win_T *wp, linenr_T first, linenr_T last)
plines_nofill	vim/vim/src/misc1.c	/^plines_nofill(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
plines_win	vim/vim/src/misc1.c	/^plines_win($/;"	f	signature:( win_T *wp, linenr_T lnum, int winheight)
plines_win_col	vim/vim/src/misc1.c	/^plines_win_col(win_T *wp, linenr_T lnum, long column)$/;"	f	signature:(win_T *wp, linenr_T lnum, long column)
plines_win_nofill	vim/vim/src/misc1.c	/^plines_win_nofill($/;"	f	signature:( win_T *wp, linenr_T lnum, int winheight)
plines_win_nofold	vim/vim/src/misc1.c	/^plines_win_nofold(win_T *wp, linenr_T lnum)$/;"	f	signature:(win_T *wp, linenr_T lnum)
pll_next	vim/vim/src/if_py_both.h	/^    struct pylinkedlist_S	*pll_next;$/;"	m	struct:pylinkedlist_S	typeref:struct:pylinkedlist_S::pylinkedlist_S	access:public
pll_obj	vim/vim/src/if_py_both.h	/^    PyObject			*pll_obj;$/;"	m	struct:pylinkedlist_S	access:public
pll_prev	vim/vim/src/if_py_both.h	/^    struct pylinkedlist_S	*pll_prev;$/;"	m	struct:pylinkedlist_S	typeref:struct:pylinkedlist_S::pylinkedlist_S	access:public
pmain	vim/vim/src/os_w32exe.c	/^static int (_cdecl *pmain)(int, char **);$/;"	v	file:
pname	vim/vim/src/xxd/xxd.c	/^static char *pname;$/;"	v	file:
pointerEvent	vim/vim/src/gui_beval.c	/^pointerEvent(BalloonEval *beval, XEvent *event)$/;"	f	file:	signature:(BalloonEval *beval, XEvent *event)
pointerEvent	vim/vim/src/gui_beval.c	/^static void pointerEvent(BalloonEval *, XEvent *);$/;"	p	file:	signature:(BalloonEval *, XEvent *)
pointerEventEH	vim/vim/src/gui_beval.c	/^pointerEventEH($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XEvent *event, Boolean *unused UNUSED)
pointerEventEH	vim/vim/src/gui_beval.c	/^static void pointerEventEH(Widget, XtPointer, XEvent *, Boolean *);$/;"	p	file:	signature:(Widget, XtPointer, XEvent *, Boolean *)
pointer_block	vim/vim/src/memline.c	/^struct pointer_block$/;"	s	file:
pointer_block::pb_count	vim/vim/src/memline.c	/^    short_u	pb_count;	\/* number of pointers in this block *\/$/;"	m	struct:pointer_block	file:	access:public
pointer_block::pb_count_max	vim/vim/src/memline.c	/^    short_u	pb_count_max;	\/* maximum value for pb_count *\/$/;"	m	struct:pointer_block	file:	access:public
pointer_block::pb_id	vim/vim/src/memline.c	/^    short_u	pb_id;		\/* ID for pointer block: PTR_ID *\/$/;"	m	struct:pointer_block	file:	access:public
pointer_block::pb_pointer	vim/vim/src/memline.c	/^    PTR_EN	pb_pointer[1];	\/* list of pointers to blocks (actually longer)$/;"	m	struct:pointer_block	file:	access:public
pointer_entry	vim/vim/src/memline.c	/^struct pointer_entry$/;"	s	file:
pointer_entry::pe_bnum	vim/vim/src/memline.c	/^    blocknr_T	pe_bnum;	\/* block number *\/$/;"	m	struct:pointer_entry	file:	access:public
pointer_entry::pe_line_count	vim/vim/src/memline.c	/^    linenr_T	pe_line_count;	\/* number of lines in this branch *\/$/;"	m	struct:pointer_entry	file:	access:public
pointer_entry::pe_old_lnum	vim/vim/src/memline.c	/^    linenr_T	pe_old_lnum;	\/* lnum for this block (for recovery) *\/$/;"	m	struct:pointer_entry	file:	access:public
pointer_entry::pe_page_count	vim/vim/src/memline.c	/^    int		pe_page_count;	\/* number of pages in block pe_bnum *\/$/;"	m	struct:pointer_entry	file:	access:public
pointer_event	vim/vim/src/gui_beval.c	/^pointer_event(BalloonEval *beval, int x, int y, unsigned state)$/;"	f	file:	signature:(BalloonEval *beval, int x, int y, unsigned state)
pointer_event	vim/vim/src/gui_beval.c	/^static void pointer_event(BalloonEval *, int, int, unsigned);$/;"	p	file:	signature:(BalloonEval *, int, int, unsigned)
pointer_hidden	vim/vim/src/gui.h	/^    int		pointer_hidden;	    \/* Is the mouse pointer hidden? *\/$/;"	m	struct:Gui	access:public
points_to_pixels	vim/vim/src/gui_mac.c	/^points_to_pixels(char_u *str, char_u **end, int vertical)$/;"	f	file:	signature:(char_u *str, char_u **end, int vertical)
points_to_pixels	vim/vim/src/os_mswin.c	/^points_to_pixels(char_u *str, char_u **end, int vertical, long_i pprinter_dc)$/;"	f	file:	signature:(char_u *str, char_u **end, int vertical, long_i pprinter_dc)
poll	vim/vim/src/auto/osdef.h	/^extern int	poll(struct pollfd *, long, int);$/;"	p	signature:(struct pollfd *, long, int)
pop	vim/vim/src/hangulin.c	44;"	d	file:
pop_current_state	vim/vim/src/syntax.c	/^pop_current_state(void)$/;"	f	file:	signature:(void)
pop_current_state	vim/vim/src/syntax.c	/^static void pop_current_state(void);$/;"	p	file:	signature:(void)
pop_showcmd	vim/vim/src/normal.c	/^pop_showcmd(void)$/;"	f	signature:(void)
populate_module	vim/vim/src/if_py_both.h	/^populate_module(PyObject *m)$/;"	f	signature:(PyObject *m)
popupTrans	vim/vim/src/gui_athena.c	/^static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;$/;"	v	file:
popup_gvim_path	vim/vim/src/uninstal.c	/^popup_gvim_path(char *buf)$/;"	f	file:	signature:(char *buf)
popup_menu_position_func	vim/vim/src/gui_gtk.c	/^popup_menu_position_func(GtkMenu *menu UNUSED,$/;"	f	file:	signature:(GtkMenu *menu UNUSED, gint *x, gint *y, gboolean *push_in UNUSED, gpointer user_data UNUSED)
popup_mode_name	vim/vim/src/menu.c	/^popup_mode_name(char_u *name, int idx)$/;"	f	file:	signature:(char_u *name, int idx)
popup_mode_name	vim/vim/src/menu.c	/^static char_u *popup_mode_name(char_u *name, int idx);$/;"	p	file:	signature:(char_u *name, int idx)
popup_mouse_pos	vim/vim/src/gui_gtk.c	/^static int popup_mouse_pos;$/;"	v	file:
port	vim/vim/src/if_mzsch.c	/^    Scheme_Object   *port;$/;"	m	struct:__anon10	file:	access:public
pos	vim/vim/src/libvterm/src/vterm_internal.h	/^    VTermPos pos;$/;"	m	struct:VTermState::__anon36	access:public
pos	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermPos pos;$/;"	m	struct:VTermState	access:public
pos	vim/vim/src/regexp.c	/^	lpos_T	pos;	\/* reginput pos, for multi-line regexp *\/$/;"	m	union:__anon125::__anon126	file:	access:public
pos	vim/vim/src/regexp.c	/^	lpos_T	pos;$/;"	m	union:__anon127::__anon128	file:	access:public
pos	vim/vim/src/regexp_nfa.c	/^	lpos_T	pos;$/;"	m	union:nfa_pim_S::__anon119	file:	access:public
pos	vim/vim/src/structs.h	/^    llpos_T	pos[MAXPOSMATCH];	\/* array of positions *\/$/;"	m	struct:posmatch	access:public
pos	vim/vim/src/structs.h	/^    posmatch_T	pos;	    \/* position matches *\/$/;"	m	struct:matchitem	access:public
pos2off	vim/vim/src/netbeans.c	/^pos2off(buf_T *buf, pos_T *pos)$/;"	f	file:	signature:(buf_T *buf, pos_T *pos)
pos2off	vim/vim/src/netbeans.c	/^static long pos2off(buf_T *, pos_T *);$/;"	p	file:	signature:(buf_T *, pos_T *)
pos_T	vim/vim/src/structs.h	/^} pos_T;$/;"	t	typeref:struct:__anon161
position_cursor	vim/vim/src/terminal.c	/^position_cursor(win_T *wp, VTermPos *pos)$/;"	f	file:	signature:(win_T *wp, VTermPos *pos)
posmatch	vim/vim/src/structs.h	/^struct posmatch$/;"	s
posmatch::botlnum	vim/vim/src/structs.h	/^    linenr_T	botlnum;		\/* bottom buffer line *\/$/;"	m	struct:posmatch	access:public
posmatch::cur	vim/vim/src/structs.h	/^    int		cur;			\/* internal position counter *\/$/;"	m	struct:posmatch	access:public
posmatch::pos	vim/vim/src/structs.h	/^    llpos_T	pos[MAXPOSMATCH];	\/* array of positions *\/$/;"	m	struct:posmatch	access:public
posmatch::toplnum	vim/vim/src/structs.h	/^    linenr_T	toplnum;		\/* top buffer line *\/$/;"	m	struct:posmatch	access:public
posmatch_T	vim/vim/src/structs.h	/^typedef struct posmatch posmatch_T;$/;"	t	typeref:struct:posmatch
post2nfa	vim/vim/src/regexp_nfa.c	/^post2nfa(int *postfix, int *end, int nfa_calc_size)$/;"	f	file:	signature:(int *postfix, int *end, int nfa_calc_size)
post2nfa	vim/vim/src/regexp_nfa.c	/^static nfa_state_T *post2nfa(int *postfix, int *end, int nfa_calc_size);$/;"	p	file:	signature:(int *postfix, int *end, int nfa_calc_size)
post_chdir	vim/vim/src/ex_docmd.c	/^post_chdir(int local)$/;"	f	signature:(int local)
post_end	vim/vim/src/regexp_nfa.c	/^static int *post_end;$/;"	v	file:
post_ptr	vim/vim/src/regexp_nfa.c	/^static int *post_ptr;$/;"	v	file:
post_start	vim/vim/src/regexp_nfa.c	/^static int *post_start;  \/* holds the postfix form of r.e. *\/$/;"	v	file:
postpone_keycommand	vim/vim/src/netbeans.c	/^postpone_keycommand(char_u *keystr)$/;"	f	file:	signature:(char_u *keystr)
postpone_keycommand	vim/vim/src/netbeans.c	/^static void postpone_keycommand(char_u *keystr);$/;"	p	file:	signature:(char_u *keystr)
postponed_mouseshape	vim/vim/src/globals.h	/^EXTERN int	postponed_mouseshape INIT(= FALSE); \/* postponed updating the$/;"	v
postponed_split	vim/vim/src/globals.h	/^EXTERN int	postponed_split INIT(= 0);  \/* for CTRL-W CTRL-] command *\/$/;"	v
postponed_split_flags	vim/vim/src/globals.h	/^EXTERN int	postponed_split_flags INIT(= 0);  \/* args for win_split() *\/$/;"	v
postponed_split_tab	vim/vim/src/globals.h	/^EXTERN int	postponed_split_tab INIT(= 0);  \/* cmdmod.tab *\/$/;"	v
ppath	vim/vim/src/if_cscope.h	/^    char *	    ppath;	\/* path to prepend (the -P option) *\/$/;"	m	struct:csi	access:public
pre_commands	vim/vim/src/structs.h	/^    char_u	*pre_commands[MAX_ARG_CMDS]; \/* commands from --cmd argument *\/$/;"	m	struct:__anon210	access:public
pre_whitesp	vim/vim/src/ops.c	/^    int		pre_whitesp;	\/* screen cols of ws before block *\/$/;"	m	struct:block_def	file:	access:public
pre_whitesp_c	vim/vim/src/ops.c	/^    int		pre_whitesp_c;	\/* chars of ws before block *\/$/;"	m	struct:block_def	file:	access:public
prechar	vim/vim/src/structs.h	/^    int		prechar;	\/* prefix character (optional, always 'g') *\/$/;"	m	struct:cmdarg_S	access:public
preedit_end_col	vim/vim/src/globals.h	/^EXTERN colnr_T		preedit_end_col INIT(= MAXCOL);$/;"	v
preedit_get_status	vim/vim/src/mbyte.c	/^preedit_get_status(void)$/;"	f	signature:(void)
preedit_is_active	vim/vim/src/mbyte.c	/^static int preedit_is_active   = FALSE;$/;"	v	file:
preedit_start_col	vim/vim/src/globals.h	/^EXTERN colnr_T		preedit_start_col INIT(= MAXCOL);$/;"	v
prefix	vim/vim/src/auto/config.mk	/^prefix		= \/usr$/;"	m
prefix	vim/vim/src/quickfix.c	/^    char_u	    prefix;	\/* prefix of this format line: *\/$/;"	m	struct:efm_S	file:	access:public
prep_exarg	vim/vim/src/fileio.c	/^prep_exarg(exarg_T *eap, buf_T *buf)$/;"	f	signature:(exarg_T *eap, buf_T *buf)
prep_redo	vim/vim/src/normal.c	/^prep_redo($/;"	f	file:	signature:( int regname, long num, int cmd1, int cmd2, int cmd3, int cmd4, int cmd5)
prep_redo	vim/vim/src/normal.c	/^static void	prep_redo(int regname, long, int, int, int, int, int);$/;"	p	file:	signature:(int regname, long, int, int, int, int, int)
prep_redo_cmd	vim/vim/src/normal.c	/^prep_redo_cmd(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
prep_redo_cmd	vim/vim/src/normal.c	/^static void	prep_redo_cmd(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
prepare_assert_error	vim/vim/src/eval.c	/^prepare_assert_error(garray_T *gap)$/;"	f	signature:(garray_T *gap)
prepare_help_buffer	vim/vim/src/ex_cmds.c	/^prepare_help_buffer(void)$/;"	f	file:	signature:(void)
prepare_help_buffer	vim/vim/src/ex_cmds.c	/^static void prepare_help_buffer(void);$/;"	p	file:	signature:(void)
prepare_pats	vim/vim/src/tag.c	/^prepare_pats(pat_T *pats, int has_re)$/;"	f	file:	signature:(pat_T *pats, int has_re)
prepare_pats	vim/vim/src/tag.c	/^static void prepare_pats(pat_T *pats, int has_re);$/;"	p	file:	signature:(pat_T *pats, int has_re)
prepare_search_hl	vim/vim/src/screen.c	/^prepare_search_hl(win_T *wp, linenr_T lnum)$/;"	f	file:	signature:(win_T *wp, linenr_T lnum)
prepare_search_hl	vim/vim/src/screen.c	/^static void prepare_search_hl(win_T *wp, linenr_T lnum);$/;"	p	file:	signature:(win_T *wp, linenr_T lnum)
prepare_server	vim/vim/src/main.c	/^prepare_server(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
prepare_server	vim/vim/src/main.c	/^static void prepare_server(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
prepare_tagpreview	vim/vim/src/ex_cmds.c	/^prepare_tagpreview($/;"	f	signature:( int undo_sync)
prepare_to_exit	vim/vim/src/misc1.c	/^prepare_to_exit(void)$/;"	f	signature:(void)
prepare_viminfo_history	vim/vim/src/ex_getln.c	/^prepare_viminfo_history(int asklen, int writing)$/;"	f	signature:(int asklen, int writing)
prepare_viminfo_marks	vim/vim/src/mark.c	/^prepare_viminfo_marks(void)$/;"	f	signature:(void)
prepare_viminfo_registers	vim/vim/src/ops.c	/^prepare_viminfo_registers(void)$/;"	f	signature:(void)
prepare_vimvar	vim/vim/src/eval.c	/^prepare_vimvar(int idx, typval_T *save_tv)$/;"	f	file:	signature:(int idx, typval_T *save_tv)
preprocs_left	vim/vim/src/ops.c	/^preprocs_left(void)$/;"	f	signature:(void)
present	vim/vim/src/structs.h	/^    int		present;$/;"	m	struct:__anon204	access:public
preserve_exit	vim/vim/src/misc1.c	/^preserve_exit(void)$/;"	f	signature:(void)
prev	vim/vim/src/if_xcmdsrv.c	/^    struct x_cmdqueue	*prev;$/;"	m	struct:x_cmdqueue	typeref:struct:x_cmdqueue::x_cmdqueue	file:	access:public
prev	vim/vim/src/netbeans.c	/^    struct keyqueue *prev;$/;"	m	struct:keyqueue	typeref:struct:keyqueue::keyqueue	file:	access:public
prev	vim/vim/src/structs.h	/^    signlist_T  *prev;		\/* previous entry -- for easy reordering *\/$/;"	m	struct:signlist	access:public
prev	vim/vim/src/structs.h	/^    struct ht_stack_S	*prev;$/;"	m	struct:ht_stack_S	typeref:struct:ht_stack_S::ht_stack_S	access:public
prev	vim/vim/src/structs.h	/^    struct list_stack_S	*prev;$/;"	m	struct:list_stack_S	typeref:struct:list_stack_S::list_stack_S	access:public
prev	vim/vim/src/vim.h	/^    pos_T	prev;		\/* Previous position *\/$/;"	m	struct:VimClipboard	access:public
prev_at_start	vim/vim/src/regexp.c	/^     int	prev_at_start;$/;"	m	struct:__anon124	file:	access:public
prev_at_start	vim/vim/src/regexp.c	/^static int	prev_at_start;  \/* True when on the second character *\/$/;"	v	file:
prev_bg_color	vim/vim/src/gui_x11.c	/^static guicolor_T	prev_bg_color = INVALCOLOR;$/;"	v	file:
prev_ccline	vim/vim/src/ex_getln.c	/^static struct cmdline_info  prev_ccline;$/;"	v	typeref:struct:cmdline_info	file:
prev_ccline_used	vim/vim/src/ex_getln.c	/^static int		    prev_ccline_used = FALSE;$/;"	v	file:
prev_count0	vim/vim/src/structs.h	/^    long	prev_count0;	\/* ca.count0 saved for K_CURSORHOLD *\/$/;"	m	struct:oparg_S	access:public
prev_dir	vim/vim/src/ex_docmd.c	/^static char_u	*prev_dir = NULL;$/;"	v	file:
prev_fg_color	vim/vim/src/gui_x11.c	/^static guicolor_T	prev_fg_color = INVALCOLOR;$/;"	v	file:
prev_lnum	vim/vim/src/fold.c	/^static linenr_T prev_lnum = 0;$/;"	v	file:
prev_lnum_lvl	vim/vim/src/fold.c	/^static int prev_lnum_lvl = -1;$/;"	v	file:
prev_opcount	vim/vim/src/structs.h	/^    long	prev_opcount;	\/* ca.opcount saved for K_CURSORHOLD *\/$/;"	m	struct:oparg_S	access:public
prev_sp_color	vim/vim/src/gui_x11.c	/^static guicolor_T	prev_sp_color = INVALCOLOR;$/;"	v	file:
prev_timeval	vim/vim/src/main.c	/^static struct timeval	prev_timeval;$/;"	v	typeref:struct:timeval	file:
prev_which_scrollbars	vim/vim/src/gui.c	/^static int	prev_which_scrollbars[3];$/;"	v	file:
prev_wrap	vim/vim/src/gui.h	/^    int		prev_wrap;	    \/* For updating the horizontal scrollbar *\/$/;"	m	struct:Gui	access:public
prevchr	vim/vim/src/regexp.c	/^     int	prevchr;$/;"	m	struct:__anon124	file:	access:public
prevchr	vim/vim/src/regexp.c	/^static int	prevchr;$/;"	v	file:
prevchr_len	vim/vim/src/regexp.c	/^     int	prevchr_len;$/;"	m	struct:__anon124	file:	access:public
prevchr_len	vim/vim/src/regexp.c	/^static int	prevchr_len;	\/* byte length of previous char *\/$/;"	v	file:
prevcmd	vim/vim/src/ex_cmds.c	/^static char_u	*prevcmd = NULL;	\/* the previous command *\/$/;"	v	file:
previous_funccal	vim/vim/src/userfunc.c	/^funccall_T *previous_funccal = NULL;$/;"	v
prevprevchr	vim/vim/src/regexp.c	/^     int	prevprevchr;$/;"	m	struct:__anon124	file:	access:public
prevprevchr	vim/vim/src/regexp.c	/^static int	prevprevchr;	\/* previous-previous character *\/$/;"	v	file:
prevwin	vim/vim/src/globals.h	/^EXTERN win_T	*prevwin INIT(= NULL);	\/* previous window *\/$/;"	v
prim	vim/vim/src/if_mzsch.c	/^    Scheme_Closed_Prim	*prim;$/;"	m	struct:__anon9	file:	access:public
primitive	vim/vim/src/gui_xmebwp.h	/^    XmPrimitivePart primitive;$/;"	m	struct:_XmEnhancedButtonRec	access:public
primitive_class	vim/vim/src/gui_xmebwp.h	/^    XmPrimitiveClassPart primitive_class;$/;"	m	struct:__anon4	access:public
prims	vim/vim/src/if_mzsch.c	/^static Vim_Prim prims[]=$/;"	v	file:
print_cmd_line_help	vim/vim/src/dosinst.c	/^print_cmd_line_help(void)$/;"	f	file:	signature:(void)
print_line	vim/vim/src/ex_cmds.c	/^print_line(linenr_T lnum, int use_number, int list)$/;"	f	signature:(linenr_T lnum, int use_number, int list)
print_line_no_prefix	vim/vim/src/ex_cmds.c	/^print_line_no_prefix($/;"	f	signature:( linenr_T lnum, int use_number, int list)
print_pos	vim/vim/src/hardcopy.c	/^    int		print_pos;	    \/* virtual column for computing TABs *\/$/;"	m	struct:__anon212	file:	access:public
print_read_msg	vim/vim/src/netbeans.c	/^print_read_msg(nbbuf_T *buf)$/;"	f	file:	signature:(nbbuf_T *buf)
print_read_msg	vim/vim/src/netbeans.c	/^static void print_read_msg(nbbuf_T *buf);$/;"	p	file:	signature:(nbbuf_T *buf)
print_save_msg	vim/vim/src/netbeans.c	/^print_save_msg(nbbuf_T *buf, off_T nchars)$/;"	f	file:	signature:(nbbuf_T *buf, off_T nchars)
print_save_msg	vim/vim/src/netbeans.c	/^static void print_save_msg(nbbuf_T *buf, off_T nchars);$/;"	p	file:	signature:(nbbuf_T *buf, off_T nchars)
print_windows_error	vim/vim/src/gui_w32.c	/^print_windows_error(void)$/;"	f	file:	signature:(void)
printdigraph	vim/vim/src/digraph.c	/^printdigraph(digr_T *dp)$/;"	f	file:	signature:(digr_T *dp)
printdigraph	vim/vim/src/digraph.c	/^static void printdigraph(digr_T *);$/;"	p	file:	signature:(digr_T *)
printer_opts	vim/vim/src/globals.h	/^EXTERN option_table_T printer_opts[OPT_PRINT_NUM_OPTIONS]$/;"	v
printer_page_num	vim/vim/src/globals.h	/^EXTERN linenr_T printer_page_num;$/;"	v
priority	vim/vim/src/structs.h	/^    int		priority;	    \/* Menu order priority *\/$/;"	m	struct:VimMenu	access:public
priority	vim/vim/src/structs.h	/^    int		priority;   \/* match priority *\/$/;"	m	struct:matchitem	access:public
process_compflags	vim/vim/src/spellfile.c	/^process_compflags($/;"	f	file:	signature:( spellinfo_T *spin, afffile_T *aff, char_u *compflags)
process_compflags	vim/vim/src/spellfile.c	/^static void process_compflags(spellinfo_T *spin, afffile_T *aff, char_u *compflags);$/;"	p	file:	signature:(spellinfo_T *spin, afffile_T *aff, char_u *compflags)
process_env	vim/vim/src/main.c	/^process_env($/;"	f	signature:( char_u *env, int is_viminit)
process_menuItem	vim/vim/src/integration.c	/^process_menuItem($/;"	f	file:	signature:( char *cmd)
process_menuItem	vim/vim/src/integration.c	/^static void process_menuItem(char *);$/;"	p	file:	signature:(char *)
process_message	vim/vim/src/gui_w32.c	/^process_message(void)$/;"	f	file:	signature:(void)
process_motion_notify	vim/vim/src/gui_gtk_x11.c	/^process_motion_notify(int x, int y, GdkModifierType state)$/;"	f	file:	signature:(int x, int y, GdkModifierType state)
process_still_running	vim/vim/src/memline.c	/^static int process_still_running;$/;"	v	file:
process_toolbarButton	vim/vim/src/integration.c	/^process_toolbarButton($/;"	f	file:	signature:( char *cmd)
process_toolbarButton	vim/vim/src/integration.c	/^static void process_toolbarButton(char *);$/;"	p	file:	signature:(char *)
prof_child	vim/vim/src/structs.h	/^    proftime_T	prof_child;	\/* time spent in a child *\/$/;"	m	struct:funccall_S	access:public
prof_child_enter	vim/vim/src/userfunc.c	/^prof_child_enter($/;"	f	signature:( proftime_T *tm)
prof_child_exit	vim/vim/src/userfunc.c	/^prof_child_exit($/;"	f	signature:( proftime_T *tm)
prof_def_func	vim/vim/src/ex_cmds2.c	/^prof_def_func(void)$/;"	f	signature:(void)
prof_func_line	vim/vim/src/userfunc.c	/^prof_func_line($/;"	f	file:	signature:( FILE *fd, int count, proftime_T *total, proftime_T *self, int prefer_self)
prof_func_line	vim/vim/src/userfunc.c	/^static void prof_func_line(FILE *fd, int count, proftime_T *total, proftime_T *self, int prefer_self);$/;"	p	file:	signature:(FILE *fd, int count, proftime_T *total, proftime_T *self, int prefer_self)
prof_ga	vim/vim/src/ex_cmds2.c	/^static garray_T prof_ga = {0, 0, sizeof(struct debuggy), 4, NULL};$/;"	v	file:
prof_inchar_enter	vim/vim/src/ex_cmds2.c	/^prof_inchar_enter(void)$/;"	f	signature:(void)
prof_inchar_exit	vim/vim/src/ex_cmds2.c	/^prof_inchar_exit(void)$/;"	f	signature:(void)
prof_self_cmp	vim/vim/src/userfunc.c	/^	prof_self_cmp(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
prof_self_cmp	vim/vim/src/userfunc.c	/^prof_self_cmp(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
prof_sort_list	vim/vim/src/userfunc.c	/^prof_sort_list($/;"	f	file:	signature:( FILE *fd, ufunc_T **sorttab, int st_len, char *title, int prefer_self)
prof_sort_list	vim/vim/src/userfunc.c	/^static void prof_sort_list(FILE *fd, ufunc_T **sorttab, int st_len, char *title, int prefer_self);$/;"	p	file:	signature:(FILE *fd, ufunc_T **sorttab, int st_len, char *title, int prefer_self)
prof_total_cmp	vim/vim/src/userfunc.c	/^	prof_total_cmp(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
prof_total_cmp	vim/vim/src/userfunc.c	/^prof_total_cmp(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
prof_wait_time	vim/vim/src/ex_cmds2.c	/^static proftime_T prof_wait_time;$/;"	v	file:
profile_add	vim/vim/src/ex_cmds2.c	/^profile_add(proftime_T *tm, proftime_T *tm2)$/;"	f	signature:(proftime_T *tm, proftime_T *tm2)
profile_cmp	vim/vim/src/ex_cmds2.c	/^profile_cmp(const proftime_T *tm1, const proftime_T *tm2)$/;"	f	signature:(const proftime_T *tm1, const proftime_T *tm2)
profile_divide	vim/vim/src/ex_cmds2.c	/^profile_divide(proftime_T *tm, int count, proftime_T *tm2)$/;"	f	signature:(proftime_T *tm, int count, proftime_T *tm2)
profile_dump	vim/vim/src/ex_cmds2.c	/^profile_dump(void)$/;"	f	signature:(void)
profile_end	vim/vim/src/ex_cmds2.c	/^profile_end(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
profile_equal	vim/vim/src/ex_cmds2.c	/^profile_equal(proftime_T *tm1, proftime_T *tm2)$/;"	f	signature:(proftime_T *tm1, proftime_T *tm2)
profile_float	vim/vim/src/ex_cmds2.c	/^profile_float(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
profile_fname	vim/vim/src/ex_cmds2.c	/^static char_u	*profile_fname = NULL;$/;"	v	file:
profile_get_wait	vim/vim/src/ex_cmds2.c	/^profile_get_wait(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
profile_msg	vim/vim/src/ex_cmds2.c	/^profile_msg(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
profile_passed_limit	vim/vim/src/ex_cmds2.c	/^profile_passed_limit(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
profile_self	vim/vim/src/ex_cmds2.c	/^profile_self(proftime_T *self, proftime_T *total, proftime_T *children)$/;"	f	signature:(proftime_T *self, proftime_T *total, proftime_T *children)
profile_setlimit	vim/vim/src/ex_cmds2.c	/^profile_setlimit(long msec, proftime_T *tm)$/;"	f	signature:(long msec, proftime_T *tm)
profile_start	vim/vim/src/ex_cmds2.c	/^profile_start(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
profile_sub	vim/vim/src/ex_cmds2.c	/^profile_sub(proftime_T *tm, proftime_T *tm2)$/;"	f	signature:(proftime_T *tm, proftime_T *tm2)
profile_sub_wait	vim/vim/src/ex_cmds2.c	/^profile_sub_wait(proftime_T *tm, proftime_T *tma)$/;"	f	signature:(proftime_T *tm, proftime_T *tma)
profile_zero	vim/vim/src/ex_cmds2.c	/^profile_zero(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
proftime_T	vim/vim/src/vim.h	/^typedef LARGE_INTEGER proftime_T;$/;"	t
proftime_T	vim/vim/src/vim.h	/^typedef int proftime_T;	    \/* dummy for function prototypes *\/$/;"	t
proftime_T	vim/vim/src/vim.h	/^typedef struct timeval proftime_T;$/;"	t	typeref:struct:timeval
prog	vim/vim/src/quickfix.c	/^    regprog_T	    *prog;	\/* pre-formatted part of 'errorformat' *\/$/;"	m	struct:efm_S	file:	access:public
prog_magic_wrong	vim/vim/src/regexp.c	/^prog_magic_wrong(void)$/;"	f	file:	signature:(void)
prog_magic_wrong	vim/vim/src/regexp.c	/^static int	prog_magic_wrong(void);$/;"	p	file:	signature:(void)
program	vim/vim/src/regexp.h	/^    char_u		program[1];	\/* actually longer.. *\/$/;"	m	struct:__anon143	access:public
prompt_for_number	vim/vim/src/misc1.c	/^prompt_for_number(int *mouse_used)$/;"	f	signature:(int *mouse_used)
prop	vim/vim/src/mbyte.c	/^{   char *name;		int prop;		int codepage;}$/;"	m	struct:__anon1	file:	access:public
propInfo	vim/vim/src/if_xcmdsrv.c	/^    char_u		*propInfo;$/;"	m	struct:x_cmdqueue	file:	access:public
property_event	vim/vim/src/gui_gtk_x11.c	/^property_event(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventProperty *event, gpointer data UNUSED)
proportional	vim/vim/src/gui_xmdlg.c	/^proportional(char *font)$/;"	f	file:	signature:(char *font)
protected_cell	vim/vim/src/libvterm/include/vterm.h	/^  unsigned int    protected_cell:1;  \/* DECSCA-protected against DECSEL\/DECSED *\/$/;"	m	struct:__anon56	access:public
protected_cell	vim/vim/src/libvterm/src/screen.c	/^  unsigned int protected_cell : 1;$/;"	m	struct:__anon29	file:	access:public
protected_cell	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int protected_cell : 1;$/;"	m	struct:VTermState	access:public
prototypes	vim/vim/src/auto/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prt_add_resource	vim/vim/src/hardcopy.c	/^prt_add_resource(struct prt_ps_resource_S *resource)$/;"	f	file:	signature:(struct prt_ps_resource_S *resource)
prt_add_resource	vim/vim/src/hardcopy.c	/^static int prt_add_resource(struct prt_ps_resource_S *resource);$/;"	p	file:	signature:(struct prt_ps_resource_S *resource)
prt_ascii_encoding	vim/vim/src/hardcopy.c	/^static char *prt_ascii_encoding;$/;"	v	file:
prt_attribute_change	vim/vim/src/hardcopy.c	/^static int prt_attribute_change;$/;"	v	file:
prt_bgcol	vim/vim/src/hardcopy.c	/^static int prt_bgcol;$/;"	v	file:
prt_bgcol_offset	vim/vim/src/hardcopy.c	/^static float prt_bgcol_offset;$/;"	v	file:
prt_bottom_margin	vim/vim/src/hardcopy.c	/^static float prt_bottom_margin;$/;"	v	file:
prt_bufsiz	vim/vim/src/hardcopy.c	/^static int prt_bufsiz;$/;"	v	file:
prt_build_cid_fontname	vim/vim/src/hardcopy.c	/^prt_build_cid_fontname(int font, char_u *name, int name_len)$/;"	f	file:	signature:(int font, char_u *name, int name_len)
prt_build_cid_fontname	vim/vim/src/hardcopy.c	/^static int prt_build_cid_fontname(int font, char_u *name, int name_len);$/;"	p	file:	signature:(int font, char_u *name, int name_len)
prt_char_width	vim/vim/src/hardcopy.c	/^static float prt_char_width;$/;"	v	file:
prt_check_resource	vim/vim/src/hardcopy.c	/^prt_check_resource(struct prt_ps_resource_S *resource, char_u *version)$/;"	f	file:	signature:(struct prt_ps_resource_S *resource, char_u *version)
prt_check_resource	vim/vim/src/hardcopy.c	/^static int prt_check_resource(struct prt_ps_resource_S *resource, char_u *version);$/;"	p	file:	signature:(struct prt_ps_resource_S *resource, char_u *version)
prt_cmap	vim/vim/src/hardcopy.c	/^static char prt_cmap[80];$/;"	v	file:
prt_collate	vim/vim/src/hardcopy.c	/^static int prt_collate;$/;"	v	file:
prt_conv	vim/vim/src/hardcopy.c	/^static vimconv_T prt_conv;$/;"	v	file:
prt_custom_cmap	vim/vim/src/hardcopy.c	/^static int prt_custom_cmap;$/;"	v	file:
prt_def_cidfont	vim/vim/src/hardcopy.c	/^prt_def_cidfont(char *new_name, int height, char *cidfont)$/;"	f	file:	signature:(char *new_name, int height, char *cidfont)
prt_def_cidfont	vim/vim/src/hardcopy.c	/^static void prt_def_cidfont(char *new_name, int height, char *cidfont);$/;"	p	file:	signature:(char *new_name, int height, char *cidfont)
prt_def_font	vim/vim/src/hardcopy.c	/^prt_def_font($/;"	f	file:	signature:( char *new_name, char *encoding, int height, char *font)
prt_def_font	vim/vim/src/hardcopy.c	/^static void prt_def_font(char *new_name, char *encoding, int height, char *font);$/;"	p	file:	signature:(char *new_name, char *encoding, int height, char *font)
prt_def_var	vim/vim/src/hardcopy.c	/^prt_def_var(char *name, double value, int prec)$/;"	f	file:	signature:(char *name, double value, int prec)
prt_def_var	vim/vim/src/hardcopy.c	/^static void prt_def_var(char *name, double value, int prec);$/;"	p	file:	signature:(char *name, double value, int prec)
prt_dlg	vim/vim/src/os_mswin.c	/^static PRINTDLG		prt_dlg;$/;"	v	file:
prt_do_bgcol	vim/vim/src/hardcopy.c	/^static int prt_do_bgcol;$/;"	v	file:
prt_do_conv	vim/vim/src/hardcopy.c	/^static int prt_do_conv;$/;"	v	file:
prt_do_moveto	vim/vim/src/hardcopy.c	/^static int prt_do_moveto;$/;"	v	file:
prt_do_underline	vim/vim/src/hardcopy.c	/^static int prt_do_underline;$/;"	v	file:
prt_dsc_atend	vim/vim/src/hardcopy.c	2082;"	d	file:
prt_dsc_comment_S	vim/vim/src/hardcopy.c	/^struct prt_dsc_comment_S$/;"	s	file:
prt_dsc_comment_S::len	vim/vim/src/hardcopy.c	/^    int		len;$/;"	m	struct:prt_dsc_comment_S	file:	access:public
prt_dsc_comment_S::string	vim/vim/src/hardcopy.c	/^    char	*string;$/;"	m	struct:prt_dsc_comment_S	file:	access:public
prt_dsc_comment_S::type	vim/vim/src/hardcopy.c	/^    int		type;$/;"	m	struct:prt_dsc_comment_S	file:	access:public
prt_dsc_docmedia	vim/vim/src/hardcopy.c	/^prt_dsc_docmedia($/;"	f	file:	signature:( char *paper_name, double width, double height, double weight, char *colour, char *type)
prt_dsc_docmedia	vim/vim/src/hardcopy.c	/^static void prt_dsc_docmedia(char *paper_name, double width, double height, double weight, char *colour, char *type);$/;"	p	file:	signature:(char *paper_name, double width, double height, double weight, char *colour, char *type)
prt_dsc_font_resource	vim/vim/src/hardcopy.c	/^prt_dsc_font_resource(char *resource, struct prt_ps_font_S *ps_font)$/;"	f	file:	signature:(char *resource, struct prt_ps_font_S *ps_font)
prt_dsc_font_resource	vim/vim/src/hardcopy.c	/^static void prt_dsc_font_resource(char *resource, struct prt_ps_font_S *ps_font);$/;"	p	file:	signature:(char *resource, struct prt_ps_font_S *ps_font)
prt_dsc_ints	vim/vim/src/hardcopy.c	/^prt_dsc_ints(char *comment, int count, int *ints)$/;"	f	file:	signature:(char *comment, int count, int *ints)
prt_dsc_ints	vim/vim/src/hardcopy.c	/^static void prt_dsc_ints(char *comment, int count, int *ints);$/;"	p	file:	signature:(char *comment, int count, int *ints)
prt_dsc_line_S	vim/vim/src/hardcopy.c	/^struct prt_dsc_line_S$/;"	s	file:
prt_dsc_line_S::len	vim/vim/src/hardcopy.c	/^    int		len;$/;"	m	struct:prt_dsc_line_S	file:	access:public
prt_dsc_line_S::string	vim/vim/src/hardcopy.c	/^    char_u	*string;$/;"	m	struct:prt_dsc_line_S	file:	access:public
prt_dsc_line_S::type	vim/vim/src/hardcopy.c	/^    int		type;$/;"	m	struct:prt_dsc_line_S	file:	access:public
prt_dsc_noarg	vim/vim/src/hardcopy.c	/^prt_dsc_noarg(char *comment)$/;"	f	file:	signature:(char *comment)
prt_dsc_noarg	vim/vim/src/hardcopy.c	/^static void prt_dsc_noarg(char *comment);$/;"	p	file:	signature:(char *comment)
prt_dsc_requirements	vim/vim/src/hardcopy.c	/^prt_dsc_requirements($/;"	f	file:	signature:( int duplex, int tumble, int collate, int color, int num_copies)
prt_dsc_requirements	vim/vim/src/hardcopy.c	/^static void prt_dsc_requirements(int duplex, int tumble, int collate, int color, int num_copies);$/;"	p	file:	signature:(int duplex, int tumble, int collate, int color, int num_copies)
prt_dsc_resources	vim/vim/src/hardcopy.c	/^prt_dsc_resources($/;"	f	file:	signature:( char *comment, char *type, char *string)
prt_dsc_resources	vim/vim/src/hardcopy.c	/^static void prt_dsc_resources(char *comment, char *type, char *strings);$/;"	p	file:	signature:(char *comment, char *type, char *strings)
prt_dsc_start	vim/vim/src/hardcopy.c	/^prt_dsc_start(void)$/;"	f	file:	signature:(void)
prt_dsc_start	vim/vim/src/hardcopy.c	/^static void prt_dsc_start(void);$/;"	p	file:	signature:(void)
prt_dsc_table	vim/vim/src/hardcopy.c	/^static struct prt_dsc_comment_S prt_dsc_table[] =$/;"	v	typeref:struct:prt_dsc_comment_S	file:
prt_dsc_text	vim/vim/src/hardcopy.c	/^prt_dsc_text(char *comment, char *text)$/;"	f	file:	signature:(char *comment, char *text)
prt_dsc_text	vim/vim/src/hardcopy.c	/^static void prt_dsc_text(char *comment, char *text);$/;"	p	file:	signature:(char *comment, char *text)
prt_dsc_textline	vim/vim/src/hardcopy.c	/^prt_dsc_textline(char *comment, char *text)$/;"	f	file:	signature:(char *comment, char *text)
prt_dsc_textline	vim/vim/src/hardcopy.c	/^static void prt_dsc_textline(char *comment, char *text);$/;"	p	file:	signature:(char *comment, char *text)
prt_dup_cidfont	vim/vim/src/hardcopy.c	/^prt_dup_cidfont(char *original_name, char *new_name)$/;"	f	file:	signature:(char *original_name, char *new_name)
prt_dup_cidfont	vim/vim/src/hardcopy.c	/^static void prt_dup_cidfont(char *original_name, char *new_name);$/;"	p	file:	signature:(char *original_name, char *new_name)
prt_duplex	vim/vim/src/hardcopy.c	/^static int prt_duplex;$/;"	v	file:
prt_fgcol	vim/vim/src/hardcopy.c	/^static int prt_fgcol;$/;"	v	file:
prt_file_error	vim/vim/src/hardcopy.c	/^static int prt_file_error;$/;"	v	file:
prt_find_resource	vim/vim/src/hardcopy.c	/^prt_find_resource(char *name, struct prt_ps_resource_S *resource)$/;"	f	file:	signature:(char *name, struct prt_ps_resource_S *resource)
prt_find_resource	vim/vim/src/hardcopy.c	/^static int prt_find_resource(char *name, struct prt_ps_resource_S *resource);$/;"	p	file:	signature:(char *name, struct prt_ps_resource_S *resource)
prt_first_line_height	vim/vim/src/hardcopy.c	/^static float prt_first_line_height;$/;"	v	file:
prt_flush_buffer	vim/vim/src/hardcopy.c	/^prt_flush_buffer(void)$/;"	f	file:	signature:(void)
prt_flush_buffer	vim/vim/src/hardcopy.c	/^static void prt_flush_buffer(void);$/;"	p	file:	signature:(void)
prt_font	vim/vim/src/hardcopy.c	/^static int prt_font;$/;"	v	file:
prt_font_handles	vim/vim/src/os_mswin.c	/^static HFONT		prt_font_handles[2][2][2];$/;"	v	file:
prt_font_metrics	vim/vim/src/hardcopy.c	/^prt_font_metrics(int font_scale)$/;"	f	file:	signature:(int font_scale)
prt_font_metrics	vim/vim/src/hardcopy.c	/^static void prt_font_metrics(int font_scale);$/;"	p	file:	signature:(int font_scale)
prt_get_attr	vim/vim/src/hardcopy.c	/^prt_get_attr($/;"	f	file:	signature:( int hl_id, prt_text_attr_T *pattr, int modec)
prt_get_attr	vim/vim/src/hardcopy.c	/^static void prt_get_attr(int hl_id, prt_text_attr_T* pattr, int modec);$/;"	p	file:	signature:(int hl_id, prt_text_attr_T* pattr, int modec)
prt_get_cpl	vim/vim/src/hardcopy.c	/^prt_get_cpl(void)$/;"	f	file:	signature:(void)
prt_get_cpl	vim/vim/src/hardcopy.c	/^static int prt_get_cpl(void);$/;"	p	file:	signature:(void)
prt_get_cpl	vim/vim/src/os_mswin.c	/^prt_get_cpl(void)$/;"	f	file:	signature:(void)
prt_get_lpp	vim/vim/src/hardcopy.c	/^prt_get_lpp(void)$/;"	f	file:	signature:(void)
prt_get_lpp	vim/vim/src/hardcopy.c	/^static int prt_get_lpp(void);$/;"	p	file:	signature:(void)
prt_get_lpp	vim/vim/src/os_mswin.c	/^prt_get_lpp(void)$/;"	f	file:	signature:(void)
prt_get_term_color	vim/vim/src/hardcopy.c	/^prt_get_term_color(int colorindex)$/;"	f	file:	signature:(int colorindex)
prt_get_term_color	vim/vim/src/hardcopy.c	/^static long_u prt_get_term_color(int colorindex);$/;"	p	file:	signature:(int colorindex)
prt_get_unit	vim/vim/src/hardcopy.c	/^prt_get_unit(int idx)$/;"	f	signature:(int idx)
prt_half_width	vim/vim/src/hardcopy.c	/^static int prt_half_width;$/;"	v	file:
prt_header	vim/vim/src/hardcopy.c	/^prt_header($/;"	f	file:	signature:( prt_settings_T *psettings, int pagenum, linenr_T lnum UNUSED)
prt_header	vim/vim/src/hardcopy.c	/^static void prt_header(prt_settings_T *psettings, int pagenum, linenr_T lnum);$/;"	p	file:	signature:(prt_settings_T *psettings, int pagenum, linenr_T lnum)
prt_header_height	vim/vim/src/hardcopy.c	/^prt_header_height(void)$/;"	f	signature:(void)
prt_hexchar	vim/vim/src/hardcopy.c	/^static char_u prt_hexchar[] = "0123456789abcdef";$/;"	v	file:
prt_in_ascii	vim/vim/src/hardcopy.c	/^static int prt_in_ascii;$/;"	v	file:
prt_left_margin	vim/vim/src/hardcopy.c	/^static float prt_left_margin;$/;"	v	file:
prt_left_margin	vim/vim/src/os_mswin.c	/^static int		prt_left_margin;$/;"	v	file:
prt_line_buffer	vim/vim/src/hardcopy.c	/^static char_u prt_line_buffer[257];$/;"	v	file:
prt_line_height	vim/vim/src/hardcopy.c	/^static float prt_line_height;$/;"	v	file:
prt_line_height	vim/vim/src/os_mswin.c	/^static int		prt_line_height;$/;"	v	file:
prt_line_number	vim/vim/src/hardcopy.c	/^prt_line_number($/;"	f	file:	signature:( prt_settings_T *psettings, int page_line, linenr_T lnum)
prt_line_number	vim/vim/src/hardcopy.c	/^static void prt_line_number(prt_settings_T *psettings, int page_line, linenr_T lnum);$/;"	p	file:	signature:(prt_settings_T *psettings, int page_line, linenr_T lnum)
prt_match_charset	vim/vim/src/hardcopy.c	/^prt_match_charset($/;"	f	file:	signature:( char *p_charset, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_charset_S **pp_mbchar)
prt_match_charset	vim/vim/src/hardcopy.c	/^static int prt_match_charset(char *p_charset, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_charset_S **pp_mbchar);$/;"	p	file:	signature:(char *p_charset, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_charset_S **pp_mbchar)
prt_match_encoding	vim/vim/src/hardcopy.c	/^prt_match_encoding($/;"	f	file:	signature:( char *p_encoding, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_encoding_S **pp_mbenc)
prt_match_encoding	vim/vim/src/hardcopy.c	/^static int prt_match_encoding(char *p_encoding, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_encoding_S **pp_mbenc);$/;"	p	file:	signature:(char *p_encoding, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_encoding_S **pp_mbenc)
prt_media	vim/vim/src/hardcopy.c	/^static int prt_media;$/;"	v	file:
prt_mediasize	vim/vim/src/hardcopy.c	/^static struct prt_mediasize_S prt_mediasize[] =$/;"	v	typeref:struct:prt_mediasize_S	file:
prt_mediasize_S	vim/vim/src/hardcopy.c	/^struct prt_mediasize_S$/;"	s	file:
prt_mediasize_S::height	vim/vim/src/hardcopy.c	/^    float	height;$/;"	m	struct:prt_mediasize_S	file:	access:public
prt_mediasize_S::name	vim/vim/src/hardcopy.c	/^    char	*name;$/;"	m	struct:prt_mediasize_S	file:	access:public
prt_mediasize_S::width	vim/vim/src/hardcopy.c	/^    float	width;		\/* width and height in points for portrait *\/$/;"	m	struct:prt_mediasize_S	file:	access:public
prt_message	vim/vim/src/hardcopy.c	/^prt_message(char_u *s)$/;"	f	file:	signature:(char_u *s)
prt_message	vim/vim/src/hardcopy.c	/^static void prt_message(char_u *s);$/;"	p	file:	signature:(char_u *s)
prt_name	vim/vim/src/os_mswin.c	/^static char_u		*prt_name = NULL;$/;"	v	file:
prt_need_bgcol	vim/vim/src/hardcopy.c	/^static int prt_need_bgcol;$/;"	v	file:
prt_need_fgcol	vim/vim/src/hardcopy.c	/^static int prt_need_fgcol;$/;"	v	file:
prt_need_font	vim/vim/src/hardcopy.c	/^static int prt_need_font;$/;"	v	file:
prt_need_moveto	vim/vim/src/hardcopy.c	/^static int prt_need_moveto;$/;"	v	file:
prt_need_underline	vim/vim/src/hardcopy.c	/^static int prt_need_underline;$/;"	v	file:
prt_new_bgcol	vim/vim/src/hardcopy.c	/^static int prt_new_bgcol;$/;"	v	file:
prt_next_dsc	vim/vim/src/hardcopy.c	/^prt_next_dsc(struct prt_dsc_line_S *p_dsc_line)$/;"	f	file:	signature:(struct prt_dsc_line_S *p_dsc_line)
prt_next_dsc	vim/vim/src/hardcopy.c	/^static int prt_next_dsc(struct prt_dsc_line_S *p_dsc_line);$/;"	p	file:	signature:(struct prt_dsc_line_S *p_dsc_line)
prt_num_copies	vim/vim/src/hardcopy.c	/^static int prt_num_copies;$/;"	v	file:
prt_number_width	vim/vim/src/hardcopy.c	/^static float prt_number_width;$/;"	v	file:
prt_number_width	vim/vim/src/os_mswin.c	/^static int		prt_number_width;$/;"	v	file:
prt_open_resource	vim/vim/src/hardcopy.c	/^prt_open_resource(struct prt_ps_resource_S *resource)$/;"	f	file:	signature:(struct prt_ps_resource_S *resource)
prt_open_resource	vim/vim/src/hardcopy.c	/^static int prt_open_resource(struct prt_ps_resource_S *resource);$/;"	p	file:	signature:(struct prt_ps_resource_S *resource)
prt_out_mbyte	vim/vim/src/hardcopy.c	/^static int prt_out_mbyte;$/;"	v	file:
prt_page_height	vim/vim/src/hardcopy.c	/^static float prt_page_height;$/;"	v	file:
prt_page_margins	vim/vim/src/hardcopy.c	/^prt_page_margins($/;"	f	file:	signature:( double width, double height, double *left, double *right, double *top, double *bottom)
prt_page_margins	vim/vim/src/hardcopy.c	/^static void prt_page_margins(double width, double height, double *left, double *right, double *top, double *bottom);$/;"	p	file:	signature:(double width, double height, double *left, double *right, double *top, double *bottom)
prt_page_num	vim/vim/src/hardcopy.c	/^static int prt_page_num;$/;"	v	file:
prt_page_width	vim/vim/src/hardcopy.c	/^static float prt_page_width;$/;"	v	file:
prt_portrait	vim/vim/src/hardcopy.c	/^static int prt_portrait;$/;"	v	file:
prt_pos_T	vim/vim/src/hardcopy.c	/^} prt_pos_T;$/;"	t	typeref:struct:__anon212	file:
prt_pos_x	vim/vim/src/hardcopy.c	/^static float prt_pos_x = 0;$/;"	v	file:
prt_pos_x	vim/vim/src/os_mswin.c	/^static int prt_pos_x = 0;$/;"	v	file:
prt_pos_x_moveto	vim/vim/src/hardcopy.c	/^static float prt_pos_x_moveto = 0.0;$/;"	v	file:
prt_pos_y	vim/vim/src/hardcopy.c	/^static float prt_pos_y = 0;$/;"	v	file:
prt_pos_y	vim/vim/src/os_mswin.c	/^static int prt_pos_y = 0;$/;"	v	file:
prt_pos_y_moveto	vim/vim/src/hardcopy.c	/^static float prt_pos_y_moveto = 0.0;$/;"	v	file:
prt_ps_buffer	vim/vim/src/hardcopy.c	/^static garray_T prt_ps_buffer;$/;"	v	file:
prt_ps_charset_S	vim/vim/src/hardcopy.c	/^struct prt_ps_charset_S$/;"	s	file:
prt_ps_charset_S::charset	vim/vim/src/hardcopy.c	/^    char	*charset;$/;"	m	struct:prt_ps_charset_S	file:	access:public
prt_ps_charset_S::cmap_charset	vim/vim/src/hardcopy.c	/^    char	*cmap_charset;$/;"	m	struct:prt_ps_charset_S	file:	access:public
prt_ps_charset_S::has_charset	vim/vim/src/hardcopy.c	/^    int		has_charset;$/;"	m	struct:prt_ps_charset_S	file:	access:public
prt_ps_courier_font	vim/vim/src/hardcopy.c	/^static struct prt_ps_font_S prt_ps_courier_font =$/;"	v	typeref:struct:prt_ps_font_S	file:
prt_ps_encoding_S	vim/vim/src/hardcopy.c	/^struct prt_ps_encoding_S$/;"	s	file:
prt_ps_encoding_S::cmap_encoding	vim/vim/src/hardcopy.c	/^    char	*cmap_encoding;$/;"	m	struct:prt_ps_encoding_S	file:	access:public
prt_ps_encoding_S::encoding	vim/vim/src/hardcopy.c	/^    char	*encoding;$/;"	m	struct:prt_ps_encoding_S	file:	access:public
prt_ps_encoding_S::needs_charset	vim/vim/src/hardcopy.c	/^    int		needs_charset;$/;"	m	struct:prt_ps_encoding_S	file:	access:public
prt_ps_fd	vim/vim/src/hardcopy.c	/^static FILE *prt_ps_fd;$/;"	v	file:
prt_ps_file_name	vim/vim/src/hardcopy.c	/^static char_u *prt_ps_file_name = NULL;$/;"	v	file:
prt_ps_font	vim/vim/src/hardcopy.c	/^static struct prt_ps_font_S* prt_ps_font;$/;"	v	typeref:struct:prt_ps_font_S	file:
prt_ps_font_S	vim/vim/src/hardcopy.c	/^struct prt_ps_font_S$/;"	s	file:
prt_ps_font_S::bbox_max_y	vim/vim/src/hardcopy.c	/^    int		bbox_max_y;$/;"	m	struct:prt_ps_font_S	file:	access:public
prt_ps_font_S::bbox_min_y	vim/vim/src/hardcopy.c	/^    int		bbox_min_y;$/;"	m	struct:prt_ps_font_S	file:	access:public
prt_ps_font_S::ps_fontname	vim/vim/src/hardcopy.c	/^    char	*(ps_fontname[4]);$/;"	m	struct:prt_ps_font_S	file:	access:public
prt_ps_font_S::uline_offset	vim/vim/src/hardcopy.c	/^    int		uline_offset;$/;"	m	struct:prt_ps_font_S	file:	access:public
prt_ps_font_S::uline_width	vim/vim/src/hardcopy.c	/^    int		uline_width;$/;"	m	struct:prt_ps_font_S	file:	access:public
prt_ps_font_S::wx	vim/vim/src/hardcopy.c	/^    int		wx;$/;"	m	struct:prt_ps_font_S	file:	access:public
prt_ps_mb_font	vim/vim/src/hardcopy.c	/^static struct prt_ps_font_S prt_ps_mb_font =$/;"	v	typeref:struct:prt_ps_font_S	file:
prt_ps_mbfont_S	vim/vim/src/hardcopy.c	/^struct prt_ps_mbfont_S$/;"	s	file:
prt_ps_mbfont_S::ascii_enc	vim/vim/src/hardcopy.c	/^    char			*ascii_enc;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
prt_ps_mbfont_S::charsets	vim/vim/src/hardcopy.c	/^    struct prt_ps_charset_S	*charsets;$/;"	m	struct:prt_ps_mbfont_S	typeref:struct:prt_ps_mbfont_S::prt_ps_charset_S	file:	access:public
prt_ps_mbfont_S::defcs	vim/vim/src/hardcopy.c	/^    char			*defcs;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
prt_ps_mbfont_S::encodings	vim/vim/src/hardcopy.c	/^    struct prt_ps_encoding_S	*encodings;$/;"	m	struct:prt_ps_mbfont_S	typeref:struct:prt_ps_mbfont_S::prt_ps_encoding_S	file:	access:public
prt_ps_mbfont_S::num_charsets	vim/vim/src/hardcopy.c	/^    int				num_charsets;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
prt_ps_mbfont_S::num_encodings	vim/vim/src/hardcopy.c	/^    int				num_encodings;$/;"	m	struct:prt_ps_mbfont_S	file:	access:public
prt_ps_mbfonts	vim/vim/src/hardcopy.c	/^static struct prt_ps_mbfont_S prt_ps_mbfonts[] =$/;"	v	typeref:struct:prt_ps_mbfont_S	file:
prt_ps_resource_S	vim/vim/src/hardcopy.c	/^struct prt_ps_resource_S$/;"	s	file:
prt_ps_resource_S::filename	vim/vim/src/hardcopy.c	/^    char_u  filename[MAXPATHL + 1];$/;"	m	struct:prt_ps_resource_S	file:	access:public
prt_ps_resource_S::name	vim/vim/src/hardcopy.c	/^    char_u  name[64];$/;"	m	struct:prt_ps_resource_S	file:	access:public
prt_ps_resource_S::title	vim/vim/src/hardcopy.c	/^    char_u  title[256];$/;"	m	struct:prt_ps_resource_S	file:	access:public
prt_ps_resource_S::type	vim/vim/src/hardcopy.c	/^    int     type;$/;"	m	struct:prt_ps_resource_S	file:	access:public
prt_ps_resource_S::version	vim/vim/src/hardcopy.c	/^    char_u  version[256];$/;"	m	struct:prt_ps_resource_S	file:	access:public
prt_real_bits	vim/vim/src/hardcopy.c	/^prt_real_bits($/;"	f	file:	signature:( double real, int precision, int *pinteger, int *pfraction)
prt_real_bits	vim/vim/src/hardcopy.c	/^static void prt_real_bits(double real, int precision, int *pinteger, int *pfraction);$/;"	p	file:	signature:(double real, int precision, int *pinteger, int *pfraction)
prt_resfile	vim/vim/src/hardcopy.c	/^static struct prt_resfile_buffer_S prt_resfile;$/;"	v	typeref:struct:prt_resfile_buffer_S	file:
prt_resfile_buffer_S	vim/vim/src/hardcopy.c	/^struct prt_resfile_buffer_S$/;"	s	file:
prt_resfile_buffer_S::buffer	vim/vim/src/hardcopy.c	/^    char_u  buffer[PRT_FILE_BUFFER_LEN];$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
prt_resfile_buffer_S::len	vim/vim/src/hardcopy.c	/^    int     len;$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
prt_resfile_buffer_S::line_end	vim/vim/src/hardcopy.c	/^    int     line_end;$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
prt_resfile_buffer_S::line_start	vim/vim/src/hardcopy.c	/^    int     line_start;$/;"	m	struct:prt_resfile_buffer_S	file:	access:public
prt_resfile_next_line	vim/vim/src/hardcopy.c	/^prt_resfile_next_line(void)$/;"	f	file:	signature:(void)
prt_resfile_next_line	vim/vim/src/hardcopy.c	/^static int prt_resfile_next_line(void);$/;"	p	file:	signature:(void)
prt_resfile_skip_nonws	vim/vim/src/hardcopy.c	/^prt_resfile_skip_nonws(int offset)$/;"	f	file:	signature:(int offset)
prt_resfile_skip_nonws	vim/vim/src/hardcopy.c	/^static int prt_resfile_skip_nonws(int offset);$/;"	p	file:	signature:(int offset)
prt_resfile_skip_ws	vim/vim/src/hardcopy.c	/^prt_resfile_skip_ws(int offset)$/;"	f	file:	signature:(int offset)
prt_resfile_skip_ws	vim/vim/src/hardcopy.c	/^static int prt_resfile_skip_ws(int offset);$/;"	p	file:	signature:(int offset)
prt_resfile_strncmp	vim/vim/src/hardcopy.c	/^prt_resfile_strncmp(int offset, char *string, int len)$/;"	f	file:	signature:(int offset, char *string, int len)
prt_resfile_strncmp	vim/vim/src/hardcopy.c	/^static int prt_resfile_strncmp(int offset, char *string, int len);$/;"	p	file:	signature:(int offset, char *string, int len)
prt_resource_name	vim/vim/src/hardcopy.c	/^prt_resource_name(char_u *filename, void *cookie)$/;"	f	file:	signature:(char_u *filename, void *cookie)
prt_resource_name	vim/vim/src/hardcopy.c	/^static void prt_resource_name(char_u *filename, void *cookie);$/;"	p	file:	signature:(char_u *filename, void *cookie)
prt_resource_types	vim/vim/src/hardcopy.c	/^static char *prt_resource_types[] =$/;"	v	file:
prt_right_margin	vim/vim/src/hardcopy.c	/^static float prt_right_margin;$/;"	v	file:
prt_right_margin	vim/vim/src/os_mswin.c	/^static int		prt_right_margin;$/;"	v	file:
prt_set_bg	vim/vim/src/hardcopy.c	/^prt_set_bg(long_u bg)$/;"	f	file:	signature:(long_u bg)
prt_set_bg	vim/vim/src/hardcopy.c	/^static void prt_set_bg(long_u bg);$/;"	p	file:	signature:(long_u bg)
prt_set_fg	vim/vim/src/hardcopy.c	/^prt_set_fg(long_u fg)$/;"	f	file:	signature:(long_u fg)
prt_set_fg	vim/vim/src/hardcopy.c	/^static void prt_set_fg(long_u fg);$/;"	p	file:	signature:(long_u fg)
prt_set_font	vim/vim/src/hardcopy.c	/^prt_set_font(int bold, int italic, int underline)$/;"	f	file:	signature:(int bold, int italic, int underline)
prt_set_font	vim/vim/src/hardcopy.c	/^static void prt_set_font(int bold, int italic, int underline);$/;"	p	file:	signature:(int bold, int italic, int underline)
prt_settings_T	vim/vim/src/structs.h	/^} prt_settings_T;$/;"	t	typeref:struct:__anon206
prt_text_attr_T	vim/vim/src/structs.h	/^} prt_text_attr_T;$/;"	t	typeref:struct:__anon205
prt_text_run	vim/vim/src/hardcopy.c	/^static float prt_text_run;$/;"	v	file:
prt_tm	vim/vim/src/os_mswin.c	/^static TEXTMETRIC	prt_tm;$/;"	v	file:
prt_top_margin	vim/vim/src/hardcopy.c	/^static float prt_top_margin;$/;"	v	file:
prt_top_margin	vim/vim/src/os_mswin.c	/^static int		prt_top_margin;$/;"	v	file:
prt_tumble	vim/vim/src/hardcopy.c	/^static int prt_tumble;$/;"	v	file:
prt_underline	vim/vim/src/hardcopy.c	/^static int prt_underline;$/;"	v	file:
prt_use_courier	vim/vim/src/hardcopy.c	/^static int prt_use_courier;$/;"	v	file:
prt_use_number	vim/vim/src/hardcopy.c	/^prt_use_number(void)$/;"	f	signature:(void)
prt_write_boolean	vim/vim/src/hardcopy.c	/^prt_write_boolean(int b)$/;"	f	file:	signature:(int b)
prt_write_boolean	vim/vim/src/hardcopy.c	/^static void prt_write_boolean(int b);$/;"	p	file:	signature:(int b)
prt_write_file	vim/vim/src/hardcopy.c	/^prt_write_file(char_u *buffer)$/;"	f	file:	signature:(char_u *buffer)
prt_write_file	vim/vim/src/hardcopy.c	/^static void prt_write_file(char_u *buffer);$/;"	p	file:	signature:(char_u *buffer)
prt_write_file_len	vim/vim/src/hardcopy.c	/^prt_write_file_len(char_u *buffer, int bytes)$/;"	f	file:	signature:(char_u *buffer, int bytes)
prt_write_file_len	vim/vim/src/hardcopy.c	/^static void prt_write_file_len(char_u *buffer, int bytes);$/;"	p	file:	signature:(char_u *buffer, int bytes)
prt_write_file_raw_len	vim/vim/src/hardcopy.c	/^prt_write_file_raw_len(char_u *buffer, int bytes)$/;"	f	file:	signature:(char_u *buffer, int bytes)
prt_write_file_raw_len	vim/vim/src/hardcopy.c	/^static void prt_write_file_raw_len(char_u *buffer, int bytes);$/;"	p	file:	signature:(char_u *buffer, int bytes)
prt_write_int	vim/vim/src/hardcopy.c	/^prt_write_int(int i)$/;"	f	file:	signature:(int i)
prt_write_int	vim/vim/src/hardcopy.c	/^static void prt_write_int(int i);$/;"	p	file:	signature:(int i)
prt_write_real	vim/vim/src/hardcopy.c	/^prt_write_real(double val, int prec)$/;"	f	file:	signature:(double val, int prec)
prt_write_real	vim/vim/src/hardcopy.c	/^static void prt_write_real(double val, int prec);$/;"	p	file:	signature:(double val, int prec)
prt_write_string	vim/vim/src/hardcopy.c	/^prt_write_string(char *s)$/;"	f	file:	signature:(char *s)
prt_write_string	vim/vim/src/hardcopy.c	/^static void prt_write_string(char *s);$/;"	p	file:	signature:(char *s)
ps_fontname	vim/vim/src/hardcopy.c	/^    char	*(ps_fontname[4]);$/;"	m	struct:prt_ps_font_S	file:	access:public
psepc	vim/vim/src/globals.h	/^EXTERN char	psepc INIT(= '\\\\');	\/* normal path separator character *\/$/;"	v
psepcN	vim/vim/src/globals.h	/^EXTERN char	psepcN INIT(= '\/');	\/* abnormal path separator character *\/$/;"	v
pseps	vim/vim/src/globals.h	/^EXTERN char	pseps[2] INIT(= {'\\\\' COMMA 0});$/;"	v
pseudo_code	vim/vim/src/misc2.c	/^    int	    pseudo_code;	\/* Code for pseudo mouse event *\/$/;"	m	struct:mousetable	file:	access:public
pstrcmp	vim/vim/src/misc1.c	/^pstrcmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
pstrcmp	vim/vim/src/misc1.c	/^static int	pstrcmp(const void *, const void *);$/;"	p	file:	signature:(const void *, const void *)
ptCurrentPos	vim/vim/src/gui_w32.c	/^    POINT ptCurrentPos;$/;"	m	struct:tagCOMPOSITIONFORM	file:	access:public
pt_argc	vim/vim/src/structs.h	/^    int		pt_argc;	\/* number of arguments *\/$/;"	m	struct:partial_S	access:public
pt_argv	vim/vim/src/structs.h	/^    typval_T	*pt_argv;	\/* arguments in allocated array *\/$/;"	m	struct:partial_S	access:public
pt_auto	vim/vim/src/structs.h	/^    int		pt_auto;	\/* when TRUE the partial was created for using$/;"	m	struct:partial_S	access:public
pt_dict	vim/vim/src/structs.h	/^    dict_T	*pt_dict;	\/* dict for "self" *\/$/;"	m	struct:partial_S	access:public
pt_func	vim/vim/src/structs.h	/^    ufunc_T	*pt_func;	\/* function pointer; when NULL lookup function$/;"	m	struct:partial_S	access:public
pt_name	vim/vim/src/structs.h	/^    char_u	*pt_name;	\/* function name; when NULL use$/;"	m	struct:partial_S	access:public
pt_refcount	vim/vim/src/structs.h	/^    int		pt_refcount;	\/* reference count *\/$/;"	m	struct:partial_S	access:public
ptag_entry	vim/vim/src/tag.c	/^static taggy_T ptag_entry = {NULL, {INIT_POS_T(0, 0, 0), 0}, 0, 0};$/;"	v	file:
ptr	vim/vim/src/if_mzsch.c	/^    void    **ptr;$/;"	m	struct:__anon11	file:	access:public
ptr	vim/vim/src/if_python.c	/^    PYTHON_PROC *ptr;$/;"	m	struct:__anon249	file:	access:public
ptr	vim/vim/src/if_python3.c	/^    PYTHON_PROC *ptr;$/;"	m	struct:__anon222	file:	access:public
ptr	vim/vim/src/if_ruby.c	/^    RUBY_PROC *ptr;$/;"	m	struct:__anon234	file:	access:public
ptr	vim/vim/src/if_tcl.c	/^    TCL_PROC* ptr;$/;"	m	struct:__anon141	file:	access:public
ptr	vim/vim/src/regexp.c	/^	char_u	*ptr;	\/* reginput pointer, for single-line regexp *\/$/;"	m	union:__anon125::__anon126	file:	access:public
ptr	vim/vim/src/regexp.c	/^	char_u	*ptr;$/;"	m	union:__anon127::__anon128	file:	access:public
ptr	vim/vim/src/regexp_nfa.c	/^	char_u	*ptr;$/;"	m	union:nfa_pim_S::__anon119	file:	access:public
ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to next header for alt. redo *\/$/;"	m	union:u_header::__anon168	access:public
ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to next undo header in list *\/$/;"	m	union:u_header::__anon166	access:public
ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to previous header for alt. redo *\/$/;"	m	union:u_header::__anon169	access:public
ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to previous header in list *\/$/;"	m	union:u_header::__anon167	access:public
ptr2cells	vim/vim/src/charset.c	/^ptr2cells(char_u *p)$/;"	f	signature:(char_u *p)
pullAction	vim/vim/src/gui_athena.c	/^static XtActionsRec	pullAction[2] = {$/;"	v	file:
pullerBitmap	vim/vim/src/gui_athena.c	/^static Pixmap		pullerBitmap = None;$/;"	v	file:
puller_width	vim/vim/src/gui_athena.c	/^static int		puller_width = 0;$/;"	v	file:
pum_array	vim/vim/src/popupmnu.c	/^static pumitem_T *pum_array = NULL;	\/* items of displayed pum *\/$/;"	v	file:
pum_base_width	vim/vim/src/popupmnu.c	/^static int pum_base_width;		\/* width of pum items base *\/$/;"	v	file:
pum_clear	vim/vim/src/popupmnu.c	/^pum_clear(void)$/;"	f	signature:(void)
pum_col	vim/vim/src/popupmnu.c	/^static int pum_col;			\/* left column of pum *\/$/;"	v	file:
pum_display	vim/vim/src/popupmnu.c	/^pum_display($/;"	f	signature:( pumitem_T *array, int size, int selected)
pum_do_redraw	vim/vim/src/popupmnu.c	/^static int pum_do_redraw = FALSE;	\/* do redraw anyway *\/$/;"	v	file:
pum_enough_matches	vim/vim/src/edit.c	/^pum_enough_matches(void)$/;"	f	file:	signature:(void)
pum_enough_matches	vim/vim/src/edit.c	/^static int  pum_enough_matches(void);$/;"	p	file:	signature:(void)
pum_extra	vim/vim/src/structs.h	/^    char_u	*pum_extra;	\/* extra menu text (may be truncated) *\/$/;"	m	struct:__anon207	access:public
pum_first	vim/vim/src/popupmnu.c	/^static int pum_first = 0;		\/* index of top item *\/$/;"	v	file:
pum_get_height	vim/vim/src/popupmnu.c	/^pum_get_height(void)$/;"	f	signature:(void)
pum_height	vim/vim/src/popupmnu.c	/^static int pum_height;			\/* nr of displayed pum items *\/$/;"	v	file:
pum_info	vim/vim/src/structs.h	/^    char_u	*pum_info;	\/* extra info *\/$/;"	m	struct:__anon207	access:public
pum_kind	vim/vim/src/structs.h	/^    char_u	*pum_kind;	\/* extra kind text (may be truncated) *\/$/;"	m	struct:__anon207	access:public
pum_kind_width	vim/vim/src/popupmnu.c	/^static int pum_kind_width;		\/* width of pum items kind column *\/$/;"	v	file:
pum_redraw	vim/vim/src/popupmnu.c	/^pum_redraw(void)$/;"	f	signature:(void)
pum_row	vim/vim/src/popupmnu.c	/^static int pum_row;			\/* top row of pum *\/$/;"	v	file:
pum_scrollbar	vim/vim/src/popupmnu.c	/^static int pum_scrollbar;		\/* TRUE when scrollbar present *\/$/;"	v	file:
pum_selected	vim/vim/src/popupmnu.c	/^static int pum_selected;		\/* index of selected item or -1 *\/$/;"	v	file:
pum_set_selected	vim/vim/src/popupmnu.c	/^pum_set_selected(int n, int repeat)$/;"	f	file:	signature:(int n, int repeat)
pum_set_selected	vim/vim/src/popupmnu.c	/^static int pum_set_selected(int n, int repeat);$/;"	p	file:	signature:(int n, int repeat)
pum_size	vim/vim/src/popupmnu.c	/^static int pum_size;			\/* nr of items in "pum_array" *\/$/;"	v	file:
pum_text	vim/vim/src/structs.h	/^    char_u	*pum_text;	\/* main menu text *\/$/;"	m	struct:__anon207	access:public
pum_undisplay	vim/vim/src/popupmnu.c	/^pum_undisplay(void)$/;"	f	signature:(void)
pum_visible	vim/vim/src/popupmnu.c	/^pum_visible(void)$/;"	f	signature:(void)
pum_wanted	vim/vim/src/edit.c	/^pum_wanted(void)$/;"	f	file:	signature:(void)
pum_wanted	vim/vim/src/edit.c	/^static int  pum_wanted(void);$/;"	p	file:	signature:(void)
pum_width	vim/vim/src/popupmnu.c	/^static int pum_width;			\/* width of displayed pum items *\/$/;"	v	file:
pumitem_T	vim/vim/src/structs.h	/^} pumitem_T;$/;"	t	typeref:struct:__anon207
push	vim/vim/src/hangulin.c	43;"	d	file:
push_current_state	vim/vim/src/syntax.c	/^push_current_state(int idx)$/;"	f	file:	signature:(int idx)
push_current_state	vim/vim/src/syntax.c	/^static int push_current_state(int idx);$/;"	p	file:	signature:(int idx)
push_next_match	vim/vim/src/syntax.c	/^push_next_match(stateitem_T *cur_si)$/;"	f	file:	signature:(stateitem_T *cur_si)
push_next_match	vim/vim/src/syntax.c	/^static stateitem_T *push_next_match(stateitem_T *cur_si);$/;"	p	file:	signature:(stateitem_T *cur_si)
push_raw_key	vim/vim/src/ui.c	/^push_raw_key(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
push_showcmd	vim/vim/src/normal.c	/^push_showcmd(void)$/;"	f	signature:(void)
pushbutton	vim/vim/src/gui_xmebwp.h	/^    XmPushButtonPart pushbutton;$/;"	m	struct:_XmEnhancedButtonRec	access:public
pushbutton_class	vim/vim/src/gui_xmebwp.h	/^    XmPushButtonClassPart pushbutton_class;$/;"	m	struct:__anon4	access:public
put_and_redo	vim/vim/src/farsi.c	/^put_and_redo(int c)$/;"	f	file:	signature:(int c)
put_bytes	vim/vim/src/misc2.c	/^put_bytes(FILE *fd, long_u nr, int len)$/;"	f	signature:(FILE *fd, long_u nr, int len)
put_curr_and_l_to_X	vim/vim/src/farsi.c	/^put_curr_and_l_to_X(int c)$/;"	f	file:	signature:(int c)
put_eol	vim/vim/src/ex_docmd.c	/^put_eol(FILE *fd)$/;"	f	signature:(FILE *fd)
put_escstr	vim/vim/src/getchar.c	/^put_escstr(FILE *fd, char_u *strstart, int what)$/;"	f	signature:(FILE *fd, char_u *strstart, int what)
put_fold_open_close	vim/vim/src/fold.c	/^put_fold_open_close(FILE *fd, fold_T *fp, linenr_T off)$/;"	f	file:	signature:(FILE *fd, fold_T *fp, linenr_T off)
put_fold_open_close	vim/vim/src/fold.c	/^static int put_fold_open_close(FILE *fd, fold_T *fp, linenr_T off);$/;"	p	file:	signature:(FILE *fd, fold_T *fp, linenr_T off)
put_foldopen_recurse	vim/vim/src/fold.c	/^put_foldopen_recurse($/;"	f	file:	signature:( FILE *fd, win_T *wp, garray_T *gap, linenr_T off)
put_foldopen_recurse	vim/vim/src/fold.c	/^static int put_foldopen_recurse(FILE *fd, win_T *wp, garray_T *gap, linenr_T off);$/;"	p	file:	signature:(FILE *fd, win_T *wp, garray_T *gap, linenr_T off)
put_folds	vim/vim/src/fold.c	/^put_folds(FILE *fd, win_T *wp)$/;"	f	signature:(FILE *fd, win_T *wp)
put_folds_recurse	vim/vim/src/fold.c	/^put_folds_recurse(FILE *fd, garray_T *gap, linenr_T off)$/;"	f	file:	signature:(FILE *fd, garray_T *gap, linenr_T off)
put_folds_recurse	vim/vim/src/fold.c	/^static int put_folds_recurse(FILE *fd, garray_T *gap, linenr_T off);$/;"	p	file:	signature:(FILE *fd, garray_T *gap, linenr_T off)
put_header_ptr	vim/vim/src/undo.c	/^put_header_ptr(bufinfo_T *bi, u_header_T *uhp)$/;"	f	file:	signature:(bufinfo_T *bi, u_header_T *uhp)
put_header_ptr	vim/vim/src/undo.c	/^static void put_header_ptr(bufinfo_T *bi, u_header_T *uhp);$/;"	p	file:	signature:(bufinfo_T *bi, u_header_T *uhp)
put_href	vim/vim/runtime/doc/makehtml.awk	/^function put_href() {$/;"	f
put_href2	vim/vim/runtime/doc/makehtml.awk	/^function put_href2() {$/;"	f
put_href3	vim/vim/runtime/doc/makehtml.awk	/^function put_href3() {$/;"	f
put_id_list	vim/vim/src/syntax.c	/^put_id_list(char_u *name, short *list, int attr)$/;"	f	file:	signature:(char_u *name, short *list, int attr)
put_id_list	vim/vim/src/syntax.c	/^static void put_id_list(char_u *name, short *list, int attr);$/;"	p	file:	signature:(char_u *name, short *list, int attr)
put_in_typebuf	vim/vim/src/ops.c	/^put_in_typebuf($/;"	f	file:	signature:( char_u *s, int esc, int colon, int silent)
put_in_typebuf	vim/vim/src/ops.c	/^static int	put_in_typebuf(char_u *s, int esc, int colon,$/;"	p	file:	signature:(char_u *s, int esc, int colon, int silent)
put_line	vim/vim/src/ex_docmd.c	/^put_line(FILE *fd, char *s)$/;"	f	signature:(FILE *fd, char *s)
put_node	vim/vim/src/spellfile.c	/^put_node($/;"	f	file:	signature:( FILE *fd, wordnode_T *node, int idx, int regionmask, int prefixtree)
put_node	vim/vim/src/spellfile.c	/^static int put_node(FILE *fd, wordnode_T *node, int idx, int regionmask, int prefixtree);$/;"	p	file:	signature:(FILE *fd, wordnode_T *node, int idx, int regionmask, int prefixtree)
put_on_cmdline	vim/vim/src/ex_getln.c	/^put_on_cmdline(char_u *str, int len, int redraw)$/;"	f	signature:(char_u *str, int len, int redraw)
put_pattern	vim/vim/src/syntax.c	/^put_pattern($/;"	f	file:	signature:( char *s, int c, synpat_T *spp, int attr)
put_pattern	vim/vim/src/syntax.c	/^static void put_pattern(char *s, int c, synpat_T *spp, int attr);$/;"	p	file:	signature:(char *s, int c, synpat_T *spp, int attr)
put_reedit_in_typebuf	vim/vim/src/ops.c	/^put_reedit_in_typebuf(int silent)$/;"	f	file:	signature:(int silent)
put_reedit_in_typebuf	vim/vim/src/ops.c	/^static void	put_reedit_in_typebuf(int silent);$/;"	p	file:	signature:(int silent)
put_register	vim/vim/src/ops.c	/^put_register(int name, void *reg)$/;"	f	signature:(int name, void *reg)
put_setbool	vim/vim/src/option.c	/^put_setbool($/;"	f	file:	signature:( FILE *fd, char *cmd, char *name, int value)
put_setbool	vim/vim/src/option.c	/^static int put_setbool(FILE *fd, char *cmd, char *name, int value);$/;"	p	file:	signature:(FILE *fd, char *cmd, char *name, int value)
put_setnum	vim/vim/src/option.c	/^put_setnum($/;"	f	file:	signature:( FILE *fd, char *cmd, char *name, long *valuep)
put_setnum	vim/vim/src/option.c	/^static int put_setnum(FILE *fd, char *cmd, char *name, long *valuep);$/;"	p	file:	signature:(FILE *fd, char *cmd, char *name, long *valuep)
put_setstring	vim/vim/src/option.c	/^put_setstring($/;"	f	file:	signature:( FILE *fd, char *cmd, char *name, char_u **valuep, int expand)
put_setstring	vim/vim/src/option.c	/^static int put_setstring(FILE *fd, char *cmd, char *name, char_u **valuep, int expand);$/;"	p	file:	signature:(FILE *fd, char *cmd, char *name, char_u **valuep, int expand)
put_this	vim/vim/runtime/doc/makehtml.awk	/^function put_this() {$/;"	f
put_time	vim/vim/src/misc2.c	/^put_time(FILE *fd, time_T the_time)$/;"	f	signature:(FILE *fd, time_T the_time)
put_view	vim/vim/src/ex_docmd.c	/^put_view($/;"	f	file:	signature:( FILE *fd, win_T *wp, int add_edit, unsigned *flagp, int current_arg_idx)
put_view	vim/vim/src/ex_docmd.c	/^static int	put_view(FILE *fd, win_T *wp, int add_edit, unsigned *flagp, int current_arg_idx);$/;"	p	file:	signature:(FILE *fd, win_T *wp, int add_edit, unsigned *flagp, int current_arg_idx)
putcmdline	vim/vim/src/ex_getln.c	/^putcmdline(int c, int shift)$/;"	f	signature:(int c, int shift)
putdigraph	vim/vim/src/digraph.c	/^putdigraph(char_u *str)$/;"	f	signature:(char_u *str)
putenv	vim/vim/src/misc2.c	/^putenv(const char *string)$/;"	f	signature:(const char *string)
putenv	vim/vim/src/proto.h	/^extern int putenv(const char *string);			\/* in misc2.c *\/$/;"	p	signature:(const char *string)
putglyph	vim/vim/src/libvterm/include/vterm.h	/^  int (*putglyph)(VTermGlyphInfo *info, VTermPos pos, void *user);$/;"	m	struct:__anon60	access:public
putglyph	vim/vim/src/libvterm/src/screen.c	/^static int putglyph(VTermGlyphInfo *info, VTermPos pos, void *user)$/;"	f	file:	signature:(VTermGlyphInfo *info, VTermPos pos, void *user)
putglyph	vim/vim/src/libvterm/src/state.c	/^static void putglyph(VTermState *state, const uint32_t chars[], int width, VTermPos pos)$/;"	f	file:	signature:(VTermState *state, const uint32_t chars[], int width, VTermPos pos)
py3_PyArg_Parse	vim/vim/src/if_python3.c	/^static int (*py3_PyArg_Parse)(PyObject *, char *, ...);$/;"	v	file:
py3_PyArg_ParseTuple	vim/vim/src/if_python3.c	/^static int (*py3_PyArg_ParseTuple)(PyObject *, char *, ...);$/;"	v	file:
py3_PyBool_Type	vim/vim/src/if_python3.c	/^static PyTypeObject* py3_PyBool_Type;$/;"	v	file:
py3_PyBytes_AsString	vim/vim/src/if_python3.c	/^static char* (*py3_PyBytes_AsString)(PyObject *bytes);$/;"	v	file:
py3_PyBytes_AsStringAndSize	vim/vim/src/if_python3.c	/^static int (*py3_PyBytes_AsStringAndSize)(PyObject *bytes, char **buffer, Py_ssize_t *length);$/;"	v	file:
py3_PyBytes_FromString	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyBytes_FromString)(char *str);$/;"	v	file:
py3_PyCapsule_GetPointer	vim/vim/src/if_python3.c	/^static void* (*py3_PyCapsule_GetPointer)(PyObject *, char *);$/;"	v	file:
py3_PyCapsule_New	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyCapsule_New)(void *, char *, PyCapsule_Destructor);$/;"	v	file:
py3_PyDict_GetItemString	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyDict_GetItemString)(PyObject *, const char *);$/;"	v	file:
py3_PyDict_New	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyDict_New)(void);$/;"	v	file:
py3_PyDict_Next	vim/vim/src/if_python3.c	/^static int (*py3_PyDict_Next)(PyObject *, Py_ssize_t *, PyObject **, PyObject **);$/;"	v	file:
py3_PyDict_SetItemString	vim/vim/src/if_python3.c	/^static int (*py3_PyDict_SetItemString)(PyObject *dp, char *key, PyObject *item);$/;"	v	file:
py3_PyErr_BadArgument	vim/vim/src/if_python3.c	/^static int (*py3_PyErr_BadArgument)(void);$/;"	v	file:
py3_PyErr_Clear	vim/vim/src/if_python3.c	/^static void (*py3_PyErr_Clear)(void);$/;"	v	file:
py3_PyErr_ExceptionMatches	vim/vim/src/if_python3.c	/^static int (*py3_PyErr_ExceptionMatches)(PyObject *);$/;"	v	file:
py3_PyErr_Format	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyErr_Format)(PyObject *, const char *, ...);$/;"	v	file:
py3_PyErr_NewException	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyErr_NewException)(char *name, PyObject *base, PyObject *dict);$/;"	v	file:
py3_PyErr_NoMemory	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyErr_NoMemory)(void);$/;"	v	file:
py3_PyErr_Occurred	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyErr_Occurred)(void);$/;"	v	file:
py3_PyErr_PrintEx	vim/vim/src/if_python3.c	/^static void (*py3_PyErr_PrintEx)(int);$/;"	v	file:
py3_PyErr_SetNone	vim/vim/src/if_python3.c	/^static void (*py3_PyErr_SetNone)(PyObject *);$/;"	v	file:
py3_PyErr_SetObject	vim/vim/src/if_python3.c	/^static void (*py3_PyErr_SetObject)(PyObject *, PyObject *);$/;"	v	file:
py3_PyErr_SetString	vim/vim/src/if_python3.c	/^static void (*py3_PyErr_SetString)(PyObject *, const char *);$/;"	v	file:
py3_PyEval_GetGlobals	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyEval_GetGlobals)();$/;"	v	file:
py3_PyEval_GetLocals	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyEval_GetLocals)();$/;"	v	file:
py3_PyEval_InitThreads	vim/vim/src/if_python3.c	/^static void (*py3_PyEval_InitThreads)(void);$/;"	v	file:
py3_PyEval_RestoreThread	vim/vim/src/if_python3.c	/^static void(*py3_PyEval_RestoreThread)(PyThreadState *);$/;"	v	file:
py3_PyEval_SaveThread	vim/vim/src/if_python3.c	/^static PyThreadState*(*py3_PyEval_SaveThread)(void);$/;"	v	file:
py3_PyFloat_AsDouble	vim/vim/src/if_python3.c	/^static double (*py3_PyFloat_AsDouble)(PyObject *);$/;"	v	file:
py3_PyFloat_FromDouble	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyFloat_FromDouble)(double num);$/;"	v	file:
py3_PyFloat_Type	vim/vim/src/if_python3.c	/^static PyTypeObject* py3_PyFloat_Type;$/;"	v	file:
py3_PyGILState_Ensure	vim/vim/src/if_python3.c	/^static PyGILState_STATE (*py3_PyGILState_Ensure)(void);$/;"	v	file:
py3_PyGILState_Release	vim/vim/src/if_python3.c	/^static void (*py3_PyGILState_Release)(PyGILState_STATE);$/;"	v	file:
py3_PyImport_AddModule	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyImport_AddModule)(const char *);$/;"	v	file:
py3_PyImport_AppendInittab	vim/vim/src/if_python3.c	/^static int (*py3_PyImport_AppendInittab)(const char *name, PyObject* (*initfunc)(void));$/;"	v	file:
py3_PyImport_ImportModule	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyImport_ImportModule)(const char *);$/;"	v	file:
py3_PyIter_Next	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyIter_Next)(PyObject *);$/;"	v	file:
py3_PyList_Append	vim/vim/src/if_python3.c	/^static int (*py3_PyList_Append)(PyObject *, PyObject *);$/;"	v	file:
py3_PyList_GetItem	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyList_GetItem)(PyObject *, Py_ssize_t);$/;"	v	file:
py3_PyList_Insert	vim/vim/src/if_python3.c	/^static int (*py3_PyList_Insert)(PyObject *, int, PyObject *);$/;"	v	file:
py3_PyList_New	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyList_New)(Py_ssize_t size);$/;"	v	file:
py3_PyList_SetItem	vim/vim/src/if_python3.c	/^static int (*py3_PyList_SetItem)(PyObject *, Py_ssize_t, PyObject *);$/;"	v	file:
py3_PyList_Size	vim/vim/src/if_python3.c	/^static Py_ssize_t (*py3_PyList_Size)(PyObject *);$/;"	v	file:
py3_PyLong_AsLong	vim/vim/src/if_python3.c	/^static long (*py3_PyLong_AsLong)(PyObject *);$/;"	v	file:
py3_PyLong_FromLong	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyLong_FromLong)(long);$/;"	v	file:
py3_PyMapping_Check	vim/vim/src/if_python3.c	/^static int (*py3_PyMapping_Check)(PyObject *);$/;"	v	file:
py3_PyMapping_Keys	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyMapping_Keys)(PyObject *);$/;"	v	file:
py3_PyMem_Free	vim/vim/src/if_python3.c	/^static int (*py3_PyMem_Free)(void *);$/;"	v	file:
py3_PyMem_Malloc	vim/vim/src/if_python3.c	/^static void* (*py3_PyMem_Malloc)(size_t);$/;"	v	file:
py3_PyModule_AddObject	vim/vim/src/if_python3.c	/^static int (*py3_PyModule_AddObject)(PyObject *m, const char *name, PyObject *o);$/;"	v	file:
py3_PyModule_Create2	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyModule_Create2)(struct PyModuleDef* module, int module_api_version);$/;"	v	file:
py3_PyModule_Create2TraceRefs	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyModule_Create2TraceRefs)(struct PyModuleDef* module, int module_api_version);$/;"	v	file:
py3_PyModule_GetDict	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyModule_GetDict)(PyObject *);$/;"	v	file:
py3_PyNumber_Check	vim/vim/src/if_python3.c	/^static int (*py3_PyNumber_Check)(PyObject *);$/;"	v	file:
py3_PyNumber_Long	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyNumber_Long)(PyObject *);$/;"	v	file:
py3_PyObject_Call	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_Call)(PyObject *, PyObject *, PyObject *);$/;"	v	file:
py3_PyObject_CallFunctionObjArgs	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_CallFunctionObjArgs)(PyObject *, ...);$/;"	v	file:
py3_PyObject_Free	vim/vim/src/if_python3.c	/^static void (*py3_PyObject_Free)(void*);$/;"	v	file:
py3_PyObject_GC_Del	vim/vim/src/if_python3.c	/^static void(*py3_PyObject_GC_Del)(void *);$/;"	v	file:
py3_PyObject_GC_UnTrack	vim/vim/src/if_python3.c	/^static void(*py3_PyObject_GC_UnTrack)(void *);$/;"	v	file:
py3_PyObject_GenericGetAttr	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_GenericGetAttr)(PyObject *obj, PyObject *name);$/;"	v	file:
py3_PyObject_GetAttrString	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_GetAttrString)(PyObject *, const char *);$/;"	v	file:
py3_PyObject_GetItem	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_GetItem)(PyObject *, PyObject *);$/;"	v	file:
py3_PyObject_GetIter	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_GetIter)(PyObject *);$/;"	v	file:
py3_PyObject_HasAttrString	vim/vim/src/if_python3.c	/^static int (*py3_PyObject_HasAttrString)(PyObject *, const char *);$/;"	v	file:
py3_PyObject_IsTrue	vim/vim/src/if_python3.c	/^static int (*py3_PyObject_IsTrue)(PyObject *);$/;"	v	file:
py3_PyObject_Malloc	vim/vim/src/if_python3.c	/^static void* (*py3_PyObject_Malloc)(size_t);$/;"	v	file:
py3_PyObject_Repr	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyObject_Repr)(PyObject *);$/;"	v	file:
py3_PyObject_SetAttrString	vim/vim/src/if_python3.c	/^static int (*py3_PyObject_SetAttrString)(PyObject *, const char *, PyObject *);$/;"	v	file:
py3_PyRun_SimpleString	vim/vim/src/if_python3.c	/^static int (*py3_PyRun_SimpleString)(char *);$/;"	v	file:
py3_PyRun_String	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyRun_String)(char *, int, PyObject *, PyObject *);$/;"	v	file:
py3_PySequence_Check	vim/vim/src/if_python3.c	/^static int (*py3_PySequence_Check)(PyObject *);$/;"	v	file:
py3_PySequence_Fast	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PySequence_Fast)(PyObject *, const char *);$/;"	v	file:
py3_PySequence_GetItem	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PySequence_GetItem)(PyObject *, Py_ssize_t);$/;"	v	file:
py3_PySequence_Size	vim/vim/src/if_python3.c	/^static Py_ssize_t (*py3_PySequence_Size)(PyObject *);$/;"	v	file:
py3_PySlice_GetIndicesEx	vim/vim/src/if_python3.c	/^static int (*py3_PySlice_GetIndicesEx)(PySliceObject_T *r, Py_ssize_t length,$/;"	v	file:
py3_PySlice_Type	vim/vim/src/if_python3.c	/^static PyTypeObject* py3_PySlice_Type;$/;"	v	file:
py3_PySys_GetObject	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PySys_GetObject)(char *);$/;"	v	file:
py3_PySys_SetArgv	vim/vim/src/if_python3.c	/^static int (*py3_PySys_SetArgv)(int, wchar_t **);$/;"	v	file:
py3_PySys_SetObject	vim/vim/src/if_python3.c	/^static int (*py3_PySys_SetObject)(char *, PyObject *);$/;"	v	file:
py3_PyTuple_GetItem	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyTuple_GetItem)(PyObject *, Py_ssize_t);$/;"	v	file:
py3_PyTuple_Size	vim/vim/src/if_python3.c	/^static Py_ssize_t (*py3_PyTuple_Size)(PyObject *);$/;"	v	file:
py3_PyType_GenericAlloc	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyType_GenericAlloc)(PyTypeObject *type, Py_ssize_t nitems);$/;"	v	file:
py3_PyType_GenericNew	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyType_GenericNew)(PyTypeObject *type, PyObject *args, PyObject *kwds);$/;"	v	file:
py3_PyType_IsSubtype	vim/vim/src/if_python3.c	/^static int (*py3_PyType_IsSubtype)(PyTypeObject *, PyTypeObject *);$/;"	v	file:
py3_PyType_Ready	vim/vim/src/if_python3.c	/^static int (*py3_PyType_Ready)(PyTypeObject *type);$/;"	v	file:
py3_PyType_Type	vim/vim/src/if_python3.c	/^static PyTypeObject* py3_PyType_Type;$/;"	v	file:
py3_PyUnicodeUCS2_FromFormat	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyUnicodeUCS2_FromFormat)(const char *u, ...);$/;"	v	file:
py3_PyUnicodeUCS4_FromFormat	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyUnicodeUCS4_FromFormat)(const char *u, ...);$/;"	v	file:
py3_PyUnicode_AsEncodedString	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyUnicode_AsEncodedString)(PyObject *unicode, const char* encoding, const char* errors);$/;"	v	file:
py3_PyUnicode_AsUTF8	vim/vim/src/if_python3.c	/^static char* (*py3_PyUnicode_AsUTF8)(PyObject *unicode);$/;"	v	file:
py3_PyUnicode_Decode	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyUnicode_Decode)(const char *u, Py_ssize_t size,$/;"	v	file:
py3_PyUnicode_FromFormat	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyUnicode_FromFormat)(const char *u, ...);$/;"	v	file:
py3_PyUnicode_FromString	vim/vim/src/if_python3.c	/^static PyObject* (*py3_PyUnicode_FromString)(const char *u);$/;"	v	file:
py3_Py_BuildValue	vim/vim/src/if_python3.c	/^static PyObject* (*py3_Py_BuildValue)(char *, ...);$/;"	v	file:
py3_Py_Finalize	vim/vim/src/if_python3.c	/^static void (*py3_Py_Finalize)(void);$/;"	v	file:
py3_Py_Initialize	vim/vim/src/if_python3.c	/^static void (*py3_Py_Initialize)(void);$/;"	v	file:
py3_Py_IsInitialized	vim/vim/src/if_python3.c	/^static int (*py3_Py_IsInitialized)(void);$/;"	v	file:
py3_Py_SetPythonHome	vim/vim/src/if_python3.c	/^static void (*py3_Py_SetPythonHome)(wchar_t *home);$/;"	v	file:
py3__PyObject_CallFunction_SizeT	vim/vim/src/if_python3.c	/^static PyObject* (*py3__PyObject_CallFunction_SizeT)(PyObject *, char *, ...);$/;"	v	file:
py3__PyObject_DebugFree	vim/vim/src/if_python3.c	/^static void (*py3__PyObject_DebugFree)(void*);$/;"	v	file:
py3__PyObject_DebugMalloc	vim/vim/src/if_python3.c	/^static void* (*py3__PyObject_DebugMalloc)(size_t);$/;"	v	file:
py3__PyObject_GC_New	vim/vim/src/if_python3.c	/^static PyObject*(*py3__PyObject_GC_New)(PyTypeObject *);$/;"	v	file:
py3__PyObject_Init	vim/vim/src/if_python3.c	/^static PyObject*(*py3__PyObject_Init)(PyObject *, PyTypeObject *);$/;"	v	file:
py3__PyObject_NextNotImplemented	vim/vim/src/if_python3.c	/^static iternextfunc py3__PyObject_NextNotImplemented;$/;"	v	file:
py3__PyUnicode_AsString	vim/vim/src/if_python3.c	/^static char* (*py3__PyUnicode_AsString)(PyObject *unicode);$/;"	v	file:
py3__Py_Dealloc	vim/vim/src/if_python3.c	/^static void (*py3__Py_Dealloc)(PyObject *obj);$/;"	v	file:
py3__Py_FalseStruct	vim/vim/src/if_python3.c	/^static PyObject* py3__Py_FalseStruct;$/;"	v	file:
py3__Py_NegativeRefcount	vim/vim/src/if_python3.c	/^static void (*py3__Py_NegativeRefcount)(const char *fname, int lineno, PyObject *op);$/;"	v	file:
py3__Py_NoneStruct	vim/vim/src/if_python3.c	/^static PyObject* py3__Py_NoneStruct;$/;"	v	file:
py3__Py_RefTotal	vim/vim/src/if_python3.c	/^static Py_ssize_t* py3__Py_RefTotal;$/;"	v	file:
py3__Py_TrueStruct	vim/vim/src/if_python3.c	/^static PyObject* py3__Py_TrueStruct;$/;"	v	file:
py3_funcname_table	vim/vim/src/if_python3.c	/^} py3_funcname_table[] =$/;"	v	typeref:struct:__anon222	file:
py3_runtime_link_init	vim/vim/src/if_python3.c	/^py3_runtime_link_init(char *libname, int verbose)$/;"	f	file:	signature:(char *libname, int verbose)
py3initialised	vim/vim/src/if_python3.c	/^static int py3initialised = 0;$/;"	v	file:
py_PyUnicode_AsEncodedString	vim/vim/src/if_python.c	/^static PyObject *(*py_PyUnicode_AsEncodedString)(PyObject *, char *, char *);$/;"	v	file:
py_chdir	vim/vim/src/if_py_both.h	/^static PyObject *py_chdir;$/;"	v
py_dict_alloc	vim/vim/src/if_py_both.h	/^py_dict_alloc(void)$/;"	f	signature:(void)
py_fchdir	vim/vim/src/if_py_both.h	/^static PyObject *py_fchdir;$/;"	v
py_find_module	vim/vim/src/if_py_both.h	/^static PyObject *py_find_module;$/;"	v
py_fix_cursor	vim/vim/src/if_py_both.h	/^py_fix_cursor(linenr_T lo, linenr_T hi, linenr_T extra)$/;"	f	signature:(linenr_T lo, linenr_T hi, linenr_T extra)
py_getcwd	vim/vim/src/if_py_both.h	/^static PyObject *py_getcwd;$/;"	v
py_list_alloc	vim/vim/src/if_py_both.h	/^py_list_alloc(void)$/;"	f	signature:(void)
py_load_module	vim/vim/src/if_py_both.h	/^static PyObject *py_load_module;$/;"	v
py_memsave	vim/vim/src/if_python.c	/^py_memsave(void *p, size_t len)$/;"	f	file:	signature:(void *p, size_t len)
pydict_to_tv	vim/vim/src/if_py_both.h	/^pydict_to_tv(PyObject *obj, typval_T *tv, PyObject *lookup_dict)$/;"	f	signature:(PyObject *obj, typval_T *tv, PyObject *lookup_dict)
pylinkedlist_S	vim/vim/src/if_py_both.h	/^typedef struct pylinkedlist_S {$/;"	s
pylinkedlist_S::pll_next	vim/vim/src/if_py_both.h	/^    struct pylinkedlist_S	*pll_next;$/;"	m	struct:pylinkedlist_S	typeref:struct:pylinkedlist_S::pylinkedlist_S	access:public
pylinkedlist_S::pll_obj	vim/vim/src/if_py_both.h	/^    PyObject			*pll_obj;$/;"	m	struct:pylinkedlist_S	access:public
pylinkedlist_S::pll_prev	vim/vim/src/if_py_both.h	/^    struct pylinkedlist_S	*pll_prev;$/;"	m	struct:pylinkedlist_S	typeref:struct:pylinkedlist_S::pylinkedlist_S	access:public
pylinkedlist_T	vim/vim/src/if_py_both.h	/^} pylinkedlist_T;$/;"	t	typeref:struct:pylinkedlist_S
pyll_add	vim/vim/src/if_py_both.h	/^pyll_add(PyObject *self, pylinkedlist_T *ref, pylinkedlist_T **last)$/;"	f	signature:(PyObject *self, pylinkedlist_T *ref, pylinkedlist_T **last)
pyll_remove	vim/vim/src/if_py_both.h	/^pyll_remove(pylinkedlist_T *ref, pylinkedlist_T **last)$/;"	f	signature:(pylinkedlist_T *ref, pylinkedlist_T **last)
pymap_to_tv	vim/vim/src/if_py_both.h	/^pymap_to_tv(PyObject *obj, typval_T *tv, PyObject *lookup_dict)$/;"	f	signature:(PyObject *obj, typval_T *tv, PyObject *lookup_dict)
pyseq_to_tv	vim/vim/src/if_py_both.h	/^pyseq_to_tv(PyObject *obj, typval_T *tv, PyObject *lookup_dict)$/;"	f	signature:(PyObject *obj, typval_T *tv, PyObject *lookup_dict)
python3_buffer_free	vim/vim/src/if_python3.c	/^python3_buffer_free(buf_T *buf)$/;"	f	signature:(buf_T *buf)
python3_enabled	vim/vim/src/if_python3.c	/^python3_enabled(int verbose)$/;"	f	signature:(int verbose)
python3_end	vim/vim/src/if_python3.c	/^python3_end(void)$/;"	f	signature:(void)
python3_loaded	vim/vim/src/if_python3.c	/^python3_loaded(void)$/;"	f	signature:(void)
python3_tabpage_free	vim/vim/src/if_python3.c	/^python3_tabpage_free(tabpage_T *tab)$/;"	f	signature:(tabpage_T *tab)
python3_window_free	vim/vim/src/if_python3.c	/^python3_window_free(win_T *win)$/;"	f	signature:(win_T *win)
python_buffer_free	vim/vim/src/if_python.c	/^python_buffer_free(buf_T *buf)$/;"	f	signature:(buf_T *buf)
python_enabled	vim/vim/src/if_python.c	/^python_enabled(int verbose)$/;"	f	signature:(int verbose)
python_end	vim/vim/src/if_python.c	/^python_end(void)$/;"	f	signature:(void)
python_end_called	vim/vim/src/if_python.c	/^static int python_end_called = FALSE;$/;"	v	file:
python_end_called	vim/vim/src/if_python3.c	/^static int python_end_called = FALSE;$/;"	v	file:
python_funcname_table	vim/vim/src/if_python.c	/^} python_funcname_table[] =$/;"	v	typeref:struct:__anon249	file:
python_loaded	vim/vim/src/if_python.c	/^python_loaded(void)$/;"	f	signature:(void)
python_runtime_link_init	vim/vim/src/if_python.c	/^python_runtime_link_init(char *libname, int verbose)$/;"	f	file:	signature:(char *libname, int verbose)
python_tabpage_free	vim/vim/src/if_python.c	/^python_tabpage_free(tabpage_T *tab)$/;"	f	signature:(tabpage_T *tab)
python_window_free	vim/vim/src/if_python.c	/^python_window_free(win_T *win)$/;"	f	signature:(win_T *win)
pytotvfunc	vim/vim/src/if_py_both.h	/^typedef int (*pytotvfunc)(PyObject *, typval_T *, PyObject *);$/;"	t
pøesvìdète	vim/vim/runtime/tutor/tutor.cs	/^     Nyní se pøesvìdète, ¾e Shift-Lock NENÍ stlaèený a nìkolikrát stisknìte$/;"	p
pøíkaz	vim/vim/runtime/tutor/tutor.cs	/^  3. A¾ se dostane¹ na pøíkazový øádek, napi¹ pøíkaz, kterým se dostane¹ zpìt$/;"	p
qf_add_entries	vim/vim/src/quickfix.c	/^qf_add_entries($/;"	f	file:	signature:( qf_info_T *qi, int qf_idx, list_T *list, char_u *title, int action)
qf_add_entry	vim/vim/src/quickfix.c	/^qf_add_entry($/;"	f	file:	signature:( qf_info_T *qi, int qf_idx, char_u *dir, char_u *fname, int bufnum, char_u *mesg, long lnum, int col, int vis_col, char_u *pattern, int nr, int type, int valid)
qf_add_entry	vim/vim/src/quickfix.c	/^static int	qf_add_entry(qf_info_T *qi, int qf_idx, char_u *dir, char_u *fname, int bufnum, char_u *mesg, long lnum, int col, int vis_col, char_u *pattern, int nr, int type, int valid);$/;"	p	file:	signature:(qf_info_T *qi, int qf_idx, char_u *dir, char_u *fname, int bufnum, char_u *mesg, long lnum, int col, int vis_col, char_u *pattern, int nr, int type, int valid)
qf_age	vim/vim/src/ex_docmd.c	124;"	d	file:
qf_age	vim/vim/src/quickfix.c	/^qf_age(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
qf_clean_dir_stack	vim/vim/src/quickfix.c	/^qf_clean_dir_stack(struct dir_stack_T **stackptr)$/;"	f	file:	signature:(struct dir_stack_T **stackptr)
qf_clean_dir_stack	vim/vim/src/quickfix.c	/^static void	qf_clean_dir_stack(struct dir_stack_T **);$/;"	p	file:	signature:(struct dir_stack_T **)
qf_cleared	vim/vim/src/quickfix.c	/^    char_u	qf_cleared;	\/* set to TRUE if line has been deleted *\/$/;"	m	struct:qfline_S	file:	access:public
qf_col	vim/vim/src/quickfix.c	/^    int		qf_col;		\/* column where the error occurred *\/$/;"	m	struct:qfline_S	file:	access:public
qf_count	vim/vim/src/quickfix.c	/^    int		qf_count;	\/* number of errors (0 means empty list) *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_ctx	vim/vim/src/quickfix.c	/^    typval_T	*qf_ctx;	\/* context set by setqflist\/setloclist *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_curlist	vim/vim/src/quickfix.c	/^    int		qf_curlist;	    \/* current error list *\/$/;"	m	struct:qf_info_S	file:	access:public
qf_current_entry	vim/vim/src/quickfix.c	/^qf_current_entry(win_T *wp)$/;"	f	signature:(win_T *wp)
qf_currfile	vim/vim/src/quickfix.c	/^    char_u		*qf_currfile;$/;"	m	struct:qf_list_S	file:	access:public
qf_dir_stack	vim/vim/src/quickfix.c	/^    struct dir_stack_T	*qf_dir_stack;$/;"	m	struct:qf_list_S	typeref:struct:qf_list_S::dir_stack_T	file:	access:public
qf_directory	vim/vim/src/quickfix.c	/^    char_u		*qf_directory;$/;"	m	struct:qf_list_S	file:	access:public
qf_file_stack	vim/vim/src/quickfix.c	/^    struct dir_stack_T	*qf_file_stack;$/;"	m	struct:qf_list_S	typeref:struct:qf_list_S::dir_stack_T	file:	access:public
qf_fill_buffer	vim/vim/src/quickfix.c	/^qf_fill_buffer(qf_info_T *qi, buf_T *buf, qfline_T *old_last)$/;"	f	file:	signature:(qf_info_T *qi, buf_T *buf, qfline_T *old_last)
qf_fill_buffer	vim/vim/src/quickfix.c	/^static void	qf_fill_buffer(qf_info_T *qi, buf_T *buf, qfline_T *old_last);$/;"	p	file:	signature:(qf_info_T *qi, buf_T *buf, qfline_T *old_last)
qf_find_buf	vim/vim/src/quickfix.c	/^qf_find_buf(qf_info_T *qi)$/;"	f	file:	signature:(qf_info_T *qi)
qf_find_buf	vim/vim/src/quickfix.c	/^static buf_T	*qf_find_buf(qf_info_T *qi);$/;"	p	file:	signature:(qf_info_T *qi)
qf_find_win	vim/vim/src/quickfix.c	/^qf_find_win(qf_info_T *qi)$/;"	f	file:	signature:(qf_info_T *qi)
qf_find_win	vim/vim/src/quickfix.c	/^static win_T	*qf_find_win(qf_info_T *qi);$/;"	p	file:	signature:(qf_info_T *qi)
qf_fmt_text	vim/vim/src/quickfix.c	/^qf_fmt_text(char_u *text, char_u *buf, int bufsize)$/;"	f	file:	signature:(char_u *text, char_u *buf, int bufsize)
qf_fmt_text	vim/vim/src/quickfix.c	/^static void	qf_fmt_text(char_u *text, char_u *buf, int bufsize);$/;"	p	file:	signature:(char_u *text, char_u *buf, int bufsize)
qf_fnum	vim/vim/src/quickfix.c	/^    int		qf_fnum;	\/* file number for the line *\/$/;"	m	struct:qfline_S	file:	access:public
qf_free	vim/vim/src/quickfix.c	/^qf_free(qf_info_T *qi, int idx)$/;"	f	file:	signature:(qf_info_T *qi, int idx)
qf_free	vim/vim/src/quickfix.c	/^static void	qf_free(qf_info_T *qi, int idx);$/;"	p	file:	signature:(qf_info_T *qi, int idx)
qf_free_all	vim/vim/src/quickfix.c	/^qf_free_all(win_T *wp)$/;"	f	signature:(win_T *wp)
qf_free_items	vim/vim/src/quickfix.c	/^qf_free_items(qf_info_T *qi, int idx)$/;"	f	file:	signature:(qf_info_T *qi, int idx)
qf_free_stack	vim/vim/src/quickfix.c	/^qf_free_stack(win_T *wp, qf_info_T *qi)$/;"	f	file:	signature:(win_T *wp, qf_info_T *qi)
qf_get_cur_idx	vim/vim/src/quickfix.c	/^qf_get_cur_idx(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
qf_get_cur_valid_idx	vim/vim/src/quickfix.c	/^qf_get_cur_valid_idx(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
qf_get_fnum	vim/vim/src/quickfix.c	/^qf_get_fnum(qf_info_T *qi, int qf_idx, char_u *directory, char_u *fname)$/;"	f	file:	signature:(qf_info_T *qi, int qf_idx, char_u *directory, char_u *fname)
qf_get_fnum	vim/vim/src/quickfix.c	/^static int	qf_get_fnum(qf_info_T *qi, int qf_idx, char_u *, char_u *);$/;"	p	file:	signature:(qf_info_T *qi, int qf_idx, char_u *, char_u *)
qf_get_next_buf_line	vim/vim/src/quickfix.c	/^qf_get_next_buf_line(qfstate_T *state)$/;"	f	file:	signature:(qfstate_T *state)
qf_get_next_file_line	vim/vim/src/quickfix.c	/^qf_get_next_file_line(qfstate_T *state)$/;"	f	file:	signature:(qfstate_T *state)
qf_get_next_list_line	vim/vim/src/quickfix.c	/^qf_get_next_list_line(qfstate_T *state)$/;"	f	file:	signature:(qfstate_T *state)
qf_get_next_str_line	vim/vim/src/quickfix.c	/^qf_get_next_str_line(qfstate_T *state)$/;"	f	file:	signature:(qfstate_T *state)
qf_get_nextline	vim/vim/src/quickfix.c	/^qf_get_nextline(qfstate_T *state)$/;"	f	file:	signature:(qfstate_T *state)
qf_get_nth_valid_entry	vim/vim/src/quickfix.c	/^qf_get_nth_valid_entry(qf_info_T *qi, int n, int fdo)$/;"	f	file:	signature:(qf_info_T *qi, int n, int fdo)
qf_get_size	vim/vim/src/quickfix.c	/^qf_get_size(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
qf_grow_linebuf	vim/vim/src/quickfix.c	/^qf_grow_linebuf(qfstate_T *state, int newsz)$/;"	f	file:	signature:(qfstate_T *state, int newsz)
qf_guess_filepath	vim/vim/src/quickfix.c	/^qf_guess_filepath(qf_info_T *qi, int qf_idx, char_u *filename)$/;"	f	file:	signature:(qf_info_T *qi, int qf_idx, char_u *filename)
qf_guess_filepath	vim/vim/src/quickfix.c	/^static char_u	*qf_guess_filepath(qf_info_T *qi, int qf_idx, char_u *);$/;"	p	file:	signature:(qf_info_T *qi, int qf_idx, char_u *)
qf_history	vim/vim/src/ex_docmd.c	125;"	d	file:
qf_history	vim/vim/src/quickfix.c	/^qf_history(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
qf_index	vim/vim/src/quickfix.c	/^    int		qf_index;	\/* current index in the error list *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_info_S	vim/vim/src/quickfix.c	/^struct qf_info_S$/;"	s	file:
qf_info_S::qf_curlist	vim/vim/src/quickfix.c	/^    int		qf_curlist;	    \/* current error list *\/$/;"	m	struct:qf_info_S	file:	access:public
qf_info_S::qf_listcount	vim/vim/src/quickfix.c	/^    int		qf_listcount;	    \/* current number of lists *\/$/;"	m	struct:qf_info_S	file:	access:public
qf_info_S::qf_lists	vim/vim/src/quickfix.c	/^    qf_list_T	qf_lists[LISTCOUNT];$/;"	m	struct:qf_info_S	file:	access:public
qf_info_S::qf_refcount	vim/vim/src/quickfix.c	/^    int		qf_refcount;$/;"	m	struct:qf_info_S	file:	access:public
qf_info_T	vim/vim/src/structs.h	/^typedef struct qf_info_S qf_info_T;$/;"	t	typeref:struct:qf_info_S
qf_init	vim/vim/src/quickfix.c	/^qf_init($/;"	f	signature:( win_T *wp, char_u *efile, char_u *errorformat, int newlist, char_u *qf_title, char_u *enc)
qf_init_ext	vim/vim/src/quickfix.c	/^qf_init_ext($/;"	f	file:	signature:( qf_info_T *qi, int qf_idx, char_u *efile, buf_T *buf, typval_T *tv, char_u *errorformat, int newlist, linenr_T lnumfirst, linenr_T lnumlast, char_u *qf_title, char_u *enc)
qf_init_ext	vim/vim/src/quickfix.c	/^static int	qf_init_ext(qf_info_T *qi, int qf_idx, char_u *efile, buf_T *buf, typval_T *tv, char_u *errorformat, int newlist, linenr_T lnumfirst, linenr_T lnumlast, char_u *qf_title, char_u *enc);$/;"	p	file:	signature:(qf_info_T *qi, int qf_idx, char_u *efile, buf_T *buf, typval_T *tv, char_u *errorformat, int newlist, linenr_T lnumfirst, linenr_T lnumlast, char_u *qf_title, char_u *enc)
qf_jump	vim/vim/src/quickfix.c	/^qf_jump($/;"	f	signature:( qf_info_T *qi, int dir, int errornr, int forceit)
qf_last	vim/vim/src/quickfix.c	/^    qfline_T	*qf_last;	\/* pointer to the last error *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_last_bufname	vim/vim/src/quickfix.c	/^static char_u   *qf_last_bufname = NULL;$/;"	v	file:
qf_last_bufref	vim/vim/src/quickfix.c	/^static bufref_T  qf_last_bufref = {NULL, 0, 0};$/;"	v	file:
qf_list	vim/vim/src/ex_docmd.c	123;"	d	file:
qf_list	vim/vim/src/quickfix.c	/^qf_list(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
qf_list_S	vim/vim/src/quickfix.c	/^typedef struct qf_list_S$/;"	s	file:
qf_list_S::qf_count	vim/vim/src/quickfix.c	/^    int		qf_count;	\/* number of errors (0 means empty list) *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_ctx	vim/vim/src/quickfix.c	/^    typval_T	*qf_ctx;	\/* context set by setqflist\/setloclist *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_currfile	vim/vim/src/quickfix.c	/^    char_u		*qf_currfile;$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_dir_stack	vim/vim/src/quickfix.c	/^    struct dir_stack_T	*qf_dir_stack;$/;"	m	struct:qf_list_S	typeref:struct:qf_list_S::dir_stack_T	file:	access:public
qf_list_S::qf_directory	vim/vim/src/quickfix.c	/^    char_u		*qf_directory;$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_file_stack	vim/vim/src/quickfix.c	/^    struct dir_stack_T	*qf_file_stack;$/;"	m	struct:qf_list_S	typeref:struct:qf_list_S::dir_stack_T	file:	access:public
qf_list_S::qf_index	vim/vim/src/quickfix.c	/^    int		qf_index;	\/* current index in the error list *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_last	vim/vim/src/quickfix.c	/^    qfline_T	*qf_last;	\/* pointer to the last error *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_multiignore	vim/vim/src/quickfix.c	/^    int			qf_multiignore;$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_multiline	vim/vim/src/quickfix.c	/^    int			qf_multiline;$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_multiscan	vim/vim/src/quickfix.c	/^    int			qf_multiscan;$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_nonevalid	vim/vim/src/quickfix.c	/^    int		qf_nonevalid;	\/* TRUE if not a single valid entry found *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_ptr	vim/vim/src/quickfix.c	/^    qfline_T	*qf_ptr;	\/* pointer to the current error *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_start	vim/vim/src/quickfix.c	/^    qfline_T	*qf_start;	\/* pointer to the first error *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_list_S::qf_title	vim/vim/src/quickfix.c	/^    char_u	*qf_title;	\/* title derived from the command that created$/;"	m	struct:qf_list_S	file:	access:public
qf_list_T	vim/vim/src/quickfix.c	/^} qf_list_T;$/;"	t	typeref:struct:qf_list_S	file:
qf_listcount	vim/vim/src/quickfix.c	/^    int		qf_listcount;	    \/* current number of lists *\/$/;"	m	struct:qf_info_S	file:	access:public
qf_lists	vim/vim/src/quickfix.c	/^    qf_list_T	qf_lists[LISTCOUNT];$/;"	m	struct:qf_info_S	file:	access:public
qf_lnum	vim/vim/src/quickfix.c	/^    linenr_T	qf_lnum;	\/* line number where the error occurred *\/$/;"	m	struct:qfline_S	file:	access:public
qf_mark_adjust	vim/vim/src/quickfix.c	/^qf_mark_adjust($/;"	f	signature:( win_T *wp, linenr_T line1, linenr_T line2, long amount, long amount_after)
qf_msg	vim/vim/src/quickfix.c	/^qf_msg(qf_info_T *qi, int which, char *lead)$/;"	f	file:	signature:(qf_info_T *qi, int which, char *lead)
qf_multiignore	vim/vim/src/quickfix.c	/^    int			qf_multiignore;$/;"	m	struct:qf_list_S	file:	access:public
qf_multiline	vim/vim/src/quickfix.c	/^    int			qf_multiline;$/;"	m	struct:qf_list_S	file:	access:public
qf_multiscan	vim/vim/src/quickfix.c	/^    int			qf_multiscan;$/;"	m	struct:qf_list_S	file:	access:public
qf_new_list	vim/vim/src/quickfix.c	/^qf_new_list(qf_info_T *qi, char_u *qf_title)$/;"	f	file:	signature:(qf_info_T *qi, char_u *qf_title)
qf_new_list	vim/vim/src/quickfix.c	/^static void	qf_new_list(qf_info_T *qi, char_u *qf_title);$/;"	p	file:	signature:(qf_info_T *qi, char_u *qf_title)
qf_next	vim/vim/src/quickfix.c	/^    qfline_T	*qf_next;	\/* pointer to next error in the list *\/$/;"	m	struct:qfline_S	file:	access:public
qf_nonevalid	vim/vim/src/quickfix.c	/^    int		qf_nonevalid;	\/* TRUE if not a single valid entry found *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_nr	vim/vim/src/quickfix.c	/^    int		qf_nr;		\/* error number *\/$/;"	m	struct:qfline_S	file:	access:public
qf_parse_line	vim/vim/src/quickfix.c	/^qf_parse_line($/;"	f	file:	signature:( qf_info_T *qi, int qf_idx, char_u *linebuf, int linelen, efm_T *fmt_first, qffields_T *fields)
qf_pattern	vim/vim/src/quickfix.c	/^    char_u	*qf_pattern;	\/* search pattern for the error *\/$/;"	m	struct:qfline_S	file:	access:public
qf_pop_dir	vim/vim/src/quickfix.c	/^qf_pop_dir(struct dir_stack_T **stackptr)$/;"	f	file:	signature:(struct dir_stack_T **stackptr)
qf_pop_dir	vim/vim/src/quickfix.c	/^static char_u	*qf_pop_dir(struct dir_stack_T **);$/;"	p	file:	signature:(struct dir_stack_T **)
qf_prev	vim/vim/src/quickfix.c	/^    qfline_T	*qf_prev;	\/* pointer to previous error in the list *\/$/;"	m	struct:qfline_S	file:	access:public
qf_ptr	vim/vim/src/quickfix.c	/^    qfline_T	*qf_ptr;	\/* pointer to the current error *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_push_dir	vim/vim/src/quickfix.c	/^qf_push_dir(char_u *dirbuf, struct dir_stack_T **stackptr, int is_file_stack)$/;"	f	file:	signature:(char_u *dirbuf, struct dir_stack_T **stackptr, int is_file_stack)
qf_push_dir	vim/vim/src/quickfix.c	/^static char_u	*qf_push_dir(char_u *, struct dir_stack_T **, int is_file_stack);$/;"	p	file:	signature:(char_u *, struct dir_stack_T **, int is_file_stack)
qf_refcount	vim/vim/src/quickfix.c	/^    int		qf_refcount;$/;"	m	struct:qf_info_S	file:	access:public
qf_set_properties	vim/vim/src/quickfix.c	/^qf_set_properties(qf_info_T *qi, dict_T *what, int action)$/;"	f	file:	signature:(qf_info_T *qi, dict_T *what, int action)
qf_set_title_var	vim/vim/src/quickfix.c	/^qf_set_title_var(qf_info_T *qi)$/;"	f	file:	signature:(qf_info_T *qi)
qf_set_title_var	vim/vim/src/quickfix.c	/^static void	qf_set_title_var(qf_info_T *qi);$/;"	p	file:	signature:(qf_info_T *qi)
qf_start	vim/vim/src/quickfix.c	/^    qfline_T	*qf_start;	\/* pointer to the first error *\/$/;"	m	struct:qf_list_S	file:	access:public
qf_store_title	vim/vim/src/quickfix.c	/^qf_store_title(qf_info_T *qi, int qf_idx, char_u *title)$/;"	f	file:	signature:(qf_info_T *qi, int qf_idx, char_u *title)
qf_store_title	vim/vim/src/quickfix.c	/^static void	qf_store_title(qf_info_T *qi, int qf_idx, char_u *title);$/;"	p	file:	signature:(qf_info_T *qi, int qf_idx, char_u *title)
qf_text	vim/vim/src/quickfix.c	/^    char_u	*qf_text;	\/* description of the error *\/$/;"	m	struct:qfline_S	file:	access:public
qf_title	vim/vim/src/quickfix.c	/^    char_u	*qf_title;	\/* title derived from the command that created$/;"	m	struct:qf_list_S	file:	access:public
qf_type	vim/vim/src/quickfix.c	/^    char_u	qf_type;	\/* type of the error (mostly 'E'); 1 for$/;"	m	struct:qfline_S	file:	access:public
qf_types	vim/vim/src/quickfix.c	/^qf_types(int c, int nr)$/;"	f	file:	signature:(int c, int nr)
qf_types	vim/vim/src/quickfix.c	/^static char_u	*qf_types(int, int);$/;"	p	file:	signature:(int, int)
qf_update_buffer	vim/vim/src/quickfix.c	/^qf_update_buffer(qf_info_T *qi, qfline_T *old_last)$/;"	f	file:	signature:(qf_info_T *qi, qfline_T *old_last)
qf_update_buffer	vim/vim/src/quickfix.c	/^static void	qf_update_buffer(qf_info_T *qi, qfline_T *old_last);$/;"	p	file:	signature:(qf_info_T *qi, qfline_T *old_last)
qf_update_win_titlevar	vim/vim/src/quickfix.c	/^qf_update_win_titlevar(qf_info_T *qi)$/;"	f	file:	signature:(qf_info_T *qi)
qf_valid	vim/vim/src/quickfix.c	/^    char_u	qf_valid;	\/* valid error message detected *\/$/;"	m	struct:qfline_S	file:	access:public
qf_viscol	vim/vim/src/quickfix.c	/^    char_u	qf_viscol;	\/* set to TRUE if qf_col is screen column *\/$/;"	m	struct:qfline_S	file:	access:public
qf_win_goto	vim/vim/src/quickfix.c	/^qf_win_goto(win_T *win, linenr_T lnum)$/;"	f	file:	signature:(win_T *win, linenr_T lnum)
qf_win_pos_update	vim/vim/src/quickfix.c	/^qf_win_pos_update($/;"	f	file:	signature:( qf_info_T *qi, int old_qf_index)
qf_win_pos_update	vim/vim/src/quickfix.c	/^static int	qf_win_pos_update(qf_info_T *qi, int old_qf_index);$/;"	p	file:	signature:(qf_info_T *qi, int old_qf_index)
qffields_T	vim/vim/src/quickfix.c	/^} qffields_T;$/;"	t	typeref:struct:__anon14	file:
qfline_S	vim/vim/src/quickfix.c	/^struct qfline_S$/;"	s	file:
qfline_S::qf_cleared	vim/vim/src/quickfix.c	/^    char_u	qf_cleared;	\/* set to TRUE if line has been deleted *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_col	vim/vim/src/quickfix.c	/^    int		qf_col;		\/* column where the error occurred *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_fnum	vim/vim/src/quickfix.c	/^    int		qf_fnum;	\/* file number for the line *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_lnum	vim/vim/src/quickfix.c	/^    linenr_T	qf_lnum;	\/* line number where the error occurred *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_next	vim/vim/src/quickfix.c	/^    qfline_T	*qf_next;	\/* pointer to next error in the list *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_nr	vim/vim/src/quickfix.c	/^    int		qf_nr;		\/* error number *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_pattern	vim/vim/src/quickfix.c	/^    char_u	*qf_pattern;	\/* search pattern for the error *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_prev	vim/vim/src/quickfix.c	/^    qfline_T	*qf_prev;	\/* pointer to previous error in the list *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_text	vim/vim/src/quickfix.c	/^    char_u	*qf_text;	\/* description of the error *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_type	vim/vim/src/quickfix.c	/^    char_u	qf_type;	\/* type of the error (mostly 'E'); 1 for$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_valid	vim/vim/src/quickfix.c	/^    char_u	qf_valid;	\/* valid error message detected *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_S::qf_viscol	vim/vim/src/quickfix.c	/^    char_u	qf_viscol;	\/* set to TRUE if qf_col is screen column *\/$/;"	m	struct:qfline_S	file:	access:public
qfline_T	vim/vim/src/quickfix.c	/^typedef struct qfline_S qfline_T;$/;"	t	typeref:struct:qfline_S	file:
qfstate_T	vim/vim/src/quickfix.c	/^} qfstate_T;$/;"	t	typeref:struct:__anon13	file:
ql_info	vim/vim/src/quickfix.c	/^static qf_info_T ql_info;	\/* global quickfix list *\/$/;"	v	file:
qnx_clip_init	vim/vim/src/os_qnx.c	/^void qnx_clip_init(void)$/;"	f	signature:(void)
qnx_init	vim/vim/src/os_qnx.c	/^void qnx_init(void)$/;"	f	signature:(void)
qsort	vim/vim/src/misc2.c	/^qsort($/;"	f	signature:( void *base, size_t elm_count, size_t elm_size, int (*cmp)(const void *, const void *))
qsort	vim/vim/src/proto.h	/^void qsort(void *base, size_t elm_count, size_t elm_size, int (*cmp)(const void *, const void *));$/;"	p	signature:(void *base, size_t elm_count, size_t elm_size, int (*cmp)(const void *, const void *))
quality	vim/vim/src/os_mswin.c	/^    DWORD	quality;$/;"	m	struct:quality_pair	file:	access:public
quality_id2name	vim/vim/src/os_mswin.c	/^quality_id2name(DWORD id)$/;"	f	signature:(DWORD id)
quality_pair	vim/vim/src/os_mswin.c	/^struct quality_pair$/;"	s	file:
quality_pair::name	vim/vim/src/os_mswin.c	/^    char	*name;$/;"	m	struct:quality_pair	file:	access:public
quality_pair::quality	vim/vim/src/os_mswin.c	/^    DWORD	quality;$/;"	m	struct:quality_pair	file:	access:public
quality_pairs	vim/vim/src/os_mswin.c	/^quality_pairs[] = {$/;"	v	typeref:struct:quality_pair	file:
query	vim/vim/src/hangulin.c	45;"	d	file:
query_dec_mode	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static int query_dec_mode(int mode)$/;"	f	file:	signature:(int mode)
query_rqss_numeric	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static int query_rqss_numeric(char *cmd)$/;"	f	file:	signature:(char *cmd)
quit_more	vim/vim/src/globals.h	/^EXTERN int	quit_more INIT(= FALSE);    \/* 'q' hit at "--more--" msg *\/$/;"	v
quitmore	vim/vim/src/ex_docmd.c	/^static int	quitmore = 0;$/;"	v	file:
quote_meta	vim/vim/src/edit.c	/^quote_meta(char_u *dest, char_u *src, int len)$/;"	f	file:	signature:(char_u *dest, char_u *src, int len)
quote_meta	vim/vim/src/edit.c	/^static unsigned  quote_meta(char_u *dest, char_u *str, int len);$/;"	p	file:	signature:(char_u *dest, char_u *str, int len)
r_cmdno	vim/vim/src/netbeans.c	/^static int r_cmdno;			\/* current command number for reply *\/$/;"	v	file:
raise_if_error	vim/vim/src/if_mzsch.c	/^raise_if_error(void)$/;"	f	signature:(void)
raise_vim_exn	vim/vim/src/if_mzsch.c	/^raise_vim_exn(const char *add_info)$/;"	f	signature:(const char *add_info)
ramp24	vim/vim/src/libvterm/src/pen.c	/^static int ramp24[] = {$/;"	v	file:
ramp6	vim/vim/src/libvterm/src/pen.c	/^static int ramp6[] = {$/;"	v	file:
randbyte_offset	vim/vim/src/blowfish.c	/^    int		randbyte_offset;$/;"	m	struct:__anon72	file:	access:public
rangeEnd	vim/vim/src/mbyte.c	/^    int rangeEnd;$/;"	m	struct:__anon3	file:	access:public
rangeStart	vim/vim/src/mbyte.c	/^    int rangeStart;$/;"	m	struct:__anon3	file:	access:public
range_end	vim/vim/src/if_mzsch.c	/^static long range_end;$/;"	v	file:
range_end	vim/vim/src/if_tcl.c	/^    int range_start, range_end;$/;"	m	struct:__anon140	file:	access:public
range_start	vim/vim/src/if_mzsch.c	/^static long range_start;$/;"	v	file:
range_start	vim/vim/src/if_tcl.c	/^    int range_start, range_end;$/;"	m	struct:__anon140	file:	access:public
rangeinitializer	vim/vim/src/if_py_both.h	/^typedef void (*rangeinitializer)(void *);$/;"	t
raw_in	vim/vim/src/os_amiga.c	/^static BPTR		raw_in = (BPTR)NULL;$/;"	v	file:
raw_out	vim/vim/src/os_amiga.c	/^static BPTR		raw_out = (BPTR)NULL;$/;"	v	file:
rawlen	vim/vim/src/winclip.c	/^    int rawlen;		\/* length of clip_star.format_raw, including encoding,$/;"	m	struct:__anon22	file:	access:public
rb_ary_new	vim/vim/src/if_ruby.c	283;"	d	file:
rb_ary_push	vim/vim/src/if_ruby.c	284;"	d	file:
rb_assoc_new	vim/vim/src/if_ruby.c	210;"	d	file:
rb_cFalseClass	vim/vim/src/if_ruby.c	44;"	d	file:
rb_cFixnum	vim/vim/src/if_ruby.c	45;"	d	file:
rb_cFloat	vim/vim/src/if_ruby.c	50;"	d	file:
rb_cInteger	vim/vim/src/if_ruby.c	47;"	d	file:
rb_cNilClass	vim/vim/src/if_ruby.c	52;"	d	file:
rb_cObject	vim/vim/src/if_ruby.c	211;"	d	file:
rb_cSymbol	vim/vim/src/if_ruby.c	53;"	d	file:
rb_cTrueClass	vim/vim/src/if_ruby.c	54;"	d	file:
rb_check_type	vim/vim/src/if_ruby.c	212;"	d	file:
rb_check_typeddata	vim/vim/src/if_ruby.c	214;"	d	file:
rb_class_path	vim/vim/src/if_ruby.c	216;"	d	file:
rb_data_object_alloc	vim/vim/src/if_ruby.c	224;"	d	file:
rb_data_typed_object_alloc	vim/vim/src/if_ruby.c	221;"	d	file:
rb_data_typed_object_wrap	vim/vim/src/if_ruby.c	219;"	d	file:
rb_define_class_under	vim/vim/src/if_ruby.c	226;"	d	file:
rb_define_const	vim/vim/src/if_ruby.c	227;"	d	file:
rb_define_global_function	vim/vim/src/if_ruby.c	228;"	d	file:
rb_define_method	vim/vim/src/if_ruby.c	229;"	d	file:
rb_define_module	vim/vim/src/if_ruby.c	230;"	d	file:
rb_define_module_function	vim/vim/src/if_ruby.c	231;"	d	file:
rb_define_singleton_method	vim/vim/src/if_ruby.c	232;"	d	file:
rb_define_virtual_variable	vim/vim/src/if_ruby.c	233;"	d	file:
rb_eArgError	vim/vim/src/if_ruby.c	235;"	d	file:
rb_eIndexError	vim/vim/src/if_ruby.c	236;"	d	file:
rb_eRuntimeError	vim/vim/src/if_ruby.c	237;"	d	file:
rb_eStandardError	vim/vim/src/if_ruby.c	238;"	d	file:
rb_enc_find	vim/vim/src/if_ruby.c	315;"	d	file:
rb_enc_find_index	vim/vim/src/if_ruby.c	314;"	d	file:
rb_enc_str_new	vim/vim/src/if_ruby.c	316;"	d	file:
rb_enc_str_new	vim/vim/src/if_ruby.c	317;"	d	file:
rb_errinfo	vim/vim/src/if_ruby.c	298;"	d	file:
rb_eval_string_protect	vim/vim/src/if_ruby.c	239;"	d	file:
rb_fix2int	vim/vim/src/if_ruby.c	107;"	d	file:
rb_fix2int	vim/vim/src/if_ruby.c	247;"	d	file:
rb_fix2int_stub	vim/vim/src/if_ruby.c	/^long rb_fix2int_stub(VALUE x)$/;"	f	signature:(VALUE x)
rb_float_new	vim/vim/src/if_ruby.c	282;"	d	file:
rb_float_new_in_heap	vim/vim/src/if_ruby.c	/^rb_float_new_in_heap(double d)$/;"	f	signature:(double d)
rb_gc_writebarrier_unprotect	vim/vim/src/if_ruby.c	117;"	d	file:
rb_gc_writebarrier_unprotect_promoted	vim/vim/src/if_ruby.c	114;"	d	file:
rb_gc_writebarrier_unprotect_promoted_stub	vim/vim/src/if_ruby.c	/^void rb_gc_writebarrier_unprotect_promoted_stub(VALUE obj)$/;"	f	signature:(VALUE obj)
rb_gc_writebarrier_unprotect_stub	vim/vim/src/if_ruby.c	/^void rb_gc_writebarrier_unprotect_stub(VALUE obj)$/;"	f	signature:(VALUE obj)
rb_global_variable	vim/vim/src/if_ruby.c	240;"	d	file:
rb_hash_aset	vim/vim/src/if_ruby.c	241;"	d	file:
rb_hash_new	vim/vim/src/if_ruby.c	242;"	d	file:
rb_ia64_bsp	vim/vim/src/if_ruby.c	287;"	d	file:
rb_inspect	vim/vim/src/if_ruby.c	243;"	d	file:
rb_int2big	vim/vim/src/if_ruby.c	100;"	d	file:
rb_int2big_stub	vim/vim/src/if_ruby.c	/^VALUE rb_int2big_stub(SIGNED_VALUE x)$/;"	f	signature:(SIGNED_VALUE x)
rb_int2inum	vim/vim/src/if_ruby.c	244;"	d	file:
rb_lastline_get	vim/vim/src/if_ruby.c	252;"	d	file:
rb_lastline_set	vim/vim/src/if_ruby.c	253;"	d	file:
rb_load_protect	vim/vim/src/if_ruby.c	254;"	d	file:
rb_num2int	vim/vim/src/if_ruby.c	108;"	d	file:
rb_num2int	vim/vim/src/if_ruby.c	248;"	d	file:
rb_num2int_stub	vim/vim/src/if_ruby.c	/^long rb_num2int_stub(VALUE x)$/;"	f	signature:(VALUE x)
rb_num2long	vim/vim/src/if_ruby.c	256;"	d	file:
rb_num2long	vim/vim/src/if_ruby.c	99;"	d	file:
rb_num2long_stub	vim/vim/src/if_ruby.c	/^long rb_num2long_stub(VALUE x)$/;"	f	signature:(VALUE x)
rb_num2uint	vim/vim/src/if_ruby.c	250;"	d	file:
rb_num2ulong	vim/vim/src/if_ruby.c	/^unsigned long rb_num2ulong(VALUE x)$/;"	f	signature:(VALUE x)
rb_num2ulong	vim/vim/src/if_ruby.c	259;"	d	file:
rb_obj_alloc	vim/vim/src/if_ruby.c	261;"	d	file:
rb_obj_as_string	vim/vim/src/if_ruby.c	262;"	d	file:
rb_obj_id	vim/vim/src/if_ruby.c	263;"	d	file:
rb_raise	vim/vim/src/if_ruby.c	264;"	d	file:
rb_require	vim/vim/src/if_ruby.c	319;"	d	file:
rb_sprintf	vim/vim/src/if_ruby.c	318;"	d	file:
rb_stdout	vim/vim/src/if_ruby.c	234;"	d	file:
rb_str2cstr	vim/vim/src/if_ruby.c	295;"	d	file:
rb_str_cat	vim/vim/src/if_ruby.c	265;"	d	file:
rb_str_concat	vim/vim/src/if_ruby.c	266;"	d	file:
rb_str_new	vim/vim/src/if_ruby.c	267;"	d	file:
rb_str_new	vim/vim/src/if_ruby.c	268;"	d	file:
rb_str_new2	vim/vim/src/if_ruby.c	277;"	d	file:
rb_str_new_cstr	vim/vim/src/if_ruby.c	274;"	d	file:
rb_str_new_cstr	vim/vim/src/if_ruby.c	275;"	d	file:
rb_string_value	vim/vim/src/if_ruby.c	280;"	d	file:
rb_string_value_ptr	vim/vim/src/if_ruby.c	281;"	d	file:
rb_w32_snprintf	vim/vim/src/if_ruby.c	308;"	d	file:
rbg_status	vim/vim/src/term.c	/^static int rbg_status = RBG_GET;$/;"	v	file:
rcArea	vim/vim/src/gui_w32.c	/^    RECT  rcArea;$/;"	m	struct:tagCOMPOSITIONFORM	file:	access:public
rc_did_emsg	vim/vim/src/globals.h	/^EXTERN int	rc_did_emsg INIT(= FALSE);  \/* vim_regcomp() called emsg() *\/$/;"	v
re2post	vim/vim/src/regexp_nfa.c	/^re2post(void)$/;"	f	file:	signature:(void)
re2post	vim/vim/src/regexp_nfa.c	/^static int *re2post(void);$/;"	p	file:	signature:(void)
re_engine	vim/vim/src/regexp.h	/^    unsigned		re_engine;   \/* automatic, backtracking or nfa engine *\/$/;"	m	struct:regprog	access:public
re_engine	vim/vim/src/regexp.h	/^    unsigned		re_engine;$/;"	m	struct:__anon143	access:public
re_engine	vim/vim/src/regexp.h	/^    unsigned		re_engine;$/;"	m	struct:__anon144	access:public
re_extmatch_in	vim/vim/src/globals.h	/^EXTERN reg_extmatch_T *re_extmatch_in INIT(= NULL); \/* Used by vim_regexec():$/;"	v
re_extmatch_out	vim/vim/src/globals.h	/^EXTERN reg_extmatch_T *re_extmatch_out INIT(= NULL); \/* Set by vim_regexec()$/;"	v
re_flags	vim/vim/src/regexp.h	/^    unsigned		re_flags;    \/* second argument for vim_regcomp() *\/$/;"	m	struct:__anon143	access:public
re_flags	vim/vim/src/regexp.h	/^    unsigned		re_flags;    \/* second argument for vim_regcomp() *\/$/;"	m	struct:__anon144	access:public
re_flags	vim/vim/src/regexp.h	/^    unsigned		re_flags;    \/* second argument for vim_regcomp() *\/$/;"	m	struct:regprog	access:public
re_has_z	vim/vim/src/regexp.c	/^static int	re_has_z;	\/* \\z item detected *\/$/;"	v	file:
re_lookbehind	vim/vim/src/regexp.c	/^re_lookbehind(regprog_T *prog)$/;"	f	signature:(regprog_T *prog)
re_mult_next	vim/vim/src/regexp.c	/^re_mult_next(char *what)$/;"	f	file:	signature:(char *what)
re_mult_next	vim/vim/src/regexp.c	/^static int re_mult_next(char *what);$/;"	p	file:	signature:(char *what)
re_multi_type	vim/vim/src/regexp.c	/^re_multi_type(int c)$/;"	f	file:	signature:(int c)
re_multi_type	vim/vim/src/regexp.c	/^static int re_multi_type(int);$/;"	p	file:	signature:(int)
re_multiline	vim/vim/src/regexp.c	/^re_multiline(regprog_T *prog)$/;"	f	signature:(regprog_T *prog)
re_num_cmp	vim/vim/src/regexp.c	/^re_num_cmp(long_u val, char_u *scan)$/;"	f	file:	signature:(long_u val, char_u *scan)
re_num_cmp	vim/vim/src/regexp.c	/^static int	re_num_cmp(long_u val, char_u *scan);$/;"	p	file:	signature:(long_u val, char_u *scan)
re_put_long	vim/vim/src/regexp.c	/^re_put_long(char_u *p, long_u val)$/;"	f	file:	signature:(char_u *p, long_u val)
re_put_long	vim/vim/src/regexp.c	/^static char_u	*re_put_long(char_u *pr, long_u val);$/;"	p	file:	signature:(char_u *pr, long_u val)
read_buffer	vim/vim/src/buffer.c	/^read_buffer($/;"	f	file:	signature:( int read_stdin, exarg_T *eap, int flags)
read_charflags_section	vim/vim/src/spellfile.c	/^read_charflags_section(FILE *fd)$/;"	f	file:	signature:(FILE *fd)
read_charflags_section	vim/vim/src/spellfile.c	/^static int read_charflags_section(FILE *fd);$/;"	p	file:	signature:(FILE *fd)
read_cmd_fd	vim/vim/src/globals.h	/^EXTERN int	read_cmd_fd INIT(= 0);	    \/* fd to read commands from *\/$/;"	v
read_cnt_string	vim/vim/src/spellfile.c	/^read_cnt_string(FILE *fd, int cnt_bytes, int *cntp)$/;"	f	file:	signature:(FILE *fd, int cnt_bytes, int *cntp)
read_cnt_string	vim/vim/src/spellfile.c	/^static char_u *read_cnt_string(FILE *fd, int cnt_bytes, int *lenp);$/;"	p	file:	signature:(FILE *fd, int cnt_bytes, int *lenp)
read_compound	vim/vim/src/spellfile.c	/^read_compound(FILE *fd, slang_T *slang, int len)$/;"	f	file:	signature:(FILE *fd, slang_T *slang, int len)
read_compound	vim/vim/src/spellfile.c	/^static int read_compound(FILE *fd, slang_T *slang, int len);$/;"	p	file:	signature:(FILE *fd, slang_T *slang, int len)
read_console_input	vim/vim/src/os_win32.c	/^read_console_input($/;"	f	file:	signature:( HANDLE hInput, INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpEvents)
read_csi	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static char *read_csi()$/;"	f	file:
read_dcs	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static char *read_dcs()$/;"	f	file:
read_edit	vim/vim/src/ex_cmds.h	/^    int		read_edit;	\/* ++edit argument *\/$/;"	m	struct:exarg	access:public
read_eintr	vim/vim/src/fileio.c	/^read_eintr(int fd, void *buf, size_t bufsize)$/;"	f	signature:(int fd, void *buf, size_t bufsize)
read_eintr	vim/vim/src/vim.h	1758;"	d
read_error_exit	vim/vim/src/ui.c	/^read_error_exit(void)$/;"	f	signature:(void)
read_from_input_buf	vim/vim/src/ui.c	/^read_from_input_buf(char_u *buf, long maxlen)$/;"	f	signature:(char_u *buf, long maxlen)
read_limits	vim/vim/src/regexp.c	/^read_limits(long *minval, long *maxval)$/;"	f	file:	signature:(long *minval, long *maxval)
read_limits	vim/vim/src/regexp.c	/^static int	read_limits(long *, long *);$/;"	p	file:	signature:(long *, long *)
read_prefcond_section	vim/vim/src/spellfile.c	/^read_prefcond_section(FILE *fd, slang_T *lp)$/;"	f	file:	signature:(FILE *fd, slang_T *lp)
read_prefcond_section	vim/vim/src/spellfile.c	/^static int read_prefcond_section(FILE *fd, slang_T *lp);$/;"	p	file:	signature:(FILE *fd, slang_T *lp)
read_readbuf	vim/vim/src/getchar.c	/^read_readbuf(buffheader_T *buf, int advance)$/;"	f	file:	signature:(buffheader_T *buf, int advance)
read_readbuf	vim/vim/src/getchar.c	/^static int	read_readbuf(buffheader_T *buf, int advance);$/;"	p	file:	signature:(buffheader_T *buf, int advance)
read_readbuffers	vim/vim/src/getchar.c	/^read_readbuffers(int advance)$/;"	f	file:	signature:(int advance)
read_readbuffers	vim/vim/src/getchar.c	/^static int	read_readbuffers(int advance);$/;"	p	file:	signature:(int advance)
read_redo	vim/vim/src/getchar.c	/^read_redo(int init, int old_redo)$/;"	f	file:	signature:(int init, int old_redo)
read_redo	vim/vim/src/getchar.c	/^static int	read_redo(int, int);$/;"	p	file:	signature:(int, int)
read_region_section	vim/vim/src/spellfile.c	/^read_region_section(FILE *fd, slang_T *lp, int len)$/;"	f	file:	signature:(FILE *fd, slang_T *lp, int len)
read_region_section	vim/vim/src/spellfile.c	/^static int read_region_section(FILE *fd, slang_T *slang, int len);$/;"	p	file:	signature:(FILE *fd, slang_T *slang, int len)
read_rep_section	vim/vim/src/spellfile.c	/^read_rep_section(FILE *fd, garray_T *gap, short *first)$/;"	f	file:	signature:(FILE *fd, garray_T *gap, short *first)
read_rep_section	vim/vim/src/spellfile.c	/^static int read_rep_section(FILE *fd, garray_T *gap, short *first);$/;"	p	file:	signature:(FILE *fd, garray_T *gap, short *first)
read_sal_section	vim/vim/src/spellfile.c	/^read_sal_section(FILE *fd, slang_T *slang)$/;"	f	file:	signature:(FILE *fd, slang_T *slang)
read_sal_section	vim/vim/src/spellfile.c	/^static int read_sal_section(FILE *fd, slang_T *slang);$/;"	p	file:	signature:(FILE *fd, slang_T *slang)
read_sofo_section	vim/vim/src/spellfile.c	/^read_sofo_section(FILE *fd, slang_T *slang)$/;"	f	file:	signature:(FILE *fd, slang_T *slang)
read_sofo_section	vim/vim/src/spellfile.c	/^static int read_sofo_section(FILE *fd, slang_T *slang);$/;"	p	file:	signature:(FILE *fd, slang_T *slang)
read_stdin	vim/vim/src/main.c	/^read_stdin(void)$/;"	f	file:	signature:(void)
read_stdin	vim/vim/src/main.c	/^static void read_stdin(void);$/;"	p	file:	signature:(void)
read_string	vim/vim/src/misc2.c	/^read_string(FILE *fd, int cnt)$/;"	f	signature:(FILE *fd, int cnt)
read_string_decrypt	vim/vim/src/undo.c	/^read_string_decrypt(bufinfo_T *bi, int len)$/;"	f	file:	signature:(bufinfo_T *bi, int len)
read_string_decrypt	vim/vim/src/undo.c	/^static char_u *read_string_decrypt(bufinfo_T *bi, int len);$/;"	p	file:	signature:(bufinfo_T *bi, int len)
read_thread	vim/vim/src/os_beos.c	/^read_thread(void *dummy)$/;"	f	file:	signature:(void *dummy)
read_thread_id	vim/vim/src/os_beos.c	/^thread_id read_thread_id;$/;"	v
read_tree_node	vim/vim/src/spellfile.c	/^read_tree_node($/;"	f	file:	signature:( FILE *fd, char_u *byts, idx_T *idxs, int maxidx, idx_T startidx, int prefixtree, int maxprefcondnr)
read_tree_node	vim/vim/src/spellfile.c	/^static idx_T read_tree_node(FILE *fd, char_u *byts, idx_T *idxs, int maxidx, idx_T startidx, int prefixtree, int maxprefcondnr);$/;"	p	file:	signature:(FILE *fd, char_u *byts, idx_T *idxs, int maxidx, idx_T startidx, int prefixtree, int maxprefcondnr)
read_viminfo	vim/vim/src/ex_cmds.c	/^read_viminfo($/;"	f	signature:( char_u *file, int flags)
read_viminfo_barline	vim/vim/src/ex_cmds.c	/^read_viminfo_barline(vir_T *virp, int got_encoding, int force, int writing)$/;"	f	file:	signature:(vir_T *virp, int got_encoding, int force, int writing)
read_viminfo_barline	vim/vim/src/ex_cmds.c	/^static int read_viminfo_barline(vir_T *virp, int got_encoding, int force, int writing);$/;"	p	file:	signature:(vir_T *virp, int got_encoding, int force, int writing)
read_viminfo_bufferlist	vim/vim/src/buffer.c	/^read_viminfo_bufferlist($/;"	f	signature:( vir_T *virp, int writing)
read_viminfo_filemark	vim/vim/src/mark.c	/^read_viminfo_filemark(vir_T *virp, int force)$/;"	f	signature:(vir_T *virp, int force)
read_viminfo_history	vim/vim/src/ex_getln.c	/^read_viminfo_history(vir_T *virp, int writing)$/;"	f	signature:(vir_T *virp, int writing)
read_viminfo_register	vim/vim/src/ops.c	/^read_viminfo_register(vir_T *virp, int force)$/;"	f	signature:(vir_T *virp, int force)
read_viminfo_search_pattern	vim/vim/src/search.c	/^read_viminfo_search_pattern(vir_T *virp, int force)$/;"	f	signature:(vir_T *virp, int force)
read_viminfo_sub_string	vim/vim/src/ex_cmds.c	/^read_viminfo_sub_string(vir_T *virp, int force)$/;"	f	signature:(vir_T *virp, int force)
read_viminfo_up_to_marks	vim/vim/src/ex_cmds.c	/^read_viminfo_up_to_marks($/;"	f	file:	signature:( vir_T *virp, int forceit, int writing)
read_viminfo_up_to_marks	vim/vim/src/ex_cmds.c	/^static int read_viminfo_up_to_marks(vir_T *virp, int forceit, int writing);$/;"	p	file:	signature:(vir_T *virp, int forceit, int writing)
read_viminfo_varlist	vim/vim/src/eval.c	/^read_viminfo_varlist(vir_T *virp, int writing)$/;"	f	signature:(vir_T *virp, int writing)
read_words_section	vim/vim/src/spellfile.c	/^read_words_section(FILE *fd, slang_T *lp, int len)$/;"	f	file:	signature:(FILE *fd, slang_T *lp, int len)
read_words_section	vim/vim/src/spellfile.c	/^static int read_words_section(FILE *fd, slang_T *lp, int len);$/;"	p	file:	signature:(FILE *fd, slang_T *lp, int len)
readbuf1	vim/vim/src/getchar.c	/^static buffheader_T readbuf1 = {{NULL, {NUL}}, NULL, 0, 0};$/;"	v	file:
readbuf1_empty	vim/vim/src/getchar.c	/^readbuf1_empty(void)$/;"	f	signature:(void)
readbuf2	vim/vim/src/getchar.c	/^static buffheader_T readbuf2 = {{NULL, {NUL}}, NULL, 0, 0};$/;"	v	file:
readfile	vim/vim/src/fileio.c	/^readfile($/;"	f	signature:( char_u *fname, char_u *sfname, linenr_T from, linenr_T lines_to_skip, linenr_T lines_to_read, exarg_T *eap, int flags)
readfile_charconvert	vim/vim/src/fileio.c	/^readfile_charconvert($/;"	f	file:	signature:( char_u *fname, char_u *fenc, int *fdp)
readfile_charconvert	vim/vim/src/fileio.c	/^static char_u *readfile_charconvert(char_u *fname, char_u *fenc, int *fdp);$/;"	p	file:	signature:(char_u *fname, char_u *fenc, int *fdp)
readfile_linenr	vim/vim/src/fileio.c	/^readfile_linenr($/;"	f	file:	signature:( linenr_T linecnt, char_u *p, char_u *endp)
readfile_linenr	vim/vim/src/fileio.c	/^static linenr_T readfile_linenr(linenr_T linecnt, char_u *p, char_u *endp);$/;"	p	file:	signature:(linenr_T linecnt, char_u *p, char_u *endp)
readonlymode	vim/vim/src/globals.h	/^EXTERN int	readonlymode INIT(= FALSE); \/* Set to TRUE for "view" *\/$/;"	v
readq_S	vim/vim/src/structs.h	/^struct readq_S$/;"	s
readq_S::rq_buffer	vim/vim/src/structs.h	/^    char_u	*rq_buffer;$/;"	m	struct:readq_S	access:public
readq_S::rq_buflen	vim/vim/src/structs.h	/^    long_u	rq_buflen;$/;"	m	struct:readq_S	access:public
readq_S::rq_next	vim/vim/src/structs.h	/^    readq_T	*rq_next;$/;"	m	struct:readq_S	access:public
readq_S::rq_prev	vim/vim/src/structs.h	/^    readq_T	*rq_prev;$/;"	m	struct:readq_S	access:public
readq_T	vim/vim/src/structs.h	/^typedef struct readq_S readq_T;$/;"	t	typeref:struct:readq_S
real	vim/vim/src/gui_at_fs.c	/^    char	*real;$/;"	m	struct:__anon235	file:	access:public
realloc_buffer	vim/vim/src/libvterm/src/screen.c	/^static ScreenCell *realloc_buffer(VTermScreen *screen, ScreenCell *buffer, int new_rows, int new_cols)$/;"	f	file:	signature:(VTermScreen *screen, ScreenCell *buffer, int new_rows, int new_cols)
realloc_cmdbuff	vim/vim/src/ex_getln.c	/^realloc_cmdbuff(int len)$/;"	f	file:	signature:(int len)
realloc_cmdbuff	vim/vim/src/ex_getln.c	/^static int	realloc_cmdbuff(int len);$/;"	p	file:	signature:(int len)
realloc_post_list	vim/vim/src/regexp_nfa.c	/^realloc_post_list(void)$/;"	f	file:	signature:(void)
realloc_post_list	vim/vim/src/regexp_nfa.c	/^static int realloc_post_list(void);$/;"	p	file:	signature:(void)
really_exiting	vim/vim/src/globals.h	/^EXTERN int	really_exiting INIT(= FALSE);$/;"	v
rebuild_tearoff	vim/vim/src/gui_w32.c	/^rebuild_tearoff(vimmenu_T *menu)$/;"	f	file:	signature:(vimmenu_T *menu)
rebuild_tearoff	vim/vim/src/gui_w32.c	/^static void rebuild_tearoff(vimmenu_T *menu);$/;"	p	file:	signature:(vimmenu_T *menu)
receiveHandler	vim/vim/src/gui_mac.c	/^receiveHandler(WindowRef theWindow, void *handlerRefCon, DragRef theDrag)$/;"	f	file:	signature:(WindowRef theWindow, void *handlerRefCon, DragRef theDrag)
received_selection	vim/vim/src/gui_gtk_x11.c	/^static int received_selection = RS_NONE;$/;"	v	file:
recent_func_log_func	vim/vim/src/gui_gtk.c	/^recent_func_log_func(const gchar *log_domain UNUSED,$/;"	f	file:	signature:(const gchar *log_domain UNUSED, GLogLevelFlags log_level UNUSED, const gchar *message UNUSED, gpointer user_data UNUSED)
recent_func_log_func	vim/vim/src/gui_gtk.c	/^static void recent_func_log_func($/;"	p	file:	signature:( const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer user_data)
recordbuff	vim/vim/src/getchar.c	/^static buffheader_T recordbuff = {{NULL, {NUL}}, NULL, 0, 0};$/;"	v	file:
recording_mode	vim/vim/src/screen.c	/^recording_mode(int attr)$/;"	f	file:	signature:(int attr)
recording_mode	vim/vim/src/screen.c	/^static void recording_mode(int attr);$/;"	p	file:	signature:(int attr)
recov_file_names	vim/vim/src/memline.c	/^recov_file_names(char_u **names, char_u *path, int prepend_dot)$/;"	f	file:	signature:(char_u **names, char_u *path, int prepend_dot)
recov_file_names	vim/vim/src/memline.c	/^static int recov_file_names(char_u **, char_u *, int prepend_dot);$/;"	p	file:	signature:(char_u **, char_u *, int prepend_dot)
recover_names	vim/vim/src/memline.c	/^recover_names($/;"	f	signature:( char_u *fname, int list, int nr, char_u **fname_out)
recoverymode	vim/vim/src/globals.h	/^EXTERN int	recoverymode INIT(= FALSE); \/* Set to TRUE for "-r" option *\/$/;"	v
rect	vim/vim/src/gui_w32.c	/^	RECT rect;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
rect_clip	vim/vim/src/libvterm/src/rect.h	/^static void rect_clip(VTermRect *dst, VTermRect *bounds)$/;"	f	signature:(VTermRect *dst, VTermRect *bounds)
rect_contains	vim/vim/src/libvterm/src/rect.h	/^static int rect_contains(VTermRect *big, VTermRect *small)$/;"	f	signature:(VTermRect *big, VTermRect *small)
rect_equal	vim/vim/src/libvterm/src/rect.h	/^static int rect_equal(VTermRect *a, VTermRect *b)$/;"	f	signature:(VTermRect *a, VTermRect *b)
rect_expand	vim/vim/src/libvterm/src/rect.h	/^static void rect_expand(VTermRect *dst, VTermRect *src)$/;"	f	signature:(VTermRect *dst, VTermRect *src)
rect_intersects	vim/vim/src/libvterm/src/rect.h	/^static int rect_intersects(VTermRect *a, VTermRect *b)$/;"	f	signature:(VTermRect *a, VTermRect *b)
recurse_tearoffs	vim/vim/src/gui_gtk.c	/^recurse_tearoffs(vimmenu_T *menu, int val)$/;"	f	file:	signature:(vimmenu_T *menu, int val)
recursive_regmatch	vim/vim/src/regexp_nfa.c	/^recursive_regmatch($/;"	f	file:	signature:( nfa_state_T *state, nfa_pim_T *pim, nfa_regprog_T *prog, regsubs_T *submatch, regsubs_T *m, int **listids)
recursive_regmatch	vim/vim/src/regexp_nfa.c	/^static int recursive_regmatch(nfa_state_T *state, nfa_pim_T *pim, nfa_regprog_T *prog, regsubs_T *submatch, regsubs_T *m, int **listids);$/;"	p	file:	signature:(nfa_state_T *state, nfa_pim_T *pim, nfa_regprog_T *prog, regsubs_T *submatch, regsubs_T *m, int **listids)
red	vim/vim/src/libvterm/include/vterm.h	/^  uint8_t red, green, blue;$/;"	m	struct:__anon49	access:public
red	vim/vim/src/xpm/include/simx.h	/^    BYTE red, green, blue;$/;"	m	struct:__anon86	access:public
red_closeness	vim/vim/src/xpm/include/xpm.h	/^    unsigned int red_closeness;		\/* Allowable red deviation *\/$/;"	m	struct:__anon93	access:public
redir_endp	vim/vim/src/eval.c	/^static char_u	*redir_endp = NULL;$/;"	v	file:
redir_execute	vim/vim/src/globals.h	/^EXTERN int  redir_execute INIT(= 0);	\/* execute() redirection *\/$/;"	v
redir_execute_ga	vim/vim/src/evalfunc.c	/^static garray_T	redir_execute_ga;$/;"	v	file:
redir_fd	vim/vim/src/globals.h	/^EXTERN FILE *redir_fd INIT(= NULL);	\/* message redirection file *\/$/;"	v
redir_ga	vim/vim/src/eval.c	/^static garray_T redir_ga;	\/* only valid when redir_lval is not NULL *\/$/;"	v	file:
redir_lval	vim/vim/src/eval.c	/^static lval_T	*redir_lval = NULL;$/;"	v	file:
redir_off	vim/vim/src/globals.h	/^EXTERN int  redir_off INIT(= FALSE);	\/* no redirection for a moment *\/$/;"	v
redir_reg	vim/vim/src/globals.h	/^EXTERN int  redir_reg INIT(= 0);	\/* message redirection register *\/$/;"	v
redir_varname	vim/vim/src/eval.c	/^static char_u	*redir_varname = NULL;$/;"	v	file:
redir_vname	vim/vim/src/globals.h	/^EXTERN int  redir_vname INIT(= 0);	\/* message redirection variable *\/$/;"	v
redir_write	vim/vim/src/message.c	/^redir_write(char_u *str, int maxlen)$/;"	f	file:	signature:(char_u *str, int maxlen)
redir_write	vim/vim/src/message.c	/^static void redir_write(char_u *s, int maxlen);$/;"	p	file:	signature:(char_u *s, int maxlen)
redirecting	vim/vim/src/message.c	/^redirecting(void)$/;"	f	signature:(void)
redo_VIsual_busy	vim/vim/src/globals.h	/^EXTERN int	redo_VIsual_busy INIT(= FALSE);$/;"	v
redo_literal	vim/vim/src/edit.c	/^redo_literal(int c)$/;"	f	file:	signature:(int c)
redo_literal	vim/vim/src/edit.c	/^static void redo_literal(int c);$/;"	p	file:	signature:(int c)
redobuff	vim/vim/src/getchar.c	/^static buffheader_T redobuff = {{NULL, {NUL}}, NULL, 0, 0};$/;"	v	file:
redrawWinline	vim/vim/src/screen.c	/^redrawWinline($/;"	f	signature:( linenr_T lnum, int invalid UNUSED)
redraw_after_callback	vim/vim/src/screen.c	/^redraw_after_callback(void)$/;"	f	signature:(void)
redraw_all_later	vim/vim/src/screen.c	/^redraw_all_later(int type)$/;"	f	signature:(int type)
redraw_asap	vim/vim/src/screen.c	/^redraw_asap(int type)$/;"	f	signature:(int type)
redraw_block	vim/vim/src/screen.c	/^redraw_block(int row, int end, win_T *wp)$/;"	f	file:	signature:(int row, int end, win_T *wp)
redraw_block	vim/vim/src/screen.c	/^static void redraw_block(int row, int end, win_T *wp);$/;"	p	file:	signature:(int row, int end, win_T *wp)
redraw_buf_and_status_later	vim/vim/src/screen.c	/^redraw_buf_and_status_later(buf_T *buf, int type)$/;"	f	signature:(buf_T *buf, int type)
redraw_buf_later	vim/vim/src/screen.c	/^redraw_buf_later(buf_T *buf, int type)$/;"	f	signature:(buf_T *buf, int type)
redraw_cmdline	vim/vim/src/globals.h	/^EXTERN int	redraw_cmdline INIT(= FALSE);	\/* cmdline must be redrawn *\/$/;"	v
redraw_curbuf_later	vim/vim/src/screen.c	/^redraw_curbuf_later(int type)$/;"	f	signature:(int type)
redraw_custom_statusline	vim/vim/src/screen.c	/^redraw_custom_statusline(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
redraw_custom_statusline	vim/vim/src/screen.c	/^static void redraw_custom_statusline(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
redraw_for_cursorline	vim/vim/src/move.c	/^redraw_for_cursorline(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
redraw_for_cursorline	vim/vim/src/move.c	/^static void redraw_for_cursorline(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
redraw_later	vim/vim/src/screen.c	/^redraw_later(int type)$/;"	f	signature:(int type)
redraw_later_clear	vim/vim/src/screen.c	/^redraw_later_clear(void)$/;"	f	signature:(void)
redraw_statuslines	vim/vim/src/screen.c	/^redraw_statuslines(void)$/;"	f	signature:(void)
redraw_tabline	vim/vim/src/globals.h	/^EXTERN int	    redraw_tabline INIT(= FALSE);  \/* need to redraw tabline *\/$/;"	v
redraw_titles	vim/vim/src/option.c	/^static void redraw_titles(void)$/;"	f	file:	signature:(void)
redraw_titles	vim/vim/src/option.c	/^static void redraw_titles(void);$/;"	p	file:	signature:(void)
redraw_win_later	vim/vim/src/screen.c	/^redraw_win_later($/;"	f	signature:( win_T *wp, int type)
redrawcmd	vim/vim/src/ex_getln.c	/^redrawcmd(void)$/;"	f	signature:(void)
redrawcmd_preedit	vim/vim/src/ex_getln.c	/^redrawcmd_preedit(void)$/;"	f	file:	signature:(void)
redrawcmd_preedit	vim/vim/src/ex_getln.c	/^static void	redrawcmd_preedit(void);$/;"	p	file:	signature:(void)
redrawcmdline	vim/vim/src/ex_getln.c	/^redrawcmdline(void)$/;"	f	signature:(void)
redrawcmdline_ex	vim/vim/src/ex_getln.c	/^redrawcmdline_ex(int do_compute_cmdrow)$/;"	f	signature:(int do_compute_cmdrow)
redrawcmdprompt	vim/vim/src/ex_getln.c	/^redrawcmdprompt(void)$/;"	f	file:	signature:(void)
redrawcmdprompt	vim/vim/src/ex_getln.c	/^static void	redrawcmdprompt(void);$/;"	p	file:	signature:(void)
redrawing	vim/vim/src/screen.c	/^redrawing(void)$/;"	f	signature:(void)
redrawing_for_callback	vim/vim/src/screen.c	/^static int redrawing_for_callback = 0;$/;"	v	file:
ref	vim/vim/src/if_ole.cpp	/^    unsigned long ref;$/;"	m	class:FINAL	file:	access:private
ref	vim/vim/src/if_py_both.h	/^    pylinkedlist_T	ref;$/;"	m	struct:__anon100	access:public
ref	vim/vim/src/if_py_both.h	/^    pylinkedlist_T	ref;$/;"	m	struct:__anon102	access:public
ref	vim/vim/src/if_py_both.h	/^    pylinkedlist_T	ref;$/;"	m	struct:__anon104	access:public
ref	vim/vim/src/if_tcl.c	/^struct ref$/;"	s	file:
ref::cmd	vim/vim/src/if_tcl.c	/^    Tcl_Command cmd;	    \/* Tcl command that represents this object *\/$/;"	m	struct:ref	file:	access:public
ref::delcmd	vim/vim/src/if_tcl.c	/^    Tcl_Obj	*delcmd;    \/* Tcl command to call when object is being del. *\/$/;"	m	struct:ref	file:	access:public
ref::interp	vim/vim/src/if_tcl.c	/^    Tcl_Interp	*interp;$/;"	m	struct:ref	file:	access:public
ref::next	vim/vim/src/if_tcl.c	/^    struct ref	*next;$/;"	m	struct:ref	typeref:struct:ref::ref	file:	access:public
ref::vimobj	vim/vim/src/if_tcl.c	/^    void	*vimobj;    \/* Vim window or buffer (win_T* or buf_T*) *\/$/;"	m	struct:ref	file:	access:public
ref_extmatch	vim/vim/src/regexp.c	/^ref_extmatch(reg_extmatch_T *em)$/;"	f	signature:(reg_extmatch_T *em)
refcnt	vim/vim/src/regexp.h	/^    short		refcnt;$/;"	m	struct:__anon147	access:public
refsdeleted	vim/vim/src/if_tcl.c	/^static struct ref refsdeleted;	\/* dummy object for deleted ref list *\/$/;"	v	typeref:struct:ref	file:
reg	vim/vim/src/os_mac.h	56;"	d
reg	vim/vim/src/regexp.c	/^reg($/;"	f	file:	signature:( int paren, int *flagp)
reg	vim/vim/src/regexp.c	/^static char_u	*reg(int, int *);$/;"	p	file:	signature:(int, int *)
reg_buf	vim/vim/src/regexp.c	/^    buf_T		*reg_buf;$/;"	m	struct:__anon129	file:	access:public
reg_cpo_bsl	vim/vim/src/regexp.c	/^static int reg_cpo_bsl; \/* 'cpoptions' contains '\\' flag *\/$/;"	v	file:
reg_cpo_lit	vim/vim/src/regexp.c	/^static int reg_cpo_lit; \/* 'cpoptions' contains 'l' flag *\/$/;"	v	file:
reg_create_key	vim/vim/src/dosinst.c	/^reg_create_key($/;"	f	file:	signature:( HKEY root, const char *subkey, PHKEY phKey)
reg_create_key_and_value	vim/vim/src/dosinst.c	/^reg_create_key_and_value($/;"	f	file:	signature:( HKEY hRootKey, const char *subkey, const char *value_name, const char *data)
reg_delete_key	vim/vim/src/uninstal.c	/^reg_delete_key(HKEY hRootKey, const char *key)$/;"	f	file:	signature:(HKEY hRootKey, const char *key)
reg_do_extmatch	vim/vim/src/globals.h	/^EXTERN int	reg_do_extmatch INIT(= 0);  \/* Used when compiling regexp:$/;"	v
reg_endp	vim/vim/src/regexp.c	/^    char_u		**reg_endp;$/;"	m	struct:__anon129	file:	access:public
reg_endpos	vim/vim/src/regexp.c	/^    lpos_T		*reg_endpos;$/;"	m	struct:__anon129	file:	access:public
reg_endzp	vim/vim/src/regexp.c	/^static char_u	*reg_endzp[NSUBEXP];	\/*   and end of \\z(...\\) matches *\/$/;"	v	file:
reg_endzpos	vim/vim/src/regexp.c	/^static lpos_T	reg_endzpos[NSUBEXP];	\/* idem, end pos *\/$/;"	v	file:
reg_equi_class	vim/vim/src/regexp.c	/^reg_equi_class(int c)$/;"	f	file:	signature:(int c)
reg_equi_class	vim/vim/src/regexp.c	/^static void	reg_equi_class(int c);$/;"	p	file:	signature:(int c)
reg_extmatch_T	vim/vim/src/regexp.h	/^} reg_extmatch_T;$/;"	t	typeref:struct:__anon147
reg_firstlnum	vim/vim/src/regexp.c	/^    linenr_T		reg_firstlnum;$/;"	m	struct:__anon129	file:	access:public
reg_getline	vim/vim/src/regexp.c	/^reg_getline(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
reg_getline	vim/vim/src/regexp.c	/^static char_u	*reg_getline(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
reg_getline_submatch	vim/vim/src/regexp.c	/^reg_getline_submatch(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
reg_getline_submatch	vim/vim/src/regexp.c	/^static char_u *reg_getline_submatch(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
reg_ic	vim/vim/src/regexp.c	/^    int			reg_ic;$/;"	m	struct:__anon129	file:	access:public
reg_icombine	vim/vim/src/regexp.c	/^    int			reg_icombine;$/;"	m	struct:__anon129	file:	access:public
reg_line_lbr	vim/vim/src/regexp.c	/^    int			reg_line_lbr;	\/* "\\n" in string is line break *\/$/;"	m	struct:__anon129	file:	access:public
reg_magic	vim/vim/src/regexp.c	/^static int	reg_magic;	\/* magicness of the pattern: *\/$/;"	v	file:
reg_match	vim/vim/src/regexp.c	/^    regmatch_T		*reg_match;$/;"	m	struct:__anon129	file:	access:public
reg_match_visual	vim/vim/src/regexp.c	/^reg_match_visual(void)$/;"	f	file:	signature:(void)
reg_match_visual	vim/vim/src/regexp.c	/^static int reg_match_visual(void);$/;"	p	file:	signature:(void)
reg_maxcol	vim/vim/src/regexp.c	/^    colnr_T		reg_maxcol;$/;"	m	struct:__anon129	file:	access:public
reg_maxline	vim/vim/src/regexp.c	/^    linenr_T		reg_maxline;$/;"	m	struct:__anon129	file:	access:public
reg_mmatch	vim/vim/src/regexp.c	/^    regmmatch_T		*reg_mmatch;$/;"	m	struct:__anon129	file:	access:public
reg_nextline	vim/vim/src/regexp.c	/^reg_nextline(void)$/;"	f	file:	signature:(void)
reg_nextline	vim/vim/src/regexp.c	/^static void	reg_nextline(void);$/;"	p	file:	signature:(void)
reg_prev_class	vim/vim/src/regexp.c	/^reg_prev_class(void)$/;"	f	file:	signature:(void)
reg_prev_class	vim/vim/src/regexp.c	/^static int reg_prev_class(void);$/;"	p	file:	signature:(void)
reg_prev_sub	vim/vim/src/regexp.c	/^static char_u		*reg_prev_sub = NULL;$/;"	v	file:
reg_prog	vim/vim/src/fileio.c	/^    regprog_T	    *reg_prog;		\/* compiled regprog for pattern *\/$/;"	m	struct:AutoPat	file:	access:public
reg_restore	vim/vim/src/regexp.c	/^reg_restore(regsave_T *save, garray_T *gap)$/;"	f	file:	signature:(regsave_T *save, garray_T *gap)
reg_restore	vim/vim/src/regexp.c	/^static void	reg_restore(regsave_T *save, garray_T *gap);$/;"	p	file:	signature:(regsave_T *save, garray_T *gap)
reg_save	vim/vim/src/regexp.c	/^reg_save(regsave_T *save, garray_T *gap)$/;"	f	file:	signature:(regsave_T *save, garray_T *gap)
reg_save	vim/vim/src/regexp.c	/^static void	reg_save(regsave_T *save, garray_T *gap);$/;"	p	file:	signature:(regsave_T *save, garray_T *gap)
reg_save_equal	vim/vim/src/regexp.c	/^reg_save_equal(regsave_T *save)$/;"	f	file:	signature:(regsave_T *save)
reg_save_equal	vim/vim/src/regexp.c	/^static int	reg_save_equal(regsave_T *save);$/;"	p	file:	signature:(regsave_T *save)
reg_set_string_value	vim/vim/src/dosinst.c	/^reg_set_string_value($/;"	f	file:	signature:( HKEY hKey, const char *value_name, const char *data)
reg_startp	vim/vim/src/regexp.c	/^    char_u		**reg_startp;$/;"	m	struct:__anon129	file:	access:public
reg_startpos	vim/vim/src/regexp.c	/^    lpos_T		*reg_startpos;$/;"	m	struct:__anon129	file:	access:public
reg_startzp	vim/vim/src/regexp.c	/^static char_u	*reg_startzp[NSUBEXP];	\/* Workspace to mark beginning *\/$/;"	v	file:
reg_startzpos	vim/vim/src/regexp.c	/^static lpos_T	reg_startzpos[NSUBEXP];	\/* idem, beginning pos *\/$/;"	v	file:
reg_strict	vim/vim/src/regexp.c	/^static int	reg_strict;	\/* "[abc" is illegal *\/$/;"	v	file:
reg_string	vim/vim/src/regexp.c	/^static int	reg_string;	\/* matching with a string instead of a buffer$/;"	v	file:
reg_submatch	vim/vim/src/regexp.c	/^reg_submatch(int no)$/;"	f	signature:(int no)
reg_submatch_list	vim/vim/src/regexp.c	/^reg_submatch_list(int no)$/;"	f	signature:(int no)
reg_tofree	vim/vim/src/regexp.c	/^static char_u	*reg_tofree = NULL;$/;"	v	file:
reg_tofreelen	vim/vim/src/regexp.c	/^static unsigned	reg_tofreelen;$/;"	v	file:
reg_toolong	vim/vim/src/regexp.c	/^static int	reg_toolong;	\/* TRUE when offset out of range *\/$/;"	v	file:
reg_win	vim/vim/src/regexp.c	/^    win_T		*reg_win;$/;"	m	struct:__anon129	file:	access:public
reganch	vim/vim/src/regexp.h	/^    char_u		reganch;$/;"	m	struct:__anon143	access:public
reganch	vim/vim/src/regexp.h	/^    int			reganch;	\/* pattern starts with ^ *\/$/;"	m	struct:__anon144	access:public
regatom	vim/vim/src/regexp.c	/^regatom(int *flagp)$/;"	f	file:	signature:(int *flagp)
regatom	vim/vim/src/regexp.c	/^static char_u	*regatom(int *);$/;"	p	file:	signature:(int *)
regbehind_S	vim/vim/src/regexp.c	/^typedef struct regbehind_S$/;"	s	file:
regbehind_S::save_after	vim/vim/src/regexp.c	/^    regsave_T	save_after;$/;"	m	struct:regbehind_S	file:	access:public
regbehind_S::save_behind	vim/vim/src/regexp.c	/^    regsave_T	save_behind;$/;"	m	struct:regbehind_S	file:	access:public
regbehind_S::save_end	vim/vim/src/regexp.c	/^    save_se_T   save_end[NSUBEXP];$/;"	m	struct:regbehind_S	file:	access:public
regbehind_S::save_need_clear_subexpr	vim/vim/src/regexp.c	/^    int		save_need_clear_subexpr;$/;"	m	struct:regbehind_S	file:	access:public
regbehind_S::save_start	vim/vim/src/regexp.c	/^    save_se_T   save_start[NSUBEXP];$/;"	m	struct:regbehind_S	file:	access:public
regbehind_T	vim/vim/src/regexp.c	/^} regbehind_T;$/;"	t	typeref:struct:regbehind_S	file:
regbranch	vim/vim/src/regexp.c	/^regbranch(int *flagp)$/;"	f	file:	signature:(int *flagp)
regbranch	vim/vim/src/regexp.c	/^static char_u	*regbranch(int *flagp);$/;"	p	file:	signature:(int *flagp)
regc	vim/vim/src/regexp.c	/^regc(int b)$/;"	f	file:	signature:(int b)
regc	vim/vim/src/regexp.c	/^static void	regc(int b);$/;"	p	file:	signature:(int b)
regcode	vim/vim/src/regexp.c	/^static char_u	*regcode;	\/* Code-emit pointer, or JUST_CALC_SIZE *\/$/;"	v	file:
regcomp	vim/vim/src/regexp.h	/^    regprog_T	*(*regcomp)(char_u*, int);$/;"	m	struct:regengine	access:public
regcomp_start	vim/vim/src/regexp.c	/^regcomp_start($/;"	f	file:	signature:( char_u *expr, int re_flags)
regcomp_start	vim/vim/src/regexp.c	/^static void	regcomp_start(char_u *expr, int flags);$/;"	p	file:	signature:(char_u *expr, int flags)
regconcat	vim/vim/src/regexp.c	/^regconcat(int *flagp)$/;"	f	file:	signature:(int *flagp)
regconcat	vim/vim/src/regexp.c	/^static char_u	*regconcat(int *flagp);$/;"	p	file:	signature:(int *flagp)
regdump	vim/vim/src/regexp.c	/^regdump(char_u *pattern, bt_regprog_T *r)$/;"	f	file:	signature:(char_u *pattern, bt_regprog_T *r)
regdump	vim/vim/src/regexp.c	/^static void	regdump(char_u *, bt_regprog_T *);$/;"	p	file:	signature:(char_u *, bt_regprog_T *)
regengine	vim/vim/src/regexp.h	/^struct regengine$/;"	s
regengine::expr	vim/vim/src/regexp.h	/^    char_u	*expr;$/;"	m	struct:regengine	access:public
regengine::regcomp	vim/vim/src/regexp.h	/^    regprog_T	*(*regcomp)(char_u*, int);$/;"	m	struct:regengine	access:public
regengine::regexec_multi	vim/vim/src/regexp.h	/^    long	(*regexec_multi)(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T, proftime_T *, int *);$/;"	m	struct:regengine	access:public
regengine::regexec_nl	vim/vim/src/regexp.h	/^    int		(*regexec_nl)(regmatch_T *, char_u *, colnr_T, int);$/;"	m	struct:regengine	access:public
regengine::regfree	vim/vim/src/regexp.h	/^    void	(*regfree)(regprog_T *);$/;"	m	struct:regengine	access:public
regengine_T	vim/vim/src/regexp.h	/^typedef struct regengine regengine_T;$/;"	t	typeref:struct:regengine
regexec_T	vim/vim/src/regexp.c	/^} regexec_T;$/;"	t	typeref:struct:__anon129	file:
regexec_multi	vim/vim/src/regexp.h	/^    long	(*regexec_multi)(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T, proftime_T *, int *);$/;"	m	struct:regengine	access:public
regexec_nl	vim/vim/src/regexp.h	/^    int		(*regexec_nl)(regmatch_T *, char_u *, colnr_T, int);$/;"	m	struct:regengine	access:public
regexp_engine	vim/vim/src/regexp.c	/^static int regexp_engine = 0;$/;"	v	file:
regflags	vim/vim/src/regexp.c	/^static unsigned	regflags;	\/* RF_ flags for prog *\/$/;"	v	file:
regflags	vim/vim/src/regexp.h	/^    unsigned		regflags;$/;"	m	struct:__anon143	access:public
regflags	vim/vim/src/regexp.h	/^    unsigned		regflags;$/;"	m	struct:__anon144	access:public
regflags	vim/vim/src/regexp.h	/^    unsigned		regflags;$/;"	m	struct:regprog	access:public
regfree	vim/vim/src/regexp.h	/^    void	(*regfree)(regprog_T *);$/;"	m	struct:regengine	access:public
reghasz	vim/vim/src/regexp.h	/^    char_u		reghasz;$/;"	m	struct:__anon143	access:public
reghasz	vim/vim/src/regexp.h	/^    int			reghasz;$/;"	m	struct:__anon144	access:public
reginput	vim/vim/src/regexp.c	/^static char_u	*reginput;	\/* current input, points into "regline" *\/$/;"	v	file:
reginsert	vim/vim/src/regexp.c	/^reginsert(int op, char_u *opnd)$/;"	f	file:	signature:(int op, char_u *opnd)
reginsert	vim/vim/src/regexp.c	/^static void	reginsert(int, char_u *);$/;"	p	file:	signature:(int, char_u *)
reginsert_limits	vim/vim/src/regexp.c	/^reginsert_limits($/;"	f	file:	signature:( int op, long minval, long maxval, char_u *opnd)
reginsert_limits	vim/vim/src/regexp.c	/^static void	reginsert_limits(int, long, long, char_u *);$/;"	p	file:	signature:(int, long, long, char_u *)
reginsert_nr	vim/vim/src/regexp.c	/^reginsert_nr(int op, long val, char_u *opnd)$/;"	f	file:	signature:(int op, long val, char_u *opnd)
reginsert_nr	vim/vim/src/regexp.c	/^static void	reginsert_nr(int op, long val, char_u *opnd);$/;"	p	file:	signature:(int op, long val, char_u *opnd)
register_closure	vim/vim/src/userfunc.c	/^register_closure(ufunc_T *fp)$/;"	f	file:	signature:(ufunc_T *fp)
register_inproc_server	vim/vim/src/dosinst.c	/^register_inproc_server($/;"	f	file:	signature:( HKEY hRootKey, const char *clsid, const char *extname, const char *module, const char *threading_model)
register_openwith	vim/vim/src/dosinst.c	/^register_openwith($/;"	f	file:	signature:( HKEY hRootKey, const char *exe_path)
register_shellex	vim/vim/src/dosinst.c	/^register_shellex($/;"	f	file:	signature:( HKEY hRootKey, const char *clsid, const char *name, const char *exe_path)
register_uninstall	vim/vim/src/dosinst.c	/^register_uninstall($/;"	f	file:	signature:( HKEY hRootKey, const char *appname, const char *display_name, const char *uninstall_string)
register_vim_exn	vim/vim/src/if_mzsch.c	/^register_vim_exn(void)$/;"	f	file:	signature:(void)
register_vim_exn	vim/vim/src/if_mzsch.c	/^static void register_vim_exn(void);$/;"	p	file:	signature:(void)
registryProperty	vim/vim/runtime/tools/xcmdsrv_client.c	/^static Atom	registryProperty = None;$/;"	v	file:
registryProperty	vim/vim/src/if_xcmdsrv.c	/^static Atom	registryProperty = None;$/;"	v	file:
regitem_S	vim/vim/src/regexp.c	/^typedef struct regitem_S$/;"	s	file:
regitem_S::__anon130::regsave	vim/vim/src/regexp.c	/^	regsave_T  regsave;$/;"	m	union:regitem_S::__anon130	file:	access:public
regitem_S::__anon130::sesave	vim/vim/src/regexp.c	/^	save_se_T  sesave;$/;"	m	union:regitem_S::__anon130	file:	access:public
regitem_S::rs_no	vim/vim/src/regexp.c	/^    short	rs_no;		\/* submatch nr or BEHIND\/NOBEHIND *\/$/;"	m	struct:regitem_S	file:	access:public
regitem_S::rs_scan	vim/vim/src/regexp.c	/^    char_u	*rs_scan;	\/* current node in program *\/$/;"	m	struct:regitem_S	file:	access:public
regitem_S::rs_state	vim/vim/src/regexp.c	/^    regstate_T	rs_state;	\/* what we are doing, one of RS_ above *\/$/;"	m	struct:regitem_S	file:	access:public
regitem_S::rs_un	vim/vim/src/regexp.c	/^    } rs_un;			\/* room for saving reginput *\/$/;"	m	struct:regitem_S	typeref:union:regitem_S::__anon130	file:	access:public
regitem_T	vim/vim/src/regexp.c	/^} regitem_T;$/;"	t	typeref:struct:regitem_S	file:
regline	vim/vim/src/regexp.c	/^static char_u	*regline;	\/* start of current line *\/$/;"	v	file:
reglnum	vim/vim/src/regexp.c	/^static linenr_T	reglnum;	\/* line number, relative to first line *\/$/;"	v	file:
regmatch	vim/vim/src/regexp.c	/^regmatch($/;"	f	file:	signature:( char_u *scan, proftime_T *tm UNUSED, int *timed_out UNUSED)
regmatch	vim/vim/src/regexp.c	/^static int	regmatch(char_u *prog, proftime_T *tm, int *timed_out);$/;"	p	file:	signature:(char_u *prog, proftime_T *tm, int *timed_out)
regmatch	vim/vim/src/tag.c	/^    regmatch_T	regmatch;	\/* regexp program, may be NULL *\/$/;"	m	struct:__anon155	file:	access:public
regmatch_T	vim/vim/src/regexp.h	/^} regmatch_T;$/;"	t	typeref:struct:__anon145
regmbc	vim/vim/src/regexp.c	/^regmbc(int c)$/;"	f	file:	signature:(int c)
regmbc	vim/vim/src/regexp.c	/^static void	regmbc(int c);$/;"	p	file:	signature:(int c)
regmbc	vim/vim/src/regexp.c	720;"	d	file:
regmlen	vim/vim/src/regexp.h	/^    int			regmlen;$/;"	m	struct:__anon143	access:public
regmmatch_T	vim/vim/src/regexp.h	/^} regmmatch_T;$/;"	t	typeref:struct:__anon146
regmust	vim/vim/src/regexp.h	/^    char_u		*regmust;$/;"	m	struct:__anon143	access:public
regname	vim/vim/src/ex_cmds.h	/^    int		regname;	\/* register name (NUL if none) *\/$/;"	m	struct:exarg	access:public
regname	vim/vim/src/regexp.c	/^static char_u regname[][30] = {$/;"	v	file:
regname	vim/vim/src/structs.h	/^    int		regname;	\/* register to use for the operator *\/$/;"	m	struct:oparg_S	access:public
regnarrate	vim/vim/src/regexp.c	/^int		regnarrate = 0;$/;"	v
regnext	vim/vim/src/regexp.c	/^regnext(char_u *p)$/;"	f	file:	signature:(char_u *p)
regnext	vim/vim/src/regexp.c	/^static char_u	*regnext(char_u *);$/;"	p	file:	signature:(char_u *)
regnode	vim/vim/src/regexp.c	/^regnode(int op)$/;"	f	file:	signature:(int op)
regnode	vim/vim/src/regexp.c	/^static char_u	*regnode(int);$/;"	p	file:	signature:(int)
regnpar	vim/vim/src/regexp.c	/^     int	regnpar;$/;"	m	struct:__anon124	file:	access:public
regnpar	vim/vim/src/regexp.c	/^static int	regnpar;	\/* () count. *\/$/;"	v	file:
regnzpar	vim/vim/src/regexp.c	/^static int	regnzpar;	\/* \\z() count. *\/$/;"	v	file:
regoptail	vim/vim/src/regexp.c	/^regoptail(char_u *p, char_u *val)$/;"	f	file:	signature:(char_u *p, char_u *val)
regoptail	vim/vim/src/regexp.c	/^static void	regoptail(char_u *, char_u *);$/;"	p	file:	signature:(char_u *, char_u *)
regparse	vim/vim/src/regexp.c	/^     char_u	*regparse;$/;"	m	struct:__anon124	file:	access:public
regparse	vim/vim/src/regexp.c	/^static char_u	*regparse;	\/* Input-scan pointer. *\/$/;"	v	file:
regpiece	vim/vim/src/regexp.c	/^regpiece(int *flagp)$/;"	f	file:	signature:(int *flagp)
regpiece	vim/vim/src/regexp.c	/^static char_u	*regpiece(int *);$/;"	p	file:	signature:(int *)
regprog	vim/vim/src/regexp.h	/^    regprog_T		*regprog;$/;"	m	struct:__anon145	access:public
regprog	vim/vim/src/regexp.h	/^    regprog_T		*regprog;$/;"	m	struct:__anon146	access:public
regprog	vim/vim/src/regexp.h	/^typedef struct regprog$/;"	s
regprog::engine	vim/vim/src/regexp.h	/^    regengine_T		*engine;$/;"	m	struct:regprog	access:public
regprog::re_engine	vim/vim/src/regexp.h	/^    unsigned		re_engine;   \/* automatic, backtracking or nfa engine *\/$/;"	m	struct:regprog	access:public
regprog::re_flags	vim/vim/src/regexp.h	/^    unsigned		re_flags;    \/* second argument for vim_regcomp() *\/$/;"	m	struct:regprog	access:public
regprog::regflags	vim/vim/src/regexp.h	/^    unsigned		regflags;$/;"	m	struct:regprog	access:public
regprog_T	vim/vim/src/regexp.h	/^} regprog_T;$/;"	t	typeref:struct:regprog
regprop	vim/vim/src/regexp.c	/^regprop(char_u *op)$/;"	f	file:	signature:(char_u *op)
regprop	vim/vim/src/regexp.c	/^static char_u	*regprop(char_u *);$/;"	p	file:	signature:(char_u *)
regrepeat	vim/vim/src/regexp.c	/^regrepeat($/;"	f	file:	signature:( char_u *p, long maxcount)
regrepeat	vim/vim/src/regexp.c	/^static int	regrepeat(char_u *p, long maxcount);$/;"	p	file:	signature:(char_u *p, long maxcount)
regsave	vim/vim/src/regexp.c	/^	regsave_T  regsave;$/;"	m	union:regitem_S::__anon130	file:	access:public
regsave_T	vim/vim/src/regexp.c	/^} regsave_T;$/;"	t	typeref:struct:__anon125	file:
regsize	vim/vim/src/regexp.c	/^static long	regsize;	\/* Code size. *\/$/;"	v	file:
regstack	vim/vim/src/regexp.c	/^static garray_T	regstack = {0, 0, 0, 0, NULL};$/;"	v	file:
regstack_pop	vim/vim/src/regexp.c	/^regstack_pop(char_u **scan)$/;"	f	file:	signature:(char_u **scan)
regstack_pop	vim/vim/src/regexp.c	/^static void regstack_pop(char_u **scan);$/;"	p	file:	signature:(char_u **scan)
regstack_push	vim/vim/src/regexp.c	/^regstack_push(regstate_T state, char_u *scan)$/;"	f	file:	signature:(regstate_T state, char_u *scan)
regstack_push	vim/vim/src/regexp.c	/^static regitem_T *regstack_push(regstate_T state, char_u *scan);$/;"	p	file:	signature:(regstate_T state, char_u *scan)
regstar_S	vim/vim/src/regexp.c	/^typedef struct regstar_S$/;"	s	file:
regstar_S::count	vim/vim/src/regexp.c	/^    long	count;$/;"	m	struct:regstar_S	file:	access:public
regstar_S::maxval	vim/vim/src/regexp.c	/^    long	maxval;$/;"	m	struct:regstar_S	file:	access:public
regstar_S::minval	vim/vim/src/regexp.c	/^    long	minval;$/;"	m	struct:regstar_S	file:	access:public
regstar_S::nextb	vim/vim/src/regexp.c	/^    int		nextb;		\/* next byte *\/$/;"	m	struct:regstar_S	file:	access:public
regstar_S::nextb_ic	vim/vim/src/regexp.c	/^    int		nextb_ic;	\/* next byte reverse case *\/$/;"	m	struct:regstar_S	file:	access:public
regstar_T	vim/vim/src/regexp.c	/^} regstar_T;$/;"	t	typeref:struct:regstar_S	file:
regstart	vim/vim/src/regexp.h	/^    int			regstart;	\/* char at start of pattern *\/$/;"	m	struct:__anon144	access:public
regstart	vim/vim/src/regexp.h	/^    int			regstart;$/;"	m	struct:__anon143	access:public
regstate_E	vim/vim/src/regexp.c	/^typedef enum regstate_E$/;"	g	file:
regstate_T	vim/vim/src/regexp.c	/^} regstate_T;$/;"	t	typeref:enum:regstate_E	file:
regsub_T	vim/vim/src/regexp_nfa.c	/^} regsub_T;$/;"	t	typeref:struct:__anon116	file:
regsubmatch_T	vim/vim/src/regexp.c	/^} regsubmatch_T;$/;"	t	typeref:struct:__anon132	file:
regsubs_T	vim/vim/src/regexp_nfa.c	/^} regsubs_T;$/;"	t	typeref:struct:__anon118	file:
regtail	vim/vim/src/regexp.c	/^regtail(char_u *p, char_u *val)$/;"	f	file:	signature:(char_u *p, char_u *val)
regtail	vim/vim/src/regexp.c	/^static void	regtail(char_u *, char_u *);$/;"	p	file:	signature:(char_u *, char_u *)
regtilde	vim/vim/src/regexp.c	/^regtilde(char_u *source, int magic)$/;"	f	signature:(char_u *source, int magic)
regtry	vim/vim/src/regexp.c	/^regtry($/;"	f	file:	signature:( bt_regprog_T *prog, colnr_T col, proftime_T *tm, int *timed_out)
regtry	vim/vim/src/regexp.c	/^static long	regtry(bt_regprog_T *prog, colnr_T col, proftime_T *tm, int *timed_out);$/;"	p	file:	signature:(bt_regprog_T *prog, colnr_T col, proftime_T *tm, int *timed_out)
rem_backslash	vim/vim/src/charset.c	/^rem_backslash(char_u *str)$/;"	f	signature:(char_u *str)
remap_choice	vim/vim/src/dosinst.c	/^int	remap_choice = (int)remap_win;$/;"	v
remap_choices	vim/vim/src/dosinst.c	/^char	*(remap_choices[]) =$/;"	v
remap_no	vim/vim/src/dosinst.c	/^    remap_no = 1,$/;"	e	enum:__anon134	file:
remap_text	vim/vim/src/dosinst.c	/^char	*remap_text = "- %s";$/;"	v
remap_win	vim/vim/src/dosinst.c	/^    remap_win$/;"	e	enum:__anon134	file:
remote_common	vim/vim/src/evalfunc.c	/^remote_common(typval_T *argvars, typval_T *rettv, int expr)$/;"	f	file:	signature:(typval_T *argvars, typval_T *rettv, int expr)
removable	vim/vim/src/mark.c	/^removable(char_u *name)$/;"	f	signature:(char_u *name)
removeEventHandler	vim/vim/src/gui_beval.c	/^removeEventHandler(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
removeEventHandler	vim/vim/src/gui_beval.c	/^static void removeEventHandler(BalloonEval *);$/;"	p	file:	signature:(BalloonEval *)
remove_any_timer	vim/vim/src/gui_w32.c	/^remove_any_timer(void)$/;"	f	file:	signature:(void)
remove_batfiles	vim/vim/src/uninstal.c	/^remove_batfiles(int doit)$/;"	f	file:	signature:(int doit)
remove_bom	vim/vim/src/mbyte.c	/^remove_bom(char_u *s)$/;"	f	signature:(char_u *s)
remove_cb_node	vim/vim/src/channel.c	/^remove_cb_node(cbq_T *head, cbq_T *node)$/;"	f	file:	signature:(cbq_T *head, cbq_T *node)
remove_duplicates	vim/vim/src/misc1.c	/^remove_duplicates(garray_T *gap)$/;"	f	signature:(garray_T *gap)
remove_icons	vim/vim/src/uninstal.c	/^remove_icons(void)$/;"	f	file:	signature:(void)
remove_if_exists	vim/vim/src/uninstal.c	/^remove_if_exists(char *path, char *filename)$/;"	f	file:	signature:(char *path, char *filename)
remove_json_node	vim/vim/src/channel.c	/^remove_json_node(jsonq_T *head, jsonq_T *node)$/;"	f	file:	signature:(jsonq_T *head, jsonq_T *node)
remove_key_from_history	vim/vim/src/ex_getln.c	/^remove_key_from_history(void)$/;"	f	signature:(void)
remove_menu	vim/vim/src/menu.c	/^remove_menu($/;"	f	file:	signature:( vimmenu_T **menup, char_u *name, int modes, int silent)
remove_menu	vim/vim/src/menu.c	/^static int remove_menu(vimmenu_T **, char_u *, int, int silent);$/;"	p	file:	signature:(vimmenu_T **, char_u *, int, int silent)
remove_openwith	vim/vim/src/uninstal.c	/^remove_openwith(void)$/;"	f	file:	signature:(void)
remove_popup	vim/vim/src/uninstal.c	/^remove_popup(void)$/;"	f	file:	signature:(void)
remove_start_menu	vim/vim/src/uninstal.c	/^remove_start_menu(void)$/;"	f	file:	signature:(void)
remove_tail	vim/vim/src/dosinst.h	/^remove_tail(char *path)$/;"	f	signature:(char *path)
remove_tail	vim/vim/src/misc1.c	/^remove_tail(char_u *p, char_u *pend, char_u *name)$/;"	f	file:	signature:(char_u *p, char_u *pend, char_u *name)
remove_tail	vim/vim/src/misc1.c	/^static char_u *remove_tail(char_u *p, char_u *pend, char_u *name);$/;"	p	file:	signature:(char_u *p, char_u *pend, char_u *name)
remove_timer	vim/vim/src/ex_cmds2.c	/^remove_timer(timer_T *timer)$/;"	f	file:	signature:(timer_T *timer)
remove_timer	vim/vim/src/if_mzsch.c	/^remove_timer(void)$/;"	f	file:	signature:(void)
remove_timer	vim/vim/src/if_mzsch.c	/^static void remove_timer(void);$/;"	p	file:	signature:(void)
rename_buffer	vim/vim/src/ex_cmds.c	/^rename_buffer(char_u *new_fname)$/;"	f	signature:(char_u *new_fname)
renderingMode	vim/vim/src/gui_dwrite.h	/^    int renderingMode;$/;"	m	struct:DWriteRenderingParams	access:public
rep_compare	vim/vim/src/spellfile.c	/^rep_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
rep_compare	vim/vim/src/spellfile.c	/^rep_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
repeat_cmdline	vim/vim/src/globals.h	/^EXTERN char_u	*repeat_cmdline INIT(= NULL); \/* command line for "." *\/$/;"	v
repeat_message	vim/vim/src/message.c	/^repeat_message(void)$/;"	f	signature:(void)
repeating	vim/vim/src/ex_docmd.c	/^    int		repeating;		\/* TRUE when looping a second time *\/$/;"	m	struct:loop_cookie	file:	access:public
repl_cmdline	vim/vim/src/ex_docmd.c	/^repl_cmdline($/;"	f	file:	signature:( exarg_T *eap, char_u *src, int srclen, char_u *repl, char_u **cmdlinep)
repl_cmdline	vim/vim/src/ex_docmd.c	/^static char_u	*repl_cmdline(exarg_T *eap, char_u *src, int srclen, char_u *repl, char_u **cmdlinep);$/;"	p	file:	signature:(exarg_T *eap, char_u *src, int srclen, char_u *repl, char_u **cmdlinep)
repl_from	vim/vim/src/spell.c	/^static char_u	*repl_from = NULL;$/;"	v	file:
repl_to	vim/vim/src/spell.c	/^static char_u	*repl_to = NULL;$/;"	v	file:
repl_widgets	vim/vim/src/gui_gtk.c	/^static SharedFindReplace repl_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
repl_widgets	vim/vim/src/gui_motif.c	/^static SharedFindReplace repl_widgets = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};$/;"	v	file:
replace	vim/vim/src/gui_gtk.c	/^    GtkWidget *replace;	\/* 'Replace With' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
replace	vim/vim/src/gui_motif.c	/^    Widget replace;	\/* 'Replace With' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
replace_do_bs	vim/vim/src/edit.c	/^replace_do_bs(int limit_col)$/;"	f	file:	signature:(int limit_col)
replace_do_bs	vim/vim/src/edit.c	/^static void replace_do_bs(int limit_col);$/;"	p	file:	signature:(int limit_col)
replace_flush	vim/vim/src/edit.c	/^replace_flush(void)$/;"	f	file:	signature:(void)
replace_flush	vim/vim/src/edit.c	/^static void replace_flush(void);$/;"	p	file:	signature:(void)
replace_join	vim/vim/src/edit.c	/^replace_join($/;"	f	file:	signature:( int off)
replace_join	vim/vim/src/edit.c	/^static void replace_join(int off);$/;"	p	file:	signature:(int off)
replace_makeprg	vim/vim/src/ex_docmd.c	/^replace_makeprg(exarg_T *eap, char_u *p, char_u **cmdlinep)$/;"	f	file:	signature:(exarg_T *eap, char_u *p, char_u **cmdlinep)
replace_makeprg	vim/vim/src/ex_docmd.c	/^static char_u	*replace_makeprg(exarg_T *eap, char_u *p, char_u **cmdlinep);$/;"	p	file:	signature:(exarg_T *eap, char_u *p, char_u **cmdlinep)
replace_offset	vim/vim/src/globals.h	/^EXTERN int	replace_offset INIT(= 0);   \/* offset for replace_push() *\/$/;"	v
replace_pop	vim/vim/src/edit.c	/^replace_pop(void)$/;"	f	file:	signature:(void)
replace_pop	vim/vim/src/edit.c	/^static int  replace_pop(void);$/;"	p	file:	signature:(void)
replace_pop_ins	vim/vim/src/edit.c	/^replace_pop_ins(void)$/;"	f	file:	signature:(void)
replace_pop_ins	vim/vim/src/edit.c	/^static void replace_pop_ins(void);$/;"	p	file:	signature:(void)
replace_push	vim/vim/src/edit.c	/^replace_push($/;"	f	signature:( int c)
replace_push_mb	vim/vim/src/edit.c	/^replace_push_mb(char_u *p)$/;"	f	signature:(char_u *p)
replace_stack	vim/vim/src/edit.c	/^static char_u	*replace_stack = NULL;$/;"	v	file:
replace_stack_len	vim/vim/src/edit.c	/^static long	replace_stack_len = 0;	    \/* max. number of entries *\/$/;"	v	file:
replace_stack_nr	vim/vim/src/edit.c	/^static long	replace_stack_nr = 0;	    \/* next entry in replace stack *\/$/;"	v	file:
replace_termcodes	vim/vim/src/term.c	/^replace_termcodes($/;"	f	signature:( char_u *from, char_u **bufp, int from_part, int do_lt, int special)
reply	vim/vim/src/os_mswin.c	/^    char_u	*reply;		\/* reply string *\/$/;"	m	struct:__anon21	file:	access:public
reply_T	vim/vim/src/os_mswin.c	/^} reply_T;$/;"	t	typeref:struct:__anon21	file:
reply_list	vim/vim/src/os_mswin.c	/^static garray_T reply_list = {0, 0, sizeof(reply_T), 5, 0};$/;"	v	file:
reply_received	vim/vim/src/os_mswin.c	/^static int reply_received = 0;$/;"	v	file:
report_discard_pending	vim/vim/src/ex_eval.c	/^report_discard_pending(int pending, void *value)$/;"	f	signature:(int pending, void *value)
report_make_pending	vim/vim/src/ex_eval.c	/^report_make_pending(int pending, void *value)$/;"	f	signature:(int pending, void *value)
report_pending	vim/vim/src/ex_eval.c	/^report_pending(int action, int pending, void *value)$/;"	f	file:	signature:(int action, int pending, void *value)
report_pending	vim/vim/src/ex_eval.c	/^static void	report_pending(int action, int pending, void *value);$/;"	p	file:	signature:(int action, int pending, void *value)
report_re_switch	vim/vim/src/regexp.c	/^report_re_switch(char_u *pat)$/;"	f	file:	signature:(char_u *pat)
report_re_switch	vim/vim/src/regexp.c	/^static void report_re_switch(char_u *pat);$/;"	p	file:	signature:(char_u *pat)
report_resume_pending	vim/vim/src/ex_eval.c	/^report_resume_pending(int pending, void *value)$/;"	f	signature:(int pending, void *value)
report_state	vim/vim/src/regexp_nfa.c	/^report_state(char *action,$/;"	f	file:	signature:(char *action, regsub_T *sub, nfa_state_T *state, int lid, nfa_pim_T *pim)
req_codes_from_term	vim/vim/src/term.c	/^req_codes_from_term(void)$/;"	f	file:	signature:(void)
req_codes_from_term	vim/vim/src/term.c	/^static void req_codes_from_term(void);$/;"	p	file:	signature:(void)
req_more_codes_from_term	vim/vim/src/term.c	/^req_more_codes_from_term(void)$/;"	f	file:	signature:(void)
req_more_codes_from_term	vim/vim/src/term.c	/^static void req_more_codes_from_term(void);$/;"	p	file:	signature:(void)
requestBalloon	vim/vim/src/gui_beval.c	/^requestBalloon(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
requestBalloon	vim/vim/src/gui_beval.c	/^static void requestBalloon(BalloonEval *);$/;"	p	file:	signature:(BalloonEval *)
request_choice	vim/vim/src/dosinst.c	/^request_choice(void)$/;"	f	file:	signature:(void)
request_dec_mode	vim/vim/src/libvterm/src/state.c	/^static void request_dec_mode(VTermState *state, int num)$/;"	f	file:	signature:(VTermState *state, int num)
request_status_string	vim/vim/src/libvterm/src/state.c	/^static void request_status_string(VTermState *state, const char *command, size_t cmdlen)$/;"	f	file:	signature:(VTermState *state, const char *command, size_t cmdlen)
requires_py_version	vim/vim/src/ex_cmds2.c	/^requires_py_version(char_u *filename)$/;"	f	file:	signature:(char_u *filename)
rescore_one	vim/vim/src/spell.c	/^rescore_one(suginfo_T *su, suggest_T *stp)$/;"	f	file:	signature:(suginfo_T *su, suggest_T *stp)
rescore_one	vim/vim/src/spell.c	/^static void rescore_one(suginfo_T *su, suggest_T *stp);$/;"	p	file:	signature:(suginfo_T *su, suggest_T *stp)
rescore_suggestions	vim/vim/src/spell.c	/^rescore_suggestions(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
rescore_suggestions	vim/vim/src/spell.c	/^static void rescore_suggestions(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
resel_VIsual_line_count	vim/vim/src/normal.c	/^static linenr_T	resel_VIsual_line_count;	\/* number of lines *\/$/;"	v	file:
resel_VIsual_mode	vim/vim/src/normal.c	/^static int	resel_VIsual_mode = NUL;	\/* 'v', 'V', or Ctrl-V *\/$/;"	v	file:
resel_VIsual_vcol	vim/vim/src/normal.c	/^static colnr_T	resel_VIsual_vcol;		\/* nr of cols or end col *\/$/;"	v	file:
reserved0	vim/vim/src/os_vms.c	/^    unsigned char  reserved0;$/;"	m	struct:typeahead_st	file:	access:public
reserved1	vim/vim/src/os_vms.c	/^    unsigned long  reserved1;$/;"	m	struct:typeahead_st	file:	access:public
reset_VIsual	vim/vim/src/normal.c	/^reset_VIsual(void)$/;"	f	signature:(void)
reset_VIsual_and_resel	vim/vim/src/normal.c	/^reset_VIsual_and_resel(void)$/;"	f	signature:(void)
reset_cterm_colors	vim/vim/src/screen.c	/^reset_cterm_colors(void)$/;"	f	signature:(void)
reset_expand_highlight	vim/vim/src/syntax.c	/^reset_expand_highlight(void)$/;"	f	signature:(void)
reset_focus	vim/vim/src/gui_motif.c	/^reset_focus(void)$/;"	f	file:	signature:(void)
reset_focus	vim/vim/src/gui_motif.c	/^static void reset_focus(void);$/;"	p	file:	signature:(void)
reset_last_sourcing	vim/vim/src/message.c	/^reset_last_sourcing(void)$/;"	f	signature:(void)
reset_modifiable	vim/vim/src/option.c	/^reset_modifiable(void)$/;"	f	signature:(void)
reset_option_was_set	vim/vim/src/option.c	/^reset_option_was_set(char_u *name)$/;"	f	signature:(char_u *name)
reset_search_dir	vim/vim/src/search.c	/^reset_search_dir(void)$/;"	f	signature:(void)
reset_signals	vim/vim/src/os_unix.c	/^reset_signals(void)$/;"	f	signature:(void)
reset_synblock	vim/vim/src/syntax.c	/^reset_synblock(win_T *wp)$/;"	f	signature:(win_T *wp)
reset_v_option_vars	vim/vim/src/eval.c	/^reset_v_option_vars(void)$/;"	f	signature:(void)
resettitle	vim/vim/src/buffer.c	/^resettitle(void)$/;"	f	signature:(void)
resize	vim/vim/src/libvterm/include/vterm.h	/^  int (*resize)(int rows, int cols, VTermPos *delta, void *user);$/;"	m	struct:__anon60	access:public
resize	vim/vim/src/libvterm/include/vterm.h	/^  int (*resize)(int rows, int cols, void *user);$/;"	m	struct:__anon59	access:public
resize	vim/vim/src/libvterm/include/vterm.h	/^  int (*resize)(int rows, int cols, void *user);$/;"	m	struct:__anon63	access:public
resize	vim/vim/src/libvterm/src/screen.c	/^static int resize(int new_rows, int new_cols, VTermPos *delta, void *user)$/;"	f	file:	signature:(int new_rows, int new_cols, VTermPos *delta, void *user)
resolve_symlink	vim/vim/src/memline.c	/^resolve_symlink(char_u *fname, char_u *buf)$/;"	f	signature:(char_u *fname, char_u *buf)
resources	vim/vim/src/gui_at_sb.c	/^static XtResource resources[] =$/;"	v	file:
resources	vim/vim/src/gui_xmebw.c	/^static XtResource resources[] =$/;"	v	file:
restart_VIsual_select	vim/vim/src/normal.c	/^static int	restart_VIsual_select = 0;$/;"	v	file:
restart_command	vim/vim/src/gui_gtk_x11.c	/^static const char *restart_command = NULL;$/;"	v	file:
restart_edit	vim/vim/src/globals.h	/^EXTERN int restart_edit INIT(= 0);	\/* call edit when next cmd finished *\/$/;"	v
restoreRedobuff	vim/vim/src/getchar.c	/^restoreRedobuff(save_redo_T *save_redo)$/;"	f	signature:(save_redo_T *save_redo)
restore_buffer	vim/vim/src/window.c	/^restore_buffer(bufref_T *save_curbuf)$/;"	f	signature:(bufref_T *save_curbuf)
restore_chartab	vim/vim/src/syntax.c	/^restore_chartab(char_u *chartab)$/;"	f	file:	signature:(char_u *chartab)
restore_chartab	vim/vim/src/syntax.c	/^static void restore_chartab(char_u *chartab);$/;"	p	file:	signature:(char_u *chartab)
restore_clipboard	vim/vim/src/os_unix.c	/^restore_clipboard(void)$/;"	f	file:	signature:(void)
restore_clipboard	vim/vim/src/os_unix.c	/^static void restore_clipboard(void);$/;"	p	file:	signature:(void)
restore_cmdline	vim/vim/src/ex_getln.c	/^restore_cmdline(struct cmdline_info *ccp)$/;"	f	file:	signature:(struct cmdline_info *ccp)
restore_cmdline	vim/vim/src/ex_getln.c	/^static void	restore_cmdline(struct cmdline_info *ccp);$/;"	p	file:	signature:(struct cmdline_info *ccp)
restore_cmdline_alloc	vim/vim/src/ex_getln.c	/^restore_cmdline_alloc(char_u *p)$/;"	f	signature:(char_u *p)
restore_cterm_colors	vim/vim/src/syntax.c	/^restore_cterm_colors(void)$/;"	f	signature:(void)
restore_current_funccal	vim/vim/src/userfunc.c	/^restore_current_funccal(void *f)$/;"	f	signature:(void *f)
restore_dbg_stuff	vim/vim/src/ex_docmd.c	/^restore_dbg_stuff(struct dbg_stuff *dsp)$/;"	f	file:	signature:(struct dbg_stuff *dsp)
restore_dbg_stuff	vim/vim/src/ex_docmd.c	/^static void restore_dbg_stuff(struct dbg_stuff *dsp);$/;"	p	file:	signature:(struct dbg_stuff *dsp)
restore_funccal	vim/vim/src/userfunc.c	/^restore_funccal(void *vfc)$/;"	f	signature:(void *vfc)
restore_parse_state	vim/vim/src/regexp.c	/^restore_parse_state(parse_state_T *ps)$/;"	f	file:	signature:(parse_state_T *ps)
restore_parse_state	vim/vim/src/regexp.c	/^static void	restore_parse_state(parse_state_T *ps);$/;"	p	file:	signature:(parse_state_T *ps)
restore_se	vim/vim/src/regexp.c	3514;"	d	file:
restore_search_patterns	vim/vim/src/search.c	/^restore_search_patterns(void)$/;"	f	signature:(void)
restore_snapshot	vim/vim/src/window.c	/^restore_snapshot($/;"	f	signature:( int idx, int close_curwin)
restore_snapshot_rec	vim/vim/src/window.c	/^restore_snapshot_rec(frame_T *sn, frame_T *fr)$/;"	f	file:	signature:(frame_T *sn, frame_T *fr)
restore_snapshot_rec	vim/vim/src/window.c	/^static win_T *restore_snapshot_rec(frame_T *sn, frame_T *fr);$/;"	p	file:	signature:(frame_T *sn, frame_T *fr)
restore_start_dir	vim/vim/src/quickfix.c	/^restore_start_dir(char_u *dirname_start)$/;"	f	file:	signature:(char_u *dirname_start)
restore_start_dir	vim/vim/src/quickfix.c	/^static void	restore_start_dir(char_u *dirname_start);$/;"	p	file:	signature:(char_u *dirname_start)
restore_subexpr	vim/vim/src/regexp.c	/^restore_subexpr(regbehind_T *bp)$/;"	f	file:	signature:(regbehind_T *bp)
restore_subexpr	vim/vim/src/regexp.c	/^static void	restore_subexpr(regbehind_T *bp);$/;"	p	file:	signature:(regbehind_T *bp)
restore_typeahead	vim/vim/src/getchar.c	/^restore_typeahead(tasave_T *tp)$/;"	f	signature:(tasave_T *tp)
restore_vimvar	vim/vim/src/eval.c	/^restore_vimvar(int idx, typval_T *save_tv)$/;"	f	file:	signature:(int idx, typval_T *save_tv)
restore_win	vim/vim/src/window.c	/^restore_win($/;"	f	signature:( win_T *save_curwin UNUSED, tabpage_T *save_curtab UNUSED, int no_display UNUSED)
restore_win_for_buf	vim/vim/src/if_py_both.h	/^restore_win_for_buf($/;"	f	signature:( win_T *save_curwin, tabpage_T *save_curtab, bufref_T *save_curbuf)
restoreicanon	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^void restoreicanon(void)$/;"	f	signature:(void)
restricted	vim/vim/src/globals.h	/^EXTERN int	restricted INIT(= FALSE);$/;"	v
result	vim/vim/src/digraph.c	/^    result_T	result;$/;"	m	struct:digraph	file:	access:public
result	vim/vim/src/if_py_both.h	/^    PyObject	*result;$/;"	m	struct:__anon98	access:public
result	vim/vim/src/if_xcmdsrv.c	/^    char_u  *result;	\/* String result for command (malloc'ed).$/;"	m	struct:PendingCommand	file:	access:public
result	vim/vim/src/regexp_nfa.c	/^    int		result;		\/* NFA_PIM_*, see below *\/$/;"	m	struct:nfa_pim_S	file:	access:public
result_T	vim/vim/src/digraph.c	/^typedef char_u result_T;$/;"	t	file:
result_T	vim/vim/src/digraph.c	/^typedef int result_T;$/;"	t	file:
retlen	vim/vim/src/os_vms.c	/^    int		*retlen;$/;"	m	struct:__anon26	file:	access:public
rettv	vim/vim/src/structs.h	/^    typval_T	*rettv;		\/* return value *\/$/;"	m	struct:funccall_S	access:public
rettv_dict_alloc	vim/vim/src/dict.c	/^rettv_dict_alloc(typval_T *rettv)$/;"	f	signature:(typval_T *rettv)
rettv_dict_set	vim/vim/src/dict.c	/^rettv_dict_set(typval_T *rettv, dict_T *d)$/;"	f	signature:(typval_T *rettv, dict_T *d)
rettv_list_alloc	vim/vim/src/list.c	/^rettv_list_alloc(typval_T *rettv)$/;"	f	signature:(typval_T *rettv)
rettv_list_set	vim/vim/src/list.c	/^rettv_list_set(typval_T *rettv, list_T *l)$/;"	f	signature:(typval_T *rettv, list_T *l)
returned	vim/vim/src/structs.h	/^    int		returned;	\/* ":return" used *\/$/;"	m	struct:funccall_S	access:public
retval	vim/vim/src/structs.h	/^    int		retval;		\/* return: CA_* values *\/$/;"	m	struct:cmdarg_S	access:public
reverse	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int reverse   : 1;$/;"	m	struct:__anon61	access:public
reverse	vim/vim/src/libvterm/src/screen.c	/^  unsigned int reverse   : 1;$/;"	m	struct:__anon29	file:	access:public
reverse	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int reverse:1;$/;"	m	struct:VTermPen	access:public
reverse	vim/vim/src/libvterm/t/harness.c	/^  int reverse;$/;"	m	struct:__anon42	file:	access:public
reverse_text	vim/vim/src/search.c	/^reverse_text(char_u *s)$/;"	f	signature:(char_u *s)
revins_chars	vim/vim/src/edit.c	/^static int	revins_chars;		\/* how much to skip after edit *\/$/;"	v	file:
revins_legal	vim/vim/src/edit.c	/^static int	revins_legal;		\/* was the last char 'legal'? *\/$/;"	v	file:
revins_on	vim/vim/src/edit.c	/^static int	revins_on;		\/* reverse insert mode on *\/$/;"	v	file:
revins_scol	vim/vim/src/edit.c	/^static int	revins_scol;		\/* start column of revins session *\/$/;"	v	file:
rewind	vim/vim/src/xxd/xxd.c	/^extern int rewind  __P((FILE *));$/;"	p	file:	signature:(FILE *)
rewind_conditionals	vim/vim/src/ex_eval.c	/^rewind_conditionals($/;"	f	signature:( struct condstack *cstack, int idx, int cond_type, int *cond_level)
rex	vim/vim/src/regexp.c	/^static regexec_T	rex;$/;"	v	file:
rex_in_use	vim/vim/src/regexp.c	/^static int		rex_in_use = FALSE;$/;"	v	file:
rgb_fname	vim/vim/src/xpm/include/xpm.h	/^    char *rgb_fname;			\/* RGB text file name *\/$/;"	m	struct:__anon93	access:public
ri_alpha	vim/vim/src/regexp.c	576;"	d	file:
ri_alpha	vim/vim/src/regexp.c	586;"	d	file:
ri_digit	vim/vim/src/regexp.c	571;"	d	file:
ri_digit	vim/vim/src/regexp.c	581;"	d	file:
ri_head	vim/vim/src/regexp.c	575;"	d	file:
ri_head	vim/vim/src/regexp.c	585;"	d	file:
ri_hex	vim/vim/src/regexp.c	572;"	d	file:
ri_hex	vim/vim/src/regexp.c	582;"	d	file:
ri_lower	vim/vim/src/regexp.c	577;"	d	file:
ri_lower	vim/vim/src/regexp.c	587;"	d	file:
ri_octal	vim/vim/src/regexp.c	573;"	d	file:
ri_octal	vim/vim/src/regexp.c	583;"	d	file:
ri_upper	vim/vim/src/regexp.c	578;"	d	file:
ri_upper	vim/vim/src/regexp.c	588;"	d	file:
ri_white	vim/vim/src/regexp.c	579;"	d	file:
ri_white	vim/vim/src/regexp.c	589;"	d	file:
ri_word	vim/vim/src/regexp.c	574;"	d	file:
ri_word	vim/vim/src/regexp.c	584;"	d	file:
right_sbar_x	vim/vim/src/gui.h	/^    int		right_sbar_x;	    \/* Calculated x coord for right scrollbar *\/$/;"	m	struct:Gui	access:public
rl_mirror	vim/vim/src/screen.c	/^rl_mirror(char_u *str)$/;"	f	signature:(char_u *str)
rm	vim/vim/src/structs.h	/^    regmmatch_T	rm;	\/* points to the regexp program; contains last found$/;"	m	struct:__anon201	access:public
rm_ic	vim/vim/src/regexp.h	/^    int			rm_ic;$/;"	m	struct:__anon145	access:public
rmm_ic	vim/vim/src/regexp.h	/^    int			rmm_ic;$/;"	m	struct:__anon146	access:public
rmm_maxcol	vim/vim/src/regexp.h	/^    colnr_T		rmm_maxcol;	\/* when not zero: maximum column *\/$/;"	m	struct:__anon146	access:public
role_argument	vim/vim/src/gui_gtk_x11.c	/^static const char *role_argument = NULL;$/;"	v	file:
room	vim/vim/src/structs.h	/^	char_u	room[VAR_SHORT_LEN];	\/* room for the name *\/$/;"	m	struct:funccall_S::__anon188	access:public
root_menu	vim/vim/src/globals.h	/^EXTERN vimmenu_T	*root_menu INIT(= NULL);$/;"	v
row	vim/vim/src/gui.h	/^    int		row;		    \/* Current cursor row in GUI display *\/$/;"	m	struct:Gui	access:public
row	vim/vim/src/libvterm/include/vterm.h	/^  int row;$/;"	m	struct:__anon47	access:public
row2tcl	vim/vim/src/if_tcl.c	100;"	d	file:
row2vim	vim/vim/src/if_tcl.c	101;"	d	file:
rows	vim/vim/src/libvterm/bin/unterm.c	/^static int rows;$/;"	v	file:
rows	vim/vim/src/libvterm/src/screen.c	/^  int rows;$/;"	m	struct:VTermScreen	file:	access:public
rows	vim/vim/src/libvterm/src/vterm_internal.h	/^  int rows;$/;"	m	struct:VTerm	access:public
rows	vim/vim/src/libvterm/src/vterm_internal.h	/^  int rows;$/;"	m	struct:VTermState	access:public
rq_buffer	vim/vim/src/structs.h	/^    char_u	*rq_buffer;$/;"	m	struct:readq_S	access:public
rq_buflen	vim/vim/src/structs.h	/^    long_u	rq_buflen;$/;"	m	struct:readq_S	access:public
rq_next	vim/vim/src/structs.h	/^    readq_T	*rq_next;$/;"	m	struct:readq_S	access:public
rq_prev	vim/vim/src/structs.h	/^    readq_T	*rq_prev;$/;"	m	struct:readq_S	access:public
rs_len	vim/vim/src/regexp.c	/^    int		rs_len;$/;"	m	struct:__anon125	file:	access:public
rs_no	vim/vim/src/regexp.c	/^    short	rs_no;		\/* submatch nr or BEHIND\/NOBEHIND *\/$/;"	m	struct:regitem_S	file:	access:public
rs_scan	vim/vim/src/regexp.c	/^    char_u	*rs_scan;	\/* current node in program *\/$/;"	m	struct:regitem_S	file:	access:public
rs_state	vim/vim/src/regexp.c	/^    regstate_T	rs_state;	\/* what we are doing, one of RS_ above *\/$/;"	m	struct:regitem_S	file:	access:public
rs_u	vim/vim/src/regexp.c	/^    } rs_u;$/;"	m	struct:__anon125	typeref:union:__anon125::__anon126	file:	access:public
rs_un	vim/vim/src/regexp.c	/^    } rs_un;			\/* room for saving reginput *\/$/;"	m	struct:regitem_S	typeref:union:regitem_S::__anon130	file:	access:public
rsm	vim/vim/src/regexp.c	/^static regsubmatch_T rsm;  \/* can only be used when can_f_submatch is TRUE *\/$/;"	v	file:
rsrc_bold_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_bold_font_name; \/* Resource bold font name *\/$/;"	m	struct:Gui	access:public
rsrc_boldital_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_boldital_font_name;  \/* Resource bold-italic font name *\/$/;"	m	struct:Gui	access:public
rsrc_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_font_name;    \/* Resource font name, used if 'guifont'$/;"	m	struct:Gui	access:public
rsrc_input_method	vim/vim/src/gui.h	/^    char	*rsrc_input_method;$/;"	m	struct:Gui	access:public
rsrc_ital_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_ital_font_name; \/* Resource italic font name *\/$/;"	m	struct:Gui	access:public
rsrc_menu_bg_name	vim/vim/src/gui.h	/^    char	*rsrc_menu_bg_name;	\/* Color of menu & dialog background *\/$/;"	m	struct:Gui	access:public
rsrc_menu_fg_name	vim/vim/src/gui.h	/^    char	*rsrc_menu_fg_name;	\/* Color of menu & dialog foreground *\/$/;"	m	struct:Gui	access:public
rsrc_menu_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_menu_font_name;    \/* Resource menu Font name *\/$/;"	m	struct:Gui	access:public
rsrc_preedit_type_name	vim/vim/src/gui.h	/^    char	*rsrc_preedit_type_name;$/;"	m	struct:Gui	access:public
rsrc_rev_video	vim/vim/src/gui.h	/^    Bool	rsrc_rev_video;	    \/* Use reverse video? *\/$/;"	m	struct:Gui	access:public
rsrc_scroll_bg_name	vim/vim/src/gui.h	/^    char	*rsrc_scroll_bg_name;	\/* Color of scrollbar background *\/$/;"	m	struct:Gui	access:public
rsrc_scroll_fg_name	vim/vim/src/gui.h	/^    char	*rsrc_scroll_fg_name;	\/* Color of scrollbar foreground *\/$/;"	m	struct:Gui	access:public
rsrc_tooltip_bg_name	vim/vim/src/gui.h	/^    char	*rsrc_tooltip_bg_name;	\/* tooltip background color name *\/$/;"	m	struct:Gui	access:public
rsrc_tooltip_fg_name	vim/vim/src/gui.h	/^    char	*rsrc_tooltip_fg_name;	\/* tooltip foreground color name *\/$/;"	m	struct:Gui	access:public
rsrc_tooltip_font_name	vim/vim/src/gui.h	/^    char_u	*rsrc_tooltip_font_name; \/* tooltip font name *\/$/;"	m	struct:Gui	access:public
ru_col	vim/vim/src/globals.h	/^EXTERN int	ru_col;		\/* column for ruler *\/$/;"	v
ru_wid	vim/vim/src/globals.h	/^EXTERN int	ru_wid;		\/* 'rulerfmt' width of ruler when non-zero *\/$/;"	v
ruby_buffer_free	vim/vim/src/if_ruby.c	/^void ruby_buffer_free(buf_T *buf)$/;"	f	signature:(buf_T *buf)
ruby_enabled	vim/vim/src/if_ruby.c	/^ruby_enabled(int verbose)$/;"	f	signature:(int verbose)
ruby_end	vim/vim/src/if_ruby.c	/^ruby_end(void)$/;"	f	signature:(void)
ruby_errinfo	vim/vim/src/if_ruby.c	300;"	d	file:
ruby_funcname_table	vim/vim/src/if_ruby.c	/^} ruby_funcname_table[] =$/;"	v	typeref:struct:__anon234	file:
ruby_init	vim/vim/src/if_ruby.c	302;"	d	file:
ruby_init_loadpath	vim/vim/src/if_ruby.c	303;"	d	file:
ruby_init_stack	vim/vim/src/if_ruby.c	198;"	d	file:
ruby_init_stack	vim/vim/src/if_ruby.c	288;"	d	file:
ruby_init_stack	vim/vim/src/if_ruby.c	289;"	d	file:
ruby_init_stack	vim/vim/src/if_ruby.c	291;"	d	file:
ruby_initialized	vim/vim/src/if_ruby.c	/^static int ruby_initialized = 0;$/;"	v	file:
ruby_io_init	vim/vim/src/if_ruby.c	/^static void ruby_io_init(void)$/;"	f	file:	signature:(void)
ruby_io_init	vim/vim/src/if_ruby.c	/^static void ruby_io_init(void);$/;"	p	file:	signature:(void)
ruby_options	vim/vim/src/if_ruby.c	/^static void* (*ruby_options)(int, char**);$/;"	v	file:
ruby_options	vim/vim/src/if_ruby.c	320;"	d	file:
ruby_runtime_link_init	vim/vim/src/if_ruby.c	/^ruby_runtime_link_init(char *libname, int verbose)$/;"	f	file:	signature:(char *libname, int verbose)
ruby_script	vim/vim/src/if_ruby.c	313;"	d	file:
ruby_stack_start	vim/vim/src/if_ruby.c	/^static void *ruby_stack_start;$/;"	v	file:
ruby_sysinit	vim/vim/src/if_ruby.c	306;"	d	file:
ruby_vim_init	vim/vim/src/if_ruby.c	/^static void ruby_vim_init(void)$/;"	f	file:	signature:(void)
ruby_vim_init	vim/vim/src/if_ruby.c	/^static void ruby_vim_init(void);$/;"	p	file:	signature:(void)
ruby_window_free	vim/vim/src/if_ruby.c	/^void ruby_window_free(win_T *win)$/;"	f	signature:(win_T *win)
run_cmd	vim/vim/src/if_py_both.h	/^run_cmd(const char *cmd, void *arg UNUSED$/;"	f	signature:(const char *cmd, void *arg UNUSED , PyGILState_STATE *pygilstate UNUSED )
run_command	vim/vim/src/dosinst.h	/^run_command(char *cmd)$/;"	f	signature:(char *cmd)
run_do	vim/vim/src/if_py_both.h	/^run_do(const char *cmd, void *arg UNUSED$/;"	f	signature:(const char *cmd, void *arg UNUSED , PyGILState_STATE *pygilstate )
run_eval	vim/vim/src/if_py_both.h	/^run_eval(const char *cmd, typval_T *rettv$/;"	f	signature:(const char *cmd, typval_T *rettv , PyGILState_STATE *pygilstate UNUSED )
runner	vim/vim/src/if_py_both.h	/^typedef void (*runner)(const char *, void *$/;"	t
running_syn_inc_tag	vim/vim/src/syntax.c	/^static int running_syn_inc_tag = 0;$/;"	v	file:
runtimeidx	vim/vim/src/dosinst.h	/^int	runtimeidx;		\/* index in installdir[] where "vim60" starts *\/$/;"	v
s	vim/vim/src/list.c	/^    char_u	*s;$/;"	m	struct:join_S	file:	access:public
s	vim/vim/src/regexp_nfa.c	/^    nfa_state_T	*s;$/;"	m	union:Ptrlist	file:	access:public
s1	vim/vim/src/iid_ole.c	/^    unsigned short s1;$/;"	m	struct:_IID	file:	access:public
s2	vim/vim/src/iid_ole.c	/^    unsigned short s2;$/;"	m	struct:_IID	file:	access:public
s_bStatus	vim/vim/src/glbl_ime.cpp	/^static BOOL s_bStatus = FALSE; \/* for evacuate *\/$/;"	v	file:
s_brush	vim/vim/src/gui_w32.c	/^static HBRUSH	s_brush = NULL;$/;"	v	file:
s_busy_processing	vim/vim/src/gui_w32.c	/^static int		s_busy_processing = FALSE;$/;"	v	file:
s_button_pending	vim/vim/src/gui_w32.c	/^static int	s_button_pending = -1;$/;"	v	file:
s_cursor_visible	vim/vim/src/os_win32.c	/^static int s_cursor_visible = TRUE;$/;"	v	file:
s_directx_enabled	vim/vim/src/gui_w32.c	/^static int s_directx_enabled = 0;$/;"	v	file:
s_directx_load_attempted	vim/vim/src/gui_w32.c	/^static int s_directx_load_attempted = 0;$/;"	v	file:
s_dlgfntheight	vim/vim/src/gui_w32.c	/^static WORD		s_dlgfntheight;		\/* height of the dialog font *\/$/;"	v	file:
s_dlgfntwidth	vim/vim/src/gui_w32.c	/^static WORD		s_dlgfntwidth;		\/* width of the dialog font *\/$/;"	v	file:
s_dont_use_vimrun	vim/vim/src/os_win32.c	/^static int s_dont_use_vimrun = TRUE;$/;"	v	file:
s_dwc	vim/vim/src/gui_w32.c	/^static DWriteContext *s_dwc = NULL;$/;"	v	file:
s_findrep_hwnd	vim/vim/src/gui_w32.c	/^static HWND		s_findrep_hwnd = NULL;$/;"	v	file:
s_findrep_is_find	vim/vim/src/gui_w32.c	/^static int		s_findrep_is_find;	\/* TRUE for find dialog, FALSE$/;"	v	file:
s_findrep_msg	vim/vim/src/gui_w32.c	/^static UINT		s_findrep_msg = 0;	\/* set in gui_w[16\/32].c *\/$/;"	v	file:
s_findrep_struct	vim/vim/src/gui_w32.c	/^static FINDREPLACE	s_findrep_struct;$/;"	v	file:
s_findrep_struct_w	vim/vim/src/gui_w32.c	/^static FINDREPLACEW	s_findrep_struct_w;$/;"	v	file:
s_getting_focus	vim/vim/src/gui_w32.c	/^static int	s_getting_focus = FALSE;$/;"	v	file:
s_hWnd	vim/vim/src/glbl_ime.cpp	/^static HWND s_hWnd = NULL;$/;"	v	file:
s_hdc	vim/vim/src/gui_w32.c	/^static HDC		s_hdc = NULL;$/;"	v	file:
s_hinst	vim/vim/src/gui_w32.c	/^static HINSTANCE	s_hinst = NULL;$/;"	v	file:
s_htearbitmap	vim/vim/src/gui_w32.c	/^static HBITMAP	s_htearbitmap;	    \/* bitmap used to indicate tearoff *\/$/;"	v	file:
s_hwnd	vim/vim/src/gui_w32.c	/^HWND			s_hwnd = NULL;$/;"	v	file:
s_hwnd	vim/vim/src/os_mswin.c	/^static HWND s_hwnd = 0;	    \/* console window handle, set by GetConsoleHwnd() *\/$/;"	v	file:
s_kFlags_pending	vim/vim/src/gui_w32.c	/^static UINT	s_kFlags_pending;$/;"	v	file:
s_lParam	vim/vim/src/gui_w32.c	/^static LPARAM		s_lParam = 0;$/;"	v	file:
s_lfDefault	vim/vim/src/os_mswin.c	/^static const LOGFONT s_lfDefault =$/;"	v	file:
s_menuBar	vim/vim/src/gui_w32.c	/^static HMENU		s_menuBar = NULL;$/;"	v	file:
s_menu_id	vim/vim/src/gui_w32.c	/^static UINT	s_menu_id = 100;$/;"	v	file:
s_need_activate	vim/vim/src/gui_w32.c	/^static int		s_need_activate = FALSE;$/;"	v	file:
s_tabhwnd	vim/vim/src/gui_w32.c	/^static HWND		s_tabhwnd = NULL;$/;"	v	file:
s_tabline_wndproc	vim/vim/src/gui_w32.c	/^static WNDPROC		s_tabline_wndproc = NULL;$/;"	v	file:
s_tearoffs	vim/vim/src/menu.c	/^static int s_tearoffs = FALSE;$/;"	v	file:
s_textArea	vim/vim/src/gui_w32.c	/^static HWND		s_textArea = NULL;$/;"	v	file:
s_textfield	vim/vim/src/gui_w32.c	/^static char_u		*s_textfield; \/* Used by dialogs to pass back strings *\/$/;"	v	file:
s_timed_out	vim/vim/src/gui_w32.c	/^static int	s_timed_out = FALSE;$/;"	v	file:
s_toolbar_wndproc	vim/vim/src/gui_w32.c	/^static WNDPROC		s_toolbar_wndproc = NULL;$/;"	v	file:
s_toolbarhwnd	vim/vim/src/gui_w32.c	/^static HWND		s_toolbarhwnd = NULL;$/;"	v	file:
s_uMsg	vim/vim/src/gui_w32.c	/^static UINT		s_uMsg = 0;$/;"	v	file:
s_usenewlook	vim/vim/src/gui_w32.c	/^static int	s_usenewlook;	    \/* emulate W95\/NT4 non-bold dialogs *\/$/;"	v	file:
s_wParam	vim/vim/src/gui_w32.c	/^static WPARAM		s_wParam = 0;$/;"	v	file:
s_wait_timer	vim/vim/src/gui_w32.c	/^static UINT	s_wait_timer = 0;   \/* Timer for get char from user *\/$/;"	v	file:
s_x_pending	vim/vim/src/gui_w32.c	/^static int	s_x_pending;$/;"	v	file:
s_y_pending	vim/vim/src/gui_w32.c	/^static int	s_y_pending;$/;"	v	file:
safe_to_invoke_callback	vim/vim/src/channel.c	/^static int safe_to_invoke_callback = 0;$/;"	v	file:
safe_vgetc	vim/vim/src/getchar.c	/^safe_vgetc(void)$/;"	f	signature:(void)
sal_to_bool	vim/vim/src/spellfile.c	/^sal_to_bool(char_u *s)$/;"	f	file:	signature:(char_u *s)
sal_to_bool	vim/vim/src/spellfile.c	/^static int sal_to_bool(char_u *s);$/;"	p	file:	signature:(char_u *s)
salfirst_T	vim/vim/src/spell.h	/^typedef int salfirst_T;$/;"	t
salfirst_T	vim/vim/src/spell.h	/^typedef short salfirst_T;$/;"	t
salitem_S	vim/vim/src/spell.h	/^typedef struct salitem_S$/;"	s
salitem_S::sm_lead	vim/vim/src/spell.h	/^    char_u	*sm_lead;	\/* leading letters *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_lead_w	vim/vim/src/spell.h	/^    int		*sm_lead_w;	\/* wide character copy of "sm_lead" *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_leadlen	vim/vim/src/spell.h	/^    int		sm_leadlen;	\/* length of "sm_lead" *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_oneof	vim/vim/src/spell.h	/^    char_u	*sm_oneof;	\/* letters from () or NULL *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_oneof_w	vim/vim/src/spell.h	/^    int		*sm_oneof_w;	\/* wide character copy of "sm_oneof" *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_rules	vim/vim/src/spell.h	/^    char_u	*sm_rules;	\/* rules like ^, $, priority *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_to	vim/vim/src/spell.h	/^    char_u	*sm_to;		\/* replacement. *\/$/;"	m	struct:salitem_S	access:public
salitem_S::sm_to_w	vim/vim/src/spell.h	/^    int		*sm_to_w;	\/* wide character copy of "sm_to" *\/$/;"	m	struct:salitem_S	access:public
salitem_T	vim/vim/src/spell.h	/^} salitem_T;$/;"	t	typeref:struct:salitem_S
salt	vim/vim/src/blowfish.c	/^    char_u   salt[9];$/;"	m	struct:__anon73	file:	access:public
salt_len	vim/vim/src/crypt.c	/^    int	    salt_len;	\/* length of salt, or 0 when not using salt *\/$/;"	m	struct:__anon214	file:	access:public
same_directory	vim/vim/src/misc2.c	/^same_directory(char_u *f1, char_u *f2)$/;"	f	signature:(char_u *f1, char_u *f2)
same_leader	vim/vim/src/ops.c	/^same_leader($/;"	f	file:	signature:( linenr_T lnum, int leader1_len, char_u *leader1_flags, int leader2_len, char_u *leader2_flags)
same_leader	vim/vim/src/ops.c	/^static int	same_leader(linenr_T lnum, int, char_u *, int, char_u *);$/;"	p	file:	signature:(linenr_T lnum, int, char_u *, int, char_u *)
sample	vim/vim/src/gui_xmdlg.c	/^    Widget	sample;$/;"	m	struct:_SharedFontSelData	file:	access:public
sandbox	vim/vim/src/globals.h	/^EXTERN int	sandbox INIT(= 0);$/;"	v
sandbox_check	vim/vim/src/if_mzsch.c	/^sandbox_check(void)$/;"	f	file:	signature:(void)
sandbox_check	vim/vim/src/if_mzsch.c	/^static void sandbox_check(void);$/;"	p	file:	signature:(void)
sandbox_file_guard	vim/vim/src/if_mzsch.c	/^sandbox_file_guard(int argc UNUSED, Scheme_Object **argv)$/;"	f	file:	signature:(int argc UNUSED, Scheme_Object **argv)
sandbox_file_guard	vim/vim/src/if_mzsch.c	/^static Scheme_Object *sandbox_file_guard(int, Scheme_Object **);$/;"	p	file:	signature:(int, Scheme_Object **)
sandbox_network_guard	vim/vim/src/if_mzsch.c	/^sandbox_network_guard(int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(int argc UNUSED, Scheme_Object **argv UNUSED)
sandbox_network_guard	vim/vim/src/if_mzsch.c	/^static Scheme_Object *sandbox_network_guard(int, Scheme_Object **);$/;"	p	file:	signature:(int, Scheme_Object **)
sattr_T	vim/vim/src/vim.h	/^typedef unsigned char sattr_T;$/;"	t
sattr_T	vim/vim/src/vim.h	/^typedef unsigned short sattr_T;$/;"	t
saveRedobuff	vim/vim/src/getchar.c	/^saveRedobuff(save_redo_T *save_redo)$/;"	f	signature:(save_redo_T *save_redo)
save_after	vim/vim/src/regexp.c	/^    regsave_T	save_after;$/;"	m	struct:regbehind_S	file:	access:public
save_behind	vim/vim/src/regexp.c	/^    regsave_T	save_behind;$/;"	m	struct:regbehind_S	file:	access:public
save_chartab	vim/vim/src/syntax.c	/^save_chartab(char_u *chartab)$/;"	f	file:	signature:(char_u *chartab)
save_chartab	vim/vim/src/syntax.c	/^static void save_chartab(char_u *chartab);$/;"	p	file:	signature:(char_u *chartab)
save_clipboard	vim/vim/src/os_unix.c	/^save_clipboard(void)$/;"	f	file:	signature:(void)
save_clipboard	vim/vim/src/os_unix.c	/^static void save_clipboard(void);$/;"	p	file:	signature:(void)
save_cmdline	vim/vim/src/ex_getln.c	/^save_cmdline(struct cmdline_info *ccp)$/;"	f	file:	signature:(struct cmdline_info *ccp)
save_cmdline	vim/vim/src/ex_getln.c	/^static void	save_cmdline(struct cmdline_info *ccp);$/;"	p	file:	signature:(struct cmdline_info *ccp)
save_cmdline_alloc	vim/vim/src/ex_getln.c	/^save_cmdline_alloc(void)$/;"	f	signature:(void)
save_curbuf	vim/vim/src/structs.h	/^    buf_T	*save_curbuf;	\/* saved curbuf *\/$/;"	m	struct:__anon203	access:public
save_curwin	vim/vim/src/structs.h	/^    win_T	*save_curwin;	\/* saved curwin *\/$/;"	m	struct:__anon203	access:public
save_dbg_stuff	vim/vim/src/ex_docmd.c	/^save_dbg_stuff(struct dbg_stuff *dsp)$/;"	f	file:	signature:(struct dbg_stuff *dsp)
save_dbg_stuff	vim/vim/src/ex_docmd.c	/^static void save_dbg_stuff(struct dbg_stuff *dsp);$/;"	p	file:	signature:(struct dbg_stuff *dsp)
save_ei	vim/vim/src/structs.h	/^    char_u	*save_ei;		\/* saved value of 'eventignore' *\/$/;"	m	struct:__anon171	access:public
save_end	vim/vim/src/regexp.c	/^    save_se_T   save_end[NSUBEXP];$/;"	m	struct:regbehind_S	file:	access:public
save_file_ff	vim/vim/src/option.c	/^save_file_ff(buf_T *buf)$/;"	f	signature:(buf_T *buf)
save_files	vim/vim/src/integration.c	/^Boolean save_files = True;		\/* When true, save all files before build actions *\/$/;"	v
save_funccal	vim/vim/src/userfunc.c	/^save_funccal(void)$/;"	f	signature:(void)
save_in_queue	vim/vim/src/if_xcmdsrv.c	/^save_in_queue(char_u *propInfo, long_u len)$/;"	f	file:	signature:(char_u *propInfo, long_u len)
save_in_queue	vim/vim/src/if_xcmdsrv.c	/^static void	save_in_queue(char_u *buf, long_u len);$/;"	p	file:	signature:(char_u *buf, long_u len)
save_inputbuf	vim/vim/src/structs.h	/^    char_u		*save_inputbuf;$/;"	m	struct:__anon180	access:public
save_level	vim/vim/src/search.c	/^static int save_level = 0;$/;"	v	file:
save_need_clear_subexpr	vim/vim/src/regexp.c	/^    int		save_need_clear_subexpr;$/;"	m	struct:regbehind_S	file:	access:public
save_p_ls	vim/vim/src/globals.h	/^EXTERN int  save_p_ls INIT(= -1);	\/* Save 'laststatus' setting *\/$/;"	v
save_p_wmh	vim/vim/src/globals.h	/^EXTERN int  save_p_wmh INIT(= -1);	\/* Save 'winminheight' setting *\/$/;"	v
save_parse_state	vim/vim/src/regexp.c	/^save_parse_state(parse_state_T *ps)$/;"	f	file:	signature:(parse_state_T *ps)
save_parse_state	vim/vim/src/regexp.c	/^static void	save_parse_state(parse_state_T *ps);$/;"	p	file:	signature:(parse_state_T *ps)
save_patterns	vim/vim/src/os_unix.c	/^save_patterns($/;"	f	file:	signature:( int num_pat, char_u **pat, int *num_file, char_u ***file)
save_patterns	vim/vim/src/os_unix.c	/^static int save_patterns(int num_pat, char_u **pat, int *num_file, char_u ***file);$/;"	p	file:	signature:(int num_pat, char_u **pat, int *num_file, char_u ***file)
save_re_pat	vim/vim/src/search.c	/^save_re_pat(int idx, char_u *pat, int magic)$/;"	f	signature:(int idx, char_u *pat, int magic)
save_readbuf1	vim/vim/src/structs.h	/^    buffheader_T	save_readbuf1;$/;"	m	struct:__anon180	access:public
save_readbuf2	vim/vim/src/structs.h	/^    buffheader_T	save_readbuf2;$/;"	m	struct:__anon180	access:public
save_redo_T	vim/vim/src/structs.h	/^} save_redo_T;$/;"	t	typeref:struct:__anon170
save_reply	vim/vim/src/os_mswin.c	/^save_reply(HWND server, char_u *reply, int expr)$/;"	f	file:	signature:(HWND server, char_u *reply, int expr)
save_reply	vim/vim/src/os_mswin.c	/^static int save_reply(HWND server, char_u *reply, int expr);$/;"	p	file:	signature:(HWND server, char_u *reply, int expr)
save_se	vim/vim/src/regexp.c	3510;"	d	file:
save_se_T	vim/vim/src/regexp.c	/^} save_se_T;$/;"	t	typeref:struct:__anon127	file:
save_se_multi	vim/vim/src/regexp.c	/^save_se_multi(save_se_T *savep, lpos_T *posp)$/;"	f	file:	signature:(save_se_T *savep, lpos_T *posp)
save_se_multi	vim/vim/src/regexp.c	/^static void	save_se_multi(save_se_T *savep, lpos_T *posp);$/;"	p	file:	signature:(save_se_T *savep, lpos_T *posp)
save_se_one	vim/vim/src/regexp.c	/^save_se_one(save_se_T *savep, char_u **pp)$/;"	f	file:	signature:(save_se_T *savep, char_u **pp)
save_se_one	vim/vim/src/regexp.c	/^static void	save_se_one(save_se_T *savep, char_u **pp);$/;"	p	file:	signature:(save_se_T *savep, char_u **pp)
save_search_patterns	vim/vim/src/search.c	/^save_search_patterns(void)$/;"	f	signature:(void)
save_start	vim/vim/src/regexp.c	/^    save_se_T   save_start[NSUBEXP];$/;"	m	struct:regbehind_S	file:	access:public
save_subexpr	vim/vim/src/regexp.c	/^save_subexpr(regbehind_T *bp)$/;"	f	file:	signature:(regbehind_T *bp)
save_subexpr	vim/vim/src/regexp.c	/^static void	save_subexpr(regbehind_T *bp);$/;"	p	file:	signature:(regbehind_T *bp)
save_typeahead	vim/vim/src/getchar.c	/^save_typeahead(tasave_T *tp)$/;"	f	signature:(tasave_T *tp)
save_typebuf	vim/vim/src/getchar.c	/^save_typebuf(void)$/;"	f	signature:(void)
save_typebuf	vim/vim/src/structs.h	/^    typebuf_T		save_typebuf;$/;"	m	struct:__anon180	access:public
save_yourself	vim/vim/src/os_unix.c	/^    Bool save_yourself;     \/* If we're in the middle of a save_yourself *\/$/;"	m	struct:__anon74	file:	access:public
save_yourself_atom	vim/vim/src/gui_gtk_x11.c	/^static GdkAtom save_yourself_atom = GDK_NONE;$/;"	v	file:
savecursor	vim/vim/src/libvterm/src/state.c	/^static void savecursor(VTermState *state, int save)$/;"	f	file:	signature:(VTermState *state, int save)
saved	vim/vim/src/gui_mac.c	/^    short saved; \/\/ set this to zero when replying, unused$/;"	m	struct:ModificationInfo	file:	access:public
saved	vim/vim/src/libvterm/src/vterm_internal.h	/^  } saved;$/;"	m	struct:VTermState	typeref:struct:VTermState::__anon36	access:public
saved_cursor	vim/vim/src/globals.h	/^EXTERN pos_T	saved_cursor		\/* w_cursor before formatting text. *\/$/;"	v
saved_emsg_silent	vim/vim/src/structs.h	/^    int		saved_emsg_silent;	\/* saved value of "emsg_silent" *\/$/;"	m	struct:eslist_elem	access:public
saved_last_idx	vim/vim/src/search.c	/^static int	    saved_last_idx = 0;$/;"	v	file:
saved_no_hlsearch	vim/vim/src/search.c	/^static int	    saved_no_hlsearch = 0;$/;"	v	file:
saved_python_thread	vim/vim/src/if_python.c	/^static PyThreadState *saved_python_thread = NULL;$/;"	v	file:
saved_spats	vim/vim/src/search.c	/^static struct spat  saved_spats[2];$/;"	v	typeref:struct:spat	file:
saved_typebuf	vim/vim/src/getchar.c	/^static typebuf_T saved_typebuf[NSCRIPT];$/;"	v	file:
sb_attr	vim/vim/src/message.c	/^    int		sb_attr;	\/* text attributes *\/$/;"	m	struct:msgchunk_S	file:	access:public
sb_buffer	vim/vim/src/libvterm/src/screen.c	/^  VTermScreenCell *sb_buffer;$/;"	m	struct:VTermScreen	file:	access:public
sb_clear_T	vim/vim/src/message.c	/^} sb_clear_T;$/;"	t	typeref:enum:__anon20	file:
sb_data	vim/vim/src/spellfile.c	/^    char_u	sb_data[1];	\/* data, actually longer *\/$/;"	m	struct:sblock_S	file:	access:public
sb_eol	vim/vim/src/message.c	/^    char	sb_eol;		\/* TRUE when line ends after this text *\/$/;"	m	struct:msgchunk_S	file:	access:public
sb_msg_col	vim/vim/src/message.c	/^    int		sb_msg_col;	\/* column in which text starts *\/$/;"	m	struct:msgchunk_S	file:	access:public
sb_next	vim/vim/src/message.c	/^    msgchunk_T	*sb_next;$/;"	m	struct:msgchunk_S	file:	access:public
sb_next	vim/vim/src/spellfile.c	/^    sblock_T	*sb_next;	\/* next block in list *\/$/;"	m	struct:sblock_S	file:	access:public
sb_popline	vim/vim/src/libvterm/include/vterm.h	/^  int (*sb_popline)(int cols, VTermScreenCell *cells, void *user);$/;"	m	struct:__anon63	access:public
sb_prev	vim/vim/src/message.c	/^    msgchunk_T	*sb_prev;$/;"	m	struct:msgchunk_S	file:	access:public
sb_pushline	vim/vim/src/libvterm/include/vterm.h	/^  int (*sb_pushline)(int cols, const VTermScreenCell *cells, void *user);$/;"	m	struct:__anon63	access:public
sb_text	vim/vim/src/message.c	/^    char_u	sb_text[1];	\/* text to be displayed, actually longer *\/$/;"	m	struct:msgchunk_S	file:	access:public
sb_text_end_cmdline	vim/vim/src/message.c	/^sb_text_end_cmdline(void)$/;"	f	signature:(void)
sb_text_start_cmdline	vim/vim/src/message.c	/^sb_text_start_cmdline(void)$/;"	f	signature:(void)
sb_used	vim/vim/src/spellfile.c	/^    int		sb_used;	\/* nr of bytes already in use *\/$/;"	m	struct:sblock_S	file:	access:public
sblock_S	vim/vim/src/spellfile.c	/^struct sblock_S$/;"	s	file:
sblock_S::sb_data	vim/vim/src/spellfile.c	/^    char_u	sb_data[1];	\/* data, actually longer *\/$/;"	m	struct:sblock_S	file:	access:public
sblock_S::sb_next	vim/vim/src/spellfile.c	/^    sblock_T	*sb_next;	\/* next block in list *\/$/;"	m	struct:sblock_S	file:	access:public
sblock_S::sb_used	vim/vim/src/spellfile.c	/^    int		sb_used;	\/* nr of bytes already in use *\/$/;"	m	struct:sblock_S	file:	access:public
sblock_T	vim/vim/src/spellfile.c	/^typedef struct sblock_S sblock_T;$/;"	t	typeref:struct:sblock_S	file:
sbx	vim/vim/src/blowfish.c	/^    UINT32_T	sbx[4][256];	    \/* S-boxes *\/$/;"	m	struct:__anon72	file:	access:public
sbx_init	vim/vim/src/blowfish.c	/^static UINT32_T sbx_init[4][256] = {$/;"	v	file:
sc_charsets	vim/vim/src/hardcopy.c	/^static struct prt_ps_charset_S sc_charsets[] =$/;"	v	typeref:struct:prt_ps_charset_S	file:
sc_col	vim/vim/src/globals.h	/^EXTERN int	sc_col;		\/* column for shown command *\/$/;"	v
sc_encodings	vim/vim/src/hardcopy.c	/^static struct prt_ps_encoding_S sc_encodings[] =$/;"	v	typeref:struct:prt_ps_encoding_S	file:
schar_T	vim/vim/src/vim.h	/^typedef char_u schar_T;$/;"	t
scheme_add_global	vim/vim/src/if_mzsch.c	443;"	d	file:
scheme_add_global_symbol	vim/vim/src/if_mzsch.c	444;"	d	file:
scheme_apply	vim/vim/src/if_mzsch.c	445;"	d	file:
scheme_basic_env	vim/vim/src/if_mzsch.c	446;"	d	file:
scheme_builtin_value	vim/vim/src/if_mzsch.c	447;"	d	file:
scheme_byte_string_to_char_string	vim/vim/src/if_mzsch.c	449;"	d	file:
scheme_byte_string_to_char_string	vim/vim/src/if_mzsch.h	45;"	d
scheme_char_string_to_byte_string	vim/vim/src/if_mzsch.c	512;"	d	file:
scheme_char_string_to_path	vim/vim/src/if_mzsch.c	514;"	d	file:
scheme_check_threads	vim/vim/src/if_mzsch.c	452;"	d	file:
scheme_close_input_port	vim/vim/src/if_mzsch.c	453;"	d	file:
scheme_console_output	vim/vim/src/if_mzsch.c	436;"	d	file:
scheme_console_printf	vim/vim/src/if_mzsch.c	435;"	d	file:
scheme_count_lines	vim/vim/src/if_mzsch.c	454;"	d	file:
scheme_current_config	vim/vim/src/if_mzsch.c	511;"	d	file:
scheme_current_config	vim/vim/src/if_mzsch.h	33;"	d
scheme_current_continuation_marks	vim/vim/src/if_mzsch.c	455;"	d	file:
scheme_current_thread	vim/vim/src/if_mzsch.c	433;"	d	file:
scheme_display	vim/vim/src/if_mzsch.c	457;"	d	file:
scheme_display_to_string	vim/vim/src/if_mzsch.c	458;"	d	file:
scheme_do_eval	vim/vim/src/if_mzsch.c	459;"	d	file:
scheme_dont_gc_ptr	vim/vim/src/if_mzsch.c	460;"	d	file:
scheme_dynamic_wind	vim/vim/src/if_mzsch.c	524;"	d	file:
scheme_embedded_load	vim/vim/src/if_mzsch.c	541;"	d	file:
scheme_eof	vim/vim/src/if_mzsch.c	425;"	d	file:
scheme_eq	vim/vim/src/if_mzsch.c	461;"	d	file:
scheme_eval	vim/vim/src/if_mzsch.c	462;"	d	file:
scheme_eval_string	vim/vim/src/if_mzsch.c	463;"	d	file:
scheme_eval_string_all	vim/vim/src/if_mzsch.c	464;"	d	file:
scheme_external_get_thread_local_variables	vim/vim/src/if_mzsch.c	/^scheme_external_get_thread_local_variables(void)$/;"	f	signature:(void)
scheme_false	vim/vim/src/if_mzsch.c	426;"	d	file:
scheme_finish_primitive_module	vim/vim/src/if_mzsch.c	465;"	d	file:
scheme_format	vim/vim/src/if_mzsch.c	467;"	d	file:
scheme_format_utf8	vim/vim/src/if_mzsch.c	469;"	d	file:
scheme_format_utf8	vim/vim/src/if_mzsch.h	35;"	d
scheme_free_immobile_box	vim/vim/src/if_mzsch.c	538;"	d	file:
scheme_gc_ptr_ok	vim/vim/src/if_mzsch.c	471;"	d	file:
scheme_get_param	vim/vim/src/if_mzsch.c	477;"	d	file:
scheme_get_sized_byte_string_output	vim/vim/src/if_mzsch.c	473;"	d	file:
scheme_get_sized_byte_string_output	vim/vim/src/if_mzsch.c	475;"	d	file:
scheme_get_sized_byte_string_output	vim/vim/src/if_mzsch.h	38;"	d
scheme_hash_get	vim/vim/src/if_mzsch.c	520;"	d	file:
scheme_hash_set	vim/vim/src/if_mzsch.c	519;"	d	file:
scheme_init_collection_paths	vim/vim/src/if_mzsch.c	536;"	d	file:
scheme_intern_symbol	vim/vim/src/if_mzsch.c	479;"	d	file:
scheme_lookup_global	vim/vim/src/if_mzsch.c	480;"	d	file:
scheme_main_setup	vim/vim/src/if_mzsch.c	531;"	d	file:
scheme_make_byte_string	vim/vim/src/if_mzsch.c	486;"	d	file:
scheme_make_byte_string	vim/vim/src/if_mzsch.c	489;"	d	file:
scheme_make_byte_string	vim/vim/src/if_mzsch.h	39;"	d
scheme_make_byte_string_output_port	vim/vim/src/if_mzsch.c	487;"	d	file:
scheme_make_byte_string_output_port	vim/vim/src/if_mzsch.c	490;"	d	file:
scheme_make_byte_string_output_port	vim/vim/src/if_mzsch.h	40;"	d
scheme_make_closed_prim_w_arity	vim/vim/src/if_mzsch.c	481;"	d	file:
scheme_make_double	vim/vim/src/if_mzsch.c	521;"	d	file:
scheme_make_hash_table	vim/vim/src/if_mzsch.c	518;"	d	file:
scheme_make_integer_value	vim/vim/src/if_mzsch.c	482;"	d	file:
scheme_make_pair	vim/vim/src/if_mzsch.c	483;"	d	file:
scheme_make_path	vim/vim/src/if_mzsch.c	450;"	d	file:
scheme_make_prim_w_arity	vim/vim/src/if_mzsch.c	484;"	d	file:
scheme_make_sized_byte_string	vim/vim/src/if_mzsch.c	522;"	d	file:
scheme_make_sized_byte_string	vim/vim/src/if_mzsch.h	34;"	d
scheme_make_struct_instance	vim/vim/src/if_mzsch.c	493;"	d	file:
scheme_make_struct_names	vim/vim/src/if_mzsch.c	494;"	d	file:
scheme_make_struct_type	vim/vim/src/if_mzsch.c	495;"	d	file:
scheme_make_struct_values	vim/vim/src/if_mzsch.c	496;"	d	file:
scheme_make_type	vim/vim/src/if_mzsch.c	497;"	d	file:
scheme_make_vector	vim/vim/src/if_mzsch.c	498;"	d	file:
scheme_malloc_fail_ok	vim/vim/src/if_mzsch.c	499;"	d	file:
scheme_malloc_immobile_box	vim/vim/src/if_mzsch.c	537;"	d	file:
scheme_namespace_require	vim/vim/src/if_mzsch.c	523;"	d	file:
scheme_notify_multithread	vim/vim/src/if_mzsch.c	437;"	d	file:
scheme_null	vim/vim/src/if_mzsch.c	428;"	d	file:
scheme_open_input_file	vim/vim/src/if_mzsch.c	500;"	d	file:
scheme_primitive_module	vim/vim/src/if_mzsch.c	501;"	d	file:
scheme_proper_list_length	vim/vim/src/if_mzsch.c	502;"	d	file:
scheme_raise	vim/vim/src/if_mzsch.c	503;"	d	file:
scheme_read	vim/vim/src/if_mzsch.c	504;"	d	file:
scheme_register_embedded_load	vim/vim/src/if_mzsch.c	542;"	d	file:
scheme_register_static	vim/vim/src/if_mzsch.c	505;"	d	file:
scheme_register_tls_space	vim/vim/src/if_mzsch.c	533;"	d	file:
scheme_set_collects_path	vim/vim/src/if_mzsch.c	516;"	d	file:
scheme_set_config_path	vim/vim/src/if_mzsch.c	543;"	d	file:
scheme_set_param	vim/vim/src/if_mzsch.c	510;"	d	file:
scheme_set_stack_base	vim/vim/src/if_mzsch.c	506;"	d	file:
scheme_signal_error	vim/vim/src/if_mzsch.c	507;"	d	file:
scheme_true	vim/vim/src/if_mzsch.c	429;"	d	file:
scheme_void	vim/vim/src/if_mzsch.c	427;"	d	file:
scheme_wrong_type	vim/vim/src/if_mzsch.c	508;"	d	file:
scid_T	vim/vim/src/structs.h	/^typedef int			scid_T;		\/* script ID *\/$/;"	t
scl_list	vim/vim/src/syntax.c	/^    short	    *scl_list;	    \/* IDs in this syntax cluster *\/$/;"	m	struct:syn_cluster_S	file:	access:public
scl_name	vim/vim/src/syntax.c	/^    char_u	    *scl_name;	    \/* syntax cluster name *\/$/;"	m	struct:syn_cluster_S	file:	access:public
scl_name_u	vim/vim/src/syntax.c	/^    char_u	    *scl_name_u;    \/* uppercase of scl_name *\/$/;"	m	struct:syn_cluster_S	file:	access:public
score	vim/vim/src/spell.c	/^    int		score;$/;"	m	struct:__anon83	file:	access:public
score_combine	vim/vim/src/spell.c	/^score_combine(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
score_combine	vim/vim/src/spell.c	/^static void score_combine(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
score_comp_sal	vim/vim/src/spell.c	/^score_comp_sal(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
score_comp_sal	vim/vim/src/spell.c	/^static void score_comp_sal(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
score_wordcount_adj	vim/vim/src/spell.c	/^score_wordcount_adj($/;"	f	file:	signature:( slang_T *slang, int score, char_u *word, int split)
score_wordcount_adj	vim/vim/src/spell.c	/^static int score_wordcount_adj(slang_T *slang, int score, char_u *word, int split);$/;"	p	file:	signature:(slang_T *slang, int score, char_u *word, int split)
screen	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int screen:1;$/;"	m	struct:VTermState::__anon35	access:public
screen	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermScreen *screen;$/;"	m	struct:VTerm	access:public
screen	vim/vim/src/libvterm/t/harness.c	/^static VTermScreen *screen;$/;"	v	file:
screen_Columns	vim/vim/src/globals.h	/^EXTERN int	screen_Columns INIT(= 0);   \/* actual size of ScreenLines[] *\/$/;"	v
screen_Rows	vim/vim/src/globals.h	/^EXTERN int	screen_Rows INIT(= 0);	    \/* actual size of ScreenLines[] *\/$/;"	v
screen_attr	vim/vim/src/screen.c	/^static int	screen_attr = 0;$/;"	v	file:
screen_callbacks	vim/vim/src/terminal.c	/^static VTermScreenCallbacks screen_callbacks = {$/;"	v	file:
screen_cbs	vim/vim/src/libvterm/t/harness.c	/^VTermScreenCallbacks screen_cbs = {$/;"	v
screen_char	vim/vim/src/screen.c	/^screen_char(unsigned off, int row, int col)$/;"	f	file:	signature:(unsigned off, int row, int col)
screen_char	vim/vim/src/screen.c	/^static void screen_char(unsigned off, int row, int col);$/;"	p	file:	signature:(unsigned off, int row, int col)
screen_char_2	vim/vim/src/screen.c	/^screen_char_2(unsigned off, int row, int col)$/;"	f	file:	signature:(unsigned off, int row, int col)
screen_char_2	vim/vim/src/screen.c	/^static void screen_char_2(unsigned off, int row, int col);$/;"	p	file:	signature:(unsigned off, int row, int col)
screen_char_attr	vim/vim/src/screen.c	/^static int screen_char_attr = 0;$/;"	v	file:
screen_cleared	vim/vim/src/globals.h	/^EXTERN int	screen_cleared INIT(= FALSE);	\/* screen has been cleared *\/$/;"	v
screen_comp_differs	vim/vim/src/screen.c	/^screen_comp_differs(int off, int *u8cc)$/;"	f	file:	signature:(int off, int *u8cc)
screen_comp_differs	vim/vim/src/screen.c	/^static int screen_comp_differs(int, int*);$/;"	p	file:	signature:(int, int*)
screen_cur_col	vim/vim/src/screen.c	/^static int	screen_cur_row, screen_cur_col;	\/* last known cursor position *\/$/;"	v	file:
screen_cur_row	vim/vim/src/screen.c	/^static int	screen_cur_row, screen_cur_col;	\/* last known cursor position *\/$/;"	v	file:
screen_damage	vim/vim/src/libvterm/t/harness.c	/^static int screen_damage(VTermRect rect, void *user)$/;"	f	file:	signature:(VTermRect rect, void *user)
screen_del_lines	vim/vim/src/screen.c	/^screen_del_lines($/;"	f	signature:( int off, int row, int line_count, int end, int force, win_T *wp UNUSED)
screen_draw_rectangle	vim/vim/src/screen.c	/^screen_draw_rectangle($/;"	f	signature:( int row, int col, int height, int width, int invert)
screen_fill	vim/vim/src/screen.c	/^screen_fill($/;"	f	signature:( int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr)
screen_get_current_line_off	vim/vim/src/screen.c	/^screen_get_current_line_off()$/;"	f
screen_getbytes	vim/vim/src/screen.c	/^screen_getbytes(int row, int col, char_u *bytes, int *attrp)$/;"	f	signature:(int row, int col, char_u *bytes, int *attrp)
screen_height	vim/vim/src/gui_beval.h	/^    Dimension		screen_height;	\/* screen height in pixels *\/$/;"	m	struct:BalloonEvalStruct	access:public
screen_ins_lines	vim/vim/src/screen.c	/^screen_ins_lines($/;"	f	signature:( int off, int row, int line_count, int end, win_T *wp)
screen_line	vim/vim/src/screen.c	/^screen_line($/;"	f	signature:( int row, int coloff, int endcol, int clear_width, int rlflag UNUSED)
screen_new	vim/vim/src/libvterm/src/screen.c	/^static VTermScreen *screen_new(VTerm *vt)$/;"	f	file:	signature:(VTerm *vt)
screen_putchar	vim/vim/src/screen.c	/^screen_putchar(int c, int row, int col, int attr)$/;"	f	signature:(int c, int row, int col, int attr)
screen_puts	vim/vim/src/screen.c	/^screen_puts($/;"	f	signature:( char_u *text, int row, int col, int attr)
screen_puts_len	vim/vim/src/screen.c	/^screen_puts_len($/;"	f	signature:( char_u *text, int textlen, int row, int col, int attr)
screen_puts_mbyte	vim/vim/src/message.c	/^screen_puts_mbyte(char_u *s, int l, int attr)$/;"	f	file:	signature:(char_u *s, int l, int attr)
screen_puts_mbyte	vim/vim/src/message.c	/^static char_u *screen_puts_mbyte(char_u *s, int l, int attr);$/;"	p	file:	signature:(char_u *s, int l, int attr)
screen_resize	vim/vim/src/libvterm/bin/unterm.c	/^static int screen_resize(int new_rows, int new_cols, void *user)$/;"	f	file:	signature:(int new_rows, int new_cols, void *user)
screen_sb_popline	vim/vim/src/libvterm/t/harness.c	/^static int screen_sb_popline(int cols, VTermScreenCell *cells, void *user)$/;"	f	file:	signature:(int cols, VTermScreenCell *cells, void *user)
screen_sb_pushline	vim/vim/src/libvterm/bin/unterm.c	/^static int screen_sb_pushline(int cols, const VTermScreenCell *cells, void *user)$/;"	f	file:	signature:(int cols, const VTermScreenCell *cells, void *user)
screen_sb_pushline	vim/vim/src/libvterm/t/harness.c	/^static int screen_sb_pushline(int cols, const VTermScreenCell *cells, void *user)$/;"	f	file:	signature:(int cols, const VTermScreenCell *cells, void *user)
screen_screencol	vim/vim/src/screen.c	/^screen_screencol(void)$/;"	f	signature:(void)
screen_screenrow	vim/vim/src/screen.c	/^screen_screenrow(void)$/;"	f	signature:(void)
screen_start	vim/vim/src/screen.c	/^screen_start(void)$/;"	f	signature:(void)
screen_start_highlight	vim/vim/src/screen.c	/^screen_start_highlight(int attr)$/;"	f	file:	signature:(int attr)
screen_start_highlight	vim/vim/src/screen.c	/^static void screen_start_highlight(int attr);$/;"	p	file:	signature:(int attr)
screen_stop_highlight	vim/vim/src/screen.c	/^screen_stop_highlight(void)$/;"	f	signature:(void)
screen_valid	vim/vim/src/screen.c	/^screen_valid(int doclear)$/;"	f	signature:(int doclear)
screen_width	vim/vim/src/gui_beval.h	/^    Dimension		screen_width;	\/* screen width in pixels *\/$/;"	m	struct:BalloonEvalStruct	access:public
screenalloc	vim/vim/src/screen.c	/^screenalloc(int doclear)$/;"	f	signature:(int doclear)
screenclear	vim/vim/src/screen.c	/^screenclear(void)$/;"	f	signature:(void)
screenclear2	vim/vim/src/screen.c	/^screenclear2(void)$/;"	f	file:	signature:(void)
screenclear2	vim/vim/src/screen.c	/^static void screenclear2(void);$/;"	p	file:	signature:(void)
scriptID	vim/vim/src/fileio.c	/^    scid_T	    scriptID;		\/* script ID where defined *\/$/;"	m	struct:AutoCmd	file:	access:public
scriptID	vim/vim/src/option.c	/^    scid_T	scriptID;	\/* script in which the option was last set *\/$/;"	m	struct:vimoption	file:	access:public
script_autoload	vim/vim/src/eval.c	/^script_autoload($/;"	f	signature:( char_u *name, int reload)
script_do_profile	vim/vim/src/ex_cmds2.c	/^script_do_profile(scriptitem_T *si)$/;"	f	file:	signature:(scriptitem_T *si)
script_do_profile	vim/vim/src/ex_cmds2.c	/^static void script_do_profile(scriptitem_T *si);$/;"	p	file:	signature:(scriptitem_T *si)
script_dump_profile	vim/vim/src/ex_cmds2.c	/^script_dump_profile(FILE *fd)$/;"	f	file:	signature:(FILE *fd)
script_dump_profile	vim/vim/src/ex_cmds2.c	/^static void script_dump_profile(FILE *fd);$/;"	p	file:	signature:(FILE *fd)
script_get	vim/vim/src/ex_getln.c	/^script_get(exarg_T *eap, char_u *cmd)$/;"	f	signature:(exarg_T *eap, char_u *cmd)
script_items	vim/vim/src/ex_cmds2.c	/^static garray_T script_items = {0, 0, sizeof(scriptitem_T), 4, NULL};$/;"	v	file:
script_line_end	vim/vim/src/ex_cmds2.c	/^script_line_end(void)$/;"	f	signature:(void)
script_line_exec	vim/vim/src/ex_cmds2.c	/^script_line_exec(void)$/;"	f	signature:(void)
script_line_start	vim/vim/src/ex_cmds2.c	/^script_line_start(void)$/;"	f	signature:(void)
script_plugin	build_all.sh	/^function script_plugin()$/;"	f
script_prof_restore	vim/vim/src/ex_cmds2.c	/^script_prof_restore(proftime_T *tm)$/;"	f	signature:(proftime_T *tm)
script_prof_save	vim/vim/src/ex_cmds2.c	/^script_prof_save($/;"	f	signature:( proftime_T *tm)
scriptin	vim/vim/src/globals.h	/^EXTERN FILE	*scriptin[NSCRIPT];	    \/* streams to read script from *\/$/;"	v
scriptitem_S	vim/vim/src/ex_cmds2.c	/^typedef struct scriptitem_S$/;"	s	file:
scriptitem_S::sn_dev	vim/vim/src/ex_cmds2.c	/^    dev_t	sn_dev;$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_dev_valid	vim/vim/src/ex_cmds2.c	/^    int		sn_dev_valid;$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_ino	vim/vim/src/ex_cmds2.c	/^    ino_t	sn_ino;$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_name	vim/vim/src/ex_cmds2.c	/^    char_u	*sn_name;$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_child	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_child;	\/* time set when going into first child *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_children	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_children; \/* time in children after script start *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_count	vim/vim/src/ex_cmds2.c	/^    int		sn_pr_count;	\/* nr of times sourced *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_force	vim/vim/src/ex_cmds2.c	/^    int		sn_pr_force;	\/* forceit: profile functions in this script *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_nest	vim/vim/src/ex_cmds2.c	/^    int		sn_pr_nest;	\/* nesting for sn_pr_child *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_self	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_self;	\/* time spent in script itself *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_start	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_start;	\/* time at script start *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_pr_total	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_total;	\/* time spent in script + children *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prl_children	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_children; \/* time spent in children for this line *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prl_execed	vim/vim/src/ex_cmds2.c	/^    int		sn_prl_execed;	\/* line being timed was executed *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prl_ga	vim/vim/src/ex_cmds2.c	/^    garray_T	sn_prl_ga;	\/* things stored for every line *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prl_idx	vim/vim/src/ex_cmds2.c	/^    int		sn_prl_idx;	\/* index of line being timed; -1 if none *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prl_start	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_start;	\/* start time for current line *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prl_wait	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_wait;	\/* wait start time for current line *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_S::sn_prof_on	vim/vim/src/ex_cmds2.c	/^    int		sn_prof_on;	\/* TRUE when script is\/was profiled *\/$/;"	m	struct:scriptitem_S	file:	access:public
scriptitem_T	vim/vim/src/ex_cmds2.c	/^} scriptitem_T;$/;"	t	typeref:struct:scriptitem_S	file:
scriptnames_slash_adjust	vim/vim/src/ex_cmds2.c	/^scriptnames_slash_adjust(void)$/;"	f	signature:(void)
scriptout	vim/vim/src/globals.h	/^EXTERN FILE	*scriptout  INIT(= NULL);   \/* stream to write script to *\/$/;"	v
scriptvar_T	vim/vim/src/eval.c	/^} scriptvar_T;$/;"	t	typeref:struct:__anon75	file:
scroll	vim/vim/src/libvterm/src/state.c	/^static void scroll(VTermState *state, VTermRect rect, int downward, int rightward)$/;"	f	file:	signature:(VTermState *state, VTermRect rect, int downward, int rightward)
scroll	vim/vim/src/os_win32.c	/^scroll(unsigned cLines)$/;"	f	file:	signature:(unsigned cLines)
scroll	vim/vim/src/os_win32.c	/^static void scroll(unsigned cLines);$/;"	p	file:	signature:(unsigned cLines)
scrollProc	vim/vim/src/gui_at_sb.h	/^    XtCallbackList scrollProc;	\/* proportional scroll *\/$/;"	m	struct:__anon84	access:public
scroll_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_bg_pixel;	\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
scroll_cb	vim/vim/src/gui_motif.c	/^scroll_cb(Widget w UNUSED, XtPointer client_data, XtPointer call_data)$/;"	f	file:	signature:(Widget w UNUSED, XtPointer client_data, XtPointer call_data)
scroll_cb	vim/vim/src/gui_motif.c	/^static void scroll_cb(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
scroll_cursor_bot	vim/vim/src/move.c	/^scroll_cursor_bot(int min_scroll, int set_topbot)$/;"	f	signature:(int min_scroll, int set_topbot)
scroll_cursor_halfway	vim/vim/src/move.c	/^scroll_cursor_halfway(int atend)$/;"	f	signature:(int atend)
scroll_cursor_top	vim/vim/src/move.c	/^scroll_cursor_top(int min_scroll, int always)$/;"	f	signature:(int min_scroll, int always)
scroll_def_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_def_bg_pixel;  \/* Default scrollbar background *\/$/;"	m	struct:Gui	access:public
scroll_def_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_def_fg_pixel;  \/* Default scrollbar foreground *\/$/;"	m	struct:Gui	access:public
scroll_event	vim/vim/src/gui_gtk_x11.c	/^scroll_event(GtkWidget *widget,$/;"	f	file:	signature:(GtkWidget *widget, GdkEventScroll *event, gpointer data UNUSED)
scroll_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	scroll_fg_pixel;	\/* Same in Pixel format *\/$/;"	m	struct:Gui	access:public
scroll_line_len	vim/vim/src/gui.c	/^scroll_line_len(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
scroll_line_len	vim/vim/src/gui.c	/^static colnr_T scroll_line_len(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
scroll_mode	vim/vim/src/gui_at_sb.h	/^    char	  scroll_mode;	\/* see below *\/$/;"	m	struct:__anon84	access:public
scroll_off	vim/vim/src/gui_at_sb.h	/^    float	  scroll_off;	\/* offset from event to top of thumb *\/$/;"	m	struct:__anon84	access:public
scroll_redraw	vim/vim/src/normal.c	/^scroll_redraw(int up, long count)$/;"	f	signature:(int up, long count)
scroll_region	vim/vim/src/globals.h	/^EXTERN int	scroll_region INIT(= FALSE); \/* term supports scroll region *\/$/;"	v
scroll_region_bot	vim/vim/src/gui.h	/^    int		scroll_region_bot;  \/* Bottom (last) line of scroll region *\/$/;"	m	struct:Gui	access:public
scroll_region_left	vim/vim/src/gui.h	/^    int		scroll_region_left;  \/* Left (first) column of scroll region *\/$/;"	m	struct:Gui	access:public
scroll_region_reset	vim/vim/src/term.c	/^scroll_region_reset(void)$/;"	f	signature:(void)
scroll_region_right	vim/vim/src/gui.h	/^    int		scroll_region_right;  \/* Right (last) col. of scroll region *\/$/;"	m	struct:Gui	access:public
scroll_region_set	vim/vim/src/term.c	/^scroll_region_set(win_T *wp, int off)$/;"	f	signature:(win_T *wp, int off)
scroll_region_top	vim/vim/src/gui.h	/^    int		scroll_region_top;  \/* Top (first) line of scroll region *\/$/;"	m	struct:Gui	access:public
scroll_shift	vim/vim/src/gui.h	/^    int		scroll_shift;	\/* The scrollbar stuff can handle only up to$/;"	m	struct:GuiScrollbar	access:public
scroll_start	vim/vim/src/term.c	/^scroll_start(void)$/;"	f	signature:(void)
scroll_to_fraction	vim/vim/src/window.c	/^scroll_to_fraction(win_T *wp, int prev_height)$/;"	f	signature:(win_T *wp, int prev_height)
scrollbar	vim/vim/src/gui_at_sb.h	/^    ScrollbarPart	scrollbar;$/;"	m	struct:_ScrollbarRec	access:public
scrollbar_T	vim/vim/src/gui.h	/^} scrollbar_T;$/;"	t	typeref:struct:GuiScrollbar
scrollbar_class	vim/vim/src/gui_at_sb.h	/^    ScrollbarClassPart		scrollbar_class;$/;"	m	struct:_ScrollbarClassRec	access:public
scrollbar_height	vim/vim/src/gui.h	/^    int		scrollbar_height;   \/* Height of horizontal scrollbar *\/$/;"	m	struct:Gui	access:public
scrollbar_value	vim/vim/src/globals.h	/^EXTERN long_u	scrollbar_value;$/;"	v
scrollbar_width	vim/vim/src/gui.h	/^    int		scrollbar_width;    \/* Width of vertical scrollbars *\/$/;"	m	struct:Gui	access:public
scrolldown	vim/vim/src/move.c	/^scrolldown($/;"	f	signature:( long line_count, int byfold UNUSED)
scrolldown_clamp	vim/vim/src/move.c	/^scrolldown_clamp(void)$/;"	f	signature:(void)
scrolljump_value	vim/vim/src/move.c	/^scrolljump_value(void)$/;"	f	file:	signature:(void)
scrolljump_value	vim/vim/src/move.c	/^static int scrolljump_value(void);$/;"	p	file:	signature:(void)
scrollrect	vim/vim/src/libvterm/include/vterm.h	/^  int (*scrollrect)(VTermRect rect, int downward, int rightward, void *user);$/;"	m	struct:__anon60	access:public
scrollrect	vim/vim/src/libvterm/src/screen.c	/^static int scrollrect(VTermRect rect, int downward, int rightward, void *user)$/;"	f	file:	signature:(VTermRect rect, int downward, int rightward, void *user)
scrollrect	vim/vim/src/libvterm/t/harness.c	/^static int scrollrect(VTermRect rect, int downward, int rightward, void *user)$/;"	f	file:	signature:(VTermRect rect, int downward, int rightward, void *user)
scrollregion_bottom	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_bottom; \/* -1 means unbounded *\/$/;"	m	struct:VTermState	access:public
scrollregion_left	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_left;$/;"	m	struct:VTermState	access:public
scrollregion_right	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_right; \/* -1 means unbounded *\/$/;"	m	struct:VTermState	access:public
scrollregion_top	vim/vim/src/libvterm/src/vterm_internal.h	/^  int scrollregion_top;$/;"	m	struct:VTermState	access:public
scrollup	vim/vim/src/move.c	/^scrollup($/;"	f	signature:( long line_count, int byfold UNUSED)
scrollup_clamp	vim/vim/src/move.c	/^scrollup_clamp(void)$/;"	f	signature:(void)
sd	vim/vim/src/integration.c	/^static int sd = -1;$/;"	v	file:
se_u	vim/vim/src/regexp.c	/^    } se_u;$/;"	m	struct:__anon127	typeref:union:__anon127::__anon128	file:	access:public
search_cmn	vim/vim/src/evalfunc.c	/^search_cmn(typval_T *argvars, pos_T *match_pos, int *flagsp)$/;"	f	file:	signature:(typval_T *argvars, pos_T *match_pos, int *flagsp)
search_for_exact_line	vim/vim/src/search.c	/^search_for_exact_line($/;"	f	signature:( buf_T *buf, pos_T *pos, int dir, char_u *pat)
search_hl	vim/vim/src/screen.c	/^static match_T search_hl;	\/* used for 'hlsearch' highlight matching *\/$/;"	v	file:
search_match_endcol	vim/vim/src/globals.h	/^EXTERN colnr_T	search_match_endcol;		\/* col nr of match end *\/$/;"	v
search_match_lines	vim/vim/src/globals.h	/^EXTERN linenr_T	search_match_lines;		\/* lines of of matched string *\/$/;"	v
search_regcomp	vim/vim/src/search.c	/^search_regcomp($/;"	f	signature:( char_u *pat, int pat_save, int pat_use, int options, regmmatch_T *regmatch)
searchbuf	vim/vim/src/structs.h	/^    char_u	*searchbuf;	\/* return: pointer to search pattern or NULL *\/$/;"	m	struct:cmdarg_S	access:public
searchc	vim/vim/src/search.c	/^searchc(cmdarg_T *cap, int t_cmd)$/;"	f	signature:(cmdarg_T *cap, int t_cmd)
searchcmdlen	vim/vim/src/globals.h	/^EXTERN int	searchcmdlen;		    \/* length of previous search cmd *\/$/;"	v
searchit	vim/vim/src/search.c	/^searchit($/;"	f	signature:( win_T *win, buf_T *buf, pos_T *pos, int dir, char_u *pat, long count, int options, int pat_use, linenr_T stop_lnum, proftime_T *tm UNUSED, int *timed_out UNUSED)
searchpair_cmn	vim/vim/src/evalfunc.c	/^searchpair_cmn(typval_T *argvars, pos_T *match_pos)$/;"	f	file:	signature:(typval_T *argvars, pos_T *match_pos)
searchpath	vim/vim/src/GvimExt/gvimext.cpp	/^searchpath(char *name)$/;"	f	file:	signature:(char *name)
searchpath	vim/vim/src/GvimExt/gvimext.cpp	/^static char *searchpath(char *name);$/;"	p	file:	signature:(char *name)
searchpath	vim/vim/src/dosinst.h	/^char *searchpath(char *name);$/;"	p	signature:(char *name)
searchpath	vim/vim/src/dosinst.h	/^searchpath(char *name)$/;"	f	signature:(char *name)
searchpath_save	vim/vim/src/dosinst.h	/^searchpath_save(char *name)$/;"	f	signature:(char *name)
secure	vim/vim/src/globals.h	/^EXTERN int	secure INIT(= FALSE);$/;"	v
see_opt	vim/vim/runtime/doc/makehtml.awk	/^function see_opt() {$/;"	f
see_tag	vim/vim/runtime/doc/makehtml.awk	/^function see_tag() {$/;"	f
seed_len	vim/vim/src/crypt.c	/^    int	    seed_len;	\/* length of seed, or 0 when not using salt *\/$/;"	m	struct:__anon214	file:	access:public
seen_b_u_curhead	vim/vim/src/undo.c	/^static int seen_b_u_curhead;$/;"	v	file:
seen_b_u_newhead	vim/vim/src/undo.c	/^static int seen_b_u_newhead;$/;"	v	file:
seen_endbrace	vim/vim/src/regexp.c	/^seen_endbrace(int refnum)$/;"	f	file:	signature:(int refnum)
sel	vim/vim/src/gui_xmdlg.c	/^    String	sel[NONE];	\/* selection category *\/$/;"	m	struct:_SharedFontSelData	file:	access:public
selFile	vim/vim/src/gui_at_fs.c	/^static Widget	selFile,$/;"	v	file:
selFileCancel	vim/vim/src/gui_at_fs.c	/^		selFileCancel,$/;"	v	file:
selFileField	vim/vim/src/gui_at_fs.c	/^		selFileField,$/;"	v	file:
selFileForm	vim/vim/src/gui_at_fs.c	/^		selFileForm,$/;"	v	file:
selFileHScroll	vim/vim/src/gui_at_fs.c	/^		selFileHScroll,$/;"	v	file:
selFileHScrolls	vim/vim/src/gui_at_fs.c	/^		selFileHScrolls[3],$/;"	v	file:
selFileLists	vim/vim/src/gui_at_fs.c	/^		selFileLists[3],$/;"	v	file:
selFileOK	vim/vim/src/gui_at_fs.c	/^		selFileOK,$/;"	v	file:
selFilePrompt	vim/vim/src/gui_at_fs.c	/^		selFilePrompt,$/;"	v	file:
selFileVScrolls	vim/vim/src/gui_at_fs.c	/^		selFileVScrolls[3];$/;"	v	file:
sel_atom	vim/vim/src/vim.h	/^    Atom	sel_atom;	\/* PRIMARY\/CLIPBOARD selection ID *\/$/;"	m	struct:VimClipboard	access:public
select	vim/vim/src/os_unix.c	/^extern int   select(int, fd_set *, fd_set *, fd_set *, struct timeval *);$/;"	p	file:	signature:(int, fd_set *, fd_set *, fd_set *, struct timeval *)
select	vim/vim/src/os_unix.c	29;"	d	file:
select	vim/vim/src/os_unix.c	61;"	d	file:
select	vim/vim/src/os_unix.c	63;"	d	file:
selection_clear_event	vim/vim/src/gui_gtk_x11.c	/^selection_clear_event(GtkWidget		*widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventSelection *event, gpointer user_data UNUSED)
selection_get_cb	vim/vim/src/gui_gtk_x11.c	/^selection_get_cb(GtkWidget	    *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GtkSelectionData *selection_data, guint info, guint time_ UNUSED, gpointer user_data UNUSED)
selection_received_cb	vim/vim/src/gui_gtk_x11.c	/^selection_received_cb(GtkWidget		*widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GtkSelectionData *data, guint time_ UNUSED, gpointer user_data UNUSED)
selection_targets	vim/vim/src/gui_gtk_x11.c	/^static const GtkTargetEntry selection_targets[] =$/;"	v	file:
self	vim/vim/src/if_py_both.h	/^    dict_T	*self;$/;"	m	struct:__anon104	access:public
self_test_fn	vim/vim/src/crypt.c	/^    int (* self_test_fn)();$/;"	m	struct:__anon214	file:	access:public
selinux_enabled	vim/vim/src/os_unix.c	/^static int selinux_enabled = -1;$/;"	v	file:
sem_id	vim/vim/src/os_beos.c	25;"	d	file:
sendToLocalVim	vim/vim/src/main.c	/^sendToLocalVim(char_u *cmd, int asExpr, char_u **result)$/;"	f	signature:(char_u *cmd, int asExpr, char_u **result)
sendToVim	vim/vim/runtime/tools/xcmdsrv_client.c	/^char * sendToVim(Display *dpy, char *name, char *cmd, int asKeys, int *code);$/;"	p	file:	signature:(Display *dpy, char *name, char *cmd, int asKeys, int *code)
sendToVim	vim/vim/runtime/tools/xcmdsrv_client.c	/^sendToVim($/;"	f	signature:( Display *dpy, char *name, char *cmd, int asKeys, int *code)
send_common	vim/vim/src/channel.c	/^send_common($/;"	f	file:	signature:( typval_T *argvars, char_u *text, int id, int eval, jobopt_T *opt, char *fun, ch_part_T *part_read)
send_tabline_event	vim/vim/src/gui.c	/^send_tabline_event(int nr)$/;"	f	signature:(int nr)
send_tabline_menu_event	vim/vim/src/gui.c	/^send_tabline_menu_event(int tabidx, int event)$/;"	f	signature:(int tabidx, int event)
sense	vim/vim/src/integration.h	/^	Boolean		sense;$/;"	m	struct:__anon66	access:public
sensitive	vim/vim/src/structs.h	/^    int		sensitive;	    \/* turn button on\/off *\/$/;"	m	struct:VimMenu	access:public
separate_nextcmd	vim/vim/src/ex_docmd.c	/^separate_nextcmd(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon166	access:public
seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon167	access:public
seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon168	access:public
seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon169	access:public
serial	vim/vim/src/if_xcmdsrv.c	/^    int	    serial;	\/* Serial number expected in result. *\/$/;"	m	struct:PendingCommand	file:	access:public
serialize_header	vim/vim/src/undo.c	/^serialize_header(bufinfo_T *bi, char_u *hash)$/;"	f	file:	signature:(bufinfo_T *bi, char_u *hash)
serialize_header	vim/vim/src/undo.c	/^static int serialize_header(bufinfo_T *bi, char_u *hash);$/;"	p	file:	signature:(bufinfo_T *bi, char_u *hash)
serialize_pos	vim/vim/src/undo.c	/^serialize_pos(bufinfo_T *bi, pos_T pos)$/;"	f	file:	signature:(bufinfo_T *bi, pos_T pos)
serialize_pos	vim/vim/src/undo.c	/^static void serialize_pos(bufinfo_T *bi, pos_T pos);$/;"	p	file:	signature:(bufinfo_T *bi, pos_T pos)
serialize_uep	vim/vim/src/undo.c	/^serialize_uep($/;"	f	file:	signature:( bufinfo_T *bi, u_entry_T *uep)
serialize_uep	vim/vim/src/undo.c	/^static int serialize_uep(bufinfo_T *bi, u_entry_T *uep);$/;"	p	file:	signature:(bufinfo_T *bi, u_entry_T *uep)
serialize_uhp	vim/vim/src/undo.c	/^serialize_uhp(bufinfo_T *bi, u_header_T *uhp)$/;"	f	file:	signature:(bufinfo_T *bi, u_header_T *uhp)
serialize_uhp	vim/vim/src/undo.c	/^static int serialize_uhp(bufinfo_T *bi, u_header_T *uhp);$/;"	p	file:	signature:(bufinfo_T *bi, u_header_T *uhp)
serialize_visualinfo	vim/vim/src/undo.c	/^serialize_visualinfo(bufinfo_T *bi, visualinfo_T *info)$/;"	f	file:	signature:(bufinfo_T *bi, visualinfo_T *info)
serialize_visualinfo	vim/vim/src/undo.c	/^static void serialize_visualinfo(bufinfo_T *bi, visualinfo_T *info);$/;"	p	file:	signature:(bufinfo_T *bi, visualinfo_T *info)
server	vim/vim/runtime/tools/demoserver.py	/^    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)$/;"	v	class:ThreadedTCPServer
server	vim/vim/src/os_mswin.c	/^    HWND	server;		\/* server window *\/$/;"	m	struct:__anon21	file:	access:public
server	vim/vim/src/testdir/test_channel.py	/^    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)$/;"	v
server	vim/vim/src/testdir/test_netbeans.py	/^    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)$/;"	v
serverArg	vim/vim/src/structs.h	/^    int		serverArg;		\/* TRUE when argument for a server *\/$/;"	m	struct:__anon210	access:public
serverChangeRegisteredWindow	vim/vim/src/if_xcmdsrv.c	/^serverChangeRegisteredWindow($/;"	f	signature:( Display *dpy, Window newwin)
serverConvert	vim/vim/src/main.c	/^serverConvert($/;"	f	signature:( char_u *client_enc UNUSED, char_u *data, char_u **tofree)
serverDelayedStartName	vim/vim/src/globals.h	/^EXTERN char_u	*serverDelayedStartName INIT(= NULL);$/;"	v
serverEventProc	vim/vim/src/if_xcmdsrv.c	/^serverEventProc($/;"	f	signature:( Display *dpy, XEvent *eventPtr, int immediate)
serverForeground	vim/vim/src/os_mswin.c	/^serverForeground(char_u *name)$/;"	f	signature:(char_u *name)
serverGetReply	vim/vim/src/os_mswin.c	/^serverGetReply(HWND server, int *expr_res, int remove, int wait, int timeout)$/;"	f	signature:(HWND server, int *expr_res, int remove, int wait, int timeout)
serverGetVimNames	vim/vim/src/if_xcmdsrv.c	/^serverGetVimNames(Display *dpy)$/;"	f	signature:(Display *dpy)
serverGetVimNames	vim/vim/src/os_mswin.c	/^serverGetVimNames(void)$/;"	f	signature:(void)
serverInitMessaging	vim/vim/src/os_mswin.c	/^serverInitMessaging(void)$/;"	f	signature:(void)
serverMakeName	vim/vim/src/main.c	/^serverMakeName(char_u *arg, char *cmd)$/;"	f	file:	signature:(char_u *arg, char *cmd)
serverMakeName	vim/vim/src/main.c	/^static char_u *serverMakeName(char_u *arg, char *cmd);$/;"	p	file:	signature:(char_u *arg, char *cmd)
serverName	vim/vim/src/globals.h	/^EXTERN char_u	*serverName INIT(= NULL);	\/* name of the server *\/$/;"	v
serverName_arg	vim/vim/src/structs.h	/^    char_u	*serverName_arg;	\/* cmdline arg for server name *\/$/;"	m	struct:__anon210	access:public
serverPeekReply	vim/vim/src/if_xcmdsrv.c	/^serverPeekReply(Display *dpy, Window win, char_u **str)$/;"	f	signature:(Display *dpy, Window win, char_u **str)
serverProcessPendingMessages	vim/vim/src/os_mswin.c	/^serverProcessPendingMessages(void)$/;"	f	signature:(void)
serverReadReply	vim/vim/src/if_xcmdsrv.c	/^serverReadReply($/;"	f	signature:( Display *dpy, Window win, char_u **str, int localLoop, int timeout)
serverRegisterName	vim/vim/src/if_xcmdsrv.c	/^serverRegisterName($/;"	f	signature:( Display *dpy, char_u *name)
serverReply	vim/vim/src/if_xcmdsrv.c	/^static garray_T serverReply = { 0, 0, 0, 0, 0 };$/;"	v	file:
serverSendEnc	vim/vim/src/os_mswin.c	/^serverSendEnc(HWND target)$/;"	f	file:	signature:(HWND target)
serverSendReply	vim/vim/src/if_xcmdsrv.c	/^serverSendReply(char_u *name, char_u *str)$/;"	f	signature:(char_u *name, char_u *str)
serverSendReply	vim/vim/src/os_mswin.c	/^serverSendReply($/;"	f	signature:( char_u *name, char_u *reply)
serverSendToVim	vim/vim/src/if_xcmdsrv.c	/^serverSendToVim($/;"	f	signature:( Display *dpy, char_u *name, char_u *cmd, char_u **result, Window *server, Bool asExpr, int timeout, Bool localLoop, int silent)
serverSendToVim	vim/vim/src/os_mswin.c	/^serverSendToVim($/;"	f	signature:( char_u *name, char_u *cmd, char_u **result, void *ptarget, int asExpr, int timeout, int silent)
serverSetName	vim/vim/src/os_mswin.c	/^serverSetName(char_u *name)$/;"	f	signature:(char_u *name)
serverStr	vim/vim/src/structs.h	/^    char_u	*serverStr;		\/* remote server command *\/$/;"	m	struct:__anon210	access:public
serverStrEnc	vim/vim/src/structs.h	/^    char_u	*serverStrEnc;		\/* encoding of serverStr *\/$/;"	m	struct:__anon210	access:public
serverStrToWin	vim/vim/src/if_xcmdsrv.c	/^serverStrToWin(char_u *str)$/;"	f	signature:(char_u *str)
server_id	vim/vim/src/os_mswin.c	/^struct server_id$/;"	s	file:
server_id::hwnd	vim/vim/src/os_mswin.c	/^    HWND hwnd;$/;"	m	struct:server_id	file:	access:public
server_id::name	vim/vim/src/os_mswin.c	/^    char_u *name;$/;"	m	struct:server_id	file:	access:public
server_parse_message	vim/vim/src/if_xcmdsrv.c	/^server_parse_message($/;"	f	file:	signature:( Display *dpy, char_u *propInfo, long_u numItems)
server_parse_message	vim/vim/src/if_xcmdsrv.c	/^static void	server_parse_message(Display *dpy, char_u *propInfo, long_u numItems);$/;"	p	file:	signature:(Display *dpy, char_u *propInfo, long_u numItems)
server_parse_messages	vim/vim/src/if_xcmdsrv.c	/^server_parse_messages(void)$/;"	f	signature:(void)
server_thread	vim/vim/runtime/tools/demoserver.py	/^    server_thread = threading.Thread(target=server.serve_forever)$/;"	v	class:ThreadedTCPServer
server_thread	vim/vim/src/testdir/test_channel.py	/^    server_thread = threading.Thread(target=server.serve_forever)$/;"	v
server_thread	vim/vim/src/testdir/test_netbeans.py	/^    server_thread = threading.Thread(target=server.serve_forever)$/;"	v
server_to_input_buf	vim/vim/src/main.c	/^server_to_input_buf(char_u *str)$/;"	f	signature:(char_u *str)
server_waiting	vim/vim/src/if_xcmdsrv.c	/^server_waiting(void)$/;"	f	signature:(void)
servername	vim/vim/src/structs.h	/^    char_u	*servername;		\/* allocated name for our server *\/$/;"	m	struct:__anon210	access:public
ses_arglist	vim/vim/src/ex_docmd.c	/^ses_arglist($/;"	f	file:	signature:( FILE *fd, char *cmd, garray_T *gap, int fullname, unsigned *flagp)
ses_arglist	vim/vim/src/ex_docmd.c	/^static int ses_arglist(FILE *fd, char *cmd, garray_T *gap, int fullname, unsigned *flagp);$/;"	p	file:	signature:(FILE *fd, char *cmd, garray_T *gap, int fullname, unsigned *flagp)
ses_do_frame	vim/vim/src/ex_docmd.c	/^ses_do_frame(frame_T *fr)$/;"	f	file:	signature:(frame_T *fr)
ses_do_frame	vim/vim/src/ex_docmd.c	/^static int ses_do_frame(frame_T *fr);$/;"	p	file:	signature:(frame_T *fr)
ses_do_win	vim/vim/src/ex_docmd.c	/^ses_do_win(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
ses_do_win	vim/vim/src/ex_docmd.c	/^static int ses_do_win(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
ses_fname	vim/vim/src/ex_docmd.c	/^ses_fname(FILE *fd, buf_T *buf, unsigned *flagp)$/;"	f	file:	signature:(FILE *fd, buf_T *buf, unsigned *flagp)
ses_fname	vim/vim/src/ex_docmd.c	/^static int ses_fname(FILE *fd, buf_T *buf, unsigned *flagp);$/;"	p	file:	signature:(FILE *fd, buf_T *buf, unsigned *flagp)
ses_put_fname	vim/vim/src/ex_docmd.c	/^ses_put_fname(FILE *fd, char_u *name, unsigned *flagp)$/;"	f	file:	signature:(FILE *fd, char_u *name, unsigned *flagp)
ses_put_fname	vim/vim/src/ex_docmd.c	/^static int ses_put_fname(FILE *fd, char_u *name, unsigned *flagp);$/;"	p	file:	signature:(FILE *fd, char_u *name, unsigned *flagp)
ses_skipframe	vim/vim/src/ex_docmd.c	/^ses_skipframe(frame_T *fr)$/;"	f	file:	signature:(frame_T *fr)
ses_skipframe	vim/vim/src/ex_docmd.c	/^static frame_T *ses_skipframe(frame_T *fr);$/;"	p	file:	signature:(frame_T *fr)
ses_win_rec	vim/vim/src/ex_docmd.c	/^ses_win_rec(FILE *fd, frame_T *fr)$/;"	f	file:	signature:(FILE *fd, frame_T *fr)
ses_win_rec	vim/vim/src/ex_docmd.c	/^static int ses_win_rec(FILE *fd, frame_T *fr);$/;"	p	file:	signature:(FILE *fd, frame_T *fr)
ses_winsizes	vim/vim/src/ex_docmd.c	/^ses_winsizes($/;"	f	file:	signature:( FILE *fd, int restore_size, win_T *tab_firstwin)
ses_winsizes	vim/vim/src/ex_docmd.c	/^static int ses_winsizes(FILE *fd, int restore_size,$/;"	p	file:	signature:(FILE *fd, int restore_size, win_T *tab_firstwin)
sesave	vim/vim/src/regexp.c	/^	save_se_T  sesave;$/;"	m	union:regitem_S::__anon130	file:	access:public
setDollarVim	vim/vim/src/workshop.c	/^setDollarVim($/;"	f	file:	signature:( char *rundir)
setFoldRepeat	vim/vim/src/fold.c	/^setFoldRepeat(linenr_T lnum, long count, int do_open)$/;"	f	file:	signature:(linenr_T lnum, long count, int do_open)
setFoldRepeat	vim/vim/src/fold.c	/^static void setFoldRepeat(linenr_T lnum, long count, int do_open);$/;"	p	file:	signature:(linenr_T lnum, long count, int do_open)
setManualFold	vim/vim/src/fold.c	/^setManualFold($/;"	f	file:	signature:( linenr_T lnum, int opening, int recurse, int *donep)
setManualFold	vim/vim/src/fold.c	/^static linenr_T setManualFold(linenr_T lnum, int opening, int recurse, int *donep);$/;"	p	file:	signature:(linenr_T lnum, int opening, int recurse, int *donep)
setManualFoldWin	vim/vim/src/fold.c	/^setManualFoldWin($/;"	f	file:	signature:( win_T *wp, linenr_T lnum, int opening, int recurse, int *donep)
setManualFoldWin	vim/vim/src/fold.c	/^static linenr_T setManualFoldWin(win_T *wp, linenr_T lnum, int opening, int recurse, int *donep);$/;"	p	file:	signature:(win_T *wp, linenr_T lnum, int opening, int recurse, int *donep)
setSmallMaybe	vim/vim/src/fold.c	/^setSmallMaybe(garray_T *gap)$/;"	f	file:	signature:(garray_T *gap)
setSmallMaybe	vim/vim/src/fold.c	/^static void setSmallMaybe(garray_T *gap);$/;"	p	file:	signature:(garray_T *gap)
set_alist_count	vim/vim/src/os_win32.c	/^set_alist_count(void)$/;"	f	signature:(void)
set_arglist	vim/vim/src/ex_cmds2.c	/^set_arglist(char_u *str)$/;"	f	signature:(char_u *str)
set_b0_dir_flag	vim/vim/src/memline.c	/^set_b0_dir_flag(ZERO_BL *b0p, buf_T *buf)$/;"	f	file:	signature:(ZERO_BL *b0p, buf_T *buf)
set_b0_dir_flag	vim/vim/src/memline.c	/^static void set_b0_dir_flag(ZERO_BL *b0p, buf_T *buf);$/;"	p	file:	signature:(ZERO_BL *b0p, buf_T *buf)
set_b0_fname	vim/vim/src/memline.c	/^set_b0_fname(ZERO_BL *b0p, buf_T *buf)$/;"	f	file:	signature:(ZERO_BL *b0p, buf_T *buf)
set_b0_fname	vim/vim/src/memline.c	/^static void set_b0_fname(ZERO_BL *, buf_T *buf);$/;"	p	file:	signature:(ZERO_BL *, buf_T *buf)
set_bat_text	vim/vim/src/dosinst.c	/^set_bat_text(int idx, char *batpath, char *name)$/;"	f	file:	signature:(int idx, char *batpath, char *name)
set_bool_option	vim/vim/src/option.c	/^set_bool_option($/;"	f	file:	signature:( int opt_idx, char_u *varp, int value, int opt_flags)
set_bool_option	vim/vim/src/option.c	/^static char_u *set_bool_option(int opt_idx, char_u *varp, int value, int opt_flags);$/;"	p	file:	signature:(int opt_idx, char_u *varp, int value, int opt_flags)
set_buffer_line	vim/vim/src/if_mzsch.c	/^set_buffer_line(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
set_buffer_line	vim/vim/src/if_mzsch.c	/^static Scheme_Object *set_buffer_line(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
set_buffer_line	vim/vim/src/if_ruby.c	/^static VALUE set_buffer_line(buf_T *buf, linenr_T n, VALUE str)$/;"	f	file:	signature:(buf_T *buf, linenr_T n, VALUE str)
set_buffer_line_list	vim/vim/src/if_mzsch.c	/^set_buffer_line_list(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
set_buffer_line_list	vim/vim/src/if_mzsch.c	/^static Scheme_Object *set_buffer_line_list(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
set_buflisted	vim/vim/src/buffer.c	/^set_buflisted(int on)$/;"	f	signature:(int on)
set_bufref	vim/vim/src/buffer.c	/^set_bufref(bufref_T *bufref, buf_T *buf)$/;"	f	signature:(bufref_T *bufref, buf_T *buf)
set_cairo_source_rgba_from_color	vim/vim/src/gui_gtk_x11.c	/^set_cairo_source_rgba_from_color(cairo_t *cr, guicolor_T color)$/;"	f	file:	signature:(cairo_t *cr, guicolor_T color)
set_callback	vim/vim/src/channel.c	/^set_callback($/;"	f	file:	signature:( char_u **cbp, partial_T **pp, char_u *callback, partial_T *partial)
set_chars_option	vim/vim/src/option.c	/^set_chars_option(char_u **varp)$/;"	f	file:	signature:(char_u **varp)
set_chars_option	vim/vim/src/option.c	/^static char_u *set_chars_option(char_u **varp);$/;"	p	file:	signature:(char_u **varp)
set_child_environment	vim/vim/src/os_unix.c	/^set_child_environment(long rows, long columns, char *term)$/;"	f	file:	signature:(long rows, long columns, char *term)
set_cmd_context	vim/vim/src/ex_getln.c	/^set_cmd_context($/;"	f	signature:( expand_T *xp, char_u *str, int len, int col, int use_ccline UNUSED)
set_cmdarg	vim/vim/src/eval.c	/^set_cmdarg(exarg_T *eap, char_u *oldarg)$/;"	f	signature:(exarg_T *eap, char_u *oldarg)
set_cmdline_pos	vim/vim/src/ex_getln.c	/^set_cmdline_pos($/;"	f	signature:( int pos)
set_cmdspos	vim/vim/src/ex_getln.c	/^set_cmdspos(void)$/;"	f	file:	signature:(void)
set_cmdspos	vim/vim/src/ex_getln.c	/^static void	set_cmdspos(void);$/;"	p	file:	signature:(void)
set_cmdspos_cursor	vim/vim/src/ex_getln.c	/^set_cmdspos_cursor(void)$/;"	f	file:	signature:(void)
set_cmdspos_cursor	vim/vim/src/ex_getln.c	/^static void	set_cmdspos_cursor(void);$/;"	p	file:	signature:(void)
set_col_tabstop	vim/vim/src/libvterm/src/state.c	/^static void set_col_tabstop(VTermState *state, int col)$/;"	f	file:	signature:(VTermState *state, int col)
set_color_count	vim/vim/src/term.c	/^set_color_count(int nr)$/;"	f	file:	signature:(int nr)
set_completion	vim/vim/src/edit.c	/^set_completion(colnr_T startcol, list_T *list)$/;"	f	signature:(colnr_T startcol, list_T *list)
set_context_for_expression	vim/vim/src/eval.c	/^set_context_for_expression($/;"	f	signature:( expand_T *xp, char_u *arg, cmdidx_T cmdidx)
set_context_in_autocmd	vim/vim/src/fileio.c	/^set_context_in_autocmd($/;"	f	signature:( expand_T *xp, char_u *arg, int doautocmd)
set_context_in_cscope_cmd	vim/vim/src/if_cscope.c	/^set_context_in_cscope_cmd($/;"	f	signature:( expand_T *xp, char_u *arg, cmdidx_T cmdidx)
set_context_in_echohl_cmd	vim/vim/src/syntax.c	/^set_context_in_echohl_cmd(expand_T *xp, char_u *arg)$/;"	f	signature:(expand_T *xp, char_u *arg)
set_context_in_highlight_cmd	vim/vim/src/syntax.c	/^set_context_in_highlight_cmd(expand_T *xp, char_u *arg)$/;"	f	signature:(expand_T *xp, char_u *arg)
set_context_in_map_cmd	vim/vim/src/getchar.c	/^set_context_in_map_cmd($/;"	f	signature:( expand_T *xp, char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, cmdidx_T cmdidx)
set_context_in_menu_cmd	vim/vim/src/menu.c	/^set_context_in_menu_cmd($/;"	f	signature:( expand_T *xp, char_u *cmd, char_u *arg, int forceit)
set_context_in_profile_cmd	vim/vim/src/ex_cmds2.c	/^set_context_in_profile_cmd(expand_T *xp, char_u *arg)$/;"	f	signature:(expand_T *xp, char_u *arg)
set_context_in_set_cmd	vim/vim/src/option.c	/^set_context_in_set_cmd($/;"	f	signature:( expand_T *xp, char_u *arg, int opt_flags)
set_context_in_sign_cmd	vim/vim/src/ex_cmds.c	/^set_context_in_sign_cmd(expand_T *xp, char_u *arg)$/;"	f	signature:(expand_T *xp, char_u *arg)
set_context_in_syntax_cmd	vim/vim/src/syntax.c	/^set_context_in_syntax_cmd(expand_T *xp, char_u *arg)$/;"	f	signature:(expand_T *xp, char_u *arg)
set_csearch_direction	vim/vim/src/search.c	/^set_csearch_direction(int cdir)$/;"	f	signature:(int cdir)
set_csearch_until	vim/vim/src/search.c	/^set_csearch_until(int t_cmd)$/;"	f	signature:(int t_cmd)
set_curbuf	vim/vim/src/buffer.c	/^set_curbuf(buf_T *buf, int action)$/;"	f	signature:(buf_T *buf, int action)
set_current_line	vim/vim/src/if_ruby.c	/^static VALUE set_current_line(VALUE self UNUSED, VALUE str)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE str)
set_cursor	vim/vim/src/if_mzsch.c	/^set_cursor(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
set_cursor	vim/vim/src/if_mzsch.c	/^static Scheme_Object *set_cursor(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
set_dec_mode	vim/vim/src/libvterm/src/state.c	/^static void set_dec_mode(VTermState *state, int num, int val)$/;"	f	file:	signature:(VTermState *state, int num, int val)
set_default_child_environment	vim/vim/src/os_unix.c	/^set_default_child_environment(void)$/;"	f	file:	signature:(void)
set_diff_option	vim/vim/src/diff.c	/^set_diff_option(win_T *wp, int value)$/;"	f	file:	signature:(win_T *wp, int value)
set_directories_text	vim/vim/src/dosinst.c	/^set_directories_text(int idx)$/;"	f	file:	signature:(int idx)
set_empty_rows	vim/vim/src/move.c	/^set_empty_rows(win_T *wp, int used)$/;"	f	signature:(win_T *wp, int used)
set_errorlist	vim/vim/src/quickfix.c	/^set_errorlist($/;"	f	signature:( win_T *wp, list_T *list, int action, char_u *title, dict_T *what)
set_expand_context	vim/vim/src/ex_getln.c	/^set_expand_context(expand_T *xp)$/;"	f	file:	signature:(expand_T *xp)
set_expand_context	vim/vim/src/ex_getln.c	/^static void	set_expand_context(expand_T *xp);$/;"	p	file:	signature:(expand_T *xp)
set_expr_line	vim/vim/src/ops.c	/^set_expr_line(char_u *new_line)$/;"	f	signature:(char_u *new_line)
set_file_options	vim/vim/src/fileio.c	/^set_file_options(int set_options, exarg_T *eap)$/;"	f	signature:(int set_options, exarg_T *eap)
set_file_time	vim/vim/src/fileio.c	/^set_file_time($/;"	f	file:	signature:( char_u *fname, time_t atime, time_t mtime)
set_file_time	vim/vim/src/fileio.c	/^static void set_file_time(char_u *fname, time_t atime, time_t mtime);$/;"	p	file:	signature:(char_u *fname, time_t atime, time_t mtime)
set_fileformat	vim/vim/src/misc2.c	/^set_fileformat($/;"	f	signature:( int t, int opt_flags)
set_fontlist	vim/vim/src/gui_motif.c	/^set_fontlist(Widget id)$/;"	f	file:	signature:(Widget id)
set_fontlist	vim/vim/src/gui_motif.c	/^static void set_fontlist(Widget wg);$/;"	p	file:	signature:(Widget wg)
set_forced_fenc	vim/vim/src/fileio.c	/^set_forced_fenc(exarg_T *eap)$/;"	f	signature:(exarg_T *eap)
set_fraction	vim/vim/src/window.c	/^set_fraction(win_T *wp)$/;"	f	signature:(win_T *wp)
set_group_colors	vim/vim/src/syntax.c	/^set_group_colors($/;"	f	file:	signature:( char_u *name, guicolor_T *fgp, guicolor_T *bgp, int do_menu, int use_norm, int do_tooltip)
set_group_colors	vim/vim/src/syntax.c	/^static int  set_group_colors(char_u *name, guicolor_T *fgp, guicolor_T *bgp, int do_menu, int use_norm, int do_tooltip);$/;"	p	file:	signature:(char_u *name, guicolor_T *fgp, guicolor_T *bgp, int do_menu, int use_norm, int do_tooltip)
set_guifontwide	vim/vim/src/gui.c	/^set_guifontwide(char_u *name)$/;"	f	file:	signature:(char_u *name)
set_guifontwide	vim/vim/src/gui.c	/^static void set_guifontwide(char_u *font_name);$/;"	p	file:	signature:(char_u *font_name)
set_helplang_default	vim/vim/src/option.c	/^set_helplang_default(char_u *lang)$/;"	f	signature:(char_u *lang)
set_hl_attr	vim/vim/src/syntax.c	/^set_hl_attr($/;"	f	file:	signature:( int idx)
set_hl_attr	vim/vim/src/syntax.c	/^static void set_hl_attr(int idx);$/;"	p	file:	signature:(int idx)
set_iminsert_global	vim/vim/src/option.c	/^set_iminsert_global(void)$/;"	f	signature:(void)
set_imsearch_global	vim/vim/src/option.c	/^set_imsearch_global(void)$/;"	f	signature:(void)
set_indent	vim/vim/src/misc1.c	/^set_indent($/;"	f	signature:( int size, int flags)
set_init_1	vim/vim/src/option.c	/^set_init_1(void)$/;"	f	signature:(void)
set_init_2	vim/vim/src/option.c	/^set_init_2(void)$/;"	f	signature:(void)
set_init_3	vim/vim/src/option.c	/^set_init_3(void)$/;"	f	signature:(void)
set_input_buf	vim/vim/src/ui.c	/^set_input_buf(char_u *p)$/;"	f	signature:(char_u *p)
set_internal_string_var	vim/vim/src/eval.c	/^set_internal_string_var(char_u *name, char_u *value)$/;"	f	signature:(char_u *name, char_u *value)
set_keep_msg	vim/vim/src/message.c	/^set_keep_msg(char_u *s, int attr)$/;"	f	signature:(char_u *s, int attr)
set_keep_msg_from_hist	vim/vim/src/message.c	/^set_keep_msg_from_hist(void)$/;"	f	signature:(void)
set_label	vim/vim/src/gui_motif.c	/^set_label(Widget w, char *label)$/;"	f	file:	signature:(Widget w, char *label)
set_lang_var	vim/vim/src/ex_cmds2.c	/^set_lang_var(void)$/;"	f	signature:(void)
set_last_csearch	vim/vim/src/search.c	/^set_last_csearch(int c, char_u *s UNUSED, int len UNUSED)$/;"	f	signature:(int c, char_u *s UNUSED, int len UNUSED)
set_last_cursor	vim/vim/src/mark.c	/^set_last_cursor(win_T *win)$/;"	f	signature:(win_T *win)
set_last_insert	vim/vim/src/edit.c	/^set_last_insert(int c)$/;"	f	signature:(int c)
set_last_search_pat	vim/vim/src/search.c	/^set_last_search_pat($/;"	f	signature:( char_u *s, int idx, int magic, int setlast)
set_lineinfo	vim/vim/src/libvterm/src/state.c	/^static void set_lineinfo(VTermState *state, int row, int force, int dwl, int dhl)$/;"	f	file:	signature:(VTermState *state, int row, int force, int dwl, int dhl)
set_map_str	vim/vim/src/spellfile.c	/^set_map_str(slang_T *lp, char_u *map)$/;"	f	file:	signature:(slang_T *lp, char_u *map)
set_map_str	vim/vim/src/spellfile.c	/^static void set_map_str(slang_T *lp, char_u *map);$/;"	p	file:	signature:(slang_T *lp, char_u *map)
set_mode	vim/vim/src/libvterm/src/state.c	/^static void set_mode(VTermState *state, int num, int val)$/;"	f	file:	signature:(VTermState *state, int num, int val)
set_mouse_termcode	vim/vim/src/term.c	/^set_mouse_termcode($/;"	f	signature:( int n, char_u *s)
set_mouse_topline	vim/vim/src/term.c	/^set_mouse_topline(win_T *wp)$/;"	f	signature:(win_T *wp)
set_normal_colors	vim/vim/src/syntax.c	/^set_normal_colors(void)$/;"	f	signature:(void)
set_num_option	vim/vim/src/option.c	/^set_num_option($/;"	f	file:	signature:( int opt_idx, char_u *varp, long value, char_u *errbuf, size_t errbuflen, int opt_flags)
set_num_option	vim/vim/src/option.c	/^static char_u *set_num_option(int opt_idx, char_u *varp, long value, char_u *errbuf, size_t errbuflen, int opt_flags);$/;"	p	file:	signature:(int opt_idx, char_u *varp, long value, char_u *errbuf, size_t errbuflen, int opt_flags)
set_number_default	vim/vim/src/option.c	/^set_number_default(char *name, long val)$/;"	f	signature:(char *name, long val)
set_one_cmd_context	vim/vim/src/ex_docmd.c	/^set_one_cmd_context($/;"	f	signature:( expand_T *xp, char_u *buff)
set_op_var	vim/vim/src/normal.c	/^set_op_var(int optype)$/;"	f	file:	signature:(int optype)
set_op_var	vim/vim/src/normal.c	/^static void	set_op_var(int optype);$/;"	p	file:	signature:(int optype)
set_option	vim/vim/src/if_mzsch.c	/^set_option(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
set_option	vim/vim/src/if_mzsch.c	/^static Scheme_Object *set_option(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
set_option_default	vim/vim/src/option.c	/^set_option_default($/;"	f	file:	signature:( int opt_idx, int opt_flags, int compatible)
set_option_default	vim/vim/src/option.c	/^static void set_option_default(int, int opt_flags, int compatible);$/;"	p	file:	signature:(int, int opt_flags, int compatible)
set_option_scriptID_idx	vim/vim/src/option.c	/^set_option_scriptID_idx(int opt_idx, int opt_flags, int id)$/;"	f	file:	signature:(int opt_idx, int opt_flags, int id)
set_option_scriptID_idx	vim/vim/src/option.c	/^static void set_option_scriptID_idx(int opt_idx, int opt_flags, int id);$/;"	p	file:	signature:(int opt_idx, int opt_flags, int id)
set_option_value	vim/vim/src/option.c	/^set_option_value($/;"	f	signature:( char_u *name, long number, char_u *string, int opt_flags)
set_option_value_err	vim/vim/src/if_py_both.h	/^set_option_value_err(char_u *key, int numval, char_u *stringval, int opt_flags)$/;"	f	signature:(char_u *key, int numval, char_u *stringval, int opt_flags)
set_option_value_for	vim/vim/src/if_py_both.h	/^set_option_value_for($/;"	f	signature:( char_u *key, int numval, char_u *stringval, int opt_flags, int opt_type, void *from)
set_options_bin	vim/vim/src/option.c	/^set_options_bin($/;"	f	signature:( int oldval, int newval, int opt_flags)
set_options_default	vim/vim/src/option.c	/^set_options_default($/;"	f	file:	signature:( int opt_flags)
set_options_default	vim/vim/src/option.c	/^static void set_options_default(int opt_flags);$/;"	p	file:	signature:(int opt_flags)
set_output_encoding	vim/vim/src/testdir/test_makeencoding.py	/^def set_output_encoding(enc=None):$/;"	f	access:public
set_partial	vim/vim/src/if_py_both.h	/^set_partial(FunctionObject *self, partial_T *pt, int exported)$/;"	f	signature:(FunctionObject *self, partial_T *pt, int exported)
set_pen_col_ansi	vim/vim/src/libvterm/src/pen.c	/^static void set_pen_col_ansi(VTermState *state, VTermAttr attr, long col)$/;"	f	file:	signature:(VTermState *state, VTermAttr attr, long col)
set_pixmap	vim/vim/src/gui_xmebw.c	/^set_pixmap(XmEnhancedButtonWidget eb)$/;"	f	file:	signature:(XmEnhancedButtonWidget eb)
set_predefined_fontlist	vim/vim/src/gui_motif.c	/^set_predefined_fontlist(Widget parent, String name)$/;"	f	file:	signature:(Widget parent, String name)
set_predefined_label	vim/vim/src/gui_motif.c	/^set_predefined_label(Widget parent, String name, char *new_label)$/;"	f	file:	signature:(Widget parent, String name, char *new_label)
set_predefined_label	vim/vim/src/gui_motif.c	/^static void set_predefined_label(Widget parent, String name, char *new_label);$/;"	p	file:	signature:(Widget parent, String name, char *new_label)
set_printable_label_text	vim/vim/src/gui_beval.c	/^set_printable_label_text(GtkLabel *label, char_u *text)$/;"	f	file:	signature:(GtkLabel *label, char_u *text)
set_progpath	vim/vim/src/main.c	/^set_progpath(char_u *argv0)$/;"	f	file:	signature:(char_u *argv0)
set_progpath	vim/vim/src/main.c	/^static void set_progpath(char_u *argv0);$/;"	p	file:	signature:(char_u *argv0)
set_qf_ll_list	vim/vim/src/evalfunc.c	/^set_qf_ll_list($/;"	f	file:	signature:( win_T *wp UNUSED, typval_T *list_arg UNUSED, typval_T *action_arg UNUSED, typval_T *what_arg UNUSED, typval_T *rettv)
set_qf_ll_list	vim/vim/src/evalfunc.c	/^static void set_qf_ll_list(win_T *wp, typval_T *list_arg, typval_T *action_arg, typval_T *what_arg, typval_T *rettv);$/;"	p	file:	signature:(win_T *wp, typval_T *list_arg, typval_T *action_arg, typval_T *what_arg, typval_T *rettv)
set_ref_in_call_stack	vim/vim/src/userfunc.c	/^set_ref_in_call_stack(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_channel	vim/vim/src/channel.c	/^set_ref_in_channel(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_func	vim/vim/src/userfunc.c	/^set_ref_in_func(char_u *name, ufunc_T *fp_in, int copyID)$/;"	f	signature:(char_u *name, ufunc_T *fp_in, int copyID)
set_ref_in_func_args	vim/vim/src/userfunc.c	/^set_ref_in_func_args(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_funccal	vim/vim/src/userfunc.c	/^set_ref_in_funccal(funccall_T *fc, int copyID)$/;"	f	file:	signature:(funccall_T *fc, int copyID)
set_ref_in_functions	vim/vim/src/userfunc.c	/^set_ref_in_functions(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_ht	vim/vim/src/eval.c	/^set_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack)$/;"	f	signature:(hashtab_T *ht, int copyID, list_stack_T **list_stack)
set_ref_in_item	vim/vim/src/eval.c	/^set_ref_in_item($/;"	f	signature:( typval_T *tv, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack)
set_ref_in_job	vim/vim/src/channel.c	/^set_ref_in_job(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_list	vim/vim/src/eval.c	/^set_ref_in_list(list_T *l, int copyID, ht_stack_T **ht_stack)$/;"	f	signature:(list_T *l, int copyID, ht_stack_T **ht_stack)
set_ref_in_lua	vim/vim/src/if_lua.c	/^set_ref_in_lua (int copyID)$/;"	f	signature:(int copyID)
set_ref_in_nb_channel	vim/vim/src/netbeans.c	/^set_ref_in_nb_channel(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_previous_funccal	vim/vim/src/userfunc.c	/^set_ref_in_previous_funccal(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_py	vim/vim/src/if_py_both.h	/^set_ref_in_py(const int copyID)$/;"	f	signature:(const int copyID)
set_ref_in_python	vim/vim/src/if_python.c	/^set_ref_in_python (int copyID)$/;"	f	signature:(int copyID)
set_ref_in_python3	vim/vim/src/if_python3.c	/^set_ref_in_python3 (int copyID)$/;"	f	signature:(int copyID)
set_ref_in_quickfix	vim/vim/src/quickfix.c	/^set_ref_in_quickfix(int copyID)$/;"	f	signature:(int copyID)
set_ref_in_timer	vim/vim/src/ex_cmds2.c	/^set_ref_in_timer(int copyID)$/;"	f	signature:(int copyID)
set_reg_var	vim/vim/src/eval.c	/^set_reg_var(int c)$/;"	f	signature:(int c)
set_rw_fname	vim/vim/src/fileio.c	/^set_rw_fname(char_u *fname, char_u *sfname)$/;"	f	file:	signature:(char_u *fname, char_u *sfname)
set_rw_fname	vim/vim/src/fileio.c	/^static int set_rw_fname(char_u *fname, char_u *sfname);$/;"	p	file:	signature:(char_u *fname, char_u *sfname)
set_sal_first	vim/vim/src/spellfile.c	/^set_sal_first(slang_T *lp)$/;"	f	file:	signature:(slang_T *lp)
set_sal_first	vim/vim/src/spellfile.c	/^static void set_sal_first(slang_T *lp);$/;"	p	file:	signature:(slang_T *lp)
set_scroll_region	vim/vim/src/os_win32.c	/^set_scroll_region($/;"	f	file:	signature:( unsigned left, unsigned top, unsigned right, unsigned bottom)
set_scroll_region	vim/vim/src/os_win32.c	/^static void set_scroll_region(unsigned left, unsigned top,$/;"	p	file:	signature:(unsigned left, unsigned top, unsigned right, unsigned bottom)
set_search_direction	vim/vim/src/search.c	/^set_search_direction(int cdir)$/;"	f	signature:(int cdir)
set_search_match	vim/vim/src/ex_getln.c	/^set_search_match(pos_T *t)$/;"	f	file:	signature:(pos_T *t)
set_search_match	vim/vim/src/ex_getln.c	/^static void set_search_match(pos_T *t);$/;"	p	file:	signature:(pos_T *t)
set_shellsize	vim/vim/src/term.c	/^set_shellsize(int width, int height, int mustset)$/;"	f	signature:(int width, int height, int mustset)
set_signals	vim/vim/src/os_unix.c	/^set_signals(void)$/;"	f	file:	signature:(void)
set_signals	vim/vim/src/os_unix.c	/^static void set_signals(void);$/;"	p	file:	signature:(void)
set_size	vim/vim/src/gui_xmebw.c	/^set_size(XmEnhancedButtonWidget newtb)$/;"	f	file:	signature:(XmEnhancedButtonWidget newtb)
set_sofo	vim/vim/src/spellfile.c	/^set_sofo(slang_T *lp, char_u *from, char_u *to)$/;"	f	file:	signature:(slang_T *lp, char_u *from, char_u *to)
set_sofo	vim/vim/src/spellfile.c	/^static int set_sofo(slang_T *lp, char_u *from, char_u *to);$/;"	p	file:	signature:(slang_T *lp, char_u *from, char_u *to)
set_spell_charflags	vim/vim/src/spellfile.c	/^set_spell_charflags($/;"	f	file:	signature:( char_u *flags, int cnt, char_u *fol)
set_spell_charflags	vim/vim/src/spellfile.c	/^static void set_spell_charflags(char_u *flags, int cnt, char_u *upp);$/;"	p	file:	signature:(char_u *flags, int cnt, char_u *upp)
set_spell_chartab	vim/vim/src/spellfile.c	/^set_spell_chartab(char_u *fol, char_u *low, char_u *upp)$/;"	f	file:	signature:(char_u *fol, char_u *low, char_u *upp)
set_spell_chartab	vim/vim/src/spellfile.c	/^static int set_spell_chartab(char_u *fol, char_u *low, char_u *upp);$/;"	p	file:	signature:(char_u *fol, char_u *low, char_u *upp)
set_spell_finish	vim/vim/src/spellfile.c	/^set_spell_finish(spelltab_T *new_st)$/;"	f	file:	signature:(spelltab_T *new_st)
set_spell_finish	vim/vim/src/spellfile.c	/^static int set_spell_finish(spelltab_T	*new_st);$/;"	p	file:	signature:(spelltab_T *new_st)
set_string_copy	vim/vim/src/if_py_both.h	/^set_string_copy(char_u *str, typval_T *tv)$/;"	f	signature:(char_u *str, typval_T *tv)
set_string_default	vim/vim/src/option.c	/^set_string_default(char *name, char_u *val)$/;"	f	signature:(char *name, char_u *val)
set_string_option	vim/vim/src/option.c	/^set_string_option($/;"	f	file:	signature:( int opt_idx, char_u *value, int opt_flags)
set_string_option	vim/vim/src/option.c	/^static char_u *set_string_option(int opt_idx, char_u *value, int opt_flags);$/;"	p	file:	signature:(int opt_idx, char_u *value, int opt_flags)
set_string_option_direct	vim/vim/src/option.c	/^set_string_option_direct($/;"	f	signature:( char_u *name, int opt_idx, char_u *val, int opt_flags, int set_sid UNUSED)
set_string_option_global	vim/vim/src/option.c	/^set_string_option_global($/;"	f	file:	signature:( int opt_idx, char_u **varp)
set_string_option_global	vim/vim/src/option.c	/^static void set_string_option_global(int opt_idx, char_u **varp);$/;"	p	file:	signature:(int opt_idx, char_u **varp)
set_tabline_font	vim/vim/src/gui_w32.c	/^set_tabline_font(void)$/;"	f	file:	signature:(void)
set_term_and_win_size	vim/vim/src/terminal.c	/^set_term_and_win_size(term_T *term)$/;"	f	file:	signature:(term_T *term)
set_term_defaults	vim/vim/src/option.c	/^set_term_defaults(void)$/;"	f	signature:(void)
set_term_option_alloced	vim/vim/src/option.c	/^set_term_option_alloced(char_u **p)$/;"	f	signature:(char_u **p)
set_termname	vim/vim/src/term.c	/^set_termname(char_u *term)$/;"	f	signature:(char_u *term)
set_title_defaults	vim/vim/src/option.c	/^set_title_defaults(void)$/;"	f	signature:(void)
set_toolbar_style	vim/vim/src/gui_gtk_x11.c	/^set_toolbar_style(GtkToolbar *toolbar)$/;"	f	file:	signature:(GtkToolbar *toolbar)
set_topline	vim/vim/src/move.c	/^set_topline(win_T *wp, linenr_T lnum)$/;"	f	signature:(win_T *wp, linenr_T lnum)
set_tty	vim/vim/src/os_vms.c	/^set_tty(int row, int col)$/;"	f	file:	signature:(int row, int col)
set_tty	vim/vim/src/os_vms.c	/^static void	set_tty(int row, int col);$/;"	p	file:	signature:(int row, int col)
set_var	vim/vim/src/eval.c	/^set_var($/;"	f	signature:( char_u *name, typval_T *tv, int copy)
set_var_lval	vim/vim/src/eval.c	/^set_var_lval($/;"	f	file:	signature:( lval_T *lp, char_u *endp, typval_T *rettv, int copy, char_u *op)
set_var_lval	vim/vim/src/eval.c	/^static void set_var_lval(lval_T *lp, char_u *endp, typval_T *rettv, int copy, char_u *op);$/;"	p	file:	signature:(lval_T *lp, char_u *endp, typval_T *rettv, int copy, char_u *op)
set_vcount	vim/vim/src/eval.c	/^set_vcount($/;"	f	signature:( long count, long count1, int set_prevcount)
set_vcount_ca	vim/vim/src/normal.c	/^set_vcount_ca(cmdarg_T *cap, int *set_prevcount)$/;"	f	file:	signature:(cmdarg_T *cap, int *set_prevcount)
set_vcount_ca	vim/vim/src/normal.c	/^static void	set_vcount_ca(cmdarg_T *cap, int *set_prevcount);$/;"	p	file:	signature:(cmdarg_T *cap, int *set_prevcount)
set_vim_var_char	vim/vim/src/eval.c	/^set_vim_var_char(int c)$/;"	f	signature:(int c)
set_vim_var_dict	vim/vim/src/eval.c	/^set_vim_var_dict(int idx, dict_T *val)$/;"	f	signature:(int idx, dict_T *val)
set_vim_var_list	vim/vim/src/eval.c	/^set_vim_var_list(int idx, list_T *val)$/;"	f	signature:(int idx, list_T *val)
set_vim_var_nr	vim/vim/src/eval.c	/^set_vim_var_nr(int idx, varnumber_T val)$/;"	f	signature:(int idx, varnumber_T val)
set_vim_var_string	vim/vim/src/eval.c	/^set_vim_var_string($/;"	f	signature:( int idx, char_u *val, int len)
set_vv_searchforward	vim/vim/src/search.c	/^set_vv_searchforward(void)$/;"	f	file:	signature:(void)
set_vv_searchforward	vim/vim/src/search.c	/^static void set_vv_searchforward(void);$/;"	p	file:	signature:(void)
set_window_height	vim/vim/src/if_mzsch.c	/^set_window_height(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
set_window_height	vim/vim/src/if_mzsch.c	/^static Scheme_Object *set_window_height(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
set_window_title	vim/vim/src/gui_w32.c	/^set_window_title(HWND hwnd, char *title)$/;"	f	file:	signature:(HWND hwnd, char *title)
set_window_width	vim/vim/src/if_mzsch.c	/^set_window_width(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
set_window_width	vim/vim/src/if_mzsch.c	/^static Scheme_Object *set_window_width(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
set_x11_icon	vim/vim/src/os_unix.c	/^set_x11_icon(char_u *icon)$/;"	f	file:	signature:(char_u *icon)
set_x11_icon	vim/vim/src/os_unix.c	/^static void set_x11_icon(char_u *);$/;"	p	file:	signature:(char_u *)
set_x11_title	vim/vim/src/os_unix.c	/^set_x11_title(char_u *title)$/;"	f	file:	signature:(char_u *title)
set_x11_title	vim/vim/src/os_unix.c	/^static void set_x11_title(char_u *);$/;"	p	file:	signature:(char_u *)
setaltfname	vim/vim/src/buffer.c	/^setaltfname($/;"	f	signature:( char_u *ffname, char_u *sfname, linenr_T lnum)
setcursor	vim/vim/src/screen.c	/^setcursor(void)$/;"	f	signature:(void)
setenv	vim/vim/src/os_amiga.h	/^int setenv(const char *, const char *);$/;"	p	signature:(const char *, const char *)
setfname	vim/vim/src/buffer.c	/^setfname($/;"	f	signature:( buf_T *buf, char_u *ffname, char_u *sfname, int message)
seticanon	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static int seticanon(int icanon, int echo)$/;"	f	file:	signature:(int icanon, int echo)
setlineinfo	vim/vim/src/libvterm/include/vterm.h	/^  int (*setlineinfo)(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user);$/;"	m	struct:__anon60	access:public
setlineinfo	vim/vim/src/libvterm/src/screen.c	/^static int setlineinfo(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user)$/;"	f	file:	signature:(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user)
setmark	vim/vim/src/mark.c	/^setmark(int c)$/;"	f	signature:(int c)
setmark_pos	vim/vim/src/mark.c	/^setmark_pos(int c, pos_T *pos, int fnum)$/;"	f	signature:(int c, pos_T *pos, int fnum)
setmouse	vim/vim/src/term.c	/^setmouse(void)$/;"	f	signature:(void)
setpcmark	vim/vim/src/mark.c	/^setpcmark(void)$/;"	f	signature:(void)
setpenattr	vim/vim/src/libvterm/include/vterm.h	/^  int (*setpenattr)(VTermAttr attr, VTermValue *val, void *user);$/;"	m	struct:__anon60	access:public
setpenattr	vim/vim/src/libvterm/src/pen.c	/^static void setpenattr(VTermState *state, VTermAttr attr, VTermValueType type UNUSED, VTermValue *val)$/;"	f	file:	signature:(VTermState *state, VTermAttr attr, VTermValueType type UNUSED, VTermValue *val)
setpenattr	vim/vim/src/libvterm/src/screen.c	/^static int setpenattr(VTermAttr attr, VTermValue *val, void *user)$/;"	f	file:	signature:(VTermAttr attr, VTermValue *val, void *user)
setpenattr_bool	vim/vim/src/libvterm/src/pen.c	/^static void setpenattr_bool(VTermState *state, VTermAttr attr, int boolean)$/;"	f	file:	signature:(VTermState *state, VTermAttr attr, int boolean)
setpenattr_col	vim/vim/src/libvterm/src/pen.c	/^static void setpenattr_col(VTermState *state, VTermAttr attr, VTermColor color)$/;"	f	file:	signature:(VTermState *state, VTermAttr attr, VTermColor color)
setpenattr_int	vim/vim/src/libvterm/src/pen.c	/^static void setpenattr_int(VTermState *state, VTermAttr attr, int number)$/;"	f	file:	signature:(VTermState *state, VTermAttr attr, int number)
settermprop	vim/vim/src/libvterm/include/vterm.h	/^  int (*settermprop)(VTermProp prop, VTermValue *val, void *user);$/;"	m	struct:__anon60	access:public
settermprop	vim/vim/src/libvterm/include/vterm.h	/^  int (*settermprop)(VTermProp prop, VTermValue *val, void *user);$/;"	m	struct:__anon63	access:public
settermprop	vim/vim/src/libvterm/src/screen.c	/^static int settermprop(VTermProp prop, VTermValue *val, void *user)$/;"	f	file:	signature:(VTermProp prop, VTermValue *val, void *user)
settermprop	vim/vim/src/libvterm/t/harness.c	/^static int settermprop(VTermProp prop, VTermValue *val, void *user)$/;"	f	file:	signature:(VTermProp prop, VTermValue *val, void *user)
settermprop_bool	vim/vim/src/libvterm/src/state.c	/^static int settermprop_bool(VTermState *state, VTermProp prop, int v)$/;"	f	file:	signature:(VTermState *state, VTermProp prop, int v)
settermprop_int	vim/vim/src/libvterm/src/state.c	/^static int settermprop_int(VTermState *state, VTermProp prop, int v)$/;"	f	file:	signature:(VTermState *state, VTermProp prop, int v)
settermprop_string	vim/vim/src/libvterm/src/state.c	/^static int settermprop_string(VTermState *state, VTermProp prop, const char *str, size_t len)$/;"	f	file:	signature:(VTermState *state, VTermProp prop, const char *str, size_t len)
settmode	vim/vim/src/term.c	/^settmode(int tmode)$/;"	f	signature:(int tmode)
setup_choices	vim/vim/src/dosinst.c	/^setup_choices(void)$/;"	f	file:	signature:(void)
setup_fileid_api	vim/vim/src/iscygpty.c	/^static void setup_fileid_api(void)$/;"	f	file:	signature:(void)
setup_fileid_api	vim/vim/src/iscygpty.c	100;"	d	file:
setup_job_options	vim/vim/src/terminal.c	/^setup_job_options(jobopt_T *opt, int rows, int cols)$/;"	f	file:	signature:(jobopt_T *opt, int rows, int cols)
setup_save_yourself	vim/vim/src/gui_gtk_x11.c	/^setup_save_yourself(void)$/;"	f	file:	signature:(void)
setup_term_clip	vim/vim/src/os_unix.c	/^setup_term_clip(void)$/;"	f	signature:(void)
setup_timer	vim/vim/src/if_mzsch.c	/^setup_timer(void)$/;"	f	file:	signature:(void)
setup_timer	vim/vim/src/if_mzsch.c	/^static void setup_timer(void);$/;"	p	file:	signature:(void)
setup_zero_width_cluster	vim/vim/src/gui_gtk_x11.c	/^setup_zero_width_cluster(PangoItem *item, PangoGlyphInfo *glyph,$/;"	f	file:	signature:(PangoItem *item, PangoGlyphInfo *glyph, int last_cellcount, int last_cluster_width, int last_glyph_rbearing)
setwinvar	vim/vim/src/eval.c	/^setwinvar(typval_T *argvars, typval_T *rettv UNUSED, int off)$/;"	f	signature:(typval_T *argvars, typval_T *rettv UNUSED, int off)
sfdcnewvim	vim/vim/src/if_perlsfio.c	/^sfdcnewvim(void)$/;"	f	signature:(void)
sfname	vim/vim/src/fileio.c	/^    char_u	*sfname;	\/* sfname to match with *\/$/;"	m	struct:AutoPatCmd	file:	access:public
sft_score	vim/vim/src/spell.c	/^    short	sft_score;	\/* lowest score used *\/$/;"	m	struct:__anon82	file:	access:public
sft_word	vim/vim/src/spell.c	/^    char_u	sft_word[1];    \/* soundfolded word, actually longer *\/$/;"	m	struct:__anon82	file:	access:public
sftword_T	vim/vim/src/spell.c	/^} sftword_T;$/;"	t	typeref:struct:__anon82	file:
sfvimwrite	vim/vim/src/if_perlsfio.c	/^sfvimwrite($/;"	f	file:	signature:( Sfio_t *f, char *buf, int n, Sfdisc_t *disc)
sg_cleared	vim/vim/src/syntax.c	/^    int		sg_cleared;	\/* "hi clear" was used *\/$/;"	m	struct:hl_group	file:	access:public
sg_cterm	vim/vim/src/syntax.c	/^    int		sg_cterm;	\/* "cterm=" highlighting attr *\/$/;"	m	struct:hl_group	file:	access:public
sg_cterm_attr	vim/vim/src/syntax.c	/^    int		sg_cterm_attr;	\/* Screen attr for color term mode *\/$/;"	m	struct:hl_group	file:	access:public
sg_cterm_bg	vim/vim/src/syntax.c	/^    int		sg_cterm_bg;	\/* terminal bg color number + 1 *\/$/;"	m	struct:hl_group	file:	access:public
sg_cterm_bold	vim/vim/src/syntax.c	/^    int		sg_cterm_bold;	\/* bold attr was set for light color *\/$/;"	m	struct:hl_group	file:	access:public
sg_cterm_fg	vim/vim/src/syntax.c	/^    int		sg_cterm_fg;	\/* terminal fg color number + 1 *\/$/;"	m	struct:hl_group	file:	access:public
sg_font	vim/vim/src/syntax.c	/^    GuiFont	sg_font;	\/* GUI font handle *\/$/;"	m	struct:hl_group	file:	access:public
sg_font_name	vim/vim/src/syntax.c	/^    char_u	*sg_font_name;  \/* GUI font or fontset name *\/$/;"	m	struct:hl_group	file:	access:public
sg_fontset	vim/vim/src/syntax.c	/^    GuiFontset	sg_fontset;	\/* GUI fontset handle *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui	vim/vim/src/syntax.c	/^    int		sg_gui;		\/* "gui=" highlighting attributes *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_attr	vim/vim/src/syntax.c	/^    int		sg_gui_attr;    \/* Screen attr for GUI mode *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_bg	vim/vim/src/syntax.c	/^    guicolor_T	sg_gui_bg;	\/* GUI background color handle *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_bg_name	vim/vim/src/syntax.c	/^    char_u	*sg_gui_bg_name;\/* GUI background color name *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_fg	vim/vim/src/syntax.c	/^    guicolor_T	sg_gui_fg;	\/* GUI foreground color handle *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_fg_name	vim/vim/src/syntax.c	/^    char_u	*sg_gui_fg_name;\/* GUI foreground color name *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_sp	vim/vim/src/syntax.c	/^    guicolor_T	sg_gui_sp;	\/* GUI special color handle *\/$/;"	m	struct:hl_group	file:	access:public
sg_gui_sp_name	vim/vim/src/syntax.c	/^    char_u	*sg_gui_sp_name;\/* GUI special color name *\/$/;"	m	struct:hl_group	file:	access:public
sg_link	vim/vim/src/syntax.c	/^    int		sg_link;	\/* link to this highlight group ID *\/$/;"	m	struct:hl_group	file:	access:public
sg_name	vim/vim/src/syntax.c	/^    char_u	*sg_name;	\/* highlight group name *\/$/;"	m	struct:hl_group	file:	access:public
sg_name_u	vim/vim/src/syntax.c	/^    char_u	*sg_name_u;	\/* uppercase of sg_name *\/$/;"	m	struct:hl_group	file:	access:public
sg_scriptID	vim/vim/src/syntax.c	/^    scid_T	sg_scriptID;	\/* script in which the group was last set *\/$/;"	m	struct:hl_group	file:	access:public
sg_set	vim/vim/src/syntax.c	/^    int		sg_set;		\/* combination of SG_* flags *\/$/;"	m	struct:hl_group	file:	access:public
sg_start	vim/vim/src/syntax.c	/^    char_u	*sg_start;	\/* terminal string for start highl *\/$/;"	m	struct:hl_group	file:	access:public
sg_stop	vim/vim/src/syntax.c	/^    char_u	*sg_stop;	\/* terminal string for stop highl *\/$/;"	m	struct:hl_group	file:	access:public
sg_term	vim/vim/src/syntax.c	/^    int		sg_term;	\/* "term=" highlighting attributes *\/$/;"	m	struct:hl_group	file:	access:public
sg_term_attr	vim/vim/src/syntax.c	/^    int		sg_term_attr;	\/* Screen attr for term mode *\/$/;"	m	struct:hl_group	file:	access:public
sha256_bytes	vim/vim/src/sha256.c	/^sha256_bytes($/;"	f	signature:( char_u *buf, int buf_len, char_u *salt, int salt_len)
sha256_finish	vim/vim/src/sha256.c	/^sha256_finish(context_sha256_T *ctx, char_u digest[32])$/;"	f	signature:(context_sha256_T *ctx, char_u digest[32])
sha256_key	vim/vim/src/sha256.c	/^sha256_key($/;"	f	signature:( char_u *buf, char_u *salt, int salt_len)
sha256_padding	vim/vim/src/sha256.c	/^static char_u sha256_padding[64] = {$/;"	v	file:
sha256_process	vim/vim/src/sha256.c	/^sha256_process(context_sha256_T *ctx, char_u data[64])$/;"	f	file:	signature:(context_sha256_T *ctx, char_u data[64])
sha256_process	vim/vim/src/sha256.c	/^static void sha256_process(context_sha256_T *ctx, char_u data[64]);$/;"	p	file:	signature:(context_sha256_T *ctx, char_u data[64])
sha256_self_test	vim/vim/src/sha256.c	/^sha256_self_test(void)$/;"	f	signature:(void)
sha256_start	vim/vim/src/sha256.c	/^sha256_start(context_sha256_T *ctx)$/;"	f	signature:(context_sha256_T *ctx)
sha256_update	vim/vim/src/sha256.c	/^sha256_update(context_sha256_T *ctx, char_u *input, UINT32_T length)$/;"	f	signature:(context_sha256_T *ctx, char_u *input, UINT32_T length)
sha2_seed	vim/vim/src/sha256.c	/^sha2_seed($/;"	f	signature:( char_u *header, int header_len, char_u *salt, int salt_len)
sha_self_test_msg	vim/vim/src/sha256.c	/^static char *sha_self_test_msg[] = {$/;"	v	file:
sha_self_test_vector	vim/vim/src/sha256.c	/^static char *sha_self_test_vector[] = {$/;"	v	file:
shadow_width	vim/vim/src/gui_at_sb.h	/^    Dimension	shadow_width;$/;"	m	struct:__anon84	access:public
shape	vim/vim/src/structs.h	/^    int		shape;		\/* one of the SHAPE_ defines *\/$/;"	m	struct:cursor_entry	access:public
shape_table	vim/vim/src/misc2.c	/^cursorentry_T shape_table[SHAPE_IDX_COUNT] =$/;"	v
shellRectangle	vim/vim/src/gui_x11.c	/^shellRectangle(Widget shell, XRectangle *r)$/;"	f	file:	signature:(Widget shell, XRectangle *r)
shellWidgetClass	vim/vim/src/gui_gtk_vms.h	670;"	d
shell_created	vim/vim/src/gui.h	/^    int		shell_created;	    \/* Has the shell been created yet? *\/$/;"	m	struct:Gui	access:public
shell_new_columns	vim/vim/src/window.c	/^shell_new_columns(void)$/;"	f	signature:(void)
shell_new_rows	vim/vim/src/window.c	/^shell_new_rows(void)$/;"	f	signature:(void)
shell_resized	vim/vim/src/term.c	/^shell_resized(void)$/;"	f	signature:(void)
shell_resized_check	vim/vim/src/term.c	/^shell_resized_check(void)$/;"	f	signature:(void)
shift_block	vim/vim/src/ops.c	/^shift_block(oparg_T *oap, int amount)$/;"	f	file:	signature:(oparg_T *oap, int amount)
shift_block	vim/vim/src/ops.c	/^static void shift_block(oparg_T *oap, int amount);$/;"	p	file:	signature:(oparg_T *oap, int amount)
shift_delete_registers	vim/vim/src/ops.c	/^shift_delete_registers()$/;"	f
shift_line	vim/vim/src/ops.c	/^shift_line($/;"	f	signature:( int left, int round, int amount, int call_changed_bytes)
shl_load	vim/vim/src/auto/configure	/^			shl_load();$/;"	f
shl_load	vim/vim/src/auto/configure	/^		shl_load();$/;"	f
short_u	vim/vim/src/structs.h	/^typedef unsigned short	short_u;$/;"	t
short_u	vim/vim/src/vim.h	/^typedef unsigned short	short_u;$/;"	t
shorten_dir	vim/vim/src/misc1.c	/^shorten_dir(char_u *str)$/;"	f	signature:(char_u *str)
shorten_filenames	vim/vim/src/fileio.c	/^shorten_filenames(char_u **fnames, int count)$/;"	f	signature:(char_u **fnames, int count)
shorten_fname	vim/vim/src/fileio.c	/^shorten_fname(char_u *full_path, char_u *dir_name)$/;"	f	signature:(char_u *full_path, char_u *dir_name)
shorten_fname1	vim/vim/src/fileio.c	/^shorten_fname1(char_u *full_path)$/;"	f	signature:(char_u *full_path)
shorten_fnames	vim/vim/src/fileio.c	/^shorten_fnames(int force)$/;"	f	signature:(int force)
shortmess	vim/vim/src/option.c	/^shortmess(int x)$/;"	f	signature:(int x)
shortname	vim/vim/src/option.c	/^    char	*shortname;	\/* permissible abbreviation *\/$/;"	m	struct:vimoption	file:	access:public
shortpath_for_invalid_fname	vim/vim/src/eval.c	/^shortpath_for_invalid_fname($/;"	f	file:	signature:( char_u **fname, char_u **bufp, int *fnamelen)
shortpath_for_invalid_fname	vim/vim/src/eval.c	/^static int shortpath_for_invalid_fname(char_u **fname, char_u **bufp, int *fnamelen);$/;"	p	file:	signature:(char_u **fname, char_u **bufp, int *fnamelen)
shortpath_for_partial	vim/vim/src/eval.c	/^shortpath_for_partial($/;"	f	file:	signature:( char_u **fnamep, char_u **bufp, int *fnamelen)
shortpath_for_partial	vim/vim/src/eval.c	/^static int shortpath_for_partial(char_u **fnamep, char_u **bufp, int *fnamelen);$/;"	p	file:	signature:(char_u **fnamep, char_u **bufp, int *fnamelen)
should_abort	vim/vim/src/ex_eval.c	/^should_abort(int retcode)$/;"	f	signature:(int retcode)
showState	vim/vim/src/gui_beval.h	/^    BeState		showState;	\/* tells us whats currently going on *\/$/;"	m	struct:BalloonEvalStruct	access:public
show_autocmd	vim/vim/src/fileio.c	/^show_autocmd(AutoPat *ap, event_T event)$/;"	f	file:	signature:(AutoPat *ap, event_T event)
show_autocmd	vim/vim/src/fileio.c	/^static void show_autocmd(AutoPat *ap, event_T event);$/;"	p	file:	signature:(AutoPat *ap, event_T event)
show_help	vim/vim/src/dosinst.c	/^show_help(void)$/;"	f	file:	signature:(void)
show_menus	vim/vim/src/menu.c	/^show_menus(char_u *path_name, int modes)$/;"	f	file:	signature:(char_u *path_name, int modes)
show_menus	vim/vim/src/menu.c	/^static int show_menus(char_u *, int);$/;"	p	file:	signature:(char_u *, int)
show_menus_recursive	vim/vim/src/menu.c	/^show_menus_recursive(vimmenu_T *menu, int modes, int depth)$/;"	f	file:	signature:(vimmenu_T *menu, int modes, int depth)
show_menus_recursive	vim/vim/src/menu.c	/^static void show_menus_recursive(vimmenu_T *, int, int);$/;"	p	file:	signature:(vimmenu_T *, int, int)
show_one_mark	vim/vim/src/mark.c	/^show_one_mark($/;"	f	file:	signature:( int c, char_u *arg, pos_T *p, char_u *name, int current)
show_one_mark	vim/vim/src/mark.c	/^static void show_one_mark(int, char_u *, pos_T *, char_u *, int current);$/;"	p	file:	signature:(int, char_u *, pos_T *, char_u *, int current)
show_one_termcode	vim/vim/src/term.c	/^show_one_termcode(char_u *name, char_u *code, int printit)$/;"	f	signature:(char_u *name, char_u *code, int printit)
show_pat_in_path	vim/vim/src/search.c	/^show_pat_in_path($/;"	f	file:	signature:( char_u *line, int type, int did_show, int action, FILE *fp, linenr_T *lnum, long count)
show_pat_in_path	vim/vim/src/search.c	/^static void show_pat_in_path(char_u *, int,$/;"	p	file:	signature:(char_u *, int, int, int, FILE *, linenr_T *, long)
show_pum	vim/vim/src/edit.c	/^show_pum(int prev_w_wrow, int prev_w_leftcol)$/;"	f	file:	signature:(int prev_w_wrow, int prev_w_leftcol)
show_pum	vim/vim/src/edit.c	/^static void show_pum(int prev_w_wrow, int prev_w_leftcol);$/;"	p	file:	signature:(int prev_w_wrow, int prev_w_leftcol)
show_sb_text	vim/vim/src/message.c	/^show_sb_text(void)$/;"	f	signature:(void)
show_shell_mess	vim/vim/src/os_unix.c	/^static int	show_shell_mess = TRUE;$/;"	v	file:
show_tabline_popup_menu	vim/vim/src/gui_w32.c	/^show_tabline_popup_menu(void)$/;"	f	file:	signature:(void)
show_termcodes	vim/vim/src/term.c	/^show_termcodes(void)$/;"	f	signature:(void)
show_utf8	vim/vim/src/mbyte.c	/^show_utf8(void)$/;"	f	signature:(void)
showcmd_buf	vim/vim/src/normal.c	/^static char_u	showcmd_buf[SHOWCMD_BUFLEN];$/;"	v	file:
showcmd_is_clear	vim/vim/src/normal.c	/^static int	showcmd_is_clear = TRUE;$/;"	v	file:
showcmd_visual	vim/vim/src/normal.c	/^static int	showcmd_visual = FALSE;$/;"	v	file:
showing_tabline	vim/vim/src/gui_motif.c	/^static int	showing_tabline = 0;$/;"	v	file:
showing_tabline	vim/vim/src/gui_w32.c	/^static int		showing_tabline = 0;$/;"	v	file:
showmap	vim/vim/src/getchar.c	/^showmap($/;"	f	file:	signature:( mapblock_T *mp, int local)
showmap	vim/vim/src/getchar.c	/^static void	showmap(mapblock_T *mp, int local);$/;"	p	file:	signature:(mapblock_T *mp, int local)
showmatch	vim/vim/src/search.c	/^showmatch($/;"	f	signature:( int c)
showmatches	vim/vim/src/ex_getln.c	/^showmatches(expand_T *xp, int wildmenu UNUSED)$/;"	f	file:	signature:(expand_T *xp, int wildmenu UNUSED)
showmatches	vim/vim/src/ex_getln.c	/^static int	showmatches(expand_T *xp, int wildmenu);$/;"	p	file:	signature:(expand_T *xp, int wildmenu)
showmode	vim/vim/src/screen.c	/^showmode(void)$/;"	f	signature:(void)
shown	vim/vim/src/gui_at_fs.c	/^    char	*shown;$/;"	m	struct:__anon235	file:	access:public
shown	vim/vim/src/gui_at_sb.h	/^    float	  shown;	\/* What percent is shown in the win *\/$/;"	m	struct:__anon84	access:public
shownLength	vim/vim/src/gui_at_sb.h	/^    Dimension	  shownLength;	\/* Num pixels corresponding to shown *\/$/;"	m	struct:__anon84	access:public
showoneopt	vim/vim/src/option.c	/^showoneopt($/;"	f	file:	signature:( struct vimoption *p, int opt_flags)
showoneopt	vim/vim/src/option.c	/^static void showoneopt(struct vimoption *, int opt_flags);$/;"	p	file:	signature:(struct vimoption *, int opt_flags)
showoptions	vim/vim/src/option.c	/^showoptions($/;"	f	file:	signature:( int all, int opt_flags)
showoptions	vim/vim/src/option.c	/^static void showoptions(int all, int opt_flags);$/;"	p	file:	signature:(int all, int opt_flags)
showruler	vim/vim/src/screen.c	/^showruler(int always)$/;"	f	signature:(int always)
shutdown	vim/vim/src/os_unix.c	/^    Bool shutdown;	    \/* If we're in shutdown mode *\/$/;"	m	struct:__anon74	file:	access:public
si	vim/vim/runtime/tutor/tutor.cs	/^V¹imni si, ¾e  cw  nejen nahrazuje slovo, ale také pøemístí do vkládání.$/;"	p
si_add	vim/vim/src/spellfile.c	/^    int		si_add;		\/* addition file *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_ascii	vim/vim/src/spellfile.c	/^    int		si_ascii;	\/* handling only ASCII words *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_attr	vim/vim/src/syntax.c	/^    int		si_attr;		\/* attributes in this state *\/$/;"	m	struct:state_item	file:	access:public
si_blocks	vim/vim/src/spellfile.c	/^    sblock_T	*si_blocks;	\/* memory blocks used *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_blocks_cnt	vim/vim/src/spellfile.c	/^    long	si_blocks_cnt;	\/* memory blocks allocated *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_cchar	vim/vim/src/syntax.c	/^    int		si_cchar;		\/* substitution character for conceal *\/$/;"	m	struct:state_item	file:	access:public
si_clear_chartab	vim/vim/src/spellfile.c	/^    int		si_clear_chartab;   \/* when TRUE clear char tables *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_collapse	vim/vim/src/spellfile.c	/^    int		si_collapse;	\/* soundsalike: ? *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_commonwords	vim/vim/src/spellfile.c	/^    hashtab_T	si_commonwords;	\/* hashtable for common words *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_compflags	vim/vim/src/spellfile.c	/^    char_u	*si_compflags;	\/* flags used for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_compmax	vim/vim/src/spellfile.c	/^    int		si_compmax;	\/* max nr of words for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_compminlen	vim/vim/src/spellfile.c	/^    int		si_compminlen;	\/* minimal length for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_compoptions	vim/vim/src/spellfile.c	/^    int		si_compoptions;	\/* COMP_ flags *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_comppat	vim/vim/src/spellfile.c	/^    garray_T	si_comppat;	\/* CHECKCOMPOUNDPATTERN items, each stored as$/;"	m	struct:spellinfo_S	file:	access:public
si_compress_cnt	vim/vim/src/spellfile.c	/^    long	si_compress_cnt;    \/* words to add before lowering$/;"	m	struct:spellinfo_S	file:	access:public
si_compsylmax	vim/vim/src/spellfile.c	/^    int		si_compsylmax;	\/* max nr of syllables for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_cont_list	vim/vim/src/syntax.c	/^    short	*si_cont_list;		\/* list of contained groups *\/$/;"	m	struct:state_item	file:	access:public
si_conv	vim/vim/src/spellfile.c	/^    vimconv_T	si_conv;	\/* for conversion to 'encoding' *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_did_emsg	vim/vim/src/spellfile.c	/^    int		si_did_emsg;	\/* TRUE when ran out of memory *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_end_idx	vim/vim/src/syntax.c	/^    int		si_end_idx;		\/* group ID for end pattern or zero *\/$/;"	m	struct:state_item	file:	access:public
si_ends	vim/vim/src/syntax.c	/^    int		si_ends;		\/* if match ends before si_m_endpos *\/$/;"	m	struct:state_item	file:	access:public
si_eoe_pos	vim/vim/src/syntax.c	/^    lpos_T	si_eoe_pos;		\/* end position of end pattern *\/$/;"	m	struct:state_item	file:	access:public
si_extmatch	vim/vim/src/syntax.c	/^    reg_extmatch_T *si_extmatch;	\/* \\z(...\\) matches from start$/;"	m	struct:state_item	file:	access:public
si_first_free	vim/vim/src/spellfile.c	/^    wordnode_T	*si_first_free; \/* List of nodes that have been freed during$/;"	m	struct:spellinfo_S	file:	access:public
si_flags	vim/vim/src/syntax.c	/^    long	si_flags;		\/* HL_HAS_EOL flag in this state, and$/;"	m	struct:state_item	file:	access:public
si_foldroot	vim/vim/src/spellfile.c	/^    wordnode_T	*si_foldroot;	\/* tree with case-folded words *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_foldwcount	vim/vim/src/spellfile.c	/^    long	si_foldwcount;	\/* nr of words in si_foldroot *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_followup	vim/vim/src/spellfile.c	/^    int		si_followup;	\/* soundsalike: ? *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_free_count	vim/vim/src/spellfile.c	/^    long	si_free_count;	\/* number of nodes in si_first_free *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_h_endpos	vim/vim/src/syntax.c	/^    lpos_T	si_h_endpos;		\/* end position of the highlighting *\/$/;"	m	struct:state_item	file:	access:public
si_h_startpos	vim/vim/src/syntax.c	/^    lpos_T	si_h_startpos;		\/* start position of the highlighting *\/$/;"	m	struct:state_item	file:	access:public
si_id	vim/vim/src/syntax.c	/^    int		si_id;			\/* highlight group ID for keywords *\/$/;"	m	struct:state_item	file:	access:public
si_idx	vim/vim/src/syntax.c	/^    int		si_idx;			\/* index of syntax pattern or$/;"	m	struct:state_item	file:	access:public
si_info	vim/vim/src/spellfile.c	/^    char_u	*si_info;	\/* info text chars or NULL  *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_keeproot	vim/vim/src/spellfile.c	/^    wordnode_T	*si_keeproot;	\/* tree with keep-case words *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_keepwcount	vim/vim/src/spellfile.c	/^    long	si_keepwcount;	\/* nr of words in si_keeproot *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_m_endpos	vim/vim/src/syntax.c	/^    lpos_T	si_m_endpos;		\/* just after end posn of the match *\/$/;"	m	struct:state_item	file:	access:public
si_m_lnum	vim/vim/src/syntax.c	/^    int		si_m_lnum;		\/* lnum of the match *\/$/;"	m	struct:state_item	file:	access:public
si_m_startcol	vim/vim/src/syntax.c	/^    int		si_m_startcol;		\/* starting column of the match *\/$/;"	m	struct:state_item	file:	access:public
si_map	vim/vim/src/spellfile.c	/^    garray_T	si_map;		\/* MAP info concatenated *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_memtot	vim/vim/src/spellfile.c	/^    int		si_memtot;	\/* runtime memory used *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_midword	vim/vim/src/spellfile.c	/^    char_u	*si_midword;	\/* MIDWORD chars or NULL  *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_msg_count	vim/vim/src/spellfile.c	/^    int		si_msg_count;	\/* number of words added since last message *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_newcompID	vim/vim/src/spellfile.c	/^    int		si_newcompID;	\/* current value for compound ID *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_newprefID	vim/vim/src/spellfile.c	/^    int		si_newprefID;	\/* current value for ah_newID *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_next_list	vim/vim/src/syntax.c	/^    short	*si_next_list;		\/* nextgroup IDs after this item ends *\/$/;"	m	struct:state_item	file:	access:public
si_nobreak	vim/vim/src/spellfile.c	/^    char_u	si_nobreak;	\/* NOBREAK *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_nocompoundsugs	vim/vim/src/spellfile.c	/^    int		si_nocompoundsugs; \/* NOCOMPOUNDSUGS item found *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_nosplitsugs	vim/vim/src/spellfile.c	/^    int		si_nosplitsugs;	\/* NOSPLITSUGS item found *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_nosugfile	vim/vim/src/spellfile.c	/^    int		si_nosugfile;	\/* NOSUGFILE item found *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_prefcond	vim/vim/src/spellfile.c	/^    garray_T	si_prefcond;	\/* table with conditions for postponed$/;"	m	struct:spellinfo_S	file:	access:public
si_prefroot	vim/vim/src/spellfile.c	/^    wordnode_T	*si_prefroot;	\/* tree with postponed prefixes *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_region	vim/vim/src/spellfile.c	/^    int		si_region;	\/* region mask *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_region_count	vim/vim/src/spellfile.c	/^    int		si_region_count; \/* number of regions supported (1 when there$/;"	m	struct:spellinfo_S	file:	access:public
si_region_name	vim/vim/src/spellfile.c	/^    char_u	si_region_name[17]; \/* region names; used only if$/;"	m	struct:spellinfo_S	file:	access:public
si_rem_accents	vim/vim/src/spellfile.c	/^    int		si_rem_accents;	\/* soundsalike: remove accents *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_rep	vim/vim/src/spellfile.c	/^    garray_T	si_rep;		\/* list of fromto_T entries from REP lines *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_repsal	vim/vim/src/spellfile.c	/^    garray_T	si_repsal;	\/* list of fromto_T entries from REPSAL lines *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_sal	vim/vim/src/spellfile.c	/^    garray_T	si_sal;		\/* list of fromto_T entries from SAL lines *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_seqnr	vim/vim/src/syntax.c	/^    int		si_seqnr;		\/* sequence number *\/$/;"	m	struct:state_item	file:	access:public
si_sofofr	vim/vim/src/spellfile.c	/^    char_u	*si_sofofr;	\/* SOFOFROM text *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_sofoto	vim/vim/src/spellfile.c	/^    char_u	*si_sofoto;	\/* SOFOTO text *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_spellbuf	vim/vim/src/spellfile.c	/^    buf_T	*si_spellbuf;	\/* buffer used to store soundfold word table *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_sugtime	vim/vim/src/spellfile.c	/^    time_t	si_sugtime;	\/* timestamp for .sug file *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_sugtree	vim/vim/src/spellfile.c	/^    long	si_sugtree;	\/* creating the soundfolding trie *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_syllable	vim/vim/src/spellfile.c	/^    char_u	*si_syllable;	\/* syllable string *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_trans_id	vim/vim/src/syntax.c	/^    int		si_trans_id;		\/* idem, transparency removed *\/$/;"	m	struct:state_item	file:	access:public
si_verbose	vim/vim/src/spellfile.c	/^    int		si_verbose;	\/* verbose messages *\/$/;"	m	struct:spellinfo_S	file:	access:public
si_wordnode_nr	vim/vim/src/spellfile.c	/^    int		si_wordnode_nr;	\/* sequence nr for nodes *\/$/;"	m	struct:spellinfo_S	file:	access:public
sig	vim/vim/src/os_unix.c	/^    int	    sig;	\/* Signal number, eg. SIGSEGV etc *\/$/;"	m	struct:signalinfo	file:	access:public
sig_alarm_called	vim/vim/src/os_unix.c	/^static volatile int sig_alarm_called;$/;"	v	file:
sigcont_received	vim/vim/src/os_unix.c	/^static volatile int sigcont_received;$/;"	v	file:
sign	vim/vim/src/ex_cmds.c	/^struct sign$/;"	s	file:
sign::sn_icon	vim/vim/src/ex_cmds.c	/^    char_u	*sn_icon;	\/* name of pixmap *\/$/;"	m	struct:sign	file:	access:public
sign::sn_image	vim/vim/src/ex_cmds.c	/^    void	*sn_image;	\/* icon image *\/$/;"	m	struct:sign	file:	access:public
sign::sn_line_hl	vim/vim/src/ex_cmds.c	/^    int		sn_line_hl;	\/* highlight ID for line *\/$/;"	m	struct:sign	file:	access:public
sign::sn_name	vim/vim/src/ex_cmds.c	/^    char_u	*sn_name;	\/* name of sign *\/$/;"	m	struct:sign	file:	access:public
sign::sn_next	vim/vim/src/ex_cmds.c	/^    sign_T	*sn_next;	\/* next sign in list *\/$/;"	m	struct:sign	file:	access:public
sign::sn_text	vim/vim/src/ex_cmds.c	/^    char_u	*sn_text;	\/* text used instead of pixmap *\/$/;"	m	struct:sign	file:	access:public
sign::sn_text_hl	vim/vim/src/ex_cmds.c	/^    int		sn_text_hl;	\/* highlight ID for text *\/$/;"	m	struct:sign	file:	access:public
sign::sn_typenr	vim/vim/src/ex_cmds.c	/^    int		sn_typenr;	\/* type number of sign *\/$/;"	m	struct:sign	file:	access:public
sign_T	vim/vim/src/ex_cmds.c	/^typedef struct sign sign_T;$/;"	t	typeref:struct:sign	file:
sign_cmd_idx	vim/vim/src/ex_cmds.c	/^sign_cmd_idx($/;"	f	file:	signature:( char_u *begin_cmd, char_u *end_cmd)
sign_cmd_idx	vim/vim/src/ex_cmds.c	/^static int sign_cmd_idx(char_u *begin_cmd, char_u *end_cmd);$/;"	p	file:	signature:(char_u *begin_cmd, char_u *end_cmd)
sign_get_attr	vim/vim/src/ex_cmds.c	/^sign_get_attr(int typenr, int line)$/;"	f	signature:(int typenr, int line)
sign_get_image	vim/vim/src/ex_cmds.c	/^sign_get_image($/;"	f	signature:( int typenr)
sign_get_text	vim/vim/src/ex_cmds.c	/^sign_get_text(int typenr)$/;"	f	signature:(int typenr)
sign_gui_started	vim/vim/src/ex_cmds.c	/^sign_gui_started(void)$/;"	f	signature:(void)
sign_list_defined	vim/vim/src/ex_cmds.c	/^sign_list_defined(sign_T *sp)$/;"	f	file:	signature:(sign_T *sp)
sign_list_defined	vim/vim/src/ex_cmds.c	/^static void sign_list_defined(sign_T *sp);$/;"	p	file:	signature:(sign_T *sp)
sign_list_placed	vim/vim/src/buffer.c	/^sign_list_placed(buf_T *rbuf)$/;"	f	signature:(buf_T *rbuf)
sign_mark_adjust	vim/vim/src/buffer.c	/^sign_mark_adjust($/;"	f	signature:( linenr_T line1, linenr_T line2, long amount, long amount_after)
sign_typenr2name	vim/vim/src/ex_cmds.c	/^sign_typenr2name(int typenr)$/;"	f	signature:(int typenr)
sign_undefine	vim/vim/src/ex_cmds.c	/^sign_undefine(sign_T *sp, sign_T *sp_prev)$/;"	f	file:	signature:(sign_T *sp, sign_T *sp_prev)
sign_undefine	vim/vim/src/ex_cmds.c	/^static void sign_undefine(sign_T *sp, sign_T *sp_prev);$/;"	p	file:	signature:(sign_T *sp, sign_T *sp_prev)
signal	vim/vim/src/os_unixx.h	17;"	d
signal_info	vim/vim/src/os_unix.c	/^} signal_info[] =$/;"	v	typeref:struct:signalinfo	file:
signal_stack	vim/vim/src/os_unix.c	/^static char *signal_stack;$/;"	v	file:
signalinfo	vim/vim/src/os_unix.c	/^static struct signalinfo$/;"	s	file:
signalinfo::deadly	vim/vim/src/os_unix.c	/^    char    deadly;	\/* Catch as a deadly signal? *\/$/;"	m	struct:signalinfo	file:	access:public
signalinfo::name	vim/vim/src/os_unix.c	/^    char    *name;	\/* Signal name (not char_u!). *\/$/;"	m	struct:signalinfo	file:	access:public
signalinfo::sig	vim/vim/src/os_unix.c	/^    int	    sig;	\/* Signal number, eg. SIGSEGV etc *\/$/;"	m	struct:signalinfo	file:	access:public
signcolumn_on	vim/vim/src/option.c	/^signcolumn_on(win_T *wp)$/;"	f	signature:(win_T *wp)
signicon_t	vim/vim/src/gui_w32.c	/^} signicon_t;$/;"	t	typeref:struct:_signicon_t	file:
signlist	vim/vim/src/structs.h	/^struct signlist$/;"	s
signlist::id	vim/vim/src/structs.h	/^    int		id;		\/* unique identifier for each placed sign *\/$/;"	m	struct:signlist	access:public
signlist::lnum	vim/vim/src/structs.h	/^    linenr_T	lnum;		\/* line number which has this sign *\/$/;"	m	struct:signlist	access:public
signlist::next	vim/vim/src/structs.h	/^    signlist_T	*next;		\/* next signlist entry *\/$/;"	m	struct:signlist	access:public
signlist::prev	vim/vim/src/structs.h	/^    signlist_T  *prev;		\/* previous entry -- for easy reordering *\/$/;"	m	struct:signlist	access:public
signlist::typenr	vim/vim/src/structs.h	/^    int		typenr;		\/* typenr of sign *\/$/;"	m	struct:signlist	access:public
signlist_T	vim/vim/src/structs.h	/^typedef struct signlist signlist_T;$/;"	t	typeref:struct:signlist
signmap	vim/vim/src/netbeans.c	/^    int			*signmap;$/;"	m	struct:nbbuf_struct	file:	access:public
signmaplen	vim/vim/src/netbeans.c	/^    short_u		 signmaplen;$/;"	m	struct:nbbuf_struct	file:	access:public
signmapused	vim/vim/src/netbeans.c	/^    short_u		 signmapused;$/;"	m	struct:nbbuf_struct	file:	access:public
sigsetjmp	vim/vim/src/auto/osdef.h	/^extern int	sigsetjmp(sigjmp_buf, int);$/;"	p	signature:(sigjmp_buf, int)
sigstk	vim/vim/src/os_unix.c	/^static stack_t sigstk;			\/* for sigaltstack() *\/$/;"	v	file:
sigstk	vim/vim/src/os_unix.c	/^static struct sigstack sigstk;		\/* for sigstack() *\/$/;"	v	typeref:struct:sigstack	file:
silent	vim/vim/src/structs.h	/^    char	silent[MENU_MODES]; \/* A silent flag for each mode *\/$/;"	m	struct:VimMenu	access:public
silent_mode	vim/vim/src/globals.h	/^EXTERN int	silent_mode INIT(= FALSE);$/;"	v
similar_chars	vim/vim/src/spell.c	/^similar_chars(slang_T *slang, int c1, int c2)$/;"	f	file:	signature:(slang_T *slang, int c1, int c2)
similar_chars	vim/vim/src/spell.c	/^static int similar_chars(slang_T *slang, int c1, int c2);$/;"	p	file:	signature:(slang_T *slang, int c1, int c2)
simple	vim/vim/src/gui_at_sb.h	/^    SimplePart		simple;$/;"	m	struct:_ScrollbarRec	access:public
simple_class	vim/vim/src/gui_at_sb.h	/^    SimpleClassPart		simple_class;$/;"	m	struct:_ScrollbarClassRec	access:public
simplify_filename	vim/vim/src/tag.c	/^simplify_filename(char_u *filename)$/;"	f	signature:(char_u *filename)
simplify_key	vim/vim/src/misc2.c	/^simplify_key(int key, int *modifiers)$/;"	f	signature:(int key, int *modifiers)
single_input	vim/vim/src/if_python.c	118;"	d	file:
size	vim/vim/src/gui.h	/^    long	size;		\/* Size of scrollbar thumb *\/$/;"	m	struct:GuiScrollbar	access:public
size	vim/vim/src/gui_mac.c	/^    FMFontSize size;$/;"	m	struct:__anon223	file:	access:public
size_callback	vim/vim/src/gui_xmdlg.c	/^size_callback(Widget w,$/;"	f	file:	signature:(Widget w, SharedFontSelData *data, XmListCallbackStruct *call_data)
size_part	vim/vim/src/gui_xmdlg.c	/^size_part(char *font, char *buf, int inPixels)$/;"	f	file:	signature:(char *font, char *buf, int inPixels)
size_set	vim/vim/src/os_amiga.c	/^int			size_set = FALSE;   \/* set to TRUE if window size was set *\/$/;"	v
skip	vim/vim/src/ex_cmds.h	/^    int		skip;		\/* don't execute the command, only parse it *\/$/;"	m	struct:exarg	access:public
skip_anyof	vim/vim/src/regexp.c	/^skip_anyof(char_u *p)$/;"	f	file:	signature:(char_u *p)
skip_anyof	vim/vim/src/regexp.c	/^static char_u	*skip_anyof(char_u *p);$/;"	p	file:	signature:(char_u *p)
skip_chars	vim/vim/src/search.c	/^skip_chars(int cclass, int dir)$/;"	f	file:	signature:(int cclass, int dir)
skip_chars	vim/vim/src/search.c	/^static int skip_chars(int, int);$/;"	p	file:	signature:(int, int)
skip_cmd_arg	vim/vim/src/ex_docmd.c	/^skip_cmd_arg($/;"	f	file:	signature:( char_u *p, int rembs)
skip_cmd_arg	vim/vim/src/ex_docmd.c	/^static char_u	*skip_cmd_arg(char_u *p, int rembs);$/;"	p	file:	signature:(char_u *p, int rembs)
skip_comment	vim/vim/src/ops.c	/^skip_comment($/;"	f	signature:( char_u *line, int process, int include_space, int *is_comment)
skip_expr	vim/vim/src/eval.c	/^skip_expr(char_u **pp)$/;"	f	signature:(char_u **pp)
skip_grep_pat	vim/vim/src/ex_docmd.c	/^skip_grep_pat(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
skip_grep_pat	vim/vim/src/ex_docmd.c	/^static char_u	*skip_grep_pat(exarg_T *eap);$/;"	p	file:	signature:(exarg_T *eap)
skip_label	vim/vim/src/misc1.c	/^skip_label(linenr_T lnum, char_u **pp)$/;"	f	file:	signature:(linenr_T lnum, char_u **pp)
skip_label	vim/vim/src/misc1.c	/^static int	skip_label(linenr_T, char_u **pp);$/;"	p	file:	signature:(linenr_T, char_u **pp)
skip_range	vim/vim/src/ex_docmd.c	/^skip_range($/;"	f	signature:( char_u *cmd, int *ctx)
skip_redraw	vim/vim/src/globals.h	/^EXTERN int	skip_redraw INIT(= FALSE);  \/* skip redraw once *\/$/;"	v
skip_regexp	vim/vim/src/regexp.c	/^skip_regexp($/;"	f	signature:( char_u *startp, int dirc, int magic, char_u **newp)
skip_status_match_char	vim/vim/src/screen.c	/^skip_status_match_char(expand_T *xp, char_u *s)$/;"	f	file:	signature:(expand_T *xp, char_u *s)
skip_status_match_char	vim/vim/src/screen.c	/^static int skip_status_match_char(expand_T *xp, char_u *s);$/;"	p	file:	signature:(expand_T *xp, char_u *s)
skip_string	vim/vim/src/misc1.c	/^skip_string(char_u *p)$/;"	f	file:	signature:(char_u *p)
skip_string	vim/vim/src/misc1.c	/^static char_u	*skip_string(char_u *p);$/;"	p	file:	signature:(char_u *p)
skip_to_option_part	vim/vim/src/misc1.c	/^skip_to_option_part(char_u *p)$/;"	f	signature:(char_u *p)
skip_to_start	vim/vim/src/regexp_nfa.c	/^skip_to_start(int c, colnr_T *colp)$/;"	f	file:	signature:(int c, colnr_T *colp)
skip_to_start	vim/vim/src/regexp_nfa.c	/^static int skip_to_start(int c, colnr_T *colp);$/;"	p	file:	signature:(int c, colnr_T *colp)
skip_var_list	vim/vim/src/eval.c	/^skip_var_list($/;"	f	file:	signature:( char_u *arg, int *var_count, int *semicolon)
skip_var_list	vim/vim/src/eval.c	/^static char_u *skip_var_list(char_u *arg, int *var_count, int *semicolon);$/;"	p	file:	signature:(char_u *arg, int *var_count, int *semicolon)
skip_var_one	vim/vim/src/eval.c	/^skip_var_one(char_u *arg)$/;"	f	file:	signature:(char_u *arg)
skip_var_one	vim/vim/src/eval.c	/^static char_u *skip_var_one(char_u *arg);$/;"	p	file:	signature:(char_u *arg)
skip_vimgrep_pat	vim/vim/src/ex_cmds.c	/^skip_vimgrep_pat(char_u *p, char_u **s, int *flags)$/;"	f	signature:(char_u *p, char_u **s, int *flags)
skipbin	vim/vim/src/charset.c	/^skipbin(char_u *q)$/;"	f	signature:(char_u *q)
skipchr	vim/vim/src/regexp.c	/^skipchr(void)$/;"	f	file:	signature:(void)
skipchr	vim/vim/src/regexp.c	/^static void	skipchr(void);$/;"	p	file:	signature:(void)
skipchr_keepstart	vim/vim/src/regexp.c	/^skipchr_keepstart(void)$/;"	f	file:	signature:(void)
skipchr_keepstart	vim/vim/src/regexp.c	/^static void	skipchr_keepstart(void);$/;"	p	file:	signature:(void)
skipdigits	vim/vim/src/charset.c	/^skipdigits(char_u *q)$/;"	f	signature:(char_u *q)
skiphex	vim/vim/src/charset.c	/^skiphex(char_u *q)$/;"	f	signature:(char_u *q)
skiptobin	vim/vim/src/charset.c	/^skiptobin(char_u *q)$/;"	f	signature:(char_u *q)
skiptodigit	vim/vim/src/charset.c	/^skiptodigit(char_u *q)$/;"	f	signature:(char_u *q)
skiptohex	vim/vim/src/charset.c	/^skiptohex(char_u *q)$/;"	f	signature:(char_u *q)
skiptowhite	vim/vim/src/charset.c	/^skiptowhite(char_u *p)$/;"	f	signature:(char_u *p)
skiptowhite_esc	vim/vim/src/charset.c	/^skiptowhite_esc(char_u *p)$/;"	f	signature:(char_u *p)
skipwhite	vim/vim/src/charset.c	/^skipwhite(char_u *q)$/;"	f	signature:(char_u *q)
sl_add	vim/vim/src/spell.h	/^    int		sl_add;		\/* TRUE if it's a .add file. *\/$/;"	m	struct:slang_S	access:public
sl_collapse	vim/vim/src/spell.h	/^    int		sl_collapse;	\/* SAL collapse_result *\/$/;"	m	struct:slang_S	access:public
sl_compallflags	vim/vim/src/spell.h	/^    char_u	*sl_compallflags; \/* all flags for compound words *\/$/;"	m	struct:slang_S	access:public
sl_compmax	vim/vim/src/spell.h	/^    int		sl_compmax;	\/* COMPOUNDWORDMAX (default: MAXWLEN) *\/$/;"	m	struct:slang_S	access:public
sl_compminlen	vim/vim/src/spell.h	/^    int		sl_compminlen;	\/* COMPOUNDMIN (default: 0) *\/$/;"	m	struct:slang_S	access:public
sl_compoptions	vim/vim/src/spell.h	/^    int		sl_compoptions;	\/* COMP_* flags *\/$/;"	m	struct:slang_S	access:public
sl_comppat	vim/vim/src/spell.h	/^    garray_T	sl_comppat;	\/* CHECKCOMPOUNDPATTERN items *\/$/;"	m	struct:slang_S	access:public
sl_compprog	vim/vim/src/spell.h	/^    regprog_T	*sl_compprog;	\/* COMPOUNDRULE turned into a regexp progrm$/;"	m	struct:slang_S	access:public
sl_comprules	vim/vim/src/spell.h	/^    char_u	*sl_comprules;	\/* all COMPOUNDRULE concatenated (or NULL) *\/$/;"	m	struct:slang_S	access:public
sl_compstartflags	vim/vim/src/spell.h	/^    char_u	*sl_compstartflags; \/* flags for first compound word *\/$/;"	m	struct:slang_S	access:public
sl_compsylmax	vim/vim/src/spell.h	/^    int		sl_compsylmax;	\/* COMPOUNDSYLMAX (default: MAXWLEN) *\/$/;"	m	struct:slang_S	access:public
sl_fbyts	vim/vim/src/spell.h	/^    char_u	*sl_fbyts;	\/* case-folded word bytes *\/$/;"	m	struct:slang_S	access:public
sl_fidxs	vim/vim/src/spell.h	/^    idx_T	*sl_fidxs;	\/* case-folded word indexes *\/$/;"	m	struct:slang_S	access:public
sl_fname	vim/vim/src/spell.h	/^    char_u	*sl_fname;	\/* name of .spl file *\/$/;"	m	struct:slang_S	access:public
sl_followup	vim/vim/src/spell.h	/^    int		sl_followup;	\/* SAL followup *\/$/;"	m	struct:slang_S	access:public
sl_has_map	vim/vim/src/spell.h	/^    int		sl_has_map;	\/* TRUE if there is a MAP line *\/$/;"	m	struct:slang_S	access:public
sl_info	vim/vim/src/spell.h	/^    char_u	*sl_info;	\/* infotext string or NULL *\/$/;"	m	struct:slang_S	access:public
sl_items	vim/vim/src/structs.h	/^    listitem_T	sl_items[10];$/;"	m	struct:__anon186	access:public
sl_kbyts	vim/vim/src/spell.h	/^    char_u	*sl_kbyts;	\/* keep-case word bytes *\/$/;"	m	struct:slang_S	access:public
sl_kidxs	vim/vim/src/spell.h	/^    idx_T	*sl_kidxs;	\/* keep-case word indexes *\/$/;"	m	struct:slang_S	access:public
sl_lang	vim/vim/src/spell.c	/^    char_u  sl_lang[MAXWLEN + 1];	\/* language name *\/$/;"	m	struct:spelload_S	file:	access:public
sl_list	vim/vim/src/structs.h	/^    list_T	sl_list;	\/* must be first *\/$/;"	m	struct:__anon186	access:public
sl_map_array	vim/vim/src/spell.h	/^    char_u	sl_map_array[256]; \/* MAP for first 256 chars *\/$/;"	m	struct:slang_S	access:public
sl_map_array	vim/vim/src/spell.h	/^    int		sl_map_array[256]; \/* MAP for first 256 chars *\/$/;"	m	struct:slang_S	access:public
sl_map_hash	vim/vim/src/spell.h	/^    hashtab_T	sl_map_hash;	\/* MAP for multi-byte chars *\/$/;"	m	struct:slang_S	access:public
sl_midword	vim/vim/src/spell.h	/^    char_u	*sl_midword;	\/* MIDWORD string or NULL *\/$/;"	m	struct:slang_S	access:public
sl_name	vim/vim/src/spell.h	/^    char_u	*sl_name;	\/* language name "en", "en.rare", "nl", etc. *\/$/;"	m	struct:slang_S	access:public
sl_next	vim/vim/src/spell.h	/^    slang_T	*sl_next;	\/* next language *\/$/;"	m	struct:slang_S	access:public
sl_nobreak	vim/vim/src/spell.c	/^    int	    sl_nobreak;			\/* NOBREAK language found *\/$/;"	m	struct:spelload_S	file:	access:public
sl_nobreak	vim/vim/src/spell.h	/^    char_u	sl_nobreak;	\/* When TRUE: no spaces between words *\/$/;"	m	struct:slang_S	access:public
sl_nocompoundsugs	vim/vim/src/spell.h	/^    int		sl_nocompoundsugs; \/* don't suggest compounding *\/$/;"	m	struct:slang_S	access:public
sl_nosplitsugs	vim/vim/src/spell.h	/^    int		sl_nosplitsugs;	\/* don't suggest splitting a word *\/$/;"	m	struct:slang_S	access:public
sl_pbyts	vim/vim/src/spell.h	/^    char_u	*sl_pbyts;	\/* prefix tree word bytes *\/$/;"	m	struct:slang_S	access:public
sl_pidxs	vim/vim/src/spell.h	/^    idx_T	*sl_pidxs;	\/* prefix tree word indexes *\/$/;"	m	struct:slang_S	access:public
sl_prefixcnt	vim/vim/src/spell.h	/^    int		sl_prefixcnt;	\/* number of items in "sl_prefprog" *\/$/;"	m	struct:slang_S	access:public
sl_prefprog	vim/vim/src/spell.h	/^    regprog_T	**sl_prefprog;	\/* table with regprogs for prefixes *\/$/;"	m	struct:slang_S	access:public
sl_regions	vim/vim/src/spell.h	/^    char_u	sl_regions[17];	\/* table with up to 8 region names plus NUL *\/$/;"	m	struct:slang_S	access:public
sl_rem_accents	vim/vim/src/spell.h	/^    int		sl_rem_accents;	\/* SAL remove_accents *\/$/;"	m	struct:slang_S	access:public
sl_rep	vim/vim/src/spell.h	/^    garray_T	sl_rep;		\/* list of fromto_T entries from REP lines *\/$/;"	m	struct:slang_S	access:public
sl_rep_first	vim/vim/src/spell.h	/^    short	sl_rep_first[256];  \/* indexes where byte first appears, -1 if$/;"	m	struct:slang_S	access:public
sl_repsal	vim/vim/src/spell.h	/^    garray_T	sl_repsal;	\/* list of fromto_T entries from REPSAL lines *\/$/;"	m	struct:slang_S	access:public
sl_repsal_first	vim/vim/src/spell.h	/^    short	sl_repsal_first[256];  \/* sl_rep_first for REPSAL lines *\/$/;"	m	struct:slang_S	access:public
sl_sal	vim/vim/src/spell.h	/^    garray_T	sl_sal;		\/* list of salitem_T entries from SAL lines *\/$/;"	m	struct:slang_S	access:public
sl_sal_first	vim/vim/src/spell.h	/^    salfirst_T	sl_sal_first[256];  \/* indexes where byte first appears, -1 if$/;"	m	struct:slang_S	access:public
sl_sbyts	vim/vim/src/spell.h	/^    char_u	*sl_sbyts;	\/* soundfolded word bytes *\/$/;"	m	struct:slang_S	access:public
sl_sidxs	vim/vim/src/spell.h	/^    idx_T	*sl_sidxs;	\/* soundfolded word indexes *\/$/;"	m	struct:slang_S	access:public
sl_slang	vim/vim/src/spell.c	/^    slang_T *sl_slang;			\/* resulting slang_T struct *\/$/;"	m	struct:spelload_S	file:	access:public
sl_sofo	vim/vim/src/spell.h	/^    int		sl_sofo;	\/* SOFOFROM and SOFOTO instead of SAL items:$/;"	m	struct:slang_S	access:public
sl_sounddone	vim/vim/src/spell.h	/^    hashtab_T	sl_sounddone;	\/* table with soundfolded words that have$/;"	m	struct:slang_S	access:public
sl_sugbuf	vim/vim/src/spell.h	/^    buf_T	*sl_sugbuf;	\/* buffer with word number table *\/$/;"	m	struct:slang_S	access:public
sl_sugloaded	vim/vim/src/spell.h	/^    int		sl_sugloaded;	\/* TRUE when .sug file was loaded or failed to$/;"	m	struct:slang_S	access:public
sl_sugtime	vim/vim/src/spell.h	/^    time_t	sl_sugtime;	\/* timestamp for .sug file *\/$/;"	m	struct:slang_S	access:public
sl_syl_items	vim/vim/src/spell.h	/^    garray_T	sl_syl_items;	\/* syllable items *\/$/;"	m	struct:slang_S	access:public
sl_syllable	vim/vim/src/spell.h	/^    char_u	*sl_syllable;	\/* SYLLABLE repeatable chars or NULL *\/$/;"	m	struct:slang_S	access:public
sl_wordcount	vim/vim/src/spell.h	/^    hashtab_T	sl_wordcount;	\/* hashtable with word count, wordcount_T *\/$/;"	m	struct:slang_S	access:public
sladký	vim/vim/runtime/tutor/tutor.cs	/^      6)  Cukr je sladký,$/;"	p
slang_S	vim/vim/src/spell.h	/^struct slang_S$/;"	s
slang_S::sl_add	vim/vim/src/spell.h	/^    int		sl_add;		\/* TRUE if it's a .add file. *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_collapse	vim/vim/src/spell.h	/^    int		sl_collapse;	\/* SAL collapse_result *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compallflags	vim/vim/src/spell.h	/^    char_u	*sl_compallflags; \/* all flags for compound words *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compmax	vim/vim/src/spell.h	/^    int		sl_compmax;	\/* COMPOUNDWORDMAX (default: MAXWLEN) *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compminlen	vim/vim/src/spell.h	/^    int		sl_compminlen;	\/* COMPOUNDMIN (default: 0) *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compoptions	vim/vim/src/spell.h	/^    int		sl_compoptions;	\/* COMP_* flags *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_comppat	vim/vim/src/spell.h	/^    garray_T	sl_comppat;	\/* CHECKCOMPOUNDPATTERN items *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compprog	vim/vim/src/spell.h	/^    regprog_T	*sl_compprog;	\/* COMPOUNDRULE turned into a regexp progrm$/;"	m	struct:slang_S	access:public
slang_S::sl_comprules	vim/vim/src/spell.h	/^    char_u	*sl_comprules;	\/* all COMPOUNDRULE concatenated (or NULL) *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compstartflags	vim/vim/src/spell.h	/^    char_u	*sl_compstartflags; \/* flags for first compound word *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_compsylmax	vim/vim/src/spell.h	/^    int		sl_compsylmax;	\/* COMPOUNDSYLMAX (default: MAXWLEN) *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_fbyts	vim/vim/src/spell.h	/^    char_u	*sl_fbyts;	\/* case-folded word bytes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_fidxs	vim/vim/src/spell.h	/^    idx_T	*sl_fidxs;	\/* case-folded word indexes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_fname	vim/vim/src/spell.h	/^    char_u	*sl_fname;	\/* name of .spl file *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_followup	vim/vim/src/spell.h	/^    int		sl_followup;	\/* SAL followup *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_has_map	vim/vim/src/spell.h	/^    int		sl_has_map;	\/* TRUE if there is a MAP line *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_info	vim/vim/src/spell.h	/^    char_u	*sl_info;	\/* infotext string or NULL *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_kbyts	vim/vim/src/spell.h	/^    char_u	*sl_kbyts;	\/* keep-case word bytes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_kidxs	vim/vim/src/spell.h	/^    idx_T	*sl_kidxs;	\/* keep-case word indexes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_map_array	vim/vim/src/spell.h	/^    char_u	sl_map_array[256]; \/* MAP for first 256 chars *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_map_array	vim/vim/src/spell.h	/^    int		sl_map_array[256]; \/* MAP for first 256 chars *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_map_hash	vim/vim/src/spell.h	/^    hashtab_T	sl_map_hash;	\/* MAP for multi-byte chars *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_midword	vim/vim/src/spell.h	/^    char_u	*sl_midword;	\/* MIDWORD string or NULL *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_name	vim/vim/src/spell.h	/^    char_u	*sl_name;	\/* language name "en", "en.rare", "nl", etc. *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_next	vim/vim/src/spell.h	/^    slang_T	*sl_next;	\/* next language *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_nobreak	vim/vim/src/spell.h	/^    char_u	sl_nobreak;	\/* When TRUE: no spaces between words *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_nocompoundsugs	vim/vim/src/spell.h	/^    int		sl_nocompoundsugs; \/* don't suggest compounding *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_nosplitsugs	vim/vim/src/spell.h	/^    int		sl_nosplitsugs;	\/* don't suggest splitting a word *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_pbyts	vim/vim/src/spell.h	/^    char_u	*sl_pbyts;	\/* prefix tree word bytes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_pidxs	vim/vim/src/spell.h	/^    idx_T	*sl_pidxs;	\/* prefix tree word indexes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_prefixcnt	vim/vim/src/spell.h	/^    int		sl_prefixcnt;	\/* number of items in "sl_prefprog" *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_prefprog	vim/vim/src/spell.h	/^    regprog_T	**sl_prefprog;	\/* table with regprogs for prefixes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_regions	vim/vim/src/spell.h	/^    char_u	sl_regions[17];	\/* table with up to 8 region names plus NUL *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_rem_accents	vim/vim/src/spell.h	/^    int		sl_rem_accents;	\/* SAL remove_accents *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_rep	vim/vim/src/spell.h	/^    garray_T	sl_rep;		\/* list of fromto_T entries from REP lines *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_rep_first	vim/vim/src/spell.h	/^    short	sl_rep_first[256];  \/* indexes where byte first appears, -1 if$/;"	m	struct:slang_S	access:public
slang_S::sl_repsal	vim/vim/src/spell.h	/^    garray_T	sl_repsal;	\/* list of fromto_T entries from REPSAL lines *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_repsal_first	vim/vim/src/spell.h	/^    short	sl_repsal_first[256];  \/* sl_rep_first for REPSAL lines *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_sal	vim/vim/src/spell.h	/^    garray_T	sl_sal;		\/* list of salitem_T entries from SAL lines *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_sal_first	vim/vim/src/spell.h	/^    salfirst_T	sl_sal_first[256];  \/* indexes where byte first appears, -1 if$/;"	m	struct:slang_S	access:public
slang_S::sl_sbyts	vim/vim/src/spell.h	/^    char_u	*sl_sbyts;	\/* soundfolded word bytes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_sidxs	vim/vim/src/spell.h	/^    idx_T	*sl_sidxs;	\/* soundfolded word indexes *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_sofo	vim/vim/src/spell.h	/^    int		sl_sofo;	\/* SOFOFROM and SOFOTO instead of SAL items:$/;"	m	struct:slang_S	access:public
slang_S::sl_sounddone	vim/vim/src/spell.h	/^    hashtab_T	sl_sounddone;	\/* table with soundfolded words that have$/;"	m	struct:slang_S	access:public
slang_S::sl_sugbuf	vim/vim/src/spell.h	/^    buf_T	*sl_sugbuf;	\/* buffer with word number table *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_sugloaded	vim/vim/src/spell.h	/^    int		sl_sugloaded;	\/* TRUE when .sug file was loaded or failed to$/;"	m	struct:slang_S	access:public
slang_S::sl_sugtime	vim/vim/src/spell.h	/^    time_t	sl_sugtime;	\/* timestamp for .sug file *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_syl_items	vim/vim/src/spell.h	/^    garray_T	sl_syl_items;	\/* syllable items *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_syllable	vim/vim/src/spell.h	/^    char_u	*sl_syllable;	\/* SYLLABLE repeatable chars or NULL *\/$/;"	m	struct:slang_S	access:public
slang_S::sl_wordcount	vim/vim/src/spell.h	/^    hashtab_T	sl_wordcount;	\/* hashtable with word count, wordcount_T *\/$/;"	m	struct:slang_S	access:public
slang_T	vim/vim/src/spell.h	/^typedef struct slang_S slang_T;$/;"	t	typeref:struct:slang_S
slang_alloc	vim/vim/src/spell.c	/^slang_alloc(char_u *lang)$/;"	f	signature:(char_u *lang)
slang_clear	vim/vim/src/spell.c	/^slang_clear(slang_T *lp)$/;"	f	signature:(slang_T *lp)
slang_clear_sug	vim/vim/src/spell.c	/^slang_clear_sug(slang_T *lp)$/;"	f	signature:(slang_T *lp)
slang_free	vim/vim/src/spell.c	/^slang_free(slang_T *lp)$/;"	f	signature:(slang_T *lp)
slash_adjust	vim/vim/src/os_mswin.c	/^slash_adjust(char_u *p)$/;"	f	signature:(char_u *p)
sleep	vim/vim/src/dosinst.h	66;"	d
slova	vim/vim/runtime/tutor/tutor.cs	/^     kurzoru do konce slova,  c$  zmìní text do konce øádku.$/;"	p
slovo	vim/vim/runtime/tutor/tutor.cs	/^V¹imni si, ¾e  cw  nejen nahrazuje slovo, ale také pøemístí do vkládání.$/;"	p
slowest	vim/vim/src/structs.h	/^    proftime_T	slowest;	\/* time of slowest call *\/$/;"	m	struct:__anon198	access:public
slowest	vim/vim/src/syntax.c	/^    proftime_T	slowest;$/;"	m	struct:__anon139	file:	access:public
sm_client_check_changed_any	vim/vim/src/gui_gtk_x11.c	/^sm_client_check_changed_any(GnomeClient	    *client UNUSED,$/;"	f	file:	signature:(GnomeClient *client UNUSED, gint key, GnomeDialogType type UNUSED, gpointer data UNUSED)
sm_client_die	vim/vim/src/gui_gtk_x11.c	/^sm_client_die(GnomeClient *client UNUSED, gpointer data UNUSED)$/;"	f	file:	signature:(GnomeClient *client UNUSED, gpointer data UNUSED)
sm_client_save_yourself	vim/vim/src/gui_gtk_x11.c	/^sm_client_save_yourself(GnomeClient	    *client,$/;"	f	file:	signature:(GnomeClient *client, gint phase UNUSED, GnomeSaveStyle save_style UNUSED, gboolean shutdown UNUSED, GnomeInteractStyle interact_style, gboolean fast UNUSED, gpointer data UNUSED)
sm_firstlnum	vim/vim/src/regexp.c	/^    linenr_T	sm_firstlnum;$/;"	m	struct:__anon132	file:	access:public
sm_gettail	vim/vim/src/ex_getln.c	/^sm_gettail(char_u *s)$/;"	f	signature:(char_u *s)
sm_lead	vim/vim/src/spell.h	/^    char_u	*sm_lead;	\/* leading letters *\/$/;"	m	struct:salitem_S	access:public
sm_lead_w	vim/vim/src/spell.h	/^    int		*sm_lead_w;	\/* wide character copy of "sm_lead" *\/$/;"	m	struct:salitem_S	access:public
sm_leadlen	vim/vim/src/spell.h	/^    int		sm_leadlen;	\/* length of "sm_lead" *\/$/;"	m	struct:salitem_S	access:public
sm_line_lbr	vim/vim/src/regexp.c	/^    int		sm_line_lbr;$/;"	m	struct:__anon132	file:	access:public
sm_match	vim/vim/src/regexp.c	/^    regmatch_T	*sm_match;$/;"	m	struct:__anon132	file:	access:public
sm_maxline	vim/vim/src/regexp.c	/^    linenr_T	sm_maxline;$/;"	m	struct:__anon132	file:	access:public
sm_mmatch	vim/vim/src/regexp.c	/^    regmmatch_T	*sm_mmatch;$/;"	m	struct:__anon132	file:	access:public
sm_oneof	vim/vim/src/spell.h	/^    char_u	*sm_oneof;	\/* letters from () or NULL *\/$/;"	m	struct:salitem_S	access:public
sm_oneof_w	vim/vim/src/spell.h	/^    int		*sm_oneof_w;	\/* wide character copy of "sm_oneof" *\/$/;"	m	struct:salitem_S	access:public
sm_rules	vim/vim/src/spell.h	/^    char_u	*sm_rules;	\/* rules like ^, $, priority *\/$/;"	m	struct:salitem_S	access:public
sm_to	vim/vim/src/spell.h	/^    char_u	*sm_to;		\/* replacement. *\/$/;"	m	struct:salitem_S	access:public
sm_to_w	vim/vim/src/spell.h	/^    int		*sm_to_w;	\/* wide character copy of "sm_to" *\/$/;"	m	struct:salitem_S	access:public
smazán	vim/vim/runtime/tutor/tutor.cs	/^  1. Pro vlo¾ení textu, který byl smazán, napi¹  p  . To vlo¾í smazaný text$/;"	p
smcconn	vim/vim/src/os_unix.c	/^    SmcConn smcconn;	    \/* The SM connection ID *\/$/;"	m	struct:__anon74	file:	access:public
smsg	vim/vim/src/message.c	/^smsg(char_u *s, ...)$/;"	f	signature:(char_u *s, ...)
smsg	vim/vim/src/proto.h	/^smsg(char_u *, ...);$/;"	p	signature:(char_u *, ...)
smsg_attr	vim/vim/src/message.c	/^smsg_attr(int attr, char_u *s, ...)$/;"	f	signature:(int attr, char_u *s, ...)
smsg_attr	vim/vim/src/proto.h	/^smsg_attr(int, char_u *, ...);$/;"	p	signature:(int, char_u *, ...)
sn_dev	vim/vim/src/ex_cmds2.c	/^    dev_t	sn_dev;$/;"	m	struct:scriptitem_S	file:	access:public
sn_dev_valid	vim/vim/src/ex_cmds2.c	/^    int		sn_dev_valid;$/;"	m	struct:scriptitem_S	file:	access:public
sn_icon	vim/vim/src/ex_cmds.c	/^    char_u	*sn_icon;	\/* name of pixmap *\/$/;"	m	struct:sign	file:	access:public
sn_image	vim/vim/src/ex_cmds.c	/^    void	*sn_image;	\/* icon image *\/$/;"	m	struct:sign	file:	access:public
sn_ino	vim/vim/src/ex_cmds2.c	/^    ino_t	sn_ino;$/;"	m	struct:scriptitem_S	file:	access:public
sn_line_hl	vim/vim/src/ex_cmds.c	/^    int		sn_line_hl;	\/* highlight ID for line *\/$/;"	m	struct:sign	file:	access:public
sn_name	vim/vim/src/ex_cmds.c	/^    char_u	*sn_name;	\/* name of sign *\/$/;"	m	struct:sign	file:	access:public
sn_name	vim/vim/src/ex_cmds2.c	/^    char_u	*sn_name;$/;"	m	struct:scriptitem_S	file:	access:public
sn_next	vim/vim/src/ex_cmds.c	/^    sign_T	*sn_next;	\/* next sign in list *\/$/;"	m	struct:sign	file:	access:public
sn_pr_child	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_child;	\/* time set when going into first child *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_children	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_children; \/* time in children after script start *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_count	vim/vim/src/ex_cmds2.c	/^    int		sn_pr_count;	\/* nr of times sourced *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_force	vim/vim/src/ex_cmds2.c	/^    int		sn_pr_force;	\/* forceit: profile functions in this script *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_nest	vim/vim/src/ex_cmds2.c	/^    int		sn_pr_nest;	\/* nesting for sn_pr_child *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_self	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_self;	\/* time spent in script itself *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_start	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_start;	\/* time at script start *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_pr_total	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_pr_total;	\/* time spent in script + children *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prl_S	vim/vim/src/ex_cmds2.c	/^typedef struct sn_prl_S$/;"	s	file:
sn_prl_S::sn_prl_self	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_self;	\/* time spent in a line itself *\/$/;"	m	struct:sn_prl_S	file:	access:public
sn_prl_S::sn_prl_total	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_total;	\/* time spent in a line + children *\/$/;"	m	struct:sn_prl_S	file:	access:public
sn_prl_S::snp_count	vim/vim/src/ex_cmds2.c	/^    int		snp_count;	\/* nr of times line was executed *\/$/;"	m	struct:sn_prl_S	file:	access:public
sn_prl_T	vim/vim/src/ex_cmds2.c	/^} sn_prl_T;$/;"	t	typeref:struct:sn_prl_S	file:
sn_prl_children	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_children; \/* time spent in children for this line *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prl_execed	vim/vim/src/ex_cmds2.c	/^    int		sn_prl_execed;	\/* line being timed was executed *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prl_ga	vim/vim/src/ex_cmds2.c	/^    garray_T	sn_prl_ga;	\/* things stored for every line *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prl_idx	vim/vim/src/ex_cmds2.c	/^    int		sn_prl_idx;	\/* index of line being timed; -1 if none *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prl_self	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_self;	\/* time spent in a line itself *\/$/;"	m	struct:sn_prl_S	file:	access:public
sn_prl_start	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_start;	\/* start time for current line *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prl_total	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_total;	\/* time spent in a line + children *\/$/;"	m	struct:sn_prl_S	file:	access:public
sn_prl_wait	vim/vim/src/ex_cmds2.c	/^    proftime_T	sn_prl_wait;	\/* wait start time for current line *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_prof_on	vim/vim/src/ex_cmds2.c	/^    int		sn_prof_on;	\/* TRUE when script is\/was profiled *\/$/;"	m	struct:scriptitem_S	file:	access:public
sn_text	vim/vim/src/ex_cmds.c	/^    char_u	*sn_text;	\/* text used instead of pixmap *\/$/;"	m	struct:sign	file:	access:public
sn_text_hl	vim/vim/src/ex_cmds.c	/^    int		sn_text_hl;	\/* highlight ID for text *\/$/;"	m	struct:sign	file:	access:public
sn_typenr	vim/vim/src/ex_cmds.c	/^    int		sn_typenr;	\/* type number of sign *\/$/;"	m	struct:sign	file:	access:public
snp_count	vim/vim/src/ex_cmds2.c	/^    int		snp_count;	\/* nr of times line was executed *\/$/;"	m	struct:sn_prl_S	file:	access:public
so	vim/vim/src/if_mzsch.c	/^    Scheme_Object   so;$/;"	m	struct:__anon7	file:	access:public
so	vim/vim/src/if_mzsch.c	/^    Scheme_Object   so;$/;"	m	struct:__anon8	file:	access:public
sock_T	vim/vim/src/vim.h	/^typedef __int64 sock_T;$/;"	t
sock_T	vim/vim/src/vim.h	/^typedef int sock_T;$/;"	t
sock_close	vim/vim/src/channel.c	39;"	d	file:
sock_close	vim/vim/src/channel.c	51;"	d	file:
sock_read	vim/vim/src/channel.c	38;"	d	file:
sock_read	vim/vim/src/channel.c	50;"	d	file:
sock_write	vim/vim/src/channel.c	37;"	d	file:
sock_write	vim/vim/src/channel.c	49;"	d	file:
soffset	vim/vim/src/search.c	/^struct soffset$/;"	s	file:
soffset::dir	vim/vim/src/search.c	/^    int		dir;		\/* search direction, '\/' or '?' *\/$/;"	m	struct:soffset	file:	access:public
soffset::end	vim/vim/src/search.c	/^    int		end;		\/* search set cursor at end *\/$/;"	m	struct:soffset	file:	access:public
soffset::line	vim/vim/src/search.c	/^    int		line;		\/* search has line offset *\/$/;"	m	struct:soffset	file:	access:public
soffset::off	vim/vim/src/search.c	/^    long	off;		\/* line or char offset *\/$/;"	m	struct:soffset	file:	access:public
softspace	vim/vim/src/if_py_both.h	/^    long softspace;$/;"	m	struct:__anon96	access:public
sortFunctions	vim/vim/src/eval.c	/^sortFunctions(void)$/;"	f	file:	signature:(void)
sortItem_T	vim/vim/src/evalfunc.c	/^} sortItem_T;$/;"	t	typeref:struct:__anon251	file:
sort_abort	vim/vim/src/ex_cmds.c	/^static int	sort_abort;	\/* flag to indicate if sorting has been interrupted *\/$/;"	v	file:
sort_compare	vim/vim/src/ex_cmds.c	/^sort_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
sort_compare	vim/vim/src/ex_cmds.c	/^sort_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
sort_compare	vim/vim/src/misc2.c	/^sort_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
sort_compare	vim/vim/src/misc2.c	/^sort_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
sort_flt	vim/vim/src/ex_cmds.c	/^static int	sort_flt;	\/* sort on floating number *\/$/;"	v	file:
sort_func_compare	vim/vim/src/ex_getln.c	/^sort_func_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
sort_func_compare	vim/vim/src/ex_getln.c	/^sort_func_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
sort_hist	vim/vim/src/ex_getln.c	/^sort_hist(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
sort_ic	vim/vim/src/ex_cmds.c	/^static int	sort_ic;	\/* ignore case *\/$/;"	v	file:
sort_nr	vim/vim/src/ex_cmds.c	/^static int	sort_nr;	\/* sort on number *\/$/;"	v	file:
sort_rx	vim/vim/src/ex_cmds.c	/^static int	sort_rx;	\/* sort on regex instead of skipping it *\/$/;"	v	file:
sort_strings	vim/vim/src/misc2.c	/^sort_strings($/;"	f	signature:( char_u **files, int count)
sortbuf1	vim/vim/src/ex_cmds.c	/^static char_u	*sortbuf1;$/;"	v	file:
sortbuf2	vim/vim/src/ex_cmds.c	/^static char_u	*sortbuf2;$/;"	v	file:
sortcmp	vim/vim/src/os_amiga.c	/^sortcmp(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
sortcmp	vim/vim/src/os_amiga.c	/^static int sortcmp(const void *a, const void *b);$/;"	p	file:	signature:(const void *a, const void *b)
sorti_T	vim/vim/src/ex_cmds.c	/^} sorti_T;$/;"	t	typeref:struct:__anon215	file:
sortinfo	vim/vim/src/evalfunc.c	/^static sortinfo_T	*sortinfo = NULL;$/;"	v	file:
sortinfo_T	vim/vim/src/evalfunc.c	/^} sortinfo_T;$/;"	t	typeref:struct:__anon252	file:
souboru	vim/vim/runtime/tutor/tutor.cs	/^Poznámka: Kdy¾ vyhledávání dosáhne konce souboru, bude pokraèovat na jeho$/;"	p
soundalike_score	vim/vim/src/spell.c	/^soundalike_score($/;"	f	file:	signature:( char_u *goodstart, char_u *badstart)
soundalike_score	vim/vim/src/spell.c	/^static int soundalike_score(char_u *goodsound, char_u *badsound);$/;"	p	file:	signature:(char_u *goodsound, char_u *badsound)
soundfold_find	vim/vim/src/spell.c	/^soundfold_find(slang_T *slang, char_u *word)$/;"	f	file:	signature:(slang_T *slang, char_u *word)
soundfold_find	vim/vim/src/spell.c	/^static int soundfold_find(slang_T *slang, char_u *word);$/;"	p	file:	signature:(slang_T *slang, char_u *word)
source_all_matches	vim/vim/src/ex_cmds2.c	/^source_all_matches(char_u *pat)$/;"	f	file:	signature:(char_u *pat)
source_breakpoint	vim/vim/src/ex_cmds2.c	/^source_breakpoint(void *cookie)$/;"	f	signature:(void *cookie)
source_callback	vim/vim/src/ex_cmds2.c	/^source_callback(char_u *fname, void *cookie UNUSED)$/;"	f	file:	signature:(char_u *fname, void *cookie UNUSED)
source_cookie	vim/vim/src/ex_cmds2.c	/^struct source_cookie$/;"	s	file:
source_cookie::breakpoint	vim/vim/src/ex_cmds2.c	/^    linenr_T	breakpoint;	\/* next line with breakpoint or zero *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::conv	vim/vim/src/ex_cmds2.c	/^    vimconv_T	conv;		\/* type of conversion *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::dbg_tick	vim/vim/src/ex_cmds2.c	/^    int		dbg_tick;	\/* debug_tick when breakpoint was set *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::error	vim/vim/src/ex_cmds2.c	/^    int		error;		\/* TRUE if LF found after CR-LF *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::fileformat	vim/vim/src/ex_cmds2.c	/^    int		fileformat;	\/* EOL_UNKNOWN, EOL_UNIX or EOL_DOS *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::finished	vim/vim/src/ex_cmds2.c	/^    int		finished;	\/* ":finish" used *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::fname	vim/vim/src/ex_cmds2.c	/^    char_u	*fname;		\/* name of sourced file *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::fp	vim/vim/src/ex_cmds2.c	/^    FILE	*fp;		\/* opened file for sourcing *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::level	vim/vim/src/ex_cmds2.c	/^    int		level;		\/* top nesting level of sourced file *\/$/;"	m	struct:source_cookie	file:	access:public
source_cookie::nextline	vim/vim/src/ex_cmds2.c	/^    char_u      *nextline;      \/* if not NULL: line that was read ahead *\/$/;"	m	struct:source_cookie	file:	access:public
source_dbg_tick	vim/vim/src/ex_cmds2.c	/^source_dbg_tick(void *cookie)$/;"	f	signature:(void *cookie)
source_in_path	vim/vim/src/ex_cmds2.c	/^source_in_path(char_u *path, char_u *name, int flags)$/;"	f	signature:(char_u *path, char_u *name, int flags)
source_level	vim/vim/src/ex_cmds2.c	/^source_level(void *cookie)$/;"	f	signature:(void *cookie)
source_plugin	build_all.sh	/^function source_plugin()$/;"	f
source_pyx_file	vim/vim/src/ex_cmds2.c	/^source_pyx_file(exarg_T *eap, char_u *fname)$/;"	f	file:	signature:(exarg_T *eap, char_u *fname)
source_runtime	vim/vim/src/ex_cmds2.c	/^source_runtime(char_u *name, int flags)$/;"	f	signature:(char_u *name, int flags)
source_startup_scripts	vim/vim/src/main.c	/^source_startup_scripts(mparm_T *parmp)$/;"	f	file:	signature:(mparm_T *parmp)
source_startup_scripts	vim/vim/src/main.c	/^static void source_startup_scripts(mparm_T *parmp);$/;"	p	file:	signature:(mparm_T *parmp)
source_tar_bz2_plugin	build_all.sh	/^function source_tar_bz2_plugin()$/;"	f
source_tar_gz_plugin	build_all.sh	/^function source_tar_gz_plugin()$/;"	f
source_tar_plugin	build_all.sh	/^function source_tar_plugin()$/;"	f
source_zip_plugin	build_all.sh	/^function source_zip_plugin()$/;"	f
sourcing_lnum	vim/vim/src/globals.h	/^EXTERN linenr_T	sourcing_lnum INIT(= 0);    \/* line number of the source file *\/$/;"	v
sourcing_name	vim/vim/src/globals.h	/^EXTERN char_u	*sourcing_name INIT( = NULL);\/* name of error message source *\/$/;"	v
sp	vim/vim/src/hangulin.c	/^static int sp=0;$/;"	v	file:
sp_cchar	vim/vim/src/syntax.c	/^    int		 sp_cchar;		\/* conceal substitute character *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_color	vim/vim/src/structs.h	/^	    guicolor_T	    sp_color;	\/* special color handle *\/$/;"	m	struct:attr_entry::__anon175::__anon178	access:public
sp_cont_list	vim/vim/src/syntax.c	/^    short	*sp_cont_list;		\/* cont. group IDs, if non-zero *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_flags	vim/vim/src/syntax.c	/^    int		 sp_flags;		\/* see HL_ defines below *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_ic	vim/vim/src/syntax.c	/^    int		 sp_ic;			\/* ignore-case flag for sp_prog *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_line_id	vim/vim/src/syntax.c	/^    int		 sp_line_id;		\/* ID of last line where tried *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_next_list	vim/vim/src/syntax.c	/^    short	*sp_next_list;		\/* next group IDs, if non-zero *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_off_flags	vim/vim/src/syntax.c	/^    short	 sp_off_flags;		\/* see below *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_offsets	vim/vim/src/syntax.c	/^    int		 sp_offsets[SPO_COUNT];	\/* offsets *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_pattern	vim/vim/src/syntax.c	/^    char_u	*sp_pattern;		\/* regexp to match, pattern *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_prog	vim/vim/src/syntax.c	/^    regprog_T	*sp_prog;		\/* regexp to match, program *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_startcol	vim/vim/src/syntax.c	/^    int		 sp_startcol;		\/* next match in sp_line_id line *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_syn	vim/vim/src/structs.h	/^struct sp_syn$/;"	s
sp_syn	vim/vim/src/syntax.c	/^    struct sp_syn sp_syn;		\/* struct passed to in_id_list() *\/$/;"	m	struct:syn_pattern	typeref:struct:syn_pattern::sp_syn	file:	access:public
sp_syn::cont_in_list	vim/vim/src/structs.h	/^    short	*cont_in_list;	\/* cont.in group IDs, if non-zero *\/$/;"	m	struct:sp_syn	access:public
sp_syn::id	vim/vim/src/structs.h	/^    short	id;		\/* highlight group ID of item *\/$/;"	m	struct:sp_syn	access:public
sp_syn::inc_tag	vim/vim/src/structs.h	/^    int		inc_tag;	\/* ":syn include" unique tag *\/$/;"	m	struct:sp_syn	access:public
sp_syn_match_id	vim/vim/src/syntax.c	/^    short	 sp_syn_match_id;	\/* highlight group ID of pattern *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_sync_idx	vim/vim/src/syntax.c	/^    int		 sp_sync_idx;		\/* sync item index (syncing only) *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_syncing	vim/vim/src/syntax.c	/^    char	 sp_syncing;		\/* this item used for syncing *\/$/;"	m	struct:syn_pattern	file:	access:public
sp_time	vim/vim/src/syntax.c	/^    syn_time_T	 sp_time;$/;"	m	struct:syn_pattern	file:	access:public
sp_type	vim/vim/src/syntax.c	/^    char	 sp_type;		\/* see SPTYPE_ defines below *\/$/;"	m	struct:syn_pattern	file:	access:public
spacing	vim/vim/src/gui_xmebwp.h	/^    Dimension spacing;$/;"	m	struct:_XmEnhancedButtonPart	access:public
spat	vim/vim/src/search.c	/^struct spat$/;"	s	file:
spat::magic	vim/vim/src/search.c	/^    int		    magic;	\/* magicness of the pattern *\/$/;"	m	struct:spat	file:	access:public
spat::no_scs	vim/vim/src/search.c	/^    int		    no_scs;	\/* no smartcase for this pattern *\/$/;"	m	struct:spat	file:	access:public
spat::off	vim/vim/src/search.c	/^    struct soffset  off;$/;"	m	struct:spat	typeref:struct:spat::soffset	file:	access:public
spat::pat	vim/vim/src/search.c	/^    char_u	    *pat;	\/* the pattern (in allocated memory) or NULL *\/$/;"	m	struct:spat	file:	access:public
spats	vim/vim/src/search.c	/^static struct spat spats[2] =$/;"	v	typeref:struct:spat	file:
spcolor	vim/vim/src/gui.h	/^    GdkColor	*spcolor;	    \/* GDK-styled special color *\/$/;"	m	struct:Gui	access:public
spcolor	vim/vim/src/gui.h	/^    GdkRGBA	*spcolor;	    \/* GDK-styled special color *\/$/;"	m	struct:Gui	access:public
specialColor	vim/vim/src/gui_mac.c	/^RGBColor specialColor;$/;"	v
special_begin	vim/vim/src/libvterm/bin/vterm-dump.c	/^static const char *special_begin = "{";$/;"	v	file:
special_end	vim/vim/src/libvterm/bin/vterm-dump.c	/^static const char *special_end   = "}";$/;"	v	file:
special_key	vim/vim/src/gui_gtk_x11.c	/^static struct special_key$/;"	s	file:
special_key::code0	vim/vim/src/gui_gtk_x11.c	/^    char_u code0;$/;"	m	struct:special_key	file:	access:public
special_key::code1	vim/vim/src/gui_gtk_x11.c	/^    char_u code1;$/;"	m	struct:special_key	file:	access:public
special_key::key_sym	vim/vim/src/gui_gtk_x11.c	/^    guint key_sym;$/;"	m	struct:special_key	file:	access:public
special_keys	vim/vim/src/gui_gtk_x11.c	/^const special_keys[] =$/;"	v	file:
special_keys	vim/vim/src/gui_mac.c	/^} special_keys[] =$/;"	v	typeref:struct:__anon224	file:
special_keys	vim/vim/src/gui_photon.c	/^} special_keys[] =$/;"	v	typeref:struct:__anon240	file:
special_keys	vim/vim/src/gui_w32.c	/^} special_keys[] =$/;"	v	typeref:struct:__anon246	file:
special_keys	vim/vim/src/gui_x11.c	/^} special_keys[] =$/;"	v	typeref:struct:specialkey	file:
special_keys	vim/vim/src/netbeans.c	/^special_keys(char_u *args)$/;"	f	file:	signature:(char_u *args)
special_keys	vim/vim/src/netbeans.c	/^static void special_keys(char_u *args);$/;"	p	file:	signature:(char_u *args)
specialkey	vim/vim/src/gui_x11.c	/^static struct specialkey$/;"	s	file:
specialkey::key_sym	vim/vim/src/gui_x11.c	/^    KeySym  key_sym;$/;"	m	struct:specialkey	file:	access:public
specialkey::vim_code0	vim/vim/src/gui_x11.c	/^    char_u  vim_code0;$/;"	m	struct:specialkey	file:	access:public
specialkey::vim_code1	vim/vim/src/gui_x11.c	/^    char_u  vim_code1;$/;"	m	struct:specialkey	file:	access:public
spell_add_word	vim/vim/src/spellfile.c	/^spell_add_word($/;"	f	signature:( char_u *word, int len, int bad, int idx, int undo)
spell_back_to_badword	vim/vim/src/edit.c	/^spell_back_to_badword(void)$/;"	f	file:	signature:(void)
spell_back_to_badword	vim/vim/src/edit.c	/^static void spell_back_to_badword(void);$/;"	p	file:	signature:(void)
spell_bad_len	vim/vim/src/edit.c	/^static int  spell_bad_len = 0;	\/* length of located bad word *\/$/;"	v	file:
spell_casefold	vim/vim/src/spell.c	/^spell_casefold($/;"	f	signature:( char_u *str, int len, char_u *buf, int buflen)
spell_cat_line	vim/vim/src/spell.c	/^spell_cat_line(char_u *buf, char_u *line, int maxlen)$/;"	f	signature:(char_u *buf, char_u *line, int maxlen)
spell_check	vim/vim/src/spell.c	/^spell_check($/;"	f	signature:( win_T *wp, char_u *ptr, hlf_T *attrp, int *capcol, int docount)
spell_check_msm	vim/vim/src/spellfile.c	/^spell_check_msm(void)$/;"	f	signature:(void)
spell_check_sps	vim/vim/src/spell.c	/^spell_check_sps(void)$/;"	f	signature:(void)
spell_clear_flags	vim/vim/src/spellfile.c	/^spell_clear_flags(wordnode_T *node)$/;"	f	file:	signature:(wordnode_T *node)
spell_delete_wordlist	vim/vim/src/spell.c	/^spell_delete_wordlist(void)$/;"	f	signature:(void)
spell_dump_compl	vim/vim/src/spell.c	/^spell_dump_compl($/;"	f	signature:( char_u *pat, int ic, int *dir, int dumpflags_arg)
spell_edit_score	vim/vim/src/spell.c	/^spell_edit_score($/;"	f	file:	signature:( slang_T *slang, char_u *badword, char_u *goodword)
spell_edit_score	vim/vim/src/spell.c	/^static int spell_edit_score(slang_T *slang, char_u *badword, char_u *goodword);$/;"	p	file:	signature:(slang_T *slang, char_u *badword, char_u *goodword)
spell_edit_score_limit	vim/vim/src/spell.c	/^spell_edit_score_limit($/;"	f	file:	signature:( slang_T *slang, char_u *badword, char_u *goodword, int limit)
spell_edit_score_limit	vim/vim/src/spell.c	/^static int spell_edit_score_limit(slang_T *slang, char_u *badword, char_u *goodword, int limit);$/;"	p	file:	signature:(slang_T *slang, char_u *badword, char_u *goodword, int limit)
spell_edit_score_limit_w	vim/vim/src/spell.c	/^spell_edit_score_limit_w($/;"	f	file:	signature:( slang_T *slang, char_u *badword, char_u *goodword, int limit)
spell_edit_score_limit_w	vim/vim/src/spell.c	/^static int spell_edit_score_limit_w(slang_T *slang, char_u *badword, char_u *goodword, int limit);$/;"	p	file:	signature:(slang_T *slang, char_u *badword, char_u *goodword, int limit)
spell_enc	vim/vim/src/spell.c	/^spell_enc(void)$/;"	f	signature:(void)
spell_expand_check_cap	vim/vim/src/spell.c	/^spell_expand_check_cap(colnr_T col)$/;"	f	signature:(colnr_T col)
spell_expand_need_cap	vim/vim/src/spell.c	/^static int spell_expand_need_cap;$/;"	v	file:
spell_find_cleanup	vim/vim/src/spell.c	/^spell_find_cleanup(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
spell_find_cleanup	vim/vim/src/spell.c	/^static void spell_find_cleanup(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
spell_find_suggest	vim/vim/src/spell.c	/^spell_find_suggest($/;"	f	file:	signature:( char_u *badptr, int badlen, suginfo_T *su, int maxcount, int banbadword, int need_cap, int interactive)
spell_find_suggest	vim/vim/src/spell.c	/^static void spell_find_suggest(char_u *badptr, int badlen, suginfo_T *su, int maxcount, int banbadword, int need_cap, int interactive);$/;"	p	file:	signature:(char_u *badptr, int badlen, suginfo_T *su, int maxcount, int banbadword, int need_cap, int interactive)
spell_free_aff	vim/vim/src/spellfile.c	/^spell_free_aff(afffile_T *aff)$/;"	f	file:	signature:(afffile_T *aff)
spell_free_aff	vim/vim/src/spellfile.c	/^static void spell_free_aff(afffile_T *aff);$/;"	p	file:	signature:(afffile_T *aff)
spell_free_all	vim/vim/src/spell.c	/^spell_free_all(void)$/;"	f	signature:(void)
spell_info_item	vim/vim/src/spellfile.c	/^spell_info_item(char_u *s)$/;"	f	file:	signature:(char_u *s)
spell_info_item	vim/vim/src/spellfile.c	/^static int spell_info_item(char_u *s);$/;"	p	file:	signature:(char_u *s)
spell_iswordp	vim/vim/src/spell.c	/^spell_iswordp($/;"	f	file:	signature:( char_u *p, win_T *wp)
spell_iswordp	vim/vim/src/spell.c	/^static int spell_iswordp(char_u *p, win_T *wp);$/;"	p	file:	signature:(char_u *p, win_T *wp)
spell_iswordp_nmw	vim/vim/src/spell.c	/^spell_iswordp_nmw(char_u *p, win_T *wp)$/;"	f	signature:(char_u *p, win_T *wp)
spell_iswordp_w	vim/vim/src/spell.c	/^spell_iswordp_w(int *p, win_T *wp)$/;"	f	file:	signature:(int *p, win_T *wp)
spell_iswordp_w	vim/vim/src/spell.c	/^static int spell_iswordp_w(int *p, win_T *wp);$/;"	p	file:	signature:(int *p, win_T *wp)
spell_load_cb	vim/vim/src/spell.c	/^spell_load_cb(char_u *fname, void *cookie)$/;"	f	file:	signature:(char_u *fname, void *cookie)
spell_load_cb	vim/vim/src/spell.c	/^static void spell_load_cb(char_u *fname, void *cookie);$/;"	p	file:	signature:(char_u *fname, void *cookie)
spell_load_file	vim/vim/src/spellfile.c	/^spell_load_file($/;"	f	signature:( char_u *fname, char_u *lang, slang_T *old_lp, int silent)
spell_load_lang	vim/vim/src/spell.c	/^spell_load_lang(char_u *lang)$/;"	f	file:	signature:(char_u *lang)
spell_load_lang	vim/vim/src/spell.c	/^static void spell_load_lang(char_u *lang);$/;"	p	file:	signature:(char_u *lang)
spell_make_sugfile	vim/vim/src/spellfile.c	/^spell_make_sugfile(spellinfo_T *spin, char_u *wfname)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *wfname)
spell_make_sugfile	vim/vim/src/spellfile.c	/^static void spell_make_sugfile(spellinfo_T *spin, char_u *wfname);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *wfname)
spell_mb_isword_class	vim/vim/src/spell.c	/^spell_mb_isword_class(int cl, win_T *wp)$/;"	f	file:	signature:(int cl, win_T *wp)
spell_mb_isword_class	vim/vim/src/spell.c	/^static int spell_mb_isword_class(int cl, win_T *wp);$/;"	p	file:	signature:(int cl, win_T *wp)
spell_message	vim/vim/src/spellfile.c	/^spell_message(spellinfo_T *spin, char_u *str)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *str)
spell_message	vim/vim/src/spellfile.c	/^static void spell_message(spellinfo_T *spin, char_u *str);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *str)
spell_move_to	vim/vim/src/spell.c	/^spell_move_to($/;"	f	signature:( win_T *wp, int dir, int allwords, int curline, hlf_T *attrp)
spell_print_node	vim/vim/src/spellfile.c	/^spell_print_node(wordnode_T *node, int depth)$/;"	f	file:	signature:(wordnode_T *node, int depth)
spell_print_tree	vim/vim/src/spellfile.c	/^spell_print_tree(wordnode_T *root)$/;"	f	file:	signature:(wordnode_T *root)
spell_read_aff	vim/vim/src/spellfile.c	/^spell_read_aff(spellinfo_T *spin, char_u *fname)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *fname)
spell_read_aff	vim/vim/src/spellfile.c	/^static afffile_T *spell_read_aff(spellinfo_T *spin, char_u *fname);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *fname)
spell_read_dic	vim/vim/src/spellfile.c	/^spell_read_dic(spellinfo_T *spin, char_u *fname, afffile_T *affile)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *fname, afffile_T *affile)
spell_read_dic	vim/vim/src/spellfile.c	/^static int spell_read_dic(spellinfo_T *spin, char_u *fname, afffile_T *affile);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *fname, afffile_T *affile)
spell_read_tree	vim/vim/src/spellfile.c	/^spell_read_tree($/;"	f	file:	signature:( FILE *fd, char_u **bytsp, idx_T **idxsp, int prefixtree, int prefixcnt)
spell_read_tree	vim/vim/src/spellfile.c	/^static int spell_read_tree(FILE *fd, char_u **bytsp, idx_T **idxsp, int prefixtree, int prefixcnt);$/;"	p	file:	signature:(FILE *fd, char_u **bytsp, idx_T **idxsp, int prefixtree, int prefixcnt)
spell_read_wordfile	vim/vim/src/spellfile.c	/^spell_read_wordfile(spellinfo_T *spin, char_u *fname)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *fname)
spell_read_wordfile	vim/vim/src/spellfile.c	/^static int spell_read_wordfile(spellinfo_T *spin, char_u *fname);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *fname)
spell_redraw_lnum	vim/vim/src/globals.h	/^EXTERN linenr_T		spell_redraw_lnum INIT(= 0);$/;"	v
spell_reload	vim/vim/src/spell.c	/^spell_reload(void)$/;"	f	signature:(void)
spell_reload_one	vim/vim/src/spellfile.c	/^spell_reload_one($/;"	f	file:	signature:( char_u *fname, int added_word)
spell_reload_one	vim/vim/src/spellfile.c	/^static void spell_reload_one(char_u *fname, int added_word);$/;"	p	file:	signature:(char_u *fname, int added_word)
spell_soundfold	vim/vim/src/spell.c	/^spell_soundfold($/;"	f	signature:( slang_T *slang, char_u *inword, int folded, char_u *res)
spell_soundfold_sal	vim/vim/src/spell.c	/^spell_soundfold_sal(slang_T *slang, char_u *inword, char_u *res)$/;"	f	file:	signature:(slang_T *slang, char_u *inword, char_u *res)
spell_soundfold_sal	vim/vim/src/spell.c	/^static void spell_soundfold_sal(slang_T *slang, char_u *inword, char_u *res);$/;"	p	file:	signature:(slang_T *slang, char_u *inword, char_u *res)
spell_soundfold_sofo	vim/vim/src/spell.c	/^spell_soundfold_sofo(slang_T *slang, char_u *inword, char_u *res)$/;"	f	file:	signature:(slang_T *slang, char_u *inword, char_u *res)
spell_soundfold_sofo	vim/vim/src/spell.c	/^static void spell_soundfold_sofo(slang_T *slang, char_u *inword, char_u *res);$/;"	p	file:	signature:(slang_T *slang, char_u *inword, char_u *res)
spell_soundfold_wsal	vim/vim/src/spell.c	/^spell_soundfold_wsal(slang_T *slang, char_u *inword, char_u *res)$/;"	f	file:	signature:(slang_T *slang, char_u *inword, char_u *res)
spell_soundfold_wsal	vim/vim/src/spell.c	/^static void spell_soundfold_wsal(slang_T *slang, char_u *inword, char_u *res);$/;"	p	file:	signature:(slang_T *slang, char_u *inword, char_u *res)
spell_suggest	vim/vim/src/spell.c	/^spell_suggest(int count)$/;"	f	signature:(int count)
spell_suggest_expr	vim/vim/src/spell.c	/^spell_suggest_expr(suginfo_T *su, char_u *expr)$/;"	f	file:	signature:(suginfo_T *su, char_u *expr)
spell_suggest_expr	vim/vim/src/spell.c	/^static void spell_suggest_expr(suginfo_T *su, char_u *expr);$/;"	p	file:	signature:(suginfo_T *su, char_u *expr)
spell_suggest_file	vim/vim/src/spell.c	/^spell_suggest_file(suginfo_T *su, char_u *fname)$/;"	f	file:	signature:(suginfo_T *su, char_u *fname)
spell_suggest_file	vim/vim/src/spell.c	/^static void spell_suggest_file(suginfo_T *su, char_u *fname);$/;"	p	file:	signature:(suginfo_T *su, char_u *fname)
spell_suggest_intern	vim/vim/src/spell.c	/^spell_suggest_intern(suginfo_T *su, int interactive)$/;"	f	file:	signature:(suginfo_T *su, int interactive)
spell_suggest_intern	vim/vim/src/spell.c	/^static void spell_suggest_intern(suginfo_T *su, int interactive);$/;"	p	file:	signature:(suginfo_T *su, int interactive)
spell_suggest_list	vim/vim/src/spell.c	/^spell_suggest_list($/;"	f	signature:( garray_T *gap, char_u *word, int maxcount, int need_cap, int interactive)
spell_to_word_end	vim/vim/src/spell.c	/^spell_to_word_end(char_u *start, win_T *win)$/;"	f	signature:(char_u *start, win_T *win)
spell_valid_case	vim/vim/src/spell.c	/^spell_valid_case($/;"	f	file:	signature:( int wordflags, int treeflags)
spell_valid_case	vim/vim/src/spell.c	/^static int spell_valid_case(int wordflags, int treeflags);$/;"	p	file:	signature:(int wordflags, int treeflags)
spell_word_start	vim/vim/src/spell.c	/^spell_word_start(int startcol)$/;"	f	signature:(int startcol)
spellinfo_S	vim/vim/src/spellfile.c	/^typedef struct spellinfo_S$/;"	s	file:
spellinfo_S::si_add	vim/vim/src/spellfile.c	/^    int		si_add;		\/* addition file *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_ascii	vim/vim/src/spellfile.c	/^    int		si_ascii;	\/* handling only ASCII words *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_blocks	vim/vim/src/spellfile.c	/^    sblock_T	*si_blocks;	\/* memory blocks used *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_blocks_cnt	vim/vim/src/spellfile.c	/^    long	si_blocks_cnt;	\/* memory blocks allocated *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_clear_chartab	vim/vim/src/spellfile.c	/^    int		si_clear_chartab;   \/* when TRUE clear char tables *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_collapse	vim/vim/src/spellfile.c	/^    int		si_collapse;	\/* soundsalike: ? *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_commonwords	vim/vim/src/spellfile.c	/^    hashtab_T	si_commonwords;	\/* hashtable for common words *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_compflags	vim/vim/src/spellfile.c	/^    char_u	*si_compflags;	\/* flags used for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_compmax	vim/vim/src/spellfile.c	/^    int		si_compmax;	\/* max nr of words for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_compminlen	vim/vim/src/spellfile.c	/^    int		si_compminlen;	\/* minimal length for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_compoptions	vim/vim/src/spellfile.c	/^    int		si_compoptions;	\/* COMP_ flags *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_comppat	vim/vim/src/spellfile.c	/^    garray_T	si_comppat;	\/* CHECKCOMPOUNDPATTERN items, each stored as$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_compress_cnt	vim/vim/src/spellfile.c	/^    long	si_compress_cnt;    \/* words to add before lowering$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_compsylmax	vim/vim/src/spellfile.c	/^    int		si_compsylmax;	\/* max nr of syllables for compounding *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_conv	vim/vim/src/spellfile.c	/^    vimconv_T	si_conv;	\/* for conversion to 'encoding' *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_did_emsg	vim/vim/src/spellfile.c	/^    int		si_did_emsg;	\/* TRUE when ran out of memory *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_first_free	vim/vim/src/spellfile.c	/^    wordnode_T	*si_first_free; \/* List of nodes that have been freed during$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_foldroot	vim/vim/src/spellfile.c	/^    wordnode_T	*si_foldroot;	\/* tree with case-folded words *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_foldwcount	vim/vim/src/spellfile.c	/^    long	si_foldwcount;	\/* nr of words in si_foldroot *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_followup	vim/vim/src/spellfile.c	/^    int		si_followup;	\/* soundsalike: ? *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_free_count	vim/vim/src/spellfile.c	/^    long	si_free_count;	\/* number of nodes in si_first_free *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_info	vim/vim/src/spellfile.c	/^    char_u	*si_info;	\/* info text chars or NULL  *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_keeproot	vim/vim/src/spellfile.c	/^    wordnode_T	*si_keeproot;	\/* tree with keep-case words *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_keepwcount	vim/vim/src/spellfile.c	/^    long	si_keepwcount;	\/* nr of words in si_keeproot *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_map	vim/vim/src/spellfile.c	/^    garray_T	si_map;		\/* MAP info concatenated *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_memtot	vim/vim/src/spellfile.c	/^    int		si_memtot;	\/* runtime memory used *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_midword	vim/vim/src/spellfile.c	/^    char_u	*si_midword;	\/* MIDWORD chars or NULL  *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_msg_count	vim/vim/src/spellfile.c	/^    int		si_msg_count;	\/* number of words added since last message *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_newcompID	vim/vim/src/spellfile.c	/^    int		si_newcompID;	\/* current value for compound ID *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_newprefID	vim/vim/src/spellfile.c	/^    int		si_newprefID;	\/* current value for ah_newID *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_nobreak	vim/vim/src/spellfile.c	/^    char_u	si_nobreak;	\/* NOBREAK *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_nocompoundsugs	vim/vim/src/spellfile.c	/^    int		si_nocompoundsugs; \/* NOCOMPOUNDSUGS item found *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_nosplitsugs	vim/vim/src/spellfile.c	/^    int		si_nosplitsugs;	\/* NOSPLITSUGS item found *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_nosugfile	vim/vim/src/spellfile.c	/^    int		si_nosugfile;	\/* NOSUGFILE item found *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_prefcond	vim/vim/src/spellfile.c	/^    garray_T	si_prefcond;	\/* table with conditions for postponed$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_prefroot	vim/vim/src/spellfile.c	/^    wordnode_T	*si_prefroot;	\/* tree with postponed prefixes *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_region	vim/vim/src/spellfile.c	/^    int		si_region;	\/* region mask *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_region_count	vim/vim/src/spellfile.c	/^    int		si_region_count; \/* number of regions supported (1 when there$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_region_name	vim/vim/src/spellfile.c	/^    char_u	si_region_name[17]; \/* region names; used only if$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_rem_accents	vim/vim/src/spellfile.c	/^    int		si_rem_accents;	\/* soundsalike: remove accents *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_rep	vim/vim/src/spellfile.c	/^    garray_T	si_rep;		\/* list of fromto_T entries from REP lines *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_repsal	vim/vim/src/spellfile.c	/^    garray_T	si_repsal;	\/* list of fromto_T entries from REPSAL lines *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_sal	vim/vim/src/spellfile.c	/^    garray_T	si_sal;		\/* list of fromto_T entries from SAL lines *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_sofofr	vim/vim/src/spellfile.c	/^    char_u	*si_sofofr;	\/* SOFOFROM text *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_sofoto	vim/vim/src/spellfile.c	/^    char_u	*si_sofoto;	\/* SOFOTO text *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_spellbuf	vim/vim/src/spellfile.c	/^    buf_T	*si_spellbuf;	\/* buffer used to store soundfold word table *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_sugtime	vim/vim/src/spellfile.c	/^    time_t	si_sugtime;	\/* timestamp for .sug file *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_sugtree	vim/vim/src/spellfile.c	/^    long	si_sugtree;	\/* creating the soundfolding trie *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_syllable	vim/vim/src/spellfile.c	/^    char_u	*si_syllable;	\/* syllable string *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_verbose	vim/vim/src/spellfile.c	/^    int		si_verbose;	\/* verbose messages *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_S::si_wordnode_nr	vim/vim/src/spellfile.c	/^    int		si_wordnode_nr;	\/* sequence nr for nodes *\/$/;"	m	struct:spellinfo_S	file:	access:public
spellinfo_T	vim/vim/src/spellfile.c	/^} spellinfo_T;$/;"	t	typeref:struct:spellinfo_S	file:
spelload_S	vim/vim/src/spell.c	/^typedef struct spelload_S$/;"	s	file:
spelload_S::sl_lang	vim/vim/src/spell.c	/^    char_u  sl_lang[MAXWLEN + 1];	\/* language name *\/$/;"	m	struct:spelload_S	file:	access:public
spelload_S::sl_nobreak	vim/vim/src/spell.c	/^    int	    sl_nobreak;			\/* NOBREAK language found *\/$/;"	m	struct:spelload_S	file:	access:public
spelload_S::sl_slang	vim/vim/src/spell.c	/^    slang_T *sl_slang;			\/* resulting slang_T struct *\/$/;"	m	struct:spelload_S	file:	access:public
spelload_T	vim/vim/src/spell.c	/^} spelload_T;$/;"	t	typeref:struct:spelload_S	file:
spelltab	vim/vim/src/spell.h	/^SPELL_EXTERN spelltab_T   spelltab;$/;"	v
spelltab_S	vim/vim/src/spell.h	/^typedef struct spelltab_S$/;"	s
spelltab_S::st_fold	vim/vim/src/spell.h	/^    char_u  st_fold[256];	\/* chars: folded case *\/$/;"	m	struct:spelltab_S	access:public
spelltab_S::st_isu	vim/vim/src/spell.h	/^    char_u  st_isu[256];	\/* flags: is uppercase char *\/$/;"	m	struct:spelltab_S	access:public
spelltab_S::st_isw	vim/vim/src/spell.h	/^    char_u  st_isw[256];	\/* flags: is word char *\/$/;"	m	struct:spelltab_S	access:public
spelltab_S::st_upper	vim/vim/src/spell.h	/^    char_u  st_upper[256];	\/* chars: upper case *\/$/;"	m	struct:spelltab_S	access:public
spelltab_T	vim/vim/src/spell.h	/^} spelltab_T;$/;"	t	typeref:struct:spelltab_S
split	vim/vim/src/structs.h	/^    int		split;			\/* flags for win_split() *\/$/;"	m	struct:__anon171	access:public
split_button_string	vim/vim/src/gui_gtk.c	/^split_button_string(char_u *button_string, int *n_buttons)$/;"	f	file:	signature:(char_u *button_string, int *n_buttons)
split_button_translation	vim/vim/src/gui_gtk.c	/^split_button_translation(const char *message)$/;"	f	file:	signature:(const char *message)
spo_name_tab	vim/vim/src/syntax.c	/^static char *(spo_name_tab[SPO_COUNT]) =$/;"	v	file:
sps_flags	vim/vim/src/spell.c	/^static int sps_flags = SPS_BEST;	\/* flags from 'spellsuggest' *\/$/;"	v	file:
sps_limit	vim/vim/src/spell.c	/^static int sps_limit = 9999;		\/* max nr of suggestions given *\/$/;"	v	file:
sr_old_redobuff	vim/vim/src/structs.h	/^    buffheader_T sr_old_redobuff;$/;"	m	struct:__anon170	access:public
sr_redobuff	vim/vim/src/structs.h	/^    buffheader_T sr_redobuff;$/;"	m	struct:__anon170	access:public
srcdir	vim/vim/src/Makefile	/^	-@srcdir=`pwd`; cd $(HELPSOURCE); $(MAKE) VIMEXE=$$srcdir\/$(VIMTARGET) vimtags$/;"	m
srcdir	vim/vim/src/Makefile	/^	srcdir=`pwd`; $(MAKE) -f Makefile installruntime \\$/;"	m
srcdir	vim/vim/src/Makefile	/^srcdir = .$/;"	m
srcdir	vim/vim/src/auto/config.mk	/^srcdir		= .$/;"	m
ssop_flags	vim/vim/src/option.h	/^EXTERN unsigned	ssop_flags;$/;"	v
sst_change_lnum	vim/vim/src/structs.h	/^    linenr_T	sst_change_lnum;\/* when non-zero, change in this line$/;"	m	struct:syn_state	access:public
sst_ga	vim/vim/src/structs.h	/^	garray_T	sst_ga;	\/* growarray for long state stack *\/$/;"	m	union:syn_state::__anon174	access:public
sst_lnum	vim/vim/src/structs.h	/^    linenr_T	sst_lnum;	\/* line number for this state *\/$/;"	m	struct:syn_state	access:public
sst_next	vim/vim/src/structs.h	/^    synstate_T	*sst_next;	\/* next entry in used or free list *\/$/;"	m	struct:syn_state	access:public
sst_next_flags	vim/vim/src/structs.h	/^    int		sst_next_flags;	\/* flags for sst_next_list *\/$/;"	m	struct:syn_state	access:public
sst_next_list	vim/vim/src/structs.h	/^    short	*sst_next_list;	\/* "nextgroup" list in this state$/;"	m	struct:syn_state	access:public
sst_stack	vim/vim/src/structs.h	/^	bufstate_T	sst_stack[SST_FIX_STATES]; \/* short state stack *\/$/;"	m	union:syn_state::__anon174	access:public
sst_stacksize	vim/vim/src/structs.h	/^    int		sst_stacksize;	\/* number of states on the stack *\/$/;"	m	struct:syn_state	access:public
sst_tick	vim/vim/src/structs.h	/^    disptick_T	sst_tick;	\/* tick when last displayed *\/$/;"	m	struct:syn_state	access:public
sst_union	vim/vim/src/structs.h	/^    } sst_union;$/;"	m	struct:syn_state	typeref:union:syn_state::__anon174	access:public
st_altscore	vim/vim/src/spell.c	/^    int		st_altscore;	\/* used when st_score compares equal *\/$/;"	m	struct:suggest_S	file:	access:public
st_dev	vim/vim/src/if_cscope.h	/^    dev_t	    st_dev;	\/* ID of dev containing cscope db *\/$/;"	m	struct:csi	access:public
st_error	vim/vim/src/regexp_nfa.c	/^st_error(int *postfix UNUSED, int *end UNUSED, int *p UNUSED)$/;"	f	file:	signature:(int *postfix UNUSED, int *end UNUSED, int *p UNUSED)
st_error	vim/vim/src/regexp_nfa.c	/^static void st_error(int *postfix, int *end, int *p);$/;"	p	file:	signature:(int *postfix, int *end, int *p)
st_fold	vim/vim/src/spell.h	/^    char_u  st_fold[256];	\/* chars: folded case *\/$/;"	m	struct:spelltab_S	access:public
st_had_bonus	vim/vim/src/spell.c	/^    int		st_had_bonus;	\/* bonus already included in score *\/$/;"	m	struct:suggest_S	file:	access:public
st_ino	vim/vim/src/if_cscope.h	/^    ino_t	    st_ino;	\/* inode number of cscope db *\/$/;"	m	struct:csi	access:public
st_isu	vim/vim/src/spell.h	/^    char_u  st_isu[256];	\/* flags: is uppercase char *\/$/;"	m	struct:spelltab_S	access:public
st_isw	vim/vim/src/spell.h	/^    char_u  st_isw[256];	\/* flags: is word char *\/$/;"	m	struct:spelltab_S	access:public
st_orglen	vim/vim/src/spell.c	/^    int		st_orglen;	\/* length of replaced text *\/$/;"	m	struct:suggest_S	file:	access:public
st_pop	vim/vim/src/regexp_nfa.c	/^st_pop(Frag_T **p, Frag_T *stack)$/;"	f	file:	signature:(Frag_T **p, Frag_T *stack)
st_pop	vim/vim/src/regexp_nfa.c	/^static Frag_T st_pop(Frag_T **p, Frag_T *stack);$/;"	p	file:	signature:(Frag_T **p, Frag_T *stack)
st_push	vim/vim/src/regexp_nfa.c	/^st_push(Frag_T s, Frag_T **p, Frag_T *stack_end)$/;"	f	file:	signature:(Frag_T s, Frag_T **p, Frag_T *stack_end)
st_push	vim/vim/src/regexp_nfa.c	/^static void st_push(Frag_T s, Frag_T **p, Frag_T *stack_end);$/;"	p	file:	signature:(Frag_T s, Frag_T **p, Frag_T *stack_end)
st_salscore	vim/vim/src/spell.c	/^    int		st_salscore;	\/* st_score is for soundalike *\/$/;"	m	struct:suggest_S	file:	access:public
st_score	vim/vim/src/spell.c	/^    int		st_score;	\/* lower is better *\/$/;"	m	struct:suggest_S	file:	access:public
st_slang	vim/vim/src/spell.c	/^    slang_T	*st_slang;	\/* language used for sound folding *\/$/;"	m	struct:suggest_S	file:	access:public
st_u	vim/vim/src/ex_cmds.c	/^    } st_u;$/;"	m	struct:__anon215	typeref:union:__anon215::__anon216	file:	access:public
st_upper	vim/vim/src/spell.h	/^    char_u  st_upper[256];	\/* chars: upper case *\/$/;"	m	struct:spelltab_S	access:public
st_word	vim/vim/src/spell.c	/^    char_u	*st_word;	\/* suggested word, allocated string *\/$/;"	m	struct:suggest_S	file:	access:public
st_wordlen	vim/vim/src/spell.c	/^    int		st_wordlen;	\/* STRLEN(st_word) *\/$/;"	m	struct:suggest_S	file:	access:public
stack	vim/vim/src/hangulin.c	/^static char_u stack[20] = {0};$/;"	v	file:
stack_base	vim/vim/src/if_mzsch.c	/^static void *stack_base = NULL;$/;"	v	file:
stack_grows_downwards	vim/vim/src/os_unix.c	/^static int stack_grows_downwards;$/;"	v	file:
stack_limit	vim/vim/src/os_unix.c	/^static char *stack_limit = NULL;$/;"	v	file:
standend	vim/vim/src/os_win32.c	/^standend(void)$/;"	f	file:	signature:(void)
standend	vim/vim/src/os_win32.c	/^static void standend(void);$/;"	p	file:	signature:(void)
standout	vim/vim/src/os_win32.c	/^standout(void)$/;"	f	file:	signature:(void)
standout	vim/vim/src/os_win32.c	/^static void standout(void);$/;"	p	file:	signature:(void)
start	vim/vim/src/fold.c	/^    int		start;		\/* number of folds that are forced to start at$/;"	m	struct:__anon95	file:	access:public
start	vim/vim/src/if_py_both.h	/^    PyInt start;$/;"	m	struct:__anon112	access:public
start	vim/vim/src/regexp.h	/^    nfa_state_T		*start;		\/* points into state[] *\/$/;"	m	struct:__anon144	access:public
start	vim/vim/src/regexp_nfa.c	/^	    char_u	*start;$/;"	m	struct:__anon116::__anon117::linepos	file:	access:public
start	vim/vim/src/regexp_nfa.c	/^    nfa_state_T *start;$/;"	m	struct:Frag	file:	access:public
start	vim/vim/src/structs.h	/^	    char_u	    *start;	\/* start escape sequence *\/$/;"	m	struct:attr_entry::__anon175::__anon176	access:public
start	vim/vim/src/structs.h	/^    char_u	*start;$/;"	m	struct:stl_hlrec	access:public
start	vim/vim/src/structs.h	/^    pos_T	start;		\/* start of the operator *\/$/;"	m	struct:oparg_S	access:public
start	vim/vim/src/vim.h	/^    pos_T	start;		\/* Start of selected area *\/$/;"	m	struct:VimClipboard	access:public
startPS	vim/vim/src/search.c	/^startPS(linenr_T lnum, int para, int both)$/;"	f	signature:(linenr_T lnum, int para, int both)
startRange	vim/vim/src/gui_mac.c	/^    long startRange; \/\/ start of selection range (if line < 0)$/;"	m	struct:SelectionRange	file:	access:public
start_arrow	vim/vim/src/edit.c	/^start_arrow($/;"	f	file:	signature:( pos_T *end_insert_pos)
start_arrow	vim/vim/src/edit.c	/^static void start_arrow(pos_T *end_insert_pos);$/;"	p	file:	signature:(pos_T *end_insert_pos)
start_arrow_common	vim/vim/src/edit.c	/^start_arrow_common($/;"	f	file:	signature:( pos_T *end_insert_pos, int end_change)
start_arrow_common	vim/vim/src/edit.c	/^static void start_arrow_common(pos_T *end_insert_pos, int change);$/;"	p	file:	signature:(pos_T *end_insert_pos, int change)
start_arrow_with_change	vim/vim/src/edit.c	/^start_arrow_with_change($/;"	f	file:	signature:( pos_T *end_insert_pos, int end_change)
start_arrow_with_change	vim/vim/src/edit.c	/^static void start_arrow_with_change(pos_T *end_insert_pos, int change);$/;"	p	file:	signature:(pos_T *end_insert_pos, int change)
start_char_vcols	vim/vim/src/ops.c	/^    colnr_T	start_char_vcols; \/* number of vcols of pre-block char *\/$/;"	m	struct:block_def	file:	access:public
start_col	vim/vim/src/libvterm/include/vterm.h	/^  int start_col;$/;"	m	struct:__anon48	access:public
start_col	vim/vim/src/regexp_nfa.c	/^	    colnr_T	start_col;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
start_col_nr	vim/vim/src/ex_cmds.c	/^	    varnumber_T	start_col_nr;		\/* starting column number *\/$/;"	m	struct:__anon215::__anon216::__anon217	file:	access:public
start_dir	vim/vim/src/main.c	/^static char_u *start_dir = NULL;	\/* current working dir on startup *\/$/;"	v	file:
start_global_changes	vim/vim/src/ui.c	/^start_global_changes(void)$/;"	f	signature:(void)
start_lnum	vim/vim/src/regexp_nfa.c	/^	    linenr_T	start_lnum;$/;"	m	struct:__anon116::__anon117::multipos	file:	access:public
start_redo	vim/vim/src/getchar.c	/^start_redo(long count, int old_redo)$/;"	f	signature:(long count, int old_redo)
start_redo_ins	vim/vim/src/getchar.c	/^start_redo_ins(void)$/;"	f	signature:(void)
start_row	vim/vim/src/libvterm/include/vterm.h	/^  int start_row;$/;"	m	struct:__anon48	access:public
start_search_hl	vim/vim/src/screen.c	/^start_search_hl(void)$/;"	f	file:	signature:(void)
start_search_hl	vim/vim/src/screen.c	/^static void start_search_hl(void);$/;"	p	file:	signature:(void)
start_selection	vim/vim/src/normal.c	/^start_selection(void)$/;"	f	signature:(void)
start_stuff	vim/vim/src/getchar.c	/^start_stuff(void)$/;"	f	file:	signature:(void)
start_stuff	vim/vim/src/getchar.c	/^static void	start_stuff(void);$/;"	p	file:	signature:(void)
start_vcol	vim/vim/src/ops.c	/^    colnr_T	start_vcol;	\/* start col of 1st char wholly inside block *\/$/;"	m	struct:block_def	file:	access:public
start_vcol	vim/vim/src/structs.h	/^    colnr_T	start_vcol;	\/* start col for block mode operator *\/$/;"	m	struct:oparg_S	access:public
start_xterm_trace	vim/vim/src/os_unix.c	/^start_xterm_trace(int button)$/;"	f	signature:(int button)
startcol	vim/vim/src/structs.h	/^    colnr_T	startcol; \/* in win_line() points to char where HL starts *\/$/;"	m	struct:__anon201	access:public
starting	vim/vim/src/globals.h	/^EXTERN int	starting INIT(= NO_SCREEN);$/;"	v
starting	vim/vim/src/gui.h	/^    int		starting;	    \/* GUI will start in a little while *\/$/;"	m	struct:Gui	access:public
startp	vim/vim/src/regexp.h	/^    char_u		*startp[NSUBEXP];$/;"	m	struct:__anon145	access:public
startpos	vim/vim/src/regexp.h	/^    lpos_T		startpos[NSUBEXP];$/;"	m	struct:__anon146	access:public
startspaces	vim/vim/src/ops.c	/^    int		startspaces;	\/* 'extra' cols before first char *\/$/;"	m	struct:block_def	file:	access:public
starttermcap	vim/vim/src/term.c	/^starttermcap(void)$/;"	f	signature:(void)
starttime	vim/vim/src/globals.h	/^EXTERN time_T starttime;$/;"	v
startup_mzscheme	vim/vim/src/if_mzsch.c	/^startup_mzscheme(void)$/;"	f	file:	signature:(void)
startup_mzscheme	vim/vim/src/if_mzsch.c	/^static int startup_mzscheme(void);$/;"	p	file:	signature:(void)
stat	vim/vim/src/os_mswin.c	463;"	d	file:
stat	vim/vim/src/os_mswin.c	467;"	d	file:
statDone	vim/vim/src/gui_at_fs.c	/^    int		statDone;$/;"	m	struct:__anon235	file:	access:public
stat_T	vim/vim/src/vim.h	/^typedef struct _stat64 stat_T;$/;"	t	typeref:struct:_stat64
stat_T	vim/vim/src/vim.h	/^typedef struct stat stat_T;$/;"	t	typeref:struct:stat
stat_symlink_aware	vim/vim/src/os_mswin.c	/^stat_symlink_aware(const char *name, stat_T *stp)$/;"	f	file:	signature:(const char *name, stat_T *stp)
state	vim/vim/src/gui_beval.h	/^    unsigned int	state;		\/* Button\/Modifier key state *\/$/;"	m	struct:BalloonEvalStruct	access:public
state	vim/vim/src/libvterm/src/screen.c	/^  VTermState *state;$/;"	m	struct:VTermScreen	file:	access:public
state	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTermState *state;$/;"	m	struct:VTerm	access:public
state	vim/vim/src/libvterm/t/harness.c	/^static VTermState *state;$/;"	v	file:
state	vim/vim/src/regexp.h	/^    nfa_state_T		state[1];	\/* actually longer.. *\/$/;"	m	struct:__anon144	access:public
state	vim/vim/src/regexp_nfa.c	/^    nfa_state_T	*state;		\/* the invisible match start state *\/$/;"	m	struct:nfa_pim_S	file:	access:public
state	vim/vim/src/regexp_nfa.c	/^    nfa_state_T	*state;$/;"	m	struct:__anon120	file:	access:public
state	vim/vim/src/structs.h	/^  UINT32_T state[8];$/;"	m	struct:__anon209	access:public
state	vim/vim/src/vim.h	/^    short_u	state;		\/* Current selection state *\/$/;"	m	struct:VimClipboard	access:public
state_T	vim/vim/src/spell.c	/^} state_T;$/;"	t	typeref:enum:__anon81	file:
state_cbs	vim/vim/src/libvterm/src/screen.c	/^static VTermStateCallbacks state_cbs = {$/;"	v	file:
state_cbs	vim/vim/src/libvterm/t/harness.c	/^VTermStateCallbacks state_cbs = {$/;"	v
state_erase	vim/vim/src/libvterm/t/harness.c	/^static int state_erase(VTermRect rect, int selective, void *user)$/;"	f	file:	signature:(VTermRect rect, int selective, void *user)
state_in_list	vim/vim/src/regexp_nfa.c	/^state_in_list($/;"	f	file:	signature:( nfa_list_T *l, nfa_state_T *state, regsubs_T *subs)
state_in_list	vim/vim/src/regexp_nfa.c	/^static int state_in_list(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs);$/;"	p	file:	signature:(nfa_list_T *l, nfa_state_T *state, regsubs_T *subs)
state_item	vim/vim/src/syntax.c	/^typedef struct state_item$/;"	s	file:
state_item::si_attr	vim/vim/src/syntax.c	/^    int		si_attr;		\/* attributes in this state *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_cchar	vim/vim/src/syntax.c	/^    int		si_cchar;		\/* substitution character for conceal *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_cont_list	vim/vim/src/syntax.c	/^    short	*si_cont_list;		\/* list of contained groups *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_end_idx	vim/vim/src/syntax.c	/^    int		si_end_idx;		\/* group ID for end pattern or zero *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_ends	vim/vim/src/syntax.c	/^    int		si_ends;		\/* if match ends before si_m_endpos *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_eoe_pos	vim/vim/src/syntax.c	/^    lpos_T	si_eoe_pos;		\/* end position of end pattern *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_extmatch	vim/vim/src/syntax.c	/^    reg_extmatch_T *si_extmatch;	\/* \\z(...\\) matches from start$/;"	m	struct:state_item	file:	access:public
state_item::si_flags	vim/vim/src/syntax.c	/^    long	si_flags;		\/* HL_HAS_EOL flag in this state, and$/;"	m	struct:state_item	file:	access:public
state_item::si_h_endpos	vim/vim/src/syntax.c	/^    lpos_T	si_h_endpos;		\/* end position of the highlighting *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_h_startpos	vim/vim/src/syntax.c	/^    lpos_T	si_h_startpos;		\/* start position of the highlighting *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_id	vim/vim/src/syntax.c	/^    int		si_id;			\/* highlight group ID for keywords *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_idx	vim/vim/src/syntax.c	/^    int		si_idx;			\/* index of syntax pattern or$/;"	m	struct:state_item	file:	access:public
state_item::si_m_endpos	vim/vim/src/syntax.c	/^    lpos_T	si_m_endpos;		\/* just after end posn of the match *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_m_lnum	vim/vim/src/syntax.c	/^    int		si_m_lnum;		\/* lnum of the match *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_m_startcol	vim/vim/src/syntax.c	/^    int		si_m_startcol;		\/* starting column of the match *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_next_list	vim/vim/src/syntax.c	/^    short	*si_next_list;		\/* nextgroup IDs after this item ends *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_seqnr	vim/vim/src/syntax.c	/^    int		si_seqnr;		\/* sequence number *\/$/;"	m	struct:state_item	file:	access:public
state_item::si_trans_id	vim/vim/src/syntax.c	/^    int		si_trans_id;		\/* idem, transparency removed *\/$/;"	m	struct:state_item	file:	access:public
state_pen	vim/vim/src/libvterm/t/harness.c	/^} state_pen;$/;"	v	typeref:struct:__anon42	file:
state_pos	vim/vim/src/libvterm/t/harness.c	/^static VTermPos state_pos;$/;"	v	file:
state_ptr	vim/vim/src/regexp_nfa.c	/^static nfa_state_T	*state_ptr; \/* points to nfa_prog->state *\/$/;"	v	file:
state_putglyph	vim/vim/src/libvterm/t/harness.c	/^static int state_putglyph(VTermGlyphInfo *info, VTermPos pos, void *user)$/;"	f	file:	signature:(VTermGlyphInfo *info, VTermPos pos, void *user)
state_setlineinfo	vim/vim/src/libvterm/t/harness.c	/^static int state_setlineinfo(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user)$/;"	f	file:	signature:(int row, const VTermLineInfo *newinfo, const VTermLineInfo *oldinfo, void *user)
state_setpenattr	vim/vim/src/libvterm/t/harness.c	/^static int state_setpenattr(VTermAttr attr, VTermValue *val, void *user)$/;"	f	file:	signature:(VTermAttr attr, VTermValue *val, void *user)
stateitem_T	vim/vim/src/syntax.c	/^} stateitem_T;$/;"	t	typeref:struct:state_item	file:
static	vim/vim/src/gui_gtk_x11.c	2768;"	d	file:
static	vim/vim/src/gui_gtk_x11.c	2778;"	d	file:
staticList10_T	vim/vim/src/structs.h	/^} staticList10_T;$/;"	t	typeref:struct:__anon186
status_area_enabled	vim/vim/src/mbyte.c	/^static int	status_area_enabled = TRUE;$/;"	v	file:
status_height	vim/vim/src/gui.h	/^    int		status_height;	\/* Height of status line *\/$/;"	m	struct:GuiScrollbar	access:public
status_match_len	vim/vim/src/screen.c	/^static int status_match_len(expand_T *xp, char_u *s);$/;"	p	file:	signature:(expand_T *xp, char_u *s)
status_match_len	vim/vim/src/screen.c	/^status_match_len(expand_T *xp, char_u *s)$/;"	f	file:	signature:(expand_T *xp, char_u *s)
status_redraw_all	vim/vim/src/screen.c	/^status_redraw_all(void)$/;"	f	signature:(void)
status_redraw_curbuf	vim/vim/src/screen.c	/^status_redraw_curbuf(void)$/;"	f	signature:(void)
stdout_isatty	vim/vim/src/globals.h	/^EXTERN int	stdout_isatty INIT(= TRUE);	\/* is stdout a terminal? *\/$/;"	v
step	vim/vim/src/mbyte.c	/^    int step;$/;"	m	struct:__anon3	file:	access:public
stipple_bitmap	vim/vim/src/gui_xmebwp.h	/^    Pixmap stipple_bitmap;$/;"	m	struct:_XmEnhancedButtonClassPart	access:public
stipple_bits	vim/vim/src/gui_xmebw.c	/^static char stipple_bits[] = { 0x0a, 0x05, 0x0a, 0x05 };$/;"	v	file:
stipple_height	vim/vim/src/gui_xmebw.c	106;"	d	file:
stipple_width	vim/vim/src/gui_xmebw.c	105;"	d	file:
stl_connected	vim/vim/src/screen.c	/^stl_connected(win_T *wp)$/;"	f	signature:(win_T *wp)
stl_hlrec	vim/vim/src/structs.h	/^struct stl_hlrec$/;"	s
stl_hlrec::start	vim/vim/src/structs.h	/^    char_u	*start;$/;"	m	struct:stl_hlrec	access:public
stl_hlrec::userhl	vim/vim/src/structs.h	/^    int		userhl;		\/* 0: no HL, 1-9: User HL, < 0 for syn ID *\/$/;"	m	struct:stl_hlrec	access:public
stl_syntax	vim/vim/src/globals.h	/^EXTERN int      stl_syntax INIT(= 0);$/;"	v
stock_vim_build_tags	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_build_tags[] =$/;"	v
stock_vim_find_help	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_find_help[] =$/;"	v
stock_vim_icons	vim/vim/src/gui_gtk.c	/^static IconNames stock_vim_icons[] = {$/;"	v	file:
stock_vim_save_all	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_save_all[] =$/;"	v
stock_vim_session_load	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_session_load[] =$/;"	v
stock_vim_session_new	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_session_new[] =$/;"	v
stock_vim_session_save	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_session_save[] =$/;"	v
stock_vim_shell	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_shell[] =$/;"	v
stock_vim_window_maximize	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_window_maximize[] =$/;"	v
stock_vim_window_maximize_width	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_window_maximize_width[] =$/;"	v
stock_vim_window_minimize	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_window_minimize[] =$/;"	v
stock_vim_window_minimize_width	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_window_minimize_width[] =$/;"	v
stock_vim_window_split	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_window_split[] =$/;"	v
stock_vim_window_split_vertical	vim/vim/pixmaps/stock_icons.h	/^static const guint8 stock_vim_window_split_vertical[] =$/;"	v
stoggle_callback	vim/vim/src/gui_xmdlg.c	/^stoggle_callback(Widget w UNUSED,$/;"	f	file:	signature:(Widget w UNUSED, SharedFontSelData *data, XmToggleButtonCallbackStruct *call_data)
stop	vim/vim/src/structs.h	/^	    char_u	    *stop;	\/* stop escape sequence *\/$/;"	m	struct:attr_entry::__anon175::__anon176	access:public
stop_all_timers	vim/vim/src/ex_cmds2.c	/^stop_all_timers(void)$/;"	f	signature:(void)
stop_arrow	vim/vim/src/edit.c	/^stop_arrow(void)$/;"	f	signature:(void)
stop_insert	vim/vim/src/edit.c	/^static void stop_insert(pos_T *end_insert_pos, int esc, int nomove);$/;"	p	file:	signature:(pos_T *end_insert_pos, int esc, int nomove)
stop_insert	vim/vim/src/edit.c	/^stop_insert($/;"	f	file:	signature:( pos_T *end_insert_pos, int esc, int nomove)
stop_insert_mode	vim/vim/src/globals.h	/^EXTERN int	stop_insert_mode;	\/* for ":stopinsert" and 'insertmode' *\/$/;"	v
stop_redo_ins	vim/vim/src/getchar.c	/^stop_redo_ins(void)$/;"	f	signature:(void)
stop_timer	vim/vim/src/ex_cmds2.c	/^stop_timer(timer_T *timer)$/;"	f	signature:(timer_T *timer)
stop_xterm_trace	vim/vim/src/os_unix.c	/^stop_xterm_trace(void)$/;"	f	signature:(void)
stoptermcap	vim/vim/src/term.c	/^stoptermcap(void)$/;"	f	signature:(void)
store_aff_word	vim/vim/src/spellfile.c	/^static int store_aff_word(spellinfo_T *spin, char_u *word, char_u *afflist, afffile_T *affile, hashtab_T *ht, hashtab_T *xht, int condit, int flags, char_u *pfxlist, int pfxlen);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *word, char_u *afflist, afffile_T *affile, hashtab_T *ht, hashtab_T *xht, int condit, int flags, char_u *pfxlist, int pfxlen)
store_aff_word	vim/vim/src/spellfile.c	/^store_aff_word($/;"	f	file:	signature:( spellinfo_T *spin, char_u *word, char_u *afflist, afffile_T *affile, hashtab_T *ht, hashtab_T *xht, int condit, int flags, char_u *pfxlist, int pfxlen)
store_current_state	vim/vim/src/syntax.c	/^static synstate_T *store_current_state(void);$/;"	p	file:	signature:(void)
store_current_state	vim/vim/src/syntax.c	/^store_current_state(void)$/;"	f	file:	signature:(void)
store_loop_line	vim/vim/src/ex_docmd.c	/^static int	store_loop_line(garray_T *gap, char_u *line);$/;"	p	file:	signature:(garray_T *gap, char_u *line)
store_loop_line	vim/vim/src/ex_docmd.c	/^store_loop_line(garray_T *gap, char_u *line)$/;"	f	file:	signature:(garray_T *gap, char_u *line)
store_sb_text	vim/vim/src/message.c	/^static void store_sb_text(char_u **sb_str, char_u *s, int attr, int *sb_col, int finish);$/;"	p	file:	signature:(char_u **sb_str, char_u *s, int attr, int *sb_col, int finish)
store_sb_text	vim/vim/src/message.c	/^store_sb_text($/;"	f	file:	signature:( char_u **sb_str, char_u *s, int attr, int *sb_col, int finish)
store_session_globals	vim/vim/src/eval.c	/^store_session_globals(FILE *fd)$/;"	f	signature:(FILE *fd)
store_word	vim/vim/src/spellfile.c	/^static int store_word(spellinfo_T *spin, char_u *word, int flags, int region, char_u *pfxlist, int need_affix);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *word, int flags, int region, char_u *pfxlist, int need_affix)
store_word	vim/vim/src/spellfile.c	/^store_word($/;"	f	file:	signature:( spellinfo_T *spin, char_u *word, int flags, int region, char_u *pfxlist, int need_affix)
stp_sal_score	vim/vim/src/spell.c	/^static int stp_sal_score(suggest_T *stp, suginfo_T *su, slang_T *slang, char_u *badsound);$/;"	p	file:	signature:(suggest_T *stp, suginfo_T *su, slang_T *slang, char_u *badsound)
stp_sal_score	vim/vim/src/spell.c	/^stp_sal_score($/;"	f	file:	signature:( suggest_T *stp, suginfo_T *su, slang_T *slang, char_u *badsound)
str2special	vim/vim/src/message.c	/^str2special($/;"	f	signature:( char_u **sp, int from)
str2special_save	vim/vim/src/message.c	/^str2special_save($/;"	f	signature:( char_u *str, int is_lhs)
str2specialbuf	vim/vim/src/message.c	/^str2specialbuf(char_u *sp, char_u *buf, int len)$/;"	f	signature:(char_u *sp, char_u *buf, int len)
str_equal	vim/vim/src/spellfile.c	/^static int str_equal(char_u *s1, char_u	*s2);$/;"	p	file:	signature:(char_u *s1, char_u *s2)
str_equal	vim/vim/src/spellfile.c	/^str_equal(char_u *s1, char_u *s2)$/;"	f	file:	signature:(char_u *s1, char_u *s2)
str_foldcase	vim/vim/src/charset.c	/^str_foldcase($/;"	f	signature:( char_u *str, int orglen, char_u *buf, int buflen)
str_to_reg	vim/vim/src/ops.c	/^static void	str_to_reg(yankreg_T *y_ptr, int yank_type, char_u *str, long len, long blocklen, int str_list);$/;"	p	file:	signature:(yankreg_T *y_ptr, int yank_type, char_u *str, long len, long blocklen, int str_list)
str_to_reg	vim/vim/src/ops.c	/^str_to_reg($/;"	f	file:	signature:( yankreg_T *y_ptr, int yank_type, char_u *str, long len, long blocklen, int str_list)
strbuffer	vim/vim/src/libvterm/src/vterm_internal.h	/^  char  *strbuffer;$/;"	m	struct:VTerm	access:public
strbuffer_cur	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t strbuffer_cur;$/;"	m	struct:VTerm	access:public
strbuffer_len	vim/vim/src/libvterm/src/vterm_internal.h	/^  size_t strbuffer_len;$/;"	m	struct:VTerm	access:public
streq	vim/vim/src/libvterm/bin/unterm.c	14;"	d	file:
streq	vim/vim/src/libvterm/bin/vterm-ctrl.c	6;"	d	file:
streq	vim/vim/src/libvterm/bin/vterm-dump.c	6;"	d	file:
streq	vim/vim/src/libvterm/t/harness.c	7;"	d	file:
streq	vim/vim/src/netbeans.c	974;"	d	file:
strerror	vim/vim/src/os_unix.c	/^static char *strerror(int);$/;"	p	file:	signature:(int)
strerror	vim/vim/src/os_unix.c	/^strerror(int err)$/;"	f	file:	signature:(int err)
strerror_win32	vim/vim/src/channel.c	/^strerror_win32(int eno)$/;"	f	file:	signature:(int eno)
strike	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int strike    : 1;$/;"	m	struct:__anon61	access:public
strike	vim/vim/src/libvterm/src/screen.c	/^  unsigned int strike    : 1;$/;"	m	struct:__anon29	file:	access:public
strike	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int strike:1;$/;"	m	struct:VTermPen	access:public
strike	vim/vim/src/libvterm/t/harness.c	/^  int strike;$/;"	m	struct:__anon42	file:	access:public
string	vim/vim/src/hardcopy.c	/^    char	*string;$/;"	m	struct:prt_dsc_comment_S	file:	access:public
string	vim/vim/src/hardcopy.c	/^    char_u	*string;$/;"	m	struct:prt_dsc_line_S	file:	access:public
string	vim/vim/src/libvterm/include/vterm.h	/^  char *string;$/;"	m	union:__anon51	access:public
string	vim/vim/src/os_vms.c	/^    ITEM	string;$/;"	m	struct:__anon28	file:	access:public
string	vim/vim/src/structs.h	/^    char_u	*string;	\/* points into option string *\/$/;"	m	struct:__anon204	access:public
string	vim/vim/src/xpm/include/xpm.h	/^    char *string;		\/* characters string *\/$/;"	m	struct:__anon90	access:public
string2float	vim/vim/src/eval.c	/^string2float($/;"	f	signature:( char_u *text, float_T *value)
string_convert	vim/vim/src/mbyte.c	/^string_convert($/;"	f	signature:( vimconv_T *vcp, char_u *ptr, int *lenp)
string_convert_ext	vim/vim/src/mbyte.c	/^string_convert_ext($/;"	f	signature:( vimconv_T *vcp, char_u *ptr, int *lenp, int *unconvlenp)
string_quote	vim/vim/src/eval.c	/^string_quote(char_u *str, int function)$/;"	f	signature:(char_u *str, int function)
string_to_key	vim/vim/src/option.c	/^string_to_key(char_u *arg, int multi_byte)$/;"	f	signature:(char_u *arg, int multi_byte)
string_to_line	vim/vim/src/if_mzsch.c	/^static char *string_to_line(Scheme_Object *obj);$/;"	p	file:	signature:(Scheme_Object *obj)
string_to_line	vim/vim/src/if_mzsch.c	/^string_to_line(Scheme_Object *obj)$/;"	f	file:	signature:(Scheme_Object *obj)
strings	vim/vim/src/if_xcmdsrv.c	/^    garray_T strings;$/;"	m	struct:ServerReply	file:	access:public
strings	vim/vim/src/structs.h	/^    char_u	*strings[MENU_MODES]; \/* Mapped string for each mode *\/$/;"	m	struct:VimMenu	access:public
strlen	vim/vim/src/structs.h	/^    int		strlen;$/;"	m	struct:__anon204	access:public
strlow_save	vim/vim/src/misc2.c	/^strlow_save(char_u *orig)$/;"	f	signature:(char_u *orig)
strneq	vim/vim/src/libvterm/src/state.c	6;"	d	file:
strp_key	vim/vim/src/libvterm/t/harness.c	/^static VTermKey strp_key(char *str)$/;"	f	file:	signature:(char *str)
strpe_modifiers	vim/vim/src/libvterm/t/harness.c	/^static VTermModifier strpe_modifiers(char **strp)$/;"	f	file:	signature:(char **strp)
strstartswith	vim/vim/src/libvterm/t/harness.c	8;"	d	file:
strtol	vim/vim/src/xxd/xxd.c	/^extern long int strtol();$/;"	p	file:
struct_bf_test_data	vim/vim/src/blowfish.c	/^} struct_bf_test_data;$/;"	t	typeref:struct:__anon73	file:
strup_save	vim/vim/src/misc2.c	/^strup_save(char_u *orig)$/;"	f	signature:(char_u *orig)
stub_GetFileInformationByHandleEx	vim/vim/src/iscygpty.c	/^static BOOL WINAPI stub_GetFileInformationByHandleEx($/;"	f	file:	signature:( HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize )
stubs_initialized	vim/vim/src/if_tcl.c	/^static int stubs_initialized = FALSE;$/;"	v	file:
stuffReadbuff	vim/vim/src/getchar.c	/^stuffReadbuff(char_u *s)$/;"	f	signature:(char_u *s)
stuffReadbuffLen	vim/vim/src/getchar.c	/^stuffReadbuffLen(char_u *s, long len)$/;"	f	signature:(char_u *s, long len)
stuffReadbuffSpec	vim/vim/src/getchar.c	/^stuffReadbuffSpec(char_u *s)$/;"	f	signature:(char_u *s)
stuffRedoReadbuff	vim/vim/src/getchar.c	/^stuffRedoReadbuff(char_u *s)$/;"	f	signature:(char_u *s)
stuff_empty	vim/vim/src/getchar.c	/^stuff_empty(void)$/;"	f	signature:(void)
stuff_inserted	vim/vim/src/edit.c	/^stuff_inserted($/;"	f	signature:( int c, long count, int no_esc)
stuff_yank	vim/vim/src/ops.c	/^static int	stuff_yank(int, char_u *);$/;"	p	file:	signature:(int, char_u *)
stuff_yank	vim/vim/src/ops.c	/^stuff_yank(int regname, char_u *p)$/;"	f	file:	signature:(int regname, char_u *p)
stuffcharReadbuff	vim/vim/src/getchar.c	/^stuffcharReadbuff(int c)$/;"	f	signature:(int c)
stuffescaped	vim/vim/src/ops.c	/^static void	stuffescaped(char_u *arg, int literally);$/;"	p	file:	signature:(char_u *arg, int literally)
stuffescaped	vim/vim/src/ops.c	/^stuffescaped(char_u *arg, int literally)$/;"	f	file:	signature:(char_u *arg, int literally)
stuffnumReadbuff	vim/vim/src/getchar.c	/^stuffnumReadbuff(long n)$/;"	f	signature:(long n)
style	vim/vim/src/gui_mac.c	/^    FMFontStyle style;$/;"	m	struct:__anon223	file:	access:public
style_callback	vim/vim/src/gui_xmdlg.c	/^style_callback(Widget w,$/;"	f	file:	signature:(Widget w, SharedFontSelData *data, XmListCallbackStruct *call_data)
style_part	vim/vim/src/gui_xmdlg.c	/^style_part(char *font, char *buf)$/;"	f	file:	signature:(char *font, char *buf)
su_badflags	vim/vim/src/spell.c	/^    int		su_badflags;	    \/* caps flags for bad word *\/$/;"	m	struct:suginfo_S	file:	access:public
su_badlen	vim/vim/src/spell.c	/^    int		su_badlen;	    \/* length of detected bad word in line *\/$/;"	m	struct:suginfo_S	file:	access:public
su_badptr	vim/vim/src/spell.c	/^    char_u	*su_badptr;	    \/* start of bad word in line *\/$/;"	m	struct:suginfo_S	file:	access:public
su_badword	vim/vim/src/spell.c	/^    char_u	su_badword[MAXWLEN]; \/* bad word truncated at su_badlen *\/$/;"	m	struct:suginfo_S	file:	access:public
su_banned	vim/vim/src/spell.c	/^    hashtab_T	su_banned;	    \/* table with banned words *\/$/;"	m	struct:suginfo_S	file:	access:public
su_fbadword	vim/vim/src/spell.c	/^    char_u	su_fbadword[MAXWLEN]; \/* su_badword case-folded *\/$/;"	m	struct:suginfo_S	file:	access:public
su_ga	vim/vim/src/spell.c	/^    garray_T	su_ga;		    \/* suggestions, contains "suggest_T" *\/$/;"	m	struct:suginfo_S	file:	access:public
su_maxcount	vim/vim/src/spell.c	/^    int		su_maxcount;	    \/* max. number of suggestions displayed *\/$/;"	m	struct:suginfo_S	file:	access:public
su_maxscore	vim/vim/src/spell.c	/^    int		su_maxscore;	    \/* maximum score for adding to su_ga *\/$/;"	m	struct:suginfo_S	file:	access:public
su_sal_badword	vim/vim/src/spell.c	/^    char_u	su_sal_badword[MAXWLEN]; \/* su_badword soundfolded *\/$/;"	m	struct:suginfo_S	file:	access:public
su_sallang	vim/vim/src/spell.c	/^    slang_T	*su_sallang;	    \/* default language for sound folding *\/$/;"	m	struct:suginfo_S	file:	access:public
su_sfmaxscore	vim/vim/src/spell.c	/^    int		su_sfmaxscore;	    \/* idem, for when doing soundfold words *\/$/;"	m	struct:suginfo_S	file:	access:public
su_sga	vim/vim/src/spell.c	/^    garray_T	su_sga;		    \/* like su_ga, sound-folded scoring *\/$/;"	m	struct:suginfo_S	file:	access:public
sub_equal	vim/vim/src/regexp_nfa.c	/^static int sub_equal(regsub_T *sub1, regsub_T *sub2);$/;"	p	file:	signature:(regsub_T *sub1, regsub_T *sub2)
sub_equal	vim/vim/src/regexp_nfa.c	/^sub_equal(regsub_T *sub1, regsub_T *sub2)$/;"	f	file:	signature:(regsub_T *sub1, regsub_T *sub2)
sub_logfont	vim/vim/src/gui_w32.c	/^static LOGFONT sub_logfont;$/;"	v	file:
sub_nlines	vim/vim/src/globals.h	/^EXTERN linenr_T	sub_nlines;	\/* total number of lines changed *\/$/;"	v
sub_nsubs	vim/vim/src/globals.h	/^EXTERN long	sub_nsubs;	\/* total number of substitutions *\/$/;"	v
sub_process_writer	vim/vim/src/os_win32.c	/^sub_process_writer(LPVOID param)$/;"	f	file:	signature:(LPVOID param)
subcommand	vim/vim/src/syntax.c	/^struct subcommand$/;"	s	file:
subcommand::func	vim/vim/src/syntax.c	/^    void    (*func)(exarg_T *, int);	\/* function to call *\/$/;"	m	struct:subcommand	file:	access:public
subcommand::name	vim/vim/src/syntax.c	/^    char    *name;			\/* subcommand name *\/$/;"	m	struct:subcommand	file:	access:public
subcommands	vim/vim/src/syntax.c	/^static struct subcommand subcommands[] =$/;"	v	typeref:struct:subcommand	file:
subflags_T	vim/vim/src/ex_cmds.c	/^} subflags_T;$/;"	t	typeref:struct:__anon218	file:
submenu_change	vim/vim/src/gui_motif.c	/^static void submenu_change(vimmenu_T *mp, int colors);$/;"	p	file:	signature:(vimmenu_T *mp, int colors)
submenu_change	vim/vim/src/gui_motif.c	/^submenu_change($/;"	f	file:	signature:( vimmenu_T *menu, int colors)
submenu_handle	vim/vim/src/structs.h	/^    MenuHandle	submenu_handle;$/;"	m	struct:VimMenu	access:public
submenu_id	vim/vim/src/structs.h	/^    GtkWidget	*submenu_id;	    \/* If this is submenu, add children here *\/$/;"	m	struct:VimMenu	access:public
submenu_id	vim/vim/src/structs.h	/^    HMENU	submenu_id;	    \/* If this is submenu, add children here *\/$/;"	m	struct:VimMenu	access:public
submenu_id	vim/vim/src/structs.h	/^    PtWidget_t	*submenu_id;$/;"	m	struct:VimMenu	access:public
submenu_id	vim/vim/src/structs.h	/^    Widget	submenu_id;	    \/* If this is submenu, add children here *\/$/;"	m	struct:VimMenu	access:public
submenu_id	vim/vim/src/structs.h	/^    short	submenu_id;	    \/* the menu id of the children (could be$/;"	m	struct:VimMenu	access:public
submenu_widget	vim/vim/src/gui_athena.c	/^static Widget	submenu_widget(Widget);$/;"	p	file:
submenu_widget	vim/vim/src/gui_athena.c	/^submenu_widget(Widget widget)$/;"	f	file:	signature:(Widget widget)
subs	vim/vim/src/regexp_nfa.c	/^    regsubs_T	subs;		\/* submatch info, only party used *\/$/;"	m	struct:__anon120	file:	access:public
subs	vim/vim/src/regexp_nfa.c	/^    regsubs_T	subs;		\/* submatch info, only party used *\/$/;"	m	struct:nfa_pim_S	file:	access:public
sug_compare	vim/vim/src/spell.c	/^sug_compare(const void *s1, const void *s2)$/;"	f	file:	signature:(const void *s1, const void *s2)
sug_compare	vim/vim/src/spell.c	/^sug_compare(const void *s1, const void *s2);$/;"	p	file:	signature:(const void *s1, const void *s2)
sug_filltable	vim/vim/src/spellfile.c	/^static int sug_filltable(spellinfo_T *spin, wordnode_T *node, int startwordnr, garray_T *gap);$/;"	p	file:	signature:(spellinfo_T *spin, wordnode_T *node, int startwordnr, garray_T *gap)
sug_filltable	vim/vim/src/spellfile.c	/^sug_filltable($/;"	f	file:	signature:( spellinfo_T *spin, wordnode_T *node, int startwordnr, garray_T *gap)
sug_filltree	vim/vim/src/spellfile.c	/^static int sug_filltree(spellinfo_T *spin, slang_T *slang);$/;"	p	file:	signature:(spellinfo_T *spin, slang_T *slang)
sug_filltree	vim/vim/src/spellfile.c	/^sug_filltree(spellinfo_T *spin, slang_T *slang)$/;"	f	file:	signature:(spellinfo_T *spin, slang_T *slang)
sug_maketable	vim/vim/src/spellfile.c	/^static int sug_maketable(spellinfo_T *spin);$/;"	p	file:	signature:(spellinfo_T *spin)
sug_maketable	vim/vim/src/spellfile.c	/^sug_maketable(spellinfo_T *spin)$/;"	f	file:	signature:(spellinfo_T *spin)
sug_write	vim/vim/src/spellfile.c	/^static void sug_write(spellinfo_T *spin, char_u *fname);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *fname)
sug_write	vim/vim/src/spellfile.c	/^sug_write(spellinfo_T *spin, char_u *fname)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *fname)
suggest_S	vim/vim/src/spell.c	/^typedef struct suggest_S$/;"	s	file:
suggest_S::st_altscore	vim/vim/src/spell.c	/^    int		st_altscore;	\/* used when st_score compares equal *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_had_bonus	vim/vim/src/spell.c	/^    int		st_had_bonus;	\/* bonus already included in score *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_orglen	vim/vim/src/spell.c	/^    int		st_orglen;	\/* length of replaced text *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_salscore	vim/vim/src/spell.c	/^    int		st_salscore;	\/* st_score is for soundalike *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_score	vim/vim/src/spell.c	/^    int		st_score;	\/* lower is better *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_slang	vim/vim/src/spell.c	/^    slang_T	*st_slang;	\/* language used for sound folding *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_word	vim/vim/src/spell.c	/^    char_u	*st_word;	\/* suggested word, allocated string *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_S::st_wordlen	vim/vim/src/spell.c	/^    int		st_wordlen;	\/* STRLEN(st_word) *\/$/;"	m	struct:suggest_S	file:	access:public
suggest_T	vim/vim/src/spell.c	/^} suggest_T;$/;"	t	typeref:struct:suggest_S	file:
suggest_load_files	vim/vim/src/spellfile.c	/^suggest_load_files(void)$/;"	f	signature:(void)
suggest_trie_walk	vim/vim/src/spell.c	/^static void suggest_trie_walk(suginfo_T *su, langp_T *lp, char_u *fword, int soundfold);$/;"	p	file:	signature:(suginfo_T *su, langp_T *lp, char_u *fword, int soundfold)
suggest_trie_walk	vim/vim/src/spell.c	/^suggest_trie_walk($/;"	f	file:	signature:( suginfo_T *su, langp_T *lp, char_u *fword, int soundfold)
suggest_try_change	vim/vim/src/spell.c	/^static void suggest_try_change(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
suggest_try_change	vim/vim/src/spell.c	/^suggest_try_change(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
suggest_try_soundalike	vim/vim/src/spell.c	/^static void suggest_try_soundalike(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
suggest_try_soundalike	vim/vim/src/spell.c	/^suggest_try_soundalike(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
suggest_try_soundalike_finish	vim/vim/src/spell.c	/^static void suggest_try_soundalike_finish(void);$/;"	p	file:	signature:(void)
suggest_try_soundalike_finish	vim/vim/src/spell.c	/^suggest_try_soundalike_finish(void)$/;"	f	file:	signature:(void)
suggest_try_soundalike_prep	vim/vim/src/spell.c	/^static void suggest_try_soundalike_prep(void);$/;"	p	file:	signature:(void)
suggest_try_soundalike_prep	vim/vim/src/spell.c	/^suggest_try_soundalike_prep(void)$/;"	f	file:	signature:(void)
suggest_try_special	vim/vim/src/spell.c	/^static void suggest_try_special(suginfo_T *su);$/;"	p	file:	signature:(suginfo_T *su)
suggest_try_special	vim/vim/src/spell.c	/^suggest_try_special(suginfo_T *su)$/;"	f	file:	signature:(suginfo_T *su)
suginfo_S	vim/vim/src/spell.c	/^typedef struct suginfo_S$/;"	s	file:
suginfo_S::su_badflags	vim/vim/src/spell.c	/^    int		su_badflags;	    \/* caps flags for bad word *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_badlen	vim/vim/src/spell.c	/^    int		su_badlen;	    \/* length of detected bad word in line *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_badptr	vim/vim/src/spell.c	/^    char_u	*su_badptr;	    \/* start of bad word in line *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_badword	vim/vim/src/spell.c	/^    char_u	su_badword[MAXWLEN]; \/* bad word truncated at su_badlen *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_banned	vim/vim/src/spell.c	/^    hashtab_T	su_banned;	    \/* table with banned words *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_fbadword	vim/vim/src/spell.c	/^    char_u	su_fbadword[MAXWLEN]; \/* su_badword case-folded *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_ga	vim/vim/src/spell.c	/^    garray_T	su_ga;		    \/* suggestions, contains "suggest_T" *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_maxcount	vim/vim/src/spell.c	/^    int		su_maxcount;	    \/* max. number of suggestions displayed *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_maxscore	vim/vim/src/spell.c	/^    int		su_maxscore;	    \/* maximum score for adding to su_ga *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_sal_badword	vim/vim/src/spell.c	/^    char_u	su_sal_badword[MAXWLEN]; \/* su_badword soundfolded *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_sallang	vim/vim/src/spell.c	/^    slang_T	*su_sallang;	    \/* default language for sound folding *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_sfmaxscore	vim/vim/src/spell.c	/^    int		su_sfmaxscore;	    \/* idem, for when doing soundfold words *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_S::su_sga	vim/vim/src/spell.c	/^    garray_T	su_sga;		    \/* like su_ga, sound-folded scoring *\/$/;"	m	struct:suginfo_S	file:	access:public
suginfo_T	vim/vim/src/spell.c	/^} suginfo_T;$/;"	t	typeref:struct:suginfo_S	file:
supermenuTrans	vim/vim/src/gui_athena.c	/^static XtTranslations	popupTrans, parentTrans, menuTrans, supermenuTrans;$/;"	v	file:
suppress_alternate_input	vim/vim/src/globals.h	/^EXTERN int	suppress_alternate_input INIT(= FALSE);$/;"	v
suppress_dialog_mnemonics	vim/vim/src/gui_motif.c	/^suppress_dialog_mnemonics(Widget dialog)$/;"	f	file:	signature:(Widget dialog)
suppress_errthrow	vim/vim/src/globals.h	/^EXTERN int suppress_errthrow INIT(= FALSE);$/;"	v
suppress_winsize	vim/vim/src/os_win32.c	/^static int suppress_winsize = 1;	\/* don't fiddle with console *\/$/;"	v	file:
surface	vim/vim/src/gui.h	/^    cairo_surface_t *surface;       \/* drawarea surface *\/$/;"	m	struct:Gui	access:public
suspend_shell	vim/vim/src/ui.c	/^suspend_shell(void)$/;"	f	signature:(void)
sv_dict	vim/vim/src/eval.c	/^    dict_T	sv_dict;$/;"	m	struct:__anon75	file:	access:public
sv_var	vim/vim/src/eval.c	/^    dictitem_T	sv_var;$/;"	m	struct:__anon75	file:	access:public
swap_exists_action	vim/vim/src/globals.h	/^EXTERN int	swap_exists_action INIT(= SEA_NONE);$/;"	v
swap_exists_did_quit	vim/vim/src/globals.h	/^EXTERN int	swap_exists_did_quit INIT(= FALSE);$/;"	v
swap_me	vim/vim/src/os_mswin.c	/^swap_me(COLORREF colorref)$/;"	f	file:	signature:(COLORREF colorref)
swapchar	vim/vim/src/ops.c	/^swapchar(int op_type, pos_T *pos)$/;"	f	signature:(int op_type, pos_T *pos)
swapchars	vim/vim/src/ops.c	/^static int swapchars(int op_type, pos_T *pos, int length);$/;"	p	file:	signature:(int op_type, pos_T *pos, int length)
swapchars	vim/vim/src/ops.c	/^swapchars(int op_type, pos_T *pos, int length)$/;"	f	file:	signature:(int op_type, pos_T *pos, int length)
swapfile_info	vim/vim/src/memline.c	/^static time_t swapfile_info(char_u *);$/;"	p	file:	signature:(char_u *)
swapfile_info	vim/vim/src/memline.c	/^swapfile_info(char_u *fname)$/;"	f	file:	signature:(char_u *fname)
swapping_screen	vim/vim/src/term.c	/^swapping_screen(void)$/;"	f	signature:(void)
swb_flags	vim/vim/src/option.h	/^EXTERN unsigned	swb_flags;$/;"	v
switch_buffer	vim/vim/src/window.c	/^switch_buffer(bufref_T *save_curbuf, buf_T *buf)$/;"	f	signature:(bufref_T *save_curbuf, buf_T *buf)
switch_to_8bit	vim/vim/src/term.c	/^static void switch_to_8bit(void);$/;"	p	file:	signature:(void)
switch_to_8bit	vim/vim/src/term.c	/^switch_to_8bit(void)$/;"	f	file:	signature:(void)
switch_to_win_for_buf	vim/vim/src/if_py_both.h	/^switch_to_win_for_buf($/;"	f	signature:( buf_T *buf, win_T **save_curwinp, tabpage_T **save_curtabp, bufref_T *save_curbuf)
switch_win	vim/vim/src/window.c	/^switch_win($/;"	f	signature:( win_T **save_curwin UNUSED, tabpage_T **save_curtab UNUSED, win_T *win UNUSED, tabpage_T *tp UNUSED, int no_display UNUSED)
sy_chars	vim/vim/src/spell.c	/^    char_u	sy_chars[SY_MAXLEN];	    \/* the sequence of chars *\/$/;"	m	struct:syl_item_S	file:	access:public
sy_len	vim/vim/src/spell.c	/^    int		sy_len;$/;"	m	struct:syl_item_S	file:	access:public
syl_item_S	vim/vim/src/spell.c	/^typedef struct syl_item_S$/;"	s	file:
syl_item_S::sy_chars	vim/vim/src/spell.c	/^    char_u	sy_chars[SY_MAXLEN];	    \/* the sequence of chars *\/$/;"	m	struct:syl_item_S	file:	access:public
syl_item_S::sy_len	vim/vim/src/spell.c	/^    int		sy_len;$/;"	m	struct:syl_item_S	file:	access:public
syl_item_T	vim/vim/src/spell.c	/^} syl_item_T;$/;"	t	typeref:struct:syl_item_S	file:
symbol_from_dll	vim/vim/src/if_lua.c	75;"	d	file:
symbol_from_dll	vim/vim/src/if_lua.c	79;"	d	file:
symbol_from_dll	vim/vim/src/if_python.c	142;"	d	file:
symbol_from_dll	vim/vim/src/if_python.c	146;"	d	file:
symbol_from_dll	vim/vim/src/if_python3.c	134;"	d	file:
symbol_from_dll	vim/vim/src/if_python3.c	138;"	d	file:
symbol_from_dll	vim/vim/src/if_ruby.c	70;"	d	file:
symbol_from_dll	vim/vim/src/if_ruby.c	75;"	d	file:
symbol_from_dll	vim/vim/src/if_tcl.c	168;"	d	file:
symbol_from_dll	vim/vim/src/if_tcl.c	173;"	d	file:
symbolic	vim/vim/src/xpm/include/xpm.h	/^    char *symbolic;		\/* symbolic name *\/$/;"	m	struct:__anon90	access:public
syn_add_cluster	vim/vim/src/syntax.c	/^static int syn_add_cluster(char_u *name);$/;"	p	file:	signature:(char_u *name)
syn_add_cluster	vim/vim/src/syntax.c	/^syn_add_cluster(char_u *name)$/;"	f	file:	signature:(char_u *name)
syn_add_end_off	vim/vim/src/syntax.c	/^static void syn_add_end_off(lpos_T *result, regmmatch_T *regmatch, synpat_T *spp, int idx, int extra);$/;"	p	file:	signature:(lpos_T *result, regmmatch_T *regmatch, synpat_T *spp, int idx, int extra)
syn_add_end_off	vim/vim/src/syntax.c	/^syn_add_end_off($/;"	f	file:	signature:( lpos_T *result, regmmatch_T *regmatch, synpat_T *spp, int idx, int extra)
syn_add_group	vim/vim/src/syntax.c	/^static int syn_add_group(char_u *name);$/;"	p	file:	signature:(char_u *name)
syn_add_group	vim/vim/src/syntax.c	/^syn_add_group(char_u *name)$/;"	f	file:	signature:(char_u *name)
syn_add_start_off	vim/vim/src/syntax.c	/^static void syn_add_start_off(lpos_T *result, regmmatch_T *regmatch, synpat_T *spp, int idx, int extra);$/;"	p	file:	signature:(lpos_T *result, regmmatch_T *regmatch, synpat_T *spp, int idx, int extra)
syn_add_start_off	vim/vim/src/syntax.c	/^syn_add_start_off($/;"	f	file:	signature:( lpos_T *result, regmmatch_T *regmatch, synpat_T *spp, int idx, int extra)
syn_attr2attr	vim/vim/src/syntax.c	/^syn_attr2attr(int attr)$/;"	f	signature:(int attr)
syn_block	vim/vim/src/syntax.c	/^static synblock_T *syn_block;		\/* current buffer for highlighting *\/$/;"	v	file:
syn_buf	vim/vim/src/syntax.c	/^static buf_T	*syn_buf;		\/* current buffer for highlighting *\/$/;"	v	file:
syn_check_cluster	vim/vim/src/syntax.c	/^static int syn_check_cluster(char_u *pp, int len);$/;"	p	file:	signature:(char_u *pp, int len)
syn_check_cluster	vim/vim/src/syntax.c	/^syn_check_cluster(char_u *pp, int len)$/;"	f	file:	signature:(char_u *pp, int len)
syn_check_group	vim/vim/src/syntax.c	/^syn_check_group(char_u *pp, int len)$/;"	f	signature:(char_u *pp, int len)
syn_clear_cluster	vim/vim/src/syntax.c	/^static void syn_clear_cluster(synblock_T *block, int i);$/;"	p	file:	signature:(synblock_T *block, int i)
syn_clear_cluster	vim/vim/src/syntax.c	/^syn_clear_cluster(synblock_T *block, int i)$/;"	f	file:	signature:(synblock_T *block, int i)
syn_clear_keyword	vim/vim/src/syntax.c	/^static void syn_clear_keyword(int id, hashtab_T *ht);$/;"	p	file:	signature:(int id, hashtab_T *ht)
syn_clear_keyword	vim/vim/src/syntax.c	/^syn_clear_keyword(int id, hashtab_T *ht)$/;"	f	file:	signature:(int id, hashtab_T *ht)
syn_clear_one	vim/vim/src/syntax.c	/^static void syn_clear_one(int id, int syncing);$/;"	p	file:	signature:(int id, int syncing)
syn_clear_one	vim/vim/src/syntax.c	/^syn_clear_one(int id, int syncing)$/;"	f	file:	signature:(int id, int syncing)
syn_clear_pattern	vim/vim/src/syntax.c	/^static void syn_clear_pattern(synblock_T *block, int i);$/;"	p	file:	signature:(synblock_T *block, int i)
syn_clear_pattern	vim/vim/src/syntax.c	/^syn_clear_pattern(synblock_T *block, int i)$/;"	f	file:	signature:(synblock_T *block, int i)
syn_clear_time	vim/vim/src/syntax.c	/^static void syn_clear_time(syn_time_T *tt);$/;"	p	file:	signature:(syn_time_T *tt)
syn_clear_time	vim/vim/src/syntax.c	/^syn_clear_time(syn_time_T *st)$/;"	f	file:	signature:(syn_time_T *st)
syn_cluster_S	vim/vim/src/syntax.c	/^typedef struct syn_cluster_S$/;"	s	file:
syn_cluster_S::scl_list	vim/vim/src/syntax.c	/^    short	    *scl_list;	    \/* IDs in this syntax cluster *\/$/;"	m	struct:syn_cluster_S	file:	access:public
syn_cluster_S::scl_name	vim/vim/src/syntax.c	/^    char_u	    *scl_name;	    \/* syntax cluster name *\/$/;"	m	struct:syn_cluster_S	file:	access:public
syn_cluster_S::scl_name_u	vim/vim/src/syntax.c	/^    char_u	    *scl_name_u;    \/* uppercase of scl_name *\/$/;"	m	struct:syn_cluster_S	file:	access:public
syn_cluster_T	vim/vim/src/syntax.c	/^} syn_cluster_T;$/;"	t	typeref:struct:syn_cluster_S	file:
syn_cmd_case	vim/vim/src/syntax.c	/^static void syn_cmd_case(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_case	vim/vim/src/syntax.c	/^syn_cmd_case(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_clear	vim/vim/src/syntax.c	/^static void syn_cmd_clear(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_clear	vim/vim/src/syntax.c	/^syn_cmd_clear(exarg_T *eap, int syncing)$/;"	f	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_cluster	vim/vim/src/syntax.c	/^static void syn_cmd_cluster(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_cluster	vim/vim/src/syntax.c	/^syn_cmd_cluster(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_conceal	vim/vim/src/syntax.c	/^static void syn_cmd_conceal(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_conceal	vim/vim/src/syntax.c	/^syn_cmd_conceal(exarg_T *eap UNUSED, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap UNUSED, int syncing UNUSED)
syn_cmd_enable	vim/vim/src/syntax.c	/^static void syn_cmd_enable(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_enable	vim/vim/src/syntax.c	/^syn_cmd_enable(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_include	vim/vim/src/syntax.c	/^static void syn_cmd_include(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_include	vim/vim/src/syntax.c	/^syn_cmd_include(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_iskeyword	vim/vim/src/syntax.c	/^static void syn_cmd_iskeyword(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_iskeyword	vim/vim/src/syntax.c	/^syn_cmd_iskeyword(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_keyword	vim/vim/src/syntax.c	/^static void syn_cmd_keyword(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_keyword	vim/vim/src/syntax.c	/^syn_cmd_keyword(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_list	vim/vim/src/syntax.c	/^static void syn_cmd_list(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_list	vim/vim/src/syntax.c	/^syn_cmd_list($/;"	f	file:	signature:( exarg_T *eap, int syncing)
syn_cmd_manual	vim/vim/src/syntax.c	/^static void syn_cmd_manual(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_manual	vim/vim/src/syntax.c	/^syn_cmd_manual(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_match	vim/vim/src/syntax.c	/^static void syn_cmd_match(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_match	vim/vim/src/syntax.c	/^syn_cmd_match($/;"	f	file:	signature:( exarg_T *eap, int syncing)
syn_cmd_off	vim/vim/src/syntax.c	/^static void syn_cmd_off(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_off	vim/vim/src/syntax.c	/^syn_cmd_off(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_on	vim/vim/src/syntax.c	/^static void syn_cmd_on(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_on	vim/vim/src/syntax.c	/^syn_cmd_on(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_onoff	vim/vim/src/syntax.c	/^static void syn_cmd_onoff(exarg_T *eap, char *name);$/;"	p	file:	signature:(exarg_T *eap, char *name)
syn_cmd_onoff	vim/vim/src/syntax.c	/^syn_cmd_onoff(exarg_T *eap, char *name)$/;"	f	file:	signature:(exarg_T *eap, char *name)
syn_cmd_region	vim/vim/src/syntax.c	/^static void syn_cmd_region(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_region	vim/vim/src/syntax.c	/^syn_cmd_region($/;"	f	file:	signature:( exarg_T *eap, int syncing)
syn_cmd_reset	vim/vim/src/syntax.c	/^static void syn_cmd_reset(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_reset	vim/vim/src/syntax.c	/^syn_cmd_reset(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_spell	vim/vim/src/syntax.c	/^static void syn_cmd_spell(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_spell	vim/vim/src/syntax.c	/^syn_cmd_spell(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmd_sync	vim/vim/src/syntax.c	/^static void syn_cmd_sync(exarg_T *eap, int syncing);$/;"	p	file:	signature:(exarg_T *eap, int syncing)
syn_cmd_sync	vim/vim/src/syntax.c	/^syn_cmd_sync(exarg_T *eap, int syncing UNUSED)$/;"	f	file:	signature:(exarg_T *eap, int syncing UNUSED)
syn_cmdlinep	vim/vim/src/syntax.c	/^static char_u **syn_cmdlinep;$/;"	v	file:
syn_combine_list	vim/vim/src/syntax.c	/^static void syn_combine_list(short **clstr1, short **clstr2, int list_op);$/;"	p	file:	signature:(short **clstr1, short **clstr2, int list_op)
syn_combine_list	vim/vim/src/syntax.c	/^syn_combine_list(short **clstr1, short **clstr2, int list_op)$/;"	f	file:	signature:(short **clstr1, short **clstr2, int list_op)
syn_compare_stub	vim/vim/src/syntax.c	/^static int _RTLENTRYF syn_compare_stub(const void *v1, const void *v2);$/;"	p	file:	signature:(const void *v1, const void *v2)
syn_compare_stub	vim/vim/src/syntax.c	/^static int syn_compare_stub(const void *v1, const void *v2);$/;"	p	file:	signature:(const void *v1, const void *v2)
syn_compare_stub	vim/vim/src/syntax.c	/^syn_compare_stub(const void *v1, const void *v2)$/;"	f	file:	signature:(const void *v1, const void *v2)
syn_compare_syntime	vim/vim/src/syntax.c	/^static int _RTLENTRYF syn_compare_syntime(const void *v1, const void *v2);$/;"	p	file:	signature:(const void *v1, const void *v2)
syn_compare_syntime	vim/vim/src/syntax.c	/^static int syn_compare_syntime(const void *v1, const void *v2);$/;"	p	file:	signature:(const void *v1, const void *v2)
syn_compare_syntime	vim/vim/src/syntax.c	/^syn_compare_syntime(const void *v1, const void *v2)$/;"	f	file:	signature:(const void *v1, const void *v2)
syn_cterm_attr2entry	vim/vim/src/syntax.c	/^syn_cterm_attr2entry(int attr)$/;"	f	signature:(int attr)
syn_current_attr	vim/vim/src/syntax.c	/^static int syn_current_attr(int syncing, int displaying, int *can_spell, int keep_state);$/;"	p	file:	signature:(int syncing, int displaying, int *can_spell, int keep_state)
syn_current_attr	vim/vim/src/syntax.c	/^syn_current_attr($/;"	f	file:	signature:( int syncing, int displaying, int *can_spell, int keep_state)
syn_finish_line	vim/vim/src/syntax.c	/^static int syn_finish_line(int syncing);$/;"	p	file:	signature:(int syncing)
syn_finish_line	vim/vim/src/syntax.c	/^syn_finish_line($/;"	f	file:	signature:( int syncing)
syn_get_final_id	vim/vim/src/syntax.c	/^syn_get_final_id(int hl_id)$/;"	f	signature:(int hl_id)
syn_get_foldlevel	vim/vim/src/syntax.c	/^syn_get_foldlevel(win_T *wp, long lnum)$/;"	f	signature:(win_T *wp, long lnum)
syn_get_id	vim/vim/src/syntax.c	/^syn_get_id($/;"	f	signature:( win_T *wp, long lnum, colnr_T col, int trans, int *spellp, int keep_state)
syn_get_stack_item	vim/vim/src/syntax.c	/^syn_get_stack_item(int i)$/;"	f	signature:(int i)
syn_get_sub_char	vim/vim/src/syntax.c	/^syn_get_sub_char(void)$/;"	f	signature:(void)
syn_getcurline	vim/vim/src/syntax.c	/^static char_u *syn_getcurline(void);$/;"	p	file:	signature:(void)
syn_getcurline	vim/vim/src/syntax.c	/^syn_getcurline(void)$/;"	f	file:	signature:(void)
syn_gui_attr2entry	vim/vim/src/syntax.c	/^syn_gui_attr2entry(int attr)$/;"	f	signature:(int attr)
syn_id2attr	vim/vim/src/syntax.c	/^syn_id2attr(int hl_id)$/;"	f	signature:(int hl_id)
syn_id2colors	vim/vim/src/syntax.c	/^syn_id2colors(int hl_id, guicolor_T *fgp, guicolor_T *bgp)$/;"	f	signature:(int hl_id, guicolor_T *fgp, guicolor_T *bgp)
syn_id2name	vim/vim/src/syntax.c	/^syn_id2name(int id)$/;"	f	signature:(int id)
syn_incl_toplevel	vim/vim/src/syntax.c	/^static void syn_incl_toplevel(int id, int *flagsp);$/;"	p	file:	signature:(int id, int *flagsp)
syn_incl_toplevel	vim/vim/src/syntax.c	/^syn_incl_toplevel(int id, int *flagsp)$/;"	f	file:	signature:(int id, int *flagsp)
syn_lines_msg	vim/vim/src/syntax.c	/^static void syn_lines_msg(void);$/;"	p	file:	signature:(void)
syn_lines_msg	vim/vim/src/syntax.c	/^syn_lines_msg(void)$/;"	f	file:	signature:(void)
syn_list_cluster	vim/vim/src/syntax.c	/^static void syn_list_cluster(int id);$/;"	p	file:	signature:(int id)
syn_list_cluster	vim/vim/src/syntax.c	/^syn_list_cluster(int id)$/;"	f	file:	signature:(int id)
syn_list_flags	vim/vim/src/syntax.c	/^static void syn_list_flags(struct name_list *nl, int flags, int attr);$/;"	p	file:	signature:(struct name_list *nl, int flags, int attr)
syn_list_flags	vim/vim/src/syntax.c	/^syn_list_flags(struct name_list *nlist, int flags, int attr)$/;"	f	file:	signature:(struct name_list *nlist, int flags, int attr)
syn_list_header	vim/vim/src/syntax.c	/^static int syn_list_header(int did_header, int outlen, int id);$/;"	p	file:	signature:(int did_header, int outlen, int id)
syn_list_header	vim/vim/src/syntax.c	/^syn_list_header($/;"	f	file:	signature:( int did_header, int outlen, int id)
syn_list_keywords	vim/vim/src/syntax.c	/^static int syn_list_keywords(int id, hashtab_T *ht, int did_header, int attr);$/;"	p	file:	signature:(int id, hashtab_T *ht, int did_header, int attr)
syn_list_keywords	vim/vim/src/syntax.c	/^syn_list_keywords($/;"	f	file:	signature:( int id, hashtab_T *ht, int did_header, int attr)
syn_list_one	vim/vim/src/syntax.c	/^static void syn_list_one(int id, int syncing, int link_only);$/;"	p	file:	signature:(int id, int syncing, int link_only)
syn_list_one	vim/vim/src/syntax.c	/^syn_list_one($/;"	f	file:	signature:( int id, int syncing, int link_only)
syn_match_linecont	vim/vim/src/syntax.c	/^static int syn_match_linecont(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
syn_match_linecont	vim/vim/src/syntax.c	/^syn_match_linecont(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
syn_match_msg	vim/vim/src/syntax.c	/^static void syn_match_msg(void);$/;"	p	file:	signature:(void)
syn_match_msg	vim/vim/src/syntax.c	/^syn_match_msg(void)$/;"	f	file:	signature:(void)
syn_name2id	vim/vim/src/syntax.c	/^syn_name2id(char_u *name)$/;"	f	signature:(char_u *name)
syn_namen2id	vim/vim/src/syntax.c	/^syn_namen2id(char_u *linep, int len)$/;"	f	signature:(char_u *linep, int len)
syn_opt_arg_T	vim/vim/src/syntax.c	/^} syn_opt_arg_T;$/;"	t	typeref:struct:__anon137	file:
syn_pattern	vim/vim/src/syntax.c	/^typedef struct syn_pattern$/;"	s	file:
syn_pattern::sp_cchar	vim/vim/src/syntax.c	/^    int		 sp_cchar;		\/* conceal substitute character *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_cont_list	vim/vim/src/syntax.c	/^    short	*sp_cont_list;		\/* cont. group IDs, if non-zero *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_flags	vim/vim/src/syntax.c	/^    int		 sp_flags;		\/* see HL_ defines below *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_ic	vim/vim/src/syntax.c	/^    int		 sp_ic;			\/* ignore-case flag for sp_prog *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_line_id	vim/vim/src/syntax.c	/^    int		 sp_line_id;		\/* ID of last line where tried *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_next_list	vim/vim/src/syntax.c	/^    short	*sp_next_list;		\/* next group IDs, if non-zero *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_off_flags	vim/vim/src/syntax.c	/^    short	 sp_off_flags;		\/* see below *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_offsets	vim/vim/src/syntax.c	/^    int		 sp_offsets[SPO_COUNT];	\/* offsets *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_pattern	vim/vim/src/syntax.c	/^    char_u	*sp_pattern;		\/* regexp to match, pattern *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_prog	vim/vim/src/syntax.c	/^    regprog_T	*sp_prog;		\/* regexp to match, program *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_startcol	vim/vim/src/syntax.c	/^    int		 sp_startcol;		\/* next match in sp_line_id line *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_syn	vim/vim/src/syntax.c	/^    struct sp_syn sp_syn;		\/* struct passed to in_id_list() *\/$/;"	m	struct:syn_pattern	typeref:struct:syn_pattern::sp_syn	file:	access:public
syn_pattern::sp_syn_match_id	vim/vim/src/syntax.c	/^    short	 sp_syn_match_id;	\/* highlight group ID of pattern *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_sync_idx	vim/vim/src/syntax.c	/^    int		 sp_sync_idx;		\/* sync item index (syncing only) *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_syncing	vim/vim/src/syntax.c	/^    char	 sp_syncing;		\/* this item used for syncing *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_time	vim/vim/src/syntax.c	/^    syn_time_T	 sp_time;$/;"	m	struct:syn_pattern	file:	access:public
syn_pattern::sp_type	vim/vim/src/syntax.c	/^    char	 sp_type;		\/* see SPTYPE_ defines below *\/$/;"	m	struct:syn_pattern	file:	access:public
syn_regexec	vim/vim/src/syntax.c	/^static int syn_regexec(regmmatch_T *rmp, linenr_T lnum, colnr_T col, syn_time_T *st);$/;"	p	file:	signature:(regmmatch_T *rmp, linenr_T lnum, colnr_T col, syn_time_T *st)
syn_regexec	vim/vim/src/syntax.c	/^syn_regexec($/;"	f	file:	signature:( regmmatch_T *rmp, linenr_T lnum, colnr_T col, syn_time_T *st UNUSED)
syn_remove_pattern	vim/vim/src/syntax.c	/^static void syn_remove_pattern(synblock_T *block, int idx);$/;"	p	file:	signature:(synblock_T *block, int idx)
syn_remove_pattern	vim/vim/src/syntax.c	/^syn_remove_pattern($/;"	f	file:	signature:( synblock_T *block, int idx)
syn_scl_name2id	vim/vim/src/syntax.c	/^static int syn_scl_name2id(char_u *name);$/;"	p	file:	signature:(char_u *name)
syn_scl_name2id	vim/vim/src/syntax.c	/^syn_scl_name2id(char_u *name)$/;"	f	file:	signature:(char_u *name)
syn_scl_namen2id	vim/vim/src/syntax.c	/^static int syn_scl_namen2id(char_u *linep, int len);$/;"	p	file:	signature:(char_u *linep, int len)
syn_scl_namen2id	vim/vim/src/syntax.c	/^syn_scl_namen2id(char_u *linep, int len)$/;"	f	file:	signature:(char_u *linep, int len)
syn_stack_alloc	vim/vim/src/syntax.c	/^static void syn_stack_alloc(void);$/;"	p	file:	signature:(void)
syn_stack_alloc	vim/vim/src/syntax.c	/^syn_stack_alloc(void)$/;"	f	file:	signature:(void)
syn_stack_apply_changes	vim/vim/src/syntax.c	/^syn_stack_apply_changes(buf_T *buf)$/;"	f	signature:(buf_T *buf)
syn_stack_apply_changes_block	vim/vim/src/syntax.c	/^static void syn_stack_apply_changes_block(synblock_T *block, buf_T *buf);$/;"	p	file:	signature:(synblock_T *block, buf_T *buf)
syn_stack_apply_changes_block	vim/vim/src/syntax.c	/^syn_stack_apply_changes_block(synblock_T *block, buf_T *buf)$/;"	f	file:	signature:(synblock_T *block, buf_T *buf)
syn_stack_cleanup	vim/vim/src/syntax.c	/^static int syn_stack_cleanup(void);$/;"	p	file:	signature:(void)
syn_stack_cleanup	vim/vim/src/syntax.c	/^syn_stack_cleanup(void)$/;"	f	file:	signature:(void)
syn_stack_equal	vim/vim/src/syntax.c	/^static int syn_stack_equal(synstate_T *sp);$/;"	p	file:	signature:(synstate_T *sp)
syn_stack_equal	vim/vim/src/syntax.c	/^syn_stack_equal(synstate_T *sp)$/;"	f	file:	signature:(synstate_T *sp)
syn_stack_find_entry	vim/vim/src/syntax.c	/^static synstate_T *syn_stack_find_entry(linenr_T lnum);$/;"	p	file:	signature:(linenr_T lnum)
syn_stack_find_entry	vim/vim/src/syntax.c	/^syn_stack_find_entry(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
syn_stack_free_all	vim/vim/src/syntax.c	/^syn_stack_free_all(synblock_T *block)$/;"	f	signature:(synblock_T *block)
syn_stack_free_block	vim/vim/src/syntax.c	/^static void syn_stack_free_block(synblock_T *block);$/;"	p	file:	signature:(synblock_T *block)
syn_stack_free_block	vim/vim/src/syntax.c	/^syn_stack_free_block(synblock_T *block)$/;"	f	file:	signature:(synblock_T *block)
syn_stack_free_entry	vim/vim/src/syntax.c	/^static void syn_stack_free_entry(synblock_T *block, synstate_T *p);$/;"	p	file:	signature:(synblock_T *block, synstate_T *p)
syn_stack_free_entry	vim/vim/src/syntax.c	/^syn_stack_free_entry(synblock_T *block, synstate_T *p)$/;"	f	file:	signature:(synblock_T *block, synstate_T *p)
syn_start_line	vim/vim/src/syntax.c	/^static void syn_start_line(void);$/;"	p	file:	signature:(void)
syn_start_line	vim/vim/src/syntax.c	/^syn_start_line(void)$/;"	f	file:	signature:(void)
syn_state	vim/vim/src/structs.h	/^struct syn_state$/;"	s
syn_state::__anon174::sst_ga	vim/vim/src/structs.h	/^	garray_T	sst_ga;	\/* growarray for long state stack *\/$/;"	m	union:syn_state::__anon174	access:public
syn_state::__anon174::sst_stack	vim/vim/src/structs.h	/^	bufstate_T	sst_stack[SST_FIX_STATES]; \/* short state stack *\/$/;"	m	union:syn_state::__anon174	access:public
syn_state::sst_change_lnum	vim/vim/src/structs.h	/^    linenr_T	sst_change_lnum;\/* when non-zero, change in this line$/;"	m	struct:syn_state	access:public
syn_state::sst_lnum	vim/vim/src/structs.h	/^    linenr_T	sst_lnum;	\/* line number for this state *\/$/;"	m	struct:syn_state	access:public
syn_state::sst_next	vim/vim/src/structs.h	/^    synstate_T	*sst_next;	\/* next entry in used or free list *\/$/;"	m	struct:syn_state	access:public
syn_state::sst_next_flags	vim/vim/src/structs.h	/^    int		sst_next_flags;	\/* flags for sst_next_list *\/$/;"	m	struct:syn_state	access:public
syn_state::sst_next_list	vim/vim/src/structs.h	/^    short	*sst_next_list;	\/* "nextgroup" list in this state$/;"	m	struct:syn_state	access:public
syn_state::sst_stacksize	vim/vim/src/structs.h	/^    int		sst_stacksize;	\/* number of states on the stack *\/$/;"	m	struct:syn_state	access:public
syn_state::sst_tick	vim/vim/src/structs.h	/^    disptick_T	sst_tick;	\/* tick when last displayed *\/$/;"	m	struct:syn_state	access:public
syn_state::sst_union	vim/vim/src/structs.h	/^    } sst_union;$/;"	m	struct:syn_state	typeref:union:syn_state::__anon174	access:public
syn_sync	vim/vim/src/syntax.c	/^static void syn_sync(win_T *wp, linenr_T lnum, synstate_T *last_valid);$/;"	p	file:	signature:(win_T *wp, linenr_T lnum, synstate_T *last_valid)
syn_sync	vim/vim/src/syntax.c	/^syn_sync($/;"	f	file:	signature:( win_T *wp, linenr_T start_lnum, synstate_T *last_valid)
syn_term_attr2entry	vim/vim/src/syntax.c	/^syn_term_attr2entry(int attr)$/;"	f	signature:(int attr)
syn_time_T	vim/vim/src/structs.h	/^} syn_time_T;$/;"	t	typeref:struct:__anon198
syn_time_T	vim/vim/src/syntax.c	/^typedef int syn_time_T;$/;"	t	file:
syn_time_on	vim/vim/src/syntax.c	/^static int syn_time_on = FALSE;$/;"	v	file:
syn_tm	vim/vim/src/syntax.c	/^static proftime_T *syn_tm;$/;"	v	file:
syn_unadd_group	vim/vim/src/syntax.c	/^static void syn_unadd_group(void);$/;"	p	file:	signature:(void)
syn_unadd_group	vim/vim/src/syntax.c	/^syn_unadd_group(void)$/;"	f	file:	signature:(void)
syn_update_ends	vim/vim/src/syntax.c	/^static void syn_update_ends(int startofline);$/;"	p	file:	signature:(int startofline)
syn_update_ends	vim/vim/src/syntax.c	/^syn_update_ends(int startofline)$/;"	f	file:	signature:(int startofline)
syn_win	vim/vim/src/syntax.c	/^static win_T	*syn_win;		\/* current window for highlighting *\/$/;"	v	file:
synblock_T	vim/vim/src/structs.h	/^} synblock_T;$/;"	t	typeref:struct:__anon200
sync_idx	vim/vim/src/syntax.c	/^    int		*sync_idx;	\/* syntax item for "grouphere" argument, NULL$/;"	m	struct:__anon137	file:	access:public
synpat_T	vim/vim/src/syntax.c	/^} synpat_T;$/;"	t	typeref:struct:syn_pattern	file:
synstate_T	vim/vim/src/structs.h	/^typedef struct syn_state synstate_T;$/;"	t	typeref:struct:syn_state
synt	vim/vim/src/regexp_nfa.c	/^    regsub_T	synt; \/* \\z( .. \\) matches *\/$/;"	m	struct:__anon118	file:	access:public
syntax_check_changed	vim/vim/src/syntax.c	/^syntax_check_changed(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
syntax_clear	vim/vim/src/syntax.c	/^syntax_clear(synblock_T *block)$/;"	f	signature:(synblock_T *block)
syntax_end_parsing	vim/vim/src/syntax.c	/^syntax_end_parsing(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
syntax_present	vim/vim/src/syntax.c	/^syntax_present(win_T *win)$/;"	f	signature:(win_T *win)
syntax_start	vim/vim/src/syntax.c	/^syntax_start(win_T *wp, linenr_T lnum, proftime_T *syntax_tm UNUSED)$/;"	f	signature:(win_T *wp, linenr_T lnum, proftime_T *syntax_tm UNUSED)
syntax_sync_clear	vim/vim/src/syntax.c	/^static void syntax_sync_clear(void);$/;"	p	file:	signature:(void)
syntax_sync_clear	vim/vim/src/syntax.c	/^syntax_sync_clear(void)$/;"	f	file:	signature:(void)
syntime_clear	vim/vim/src/syntax.c	/^static void syntime_clear(void);$/;"	p	file:	signature:(void)
syntime_clear	vim/vim/src/syntax.c	/^syntime_clear(void)$/;"	f	file:	signature:(void)
syntime_report	vim/vim/src/syntax.c	/^static void syntime_report(void);$/;"	p	file:	signature:(void)
syntime_report	vim/vim/src/syntax.c	/^syntime_report(void)$/;"	f	file:	signature:(void)
sys_menu	vim/vim/src/globals.h	/^EXTERN int	sys_menu INIT(= FALSE);$/;"	v
sysconf	vim/vim/src/tee/tee.c	38;"	d	file:
sysdrive	vim/vim/src/dosinst.h	/^char	*sysdrive;		\/* system drive or "c:\\" *\/$/;"	v
sysmouse_close	vim/vim/src/os_unix.c	/^static void sysmouse_close(void);$/;"	p	file:	signature:(void)
sysmouse_close	vim/vim/src/os_unix.c	/^sysmouse_close(void)$/;"	f	file:	signature:(void)
sysmouse_open	vim/vim/src/os_unix.c	/^static int sysmouse_open(void);$/;"	p	file:	signature:(void)
sysmouse_open	vim/vim/src/os_unix.c	/^sysmouse_open(void)$/;"	f	file:	signature:(void)
szAppName	vim/vim/src/os_mswin.c	/^static char_u		szAppName[] = TEXT("VIM");$/;"	v	file:
szText	vim/vim/src/gui_w32.c	/^    WCHAR	szText[80];$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
szText	vim/vim/src/gui_w32.c	/^    char	szText[80];$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
szText	vim/vim/src/gui_w32.c	/^    char       szText[80];$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
t	vim/vim/src/Makefile	/^	echo "\/* vim: set ft=c : *\/" >> proto\/$@$/;"	m
t	vim/vim/src/regexp_nfa.c	/^    nfa_thread_T    *t;		\/* allocated array of states *\/$/;"	m	struct:__anon121	file:	access:public
t_colors	vim/vim/src/globals.h	/^EXTERN int	t_colors INIT(= 0);	    \/* int value of T_CCO *\/$/;"	v
t_puts	vim/vim/src/message.c	/^static void t_puts(int *t_col, char_u *t_s, char_u *s, int attr);$/;"	p	file:	signature:(int *t_col, char_u *t_s, char_u *s, int attr)
t_puts	vim/vim/src/message.c	/^t_puts($/;"	f	file:	signature:( int *t_col, char_u *t_s, char_u *s, int attr)
ta_len	vim/vim/src/ui.c	/^static int ta_len;	\/* length of ta_str when it's not NULL*\/$/;"	v	file:
ta_off	vim/vim/src/ui.c	/^static int ta_off;	\/* offset for next char to use when ta_str != NULL *\/$/;"	v	file:
ta_str	vim/vim/src/ui.c	/^static char_u *ta_str = NULL;$/;"	v	file:
tab	vim/vim/src/if_py_both.h	/^    tabpage_T	*tab;$/;"	m	struct:__anon107	access:public
tab	vim/vim/src/libvterm/src/state.c	/^static void tab(VTermState *state, int count, int direction)$/;"	f	file:	signature:(VTermState *state, int count, int direction)
tab	vim/vim/src/structs.h	/^    int		tab;			\/* > 0 when ":tab" was used *\/$/;"	m	struct:__anon171	access:public
tabLabels	vim/vim/src/gui_mac.c	/^static CFStringRef *tabLabels = NULL;$/;"	v	file:
tabLabelsSize	vim/vim/src/gui_mac.c	/^static int tabLabelsSize = 0;$/;"	v	file:
tabLine	vim/vim/src/gui_motif.c	/^static Widget	tabLine;$/;"	v	file:
tabLine_menu	vim/vim/src/gui_motif.c	/^static Widget	tabLine_menu = 0;$/;"	v	file:
tabObject	vim/vim/src/if_py_both.h	/^    TabPageObject	*tabObject;$/;"	m	struct:__anon109	access:public
tabObject	vim/vim/src/if_py_both.h	/^    TabPageObject	*tabObject;$/;"	m	struct:__anon110	access:public
tabline	vim/vim/src/gui.h	/^    GtkWidget	*tabline;	    \/* tab pages line handle *\/$/;"	m	struct:Gui	access:public
tabline_balloon_cb	vim/vim/src/gui_motif.c	/^static void tabline_balloon_cb(BalloonEval *beval, int state);$/;"	p	file:	signature:(BalloonEval *beval, int state)
tabline_balloon_cb	vim/vim/src/gui_motif.c	/^tabline_balloon_cb(BalloonEval *beval, int state UNUSED)$/;"	f	file:	signature:(BalloonEval *beval, int state UNUSED)
tabline_button_cb	vim/vim/src/gui_motif.c	/^static void tabline_button_cb(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
tabline_button_cb	vim/vim/src/gui_motif.c	/^tabline_button_cb($/;"	f	file:	signature:( Widget w, XtPointer client_data UNUSED, XtPointer call_data UNUSED)
tabline_cb	vim/vim/src/gui_motif.c	/^static void tabline_cb(Widget w, XtPointer client_data, XtPointer call_data);$/;"	p	file:	signature:(Widget w, XtPointer client_data, XtPointer call_data)
tabline_cb	vim/vim/src/gui_motif.c	/^tabline_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XtPointer call_data)
tabline_height	vim/vim/src/gui.h	/^    int		tabline_height;$/;"	m	struct:Gui	access:public
tabline_height	vim/vim/src/window.c	/^tabline_height(void)$/;"	f	signature:(void)
tabline_menu	vim/vim/src/gui_gtk_x11.c	/^static GtkWidget *tabline_menu;$/;"	v	file:
tabline_menu_cb	vim/vim/src/gui_motif.c	/^static void tabline_menu_cb(Widget w, XtPointer	closure, XEvent	*e, Boolean *continue_dispatch);$/;"	p	file:	signature:(Widget w, XtPointer closure, XEvent *e, Boolean *continue_dispatch)
tabline_menu_cb	vim/vim/src/gui_motif.c	/^tabline_menu_cb($/;"	f	file:	signature:( Widget w, XtPointer closure UNUSED, XEvent *e, Boolean *continue_dispatch UNUSED)
tabline_menu_handler	vim/vim/src/gui_gtk_x11.c	/^tabline_menu_handler(GtkMenuItem *item UNUSED, gpointer user_data)$/;"	f	file:	signature:(GtkMenuItem *item UNUSED, gpointer user_data)
tabline_scroller_clicked	vim/vim/src/gui_motif.c	/^tabline_scroller_clicked($/;"	f	file:	signature:( char *scroller_name, XButtonPressedEvent *event)
tabline_tooltip	vim/vim/src/gui_gtk_x11.c	/^static GtkTooltips *tabline_tooltip;$/;"	v	file:
tabline_wndproc	vim/vim/src/gui_w32.c	/^static LRESULT CALLBACK tabline_wndproc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);$/;"	p	file:	signature:(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
tabline_wndproc	vim/vim/src/gui_w32.c	/^tabline_wndproc($/;"	f	file:	signature:( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
tabpage_S	vim/vim/src/structs.h	/^struct tabpage_S$/;"	s
tabpage_S::tp_ch_used	vim/vim/src/structs.h	/^    long	    tp_ch_used;	    \/* value of 'cmdheight' when frame size$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_curwin	vim/vim/src/structs.h	/^    win_T	    *tp_curwin;	    \/* current window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_diff_invalid	vim/vim/src/structs.h	/^    int		    tp_diff_invalid;	\/* list of diffs is outdated *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_diffbuf	vim/vim/src/structs.h	/^    buf_T	    *(tp_diffbuf[DB_COUNT]);$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_first_diff	vim/vim/src/structs.h	/^    diff_T	    *tp_first_diff;$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_firstwin	vim/vim/src/structs.h	/^    win_T	    *tp_firstwin;   \/* first window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_lastwin	vim/vim/src/structs.h	/^    win_T	    *tp_lastwin;    \/* last window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_next	vim/vim/src/structs.h	/^    tabpage_T	    *tp_next;	    \/* next tabpage or NULL *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_old_Columns	vim/vim/src/structs.h	/^    long	    tp_old_Columns; \/* Columns when Tab page was left *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_old_Rows	vim/vim/src/structs.h	/^    long	    tp_old_Rows;    \/* Rows when Tab page was left *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_prev_which_scrollbars	vim/vim/src/structs.h	/^    int		    tp_prev_which_scrollbars[3];$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_prevwin	vim/vim/src/structs.h	/^    win_T	    *tp_prevwin;    \/* previous window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_python3_ref	vim/vim/src/structs.h	/^    void	    *tp_python3_ref;	\/* The Python value for this tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_python_ref	vim/vim/src/structs.h	/^    void	    *tp_python_ref;	\/* The Python value for this tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_snapshot	vim/vim/src/structs.h	/^    frame_T	    *(tp_snapshot[SNAP_COUNT]);  \/* window layout snapshots *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_topframe	vim/vim/src/structs.h	/^    frame_T	    *tp_topframe;   \/* topframe for the windows *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_vars	vim/vim/src/structs.h	/^    dict_T	    *tp_vars;	    \/* internal variables, local to tab page *\/$/;"	m	struct:tabpage_S	access:public
tabpage_S::tp_winvar	vim/vim/src/structs.h	/^    dictitem_T	    tp_winvar;	    \/* variable for "t:" Dictionary *\/$/;"	m	struct:tabpage_S	access:public
tabpage_T	vim/vim/src/structs.h	/^typedef struct tabpage_S tabpage_T;$/;"	t	typeref:struct:tabpage_S
tabpage_close	vim/vim/src/ex_docmd.c	/^tabpage_close(int forceit)$/;"	f	signature:(int forceit)
tabpage_close_other	vim/vim/src/ex_docmd.c	/^tabpage_close_other(tabpage_T *tp, int forceit)$/;"	f	signature:(tabpage_T *tp, int forceit)
tabpage_index	vim/vim/src/window.c	/^tabpage_index(tabpage_T *ftp)$/;"	f	signature:(tabpage_T *ftp)
tabpage_move	vim/vim/src/window.c	/^tabpage_move(int nr)$/;"	f	signature:(int nr)
tabpage_new	vim/vim/src/ex_docmd.c	/^tabpage_new(void)$/;"	f	signature:(void)
tabstops	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned char *tabstops;$/;"	m	struct:VTermState	access:public
tagCOMPOSITIONFORM	vim/vim/src/gui_w32.c	/^typedef struct tagCOMPOSITIONFORM {$/;"	s	file:
tagCOMPOSITIONFORM::dwStyle	vim/vim/src/gui_w32.c	/^    DWORD dwStyle;$/;"	m	struct:tagCOMPOSITIONFORM	file:	access:public
tagCOMPOSITIONFORM::ptCurrentPos	vim/vim/src/gui_w32.c	/^    POINT ptCurrentPos;$/;"	m	struct:tagCOMPOSITIONFORM	file:	access:public
tagCOMPOSITIONFORM::rcArea	vim/vim/src/gui_w32.c	/^    RECT  rcArea;$/;"	m	struct:tagCOMPOSITIONFORM	file:	access:public
tagNMTTDISPINFOA	vim/vim/src/gui_w32.c	/^typedef struct tagNMTTDISPINFOA {$/;"	s	file:
tagNMTTDISPINFOA::hdr	vim/vim/src/gui_w32.c	/^    NMHDR	hdr;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
tagNMTTDISPINFOA::hinst	vim/vim/src/gui_w32.c	/^    HINSTANCE	hinst;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
tagNMTTDISPINFOA::lParam	vim/vim/src/gui_w32.c	/^    LPARAM	lParam;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
tagNMTTDISPINFOA::lpszText	vim/vim/src/gui_w32.c	/^    LPSTR	lpszText;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
tagNMTTDISPINFOA::szText	vim/vim/src/gui_w32.c	/^    char	szText[80];$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
tagNMTTDISPINFOA::uFlags	vim/vim/src/gui_w32.c	/^    UINT	uFlags;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
tagNMTTDISPINFOW	vim/vim/src/gui_w32.c	/^typedef struct tagNMTTDISPINFOW {$/;"	s	file:
tagNMTTDISPINFOW::hdr	vim/vim/src/gui_w32.c	/^    NMHDR	hdr;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
tagNMTTDISPINFOW::hinst	vim/vim/src/gui_w32.c	/^    HINSTANCE	hinst;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
tagNMTTDISPINFOW::lParam	vim/vim/src/gui_w32.c	/^    LPARAM	lParam;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
tagNMTTDISPINFOW::lpszText	vim/vim/src/gui_w32.c	/^    LPWSTR	lpszText;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
tagNMTTDISPINFOW::szText	vim/vim/src/gui_w32.c	/^    WCHAR	szText[80];$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
tagNMTTDISPINFOW::uFlags	vim/vim/src/gui_w32.c	/^    UINT	uFlags;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
tagNMTTDISPINFO_NEW	vim/vim/src/gui_w32.c	/^typedef struct tagNMTTDISPINFO_NEW$/;"	s	file:
tagNMTTDISPINFO_NEW::hdr	vim/vim/src/gui_w32.c	/^    NMHDR      hdr;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
tagNMTTDISPINFO_NEW::hinst	vim/vim/src/gui_w32.c	/^    HINSTANCE  hinst;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
tagNMTTDISPINFO_NEW::lParam	vim/vim/src/gui_w32.c	/^    LPARAM     lParam;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
tagNMTTDISPINFO_NEW::lpszText	vim/vim/src/gui_w32.c	/^    LPSTR      lpszText;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
tagNMTTDISPINFO_NEW::szText	vim/vim/src/gui_w32.c	/^    char       szText[80];$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
tagNMTTDISPINFO_NEW::uFlags	vim/vim/src/gui_w32.c	/^    UINT       uFlags;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
tagTOOLINFOA_NEW	vim/vim/src/gui_w32.c	/^typedef struct tagTOOLINFOA_NEW$/;"	s	file:
tagTOOLINFOA_NEW::cbSize	vim/vim/src/gui_w32.c	/^	UINT cbSize;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::hinst	vim/vim/src/gui_w32.c	/^	HINSTANCE hinst;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::hwnd	vim/vim/src/gui_w32.c	/^	HWND hwnd;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::lParam	vim/vim/src/gui_w32.c	/^	LPARAM lParam;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::lpszText	vim/vim/src/gui_w32.c	/^	LPSTR lpszText;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::rect	vim/vim/src/gui_w32.c	/^	RECT rect;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::uFlags	vim/vim/src/gui_w32.c	/^	UINT uFlags;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tagTOOLINFOA_NEW::uId	vim/vim/src/gui_w32.c	/^	UINT_PTR uId;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
tag_fgets	vim/vim/src/diff.c	56;"	d	file:
tag_fgets	vim/vim/src/fileio.c	/^tag_fgets(char_u *buf, int size, FILE *fp)$/;"	f	signature:(char_u *buf, int size, FILE *fp)
tag_fgets	vim/vim/src/tag.c	1157;"	d	file:
tag_fname	vim/vim/src/tag.c	/^    char_u	*tag_fname;	\/* file name of the tags file *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_fnames	vim/vim/src/tag.c	/^static garray_T tag_fnames = GA_EMPTY;$/;"	v	file:
tag_freematch	vim/vim/src/tag.c	/^tag_freematch(void)$/;"	f	signature:(void)
tag_full_fname	vim/vim/src/tag.c	/^static char_u *tag_full_fname(tagptrs_T *tagp);$/;"	p	file:	signature:(tagptrs_T *tagp)
tag_full_fname	vim/vim/src/tag.c	/^tag_full_fname(tagptrs_T *tagp)$/;"	f	file:	signature:(tagptrs_T *tagp)
tag_pointers	vim/vim/src/tag.c	/^typedef struct tag_pointers$/;"	s	file:
tag_pointers::command	vim/vim/src/tag.c	/^    char_u	*command;	\/* first char of command *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::command_end	vim/vim/src/tag.c	/^    char_u	*command_end;	\/* first char after command *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::fname	vim/vim/src/tag.c	/^    char_u	*fname;		\/* first char of file name *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::fname_end	vim/vim/src/tag.c	/^    char_u	*fname_end;	\/* char after file name *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::is_etag	vim/vim/src/tag.c	/^    int		is_etag;	\/* TRUE for emacs tag *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::tag_fname	vim/vim/src/tag.c	/^    char_u	*tag_fname;	\/* file name of the tags file *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::tagkind	vim/vim/src/tag.c	/^    char_u	*tagkind;	\/* "kind:" value *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::tagkind_end	vim/vim/src/tag.c	/^    char_u	*tagkind_end;	\/* end of tagkind *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::tagname	vim/vim/src/tag.c	/^    char_u	*tagname;	\/* start of tag name (skip "file:") *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_pointers::tagname_end	vim/vim/src/tag.c	/^    char_u	*tagname_end;	\/* char after tag name *\/$/;"	m	struct:tag_pointers	file:	access:public
tag_strnicmp	vim/vim/src/tag.c	/^static int tag_strnicmp(char_u *s1, char_u *s2, size_t len);$/;"	p	file:	signature:(char_u *s1, char_u *s2, size_t len)
tag_strnicmp	vim/vim/src/tag.c	/^tag_strnicmp(char_u *s1, char_u *s2, size_t len)$/;"	f	file:	signature:(char_u *s1, char_u *s2, size_t len)
taggy	vim/vim/src/structs.h	/^typedef struct taggy$/;"	s
taggy::cur_fnum	vim/vim/src/structs.h	/^    int		cur_fnum;	\/* buffer number used for cur_match *\/$/;"	m	struct:taggy	access:public
taggy::cur_match	vim/vim/src/structs.h	/^    int		cur_match;	\/* match number *\/$/;"	m	struct:taggy	access:public
taggy::fmark	vim/vim/src/structs.h	/^    fmark_T	fmark;		\/* cursor position BEFORE ":tag" *\/$/;"	m	struct:taggy	access:public
taggy::tagname	vim/vim/src/structs.h	/^    char_u	*tagname;	\/* tag name *\/$/;"	m	struct:taggy	access:public
taggy_T	vim/vim/src/structs.h	/^} taggy_T;$/;"	t	typeref:struct:taggy
tagkind	vim/vim/src/tag.c	/^    char_u	*tagkind;	\/* "kind:" value *\/$/;"	m	struct:tag_pointers	file:	access:public
tagkind_end	vim/vim/src/tag.c	/^    char_u	*tagkind_end;	\/* end of tagkind *\/$/;"	m	struct:tag_pointers	file:	access:public
taglen_advance	vim/vim/src/tag.c	/^static void taglen_advance(int l);$/;"	p	file:	signature:(int l)
taglen_advance	vim/vim/src/tag.c	/^taglen_advance(int l)$/;"	f	file:	signature:(int l)
tagmatchname	vim/vim/src/tag.c	/^static char_u	*tagmatchname = NULL;	\/* name of last used tag *\/$/;"	v	file:
tagname	vim/vim/src/structs.h	/^    char_u	*tagname;		\/* tag from -t argument *\/$/;"	m	struct:__anon210	access:public
tagname	vim/vim/src/structs.h	/^    char_u	*tagname;	\/* tag name *\/$/;"	m	struct:taggy	access:public
tagname	vim/vim/src/tag.c	/^    char_u	*tagname;	\/* start of tag name (skip "file:") *\/$/;"	m	struct:tag_pointers	file:	access:public
tagname_T	vim/vim/src/structs.h	/^} tagname_T;$/;"	t	typeref:struct:__anon208
tagname_end	vim/vim/src/tag.c	/^    char_u	*tagname_end;	\/* char after tag name *\/$/;"	m	struct:tag_pointers	file:	access:public
tagname_free	vim/vim/src/tag.c	/^tagname_free(tagname_T *tnp)$/;"	f	signature:(tagname_T *tnp)
tagptrs_T	vim/vim/src/tag.c	/^} tagptrs_T;$/;"	t	typeref:struct:tag_pointers	file:
tail	vim/vim/src/fileio.c	/^    char_u	*tail;		\/* tail of fname *\/$/;"	m	struct:AutoPatCmd	file:	access:public
target	vim/vim/src/gui_beval.h	/^    GtkWidget		*target;	\/* widget we are monitoring *\/$/;"	m	struct:BalloonEvalStruct	access:public
target_event_cb	vim/vim/src/gui_beval.c	/^static gint target_event_cb(GtkWidget *, GdkEvent *, gpointer);$/;"	p	file:	signature:(GtkWidget *, GdkEvent *, gpointer)
target_event_cb	vim/vim/src/gui_beval.c	/^target_event_cb(GtkWidget *widget, GdkEvent *event, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEvent *event, gpointer data)
targets	vim/vim/src/dosinst.h	/^} targets[TARGET_COUNT] =$/;"	v	typeref:struct:__anon142
targets_atom	vim/vim/src/ui.c	/^static Atom	targets_atom;$/;"	v	file:
tasave_T	vim/vim/src/structs.h	/^} tasave_T;$/;"	t	typeref:struct:__anon180
tb_buf	vim/vim/src/structs.h	/^    char_u	*tb_buf;	\/* buffer for typed characters *\/$/;"	m	struct:__anon179	access:public
tb_buflen	vim/vim/src/structs.h	/^    int		tb_buflen;	\/* size of tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tb_change_cnt	vim/vim/src/structs.h	/^    int		tb_change_cnt;	\/* nr of time tb_buf was changed; never zero *\/$/;"	m	struct:__anon179	access:public
tb_len	vim/vim/src/structs.h	/^    int		tb_len;		\/* number of valid bytes in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tb_maplen	vim/vim/src/structs.h	/^    int		tb_maplen;	\/* nr of mapped bytes in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tb_no_abbr_cnt	vim/vim/src/structs.h	/^    int		tb_no_abbr_cnt; \/* nr of bytes without abbrev. in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tb_noremap	vim/vim/src/structs.h	/^    char_u	*tb_noremap;	\/* mapping flags for characters in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tb_off	vim/vim/src/structs.h	/^    int		tb_off;		\/* current position in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tb_silent	vim/vim/src/structs.h	/^    int		tb_silent;	\/* nr of silently mapped bytes in tb_buf[] *\/$/;"	m	struct:__anon179	access:public
tbis_flags	vim/vim/src/option.h	/^EXTERN unsigned tbis_flags;$/;"	v
tbpri	vim/vim/src/workshop.c	/^static int	 tbpri;			\/* ToolBar priority *\/$/;"	v	file:
tc_charsets	vim/vim/src/hardcopy.c	/^static struct prt_ps_charset_S tc_charsets[] =$/;"	v	typeref:struct:prt_ps_charset_S	file:
tc_encodings	vim/vim/src/hardcopy.c	/^static struct prt_ps_encoding_S tc_encodings[] =$/;"	v	typeref:struct:prt_ps_encoding_S	file:
tc_flags	vim/vim/src/option.h	/^EXTERN unsigned tc_flags;       \/* flags from 'tagcase' *\/$/;"	v
tc_len	vim/vim/src/term.c	/^static int  tc_len = 0;	    \/* current number of entries in termcodes[] *\/$/;"	v	file:
tc_max_len	vim/vim/src/term.c	/^static int  tc_max_len = 0; \/* number of entries that termcodes[] can hold *\/$/;"	v	file:
tcl_buffer_free	vim/vim/src/if_tcl.c	/^tcl_buffer_free(buf_T *buf)$/;"	f	signature:(buf_T *buf)
tcl_channel_close	vim/vim/src/if_tcl.c	/^tcl_channel_close(ClientData instance, Tcl_Interp *interp UNUSED)$/;"	f	file:	signature:(ClientData instance, Tcl_Interp *interp UNUSED)
tcl_channel_gethandle	vim/vim/src/if_tcl.c	/^tcl_channel_gethandle($/;"	f	file:	signature:( ClientData instance UNUSED, int direction UNUSED, ClientData *handleptr UNUSED)
tcl_channel_input	vim/vim/src/if_tcl.c	/^tcl_channel_input($/;"	f	file:	signature:( ClientData instance UNUSED, char *buf UNUSED, int bufsiz UNUSED, int *errptr)
tcl_channel_output	vim/vim/src/if_tcl.c	/^tcl_channel_output($/;"	f	file:	signature:( ClientData instance, const char *buf, int bufsiz, int *errptr)
tcl_channel_type	vim/vim/src/if_tcl.c	/^static Tcl_ChannelType tcl_channel_type =$/;"	v	file:
tcl_channel_watch	vim/vim/src/if_tcl.c	/^tcl_channel_watch(ClientData instance UNUSED, int mask UNUSED)$/;"	f	file:	signature:(ClientData instance UNUSED, int mask UNUSED)
tcl_enabled	vim/vim/src/if_tcl.c	/^tcl_enabled(int verbose)$/;"	f	signature:(int verbose)
tcl_end	vim/vim/src/if_tcl.c	/^tcl_end(void)$/;"	f	signature:(void)
tcl_funcname_table	vim/vim/src/if_tcl.c	/^} tcl_funcname_table[] = {$/;"	v	typeref:struct:__anon141	file:
tcl_info	vim/vim/src/if_tcl.c	/^} tcl_info;$/;"	t	typeref:struct:__anon140	file:
tcl_runtime_link_init	vim/vim/src/if_tcl.c	/^tcl_runtime_link_init(char *libname, int verbose)$/;"	f	file:	signature:(char *libname, int verbose)
tcl_window_free	vim/vim/src/if_tcl.c	/^tcl_window_free(win_T *win)$/;"	f	signature:(win_T *win)
tcldelallrefs	vim/vim/src/if_tcl.c	/^tcldelallrefs(struct ref *ref)$/;"	f	file:	signature:(struct ref *ref)
tcldelthisinterp	vim/vim/src/if_tcl.c	/^static void tcldelthisinterp _ANSI_ARGS_ ((void));$/;"	p	file:	signature:(void)
tcldelthisinterp	vim/vim/src/if_tcl.c	/^tcldelthisinterp(void)$/;"	f	file:	signature:(void)
tcldoexcommand	vim/vim/src/if_tcl.c	/^static int tcldoexcommand _ANSI_ARGS_ ((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn));$/;"	p	file:	signature:(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn)
tcldoexcommand	vim/vim/src/if_tcl.c	/^tcldoexcommand($/;"	f	file:	signature:( Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn)
tclerrmsg	vim/vim/src/if_tcl.c	/^static void tclerrmsg _ANSI_ARGS_((char *text));$/;"	p	file:	signature:(char *text)
tclerrmsg	vim/vim/src/if_tcl.c	/^tclerrmsg(char *text)$/;"	f	file:	signature:(char *text)
tclexit	vim/vim/src/if_tcl.c	/^tclexit(int error)$/;"	f	file:	signature:(int error)
tclfindwin	vim/vim/src/if_tcl.c	/^static win_T *tclfindwin _ANSI_ARGS_ ((buf_T *buf));$/;"	p	file:	signature:(buf_T *buf)
tclfindwin	vim/vim/src/if_tcl.c	/^tclfindwin(buf_T *buf)$/;"	f	file:	signature:(buf_T *buf)
tclgetbuffer	vim/vim/src/if_tcl.c	/^static char * tclgetbuffer _ANSI_ARGS_((Tcl_Interp *interp, buf_T *buf));$/;"	p	file:	signature:(Tcl_Interp *interp, buf_T *buf)
tclgetbuffer	vim/vim/src/if_tcl.c	/^tclgetbuffer(Tcl_Interp *interp, buf_T *buf)$/;"	f	file:	signature:(Tcl_Interp *interp, buf_T *buf)
tclgetlinenum	vim/vim/src/if_tcl.c	/^static int tclgetlinenum _ANSI_ARGS_ ((Tcl_Interp *interp, Tcl_Obj *obj, int *valueP, buf_T *buf));$/;"	p	file:	signature:(Tcl_Interp *interp, Tcl_Obj *obj, int *valueP, buf_T *buf)
tclgetlinenum	vim/vim/src/if_tcl.c	/^tclgetlinenum($/;"	f	file:	signature:( Tcl_Interp *interp, Tcl_Obj *obj, int *valueP, buf_T *buf)
tclgetref	vim/vim/src/if_tcl.c	/^tclgetref($/;"	f	file:	signature:( Tcl_Interp *interp, void **refstartP, char *prefix, void *vimobj, Tcl_ObjCmdProc *proc)
tclgetwindow	vim/vim/src/if_tcl.c	/^static char * tclgetwindow _ANSI_ARGS_((Tcl_Interp *interp, win_T *win));$/;"	p	file:	signature:(Tcl_Interp *interp, win_T *win)
tclgetwindow	vim/vim/src/if_tcl.c	/^tclgetwindow(Tcl_Interp *interp, win_T *win)$/;"	f	file:	signature:(Tcl_Interp *interp, win_T *win)
tclinfo	vim/vim/src/if_tcl.c	/^static tcl_info tclinfo = { NULL, 0, 0, 0, 0, NULL, NULL };$/;"	v	file:
tclinit	vim/vim/src/if_tcl.c	/^tclinit(exarg_T *eap)$/;"	f	file:	signature:(exarg_T *eap)
tclmsg	vim/vim/src/if_tcl.c	/^static void tclmsg _ANSI_ARGS_((char *text));$/;"	p	file:	signature:(char *text)
tclmsg	vim/vim/src/if_tcl.c	/^tclmsg(char *text)$/;"	f	file:	signature:(char *text)
tclsetdelcmd	vim/vim/src/if_tcl.c	/^static int tclsetdelcmd _ANSI_ARGS_((Tcl_Interp *interp, struct ref *reflist, void *vimobj, Tcl_Obj *delcmd));$/;"	p	file:	signature:(Tcl_Interp *interp, struct ref *reflist, void *vimobj, Tcl_Obj *delcmd)
tclsetdelcmd	vim/vim/src/if_tcl.c	/^tclsetdelcmd($/;"	f	file:	signature:( Tcl_Interp *interp, struct ref *reflist, void *vimobj, Tcl_Obj *delcmd)
tclsetoption	vim/vim/src/if_tcl.c	/^static int tclsetoption _ANSI_ARGS_ ((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn));$/;"	p	file:	signature:(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn)
tclsetoption	vim/vim/src/if_tcl.c	/^tclsetoption($/;"	f	file:	signature:( Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn)
tclupdatevars	vim/vim/src/if_tcl.c	/^static void tclupdatevars _ANSI_ARGS_((void));$/;"	p	file:	signature:(void)
tclupdatevars	vim/vim/src/if_tcl.c	/^tclupdatevars(void)$/;"	f	file:	signature:(void)
tclvimexpr	vim/vim/src/if_tcl.c	/^static int tclvimexpr _ANSI_ARGS_ ((Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn));$/;"	p	file:	signature:(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn)
tclvimexpr	vim/vim/src/if_tcl.c	/^tclvimexpr($/;"	f	file:	signature:( Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], int objn)
tearoff_callback	vim/vim/src/gui_w32.c	/^static LRESULT APIENTRY tearoff_callback(HWND, UINT, WPARAM, LPARAM);$/;"	p	file:
tearoff_callback	vim/vim/src/gui_w32.c	/^tearoff_callback($/;"	f	file:	signature:( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
tearoff_handle	vim/vim/src/structs.h	/^    GtkWidget	*tearoff_handle;$/;"	m	struct:VimMenu	access:public
tearoff_handle	vim/vim/src/structs.h	/^    HWND	tearoff_handle;	    \/* hWnd of tearoff if created *\/$/;"	m	struct:VimMenu	access:public
tearoff_val	vim/vim/src/gui_motif.c	/^static int tearoff_val = (int)XmTEAR_OFF_ENABLED;$/;"	v	file:
temp_count	vim/vim/src/fileio.c	/^static long	temp_count = 0;		\/* Temp filename counter. *\/$/;"	v	file:
tent	vim/vim/src/termlib.c	/^char	*tent;		      \/* Pointer to terminal entry, set by tgetent *\/$/;"	v
term	vim/vim/src/structs.h	/^	} term;$/;"	m	union:attr_entry::__anon175	typeref:struct:attr_entry::__anon175::__anon176	access:public
term	vim/vim/src/structs.h	/^    char_u	*term;			\/* specified terminal name *\/$/;"	m	struct:__anon210	access:public
term_7to8bit	vim/vim/src/term.c	/^static int term_7to8bit(char_u *p);$/;"	p	file:	signature:(char_u *p)
term_7to8bit	vim/vim/src/term.c	/^term_7to8bit(char_u *p)$/;"	f	file:	signature:(char_u *p)
term_T	vim/vim/src/structs.h	/^typedef struct terminal_S	term_T;$/;"	t	typeref:struct:terminal_S
term_and_job_init	vim/vim/src/terminal.c	/^static int term_and_job_init(term_T *term, int rows, int cols, char_u *cmd);$/;"	p	file:	signature:(term_T *term, int rows, int cols, char_u *cmd)
term_and_job_init	vim/vim/src/terminal.c	/^term_and_job_init(term_T *term, int rows, int cols, char_u *cmd)$/;"	f	file:	signature:(term_T *term, int rows, int cols, char_u *cmd)
term_append_lines	vim/vim/src/term.c	/^term_append_lines(int line_count)$/;"	f	signature:(int line_count)
term_attr_table	vim/vim/src/syntax.c	/^static garray_T	term_attr_table = {0, 0, 0, 0, NULL};$/;"	v	file:
term_bg_color	vim/vim/src/term.c	/^term_bg_color(int n)$/;"	f	signature:(int n)
term_bg_default	vim/vim/src/option.c	/^static char_u *term_bg_default(void);$/;"	p	file:	signature:(void)
term_bg_default	vim/vim/src/option.c	/^term_bg_default(void)$/;"	f	file:	signature:(void)
term_bg_rgb_color	vim/vim/src/term.c	/^term_bg_rgb_color(guicolor_T rgb)$/;"	f	signature:(guicolor_T rgb)
term_color	vim/vim/src/term.c	/^static void term_color(char_u *s, int n);$/;"	p	file:	signature:(char_u *s, int n)
term_color	vim/vim/src/term.c	/^term_color(char_u *s, int n)$/;"	f	file:	signature:(char_u *s, int n)
term_console	vim/vim/src/globals.h	/^EXTERN int	term_console INIT(= FALSE); \/* set to TRUE when console used *\/$/;"	v
term_convert_key	vim/vim/src/terminal.c	/^term_convert_key(int c, char *buf)$/;"	f	file:	signature:(int c, char *buf)
term_cursor_right	vim/vim/src/term.c	/^term_cursor_right(int i)$/;"	f	signature:(int i)
term_cursor_shape	vim/vim/src/term.c	/^term_cursor_shape(void)$/;"	f	signature:(void)
term_delete_lines	vim/vim/src/term.c	/^term_delete_lines(int line_count)$/;"	f	signature:(int line_count)
term_fg_color	vim/vim/src/term.c	/^term_fg_color(int n)$/;"	f	signature:(int n)
term_fg_rgb_color	vim/vim/src/term.c	/^term_fg_rgb_color(guicolor_T rgb)$/;"	f	signature:(guicolor_T rgb)
term_free	vim/vim/src/terminal.c	/^static void term_free(term_T *term);$/;"	p	file:	signature:(term_T *term)
term_free	vim/vim/src/terminal.c	/^term_free(term_T *term)$/;"	f	file:	signature:(term_T *term)
term_get_status_text	vim/vim/src/terminal.c	/^term_get_status_text(term_T *term)$/;"	f	signature:(term_T *term)
term_get_winpos	vim/vim/src/term.c	/^term_get_winpos(int *x, int *y)$/;"	f	signature:(int *x, int *y)
term_is_8bit	vim/vim/src/term.c	/^term_is_8bit(char_u *name)$/;"	f	signature:(char_u *name)
term_is_builtin	vim/vim/src/term.c	/^static int term_is_builtin(char_u *name);$/;"	p	file:	signature:(char_u *name)
term_is_builtin	vim/vim/src/term.c	/^term_is_builtin(char_u *name)$/;"	f	file:	signature:(char_u *name)
term_is_gui	vim/vim/src/term.c	/^term_is_gui(char_u *name)$/;"	f	signature:(char_u *name)
term_is_xterm	vim/vim/src/globals.h	/^EXTERN int	term_is_xterm INIT(= FALSE);	\/* xterm-like 'term' *\/$/;"	v
term_job_ended	vim/vim/src/terminal.c	/^term_job_ended(job_T *job)$/;"	f	signature:(job_T *job)
term_job_running	vim/vim/src/terminal.c	/^term_job_running(term_T *term)$/;"	f	file:	signature:(term_T *term)
term_report_winsize	vim/vim/src/terminal.c	/^static void term_report_winsize(term_T *term, int rows, int cols);$/;"	p	file:	signature:(term_T *term, int rows, int cols)
term_report_winsize	vim/vim/src/terminal.c	/^term_report_winsize(term_T *term, int rows, int cols)$/;"	f	file:	signature:(term_T *term, int rows, int cols)
term_rgb_color	vim/vim/src/term.c	/^term_rgb_color(char_u *s, guicolor_T rgb)$/;"	f	file:	signature:(char_u *s, guicolor_T rgb)
term_set_winpos	vim/vim/src/term.c	/^term_set_winpos(int x, int y)$/;"	f	signature:(int x, int y)
term_set_winsize	vim/vim/src/term.c	/^term_set_winsize(int height, int width)$/;"	f	signature:(int height, int width)
term_settitle	vim/vim/src/term.c	/^term_settitle(char_u *title)$/;"	f	signature:(char_u *title)
term_strings	vim/vim/src/term.c	/^char_u *(term_strings[(int)KS_LAST + 1]);$/;"	v
term_update_window	vim/vim/src/terminal.c	/^term_update_window(win_T *wp)$/;"	f	signature:(win_T *wp)
term_windgoto	vim/vim/src/term.c	/^term_windgoto(int row, int col)$/;"	f	signature:(int row, int col)
term_write_job_output	vim/vim/src/terminal.c	/^term_write_job_output(term_T *term, char_u *msg, size_t len)$/;"	f	file:	signature:(term_T *term, char_u *msg, size_t len)
termcap_active	vim/vim/src/globals.h	/^EXTERN int	termcap_active INIT(= FALSE);	\/* set by starttermcap() *\/$/;"	v
termcap_mode_end	vim/vim/src/os_win32.c	/^static void termcap_mode_end(void);$/;"	p	file:	signature:(void)
termcap_mode_end	vim/vim/src/os_win32.c	/^termcap_mode_end(void)$/;"	f	file:	signature:(void)
termcap_mode_start	vim/vim/src/os_win32.c	/^static void termcap_mode_start(void);$/;"	p	file:	signature:(void)
termcap_mode_start	vim/vim/src/os_win32.c	/^termcap_mode_start(void)$/;"	f	file:	signature:(void)
termcapinit	vim/vim/src/term.c	/^termcapinit(char_u *name)$/;"	f	signature:(char_u *name)
termcode	vim/vim/src/term.c	/^static struct termcode$/;"	s	file:
termcode::code	vim/vim/src/term.c	/^    char_u  *code;	    \/* terminal code (in allocated memory) *\/$/;"	m	struct:termcode	file:	access:public
termcode::len	vim/vim/src/term.c	/^    int	    len;	    \/* STRLEN(code) *\/$/;"	m	struct:termcode	file:	access:public
termcode::modlen	vim/vim/src/term.c	/^    int	    modlen;	    \/* length of part before ";*~". *\/$/;"	m	struct:termcode	file:	access:public
termcode::name	vim/vim/src/term.c	/^    char_u  name[2];	    \/* termcap name of entry *\/$/;"	m	struct:termcode	file:	access:public
termcode_star	vim/vim/src/term.c	/^static int termcode_star(char_u *code, int len);$/;"	p	file:	signature:(char_u *code, int len)
termcode_star	vim/vim/src/term.c	/^termcode_star(char_u *code, int len)$/;"	f	file:	signature:(char_u *code, int len)
termcodes	vim/vim/src/term.c	/^} *termcodes = NULL;$/;"	v	typeref:struct:termcode	file:
termgui_get_color	vim/vim/src/term.c	/^termgui_get_color(char_u *name)$/;"	f	signature:(char_u *name)
termgui_mch_get_color	vim/vim/src/term.c	/^termgui_mch_get_color(char_u *name)$/;"	f	signature:(char_u *name)
termgui_mch_get_rgb	vim/vim/src/term.c	/^termgui_mch_get_rgb(guicolor_T color)$/;"	f	signature:(guicolor_T color)
terminal_S	vim/vim/src/terminal.c	/^struct terminal_S {$/;"	s	file:
terminal_S::tl_buffer	vim/vim/src/terminal.c	/^    buf_T	*tl_buffer;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_cols	vim/vim/src/terminal.c	/^    int		tl_cols;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_cols_fixed	vim/vim/src/terminal.c	/^    int		tl_cols_fixed;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_cursor	vim/vim/src/terminal.c	/^    pos_T	tl_cursor;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_cursor_visible	vim/vim/src/terminal.c	/^    int		tl_cursor_visible;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_dirty_row_end	vim/vim/src/terminal.c	/^    int		tl_dirty_row_end;   \/* row below last one to update *\/$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_dirty_row_start	vim/vim/src/terminal.c	/^    int		tl_dirty_row_start; \/* -1 if nothing dirty *\/$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_job	vim/vim/src/terminal.c	/^    job_T	*tl_job;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_next	vim/vim/src/terminal.c	/^    term_T	*tl_next;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_rows	vim/vim/src/terminal.c	/^    int		tl_rows;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_rows_fixed	vim/vim/src/terminal.c	/^    int		tl_rows_fixed;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_status_text	vim/vim/src/terminal.c	/^    char_u	*tl_status_text; \/* NULL or allocated *\/$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_title	vim/vim/src/terminal.c	/^    char_u	*tl_title; \/* NULL or allocated *\/$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_vterm	vim/vim/src/terminal.c	/^    VTerm	*tl_vterm;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_winpty	vim/vim/src/terminal.c	/^    void	*tl_winpty;$/;"	m	struct:terminal_S	file:	access:public
terminal_S::tl_winpty_config	vim/vim/src/terminal.c	/^    void	*tl_winpty_config;$/;"	m	struct:terminal_S	file:	access:public
terminal_loop	vim/vim/src/terminal.c	/^terminal_loop(void)$/;"	f	signature:(void)
terminate_all	vim/vim/src/os_win32.c	/^terminate_all(HANDLE process, int code)$/;"	f	file:	signature:(HANDLE process, int code)
termleader	vim/vim/src/term.c	/^static char_u	termleader[256 + 1];	    \/* for check_termcode() *\/$/;"	v	file:
test_autochdir	vim/vim/src/globals.h	/^EXTERN int	test_autochdir INIT(= FALSE);$/;"	v
test_decode_find_end	vim/vim/src/json_test.c	/^test_decode_find_end(void)$/;"	f	file:	signature:(void)
test_fill_called_on_find_end	vim/vim/src/json_test.c	/^test_fill_called_on_find_end(void)$/;"	f	file:	signature:(void)
test_fill_called_on_string	vim/vim/src/json_test.c	/^test_fill_called_on_string(void)$/;"	f	file:	signature:(void)
test_for_current	vim/vim/src/tag.c	/^static int test_for_current(char_u *, char_u *, char_u *, char_u *);$/;"	p	file:	signature:(char_u *, char_u *, char_u *, char_u *)
test_for_current	vim/vim/src/tag.c	/^static int test_for_current(int, char_u *, char_u *, char_u *, char_u *);$/;"	p	file:	signature:(int, char_u *, char_u *, char_u *, char_u *)
test_for_current	vim/vim/src/tag.c	/^test_for_current($/;"	f	file:	signature:( int is_etag, char_u *fname, char_u *fname_end, char_u *tag_fname, char_u *buf_ffname)
test_for_static	vim/vim/src/tag.c	/^static int test_for_static(tagptrs_T *);$/;"	p	file:	signature:(tagptrs_T *)
test_for_static	vim/vim/src/tag.c	/^test_for_static(tagptrs_T *tagp)$/;"	f	file:	signature:(tagptrs_T *tagp)
test_isword_funcs_utf8	vim/vim/src/kword_test.c	/^test_isword_funcs_utf8(void)$/;"	f	file:	signature:(void)
test_mf_hash	vim/vim/src/memfile_test.c	/^test_mf_hash(void)$/;"	f	file:	signature:(void)
test_sig	vim/vim/src/auto/configure	/^test_sig()$/;"	f
test_trunc_string	vim/vim/src/message_test.c	/^test_trunc_string(void)$/;"	f	file:	signature:(void)
test_x11_window	vim/vim/src/os_unix.c	/^static int test_x11_window(Display *dpy);$/;"	p	file:	signature:(Display *dpy)
test_x11_window	vim/vim/src/os_unix.c	/^test_x11_window(Display *dpy)$/;"	f	file:	signature:(Display *dpy)
text	vim/vim/runtime/tutor/tutor.cs	/^     nauèení. Pokud si jen ète¹ text, pøíkazy zapomene¹!$/;"	p
text	vim/vim/src/dosinst.c	/^    char    *text;			\/* text displayed for this choice *\/$/;"	m	struct:choice	file:	access:public
text	vim/vim/src/libvterm/include/vterm.h	/^  int (*text)(const char *bytes, size_t len, void *user);$/;"	m	struct:__anon59	access:public
textAntialiasMode	vim/vim/src/gui_dwrite.h	/^    int textAntialiasMode;$/;"	m	struct:DWriteRenderingParams	access:public
textArea	vim/vim/src/gui_athena.c	/^Widget textArea = (Widget)0;$/;"	v
textArea	vim/vim/src/gui_motif.c	/^Widget textArea;$/;"	v
textAreaForm	vim/vim/src/gui_motif.c	/^static Widget textAreaForm;$/;"	v	file:
textResources	vim/vim/src/gui_at_fs.c	/^static XtResource textResources[] =$/;"	v	file:
text_atom	vim/vim/src/ui.c	/^static Atom	text_atom;$/;"	v	file:
text_context	vim/vim/src/gui.h	/^    PangoContext     *text_context; \/* the context used for all text *\/$/;"	m	struct:Gui	access:public
text_gc	vim/vim/src/gui.h	/^    GC		text_gc;$/;"	m	struct:Gui	access:public
text_gc	vim/vim/src/gui.h	/^    GdkGC	*text_gc;	    \/* cached GC for normal text *\/$/;"	m	struct:Gui	access:public
text_locked	vim/vim/src/ex_getln.c	/^text_locked(void)$/;"	f	signature:(void)
text_locked_msg	vim/vim/src/ex_getln.c	/^text_locked_msg(void)$/;"	f	signature:(void)
textattr	vim/vim/src/os_win32.c	/^static void textattr(WORD wAttr);$/;"	p	file:	signature:(WORD wAttr)
textattr	vim/vim/src/os_win32.c	/^textattr(WORD wAttr)$/;"	f	file:	signature:(WORD wAttr)
textbackground	vim/vim/src/os_win32.c	/^static void textbackground(WORD wAttr);$/;"	p	file:	signature:(WORD wAttr)
textbackground	vim/vim/src/os_win32.c	/^textbackground(WORD wAttr)$/;"	f	file:	signature:(WORD wAttr)
textcol	vim/vim/src/ops.c	/^    colnr_T	textcol;	\/* index of chars (partially) in block *\/$/;"	m	struct:block_def	file:	access:public
textcolor	vim/vim/src/os_win32.c	/^static void textcolor(WORD wAttr);$/;"	p	file:	signature:(WORD wAttr)
textcolor	vim/vim/src/os_win32.c	/^textcolor(WORD wAttr)$/;"	f	file:	signature:(WORD wAttr)
textdomain	vim/vim/src/gui_gtk.c	58;"	d	file:
textdomain	vim/vim/src/gui_gtk_x11.c	42;"	d	file:
textdomain	vim/vim/src/vim.h	598;"	d
textdomain	vim/vim/src/vim.h	624;"	d
textdomain	vim/vim/src/vim.h	626;"	d
textlen	vim/vim/src/ops.c	/^    int		textlen;	\/* chars in block *\/$/;"	m	struct:block_def	file:	access:public
textlock	vim/vim/src/globals.h	/^EXTERN int	textlock INIT(= 0);$/;"	v
textstart	vim/vim/src/ops.c	/^    char_u	*textstart;	\/* pointer to 1st char (partially) in block *\/$/;"	m	struct:block_def	file:	access:public
tgetch	vim/vim/src/os_win32.c	/^tgetch(int *pmodifiers, WCHAR *pch2)$/;"	f	file:	signature:(int *pmodifiers, WCHAR *pch2)
tgetent	vim/vim/src/termlib.c	/^tgetent($/;"	f	signature:( char *tbuf, char *term)
tgetent_error	vim/vim/src/term.c	/^static char_u *tgetent_error(char_u *, char_u *);$/;"	p	file:	signature:(char_u *, char_u *)
tgetent_error	vim/vim/src/term.c	/^tgetent_error(char_u *tbuf, char_u *term)$/;"	f	file:	signature:(char_u *tbuf, char_u *term)
tgetflag	vim/vim/src/termlib.c	/^tgetflag(char *id)$/;"	f	signature:(char *id)
tgetnum	vim/vim/src/termlib.c	/^tgetnum(char *id)$/;"	f	signature:(char *id)
tgetstr	vim/vim/src/term.c	/^char		*tgetstr(char *, char **);$/;"	p	file:	signature:(char *, char **)
tgetstr	vim/vim/src/term.c	25;"	d	file:
tgetstr	vim/vim/src/term.c	51;"	d	file:
tgetstr	vim/vim/src/termlib.c	/^tgetstr(char *id, char **buf)$/;"	f	signature:(char *id, char **buf)
tgoto	vim/vim/src/term.c	/^static char *tgoto(char *, int, int);$/;"	p	file:	signature:(char *, int, int)
tgoto	vim/vim/src/term.c	/^tgoto(char *cm, int x, int y)$/;"	f	file:	signature:(char *cm, int x, int y)
tgoto	vim/vim/src/termlib.c	/^tgoto($/;"	f	signature:( char *cm, int col, int line)
theApp	vim/vim/src/VisVim/VisVim.cpp	/^CVisVimApp theApp;$/;"	v
theDate	vim/vim/src/gui_mac.c	/^    long *theDate;  \/* where to put the modification date\/time *\/$/;"	m	struct:CW_GetText	file:	access:public
theDate	vim/vim/src/gui_mac.c	/^    long *theDate; \/\/ where to put the modification date\/time$/;"	m	struct:WindowSearch	file:	access:public
theDate	vim/vim/src/gui_mac.c	/^    long theDate; \/\/ modification date\/time$/;"	m	struct:SelectionRange	file:	access:public
theDate	vim/vim/src/gui_mac.c	/^    long theDate; \/\/ the date\/time the file was last modified$/;"	m	struct:ModificationInfo	file:	access:public
theFile	vim/vim/src/gui_mac.c	/^    FSSpec theFile; \/* identifies the file *\/$/;"	m	struct:CW_GetText	file:	access:public
theFile	vim/vim/src/gui_mac.c	/^    FSSpec theFile; \/\/ identifies the file$/;"	m	struct:ModificationInfo	file:	access:public
theFile	vim/vim/src/gui_mac.c	/^    FSSpec theFile; \/\/ identifies the file$/;"	m	struct:WindowSearch	file:	access:public
theText	vim/vim/src/gui_mac.c	/^    Handle theText; \/* the location where you return the text (must be resized properly) *\/$/;"	m	struct:CW_GetText	file:	access:public
thesocket	vim/vim/runtime/tools/demoserver.py	/^thesocket = None$/;"	v
thickness	vim/vim/src/gui_at_sb.h	/^    Dimension	  thickness;	\/* either width or height *\/$/;"	m	struct:__anon84	access:public
this_cp	vim/vim/src/libvterm/src/encoding.c	/^  int this_cp;$/;"	m	struct:UTF8DecoderData	file:	access:public
thread_id	vim/vim/src/os_beos.c	26;"	d	file:
throw_exception	vim/vim/src/ex_eval.c	/^static int	throw_exception(void *, except_type_T, char_u *);$/;"	p	file:	signature:(void *, except_type_T, char_u *)
throw_exception	vim/vim/src/ex_eval.c	/^throw_exception(void *value, except_type_T type, char_u *cmdname)$/;"	f	file:	signature:(void *value, except_type_T type, char_u *cmdname)
throw_lnum	vim/vim/src/structs.h	/^    linenr_T		throw_lnum;	\/* line number of the throw point *\/$/;"	m	struct:vim_exception	access:public
throw_msg	vim/vim/src/structs.h	/^    char_u		*throw_msg;	\/* msg to throw: usually original one *\/$/;"	m	struct:msglist	access:public
throw_name	vim/vim/src/structs.h	/^    char_u		*throw_name;	\/* name of the throw point *\/$/;"	m	struct:vim_exception	access:public
thumb	vim/vim/src/gui_at_sb.h	/^    Pixmap	  thumb;	\/* thumb color *\/$/;"	m	struct:__anon84	access:public
thumbProc	vim/vim/src/gui_at_sb.h	/^    XtCallbackList thumbProc;	\/* jump (to position) scroll *\/$/;"	m	struct:__anon84	access:public
ti_change	vim/vim/src/buffer.c	/^static int	ti_change(char_u *str, char_u **last);$/;"	p	file:	signature:(char_u *str, char_u **last)
ti_change	vim/vim/src/buffer.c	/^ti_change(char_u *str, char_u **last)$/;"	f	file:	signature:(char_u *str, char_u **last)
tilde_replace	vim/vim/src/ex_getln.c	/^tilde_replace($/;"	f	signature:( char_u *orig_pat, int num_files, char_u **files)
time_T	vim/vim/src/vim.h	/^typedef __time64_t  time_T;$/;"	t
time_T	vim/vim/src/vim.h	/^typedef long  time_T;$/;"	t
time_T	vim/vim/src/vim.h	/^typedef time_t	    time_T;$/;"	t
time_diff	vim/vim/src/main.c	/^static void time_diff(struct timeval *then, struct timeval *now);$/;"	p	file:	signature:(struct timeval *then, struct timeval *now)
time_diff	vim/vim/src/main.c	/^time_diff(struct timeval *then, struct timeval *now)$/;"	f	file:	signature:(struct timeval *then, struct timeval *now)
time_differs	vim/vim/src/fileio.c	/^static int time_differs(long t1, long t2);$/;"	p	file:	signature:(long t1, long t2)
time_differs	vim/vim/src/fileio.c	/^time_differs(long t1, long t2)$/;"	f	file:	signature:(long t1, long t2)
time_entry_T	vim/vim/src/syntax.c	/^} time_entry_T;$/;"	t	typeref:struct:__anon139	file:
time_fd	vim/vim/src/globals.h	/^EXTERN FILE *time_fd INIT(= NULL);  \/* where to write startup timing *\/$/;"	v
time_for_testing	vim/vim/src/globals.h	/^EXTERN time_T time_for_testing INIT(= 0);$/;"	v
time_msg	vim/vim/src/main.c	/^time_msg($/;"	f	signature:( char *mesg, void *tv_start)
time_pop	vim/vim/src/main.c	/^time_pop($/;"	f	signature:( void *tp)
time_push	vim/vim/src/main.c	/^time_push(void *tv_rel, void *tv_start)$/;"	f	signature:(void *tv_rel, void *tv_start)
time_set	vim/vim/src/ex_getln.c	/^    time_t	time_set;	\/* when it was typed, zero if unknown *\/$/;"	m	struct:hist_entry	file:	access:public
time_set	vim/vim/src/structs.h	/^    time_T	time_set;$/;"	m	struct:xfilemark	access:public
time_to_bytes	vim/vim/src/misc2.c	/^time_to_bytes(time_T the_time, char_u *buf)$/;"	f	signature:(time_T the_time, char_u *buf)
timeout_cb	vim/vim/src/gui_beval.c	/^static gboolean timeout_cb(gpointer);$/;"	p	file:
timeout_cb	vim/vim/src/gui_beval.c	/^static gint timeout_cb(gpointer);$/;"	p	file:
timeout_cb	vim/vim/src/gui_beval.c	/^timeout_cb(gpointer data)$/;"	f	file:	signature:(gpointer data)
timer	vim/vim/src/gui_athena.c	/^static XtIntervalId timer = 0;	    \/* 0 = expired, otherwise active *\/$/;"	v	file:
timerID	vim/vim/src/gui_beval.h	/^    unsigned int	timerID;	\/* timer for run *\/$/;"	m	struct:BalloonEvalStruct	access:public
timerRoutine	vim/vim/src/gui_beval.c	/^static void timerRoutine(XtPointer, XtIntervalId *);$/;"	p	file:	signature:(XtPointer, XtIntervalId *)
timerRoutine	vim/vim/src/gui_beval.c	/^timerRoutine(XtPointer dx, XtIntervalId *id UNUSED)$/;"	f	file:	signature:(XtPointer dx, XtIntervalId *id UNUSED)
timerUPP	vim/vim/src/if_mzsch.c	/^static EventLoopTimerUPP timerUPP;$/;"	v	file:
timer_S	vim/vim/src/structs.h	/^struct timer_S$/;"	s
timer_S::tr_callback	vim/vim/src/structs.h	/^    char_u	*tr_callback;	    \/* allocated *\/$/;"	m	struct:timer_S	access:public
timer_S::tr_due	vim/vim/src/structs.h	/^    proftime_T	tr_due;		    \/* when the callback is to be invoked *\/$/;"	m	struct:timer_S	access:public
timer_S::tr_emsg_count	vim/vim/src/structs.h	/^    int		tr_emsg_count;$/;"	m	struct:timer_S	access:public
timer_S::tr_firing	vim/vim/src/structs.h	/^    char	tr_firing;	    \/* when TRUE callback is being called *\/$/;"	m	struct:timer_S	access:public
timer_S::tr_id	vim/vim/src/structs.h	/^    long	tr_id;$/;"	m	struct:timer_S	access:public
timer_S::tr_interval	vim/vim/src/structs.h	/^    long	tr_interval;	    \/* msec *\/$/;"	m	struct:timer_S	access:public
timer_S::tr_next	vim/vim/src/structs.h	/^    timer_T	*tr_next;$/;"	m	struct:timer_S	access:public
timer_S::tr_partial	vim/vim/src/structs.h	/^    partial_T	*tr_partial;$/;"	m	struct:timer_S	access:public
timer_S::tr_paused	vim/vim/src/structs.h	/^    char	tr_paused;	    \/* when TRUE callback is not invoked *\/$/;"	m	struct:timer_S	access:public
timer_S::tr_prev	vim/vim/src/structs.h	/^    timer_T	*tr_prev;$/;"	m	struct:timer_S	access:public
timer_S::tr_repeat	vim/vim/src/structs.h	/^    int		tr_repeat;	    \/* number of times to repeat, -1 forever *\/$/;"	m	struct:timer_S	access:public
timer_T	vim/vim/src/structs.h	/^typedef struct timer_S timer_T;$/;"	t	typeref:struct:timer_S
timer_busy	vim/vim/src/globals.h	/^EXTERN int  timer_busy INIT(= 0);   \/* when timer is inside vgetc() then > 0 *\/$/;"	v
timer_callback	vim/vim/src/ex_cmds2.c	/^timer_callback(timer_T *timer)$/;"	f	file:	signature:(timer_T *timer)
timer_free_all	vim/vim/src/ex_cmds2.c	/^timer_free_all()$/;"	f
timer_id	vim/vim/src/gui_at_sb.h	/^    XtIntervalId  timer_id;	\/* autorepeat timer; remove on destruction *\/$/;"	m	struct:__anon84	access:public
timer_id	vim/vim/src/if_mzsch.c	/^static EventLoopTimerRef timer_id = NULL;$/;"	v	file:
timer_id	vim/vim/src/if_mzsch.c	/^static UINT timer_id = 0;$/;"	v	file:
timer_id	vim/vim/src/if_mzsch.c	/^static XtIntervalId timer_id = (XtIntervalId)0;$/;"	v	file:
timer_id	vim/vim/src/if_mzsch.c	/^static guint timer_id = 0;$/;"	v	file:
timer_proc	vim/vim/src/if_mzsch.c	/^pascal void timer_proc(EventLoopTimerRef, void *);$/;"	p	file:	signature:(EventLoopTimerRef, void *)
timer_proc	vim/vim/src/if_mzsch.c	/^static gboolean timer_proc(gpointer);$/;"	p	file:
timer_proc	vim/vim/src/if_mzsch.c	/^static gint timer_proc(gpointer);$/;"	p	file:
timer_proc	vim/vim/src/if_mzsch.c	/^static void CALLBACK timer_proc(HWND, UINT, UINT_PTR, DWORD);$/;"	p	file:
timer_proc	vim/vim/src/if_mzsch.c	/^static void timer_proc(XtPointer, XtIntervalId *);$/;"	p	file:	signature:(XtPointer, XtIntervalId *)
timer_proc	vim/vim/src/if_mzsch.c	/^timer_proc(HWND hwnd UNUSED, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED, DWORD dwTime UNUSED)$/;"	f	file:	signature:(HWND hwnd UNUSED, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED, DWORD dwTime UNUSED)
timestamp_atom	vim/vim/src/ui.c	/^static Atom	timestamp_atom;	\/* Used to get a timestamp *\/$/;"	v	file:
tip	vim/vim/src/structs.h	/^    BalloonEval *tip;		    \/* tooltip for this menu item *\/$/;"	m	struct:VimMenu	access:public
title	vim/vim/src/hardcopy.c	/^    char_u  title[256];$/;"	m	struct:prt_ps_resource_S	file:	access:public
tl_buffer	vim/vim/src/terminal.c	/^    buf_T	*tl_buffer;$/;"	m	struct:terminal_S	file:	access:public
tl_cols	vim/vim/src/terminal.c	/^    int		tl_cols;$/;"	m	struct:terminal_S	file:	access:public
tl_cols_fixed	vim/vim/src/terminal.c	/^    int		tl_cols_fixed;$/;"	m	struct:terminal_S	file:	access:public
tl_cursor	vim/vim/src/terminal.c	/^    pos_T	tl_cursor;$/;"	m	struct:terminal_S	file:	access:public
tl_cursor_visible	vim/vim/src/terminal.c	/^    int		tl_cursor_visible;$/;"	m	struct:terminal_S	file:	access:public
tl_dirty_row_end	vim/vim/src/terminal.c	/^    int		tl_dirty_row_end;   \/* row below last one to update *\/$/;"	m	struct:terminal_S	file:	access:public
tl_dirty_row_start	vim/vim/src/terminal.c	/^    int		tl_dirty_row_start; \/* -1 if nothing dirty *\/$/;"	m	struct:terminal_S	file:	access:public
tl_job	vim/vim/src/terminal.c	/^    job_T	*tl_job;$/;"	m	struct:terminal_S	file:	access:public
tl_next	vim/vim/src/terminal.c	/^    term_T	*tl_next;$/;"	m	struct:terminal_S	file:	access:public
tl_rows	vim/vim/src/terminal.c	/^    int		tl_rows;$/;"	m	struct:terminal_S	file:	access:public
tl_rows_fixed	vim/vim/src/terminal.c	/^    int		tl_rows_fixed;$/;"	m	struct:terminal_S	file:	access:public
tl_status_text	vim/vim/src/terminal.c	/^    char_u	*tl_status_text; \/* NULL or allocated *\/$/;"	m	struct:terminal_S	file:	access:public
tl_title	vim/vim/src/terminal.c	/^    char_u	*tl_title; \/* NULL or allocated *\/$/;"	m	struct:terminal_S	file:	access:public
tl_vterm	vim/vim/src/terminal.c	/^    VTerm	*tl_vterm;$/;"	m	struct:terminal_S	file:	access:public
tl_winpty	vim/vim/src/terminal.c	/^    void	*tl_winpty;$/;"	m	struct:terminal_S	file:	access:public
tl_winpty_config	vim/vim/src/terminal.c	/^    void	*tl_winpty_config;$/;"	m	struct:terminal_S	file:	access:public
tls_space	vim/vim/src/if_mzsch.c	/^static THREAD_LOCAL void *tls_space;$/;"	v	file:
tls_space	vim/vim/src/if_mzsch.c	/^static __thread void *tls_space;$/;"	v	file:
tltoa	vim/vim/src/term.c	/^tltoa(unsigned long i)$/;"	f	signature:(unsigned long i)
tm	vim/vim/src/structs.h	/^    proftime_T	tm;	\/* for a time limit *\/$/;"	m	struct:__anon201	access:public
tn_did_filefind_init	vim/vim/src/structs.h	/^    int		tn_did_filefind_init;$/;"	m	struct:__anon208	access:public
tn_hf_idx	vim/vim/src/structs.h	/^    int		tn_hf_idx;$/;"	m	struct:__anon208	access:public
tn_np	vim/vim/src/structs.h	/^    char_u	*tn_np;		\/* current position in tn_tags *\/$/;"	m	struct:__anon208	access:public
tn_search_ctx	vim/vim/src/structs.h	/^    void	*tn_search_ctx;$/;"	m	struct:__anon208	access:public
tn_tags	vim/vim/src/structs.h	/^    char_u	*tn_tags;	\/* value of 'tags' when starting *\/$/;"	m	struct:__anon208	access:public
to	vim/vim/runtime/tutor/tutor.cs	/^     Vim je velmi výkonný editor, který má pøíli¹ mnoho pøíkazù na to, aby$/;"	p
to	vim/vim/runtime/tutor/tutor.cs	/^     dostateèné mno¾ství pøíkazù na to, aby bylo mo¾né pou¾ívat Vim jako$/;"	p
to	vim/vim/src/digraph.c	/^    char_u	*to;$/;"	m	struct:__anon153	file:	access:public
to	vim/vim/src/menu.c	/^    char_u	*to;		\/* translated name *\/$/;"	m	struct:__anon213	file:	access:public
to	vim/vim/src/option.c	/^    int     to;$/;"	m	struct:__anon160	file:	access:public
toF_Rjoin	vim/vim/src/farsi.c	/^toF_Rjoin(int c)$/;"	f	file:	signature:(int c)
toF_TyA	vim/vim/src/farsi.c	/^toF_TyA(int c)$/;"	f	file:	signature:(int c)
toF_TyB	vim/vim/src/farsi.c	/^toF_TyB(int c)$/;"	f	file:	signature:(int c)
toF_Xor_X_	vim/vim/src/farsi.c	/^toF_Xor_X_(int c)$/;"	f	file:	signature:(int c)
toF_ending	vim/vim/src/farsi.c	/^toF_ending(int c)$/;"	f	file:	signature:(int c)
toF_leading	vim/vim/src/farsi.c	/^toF_leading(int c)$/;"	f	file:	signature:(int c)
toLower	vim/vim/src/mbyte.c	/^static convertStruct toLower[] =$/;"	v	file:
toUpper	vim/vim/src/mbyte.c	/^static convertStruct toUpper[] =$/;"	v	file:
to_device_units	vim/vim/src/hardcopy.c	/^static float to_device_units(int idx, double physsize, int def_number);$/;"	p	file:	signature:(int idx, double physsize, int def_number)
to_device_units	vim/vim/src/hardcopy.c	/^to_device_units(int idx, double physsize, int def_number)$/;"	f	file:	signature:(int idx, double physsize, int def_number)
to_device_units	vim/vim/src/os_mswin.c	/^to_device_units(int idx, int dpi, int physsize, int offset, int def_number)$/;"	f	file:	signature:(int idx, int dpi, int physsize, int offset, int def_number)
to_fp	vim/vim/src/if_cscope.h	/^    FILE *	    to_fp;	\/* to cscope: FILE. *\/$/;"	m	struct:csi	access:public
todo	vim/vim/src/if_py_both.h	/^    long_u	todo;$/;"	m	struct:__anon101	access:public
tofree	vim/vim/src/list.c	/^    char_u	*tofree;$/;"	m	struct:join_S	file:	access:public
toggle_Magic	vim/vim/src/regexp.c	/^toggle_Magic(int x)$/;"	f	file:	signature:(int x)
toggle_bat_choice	vim/vim/src/dosinst.c	/^toggle_bat_choice(int idx)$/;"	f	file:	signature:(int idx)
toggle_shortcut_choice	vim/vim/src/dosinst.c	/^toggle_shortcut_choice(int idx)$/;"	f	signature:(int idx)
toggle_startmenu_choice	vim/vim/src/dosinst.c	/^toggle_startmenu_choice(int idx)$/;"	f	file:	signature:(int idx)
toggle_tearoff	vim/vim/src/gui_motif.c	/^static void toggle_tearoff(Widget wid);$/;"	p	file:	signature:(Widget wid)
toggle_tearoff	vim/vim/src/gui_motif.c	/^toggle_tearoff(Widget wid)$/;"	f	file:	signature:(Widget wid)
tolower_tab	vim/vim/src/globals.h	/^EXTERN char_u	tolower_tab[256];	\/* table for tolower() *\/$/;"	v
tom	vim/vim/runtime/tutor/tutor.cs	/^     na tom, kolik èasu strávíte pøezku¹ováním.$/;"	p
toolBar	vim/vim/src/gui_athena.c	/^static Widget toolBar = (Widget)0;$/;"	v	file:
toolBar	vim/vim/src/gui_motif.c	/^static Widget toolBar;$/;"	v	file:
toolBarFrame	vim/vim/src/gui_motif.c	/^static Widget toolBarFrame;$/;"	v	file:
toolbar	vim/vim/src/gui.h	/^    GtkWidget	*toolbar;	    \/* toolbar *\/$/;"	m	struct:Gui	access:public
toolbar_button_focus_in_event	vim/vim/src/gui_gtk.c	/^toolbar_button_focus_in_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventFocus *event UNUSED, gpointer data UNUSED)
toolbar_flags	vim/vim/src/option.h	/^EXTERN unsigned toolbar_flags;$/;"	v
toolbar_h	vim/vim/src/gui.h	/^    GtkWidget	*toolbar_h;	    \/* toolbar handle *\/$/;"	m	struct:Gui	access:public
toolbar_height	vim/vim/src/gui.h	/^    int		toolbar_height;	    \/* height of the toolbar *\/$/;"	m	struct:Gui	access:public
toolbar_height	vim/vim/src/gui.h	/^    int		toolbar_height;$/;"	m	struct:Gui	access:public
toolbar_names	vim/vim/src/menu.c	/^static const char *toolbar_names[] =$/;"	v	file:
toolbar_wndproc	vim/vim/src/gui_w32.c	/^static LRESULT CALLBACK toolbar_wndproc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);$/;"	p	file:	signature:(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
toolbar_wndproc	vim/vim/src/gui_w32.c	/^toolbar_wndproc($/;"	f	file:	signature:( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
toolbarbutton_enter_cb	vim/vim/src/gui_motif.c	/^static void toolbarbutton_enter_cb(Widget, XtPointer, XEvent *, Boolean *);$/;"	p	file:	signature:(Widget, XtPointer, XEvent *, Boolean *)
toolbarbutton_enter_cb	vim/vim/src/gui_motif.c	/^toolbarbutton_enter_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data, XEvent *event UNUSED, Boolean *cont UNUSED)
toolbarbutton_leave_cb	vim/vim/src/gui_motif.c	/^static void toolbarbutton_leave_cb(Widget, XtPointer, XEvent *, Boolean *);$/;"	p	file:	signature:(Widget, XtPointer, XEvent *, Boolean *)
toolbarbutton_leave_cb	vim/vim/src/gui_motif.c	/^toolbarbutton_leave_cb($/;"	f	file:	signature:( Widget w UNUSED, XtPointer client_data UNUSED, XEvent *event UNUSED, Boolean *cont UNUSED)
tooltip_bg_pixel	vim/vim/src/gui.h	/^    guicolor_T	tooltip_bg_pixel;	\/* tooltip background color *\/$/;"	m	struct:Gui	access:public
tooltip_fg_pixel	vim/vim/src/gui.h	/^    guicolor_T	tooltip_fg_pixel;	\/* tooltip foreground color *\/$/;"	m	struct:Gui	access:public
tooltip_fontset	vim/vim/src/gui.h	/^    XFontSet	tooltip_fontset;	\/* tooltip fontset *\/$/;"	m	struct:Gui	access:public
top	vim/vim/src/gui.h	/^    int		top;		\/* Top of scroll bar (chars from row 0) *\/$/;"	m	struct:GuiScrollbar	access:public
top	vim/vim/src/gui_at_sb.h	/^    float	  top;		\/* What percent is above the win's top *\/$/;"	m	struct:__anon84	access:public
topLeft	vim/vim/src/gui_mac.c	126;"	d	file:
topLevelShellClassRec	vim/vim/src/gui_gtk_vms.h	671;"	d
topLevelShellWidgetClass	vim/vim/src/gui_gtk_vms.h	672;"	d
topLoc	vim/vim/src/gui_at_sb.h	/^    Position	  topLoc;	\/* Pixel that corresponds to top *\/$/;"	m	struct:__anon84	access:public
top_bot_msg	vim/vim/src/globals.h	/^EXTERN char top_bot_msg[] INIT(= N_("search hit TOP, continuing at BOTTOM"));$/;"	v
top_file_num	vim/vim/src/buffer.c	/^static int  top_file_num = 1;		\/* highest file number *\/$/;"	v	file:
top_shadow_GC	vim/vim/src/gui_at_sb.h	/^    GC		top_shadow_GC;$/;"	m	struct:__anon84	access:public
top_shadow_contrast	vim/vim/src/gui_at_sb.h	/^    int		top_shadow_contrast;$/;"	m	struct:__anon84	access:public
top_shadow_pixel	vim/vim/src/gui_at_sb.h	/^    Pixel	top_shadow_pixel;$/;"	m	struct:__anon84	access:public
topback	vim/vim/runtime/doc/makehtml.awk	/^function topback () {$/;"	f
topback	vim/vim/runtime/doc/maketags.awk	/^function topback () {$/;"	f
topframe	vim/vim/src/globals.h	/^EXTERN frame_T	*topframe;	\/* top of the window frame tree *\/$/;"	v
topline_back	vim/vim/src/move.c	/^static void topline_back(lineoff_T *lp);$/;"	p	file:	signature:(lineoff_T *lp)
topline_back	vim/vim/src/move.c	/^topline_back(lineoff_T *lp)$/;"	f	file:	signature:(lineoff_T *lp)
topline_botline	vim/vim/src/move.c	/^static void topline_botline(lineoff_T *lp);$/;"	p	file:	signature:(lineoff_T *lp)
topline_botline	vim/vim/src/move.c	/^topline_botline(lineoff_T *lp)$/;"	f	file:	signature:(lineoff_T *lp)
toplnum	vim/vim/src/structs.h	/^    linenr_T	toplnum;		\/* top buffer line *\/$/;"	m	struct:posmatch	access:public
topmsg	vim/vim/src/tag.c	/^static char_u *topmsg = (char_u *)N_("E556: at top of tag stack");$/;"	v	file:
total	vim/vim/src/structs.h	/^    proftime_T	total;		\/* total time used *\/$/;"	m	struct:__anon198	access:public
total	vim/vim/src/structs.h	/^  UINT32_T total[2];$/;"	m	struct:__anon209	access:public
total	vim/vim/src/syntax.c	/^    proftime_T	total;$/;"	m	struct:__anon139	file:	access:public
total_mem_used	vim/vim/src/memfile.c	/^static long_u	total_mem_used = 0;	\/* total memory used for memfiles *\/$/;"	v	file:
toupper_tab	vim/vim/src/globals.h	/^EXTERN char_u	toupper_tab[256];	\/* table for toupper() *\/$/;"	v
tp_ch_used	vim/vim/src/structs.h	/^    long	    tp_ch_used;	    \/* value of 'cmdheight' when frame size$/;"	m	struct:tabpage_S	access:public
tp_curwin	vim/vim/src/structs.h	/^    win_T	    *tp_curwin;	    \/* current window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_diff_invalid	vim/vim/src/structs.h	/^    int		    tp_diff_invalid;	\/* list of diffs is outdated *\/$/;"	m	struct:tabpage_S	access:public
tp_diffbuf	vim/vim/src/structs.h	/^    buf_T	    *(tp_diffbuf[DB_COUNT]);$/;"	m	struct:tabpage_S	access:public
tp_first_diff	vim/vim/src/structs.h	/^    diff_T	    *tp_first_diff;$/;"	m	struct:tabpage_S	access:public
tp_firstwin	vim/vim/src/structs.h	/^    win_T	    *tp_firstwin;   \/* first window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_lastwin	vim/vim/src/structs.h	/^    win_T	    *tp_lastwin;    \/* last window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_next	vim/vim/src/structs.h	/^    tabpage_T	    *tp_next;	    \/* next tabpage or NULL *\/$/;"	m	struct:tabpage_S	access:public
tp_old_Columns	vim/vim/src/structs.h	/^    long	    tp_old_Columns; \/* Columns when Tab page was left *\/$/;"	m	struct:tabpage_S	access:public
tp_old_Rows	vim/vim/src/structs.h	/^    long	    tp_old_Rows;    \/* Rows when Tab page was left *\/$/;"	m	struct:tabpage_S	access:public
tp_prev_which_scrollbars	vim/vim/src/structs.h	/^    int		    tp_prev_which_scrollbars[3];$/;"	m	struct:tabpage_S	access:public
tp_prevwin	vim/vim/src/structs.h	/^    win_T	    *tp_prevwin;    \/* previous window in this Tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_python3_ref	vim/vim/src/structs.h	/^    void	    *tp_python3_ref;	\/* The Python value for this tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_python_ref	vim/vim/src/structs.h	/^    void	    *tp_python_ref;	\/* The Python value for this tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_snapshot	vim/vim/src/structs.h	/^    frame_T	    *(tp_snapshot[SNAP_COUNT]);  \/* window layout snapshots *\/$/;"	m	struct:tabpage_S	access:public
tp_topframe	vim/vim/src/structs.h	/^    frame_T	    *tp_topframe;   \/* topframe for the windows *\/$/;"	m	struct:tabpage_S	access:public
tp_vars	vim/vim/src/structs.h	/^    dict_T	    *tp_vars;	    \/* internal variables, local to tab page *\/$/;"	m	struct:tabpage_S	access:public
tp_winvar	vim/vim/src/structs.h	/^    dictitem_T	    tp_winvar;	    \/* variable for "t:" Dictionary *\/$/;"	m	struct:tabpage_S	access:public
tputs	vim/vim/src/termlib.c	/^tputs($/;"	f	signature:( char *cp, int affcnt, void (*outc)(unsigned int))
tr_callback	vim/vim/src/structs.h	/^    char_u	*tr_callback;	    \/* allocated *\/$/;"	m	struct:timer_S	access:public
tr_due	vim/vim/src/structs.h	/^    proftime_T	tr_due;		    \/* when the callback is to be invoked *\/$/;"	m	struct:timer_S	access:public
tr_emsg_count	vim/vim/src/structs.h	/^    int		tr_emsg_count;$/;"	m	struct:timer_S	access:public
tr_firing	vim/vim/src/structs.h	/^    char	tr_firing;	    \/* when TRUE callback is being called *\/$/;"	m	struct:timer_S	access:public
tr_id	vim/vim/src/structs.h	/^    long	tr_id;$/;"	m	struct:timer_S	access:public
tr_interval	vim/vim/src/structs.h	/^    long	tr_interval;	    \/* msec *\/$/;"	m	struct:timer_S	access:public
tr_next	vim/vim/src/structs.h	/^    timer_T	*tr_next;$/;"	m	struct:timer_S	access:public
tr_partial	vim/vim/src/structs.h	/^    partial_T	*tr_partial;$/;"	m	struct:timer_S	access:public
tr_paused	vim/vim/src/structs.h	/^    char	tr_paused;	    \/* when TRUE callback is not invoked *\/$/;"	m	struct:timer_S	access:public
tr_prev	vim/vim/src/structs.h	/^    timer_T	*tr_prev;$/;"	m	struct:timer_S	access:public
tr_repeat	vim/vim/src/structs.h	/^    int		tr_repeat;	    \/* number of times to repeat, -1 forever *\/$/;"	m	struct:timer_S	access:public
trans_characters	vim/vim/src/charset.c	/^trans_characters($/;"	f	signature:( char_u *buf, int bufsize)
trans_function_name	vim/vim/src/userfunc.c	/^trans_function_name($/;"	f	signature:( char_u **pp, int skip, int flags, funcdict_T *fdp, partial_T **partial)
trans_special	vim/vim/src/misc2.c	/^trans_special($/;"	f	signature:( char_u **srcp, char_u *dst, int keycode, int in_string)
transchar	vim/vim/src/charset.c	/^transchar(int c)$/;"	f	signature:(int c)
transchar_buf	vim/vim/src/charset.c	/^static char_u	transchar_buf[7];$/;"	v	file:
transchar_byte	vim/vim/src/charset.c	/^transchar_byte(int c)$/;"	f	signature:(int c)
transchar_byte	vim/vim/src/vim.h	2135;"	d
transchar_hex	vim/vim/src/charset.c	/^transchar_hex(char_u *buf, int c)$/;"	f	signature:(char_u *buf, int c)
transchar_nonprint	vim/vim/src/charset.c	/^transchar_nonprint(char_u *buf, int c)$/;"	f	signature:(char_u *buf, int c)
transientShellWidgetClass	vim/vim/src/gui_gtk_vms.h	673;"	d
translate_mapping	vim/vim/src/term.c	/^translate_mapping($/;"	f	signature:( char_u *str, int expmap)
translate_mnemonic_tag	vim/vim/src/gui_gtk.c	/^translate_mnemonic_tag(char_u *name, int use_mnemonic)$/;"	f	file:	signature:(char_u *name, int use_mnemonic)
translate_pango_attributes	vim/vim/src/mbyte.c	/^translate_pango_attributes(PangoAttrIterator *iter)$/;"	f	file:	signature:(PangoAttrIterator *iter)
translated_function_exists	vim/vim/src/userfunc.c	/^translated_function_exists(char_u *name)$/;"	f	signature:(char_u *name)
transstr	vim/vim/src/charset.c	/^transstr(char_u *s)$/;"	f	signature:(char_u *s)
trash_input_buf	vim/vim/src/ui.c	/^trash_input_buf(void)$/;"	f	signature:(void)
traverse	vim/vim/src/if_py_both.h	/^    traversefun traverse;$/;"	m	struct:__anon99	access:public
traversefun	vim/vim/src/if_py_both.h	/^typedef int (*traversefun)(void *, visitproc, void *);$/;"	t
tree_add_word	vim/vim/src/spellfile.c	/^static int tree_add_word(spellinfo_T *spin, char_u *word, wordnode_T *tree, int flags, int region, int affixID);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *word, wordnode_T *tree, int flags, int region, int affixID)
tree_add_word	vim/vim/src/spellfile.c	/^tree_add_word($/;"	f	file:	signature:( spellinfo_T *spin, char_u *word, wordnode_T *root, int flags, int region, int affixID)
tree_count_words	vim/vim/src/spellfile.c	/^tree_count_words(char_u *byts, idx_T *idxs)$/;"	f	file:	signature:(char_u *byts, idx_T *idxs)
trigger_cursorhold	vim/vim/src/fileio.c	/^trigger_cursorhold(void)$/;"	f	signature:(void)
trigger_optionsset_string	vim/vim/src/option.c	/^trigger_optionsset_string($/;"	f	file:	signature:( int opt_idx, int opt_flags, char_u *oldval, char_u *newval)
trunc_string	vim/vim/src/message.c	/^trunc_string($/;"	f	signature:( char_u *s, char_u *buf, int room_in, int buflen)
truncate_fold	vim/vim/src/fold.c	/^truncate_fold(fold_T *fp, linenr_T end)$/;"	f	file:	signature:(fold_T *fp, linenr_T end)
truncate_line	vim/vim/src/misc1.c	/^truncate_line($/;"	f	signature:( int fixpos)
truncate_spaces	vim/vim/src/edit.c	/^truncate_spaces(char_u *line)$/;"	f	signature:(char_u *line)
trylevel	vim/vim/src/ex_docmd.c	/^    int		trylevel;$/;"	m	struct:dbg_stuff	file:	access:public
trylevel	vim/vim/src/globals.h	/^EXTERN int trylevel INIT(= 0);$/;"	v
trystate_S	vim/vim/src/spell.c	/^typedef struct trystate_S$/;"	s	file:
trystate_S::ts_arridx	vim/vim/src/spell.c	/^    idx_T	ts_arridx;	\/* index in tree array, start of node *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_complen	vim/vim/src/spell.c	/^    char_u	ts_complen;	\/* nr of compound words used *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_compsplit	vim/vim/src/spell.c	/^    char_u	ts_compsplit;	\/* index for "compflags" where word was spit *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_curi	vim/vim/src/spell.c	/^    short	ts_curi;	\/* index in list of child nodes *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_delidx	vim/vim/src/spell.c	/^    char_u	ts_delidx;	\/* index in fword for char that was deleted,$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_fcharstart	vim/vim/src/spell.c	/^    char_u	ts_fcharstart;	\/* index in fword where badword char started *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_fidx	vim/vim/src/spell.c	/^    char_u	ts_fidx;	\/* index in fword[], case-folded bad word *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_fidxtry	vim/vim/src/spell.c	/^    char_u	ts_fidxtry;	\/* ts_fidx at which bytes may be changed *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_flags	vim/vim/src/spell.c	/^    char_u	ts_flags;	\/* TSF_ flags *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_isdiff	vim/vim/src/spell.c	/^    char_u	ts_isdiff;	\/* DIFF_ values *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_prefixdepth	vim/vim/src/spell.c	/^    char_u	ts_prefixdepth;	\/* stack depth for end of prefix or$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_prewordlen	vim/vim/src/spell.c	/^    char_u	ts_prewordlen;	\/* length of word in "preword[]" *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_save_badflags	vim/vim/src/spell.c	/^    char_u	ts_save_badflags;   \/* su_badflags saved here *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_score	vim/vim/src/spell.c	/^    int		ts_score;	\/* score *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_splitfidx	vim/vim/src/spell.c	/^    char_u	ts_splitfidx;	\/* "ts_fidx" at word split *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_splitoff	vim/vim/src/spell.c	/^    char_u	ts_splitoff;	\/* index in "tword" after last split *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_state	vim/vim/src/spell.c	/^    state_T	ts_state;	\/* state at this level, STATE_ *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_tcharidx	vim/vim/src/spell.c	/^    char_u	ts_tcharidx;	\/* current byte index in tword character *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_tcharlen	vim/vim/src/spell.c	/^    char_u	ts_tcharlen;	\/* number of bytes in tword character *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_S::ts_twordlen	vim/vim/src/spell.c	/^    char_u	ts_twordlen;	\/* valid length of tword[] *\/$/;"	m	struct:trystate_S	file:	access:public
trystate_T	vim/vim/src/spell.c	/^} trystate_T;$/;"	t	typeref:struct:trystate_S	file:
ts	vim/vim/src/gui_beval.h	/^    int			ts;		\/* tabstop setting for this buffer *\/$/;"	m	struct:BalloonEvalStruct	access:public
ts_arridx	vim/vim/src/spell.c	/^    idx_T	ts_arridx;	\/* index in tree array, start of node *\/$/;"	m	struct:trystate_S	file:	access:public
ts_complen	vim/vim/src/spell.c	/^    char_u	ts_complen;	\/* nr of compound words used *\/$/;"	m	struct:trystate_S	file:	access:public
ts_compsplit	vim/vim/src/spell.c	/^    char_u	ts_compsplit;	\/* index for "compflags" where word was spit *\/$/;"	m	struct:trystate_S	file:	access:public
ts_curi	vim/vim/src/spell.c	/^    short	ts_curi;	\/* index in list of child nodes *\/$/;"	m	struct:trystate_S	file:	access:public
ts_delidx	vim/vim/src/spell.c	/^    char_u	ts_delidx;	\/* index in fword for char that was deleted,$/;"	m	struct:trystate_S	file:	access:public
ts_fcharstart	vim/vim/src/spell.c	/^    char_u	ts_fcharstart;	\/* index in fword where badword char started *\/$/;"	m	struct:trystate_S	file:	access:public
ts_fidx	vim/vim/src/spell.c	/^    char_u	ts_fidx;	\/* index in fword[], case-folded bad word *\/$/;"	m	struct:trystate_S	file:	access:public
ts_fidxtry	vim/vim/src/spell.c	/^    char_u	ts_fidxtry;	\/* ts_fidx at which bytes may be changed *\/$/;"	m	struct:trystate_S	file:	access:public
ts_flags	vim/vim/src/spell.c	/^    char_u	ts_flags;	\/* TSF_ flags *\/$/;"	m	struct:trystate_S	file:	access:public
ts_isdiff	vim/vim/src/spell.c	/^    char_u	ts_isdiff;	\/* DIFF_ values *\/$/;"	m	struct:trystate_S	file:	access:public
ts_prefixdepth	vim/vim/src/spell.c	/^    char_u	ts_prefixdepth;	\/* stack depth for end of prefix or$/;"	m	struct:trystate_S	file:	access:public
ts_prewordlen	vim/vim/src/spell.c	/^    char_u	ts_prewordlen;	\/* length of word in "preword[]" *\/$/;"	m	struct:trystate_S	file:	access:public
ts_save_badflags	vim/vim/src/spell.c	/^    char_u	ts_save_badflags;   \/* su_badflags saved here *\/$/;"	m	struct:trystate_S	file:	access:public
ts_score	vim/vim/src/spell.c	/^    int		ts_score;	\/* score *\/$/;"	m	struct:trystate_S	file:	access:public
ts_splitfidx	vim/vim/src/spell.c	/^    char_u	ts_splitfidx;	\/* "ts_fidx" at word split *\/$/;"	m	struct:trystate_S	file:	access:public
ts_splitoff	vim/vim/src/spell.c	/^    char_u	ts_splitoff;	\/* index in "tword" after last split *\/$/;"	m	struct:trystate_S	file:	access:public
ts_state	vim/vim/src/spell.c	/^    state_T	ts_state;	\/* state at this level, STATE_ *\/$/;"	m	struct:trystate_S	file:	access:public
ts_tcharidx	vim/vim/src/spell.c	/^    char_u	ts_tcharidx;	\/* current byte index in tword character *\/$/;"	m	struct:trystate_S	file:	access:public
ts_tcharlen	vim/vim/src/spell.c	/^    char_u	ts_tcharlen;	\/* number of bytes in tword character *\/$/;"	m	struct:trystate_S	file:	access:public
ts_twordlen	vim/vim/src/spell.c	/^    char_u	ts_twordlen;	\/* valid length of tword[] *\/$/;"	m	struct:trystate_S	file:	access:public
ttest	vim/vim/src/term.c	/^ttest(int pairs)$/;"	f	signature:(int pairs)
tty_fail	vim/vim/src/structs.h	/^    int		tty_fail;		\/* exit if not a tty *\/$/;"	m	struct:__anon210	access:public
ttym_flags	vim/vim/src/option.h	/^EXTERN unsigned ttym_flags;$/;"	v
tv	vim/vim/src/quickfix.c	/^    typval_T	*tv;$/;"	m	struct:__anon13	file:	access:public
tv2string	vim/vim/src/eval.c	/^tv2string($/;"	f	signature:( typval_T *tv, char_u **tofree, char_u *numbuf, int copyID)
tv_check_lock	vim/vim/src/eval.c	/^tv_check_lock(int lock, char_u *name, int use_gettext)$/;"	f	signature:(int lock, char_u *name, int use_gettext)
tv_equal	vim/vim/src/eval.c	/^tv_equal($/;"	f	signature:( typval_T *tv1, typval_T *tv2, int ic, int recursive)
tv_equal_recurse_limit	vim/vim/src/eval.c	/^static int tv_equal_recurse_limit;$/;"	v	file:
tv_float	vim/vim/src/message.c	/^static double tv_float(typval_T *tvs, int *idxp);$/;"	p	file:	signature:(typval_T *tvs, int *idxp)
tv_float	vim/vim/src/message.c	/^tv_float(typval_T *tvs, int *idxp)$/;"	f	file:	signature:(typval_T *tvs, int *idxp)
tv_islocked	vim/vim/src/evalfunc.c	/^tv_islocked(typval_T *tv)$/;"	f	file:	signature:(typval_T *tv)
tv_nr	vim/vim/src/message.c	/^static varnumber_T tv_nr(typval_T *tvs, int *idxp);$/;"	p	file:	signature:(typval_T *tvs, int *idxp)
tv_nr	vim/vim/src/message.c	/^tv_nr(typval_T *tvs, int *idxp)$/;"	f	file:	signature:(typval_T *tvs, int *idxp)
tv_op	vim/vim/src/eval.c	/^static int tv_op(typval_T *tv1, typval_T *tv2, char_u  *op);$/;"	p	file:	signature:(typval_T *tv1, typval_T *tv2, char_u *op)
tv_op	vim/vim/src/eval.c	/^tv_op(typval_T *tv1, typval_T *tv2, char_u *op)$/;"	f	file:	signature:(typval_T *tv1, typval_T *tv2, char_u *op)
tv_str	vim/vim/src/message.c	/^static char *tv_str(typval_T *tvs, int *idxp, char_u **tofree);$/;"	p	file:	signature:(typval_T *tvs, int *idxp, char_u **tofree)
tv_str	vim/vim/src/message.c	/^tv_str(typval_T *tvs, int *idxp, char_u **tofree)$/;"	f	file:	signature:(typval_T *tvs, int *idxp, char_u **tofree)
tw	vim/vim/runtime/doc/Makefile	/^	sed -e 's\/[ 	]*\\*[-a-zA-Z0-9.]*\\*\/\/g' -e 's\/vim:tw=78:\/\/' \\$/;"	m
txtlen	vim/vim/src/winclip.c	/^    int txtlen;		\/* length of CF_TEXT in bytes *\/$/;"	m	struct:__anon22	file:	access:public
type	vim/vim/src/gui.h	/^    int		type;		\/* one of SBAR_{LEFT,RIGHT,BOTTOM} *\/$/;"	m	struct:GuiScrollbar	access:public
type	vim/vim/src/hardcopy.c	/^    int		type;$/;"	m	struct:prt_dsc_comment_S	file:	access:public
type	vim/vim/src/hardcopy.c	/^    int		type;$/;"	m	struct:prt_dsc_line_S	file:	access:public
type	vim/vim/src/hardcopy.c	/^    int     type;$/;"	m	struct:prt_ps_resource_S	file:	access:public
type	vim/vim/src/libvterm/src/encoding.c	/^  VTermEncodingType type;$/;"	m	struct:__anon41	file:	access:public
type	vim/vim/src/libvterm/src/keyboard.c	/^  } type;$/;"	m	struct:__anon31	typeref:enum:__anon31::__anon32	file:	access:public
type	vim/vim/src/os_vms.c	/^    char	type;$/;"	m	struct:__anon23	file:	access:public
type	vim/vim/src/quickfix.c	/^    int		type;$/;"	m	struct:__anon14	file:	access:public
type	vim/vim/src/structs.h	/^    except_type_T	type;		\/* exception type *\/$/;"	m	struct:vim_exception	access:public
type	vim/vim/src/winclip.c	/^    int type;		\/* MCHAR, MBLOCK or MLINE *\/$/;"	m	struct:__anon22	file:	access:public
typeahead	vim/vim/src/os_vms.c	/^} typeahead;$/;"	v	typeref:struct:typeahead_st
typeahead_char	vim/vim/src/getchar.c	/^static int typeahead_char = 0;		\/* typeahead char that's not flushed *\/$/;"	v	file:
typeahead_noflush	vim/vim/src/getchar.c	/^typeahead_noflush(int c)$/;"	f	signature:(int c)
typeahead_st	vim/vim/src/os_vms.c	/^struct typeahead_st {$/;"	s	file:
typeahead_st::firstchar	vim/vim/src/os_vms.c	/^    unsigned char  firstchar;$/;"	m	struct:typeahead_st	file:	access:public
typeahead_st::numchars	vim/vim/src/os_vms.c	/^    unsigned short numchars;$/;"	m	struct:typeahead_st	file:	access:public
typeahead_st::reserved0	vim/vim/src/os_vms.c	/^    unsigned char  reserved0;$/;"	m	struct:typeahead_st	file:	access:public
typeahead_st::reserved1	vim/vim/src/os_vms.c	/^    unsigned long  reserved1;$/;"	m	struct:typeahead_st	file:	access:public
typebuf	vim/vim/src/globals.h	/^EXTERN typebuf_T typebuf		\/* typeahead buffer *\/$/;"	v
typebuf_T	vim/vim/src/structs.h	/^} typebuf_T;$/;"	t	typeref:struct:__anon179
typebuf_changed	vim/vim/src/getchar.c	/^typebuf_changed($/;"	f	signature:( int tb_change_cnt)
typebuf_init	vim/vim/src/getchar.c	/^static char_u	typebuf_init[TYPELEN_INIT];	\/* initial typebuf.tb_buf *\/$/;"	v	file:
typebuf_maplen	vim/vim/src/getchar.c	/^typebuf_maplen(void)$/;"	f	signature:(void)
typebuf_typed	vim/vim/src/getchar.c	/^typebuf_typed(void)$/;"	f	signature:(void)
typebuf_valid	vim/vim/src/structs.h	/^    int			typebuf_valid;	    \/* TRUE when save_typebuf valid *\/$/;"	m	struct:__anon180	access:public
typebuf_was_filled	vim/vim/src/globals.h	/^EXTERN int	typebuf_was_filled INIT(= FALSE); \/* received text from client$/;"	v
typed	vim/vim/runtime/tools/demoserver.py	/^        typed = sys.stdin.readline()$/;"	v	class:ThreadedTCPServer
typed	vim/vim/src/testdir/test_channel_pipe.py	/^        typed = sys.stdin.readline()$/;"	v
typeinfo	vim/vim/src/if_ole.cpp	/^    ITypeInfo *typeinfo;$/;"	m	class:FINAL	file:	access:private
typenr	vim/vim/src/structs.h	/^    int		typenr;		\/* typenr of sign *\/$/;"	m	struct:signlist	access:public
typval_T	vim/vim/src/structs.h	/^} typval_T;$/;"	t	typeref:struct:__anon184
u32_T	vim/vim/src/crypt_zip.c	/^typedef unsigned int u32_T;	\/* int is at least 32 bits *\/$/;"	t	file:
u32_T	vim/vim/src/crypt_zip.c	/^typedef unsigned long u32_T;	\/* long should be 32 bits or more *\/$/;"	t	file:
u7_status	vim/vim/src/term.c	/^static int u7_status = U7_GET;$/;"	v	file:
u8char_T	vim/vim/src/vim.h	/^typedef unsigned int u8char_T;	    \/* int is 32 bits *\/$/;"	t
u8char_T	vim/vim/src/vim.h	/^typedef unsigned long u8char_T;	    \/* long should be 32 bits or more *\/$/;"	t
u8char_T	vim/vim/src/vim.h	/^typedef unsigned short u8char_T;    \/* short should be 16 bits *\/$/;"	t
uFlags	vim/vim/src/gui_w32.c	/^	UINT uFlags;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
uFlags	vim/vim/src/gui_w32.c	/^    UINT	uFlags;$/;"	m	struct:tagNMTTDISPINFOA	file:	access:public
uFlags	vim/vim/src/gui_w32.c	/^    UINT	uFlags;$/;"	m	struct:tagNMTTDISPINFOW	file:	access:public
uFlags	vim/vim/src/gui_w32.c	/^    UINT       uFlags;$/;"	m	struct:tagNMTTDISPINFO_NEW	file:	access:public
uId	vim/vim/src/gui_w32.c	/^	UINT_PTR uId;$/;"	m	struct:tagTOOLINFOA_NEW	file:	access:public
uType	vim/vim/src/gui_w32.c	/^    UINT	uType;$/;"	m	struct:_signicon_t	file:	access:public
u_acute	vim/vim/src/regexp_nfa.c	806;"	d	file:
u_add_time	vim/vim/src/undo.c	/^static void u_add_time(char_u *buf, size_t buflen, time_t tt);$/;"	p	file:	signature:(char_u *buf, size_t buflen, time_t tt)
u_add_time	vim/vim/src/undo.c	/^u_add_time(char_u *buf, size_t buflen, time_t tt)$/;"	f	file:	signature:(char_u *buf, size_t buflen, time_t tt)
u_blockfree	vim/vim/src/undo.c	/^u_blockfree(buf_T *buf)$/;"	f	signature:(buf_T *buf)
u_check	vim/vim/src/undo.c	/^u_check(int newhead_may_be_NULL)$/;"	f	file:	signature:(int newhead_may_be_NULL)
u_check_tree	vim/vim/src/undo.c	/^u_check_tree(u_header_T *uhp,$/;"	f	file:	signature:(u_header_T *uhp, u_header_T *exp_uh_next, u_header_T *exp_uh_alt_prev)
u_circumflex	vim/vim/src/regexp_nfa.c	807;"	d	file:
u_clearall	vim/vim/src/undo.c	/^u_clearall(buf_T *buf)$/;"	f	signature:(buf_T *buf)
u_clearline	vim/vim/src/undo.c	/^u_clearline(void)$/;"	f	signature:(void)
u_compute_hash	vim/vim/src/undo.c	/^u_compute_hash(char_u *hash)$/;"	f	signature:(char_u *hash)
u_diaeresis	vim/vim/src/regexp_nfa.c	808;"	d	file:
u_doit	vim/vim/src/undo.c	/^static void u_doit(int count);$/;"	p	file:	signature:(int count)
u_doit	vim/vim/src/undo.c	/^u_doit(int startcount)$/;"	f	file:	signature:(int startcount)
u_entry	vim/vim/src/structs.h	/^struct u_entry$/;"	s
u_entry::ue_array	vim/vim/src/structs.h	/^    char_u	**ue_array;	\/* array of lines in undo block *\/$/;"	m	struct:u_entry	access:public
u_entry::ue_bot	vim/vim/src/structs.h	/^    linenr_T	ue_bot;		\/* number of line below undo block *\/$/;"	m	struct:u_entry	access:public
u_entry::ue_lcount	vim/vim/src/structs.h	/^    linenr_T	ue_lcount;	\/* linecount when u_save called *\/$/;"	m	struct:u_entry	access:public
u_entry::ue_magic	vim/vim/src/structs.h	/^    int		ue_magic;	\/* magic number to check allocation *\/$/;"	m	struct:u_entry	access:public
u_entry::ue_next	vim/vim/src/structs.h	/^    u_entry_T	*ue_next;	\/* pointer to next entry in list *\/$/;"	m	struct:u_entry	access:public
u_entry::ue_size	vim/vim/src/structs.h	/^    long	ue_size;	\/* number of lines in ue_array *\/$/;"	m	struct:u_entry	access:public
u_entry::ue_top	vim/vim/src/structs.h	/^    linenr_T	ue_top;		\/* number of line above undo block *\/$/;"	m	struct:u_entry	access:public
u_entry_T	vim/vim/src/structs.h	/^typedef struct u_entry u_entry_T;$/;"	t	typeref:struct:u_entry
u_eval_tree	vim/vim/src/undo.c	/^u_eval_tree(u_header_T *first_uhp, list_T *list)$/;"	f	signature:(u_header_T *first_uhp, list_T *list)
u_find_first_changed	vim/vim/src/undo.c	/^u_find_first_changed(void)$/;"	f	signature:(void)
u_free_uhp	vim/vim/src/undo.c	/^static void u_free_uhp(u_header_T *uhp);$/;"	p	file:	signature:(u_header_T *uhp)
u_free_uhp	vim/vim/src/undo.c	/^u_free_uhp(u_header_T *uhp)$/;"	f	file:	signature:(u_header_T *uhp)
u_freebranch	vim/vim/src/undo.c	/^static void u_freebranch(buf_T *buf, u_header_T *uhp, u_header_T **uhpp);$/;"	p	file:	signature:(buf_T *buf, u_header_T *uhp, u_header_T **uhpp)
u_freebranch	vim/vim/src/undo.c	/^u_freebranch($/;"	f	file:	signature:( buf_T *buf, u_header_T *uhp, u_header_T **uhpp)
u_freeentries	vim/vim/src/undo.c	/^static void u_freeentries(buf_T *buf, u_header_T *uhp, u_header_T **uhpp);$/;"	p	file:	signature:(buf_T *buf, u_header_T *uhp, u_header_T **uhpp)
u_freeentries	vim/vim/src/undo.c	/^u_freeentries($/;"	f	file:	signature:( buf_T *buf, u_header_T *uhp, u_header_T **uhpp)
u_freeentry	vim/vim/src/undo.c	/^static void u_freeentry(u_entry_T *, long);$/;"	p	file:	signature:(u_entry_T *, long)
u_freeentry	vim/vim/src/undo.c	/^u_freeentry(u_entry_T *uep, long n)$/;"	f	file:	signature:(u_entry_T *uep, long n)
u_freeheader	vim/vim/src/undo.c	/^static void u_freeheader(buf_T *buf, u_header_T *uhp, u_header_T **uhpp);$/;"	p	file:	signature:(buf_T *buf, u_header_T *uhp, u_header_T **uhpp)
u_freeheader	vim/vim/src/undo.c	/^u_freeheader($/;"	f	file:	signature:( buf_T *buf, u_header_T *uhp, u_header_T **uhpp)
u_get_headentry	vim/vim/src/undo.c	/^static u_entry_T *u_get_headentry(void);$/;"	p	file:	signature:(void)
u_get_headentry	vim/vim/src/undo.c	/^u_get_headentry(void)$/;"	f	file:	signature:(void)
u_get_undo_file_name	vim/vim/src/undo.c	/^u_get_undo_file_name(char_u *buf_ffname, int reading)$/;"	f	signature:(char_u *buf_ffname, int reading)
u_getbot	vim/vim/src/undo.c	/^static void u_getbot(void);$/;"	p	file:	signature:(void)
u_getbot	vim/vim/src/undo.c	/^u_getbot(void)$/;"	f	file:	signature:(void)
u_grave	vim/vim/src/regexp_nfa.c	805;"	d	file:
u_header	vim/vim/src/structs.h	/^struct u_header$/;"	s
u_header::__anon166::ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to next undo header in list *\/$/;"	m	union:u_header::__anon166	access:public
u_header::__anon166::seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon166	access:public
u_header::__anon167::ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to previous header in list *\/$/;"	m	union:u_header::__anon167	access:public
u_header::__anon167::seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon167	access:public
u_header::__anon168::ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to next header for alt. redo *\/$/;"	m	union:u_header::__anon168	access:public
u_header::__anon168::seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon168	access:public
u_header::__anon169::ptr	vim/vim/src/structs.h	/^	u_header_T *ptr;	\/* pointer to previous header for alt. redo *\/$/;"	m	union:u_header::__anon169	access:public
u_header::__anon169::seq	vim/vim/src/structs.h	/^	long	   seq;$/;"	m	union:u_header::__anon169	access:public
u_header::uh_alt_next	vim/vim/src/structs.h	/^    } uh_alt_next;$/;"	m	struct:u_header	typeref:union:u_header::__anon168	access:public
u_header::uh_alt_prev	vim/vim/src/structs.h	/^    } uh_alt_prev;$/;"	m	struct:u_header	typeref:union:u_header::__anon169	access:public
u_header::uh_cursor	vim/vim/src/structs.h	/^    pos_T	uh_cursor;	\/* cursor position before saving *\/$/;"	m	struct:u_header	access:public
u_header::uh_cursor_vcol	vim/vim/src/structs.h	/^    long	uh_cursor_vcol;$/;"	m	struct:u_header	access:public
u_header::uh_entry	vim/vim/src/structs.h	/^    u_entry_T	*uh_entry;	\/* pointer to first entry *\/$/;"	m	struct:u_header	access:public
u_header::uh_flags	vim/vim/src/structs.h	/^    int		uh_flags;	\/* see below *\/$/;"	m	struct:u_header	access:public
u_header::uh_getbot_entry	vim/vim/src/structs.h	/^    u_entry_T	*uh_getbot_entry; \/* pointer to where ue_bot must be set *\/$/;"	m	struct:u_header	access:public
u_header::uh_magic	vim/vim/src/structs.h	/^    int		uh_magic;	\/* magic number to check allocation *\/$/;"	m	struct:u_header	access:public
u_header::uh_namedm	vim/vim/src/structs.h	/^    pos_T	uh_namedm[NMARKS];	\/* marks before undo\/after redo *\/$/;"	m	struct:u_header	access:public
u_header::uh_next	vim/vim/src/structs.h	/^    } uh_next;$/;"	m	struct:u_header	typeref:union:u_header::__anon166	access:public
u_header::uh_prev	vim/vim/src/structs.h	/^    } uh_prev;$/;"	m	struct:u_header	typeref:union:u_header::__anon167	access:public
u_header::uh_save_nr	vim/vim/src/structs.h	/^    long	uh_save_nr;	\/* set when the file was saved after the$/;"	m	struct:u_header	access:public
u_header::uh_seq	vim/vim/src/structs.h	/^    long	uh_seq;		\/* sequence number, higher == newer undo *\/$/;"	m	struct:u_header	access:public
u_header::uh_time	vim/vim/src/structs.h	/^    time_T	uh_time;	\/* timestamp when the change was made *\/$/;"	m	struct:u_header	access:public
u_header::uh_visual	vim/vim/src/structs.h	/^    visualinfo_T uh_visual;	\/* Visual areas before undo\/after redo *\/$/;"	m	struct:u_header	access:public
u_header::uh_walk	vim/vim/src/structs.h	/^    int		uh_walk;	\/* used by undo_time() *\/$/;"	m	struct:u_header	access:public
u_header_T	vim/vim/src/structs.h	/^typedef struct u_header u_header_T;$/;"	t	typeref:struct:u_header
u_inssub	vim/vim/src/undo.c	/^u_inssub(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
u_newcount	vim/vim/src/undo.c	/^static long	u_newcount, u_oldcount;$/;"	v	file:
u_oldcount	vim/vim/src/undo.c	/^static long	u_newcount, u_oldcount;$/;"	v	file:
u_read_undo	vim/vim/src/undo.c	/^u_read_undo(char_u *name, char_u *hash, char_u *orig_name)$/;"	f	signature:(char_u *name, char_u *hash, char_u *orig_name)
u_redo	vim/vim/src/undo.c	/^u_redo(int count)$/;"	f	signature:(int count)
u_save	vim/vim/src/undo.c	/^u_save(linenr_T top, linenr_T bot)$/;"	f	signature:(linenr_T top, linenr_T bot)
u_save_cursor	vim/vim/src/undo.c	/^u_save_cursor(void)$/;"	f	signature:(void)
u_save_line	vim/vim/src/undo.c	/^static char_u *u_save_line(linenr_T);$/;"	p	file:
u_save_line	vim/vim/src/undo.c	/^u_save_line(linenr_T lnum)$/;"	f	file:	signature:(linenr_T lnum)
u_savecommon	vim/vim/src/undo.c	/^u_savecommon($/;"	f	signature:( linenr_T top, linenr_T bot, linenr_T newbot, int reload)
u_savedel	vim/vim/src/undo.c	/^u_savedel(linenr_T lnum, long nlines)$/;"	f	signature:(linenr_T lnum, long nlines)
u_saveline	vim/vim/src/undo.c	/^u_saveline(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
u_savesub	vim/vim/src/undo.c	/^u_savesub(linenr_T lnum)$/;"	f	signature:(linenr_T lnum)
u_sync	vim/vim/src/undo.c	/^u_sync($/;"	f	signature:( int force)
u_sync_once	vim/vim/src/globals.h	/^EXTERN int u_sync_once INIT(= 0);	\/* Call u_sync() once when evaluating$/;"	v
u_unch_branch	vim/vim/src/undo.c	/^static void u_unch_branch(u_header_T *uhp);$/;"	p	file:	signature:(u_header_T *uhp)
u_unch_branch	vim/vim/src/undo.c	/^u_unch_branch(u_header_T *uhp)$/;"	f	file:	signature:(u_header_T *uhp)
u_unchanged	vim/vim/src/undo.c	/^u_unchanged(buf_T *buf)$/;"	f	signature:(buf_T *buf)
u_undo	vim/vim/src/undo.c	/^u_undo(int count)$/;"	f	signature:(int count)
u_undo_end	vim/vim/src/undo.c	/^static void u_undo_end(int did_undo, int absolute);$/;"	p	file:	signature:(int did_undo, int absolute)
u_undo_end	vim/vim/src/undo.c	/^u_undo_end($/;"	f	file:	signature:( int did_undo, int absolute)
u_undoline	vim/vim/src/undo.c	/^u_undoline(void)$/;"	f	signature:(void)
u_undoredo	vim/vim/src/undo.c	/^static void u_undoredo(int undo);$/;"	p	file:	signature:(int undo)
u_undoredo	vim/vim/src/undo.c	/^u_undoredo(int undo)$/;"	f	file:	signature:(int undo)
u_update_save_nr	vim/vim/src/undo.c	/^u_update_save_nr(buf_T *buf)$/;"	f	signature:(buf_T *buf)
u_write_undo	vim/vim/src/undo.c	/^u_write_undo($/;"	f	signature:( char_u *name, int forceit, buf_T *buf, char_u *hash)
uc	vim/vim/src/blowfish.c	/^    char_u   uc[8];$/;"	m	union:__anon71	file:	access:public
uc_add_command	vim/vim/src/ex_docmd.c	/^static int	uc_add_command(char_u *name, size_t name_len, char_u *rep, long argt, long def, int flags, int compl, char_u *compl_arg, int addr_type, int force);$/;"	p	file:	signature:(char_u *name, size_t name_len, char_u *rep, long argt, long def, int flags, int compl, char_u *compl_arg, int addr_type, int force)
uc_add_command	vim/vim/src/ex_docmd.c	/^uc_add_command($/;"	f	file:	signature:( char_u *name, size_t name_len, char_u *rep, long argt, long def, int flags, int compl, char_u *compl_arg, int addr_type, int force)
uc_addr_type	vim/vim/src/ex_docmd.c	/^    int		uc_addr_type;	\/* The command's address type *\/$/;"	m	struct:ucmd	file:	access:public
uc_argt	vim/vim/src/ex_docmd.c	/^    long_u	uc_argt;	\/* The argument type *\/$/;"	m	struct:ucmd	file:	access:public
uc_check_code	vim/vim/src/ex_docmd.c	/^static size_t	uc_check_code(char_u *code, size_t len, char_u *buf, ucmd_T *cmd, exarg_T *eap, char_u **split_buf, size_t *split_len);$/;"	p	file:	signature:(char_u *code, size_t len, char_u *buf, ucmd_T *cmd, exarg_T *eap, char_u **split_buf, size_t *split_len)
uc_check_code	vim/vim/src/ex_docmd.c	/^uc_check_code($/;"	f	file:	signature:( char_u *code, size_t len, char_u *buf, ucmd_T *cmd, exarg_T *eap, char_u **split_buf, size_t *split_len)
uc_clear	vim/vim/src/ex_docmd.c	/^uc_clear(garray_T *gap)$/;"	f	signature:(garray_T *gap)
uc_compl	vim/vim/src/ex_docmd.c	/^    int		uc_compl;	\/* completion type *\/$/;"	m	struct:ucmd	file:	access:public
uc_compl_arg	vim/vim/src/ex_docmd.c	/^    char_u	*uc_compl_arg;	\/* completion argument if any *\/$/;"	m	struct:ucmd	file:	access:public
uc_def	vim/vim/src/ex_docmd.c	/^    long	uc_def;		\/* The default value for a range\/count *\/$/;"	m	struct:ucmd	file:	access:public
uc_fun_cmd	vim/vim/src/ex_docmd.c	/^static char_u	*uc_fun_cmd(void);$/;"	p	file:	signature:(void)
uc_fun_cmd	vim/vim/src/ex_docmd.c	/^uc_fun_cmd(void)$/;"	f	file:	signature:(void)
uc_list	vim/vim/src/ex_docmd.c	/^static void	uc_list(char_u *name, size_t name_len);$/;"	p	file:	signature:(char_u *name, size_t name_len)
uc_list	vim/vim/src/ex_docmd.c	/^uc_list(char_u *name, size_t name_len)$/;"	f	file:	signature:(char_u *name, size_t name_len)
uc_name	vim/vim/src/ex_docmd.c	/^    char_u	*uc_name;	\/* The command name *\/$/;"	m	struct:ucmd	file:	access:public
uc_rep	vim/vim/src/ex_docmd.c	/^    char_u	*uc_rep;	\/* The command's replacement string *\/$/;"	m	struct:ucmd	file:	access:public
uc_scan_attr	vim/vim/src/ex_docmd.c	/^static int	uc_scan_attr(char_u *attr, size_t len, long *argt, long *def, int *flags, int *compl, char_u **compl_arg, int* attr_type_arg);$/;"	p	file:	signature:(char_u *attr, size_t len, long *argt, long *def, int *flags, int *compl, char_u **compl_arg, int* attr_type_arg)
uc_scan_attr	vim/vim/src/ex_docmd.c	/^uc_scan_attr($/;"	f	file:	signature:( char_u *attr, size_t len, long *argt, long *def, int *flags, int *compl, char_u **compl_arg, int *addr_type_arg)
uc_scriptID	vim/vim/src/ex_docmd.c	/^    scid_T	uc_scriptID;	\/* SID where the command was defined *\/$/;"	m	struct:ucmd	file:	access:public
uc_split_args	vim/vim/src/ex_docmd.c	/^static char_u	*uc_split_args(char_u *arg, size_t *lenp);$/;"	p	file:	signature:(char_u *arg, size_t *lenp)
uc_split_args	vim/vim/src/ex_docmd.c	/^uc_split_args(char_u *arg, size_t *lenp)$/;"	f	file:	signature:(char_u *arg, size_t *lenp)
ucmd	vim/vim/src/ex_docmd.c	/^typedef struct ucmd$/;"	s	file:
ucmd::uc_addr_type	vim/vim/src/ex_docmd.c	/^    int		uc_addr_type;	\/* The command's address type *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_argt	vim/vim/src/ex_docmd.c	/^    long_u	uc_argt;	\/* The argument type *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_compl	vim/vim/src/ex_docmd.c	/^    int		uc_compl;	\/* completion type *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_compl_arg	vim/vim/src/ex_docmd.c	/^    char_u	*uc_compl_arg;	\/* completion argument if any *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_def	vim/vim/src/ex_docmd.c	/^    long	uc_def;		\/* The default value for a range\/count *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_name	vim/vim/src/ex_docmd.c	/^    char_u	*uc_name;	\/* The command name *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_rep	vim/vim/src/ex_docmd.c	/^    char_u	*uc_rep;	\/* The command's replacement string *\/$/;"	m	struct:ucmd	file:	access:public
ucmd::uc_scriptID	vim/vim/src/ex_docmd.c	/^    scid_T	uc_scriptID;	\/* SID where the command was defined *\/$/;"	m	struct:ucmd	file:	access:public
ucmd_T	vim/vim/src/ex_docmd.c	/^} ucmd_T;$/;"	t	typeref:struct:ucmd	file:
ucmds	vim/vim/src/ex_docmd.c	/^static garray_T ucmds = {0, 0, sizeof(ucmd_T), 4, NULL};$/;"	v	file:
ucs2bytes	vim/vim/src/fileio.c	/^static int ucs2bytes(unsigned c, char_u **pp, int flags);$/;"	p	file:	signature:(unsigned c, char_u **pp, int flags)
ucs2bytes	vim/vim/src/fileio.c	/^ucs2bytes($/;"	f	file:	signature:( unsigned c, char_u **pp, int flags)
ucslen	vim/vim/src/winclip.c	/^    int ucslen;		\/* length of CF_UNICODETEXT in words *\/$/;"	m	struct:__anon22	file:	access:public
ue_array	vim/vim/src/structs.h	/^    char_u	**ue_array;	\/* array of lines in undo block *\/$/;"	m	struct:u_entry	access:public
ue_bot	vim/vim/src/structs.h	/^    linenr_T	ue_bot;		\/* number of line below undo block *\/$/;"	m	struct:u_entry	access:public
ue_lcount	vim/vim/src/structs.h	/^    linenr_T	ue_lcount;	\/* linecount when u_save called *\/$/;"	m	struct:u_entry	access:public
ue_magic	vim/vim/src/structs.h	/^    int		ue_magic;	\/* magic number to check allocation *\/$/;"	m	struct:u_entry	access:public
ue_next	vim/vim/src/structs.h	/^    u_entry_T	*ue_next;	\/* pointer to next entry in list *\/$/;"	m	struct:u_entry	access:public
ue_size	vim/vim/src/structs.h	/^    long	ue_size;	\/* number of lines in ue_array *\/$/;"	m	struct:u_entry	access:public
ue_top	vim/vim/src/structs.h	/^    linenr_T	ue_top;		\/* number of line above undo block *\/$/;"	m	struct:u_entry	access:public
uf_args	vim/vim/src/structs.h	/^    garray_T	uf_args;	\/* arguments *\/$/;"	m	struct:__anon187	access:public
uf_calls	vim/vim/src/structs.h	/^    int		uf_calls;	\/* nr of active calls *\/$/;"	m	struct:__anon187	access:public
uf_cleared	vim/vim/src/structs.h	/^    int		uf_cleared;	\/* func_clear() was already called *\/$/;"	m	struct:__anon187	access:public
uf_flags	vim/vim/src/structs.h	/^    int		uf_flags;$/;"	m	struct:__anon187	access:public
uf_lines	vim/vim/src/structs.h	/^    garray_T	uf_lines;	\/* function lines *\/$/;"	m	struct:__anon187	access:public
uf_name	vim/vim/src/structs.h	/^    char_u	uf_name[1];	\/* name of function (actually longer); can$/;"	m	struct:__anon187	access:public
uf_profiling	vim/vim/src/structs.h	/^    int		uf_profiling;	\/* TRUE when func is being profiled *\/$/;"	m	struct:__anon187	access:public
uf_refcount	vim/vim/src/structs.h	/^    int		uf_refcount;	\/* reference count, see func_name_refcount() *\/$/;"	m	struct:__anon187	access:public
uf_scoped	vim/vim/src/structs.h	/^    funccall_T	*uf_scoped;	\/* l: local variables for closure *\/$/;"	m	struct:__anon187	access:public
uf_script_ID	vim/vim/src/structs.h	/^    scid_T	uf_script_ID;	\/* ID of script where function was defined,$/;"	m	struct:__anon187	access:public
uf_tm_children	vim/vim/src/structs.h	/^    proftime_T	uf_tm_children;	\/* time spent in children this call *\/$/;"	m	struct:__anon187	access:public
uf_tm_count	vim/vim/src/structs.h	/^    int		uf_tm_count;	\/* nr of calls *\/$/;"	m	struct:__anon187	access:public
uf_tm_self	vim/vim/src/structs.h	/^    proftime_T	uf_tm_self;	\/* time spent in function itself *\/$/;"	m	struct:__anon187	access:public
uf_tm_total	vim/vim/src/structs.h	/^    proftime_T	uf_tm_total;	\/* time spent in function + children *\/$/;"	m	struct:__anon187	access:public
uf_tml_children	vim/vim/src/structs.h	/^    proftime_T	uf_tml_children; \/* time spent in children for this line *\/$/;"	m	struct:__anon187	access:public
uf_tml_count	vim/vim/src/structs.h	/^    int		*uf_tml_count;	\/* nr of times line was executed *\/$/;"	m	struct:__anon187	access:public
uf_tml_execed	vim/vim/src/structs.h	/^    int		uf_tml_execed;	\/* line being timed was executed *\/$/;"	m	struct:__anon187	access:public
uf_tml_idx	vim/vim/src/structs.h	/^    int		uf_tml_idx;	\/* index of line being timed; -1 if none *\/$/;"	m	struct:__anon187	access:public
uf_tml_self	vim/vim/src/structs.h	/^    proftime_T	*uf_tml_self;	\/* time spent in a line itself *\/$/;"	m	struct:__anon187	access:public
uf_tml_start	vim/vim/src/structs.h	/^    proftime_T	uf_tml_start;	\/* start time for current line *\/$/;"	m	struct:__anon187	access:public
uf_tml_total	vim/vim/src/structs.h	/^    proftime_T	*uf_tml_total;	\/* time spent in a line + children *\/$/;"	m	struct:__anon187	access:public
uf_tml_wait	vim/vim/src/structs.h	/^    proftime_T	uf_tml_wait;	\/* start wait time for current line *\/$/;"	m	struct:__anon187	access:public
uf_varargs	vim/vim/src/structs.h	/^    int		uf_varargs;	\/* variable nr of arguments *\/$/;"	m	struct:__anon187	access:public
ufunc_T	vim/vim/src/structs.h	/^} ufunc_T;$/;"	t	typeref:struct:__anon187
ufunc_T	vim/vim/src/structs.h	/^} ufunc_T;$/;"	t	typeref:struct:__anon190
uh_alt_next	vim/vim/src/structs.h	/^    } uh_alt_next;$/;"	m	struct:u_header	typeref:union:u_header::__anon168	access:public
uh_alt_prev	vim/vim/src/structs.h	/^    } uh_alt_prev;$/;"	m	struct:u_header	typeref:union:u_header::__anon169	access:public
uh_cursor	vim/vim/src/structs.h	/^    pos_T	uh_cursor;	\/* cursor position before saving *\/$/;"	m	struct:u_header	access:public
uh_cursor_vcol	vim/vim/src/structs.h	/^    long	uh_cursor_vcol;$/;"	m	struct:u_header	access:public
uh_entry	vim/vim/src/structs.h	/^    u_entry_T	*uh_entry;	\/* pointer to first entry *\/$/;"	m	struct:u_header	access:public
uh_flags	vim/vim/src/structs.h	/^    int		uh_flags;	\/* see below *\/$/;"	m	struct:u_header	access:public
uh_getbot_entry	vim/vim/src/structs.h	/^    u_entry_T	*uh_getbot_entry; \/* pointer to where ue_bot must be set *\/$/;"	m	struct:u_header	access:public
uh_magic	vim/vim/src/structs.h	/^    int		uh_magic;	\/* magic number to check allocation *\/$/;"	m	struct:u_header	access:public
uh_namedm	vim/vim/src/structs.h	/^    pos_T	uh_namedm[NMARKS];	\/* marks before undo\/after redo *\/$/;"	m	struct:u_header	access:public
uh_next	vim/vim/src/structs.h	/^    } uh_next;$/;"	m	struct:u_header	typeref:union:u_header::__anon166	access:public
uh_prev	vim/vim/src/structs.h	/^    } uh_prev;$/;"	m	struct:u_header	typeref:union:u_header::__anon167	access:public
uh_save_nr	vim/vim/src/structs.h	/^    long	uh_save_nr;	\/* set when the file was saved after the$/;"	m	struct:u_header	access:public
uh_seq	vim/vim/src/structs.h	/^    long	uh_seq;		\/* sequence number, higher == newer undo *\/$/;"	m	struct:u_header	access:public
uh_time	vim/vim/src/structs.h	/^    time_T	uh_time;	\/* timestamp when the change was made *\/$/;"	m	struct:u_header	access:public
uh_visual	vim/vim/src/structs.h	/^    visualinfo_T uh_visual;	\/* Visual areas before undo\/after redo *\/$/;"	m	struct:u_header	access:public
uh_walk	vim/vim/src/structs.h	/^    int		uh_walk;	\/* used by undo_time() *\/$/;"	m	struct:u_header	access:public
ui_breakcheck	vim/vim/src/ui.c	/^ui_breakcheck(void)$/;"	f	signature:(void)
ui_breakcheck_force	vim/vim/src/ui.c	/^ui_breakcheck_force(int force)$/;"	f	signature:(int force)
ui_char_avail	vim/vim/src/ui.c	/^ui_char_avail(void)$/;"	f	signature:(void)
ui_cursor_shape	vim/vim/src/ui.c	/^ui_cursor_shape(void)$/;"	f	signature:(void)
ui_delay	vim/vim/src/ui.c	/^ui_delay(long msec, int ignoreinput)$/;"	f	signature:(long msec, int ignoreinput)
ui_focus_change	vim/vim/src/ui.c	/^ui_focus_change($/;"	f	signature:( int in_focus)
ui_get_shellsize	vim/vim/src/ui.c	/^ui_get_shellsize(void)$/;"	f	signature:(void)
ui_inchar	vim/vim/src/ui.c	/^ui_inchar($/;"	f	signature:( char_u *buf, int maxlen, long wtime, int tb_change_cnt)
ui_inchar_undo	vim/vim/src/ui.c	/^ui_inchar_undo(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
ui_new_shellsize	vim/vim/src/ui.c	/^ui_new_shellsize(void)$/;"	f	signature:(void)
ui_set_shellsize	vim/vim/src/ui.c	/^ui_set_shellsize($/;"	f	signature:( int mustset UNUSED)
ui_suspend	vim/vim/src/ui.c	/^ui_suspend(void)$/;"	f	signature:(void)
ui_write	vim/vim/src/ui.c	/^ui_write(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
ul	vim/vim/src/blowfish.c	/^    UINT32_T ul[2];$/;"	m	union:__anon71	file:	access:public
uline_offset	vim/vim/src/hardcopy.c	/^    int		uline_offset;$/;"	m	struct:prt_ps_font_S	file:	access:public
uline_width	vim/vim/src/hardcopy.c	/^    int		uline_width;$/;"	m	struct:prt_ps_font_S	file:	access:public
un_Magic	vim/vim/src/regexp.c	255;"	d	file:
unadjust_for_sel	vim/vim/src/normal.c	/^static int	unadjust_for_sel(void);$/;"	p	file:	signature:(void)
unadjust_for_sel	vim/vim/src/normal.c	/^unadjust_for_sel(void)$/;"	f	file:	signature:(void)
unblock_autocmds	vim/vim/src/fileio.c	/^unblock_autocmds(void)$/;"	f	signature:(void)
unblock_signals	vim/vim/src/os_unix.c	/^unblock_signals(sigset_t *set)$/;"	f	file:	signature:(sigset_t *set)
unchanged	vim/vim/src/misc1.c	/^unchanged($/;"	f	signature:( buf_T *buf, int ff)
undercurl	vim/vim/src/structs.h	/^    int		undercurl;$/;"	m	struct:__anon205	access:public
underline	vim/vim/src/libvterm/include/vterm.h	/^    unsigned int underline : 2;$/;"	m	struct:__anon61	access:public
underline	vim/vim/src/libvterm/src/screen.c	/^  unsigned int underline : 2;$/;"	m	struct:__anon29	file:	access:public
underline	vim/vim/src/libvterm/src/vterm_internal.h	/^  unsigned int underline:2;$/;"	m	struct:VTermPen	access:public
underline	vim/vim/src/libvterm/t/harness.c	/^  int underline;$/;"	m	struct:__anon42	file:	access:public
underline	vim/vim/src/structs.h	/^    int		underline;$/;"	m	struct:__anon205	access:public
undisplay_dollar	vim/vim/src/edit.c	/^static void undisplay_dollar(void);$/;"	p	file:	signature:(void)
undisplay_dollar	vim/vim/src/edit.c	/^undisplay_dollar(void)$/;"	f	file:	signature:(void)
undo	vim/vim/src/gui_motif.c	/^    Widget undo;	\/* 'Undo' action button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
undo_allowed	vim/vim/src/undo.c	/^undo_allowed(void)$/;"	f	signature:(void)
undo_flush	vim/vim/src/undo.c	/^static int undo_flush(bufinfo_T *bi);$/;"	p	file:	signature:(bufinfo_T *bi)
undo_flush	vim/vim/src/undo.c	/^undo_flush(bufinfo_T *bi)$/;"	f	file:	signature:(bufinfo_T *bi)
undo_off	vim/vim/src/globals.h	/^EXTERN int	undo_off INIT(= FALSE);	    \/* undo switched off for now *\/$/;"	v
undo_read	vim/vim/src/undo.c	/^static int undo_read(bufinfo_T *bi, char_u *buffer, size_t size);$/;"	p	file:	signature:(bufinfo_T *bi, char_u *buffer, size_t size)
undo_read	vim/vim/src/undo.c	/^undo_read(bufinfo_T *bi, char_u *buffer, size_t size)$/;"	f	file:	signature:(bufinfo_T *bi, char_u *buffer, size_t size)
undo_read_2c	vim/vim/src/undo.c	/^static int undo_read_2c(bufinfo_T *bi);$/;"	p	file:	signature:(bufinfo_T *bi)
undo_read_2c	vim/vim/src/undo.c	/^undo_read_2c(bufinfo_T *bi)$/;"	f	file:	signature:(bufinfo_T *bi)
undo_read_4c	vim/vim/src/undo.c	/^static int undo_read_4c(bufinfo_T *bi);$/;"	p	file:	signature:(bufinfo_T *bi)
undo_read_4c	vim/vim/src/undo.c	/^undo_read_4c(bufinfo_T *bi)$/;"	f	file:	signature:(bufinfo_T *bi)
undo_read_byte	vim/vim/src/undo.c	/^static int undo_read_byte(bufinfo_T *bi);$/;"	p	file:	signature:(bufinfo_T *bi)
undo_read_byte	vim/vim/src/undo.c	/^undo_read_byte(bufinfo_T *bi)$/;"	f	file:	signature:(bufinfo_T *bi)
undo_read_time	vim/vim/src/undo.c	/^static time_t undo_read_time(bufinfo_T *bi);$/;"	p	file:	signature:(bufinfo_T *bi)
undo_read_time	vim/vim/src/undo.c	/^undo_read_time(bufinfo_T *bi)$/;"	f	file:	signature:(bufinfo_T *bi)
undo_time	vim/vim/src/undo.c	/^undo_time($/;"	f	signature:( long step, int sec, int file, int absolute)
undo_undoes	vim/vim/src/undo.c	/^static int	undo_undoes = FALSE;$/;"	v	file:
undo_write	vim/vim/src/undo.c	/^static int undo_write(bufinfo_T *bi, char_u *ptr, size_t len);$/;"	p	file:	signature:(bufinfo_T *bi, char_u *ptr, size_t len)
undo_write	vim/vim/src/undo.c	/^undo_write(bufinfo_T *bi, char_u *ptr, size_t len)$/;"	f	file:	signature:(bufinfo_T *bi, char_u *ptr, size_t len)
undo_write_bytes	vim/vim/src/undo.c	/^static int undo_write_bytes(bufinfo_T *bi, long_u nr, int len);$/;"	p	file:	signature:(bufinfo_T *bi, long_u nr, int len)
undo_write_bytes	vim/vim/src/undo.c	/^undo_write_bytes(bufinfo_T *bi, long_u nr, int len)$/;"	f	file:	signature:(bufinfo_T *bi, long_u nr, int len)
undrawBalloon	vim/vim/src/gui_beval.c	/^static void undrawBalloon(BalloonEval *beval);$/;"	p	file:	signature:(BalloonEval *beval)
undrawBalloon	vim/vim/src/gui_beval.c	/^undrawBalloon(BalloonEval *beval)$/;"	f	file:	signature:(BalloonEval *beval)
unescape_shellxquote	vim/vim/src/os_win32.c	/^unescape_shellxquote(char_u *p, char_u *escaped)$/;"	f	file:	signature:(char_u *p, char_u *escaped)
ungetchr	vim/vim/src/regexp.c	/^static void	ungetchr(void);$/;"	p	file:	signature:(void)
ungetchr	vim/vim/src/regexp.c	/^ungetchr(void)$/;"	f	file:	signature:(void)
uninstall_check	vim/vim/src/dosinst.c	/^uninstall_check(int skip_question)$/;"	f	file:	signature:(int skip_question)
uniquefy_paths	vim/vim/src/misc1.c	/^static void uniquefy_paths(garray_T *gap, char_u *pattern);$/;"	p	file:	signature:(garray_T *gap, char_u *pattern)
uniquefy_paths	vim/vim/src/misc1.c	/^uniquefy_paths(garray_T *gap, char_u *pattern)$/;"	f	file:	signature:(garray_T *gap, char_u *pattern)
unix_expandpath	vim/vim/src/misc1.c	/^unix_expandpath($/;"	f	signature:( garray_T *gap, char_u *path, int wildoff, int flags, int didstar)
unload	vim/vim/src/gui_dwrite.cpp	/^unload(HINSTANCE &hinst)$/;"	f	file:	signature:(HINSTANCE &hinst)
unload_dummy_buffer	vim/vim/src/quickfix.c	/^static void	unload_dummy_buffer(buf_T *buf, char_u *dirname_start);$/;"	p	file:	signature:(buf_T *buf, char_u *dirname_start)
unload_dummy_buffer	vim/vim/src/quickfix.c	/^unload_dummy_buffer(buf_T *buf, char_u *dirname_start)$/;"	f	file:	signature:(buf_T *buf, char_u *dirname_start)
unputcmdline	vim/vim/src/ex_getln.c	/^unputcmdline(void)$/;"	f	signature:(void)
unrecognised_message	vim/vim/src/integration.c	/^static void unrecognised_message(char *);$/;"	p	file:	signature:(char *)
unrecognised_message	vim/vim/src/integration.c	/^unrecognised_message($/;"	f	signature:( char *cmd)
unref_extmatch	vim/vim/src/regexp.c	/^unref_extmatch(reg_extmatch_T *em)$/;"	f	signature:(reg_extmatch_T *em)
unref_var_dict	vim/vim/src/eval.c	/^unref_var_dict(dict_T *dict)$/;"	f	signature:(dict_T *dict)
unserialize_pos	vim/vim/src/undo.c	/^static void unserialize_pos(bufinfo_T *bi, pos_T *pos);$/;"	p	file:	signature:(bufinfo_T *bi, pos_T *pos)
unserialize_pos	vim/vim/src/undo.c	/^unserialize_pos(bufinfo_T *bi, pos_T *pos)$/;"	f	file:	signature:(bufinfo_T *bi, pos_T *pos)
unserialize_uep	vim/vim/src/undo.c	/^static u_entry_T *unserialize_uep(bufinfo_T *bi, int *error, char_u *file_name);$/;"	p	file:	signature:(bufinfo_T *bi, int *error, char_u *file_name)
unserialize_uep	vim/vim/src/undo.c	/^unserialize_uep(bufinfo_T *bi, int *error, char_u *file_name)$/;"	f	file:	signature:(bufinfo_T *bi, int *error, char_u *file_name)
unserialize_uhp	vim/vim/src/undo.c	/^static u_header_T *unserialize_uhp(bufinfo_T *bi, char_u *file_name);$/;"	p	file:	signature:(bufinfo_T *bi, char_u *file_name)
unserialize_uhp	vim/vim/src/undo.c	/^unserialize_uhp(bufinfo_T *bi, char_u *file_name)$/;"	f	file:	signature:(bufinfo_T *bi, char_u *file_name)
unserialize_visualinfo	vim/vim/src/undo.c	/^static void unserialize_visualinfo(bufinfo_T *bi, visualinfo_T *info);$/;"	p	file:	signature:(bufinfo_T *bi, visualinfo_T *info)
unserialize_visualinfo	vim/vim/src/undo.c	/^unserialize_visualinfo(bufinfo_T *bi, visualinfo_T *info)$/;"	f	file:	signature:(bufinfo_T *bi, visualinfo_T *info)
unset_global_local_option	vim/vim/src/option.c	/^unset_global_local_option(char_u *name, void *from)$/;"	f	signature:(char_u *name, void *from)
unshift_special	vim/vim/src/normal.c	/^static void	unshift_special(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
unshift_special	vim/vim/src/normal.c	/^unshift_special(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
unshowmode	vim/vim/src/screen.c	/^unshowmode(int force)$/;"	f	signature:(int force)
unused	vim/vim/src/gui_mac.c	/^    long *unused;   \/* 0 (not used) *\/$/;"	m	struct:CW_GetText	file:	access:public
unused1	vim/vim/src/gui_mac.c	/^    short unused1; \/\/ 0 (not used)$/;"	m	struct:SelectionRange	file:	access:public
unused2	vim/vim/src/gui_mac.c	/^    long unused2; \/\/ 0 (not used)$/;"	m	struct:SelectionRange	file:	access:public
up	vim/vim/src/gui_gtk.c	/^    GtkWidget *up;	\/* search direction 'Up' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
up	vim/vim/src/gui_motif.c	/^    Widget up;		\/* search direction 'Up' radio button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
upd_block0_T	vim/vim/src/memline.c	/^} upd_block0_T;$/;"	t	typeref:enum:__anon247	file:
updatePriority	vim/vim/src/workshop.c	/^static void	 updatePriority(Boolean);$/;"	p	file:
updatePriority	vim/vim/src/workshop.c	/^updatePriority($/;"	f	file:	signature:( Boolean subMenu)
updateWindow	vim/vim/src/screen.c	/^updateWindow(win_T *wp)$/;"	f	signature:(win_T *wp)
update_Insstart_orig	vim/vim/src/edit.c	/^static int	update_Insstart_orig = TRUE; \/* set Insstart_orig to Insstart *\/$/;"	v	file:
update_curbuf	vim/vim/src/screen.c	/^update_curbuf(int type)$/;"	f	signature:(int type)
update_cursor	vim/vim/src/terminal.c	/^update_cursor(term_T *term, int redraw)$/;"	f	file:	signature:(term_T *term, int redraw)
update_curswant	vim/vim/src/move.c	/^update_curswant(void)$/;"	f	signature:(void)
update_debug_sign	vim/vim/src/screen.c	/^update_debug_sign(buf_T *buf, linenr_T lnum)$/;"	f	signature:(buf_T *buf, linenr_T lnum)
update_finish	vim/vim/src/screen.c	/^update_finish(void)$/;"	f	file:	signature:(void)
update_force_abort	vim/vim/src/ex_eval.c	/^update_force_abort(void)$/;"	f	signature:(void)
update_im_font	vim/vim/src/gui_w32.c	/^update_im_font(void)$/;"	f	file:	signature:(void)
update_mouseshape	vim/vim/src/misc2.c	/^update_mouseshape(int shape_idx)$/;"	f	signature:(int shape_idx)
update_offset	vim/vim/src/blowfish.c	/^    int		update_offset;$/;"	m	struct:__anon72	file:	access:public
update_prepare	vim/vim/src/screen.c	/^update_prepare(void)$/;"	f	file:	signature:(void)
update_screen	vim/vim/src/screen.c	/^update_screen(int type_arg)$/;"	f	signature:(int type_arg)
update_si_attr	vim/vim/src/syntax.c	/^static void update_si_attr(int idx);$/;"	p	file:	signature:(int idx)
update_si_attr	vim/vim/src/syntax.c	/^update_si_attr(int idx)$/;"	f	file:	signature:(int idx)
update_si_end	vim/vim/src/syntax.c	/^static void update_si_end(stateitem_T *sip, int startcol, int force);$/;"	p	file:	signature:(stateitem_T *sip, int startcol, int force)
update_si_end	vim/vim/src/syntax.c	/^update_si_end($/;"	f	file:	signature:( stateitem_T *sip, int startcol, int force)
update_single_line	vim/vim/src/screen.c	/^update_single_line(win_T *wp, linenr_T lnum)$/;"	f	signature:(win_T *wp, linenr_T lnum)
update_tcap	vim/vim/src/term.c	/^update_tcap(int attr)$/;"	f	signature:(int attr)
update_topline	vim/vim/src/move.c	/^update_topline(void)$/;"	f	signature:(void)
update_topline_cursor	vim/vim/src/ex_docmd.c	/^update_topline_cursor(void)$/;"	f	signature:(void)
update_topline_redraw	vim/vim/src/move.c	/^update_topline_redraw(void)$/;"	f	signature:(void)
update_window_manager_hints	vim/vim/src/gui_gtk_x11.c	/^update_window_manager_hints(int force_width, int force_height)$/;"	f	file:	signature:(int force_width, int force_height)
updatecursor	vim/vim/src/libvterm/src/state.c	/^static void updatecursor(VTermState *state, VTermPos *oldpos, int cancel_phantom)$/;"	f	file:	signature:(VTermState *state, VTermPos *oldpos, int cancel_phantom)
updatescript	vim/vim/src/getchar.c	/^updatescript(int c)$/;"	f	signature:(int c)
updating_screen	vim/vim/src/globals.h	/^EXTERN int	updating_screen INIT(= FALSE);$/;"	v
usage	vim/vim/src/if_cscope.h	/^    char *  usage;$/;"	m	struct:__anon68	access:public
usage	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^static void usage(int exitcode)$/;"	f	file:	signature:(int exitcode)
usage	vim/vim/src/main.c	/^static void usage(void);$/;"	p	file:	signature:(void)
usage	vim/vim/src/main.c	/^usage(void)$/;"	f	file:	signature:(void)
usage	vim/vim/src/tee/tee.c	/^void usage(void)$/;"	f	signature:(void)
useAntialias_cached	vim/vim/src/gui_mac.c	/^UInt32      useAntialias_cached = 0x0;$/;"	v
use_aucmd_win	vim/vim/src/structs.h	/^    int		use_aucmd_win;	\/* using aucmd_win *\/$/;"	m	struct:__anon203	access:public
use_debug_break_level	vim/vim/src/structs.h	/^    int		use_debug_break_level;$/;"	m	struct:__anon210	access:public
use_ef	vim/vim/src/structs.h	/^    char_u	*use_ef;		\/* 'errorfile' from -q argument *\/$/;"	m	struct:__anon210	access:public
use_gvimrc	vim/vim/src/globals.h	/^EXTERN char_u	*use_gvimrc INIT(= NULL);	\/* "-U" cmdline argument *\/$/;"	v
use_midword	vim/vim/src/spell.c	/^static void use_midword(slang_T *lp, win_T *buf);$/;"	p	file:	signature:(slang_T *lp, win_T *buf)
use_midword	vim/vim/src/spell.c	/^use_midword(slang_T *lp, win_T *wp)$/;"	f	file:	signature:(slang_T *lp, win_T *wp)
use_multibytecode	vim/vim/src/regexp.c	/^static int	use_multibytecode(int c);$/;"	p	file:	signature:(int c)
use_multibytecode	vim/vim/src/regexp.c	/^use_multibytecode(int c)$/;"	f	file:	signature:(int c)
use_reg_one	vim/vim/src/structs.h	/^    int		use_reg_one;	\/* TRUE if delete uses reg 1 even when not$/;"	m	struct:oparg_S	access:public
use_vimrc	vim/vim/src/structs.h	/^    char_u	*use_vimrc;		\/* vimrc from -u argument *\/$/;"	m	struct:__anon210	access:public
use_viscol	vim/vim/src/quickfix.c	/^    char_u	use_viscol;$/;"	m	struct:__anon14	file:	access:public
use_xterm_like_mouse	vim/vim/src/os_unix.c	/^use_xterm_like_mouse(char_u *name)$/;"	f	signature:(char_u *name)
use_xterm_mouse	vim/vim/src/os_unix.c	/^use_xterm_mouse(void)$/;"	f	signature:(void)
used_alist_count	vim/vim/src/os_win32.c	/^static int	used_alist_count = 0;$/;"	v	file:
used_file_arg	vim/vim/src/os_win32.c	/^used_file_arg(char *name, int literal, int full_path, int diff_mode)$/;"	f	signature:(char *name, int literal, int full_path, int diff_mode)
used_file_argc	vim/vim/src/os_win32.c	/^static int	used_file_argc = 0;	\/* last argument in global_argv[] used$/;"	v	file:
used_file_count	vim/vim/src/os_win32.c	/^static int	used_file_count = 0;	\/* nr of entries in used_file_indexes *\/$/;"	v	file:
used_file_diff_mode	vim/vim/src/os_win32.c	/^static int	used_file_diff_mode = FALSE;  \/* file name was with diff mode *\/$/;"	v	file:
used_file_full_path	vim/vim/src/os_win32.c	/^static int	used_file_full_path = FALSE;  \/* file name was full path *\/$/;"	v	file:
used_file_indexes	vim/vim/src/os_win32.c	/^static int	*used_file_indexes = NULL; \/* indexes in global_argv[] for$/;"	v	file:
used_file_literal	vim/vim/src/os_win32.c	/^static int	used_file_literal = FALSE;  \/* take file names literally *\/$/;"	v	file:
used_for	vim/vim/src/structs.h	/^    char	used_for;	\/* SHAPE_MOUSE and\/or SHAPE_CURSOR *\/$/;"	m	struct:cursor_entry	access:public
usefilter	vim/vim/src/ex_cmds.h	/^    int		usefilter;	\/* TRUE with ":w !command" and ":r!command" *\/$/;"	m	struct:exarg	access:public
user_abort	vim/vim/src/structs.h	/^    int		user_abort;$/;"	m	struct:__anon206	access:public
user_digraphs	vim/vim/src/digraph.c	/^static garray_T	user_digraphs = {0, 0, (int)sizeof(digr_T), 10, NULL};$/;"	v	file:
userhl	vim/vim/src/structs.h	/^    int		userhl;		\/* 0: no HL, 1-9: User HL, < 0 for syn ID *\/$/;"	m	struct:stl_hlrec	access:public
useridx	vim/vim/src/ex_cmds.h	/^    int		useridx;	\/* user command index *\/$/;"	m	struct:exarg	access:public
username	vim/vim/src/misc2.c	/^static char_u	*username = NULL; \/* cached result of mch_get_user_name() *\/$/;"	v	file:
usingSunWorkShop	vim/vim/src/workshop.c	/^int		 usingSunWorkShop = 0;	\/* set if -ws flag is used *\/$/;"	v
using_gnome	vim/vim/src/gui_gtk_x11.c	/^static int using_gnome = 0;$/;"	v	file:
using_gnome	vim/vim/src/gui_gtk_x11.c	392;"	d	file:
using_script	vim/vim/src/getchar.c	/^using_script(void)$/;"	f	signature:(void)
utf16_to_enc	vim/vim/src/winclip.c	/^utf16_to_enc(short_u *str, int *lenp)$/;"	f	signature:(short_u *str, int *lenp)
utf16_to_utf8	vim/vim/src/winclip.c	/^utf16_to_utf8(short_u *instr, int inlen, char_u *outstr)$/;"	f	signature:(short_u *instr, int inlen, char_u *outstr)
utf8	vim/vim/src/libvterm/src/vterm_internal.h	/^    unsigned int utf8:1;$/;"	m	struct:VTerm::__anon38	access:public
utf8_atom	vim/vim/src/ui.c	/^static Atom	utf8_atom;$/;"	v	file:
utf8_seqlen	vim/vim/src/libvterm/src/utf8.h	/^INLINE unsigned int utf8_seqlen(long codepoint)$/;"	f	signature:(long codepoint)
utf8_seqlen	vim/vim/src/libvterm/src/utf8.h	/^unsigned int utf8_seqlen(long codepoint);$/;"	p	signature:(long codepoint)
utf8_string_atom	vim/vim/src/gui_gtk_x11.c	/^static GdkAtom utf8_string_atom = GDK_NONE;$/;"	v	file:
utf8_to_utf16	vim/vim/src/winclip.c	/^utf8_to_utf16(char_u *instr, int inlen, short_u *outstr, int *unconvlenp)$/;"	f	signature:(char_u *instr, int inlen, short_u *outstr, int *unconvlenp)
utf8len_tab	vim/vim/src/mbyte.c	/^static char utf8len_tab[256] =$/;"	v	file:
utf8len_tab_zero	vim/vim/src/mbyte.c	/^static char utf8len_tab_zero[256] =$/;"	v	file:
utf_ambiguous_width	vim/vim/src/mbyte.c	/^utf_ambiguous_width(int c)$/;"	f	signature:(int c)
utf_byte2len	vim/vim/src/mbyte.c	/^utf_byte2len(int b)$/;"	f	signature:(int b)
utf_char2bytes	vim/vim/src/mbyte.c	/^utf_char2bytes(int c, char_u *buf)$/;"	f	signature:(int c, char_u *buf)
utf_char2cells	vim/vim/src/mbyte.c	/^utf_char2cells(int c)$/;"	f	signature:(int c)
utf_char2len	vim/vim/src/mbyte.c	/^utf_char2len(int c)$/;"	f	signature:(int c)
utf_class	vim/vim/src/mbyte.c	/^utf_class(int c)$/;"	f	signature:(int c)
utf_class_buf	vim/vim/src/mbyte.c	/^utf_class_buf(int c, buf_T *buf)$/;"	f	signature:(int c, buf_T *buf)
utf_composinglike	vim/vim/src/mbyte.c	/^utf_composinglike(char_u *p1, char_u *p2)$/;"	f	signature:(char_u *p1, char_u *p2)
utf_convert	vim/vim/src/mbyte.c	/^static int utf_convert(int a, convertStruct table[], int tableSize);$/;"	p	file:	signature:(int a, convertStruct table[], int tableSize)
utf_convert	vim/vim/src/mbyte.c	/^utf_convert($/;"	f	file:	signature:( int a, convertStruct table[], int tableSize)
utf_find_illegal	vim/vim/src/mbyte.c	/^utf_find_illegal(void)$/;"	f	signature:(void)
utf_fold	vim/vim/src/mbyte.c	/^utf_fold(int a)$/;"	f	signature:(int a)
utf_head_off	vim/vim/src/mbyte.c	/^utf_head_off(char_u *base, char_u *p)$/;"	f	signature:(char_u *base, char_u *p)
utf_iscomposing	vim/vim/src/mbyte.c	/^utf_iscomposing(int c)$/;"	f	signature:(int c)
utf_islower	vim/vim/src/mbyte.c	/^utf_islower(int a)$/;"	f	signature:(int a)
utf_isupper	vim/vim/src/mbyte.c	/^utf_isupper(int a)$/;"	f	signature:(int a)
utf_off2cells	vim/vim/src/mbyte.c	/^utf_off2cells(unsigned off, unsigned max_off)$/;"	f	signature:(unsigned off, unsigned max_off)
utf_printable	vim/vim/src/mbyte.c	/^utf_printable(int c)$/;"	f	signature:(int c)
utf_ptr2cells	vim/vim/src/mbyte.c	/^utf_ptr2cells($/;"	f	signature:( char_u *p)
utf_ptr2cells_len	vim/vim/src/mbyte.c	/^static int utf_ptr2cells_len(char_u *p, int size);$/;"	p	file:	signature:(char_u *p, int size)
utf_ptr2cells_len	vim/vim/src/mbyte.c	/^utf_ptr2cells_len(char_u *p, int size)$/;"	f	file:	signature:(char_u *p, int size)
utf_ptr2char	vim/vim/src/mbyte.c	/^utf_ptr2char(char_u *p)$/;"	f	signature:(char_u *p)
utf_ptr2len	vim/vim/src/mbyte.c	/^utf_ptr2len(char_u *p)$/;"	f	signature:(char_u *p)
utf_ptr2len_len	vim/vim/src/mbyte.c	/^utf_ptr2len_len(char_u *p, int size)$/;"	f	signature:(char_u *p, int size)
utf_safe_read_char_adv	vim/vim/src/mbyte.c	/^static int utf_safe_read_char_adv(char_u **s, size_t *n);$/;"	p	file:	signature:(char_u **s, size_t *n)
utf_safe_read_char_adv	vim/vim/src/mbyte.c	/^utf_safe_read_char_adv(char_u **s, size_t *n)$/;"	f	file:	signature:(char_u **s, size_t *n)
utf_strnicmp	vim/vim/src/mbyte.c	/^static int utf_strnicmp(char_u *s1, char_u *s2, size_t n1, size_t n2);$/;"	p	file:	signature:(char_u *s1, char_u *s2, size_t n1, size_t n2)
utf_strnicmp	vim/vim/src/mbyte.c	/^utf_strnicmp($/;"	f	file:	signature:( char_u *s1, char_u *s2, size_t n1, size_t n2)
utf_tolower	vim/vim/src/mbyte.c	/^utf_tolower(int a)$/;"	f	signature:(int a)
utf_toupper	vim/vim/src/mbyte.c	/^utf_toupper(int a)$/;"	f	signature:(int a)
utf_valid_string	vim/vim/src/mbyte.c	/^utf_valid_string(char_u *s, char_u *end)$/;"	f	signature:(char_u *s, char_u *end)
utfc_char2bytes	vim/vim/src/mbyte.c	/^utfc_char2bytes(int off, char_u *buf)$/;"	f	signature:(int off, char_u *buf)
utfc_ptr2char	vim/vim/src/mbyte.c	/^utfc_ptr2char($/;"	f	signature:( char_u *p, int *pcc)
utfc_ptr2char_len	vim/vim/src/mbyte.c	/^utfc_ptr2char_len($/;"	f	signature:( char_u *p, int *pcc, int maxlen)
utfc_ptr2len	vim/vim/src/mbyte.c	/^utfc_ptr2len(char_u *p)$/;"	f	signature:(char_u *p)
utfc_ptr2len_len	vim/vim/src/mbyte.c	/^utfc_ptr2len_len(char_u *p, int size)$/;"	f	signature:(char_u *p, int size)
uvarnumber_T	vim/vim/src/structs.h	/^typedef uint64_t	    uvarnumber_T;$/;"	t
uvarnumber_T	vim/vim/src/structs.h	/^typedef unsigned __int64    uvarnumber_T;$/;"	t
uvarnumber_T	vim/vim/src/structs.h	/^typedef unsigned int	    uvarnumber_T;$/;"	t
uvarnumber_T	vim/vim/src/structs.h	/^typedef unsigned long	    uvarnumber_T;$/;"	t
uèí	vim/vim/runtime/tutor/tutor.cs	/^     c) Inteligence se uèí,$/;"	p
vOrigin	vim/vim/src/gui_at_fs.c	/^    int		vOrigin;$/;"	m	struct:__anon236	file:	access:public
v_channel	vim/vim/src/structs.h	/^	channel_T	*v_channel;	\/* channel value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
v_dict	vim/vim/src/structs.h	/^	dict_T		*v_dict;	\/* dict value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
v_exception	vim/vim/src/eval.c	/^v_exception(char_u *oldval)$/;"	f	signature:(char_u *oldval)
v_float	vim/vim/src/structs.h	/^	float_T		v_float;	\/* floating number value *\/$/;"	m	union:__anon184::__anon185	access:public
v_job	vim/vim/src/structs.h	/^	job_T		*v_job;		\/* job value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
v_list	vim/vim/src/structs.h	/^	list_T		*v_list;	\/* list value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
v_lock	vim/vim/src/structs.h	/^    char	v_lock;	    \/* see below: VAR_LOCKED, VAR_FIXED *\/$/;"	m	struct:__anon184	access:public
v_number	vim/vim/src/structs.h	/^	varnumber_T	v_number;	\/* number value *\/$/;"	m	union:__anon184::__anon185	access:public
v_partial	vim/vim/src/structs.h	/^	partial_T	*v_partial;	\/* closure: function with args *\/$/;"	m	union:__anon184::__anon185	access:public
v_string	vim/vim/src/structs.h	/^	char_u		*v_string;	\/* string value (can be NULL!) *\/$/;"	m	union:__anon184::__anon185	access:public
v_swap_corners	vim/vim/src/normal.c	/^static void	v_swap_corners(int cmdchar);$/;"	p	file:	signature:(int cmdchar)
v_swap_corners	vim/vim/src/normal.c	/^v_swap_corners(int cmdchar)$/;"	f	file:	signature:(int cmdchar)
v_throwpoint	vim/vim/src/eval.c	/^v_throwpoint(char_u *oldval)$/;"	f	signature:(char_u *oldval)
v_type	vim/vim/src/structs.h	/^    vartype_T	v_type;$/;"	m	struct:__anon184	access:public
v_visop	vim/vim/src/normal.c	/^static void	v_visop(cmdarg_T *cap);$/;"	p	file:	signature:(cmdarg_T *cap)
v_visop	vim/vim/src/normal.c	/^v_visop(cmdarg_T *cap)$/;"	f	file:	signature:(cmdarg_T *cap)
val	vim/vim/src/if_py_both.h	/^    int		val;$/;"	m	struct:numeric_constant	access:public
val	vim/vim/src/regexp.h	/^    int			val;$/;"	m	struct:nfa_state	access:public
valObject	vim/vim/src/if_py_both.h	/^    PyObject	*valObject;$/;"	m	struct:object_constant	access:public
valid	vim/vim/src/quickfix.c	/^    int		valid;$/;"	m	struct:__anon14	file:	access:public
valid_filetype	vim/vim/src/option.c	/^valid_filetype(char_u *val)$/;"	f	file:	signature:(char_u *val)
valid_fold	vim/vim/src/fold.c	3032;"	d	file:
valid_fold	vim/vim/src/fold.c	3153;"	d	file:
valid_tabpage	vim/vim/src/window.c	/^valid_tabpage(tabpage_T *tpc)$/;"	f	signature:(tabpage_T *tpc)
valid_tabpage_win	vim/vim/src/window.c	/^valid_tabpage_win(tabpage_T *tpc)$/;"	f	signature:(tabpage_T *tpc)
valid_varname	vim/vim/src/eval.c	/^valid_varname(char_u *varname)$/;"	f	signature:(char_u *varname)
valid_word_prefix	vim/vim/src/spell.c	/^static int valid_word_prefix(int totprefcnt, int arridx, int flags, char_u *word, slang_T *slang, int cond_req);$/;"	p	file:	signature:(int totprefcnt, int arridx, int flags, char_u *word, slang_T *slang, int cond_req)
valid_word_prefix	vim/vim/src/spell.c	/^valid_word_prefix($/;"	f	file:	signature:( int totprefcnt, int arridx, int flags, char_u *word, slang_T *slang, int cond_req)
valid_yank_reg	vim/vim/src/ops.c	/^valid_yank_reg($/;"	f	signature:( int regname, int writing)
validate_botline	vim/vim/src/move.c	/^validate_botline(void)$/;"	f	signature:(void)
validate_cheight	vim/vim/src/move.c	/^static void validate_cheight(void);$/;"	p	file:	signature:(void)
validate_cheight	vim/vim/src/move.c	/^validate_cheight(void)$/;"	f	file:	signature:(void)
validate_cline_row	vim/vim/src/move.c	/^validate_cline_row(void)$/;"	f	signature:(void)
validate_current_state	vim/vim/src/syntax.c	/^static void validate_current_state(void);$/;"	p	file:	signature:(void)
validate_current_state	vim/vim/src/syntax.c	/^validate_current_state(void)$/;"	f	file:	signature:(void)
validate_cursor	vim/vim/src/move.c	/^validate_cursor(void)$/;"	f	signature:(void)
validate_cursor_col	vim/vim/src/move.c	/^validate_cursor_col(void)$/;"	f	signature:(void)
validate_maphash	vim/vim/src/getchar.c	/^static void	validate_maphash(void);$/;"	p	file:	signature:(void)
validate_maphash	vim/vim/src/getchar.c	/^validate_maphash(void)$/;"	f	file:	signature:(void)
validate_virtcol	vim/vim/src/move.c	/^validate_virtcol(void)$/;"	f	signature:(void)
validate_virtcol_win	vim/vim/src/move.c	/^validate_virtcol_win(win_T *wp)$/;"	f	signature:(win_T *wp)
value	vim/vim/src/ex_cmds.c	/^	varnumber_T	value;		\/* value if sorting by integer *\/$/;"	m	union:__anon215::__anon216	file:	access:public
value	vim/vim/src/gui.h	/^    long	value;		\/* Represents top line number visible *\/$/;"	m	struct:GuiScrollbar	access:public
value	vim/vim/src/structs.h	/^    char_u		*value;		\/* exception value *\/$/;"	m	struct:vim_exception	access:public
value	vim/vim/src/xpm/include/xpm.h	/^    char *value;		\/* Color value *\/$/;"	m	struct:__anon88	access:public
value_flt	vim/vim/src/ex_cmds.c	/^	float_T value_flt;	\/* value if sorting by float *\/$/;"	m	union:__anon215::__anon216	file:	access:public
value_table_for_3	vim/vim/src/hangulin.c	/^static char_u value_table_for_3[] =$/;"	v	file:
valuemask	vim/vim/src/xpm/include/xpm.h	/^    unsigned long valuemask;		\/* Specifies which attributes are$/;"	m	struct:__anon93	access:public
valuemask	vim/vim/src/xpm/include/xpm.h	/^    unsigned long valuemask;	\/* Specifies which attributes are defined *\/$/;"	m	struct:__anon92	access:public
var	vim/vim/src/option.c	/^    char_u	*var;		\/* global option: pointer to variable;$/;"	m	struct:vimoption	file:	access:public
var	vim/vim/src/structs.h	/^	dictitem_T	var;		\/* variable (without room for name) *\/$/;"	m	struct:funccall_S::__anon188	access:public
var2fpos	vim/vim/src/eval.c	/^var2fpos($/;"	f	signature:( typval_T *varp, int dollar_lnum, int *fnum)
var_check_fixed	vim/vim/src/eval.c	/^var_check_fixed(int flags, char_u *name, int use_gettext)$/;"	f	signature:(int flags, char_u *name, int use_gettext)
var_check_func_name	vim/vim/src/eval.c	/^var_check_func_name($/;"	f	signature:( char_u *name, int new_var)
var_check_ro	vim/vim/src/eval.c	/^var_check_ro(int flags, char_u *name, int use_gettext)$/;"	f	signature:(int flags, char_u *name, int use_gettext)
var_flavour	vim/vim/src/eval.c	/^static var_flavour_T var_flavour(char_u *varname);$/;"	p	file:	signature:(char_u *varname)
var_flavour	vim/vim/src/eval.c	/^var_flavour(char_u *varname)$/;"	f	file:	signature:(char_u *varname)
var_flavour_T	vim/vim/src/eval.c	/^} var_flavour_T;$/;"	t	typeref:enum:__anon78	file:
var_redir_start	vim/vim/src/eval.c	/^var_redir_start(char_u *name, int append)$/;"	f	signature:(char_u *name, int append)
var_redir_stop	vim/vim/src/eval.c	/^var_redir_stop(void)$/;"	f	signature:(void)
var_redir_str	vim/vim/src/eval.c	/^var_redir_str(char_u *value, int value_len)$/;"	f	signature:(char_u *value, int value_len)
varnamebuf	vim/vim/src/eval.c	/^static char_u	*varnamebuf = NULL;$/;"	v	file:
varnamebuflen	vim/vim/src/eval.c	/^static int	varnamebuflen = 0;$/;"	v	file:
varnumber_T	vim/vim/src/structs.h	/^typedef __int64		    varnumber_T;$/;"	t
varnumber_T	vim/vim/src/structs.h	/^typedef int		    varnumber_T;$/;"	t
varnumber_T	vim/vim/src/structs.h	/^typedef int64_t		    varnumber_T;$/;"	t
varnumber_T	vim/vim/src/structs.h	/^typedef long		    varnumber_T;$/;"	t
vars_clear	vim/vim/src/eval.c	/^vars_clear(hashtab_T *ht)$/;"	f	signature:(hashtab_T *ht)
vars_clear_ext	vim/vim/src/eval.c	/^vars_clear_ext(hashtab_T *ht, int free_val)$/;"	f	signature:(hashtab_T *ht, int free_val)
vartype_T	vim/vim/src/structs.h	/^} vartype_T;$/;"	t	typeref:enum:__anon183
vc	vim/vim/src/quickfix.c	/^    vimconv_T	vc;$/;"	m	struct:__anon13	file:	access:public
vc_cpfrom	vim/vim/src/structs.h	/^    int		vc_cpfrom;	\/* codepage to convert from (CONV_CODEPAGE) *\/$/;"	m	struct:__anon181	access:public
vc_cpto	vim/vim/src/structs.h	/^    int		vc_cpto;	\/* codepage to convert to (CONV_CODEPAGE) *\/$/;"	m	struct:__anon181	access:public
vc_factor	vim/vim/src/structs.h	/^    int		vc_factor;	\/* max. expansion factor *\/$/;"	m	struct:__anon181	access:public
vc_fail	vim/vim/src/structs.h	/^    int		vc_fail;	\/* fail for invalid char, don't use '?' *\/$/;"	m	struct:__anon181	access:public
vc_fd	vim/vim/src/structs.h	/^    iconv_t	vc_fd;		\/* for CONV_ICONV *\/$/;"	m	struct:__anon181	access:public
vc_type	vim/vim/src/structs.h	/^    int		vc_type;	\/* zero or one of the CONV_ values *\/$/;"	m	struct:__anon181	access:public
vcol2col	vim/vim/src/ui.c	/^vcol2col(win_T *wp, linenr_T lnum, int vcol)$/;"	f	signature:(win_T *wp, linenr_T lnum, int vcol)
ve_flags	vim/vim/src/option.h	/^EXTERN unsigned ve_flags;$/;"	v
vendorShellClassRec	vim/vim/src/gui_gtk_vms.h	674;"	d
vendorShellWidgetClass	vim/vim/src/gui_gtk_vms.h	675;"	d
verb	vim/vim/src/integration.h	/^	char		*verb;$/;"	m	struct:__anon66	access:public
verb	vim/vim/src/workshop.c	/^    char	*verb;			\/* menu verb *\/$/;"	m	struct:__anon233	file:	access:public
verb_msg	vim/vim/src/message.c	/^verb_msg(char_u *s)$/;"	f	signature:(char_u *s)
verbose_did_open	vim/vim/src/message.c	/^static int  verbose_did_open = FALSE;$/;"	v	file:
verbose_enter	vim/vim/src/message.c	/^verbose_enter(void)$/;"	f	signature:(void)
verbose_enter_scroll	vim/vim/src/message.c	/^verbose_enter_scroll(void)$/;"	f	signature:(void)
verbose_fd	vim/vim/src/message.c	/^static FILE *verbose_fd = NULL;$/;"	v	file:
verbose_leave	vim/vim/src/message.c	/^verbose_leave(void)$/;"	f	signature:(void)
verbose_leave_scroll	vim/vim/src/message.c	/^verbose_leave_scroll(void)$/;"	f	signature:(void)
verbose_open	vim/vim/src/message.c	/^verbose_open(void)$/;"	f	signature:(void)
verbose_stop	vim/vim/src/message.c	/^verbose_stop(void)$/;"	f	signature:(void)
version	vim/vim/src/hardcopy.c	/^    char_u  version[256];$/;"	m	struct:prt_ps_resource_S	file:	access:public
version	vim/vim/src/xxd/xxd.c	/^char version[] = "xxd V1.10 27oct98 by Juergen Weigert";$/;"	v
version_msg	vim/vim/src/version.c	/^static void version_msg(char *s);$/;"	p	file:	signature:(char *s)
version_msg	vim/vim/src/version.c	/^version_msg(char *s)$/;"	f	file:	signature:(char *s)
vgetc	vim/vim/src/getchar.c	/^vgetc(void)$/;"	f	signature:(void)
vgetc_busy	vim/vim/src/globals.h	/^EXTERN int	vgetc_busy INIT(= 0);	    \/* when inside vgetc() then > 0 *\/$/;"	v
vgetc_im_active	vim/vim/src/globals.h	/^EXTERN int	vgetc_im_active;	\/* Input Method was active for last$/;"	v
vgetorpeek	vim/vim/src/getchar.c	/^static int	vgetorpeek(int);$/;"	p	file:	signature:(int)
vgetorpeek	vim/vim/src/getchar.c	/^vgetorpeek(int advance)$/;"	f	file:	signature:(int advance)
vgmDlgItm	vim/vim/src/gui_mac.c	/^} vgmDlgItm; \/* Vim Gui_Mac.c Dialog Item *\/$/;"	t	typeref:struct:__anon225	file:
vi_curswant	vim/vim/src/structs.h	/^    colnr_T	vi_curswant;	\/* MAXCOL from w_curswant *\/$/;"	m	struct:__anon165	access:public
vi_end	vim/vim/src/structs.h	/^    pos_T	vi_end;		\/* end position of last VIsual *\/$/;"	m	struct:__anon165	access:public
vi_jumplist	vim/vim/src/mark.c	/^static xfmark_T *vi_jumplist = NULL;$/;"	v	file:
vi_jumplist_len	vim/vim/src/mark.c	/^static int vi_jumplist_len = 0;$/;"	v	file:
vi_mode	vim/vim/src/structs.h	/^    int		vi_mode;	\/* VIsual_mode of last VIsual *\/$/;"	m	struct:__anon165	access:public
vi_namedfm	vim/vim/src/mark.c	/^static xfmark_T *vi_namedfm = NULL;$/;"	v	file:
vi_start	vim/vim/src/structs.h	/^    pos_T	vi_start;	\/* start pos of last VIsual *\/$/;"	m	struct:__anon165	access:public
vimContainer	vim/vim/src/gui.h	/^    PtWidget_t	*vimContainer;		\/* PtPanel *\/$/;"	m	struct:Gui	access:public
vimForm	vim/vim/src/gui_athena.c	/^static Widget vimForm = (Widget)0;$/;"	v	file:
vimForm	vim/vim/src/gui_motif.c	/^static Widget vimForm;$/;"	v	file:
vimLoadLib	vim/vim/src/os_win32.c	/^vimLoadLib(char *name)$/;"	f	signature:(char *name)
vimMenuBar	vim/vim/src/gui.h	/^    PtWidget_t	*vimMenuBar;$/;"	m	struct:Gui	access:public
vimProperty	vim/vim/src/if_xcmdsrv.c	/^static Atom	vimProperty = None;$/;"	v	file:
vimSetDlgItemText	vim/vim/src/os_mswin.c	/^vimSetDlgItemText(HWND hDlg, int nIDDlgItem, char_u *s)$/;"	f	file:	signature:(HWND hDlg, int nIDDlgItem, char_u *s)
vimSetDlgItemText	vim/vim/src/os_mswin.c	1126;"	d	file:
vimShell	vim/vim/src/gui_x11.c	/^Widget vimShell = (Widget)0;$/;"	v
vimTextArea	vim/vim/src/gui.h	/^    PtWidget_t	*vimTextArea;		\/* PtRaw *\/$/;"	m	struct:Gui	access:public
vimToolBar	vim/vim/src/gui.h	/^    PtWidget_t	*vimToolBar;$/;"	m	struct:Gui	access:public
vimToolBarGroup	vim/vim/src/gui.h	/^    PtWidget_t	*vimToolBarGroup;$/;"	m	struct:Gui	access:public
vimWindow	vim/vim/src/gui.h	/^    PtWidget_t	*vimWindow;		\/* PtWindow *\/$/;"	m	struct:Gui	access:public
vim_FullName	vim/vim/src/window.c	/^vim_FullName($/;"	f	signature:( char_u *fname, char_u *buf, int len, int force)
vim_SelFile	vim/vim/src/gui_at_fs.c	/^vim_SelFile($/;"	f	signature:( Widget toplevel, char *prompt, char *init_path, int (*show_entry)(), int x, int y, guicolor_T fg, guicolor_T bg, guicolor_T scroll_fg, guicolor_T scroll_bg)
vim_SelFile	vim/vim/src/proto.h	/^extern char *vim_SelFile(Widget toplevel, char *prompt, char *init_path, int (*show_entry)(), int x, int y, guicolor_T fg, guicolor_T bg, guicolor_T scroll_fg, guicolor_T scroll_bg);$/;"	p	signature:(Widget toplevel, char *prompt, char *init_path, int (*show_entry)(), int x, int y, guicolor_T fg, guicolor_T bg, guicolor_T scroll_fg, guicolor_T scroll_bg)
vim_WindowProc	vim/vim/src/gui_w32.c	/^vim_WindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	signature:(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
vim_XawScrollbarSetThumb	vim/vim/src/gui_at_sb.c	/^vim_XawScrollbarSetThumb(Widget w, double top, double shown, double max)$/;"	f	signature:(Widget w, double top, double shown, double max)
vim_XawScrollbarSetThumb	vim/vim/src/gui_at_sb.h	/^extern void vim_XawScrollbarSetThumb(Widget, double, double, double);$/;"	p	signature:(Widget, double, double, double)
vim_acl_T	vim/vim/src/vim.h	/^typedef void	    *vim_acl_T;		\/* dummy to pass an ACL to a function *\/$/;"	t
vim_acl_solaris_T	vim/vim/src/os_unix.c	/^typedef struct vim_acl_solaris_T {$/;"	s	file:
vim_acl_solaris_T	vim/vim/src/os_unix.c	/^} vim_acl_solaris_T;$/;"	t	typeref:struct:vim_acl_solaris_T	file:
vim_acl_solaris_T::acl_cnt	vim/vim/src/os_unix.c	/^    int acl_cnt;$/;"	m	struct:vim_acl_solaris_T	file:	access:public
vim_acl_solaris_T::acl_entry	vim/vim/src/os_unix.c	/^    aclent_t *acl_entry;$/;"	m	struct:vim_acl_solaris_T	file:	access:public
vim_atom	vim/vim/src/gui_gtk_x11.c	/^static GdkAtom vim_atom = GDK_NONE;	\/* Vim's own special selection format *\/$/;"	v	file:
vim_atom	vim/vim/src/ui.c	/^static Atom	vim_atom;	\/* Vim's own special selection format *\/$/;"	v	file:
vim_backtick	vim/vim/src/misc1.c	/^static int vim_backtick(char_u *p);$/;"	p	file:	signature:(char_u *p)
vim_backtick	vim/vim/src/misc1.c	/^vim_backtick(char_u *p)$/;"	f	file:	signature:(char_u *p)
vim_beep	vim/vim/src/misc1.c	/^vim_beep($/;"	f	signature:( unsigned val)
vim_buffer_validp	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_buffer_validp(void *data, int, Scheme_Object **);$/;"	p	file:	signature:(void *data, int, Scheme_Object **)
vim_buffer_validp	vim/vim/src/if_mzsch.c	/^vim_buffer_validp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)
vim_bufferp	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_bufferp(void *data, int, Scheme_Object **);$/;"	p	file:	signature:(void *data, int, Scheme_Object **)
vim_bufferp	vim/vim/src/if_mzsch.c	/^vim_bufferp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)
vim_chdir	vim/vim/src/misc2.c	/^vim_chdir(char_u *new_dir)$/;"	f	signature:(char_u *new_dir)
vim_chdirfile	vim/vim/src/misc2.c	/^vim_chdirfile(char_u *fname)$/;"	f	signature:(char_u *fname)
vim_code0	vim/vim/src/gui_mac.c	/^    char_u  vim_code0;$/;"	m	struct:__anon224	file:	access:public
vim_code0	vim/vim/src/gui_photon.c	/^    char_u  vim_code0;$/;"	m	struct:__anon240	file:	access:public
vim_code0	vim/vim/src/gui_w32.c	/^    char_u  vim_code0;$/;"	m	struct:__anon246	file:	access:public
vim_code0	vim/vim/src/gui_x11.c	/^    char_u  vim_code0;$/;"	m	struct:specialkey	file:	access:public
vim_code1	vim/vim/src/gui_mac.c	/^    char_u  vim_code1;$/;"	m	struct:__anon224	file:	access:public
vim_code1	vim/vim/src/gui_photon.c	/^    char_u  vim_code1;$/;"	m	struct:__anon240	file:	access:public
vim_code1	vim/vim/src/gui_w32.c	/^    char_u  vim_code1;$/;"	m	struct:__anon246	file:	access:public
vim_code1	vim/vim/src/gui_x11.c	/^    char_u  vim_code1;$/;"	m	struct:specialkey	file:	access:public
vim_command	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_command(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
vim_command	vim/vim/src/if_mzsch.c	/^vim_command(void *data, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *data, int argc, Scheme_Object **argv)
vim_command	vim/vim/src/if_ruby.c	/^static VALUE vim_command(VALUE self UNUSED, VALUE str)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE str)
vim_create_process	vim/vim/src/os_win32.c	/^vim_create_process($/;"	f	file:	signature:( char *cmd, BOOL inherit_handles, DWORD flags, STARTUPINFO *si, PROCESS_INFORMATION *pi)
vim_deltempdir	vim/vim/src/fileio.c	/^vim_deltempdir(void)$/;"	f	signature:(void)
vim_dialog_yesno	vim/vim/src/message.c	/^vim_dialog_yesno($/;"	f	signature:( int type, char_u *title, char_u *message, int dflt)
vim_dialog_yesnoallcancel	vim/vim/src/message.c	/^vim_dialog_yesnoallcancel($/;"	f	signature:( int type, char_u *title, char_u *message, int dflt)
vim_dialog_yesnocancel	vim/vim/src/message.c	/^vim_dialog_yesnocancel($/;"	f	signature:( int type, char_u *title, char_u *message, int dflt)
vim_error_check	vim/vim/src/if_mzsch.c	/^static int vim_error_check(void);$/;"	p	file:	signature:(void)
vim_error_check	vim/vim/src/if_mzsch.c	/^vim_error_check(void)$/;"	f	file:	signature:(void)
vim_eval	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_eval(void *, int, Scheme_Object **);$/;"	p	file:	signature:(void *, int, Scheme_Object **)
vim_eval	vim/vim/src/if_mzsch.c	/^vim_eval(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv UNUSED)
vim_evaluate	vim/vim/src/if_ruby.c	/^static VALUE vim_evaluate(VALUE self UNUSED, VALUE str)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE str)
vim_exception	vim/vim/src/structs.h	/^struct vim_exception$/;"	s
vim_exception::caught	vim/vim/src/structs.h	/^    except_T		*caught;	\/* next exception on the caught stack *\/$/;"	m	struct:vim_exception	access:public
vim_exception::messages	vim/vim/src/structs.h	/^    struct msglist	*messages;	\/* message(s) causing error exception *\/$/;"	m	struct:vim_exception	typeref:struct:vim_exception::msglist	access:public
vim_exception::throw_lnum	vim/vim/src/structs.h	/^    linenr_T		throw_lnum;	\/* line number of the throw point *\/$/;"	m	struct:vim_exception	access:public
vim_exception::throw_name	vim/vim/src/structs.h	/^    char_u		*throw_name;	\/* name of the throw point *\/$/;"	m	struct:vim_exception	access:public
vim_exception::type	vim/vim/src/structs.h	/^    except_type_T	type;		\/* exception type *\/$/;"	m	struct:vim_exception	access:public
vim_exception::value	vim/vim/src/structs.h	/^    char_u		*value;		\/* exception value *\/$/;"	m	struct:vim_exception	access:public
vim_exn	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_exn = NULL; \/* Vim Error exception *\/$/;"	v	file:
vim_fexists	vim/vim/src/misc1.c	/^vim_fexists(char_u *fname)$/;"	f	signature:(char_u *fname)
vim_fgets	vim/vim/src/fileio.c	/^vim_fgets(char_u *buf, int size, FILE *fp)$/;"	f	signature:(char_u *buf, int size, FILE *fp)
vim_findfile	vim/vim/src/misc2.c	/^vim_findfile(void *search_ctx_arg)$/;"	f	signature:(void *search_ctx_arg)
vim_findfile_cleanup	vim/vim/src/misc2.c	/^vim_findfile_cleanup(void *ctx)$/;"	f	signature:(void *ctx)
vim_findfile_free_visited	vim/vim/src/misc2.c	/^vim_findfile_free_visited(void *search_ctx_arg)$/;"	f	signature:(void *search_ctx_arg)
vim_findfile_free_visited_list	vim/vim/src/misc2.c	/^static void vim_findfile_free_visited_list(ff_visited_list_hdr_T **list_headp);$/;"	p	file:	signature:(ff_visited_list_hdr_T **list_headp)
vim_findfile_free_visited_list	vim/vim/src/misc2.c	/^vim_findfile_free_visited_list(ff_visited_list_hdr_T **list_headp)$/;"	f	file:	signature:(ff_visited_list_hdr_T **list_headp)
vim_findfile_init	vim/vim/src/misc2.c	/^vim_findfile_init($/;"	f	signature:( char_u *path, char_u *filename, char_u *stopdirs UNUSED, int level, int free_visited, int find_what, void *search_ctx_arg, int tagfile, char_u *rel_fname)
vim_findfile_stopdir	vim/vim/src/misc2.c	/^vim_findfile_stopdir(char_u *buf)$/;"	f	signature:(char_u *buf)
vim_fnamecmp	vim/vim/src/misc1.c	/^vim_fnamecmp(char_u *x, char_u *y)$/;"	f	signature:(char_u *x, char_u *y)
vim_fnamencmp	vim/vim/src/misc1.c	/^vim_fnamencmp(char_u *x, char_u *y, size_t len)$/;"	f	signature:(char_u *x, char_u *y, size_t len)
vim_free	vim/vim/src/misc2.c	/^vim_free(void *x)$/;"	f	signature:(void *x)
vim_free_in_input_buf	vim/vim/src/ui.c	/^vim_free_in_input_buf(void)$/;"	f	signature:(void)
vim_fseek	vim/vim/src/vim.h	410;"	d
vim_fseek	vim/vim/src/vim.h	414;"	d
vim_fseek	vim/vim/src/vim.h	426;"	d
vim_fseek	vim/vim/src/vim.h	430;"	d
vim_ftell	vim/vim/src/vim.h	411;"	d
vim_ftell	vim/vim/src/vim.h	415;"	d
vim_ftell	vim/vim/src/vim.h	425;"	d
vim_ftell	vim/vim/src/vim.h	429;"	d
vim_funcref	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_funcref(void *data, int argc, Scheme_Object **argv);$/;"	p	file:	signature:(void *data, int argc, Scheme_Object **argv)
vim_funcref	vim/vim/src/if_mzsch.c	/^vim_funcref(void *name, int argc, Scheme_Object **argv)$/;"	f	file:	signature:(void *name, int argc, Scheme_Object **argv)
vim_getenv	vim/vim/src/misc1.c	/^vim_getenv(char_u *name, int *mustfree)$/;"	f	signature:(char_u *name, int *mustfree)
vim_handle_signal	vim/vim/src/os_unix.c	/^vim_handle_signal(int sig)$/;"	f	signature:(int sig)
vim_handle_signal	vim/vim/src/vim.h	2374;"	d
vim_isAbsName	vim/vim/src/window.c	/^vim_isAbsName(char_u *name)$/;"	f	signature:(char_u *name)
vim_isIDc	vim/vim/src/charset.c	/^vim_isIDc(int c)$/;"	f	signature:(int c)
vim_is_ctrl_x_key	vim/vim/src/edit.c	/^vim_is_ctrl_x_key(int c)$/;"	f	signature:(int c)
vim_is_fastterm	vim/vim/src/os_unix.c	/^vim_is_fastterm(char_u *name)$/;"	f	signature:(char_u *name)
vim_is_input_buf_empty	vim/vim/src/ui.c	/^vim_is_input_buf_empty(void)$/;"	f	signature:(void)
vim_is_input_buf_full	vim/vim/src/ui.c	/^vim_is_input_buf_full(void)$/;"	f	signature:(void)
vim_is_iris	vim/vim/src/os_unix.c	/^vim_is_iris(char_u *name)$/;"	f	signature:(char_u *name)
vim_is_vt300	vim/vim/src/os_unix.c	/^vim_is_vt300(char_u *name)$/;"	f	signature:(char_u *name)
vim_is_xterm	vim/vim/src/os_unix.c	/^vim_is_xterm(char_u *name)$/;"	f	signature:(char_u *name)
vim_isbdigit	vim/vim/src/charset.c	/^vim_isbdigit(int c)$/;"	f	signature:(int c)
vim_isblankline	vim/vim/src/charset.c	/^vim_isblankline(char_u *lbuf)$/;"	f	signature:(char_u *lbuf)
vim_isdigit	vim/vim/src/charset.c	/^vim_isdigit(int c)$/;"	f	signature:(int c)
vim_isfilec	vim/vim/src/charset.c	/^vim_isfilec(int c)$/;"	f	signature:(int c)
vim_isfilec_or_wc	vim/vim/src/charset.c	/^vim_isfilec_or_wc(int c)$/;"	f	signature:(int c)
vim_islower	vim/vim/src/charset.c	/^vim_islower(int c)$/;"	f	signature:(int c)
vim_ispathlistsep	vim/vim/src/misc1.c	/^vim_ispathlistsep(int c)$/;"	f	signature:(int c)
vim_ispathsep	vim/vim/src/misc1.c	/^vim_ispathsep(int c)$/;"	f	signature:(int c)
vim_ispathsep_nocolon	vim/vim/src/misc1.c	/^vim_ispathsep_nocolon(int c)$/;"	f	signature:(int c)
vim_isprintc	vim/vim/src/charset.c	/^vim_isprintc(int c)$/;"	f	signature:(int c)
vim_isprintc_strict	vim/vim/src/charset.c	/^vim_isprintc_strict(int c)$/;"	f	signature:(int c)
vim_isspace	vim/vim/src/misc2.c	/^vim_isspace(int x)$/;"	f	signature:(int x)
vim_isupper	vim/vim/src/charset.c	/^vim_isupper(int c)$/;"	f	signature:(int c)
vim_iswordc	vim/vim/src/charset.c	/^vim_iswordc(int c)$/;"	f	signature:(int c)
vim_iswordc_buf	vim/vim/src/charset.c	/^vim_iswordc_buf(int c, buf_T *buf)$/;"	f	signature:(int c, buf_T *buf)
vim_iswordp	vim/vim/src/charset.c	/^vim_iswordp(char_u *p)$/;"	f	signature:(char_u *p)
vim_iswordp_buf	vim/vim/src/charset.c	/^vim_iswordp_buf(char_u *p, buf_T *buf)$/;"	f	signature:(char_u *p, buf_T *buf)
vim_isxdigit	vim/vim/src/charset.c	/^vim_isxdigit(int c)$/;"	f	signature:(int c)
vim_lseek	vim/vim/src/vim.h	409;"	d
vim_lseek	vim/vim/src/vim.h	413;"	d
vim_lseek	vim/vim/src/vim.h	424;"	d
vim_lseek	vim/vim/src/vim.h	428;"	d
vim_main2	vim/vim/src/main.c	/^vim_main2(void)$/;"	f	signature:(void)
vim_mem_profile_dump	vim/vim/src/misc2.c	/^vim_mem_profile_dump(void)$/;"	f	signature:(void)
vim_memset	vim/vim/src/misc2.c	/^vim_memset(void *ptr, int c, size_t size)$/;"	f	signature:(void *ptr, int c, size_t size)
vim_memset	vim/vim/src/vim.h	/^void *vim_memset(void *, int, size_t);$/;"	p	signature:(void *, int, size_t)
vim_memset	vim/vim/src/vim.h	1747;"	d
vim_message	vim/vim/src/if_ruby.c	/^static VALUE vim_message(VALUE self UNUSED, VALUE str)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE str)
vim_mkdir	vim/vim/src/dosinst.h	57;"	d
vim_mkdir	vim/vim/src/dosinst.h	60;"	d
vim_mkdir	vim/vim/src/dosinst.h	62;"	d
vim_mkdir	vim/vim/src/os_amiga.h	227;"	d
vim_mkdir	vim/vim/src/os_unix.h	77;"	d
vim_mkdir	vim/vim/src/os_unix.h	79;"	d
vim_mkdir	vim/vim/src/os_win32.h	210;"	d
vim_mkdir	vim/vim/src/os_win32.h	212;"	d
vim_mkdir_emsg	vim/vim/src/ex_docmd.c	/^vim_mkdir_emsg(char_u *name, int prot)$/;"	f	signature:(char_u *name, int prot)
vim_module	vim/vim/src/if_py_both.h	/^static PyObject *vim_module;$/;"	v
vim_mz_buffer	vim/vim/src/if_mzsch.c	/^} vim_mz_buffer;$/;"	t	typeref:struct:__anon7	file:
vim_mz_window	vim/vim/src/if_mzsch.c	/^} vim_mz_window;$/;"	t	typeref:struct:__anon8	file:
vim_open_clipboard	vim/vim/src/winclip.c	/^vim_open_clipboard(void)$/;"	f	file:	signature:(void)
vim_parent_hwnd	vim/vim/src/gui_w32.c	/^HWND vim_parent_hwnd = NULL;$/;"	v
vim_read	vim/vim/src/vim.h	1765;"	d
vim_read	vim/vim/src/vim.h	1768;"	d
vim_realloc	vim/vim/src/vim.h	2210;"	d
vim_realloc	vim/vim/src/vim.h	2212;"	d
vim_regcomp	vim/vim/src/regexp.c	/^vim_regcomp(char_u *expr_arg, int re_flags)$/;"	f	signature:(char_u *expr_arg, int re_flags)
vim_regcomp_had_eol	vim/vim/src/regexp.c	/^vim_regcomp_had_eol(void)$/;"	f	signature:(void)
vim_regexec	vim/vim/src/regexp.c	/^vim_regexec(regmatch_T *rmp, char_u *line, colnr_T col)$/;"	f	signature:(regmatch_T *rmp, char_u *line, colnr_T col)
vim_regexec_multi	vim/vim/src/regexp.c	/^vim_regexec_multi($/;"	f	signature:( regmmatch_T *rmp, win_T *win, buf_T *buf, linenr_T lnum, colnr_T col, proftime_T *tm, int *timed_out)
vim_regexec_nl	vim/vim/src/regexp.c	/^vim_regexec_nl(regmatch_T *rmp, char_u *line, colnr_T col)$/;"	f	signature:(regmatch_T *rmp, char_u *line, colnr_T col)
vim_regexec_prog	vim/vim/src/regexp.c	/^vim_regexec_prog($/;"	f	signature:( regprog_T **prog, int ignore_case, char_u *line, colnr_T col)
vim_regexec_string	vim/vim/src/regexp.c	/^vim_regexec_string($/;"	f	file:	signature:( regmatch_T *rmp, char_u *line, colnr_T col, int nl)
vim_regfree	vim/vim/src/regexp.c	/^vim_regfree(regprog_T *prog)$/;"	f	signature:(regprog_T *prog)
vim_regsub	vim/vim/src/regexp.c	/^vim_regsub($/;"	f	signature:( regmatch_T *rmp, char_u *source, typval_T *expr, char_u *dest, int copy, int magic, int backslash)
vim_regsub_both	vim/vim/src/regexp.c	/^static int vim_regsub_both(char_u *source, typval_T *expr, char_u *dest, int copy, int magic, int backslash);$/;"	p	file:	signature:(char_u *source, typval_T *expr, char_u *dest, int copy, int magic, int backslash)
vim_regsub_both	vim/vim/src/regexp.c	/^vim_regsub_both($/;"	f	file:	signature:( char_u *source, typval_T *expr, char_u *dest, int copy, int magic, int backslash)
vim_regsub_multi	vim/vim/src/regexp.c	/^vim_regsub_multi($/;"	f	signature:( regmmatch_T *rmp, linenr_T lnum, char_u *source, char_u *dest, int copy, int magic, int backslash)
vim_rename	vim/vim/src/fileio.c	/^vim_rename(char_u *from, char_u *to)$/;"	f	signature:(char_u *from, char_u *to)
vim_resources	vim/vim/src/gui_x11.c	/^static XtResource vim_resources[] =$/;"	v	file:
vim_round	vim/vim/src/evalfunc.c	/^vim_round(float_T f)$/;"	f	signature:(float_T f)
vim_ruby_init	vim/vim/src/if_ruby.c	/^void vim_ruby_init(void *stack_start)$/;"	f	signature:(void *stack_start)
vim_scrollbarClassRec	vim/vim/src/gui_at_sb.c	/^ScrollbarClassRec vim_scrollbarClassRec =$/;"	v
vim_scrollbarWidgetClass	vim/vim/src/gui_at_sb.c	/^WidgetClass vim_scrollbarWidgetClass = (WidgetClass)&vim_scrollbarClassRec;$/;"	v
vim_set_option	vim/vim/src/if_ruby.c	/^static VALUE vim_set_option(VALUE self UNUSED, VALUE str)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE str)
vim_setenv	vim/vim/src/misc1.c	/^vim_setenv(char_u *name, char_u *val)$/;"	f	signature:(char_u *name, char_u *val)
vim_settempdir	vim/vim/src/fileio.c	/^static void vim_settempdir(char_u *tempdir);$/;"	p	file:	signature:(char_u *tempdir)
vim_settempdir	vim/vim/src/fileio.c	/^vim_settempdir(char_u *tempdir)$/;"	f	file:	signature:(char_u *tempdir)
vim_shell_execute	vim/vim/src/os_win32.c	/^vim_shell_execute($/;"	f	file:	signature:( char *cmd, INT n_show_cmd)
vim_snprintf	vim/vim/src/message.c	/^int vim_snprintf(char *str, size_t str_m, char *fmt, ...);$/;"	p	file:	signature:(char *str, size_t str_m, char *fmt, ...)
vim_snprintf	vim/vim/src/message.c	/^vim_snprintf(char *str, size_t str_m, char *fmt, ...)$/;"	f	signature:(char *str, size_t str_m, char *fmt, ...)
vim_snprintf	vim/vim/src/proto.h	/^vim_snprintf(char *, size_t, char *, ...);$/;"	p	signature:(char *, size_t, char *, ...)
vim_snprintf_add	vim/vim/src/message.c	/^vim_snprintf_add(char *str, size_t str_m, char *fmt, ...)$/;"	f	signature:(char *str, size_t str_m, char *fmt, ...)
vim_snprintf_add	vim/vim/src/proto.h	/^vim_snprintf_add(char *, size_t, char *, ...);$/;"	p	signature:(char *, size_t, char *, ...)
vim_special_path	vim/vim/src/if_py_both.h	/^static const char *vim_special_path = "_vim_path_";$/;"	v
vim_special_path_object	vim/vim/src/if_py_both.h	/^static PyObject *vim_special_path_object;$/;"	v
vim_stat	vim/vim/src/misc2.c	/^vim_stat(const char *name, stat_T *stp)$/;"	f	signature:(const char *name, stat_T *stp)
vim_stat	vim/vim/src/os_mswin.c	/^vim_stat(const char *name, stat_T *stp)$/;"	f	signature:(const char *name, stat_T *stp)
vim_str2nr	vim/vim/src/charset.c	/^vim_str2nr($/;"	f	signature:( char_u *start, int *prep, int *len, int what, varnumber_T *nptr, uvarnumber_T *unptr, int maxlen)
vim_str2rb_enc_str	vim/vim/src/if_ruby.c	/^vim_str2rb_enc_str(const char *s)$/;"	f	file:	signature:(const char *s)
vim_strbyte	vim/vim/src/misc2.c	/^vim_strbyte(char_u *string, int c)$/;"	f	signature:(char_u *string, int c)
vim_strcat	vim/vim/src/misc2.c	/^vim_strcat(char_u *to, char_u *from, size_t tosize)$/;"	f	signature:(char_u *to, char_u *from, size_t tosize)
vim_strchr	vim/vim/src/misc2.c	/^vim_strchr(char_u *string, int c)$/;"	f	signature:(char_u *string, int c)
vim_stricmp	vim/vim/src/misc2.c	/^vim_stricmp(char *s1, char *s2)$/;"	f	signature:(char *s1, char *s2)
vim_strncpy	vim/vim/src/misc2.c	/^vim_strncpy(char_u *to, char_u *from, size_t len)$/;"	f	signature:(char_u *to, char_u *from, size_t len)
vim_strnicmp	vim/vim/src/misc2.c	/^vim_strnicmp(char *s1, char *s2, size_t len)$/;"	f	signature:(char *s1, char *s2, size_t len)
vim_strnsave	vim/vim/src/misc2.c	/^vim_strnsave(char_u *string, int len)$/;"	f	signature:(char_u *string, int len)
vim_strnsave_up	vim/vim/src/misc2.c	/^vim_strnsave_up(char_u *string, int len)$/;"	f	signature:(char_u *string, int len)
vim_strnsize	vim/vim/src/charset.c	/^vim_strnsize(char_u *s, int len)$/;"	f	signature:(char_u *s, int len)
vim_strpbrk	vim/vim/src/misc2.c	/^vim_strpbrk(char_u *s, char_u *charset)$/;"	f	signature:(char_u *s, char_u *charset)
vim_strpbrk	vim/vim/src/misc2.c	1965;"	d	file:
vim_strpbrk	vim/vim/src/proto.h	/^char_u *vim_strpbrk(char_u *s, char_u *charset);$/;"	p	signature:(char_u *s, char_u *charset)
vim_strpbrk	vim/vim/src/vim.h	1639;"	d
vim_strrchr	vim/vim/src/misc2.c	/^vim_strrchr(char_u *string, int c)$/;"	f	signature:(char_u *string, int c)
vim_strsave	vim/vim/src/misc2.c	/^vim_strsave(char_u *string)$/;"	f	signature:(char_u *string)
vim_strsave_escape_csi	vim/vim/src/getchar.c	/^vim_strsave_escape_csi($/;"	f	signature:( char_u *p)
vim_strsave_escaped	vim/vim/src/misc2.c	/^vim_strsave_escaped(char_u *string, char_u *esc_chars)$/;"	f	signature:(char_u *string, char_u *esc_chars)
vim_strsave_escaped_ext	vim/vim/src/misc2.c	/^vim_strsave_escaped_ext($/;"	f	signature:( char_u *string, char_u *esc_chars, int cc, int bsl)
vim_strsave_fnameescape	vim/vim/src/ex_getln.c	/^vim_strsave_fnameescape(char_u *fname, int shell)$/;"	f	signature:(char_u *fname, int shell)
vim_strsave_shellescape	vim/vim/src/misc2.c	/^vim_strsave_shellescape(char_u *string, int do_special, int do_newline)$/;"	f	signature:(char_u *string, int do_special, int do_newline)
vim_strsave_up	vim/vim/src/misc2.c	/^vim_strsave_up(char_u *string)$/;"	f	signature:(char_u *string)
vim_strsize	vim/vim/src/charset.c	/^vim_strsize(char_u *s)$/;"	f	signature:(char_u *s)
vim_strup	vim/vim/src/misc2.c	/^vim_strup($/;"	f	signature:( char_u *p)
vim_tcl_init	vim/vim/src/if_tcl.c	/^vim_tcl_init(char *arg)$/;"	f	signature:(char *arg)
vim_tempdir	vim/vim/src/globals.h	/^EXTERN char_u	*vim_tempdir INIT(= NULL); \/* Name of Vim's own temp dir.$/;"	v
vim_tempname	vim/vim/src/fileio.c	/^vim_tempname($/;"	f	signature:( int extra_char UNUSED, int keep UNUSED)
vim_tgetstr	vim/vim/src/term.c	/^static char_u *vim_tgetstr(char *s, char_u **pp);$/;"	p	file:	signature:(char *s, char_u **pp)
vim_tgetstr	vim/vim/src/term.c	/^vim_tgetstr(char *s, char_u **pp)$/;"	f	file:	signature:(char *s, char_u **pp)
vim_time	vim/vim/src/ex_cmds.c	/^vim_time(void)$/;"	f	signature:(void)
vim_to_mzscheme	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_to_mzscheme(typval_T *vim_value);$/;"	p	file:	signature:(typval_T *vim_value)
vim_to_mzscheme	vim/vim/src/if_mzsch.c	/^vim_to_mzscheme(typval_T *vim_value)$/;"	f	file:	signature:(typval_T *vim_value)
vim_to_mzscheme_impl	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_to_mzscheme_impl(typval_T *vim_value, int depth,$/;"	p	file:	signature:(typval_T *vim_value, int depth, Scheme_Hash_Table *visited)
vim_to_mzscheme_impl	vim/vim/src/if_mzsch.c	/^vim_to_mzscheme_impl(typval_T *vim_value, int depth, Scheme_Hash_Table *visited)$/;"	f	file:	signature:(typval_T *vim_value, int depth, Scheme_Hash_Table *visited)
vim_to_ruby	vim/vim/src/if_ruby.c	/^static VALUE vim_to_ruby(typval_T *tv)$/;"	f	file:	signature:(typval_T *tv)
vim_tolower	vim/vim/src/charset.c	/^vim_tolower(int c)$/;"	f	signature:(int c)
vim_toupper	vim/vim/src/charset.c	/^vim_toupper(int c)$/;"	f	signature:(int c)
vim_unescape_csi	vim/vim/src/getchar.c	/^vim_unescape_csi(char_u *p)$/;"	f	signature:(char_u *p)
vim_used_in_input_buf	vim/vim/src/ui.c	/^vim_used_in_input_buf(void)$/;"	f	signature:(void)
vim_version_dir	vim/vim/src/misc1.c	/^static char_u *vim_version_dir(char_u *vimdir);$/;"	p	file:	signature:(char_u *vimdir)
vim_version_dir	vim/vim/src/misc1.c	/^vim_version_dir(char_u *vimdir)$/;"	f	file:	signature:(char_u *vimdir)
vim_vsnprintf	vim/vim/src/message.c	/^vim_vsnprintf($/;"	f	signature:( char *str, size_t str_m, char *fmt, va_list ap)
vim_vsnprintf	vim/vim/src/proto.h	/^int vim_vsnprintf(char *str, size_t str_m, char *fmt, va_list ap);$/;"	p	signature:(char *str, size_t str_m, char *fmt, va_list ap)
vim_vsnprintf_typval	vim/vim/src/message.c	/^vim_vsnprintf_typval($/;"	f	signature:( char *str, size_t str_m, char *fmt, va_list ap, typval_T *tvs)
vim_vsnprintf_typval	vim/vim/src/proto.h	/^int vim_vsnprintf_typval(char *str, size_t str_m, char *fmt, va_list ap, typval_T *tvs);$/;"	p	signature:(char *str, size_t str_m, char *fmt, va_list ap, typval_T *tvs)
vim_window_validp	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_window_validp(void *data, int, Scheme_Object **);$/;"	p	file:	signature:(void *data, int, Scheme_Object **)
vim_window_validp	vim/vim/src/if_mzsch.c	/^vim_window_validp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)
vim_windowp	vim/vim/src/if_mzsch.c	/^static Scheme_Object *vim_windowp(void *data, int, Scheme_Object **);$/;"	p	file:	signature:(void *data, int, Scheme_Object **)
vim_windowp	vim/vim/src/if_mzsch.c	/^vim_windowp(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)$/;"	f	file:	signature:(void *data UNUSED, int argc UNUSED, Scheme_Object **argv)
vim_write	vim/vim/src/vim.h	1766;"	d
vim_write	vim/vim/src/vim.h	1769;"	d
vimconv_T	vim/vim/src/structs.h	/^} vimconv_T;$/;"	t	typeref:struct:__anon181
vimdllobj	vim/vim/src/Make_bc5.mak	/^vimdllobj = $(vimobj)$/;"	m
vimenc_atom	vim/vim/src/gui_gtk_x11.c	/^static GdkAtom vimenc_atom = GDK_NONE;	\/* Vim's extended selection format *\/$/;"	v	file:
vimenc_atom	vim/vim/src/ui.c	/^static Atom	vimenc_atom;	\/* Vim's extended selection format *\/$/;"	v	file:
vimerror	vim/vim/src/if_tcl.c	/^static int vimerror _ANSI_ARGS_((Tcl_Interp *interp));$/;"	p	file:	signature:(Tcl_Interp *interp)
vimerror	vim/vim/src/if_tcl.c	/^vimerror(Tcl_Interp *interp)$/;"	f	file:	signature:(Tcl_Interp *interp)
vimfiles_dir_choice	vim/vim/src/dosinst.c	/^static int     vimfiles_dir_choice;$/;"	v	file:
vimfiles_dir_choices	vim/vim/src/dosinst.c	/^static char    *(vimfiles_dir_choices[]) =$/;"	v	file:
vimfiles_dir_home	vim/vim/src/dosinst.c	/^    vimfiles_dir_home$/;"	e	enum:__anon136	file:
vimfiles_dir_none	vim/vim/src/dosinst.c	/^    vimfiles_dir_none = 1,$/;"	e	enum:__anon136	file:
vimfiles_dir_vim	vim/vim/src/dosinst.c	/^    vimfiles_dir_vim,$/;"	e	enum:__anon136	file:
vimfiles_subdirs	vim/vim/src/dosinst.c	/^static char	*(vimfiles_subdirs[]) =$/;"	v	file:
viminfo	vim/vim/src/ex_getln.c	/^    int		viminfo;	\/* when TRUE hisstr comes from viminfo *\/$/;"	m	struct:hist_entry	file:	access:public
viminfo_add_at_front	vim/vim/src/ex_getln.c	/^static int	viminfo_add_at_front = FALSE;$/;"	v	file:
viminfo_encoding	vim/vim/src/ex_cmds.c	/^static int viminfo_encoding(vir_T *virp);$/;"	p	file:	signature:(vir_T *virp)
viminfo_encoding	vim/vim/src/ex_cmds.c	/^viminfo_encoding(vir_T *virp)$/;"	f	file:	signature:(vir_T *virp)
viminfo_errcnt	vim/vim/src/ex_cmds.c	/^static int  viminfo_errcnt;$/;"	v	file:
viminfo_error	vim/vim/src/ex_cmds.c	/^viminfo_error(char *errnum, char *message, char_u *line)$/;"	f	signature:(char *errnum, char *message, char_u *line)
viminfo_filename	vim/vim/src/ex_cmds.c	/^static char_u *viminfo_filename(char_u	*);$/;"	p	file:	signature:(char_u *)
viminfo_filename	vim/vim/src/ex_cmds.c	/^viminfo_filename(char_u *file)$/;"	f	file:	signature:(char_u *file)
viminfo_hisidx	vim/vim/src/ex_getln.c	/^static int	viminfo_hisidx[HIST_COUNT] = {0, 0, 0, 0, 0};$/;"	v	file:
viminfo_hislen	vim/vim/src/ex_getln.c	/^static int	viminfo_hislen[HIST_COUNT] = {0, 0, 0, 0, 0};$/;"	v	file:
viminfo_history	vim/vim/src/ex_getln.c	/^static histentry_T *viminfo_history[HIST_COUNT] =$/;"	v	file:
viminfo_readline	vim/vim/src/ex_cmds.c	/^viminfo_readline(vir_T *virp)$/;"	f	signature:(vir_T *virp)
viminfo_readstring	vim/vim/src/ex_cmds.c	/^viminfo_readstring($/;"	f	signature:( vir_T *virp, int off, int convert UNUSED)
viminfo_writestring	vim/vim/src/ex_cmds.c	/^viminfo_writestring(FILE *fd, char_u *p)$/;"	f	signature:(FILE *fd, char_u *p)
vimlist_remove	vim/vim/src/list.c	/^vimlist_remove(list_T *l, listitem_T *item, listitem_T *item2)$/;"	f	signature:(list_T *l, listitem_T *item, listitem_T *item2)
vimmain	vim/vim/src/Make_bc5.mak	/^vimmain = \\$/;"	m
vimmenu_T	vim/vim/src/structs.h	/^typedef int vimmenu_T;$/;"	t
vimmenu_T	vim/vim/src/structs.h	/^typedef struct VimMenu vimmenu_T;$/;"	t	typeref:struct:VimMenu
vimmodule	vim/vim/src/if_python3.c	/^static struct PyModuleDef vimmodule;$/;"	v	typeref:struct:PyModuleDef	file:
vimobj	vim/vim/src/Make_bc5.mak	/^vimobj =  \\$/;"	m
vimobj	vim/vim/src/Make_bc5.mak	/^vimobj = $(vimobj) \\$/;"	m
vimobj	vim/vim/src/if_tcl.c	/^    void	*vimobj;    \/* Vim window or buffer (win_T* or buf_T*) *\/$/;"	m	struct:ref	file:	access:public
vimoption	vim/vim/src/option.c	/^struct vimoption$/;"	s	file:
vimoption::def_val	vim/vim/src/option.c	/^    char_u	*def_val[2];	\/* default values for variable (vi and vim) *\/$/;"	m	struct:vimoption	file:	access:public
vimoption::flags	vim/vim/src/option.c	/^    long_u	flags;		\/* see below *\/$/;"	m	struct:vimoption	file:	access:public
vimoption::fullname	vim/vim/src/option.c	/^    char	*fullname;	\/* full option name *\/$/;"	m	struct:vimoption	file:	access:public
vimoption::indir	vim/vim/src/option.c	/^    idopt_T	indir;		\/* global option: PV_NONE;$/;"	m	struct:vimoption	file:	access:public
vimoption::scriptID	vim/vim/src/option.c	/^    scid_T	scriptID;	\/* script in which the option was last set *\/$/;"	m	struct:vimoption	file:	access:public
vimoption::shortname	vim/vim/src/option.c	/^    char	*shortname;	\/* permissible abbreviation *\/$/;"	m	struct:vimoption	file:	access:public
vimoption::var	vim/vim/src/option.c	/^    char_u	*var;		\/* global option: pointer to variable;$/;"	m	struct:vimoption	file:	access:public
vimpty_getenv	vim/vim/src/misc2.c	/^vimpty_getenv(const char_u *string)$/;"	f	signature:(const char_u *string)
vimpty_getenv	vim/vim/src/proto.h	/^extern char_u *vimpty_getenv(const char_u *string);	\/* in misc2.c *\/$/;"	p	signature:(const char_u *string)
vimrc	vim/vim/src/dosinst.c	/^char	vimrc[BUFSIZE];		\/* name of vimrc file to create *\/$/;"	v
vimrc_found	vim/vim/src/option.c	/^vimrc_found(char_u *fname, char_u *envname)$/;"	f	signature:(char_u *fname, char_u *envname)
vimrun_path	vim/vim/src/os_win32.c	/^static char *vimrun_path = "vimrun ";$/;"	v	file:
vimtool_finish	build_all.sh	/^function vimtool_finish()$/;"	f
vimvar	vim/vim/src/eval.c	/^static struct vimvar$/;"	s	file:
vimvar::vv_di	vim/vim/src/eval.c	/^    dictitem16_T vv_di;		\/* value and name for key (max 16 chars!) *\/$/;"	m	struct:vimvar	file:	access:public
vimvar::vv_flags	vim/vim/src/eval.c	/^    char	vv_flags;	\/* VV_COMPAT, VV_RO, VV_RO_SBX *\/$/;"	m	struct:vimvar	file:	access:public
vimvar::vv_name	vim/vim/src/eval.c	/^    char	*vv_name;	\/* name of variable, without v: *\/$/;"	m	struct:vimvar	file:	access:public
vimvardict	vim/vim/src/globals.h	/^EXTERN dict_T	vimvardict;		    \/* Dictionary with v: variables *\/$/;"	v
vimvarht	vim/vim/src/eval.c	202;"	d	file:
vimvars	vim/vim/src/eval.c	/^} vimvars[VV_LEN] =$/;"	v	typeref:struct:vimvar	file:
vimvars_var	vim/vim/src/eval.c	/^static dictitem_T	vimvars_var;		\/* variable used for v: *\/$/;"	v	file:
vimwinmain	vim/vim/src/Make_bc5.mak	/^vimwinmain = \\$/;"	m
vir_T	vim/vim/src/structs.h	/^} vir_T;$/;"	t	typeref:struct:__anon182
vir_barlines	vim/vim/src/structs.h	/^    garray_T	vir_barlines;	\/* lines starting with | *\/$/;"	m	struct:__anon182	access:public
vir_conv	vim/vim/src/structs.h	/^    vimconv_T	vir_conv;	\/* encoding conversion *\/$/;"	m	struct:__anon182	access:public
vir_fd	vim/vim/src/structs.h	/^    FILE	*vir_fd;	\/* file descriptor *\/$/;"	m	struct:__anon182	access:public
vir_line	vim/vim/src/structs.h	/^    char_u	*vir_line;	\/* text of the current line *\/$/;"	m	struct:__anon182	access:public
vir_version	vim/vim/src/structs.h	/^    int		vir_version;	\/* viminfo version detected or -1 *\/$/;"	m	struct:__anon182	access:public
virtual_active	vim/vim/src/misc2.c	/^virtual_active(void)$/;"	f	signature:(void)
virtual_active	vim/vim/src/vim.h	2148;"	d
virtual_op	vim/vim/src/globals.h	/^EXTERN int	virtual_op INIT(= MAYBE);$/;"	v
virtual_op	vim/vim/src/vim.h	2149;"	d
visibility	vim/vim/src/gui.h	/^    int		visibility;	    \/* Is shell partially\/fully obscured? *\/$/;"	m	struct:Gui	access:public
visibility	vim/vim/src/gui.h	/^    int		visibility;	    \/* Is window partially\/fully obscured? *\/$/;"	m	struct:Gui	access:public
visibility_event	vim/vim/src/gui_gtk_x11.c	/^visibility_event(GtkWidget *widget UNUSED,$/;"	f	file:	signature:(GtkWidget *widget UNUSED, GdkEventVisibility *event, gpointer data UNUSED)
visual	vim/vim/src/xpm/include/xpm.h	/^    Visual *visual;			\/* Specifies the visual to use *\/$/;"	m	struct:__anon93	access:public
visual_bell	vim/vim/src/os_win32.c	/^static void visual_bell(void);$/;"	p	file:	signature:(void)
visual_bell	vim/vim/src/os_win32.c	/^visual_bell(void)$/;"	f	file:	signature:(void)
visualinfo_T	vim/vim/src/structs.h	/^} visualinfo_T;$/;"	t	typeref:struct:__anon165
vk_Clr	vim/vim/src/gui_mac.c	205;"	d	file:
vk_Copy	vim/vim/src/gui_mac.c	228;"	d	file:
vk_Cut	vim/vim/src/gui_mac.c	227;"	d	file:
vk_Delete	vim/vim/src/gui_mac.c	212;"	d	file:
vk_Down	vim/vim/src/gui_mac.c	222;"	d	file:
vk_End	vim/vim/src/gui_mac.c	218;"	d	file:
vk_Enter	vim/vim/src/gui_mac.c	206;"	d	file:
vk_Esc	vim/vim/src/gui_mac.c	187;"	d	file:
vk_F1	vim/vim/src/gui_mac.c	189;"	d	file:
vk_F10	vim/vim/src/gui_mac.c	198;"	d	file:
vk_F11	vim/vim/src/gui_mac.c	199;"	d	file:
vk_F12	vim/vim/src/gui_mac.c	200;"	d	file:
vk_F13	vim/vim/src/gui_mac.c	201;"	d	file:
vk_F14	vim/vim/src/gui_mac.c	202;"	d	file:
vk_F15	vim/vim/src/gui_mac.c	203;"	d	file:
vk_F2	vim/vim/src/gui_mac.c	190;"	d	file:
vk_F3	vim/vim/src/gui_mac.c	191;"	d	file:
vk_F4	vim/vim/src/gui_mac.c	192;"	d	file:
vk_F5	vim/vim/src/gui_mac.c	193;"	d	file:
vk_F6	vim/vim/src/gui_mac.c	194;"	d	file:
vk_F7	vim/vim/src/gui_mac.c	195;"	d	file:
vk_F8	vim/vim/src/gui_mac.c	196;"	d	file:
vk_F9	vim/vim/src/gui_mac.c	197;"	d	file:
vk_FwdDelete	vim/vim/src/gui_mac.c	217;"	d	file:
vk_Help	vim/vim/src/gui_mac.c	214;"	d	file:
vk_Home	vim/vim/src/gui_mac.c	215;"	d	file:
vk_Insert	vim/vim/src/gui_mac.c	234;"	d	file:
vk_Left	vim/vim/src/gui_mac.c	223;"	d	file:
vk_NumLock	vim/vim/src/gui_mac.c	233;"	d	file:
vk_PageDown	vim/vim/src/gui_mac.c	219;"	d	file:
vk_PageUp	vim/vim/src/gui_mac.c	216;"	d	file:
vk_Paste	vim/vim/src/gui_mac.c	229;"	d	file:
vk_Pause	vim/vim/src/gui_mac.c	232;"	d	file:
vk_PrintScreen	vim/vim/src/gui_mac.c	230;"	d	file:
vk_Return	vim/vim/src/gui_mac.c	210;"	d	file:
vk_Right	vim/vim/src/gui_mac.c	224;"	d	file:
vk_SCrollLock	vim/vim/src/gui_mac.c	231;"	d	file:
vk_Space	vim/vim/src/gui_mac.c	208;"	d	file:
vk_Tab	vim/vim/src/gui_mac.c	209;"	d	file:
vk_Undo	vim/vim/src/gui_mac.c	226;"	d	file:
vk_Up	vim/vim/src/gui_mac.c	221;"	d	file:
vmode	vim/vim/src/vim.h	/^    int		vmode;		\/* Visual mode character *\/$/;"	m	struct:VimClipboard	access:public
vms_fixfilename	vim/vim/src/os_vms.c	/^vms_fixfilename(void *instring)$/;"	f	signature:(void *instring)
vms_fmatch	vim/vim/src/os_vms.c	/^static char_u **vms_fmatch = NULL;$/;"	v	file:
vms_fspec_proc	vim/vim/src/os_vms.c	/^vms_fspec_proc(char *fil, int val)$/;"	f	file:	signature:(char *fil, int val)
vms_match_free	vim/vim/src/os_vms.c	/^static int vms_match_free = 0;$/;"	v	file:
vms_match_num	vim/vim/src/os_vms.c	/^static int vms_match_num = 0;$/;"	v	file:
vms_read	vim/vim/src/os_vms.c	/^vms_read(char *inbuf, size_t nbytes)$/;"	f	signature:(char *inbuf, size_t nbytes)
vms_remove_version	vim/vim/src/os_vms.c	/^vms_remove_version(void * fname)$/;"	f	signature:(void * fname)
vms_sys	vim/vim/src/os_vms.c	/^vms_sys(char *cmd, char *out, char *inp)$/;"	f	signature:(char *cmd, char *out, char *inp)
vms_sys_status	vim/vim/src/os_vms.c	/^vms_sys_status(int status)$/;"	f	signature:(int status)
vms_tolower	vim/vim/src/os_vms.c	/^vms_tolower( char *name )$/;"	f	signature:( char *name )
vms_unix_mixed_filespec	vim/vim/src/os_vms.c	/^vms_unix_mixed_filespec(char *in, char *out)$/;"	f	file:	signature:(char *in, char *out)
vms_wproc	vim/vim/src/os_vms.c	/^vms_wproc(char *name, int val)$/;"	f	file:	signature:(char *name, int val)
vop_flags	vim/vim/src/option.h	/^EXTERN unsigned	vop_flags;	\/* uses SSOP_ flags *\/$/;"	v
vow	vim/vim/src/hangulin.c	/^vow(int c)$/;"	f	file:	signature:(int c)
vpeekc	vim/vim/src/getchar.c	/^vpeekc(void)$/;"	f	signature:(void)
vpeekc_any	vim/vim/src/getchar.c	/^vpeekc_any(void)$/;"	f	signature:(void)
vpeekc_nomap	vim/vim/src/getchar.c	/^vpeekc_nomap(void)$/;"	f	signature:(void)
vr_lines_changed	vim/vim/src/globals.h	/^EXTERN int	vr_lines_changed INIT(= 0); \/* #Lines changed by "gR" so far *\/$/;"	v
vt	vim/vim/src/libvterm/bin/unterm.c	/^static VTerm *vt;$/;"	v	file:
vt	vim/vim/src/libvterm/src/screen.c	/^  VTerm *vt;$/;"	m	struct:VTermScreen	file:	access:public
vt	vim/vim/src/libvterm/src/vterm_internal.h	/^  VTerm *vt;$/;"	m	struct:VTermState	access:public
vt	vim/vim/src/libvterm/t/harness.c	/^static VTerm *vt;$/;"	v	file:
vterm_allocator_free	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void vterm_allocator_free(VTerm *vt, void *ptr)$/;"	f	signature:(VTerm *vt, void *ptr)
vterm_allocator_free	vim/vim/src/libvterm/src/vterm_internal.h	/^void  vterm_allocator_free(VTerm *vt, void *ptr);$/;"	p	signature:(VTerm *vt, void *ptr)
vterm_allocator_malloc	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void *vterm_allocator_malloc(VTerm *vt, size_t size)$/;"	f	signature:(VTerm *vt, size_t size)
vterm_allocator_malloc	vim/vim/src/libvterm/src/vterm_internal.h	/^void *vterm_allocator_malloc(VTerm *vt, size_t size);$/;"	p	signature:(VTerm *vt, size_t size)
vterm_color_equal	vim/vim/src/libvterm/src/vterm_internal.h	/^INLINE int vterm_color_equal(VTermColor a, VTermColor b)$/;"	f	signature:(VTermColor a, VTermColor b)
vterm_color_equal	vim/vim/src/libvterm/src/vterm_internal.h	/^int vterm_color_equal(VTermColor a, VTermColor b);$/;"	p	signature:(VTermColor a, VTermColor b)
vterm_copy_cells	vim/vim/src/libvterm/include/vterm.h	/^void vterm_copy_cells(VTermRect dest,$/;"	p	signature:(VTermRect dest, VTermRect src, void (*copycell)(VTermPos dest, VTermPos src, void *user), void *user)
vterm_copy_cells	vim/vim/src/libvterm/src/vterm.c	/^void vterm_copy_cells(VTermRect dest,$/;"	f	signature:(VTermRect dest, VTermRect src, void (*copycell)(VTermPos dest, VTermPos src, void *user), void *user)
vterm_free	vim/vim/src/libvterm/include/vterm.h	/^void   vterm_free(VTerm* vt);$/;"	p	signature:(VTerm* vt)
vterm_free	vim/vim/src/libvterm/src/vterm.c	/^void vterm_free(VTerm *vt)$/;"	f	signature:(VTerm *vt)
vterm_get_attr_type	vim/vim/src/libvterm/include/vterm.h	/^VTermValueType vterm_get_attr_type(VTermAttr attr);$/;"	p	signature:(VTermAttr attr)
vterm_get_attr_type	vim/vim/src/libvterm/src/vterm.c	/^VTermValueType vterm_get_attr_type(VTermAttr attr)$/;"	f	signature:(VTermAttr attr)
vterm_get_prop_type	vim/vim/src/libvterm/include/vterm.h	/^VTermValueType vterm_get_prop_type(VTermProp prop);$/;"	p	signature:(VTermProp prop)
vterm_get_prop_type	vim/vim/src/libvterm/src/vterm.c	/^VTermValueType vterm_get_prop_type(VTermProp prop)$/;"	f	signature:(VTermProp prop)
vterm_get_size	vim/vim/src/libvterm/include/vterm.h	/^void vterm_get_size(const VTerm *vt, int *rowsp, int *colsp);$/;"	p	signature:(const VTerm *vt, int *rowsp, int *colsp)
vterm_get_size	vim/vim/src/libvterm/src/vterm.c	/^void vterm_get_size(const VTerm *vt, int *rowsp, int *colsp)$/;"	f	signature:(const VTerm *vt, int *rowsp, int *colsp)
vterm_get_utf8	vim/vim/src/libvterm/include/vterm.h	/^int  vterm_get_utf8(const VTerm *vt);$/;"	p	signature:(const VTerm *vt)
vterm_get_utf8	vim/vim/src/libvterm/src/vterm.c	/^int vterm_get_utf8(const VTerm *vt)$/;"	f	signature:(const VTerm *vt)
vterm_input_write	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_input_write(VTerm *vt, const char *bytes, size_t len);$/;"	p	signature:(VTerm *vt, const char *bytes, size_t len)
vterm_input_write	vim/vim/src/libvterm/src/parser.c	/^size_t vterm_input_write(VTerm *vt, const char *bytes, size_t len)$/;"	f	signature:(VTerm *vt, const char *bytes, size_t len)
vterm_keyboard_end_paste	vim/vim/src/libvterm/include/vterm.h	/^void vterm_keyboard_end_paste(VTerm *vt);$/;"	p	signature:(VTerm *vt)
vterm_keyboard_end_paste	vim/vim/src/libvterm/src/keyboard.c	/^void vterm_keyboard_end_paste(VTerm *vt)$/;"	f	signature:(VTerm *vt)
vterm_keyboard_key	vim/vim/src/libvterm/include/vterm.h	/^void vterm_keyboard_key(VTerm *vt, VTermKey key, VTermModifier mod);$/;"	p	signature:(VTerm *vt, VTermKey key, VTermModifier mod)
vterm_keyboard_key	vim/vim/src/libvterm/src/keyboard.c	/^void vterm_keyboard_key(VTerm *vt, VTermKey key, VTermModifier mod)$/;"	f	signature:(VTerm *vt, VTermKey key, VTermModifier mod)
vterm_keyboard_start_paste	vim/vim/src/libvterm/include/vterm.h	/^void vterm_keyboard_start_paste(VTerm *vt);$/;"	p	signature:(VTerm *vt)
vterm_keyboard_start_paste	vim/vim/src/libvterm/src/keyboard.c	/^void vterm_keyboard_start_paste(VTerm *vt)$/;"	f	signature:(VTerm *vt)
vterm_keyboard_unichar	vim/vim/src/libvterm/include/vterm.h	/^void vterm_keyboard_unichar(VTerm *vt, uint32_t c, VTermModifier mod);$/;"	p	signature:(VTerm *vt, uint32_t c, VTermModifier mod)
vterm_keyboard_unichar	vim/vim/src/libvterm/src/keyboard.c	/^void vterm_keyboard_unichar(VTerm *vt, uint32_t c, VTermModifier mod)$/;"	f	signature:(VTerm *vt, uint32_t c, VTermModifier mod)
vterm_lookup_encoding	vim/vim/src/libvterm/src/encoding.c	/^VTermEncoding *vterm_lookup_encoding(VTermEncodingType type, char designation)$/;"	f	signature:(VTermEncodingType type, char designation)
vterm_lookup_encoding	vim/vim/src/libvterm/src/vterm_internal.h	/^VTermEncoding *vterm_lookup_encoding(VTermEncodingType type, char designation);$/;"	p	signature:(VTermEncodingType type, char designation)
vterm_mouse_button	vim/vim/src/libvterm/include/vterm.h	/^void vterm_mouse_button(VTerm *vt, int button, int pressed, VTermModifier mod);$/;"	p	signature:(VTerm *vt, int button, int pressed, VTermModifier mod)
vterm_mouse_button	vim/vim/src/libvterm/src/mouse.c	/^void vterm_mouse_button(VTerm *vt, int button, int pressed, VTermModifier mod)$/;"	f	signature:(VTerm *vt, int button, int pressed, VTermModifier mod)
vterm_mouse_move	vim/vim/src/libvterm/include/vterm.h	/^void vterm_mouse_move(VTerm *vt, int row, int col, VTermModifier mod);$/;"	p	signature:(VTerm *vt, int row, int col, VTermModifier mod)
vterm_mouse_move	vim/vim/src/libvterm/src/mouse.c	/^void vterm_mouse_move(VTerm *vt, int row, int col, VTermModifier mod)$/;"	f	signature:(VTerm *vt, int row, int col, VTermModifier mod)
vterm_new	vim/vim/src/libvterm/include/vterm.h	/^VTerm *vterm_new(int rows, int cols);$/;"	p	signature:(int rows, int cols)
vterm_new	vim/vim/src/libvterm/src/vterm.c	/^VTerm *vterm_new(int rows, int cols)$/;"	f	signature:(int rows, int cols)
vterm_new_with_allocator	vim/vim/src/libvterm/include/vterm.h	/^VTerm *vterm_new_with_allocator(int rows, int cols, VTermAllocatorFunctions *funcs, void *allocdata);$/;"	p	signature:(int rows, int cols, VTermAllocatorFunctions *funcs, void *allocdata)
vterm_new_with_allocator	vim/vim/src/libvterm/src/vterm.c	/^VTerm *vterm_new_with_allocator(int rows, int cols, VTermAllocatorFunctions *funcs, void *allocdata)$/;"	f	signature:(int rows, int cols, VTermAllocatorFunctions *funcs, void *allocdata)
vterm_obtain_screen	vim/vim/src/libvterm/include/vterm.h	/^VTermScreen *vterm_obtain_screen(VTerm *vt);$/;"	p	signature:(VTerm *vt)
vterm_obtain_screen	vim/vim/src/libvterm/src/screen.c	/^VTermScreen *vterm_obtain_screen(VTerm *vt)$/;"	f	signature:(VTerm *vt)
vterm_obtain_state	vim/vim/src/libvterm/include/vterm.h	/^VTermState *vterm_obtain_state(VTerm *vt);$/;"	p	signature:(VTerm *vt)
vterm_obtain_state	vim/vim/src/libvterm/src/state.c	/^VTermState *vterm_obtain_state(VTerm *vt)$/;"	f	signature:(VTerm *vt)
vterm_output_get_buffer_current	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_output_get_buffer_current(const VTerm *vt);$/;"	p	signature:(const VTerm *vt)
vterm_output_get_buffer_current	vim/vim/src/libvterm/src/vterm.c	/^size_t vterm_output_get_buffer_current(const VTerm *vt)$/;"	f	signature:(const VTerm *vt)
vterm_output_get_buffer_remaining	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_output_get_buffer_remaining(const VTerm *vt);$/;"	p	signature:(const VTerm *vt)
vterm_output_get_buffer_remaining	vim/vim/src/libvterm/src/vterm.c	/^size_t vterm_output_get_buffer_remaining(const VTerm *vt)$/;"	f	signature:(const VTerm *vt)
vterm_output_get_buffer_size	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_output_get_buffer_size(const VTerm *vt);$/;"	p	signature:(const VTerm *vt)
vterm_output_get_buffer_size	vim/vim/src/libvterm/src/vterm.c	/^size_t vterm_output_get_buffer_size(const VTerm *vt)$/;"	f	signature:(const VTerm *vt)
vterm_output_read	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_output_read(VTerm *vt, char *buffer, size_t len);$/;"	p	signature:(VTerm *vt, char *buffer, size_t len)
vterm_output_read	vim/vim/src/libvterm/src/vterm.c	/^size_t vterm_output_read(VTerm *vt, char *buffer, size_t len)$/;"	f	signature:(VTerm *vt, char *buffer, size_t len)
vterm_parser_get_cbdata	vim/vim/src/libvterm/include/vterm.h	/^void *vterm_parser_get_cbdata(VTerm *vt);$/;"	p	signature:(VTerm *vt)
vterm_parser_get_cbdata	vim/vim/src/libvterm/src/vterm.c	/^void *vterm_parser_get_cbdata(VTerm *vt)$/;"	f	signature:(VTerm *vt)
vterm_parser_set_callbacks	vim/vim/src/libvterm/include/vterm.h	/^void  vterm_parser_set_callbacks(VTerm *vt, const VTermParserCallbacks *callbacks, void *user);$/;"	p	signature:(VTerm *vt, const VTermParserCallbacks *callbacks, void *user)
vterm_parser_set_callbacks	vim/vim/src/libvterm/src/vterm.c	/^void vterm_parser_set_callbacks(VTerm *vt, const VTermParserCallbacks *callbacks, void *user)$/;"	f	signature:(VTerm *vt, const VTermParserCallbacks *callbacks, void *user)
vterm_pos_cmp	vim/vim/src/libvterm/include/vterm.h	/^INLINE int vterm_pos_cmp(VTermPos a, VTermPos b)$/;"	f	signature:(VTermPos a, VTermPos b)
vterm_pos_cmp	vim/vim/src/libvterm/include/vterm.h	/^int vterm_pos_cmp(VTermPos a, VTermPos b);$/;"	p	signature:(VTermPos a, VTermPos b)
vterm_push_output_bytes	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void vterm_push_output_bytes(VTerm *vt, const char *bytes, size_t len)$/;"	f	signature:(VTerm *vt, const char *bytes, size_t len)
vterm_push_output_bytes	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_push_output_bytes(VTerm *vt, const char *bytes, size_t len);$/;"	p	signature:(VTerm *vt, const char *bytes, size_t len)
vterm_push_output_sprintf	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void vterm_push_output_sprintf(VTerm *vt, const char *format, ...)$/;"	f	signature:(VTerm *vt, const char *format, ...)
vterm_push_output_sprintf	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_push_output_sprintf(VTerm *vt, const char *format, ...);$/;"	p	signature:(VTerm *vt, const char *format, ...)
vterm_push_output_sprintf_ctrl	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void vterm_push_output_sprintf_ctrl(VTerm *vt, unsigned char ctrl, const char *fmt, ...)$/;"	f	signature:(VTerm *vt, unsigned char ctrl, const char *fmt, ...)
vterm_push_output_sprintf_ctrl	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_push_output_sprintf_ctrl(VTerm *vt, unsigned char ctrl, const char *fmt, ...);$/;"	p	signature:(VTerm *vt, unsigned char ctrl, const char *fmt, ...)
vterm_push_output_sprintf_dcs	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void vterm_push_output_sprintf_dcs(VTerm *vt, const char *fmt, ...)$/;"	f	signature:(VTerm *vt, const char *fmt, ...)
vterm_push_output_sprintf_dcs	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_push_output_sprintf_dcs(VTerm *vt, const char *fmt, ...);$/;"	p	signature:(VTerm *vt, const char *fmt, ...)
vterm_push_output_vsprintf	vim/vim/src/libvterm/src/vterm.c	/^INTERNAL void vterm_push_output_vsprintf(VTerm *vt, const char *format, va_list args)$/;"	f	signature:(VTerm *vt, const char *format, va_list args)
vterm_push_output_vsprintf	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_push_output_vsprintf(VTerm *vt, const char *format, va_list args);$/;"	p	signature:(VTerm *vt, const char *format, va_list args)
vterm_rect_contains	vim/vim/src/libvterm/include/vterm.h	/^INLINE int vterm_rect_contains(VTermRect r, VTermPos p)$/;"	f	signature:(VTermRect r, VTermPos p)
vterm_rect_contains	vim/vim/src/libvterm/include/vterm.h	/^int vterm_rect_contains(VTermRect r, VTermPos p);$/;"	p	signature:(VTermRect r, VTermPos p)
vterm_rect_move	vim/vim/src/libvterm/include/vterm.h	/^INLINE void vterm_rect_move(VTermRect *rect, int row_delta, int col_delta)$/;"	f	signature:(VTermRect *rect, int row_delta, int col_delta)
vterm_rect_move	vim/vim/src/libvterm/include/vterm.h	/^void vterm_rect_move(VTermRect *rect, int row_delta, int col_delta);$/;"	p	signature:(VTermRect *rect, int row_delta, int col_delta)
vterm_screen_enable_altscreen	vim/vim/src/libvterm/include/vterm.h	/^void vterm_screen_enable_altscreen(VTermScreen *screen, int altscreen);$/;"	p	signature:(VTermScreen *screen, int altscreen)
vterm_screen_enable_altscreen	vim/vim/src/libvterm/src/screen.c	/^void vterm_screen_enable_altscreen(VTermScreen *screen, int altscreen)$/;"	f	signature:(VTermScreen *screen, int altscreen)
vterm_screen_flush_damage	vim/vim/src/libvterm/include/vterm.h	/^void vterm_screen_flush_damage(VTermScreen *screen);$/;"	p	signature:(VTermScreen *screen)
vterm_screen_flush_damage	vim/vim/src/libvterm/src/screen.c	/^void vterm_screen_flush_damage(VTermScreen *screen)$/;"	f	signature:(VTermScreen *screen)
vterm_screen_free	vim/vim/src/libvterm/src/screen.c	/^INTERNAL void vterm_screen_free(VTermScreen *screen)$/;"	f	signature:(VTermScreen *screen)
vterm_screen_free	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_screen_free(VTermScreen *screen);$/;"	p	signature:(VTermScreen *screen)
vterm_screen_get_attrs_extent	vim/vim/src/libvterm/include/vterm.h	/^int vterm_screen_get_attrs_extent(const VTermScreen *screen, VTermRect *extent, VTermPos pos, VTermAttrMask attrs);$/;"	p	signature:(const VTermScreen *screen, VTermRect *extent, VTermPos pos, VTermAttrMask attrs)
vterm_screen_get_attrs_extent	vim/vim/src/libvterm/src/screen.c	/^int vterm_screen_get_attrs_extent(const VTermScreen *screen, VTermRect *extent, VTermPos pos, VTermAttrMask attrs)$/;"	f	signature:(const VTermScreen *screen, VTermRect *extent, VTermPos pos, VTermAttrMask attrs)
vterm_screen_get_cbdata	vim/vim/src/libvterm/include/vterm.h	/^void *vterm_screen_get_cbdata(VTermScreen *screen);$/;"	p	signature:(VTermScreen *screen)
vterm_screen_get_cbdata	vim/vim/src/libvterm/src/screen.c	/^void *vterm_screen_get_cbdata(VTermScreen *screen)$/;"	f	signature:(VTermScreen *screen)
vterm_screen_get_cell	vim/vim/src/libvterm/include/vterm.h	/^int vterm_screen_get_cell(const VTermScreen *screen, VTermPos pos, VTermScreenCell *cell);$/;"	p	signature:(const VTermScreen *screen, VTermPos pos, VTermScreenCell *cell)
vterm_screen_get_cell	vim/vim/src/libvterm/src/screen.c	/^int vterm_screen_get_cell(const VTermScreen *screen, VTermPos pos, VTermScreenCell *cell)$/;"	f	signature:(const VTermScreen *screen, VTermPos pos, VTermScreenCell *cell)
vterm_screen_get_chars	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_screen_get_chars(const VTermScreen *screen, uint32_t *chars, size_t len, const VTermRect rect);$/;"	p	signature:(const VTermScreen *screen, uint32_t *chars, size_t len, const VTermRect rect)
vterm_screen_get_chars	vim/vim/src/libvterm/src/screen.c	/^size_t vterm_screen_get_chars(const VTermScreen *screen, uint32_t *chars, size_t len, const VTermRect rect)$/;"	f	signature:(const VTermScreen *screen, uint32_t *chars, size_t len, const VTermRect rect)
vterm_screen_get_text	vim/vim/src/libvterm/include/vterm.h	/^size_t vterm_screen_get_text(const VTermScreen *screen, char *str, size_t len, const VTermRect rect);$/;"	p	signature:(const VTermScreen *screen, char *str, size_t len, const VTermRect rect)
vterm_screen_get_text	vim/vim/src/libvterm/src/screen.c	/^size_t vterm_screen_get_text(const VTermScreen *screen, char *str, size_t len, const VTermRect rect)$/;"	f	signature:(const VTermScreen *screen, char *str, size_t len, const VTermRect rect)
vterm_screen_get_unrecognised_fbdata	vim/vim/src/libvterm/include/vterm.h	/^void *vterm_screen_get_unrecognised_fbdata(VTermScreen *screen);$/;"	p	signature:(VTermScreen *screen)
vterm_screen_get_unrecognised_fbdata	vim/vim/src/libvterm/src/screen.c	/^void *vterm_screen_get_unrecognised_fbdata(VTermScreen *screen)$/;"	f	signature:(VTermScreen *screen)
vterm_screen_is_eol	vim/vim/src/libvterm/include/vterm.h	/^int vterm_screen_is_eol(const VTermScreen *screen, VTermPos pos);$/;"	p	signature:(const VTermScreen *screen, VTermPos pos)
vterm_screen_is_eol	vim/vim/src/libvterm/src/screen.c	/^int vterm_screen_is_eol(const VTermScreen *screen, VTermPos pos)$/;"	f	signature:(const VTermScreen *screen, VTermPos pos)
vterm_screen_reset	vim/vim/src/libvterm/include/vterm.h	/^void   vterm_screen_reset(VTermScreen *screen, int hard);$/;"	p	signature:(VTermScreen *screen, int hard)
vterm_screen_reset	vim/vim/src/libvterm/src/screen.c	/^void vterm_screen_reset(VTermScreen *screen, int hard)$/;"	f	signature:(VTermScreen *screen, int hard)
vterm_screen_set_callbacks	vim/vim/src/libvterm/include/vterm.h	/^void  vterm_screen_set_callbacks(VTermScreen *screen, const VTermScreenCallbacks *callbacks, void *user);$/;"	p	signature:(VTermScreen *screen, const VTermScreenCallbacks *callbacks, void *user)
vterm_screen_set_callbacks	vim/vim/src/libvterm/src/screen.c	/^void vterm_screen_set_callbacks(VTermScreen *screen, const VTermScreenCallbacks *callbacks, void *user)$/;"	f	signature:(VTermScreen *screen, const VTermScreenCallbacks *callbacks, void *user)
vterm_screen_set_cell	vim/vim/src/libvterm/src/screen.c	/^static int vterm_screen_set_cell(VTermScreen *screen, VTermPos pos, const VTermScreenCell *cell)$/;"	f	file:	signature:(VTermScreen *screen, VTermPos pos, const VTermScreenCell *cell)
vterm_screen_set_cell	vim/vim/src/libvterm/src/screen.c	/^static int vterm_screen_set_cell(VTermScreen *screen, VTermPos pos, const VTermScreenCell *cell);$/;"	p	file:	signature:(VTermScreen *screen, VTermPos pos, const VTermScreenCell *cell)
vterm_screen_set_damage_merge	vim/vim/src/libvterm/include/vterm.h	/^void vterm_screen_set_damage_merge(VTermScreen *screen, VTermDamageSize size);$/;"	p	signature:(VTermScreen *screen, VTermDamageSize size)
vterm_screen_set_damage_merge	vim/vim/src/libvterm/src/screen.c	/^void vterm_screen_set_damage_merge(VTermScreen *screen, VTermDamageSize size)$/;"	f	signature:(VTermScreen *screen, VTermDamageSize size)
vterm_screen_set_unrecognised_fallbacks	vim/vim/src/libvterm/include/vterm.h	/^void  vterm_screen_set_unrecognised_fallbacks(VTermScreen *screen, const VTermParserCallbacks *fallbacks, void *user);$/;"	p	signature:(VTermScreen *screen, const VTermParserCallbacks *fallbacks, void *user)
vterm_screen_set_unrecognised_fallbacks	vim/vim/src/libvterm/src/screen.c	/^void vterm_screen_set_unrecognised_fallbacks(VTermScreen *screen, const VTermParserCallbacks *fallbacks, void *user)$/;"	f	signature:(VTermScreen *screen, const VTermParserCallbacks *fallbacks, void *user)
vterm_scroll_rect	vim/vim/src/libvterm/include/vterm.h	/^void vterm_scroll_rect(VTermRect rect,$/;"	p	signature:(VTermRect rect, int downward, int rightward, int (*moverect)(VTermRect src, VTermRect dest, void *user), int (*eraserect)(VTermRect rect, int selective, void *user), void *user)
vterm_scroll_rect	vim/vim/src/libvterm/src/vterm.c	/^void vterm_scroll_rect(VTermRect rect,$/;"	f	signature:(VTermRect rect, int downward, int rightward, int (*moverect)(VTermRect src, VTermRect dest, void *user), int (*eraserect)(VTermRect rect, int selective, void *user), void *user)
vterm_set_size	vim/vim/src/libvterm/include/vterm.h	/^void vterm_set_size(VTerm *vt, int rows, int cols);$/;"	p	signature:(VTerm *vt, int rows, int cols)
vterm_set_size	vim/vim/src/libvterm/src/vterm.c	/^void vterm_set_size(VTerm *vt, int rows, int cols)$/;"	f	signature:(VTerm *vt, int rows, int cols)
vterm_set_utf8	vim/vim/src/libvterm/include/vterm.h	/^void vterm_set_utf8(VTerm *vt, int is_utf8);$/;"	p	signature:(VTerm *vt, int is_utf8)
vterm_set_utf8	vim/vim/src/libvterm/src/vterm.c	/^void vterm_set_utf8(VTerm *vt, int is_utf8)$/;"	f	signature:(VTerm *vt, int is_utf8)
vterm_state_free	vim/vim/src/libvterm/src/state.c	/^INTERNAL void vterm_state_free(VTermState *state)$/;"	f	signature:(VTermState *state)
vterm_state_free	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_state_free(VTermState *state);$/;"	p	signature:(VTermState *state)
vterm_state_get_cbdata	vim/vim/src/libvterm/include/vterm.h	/^void *vterm_state_get_cbdata(VTermState *state);$/;"	p	signature:(VTermState *state)
vterm_state_get_cbdata	vim/vim/src/libvterm/src/state.c	/^void *vterm_state_get_cbdata(VTermState *state)$/;"	f	signature:(VTermState *state)
vterm_state_get_cursorpos	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_get_cursorpos(const VTermState *state, VTermPos *cursorpos);$/;"	p	signature:(const VTermState *state, VTermPos *cursorpos)
vterm_state_get_cursorpos	vim/vim/src/libvterm/src/state.c	/^void vterm_state_get_cursorpos(const VTermState *state, VTermPos *cursorpos)$/;"	f	signature:(const VTermState *state, VTermPos *cursorpos)
vterm_state_get_default_colors	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_get_default_colors(const VTermState *state, VTermColor *default_fg, VTermColor *default_bg);$/;"	p	signature:(const VTermState *state, VTermColor *default_fg, VTermColor *default_bg)
vterm_state_get_default_colors	vim/vim/src/libvterm/src/pen.c	/^void vterm_state_get_default_colors(const VTermState *state, VTermColor *default_fg, VTermColor *default_bg)$/;"	f	signature:(const VTermState *state, VTermColor *default_fg, VTermColor *default_bg)
vterm_state_get_lineinfo	vim/vim/src/libvterm/include/vterm.h	/^const VTermLineInfo *vterm_state_get_lineinfo(const VTermState *state, int row);$/;"	p	signature:(const VTermState *state, int row)
vterm_state_get_lineinfo	vim/vim/src/libvterm/src/state.c	/^const VTermLineInfo *vterm_state_get_lineinfo(const VTermState *state, int row)$/;"	f	signature:(const VTermState *state, int row)
vterm_state_get_palette_color	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_get_palette_color(const VTermState *state, int index, VTermColor *col);$/;"	p	signature:(const VTermState *state, int index, VTermColor *col)
vterm_state_get_palette_color	vim/vim/src/libvterm/src/pen.c	/^void vterm_state_get_palette_color(const VTermState *state, int index, VTermColor *col)$/;"	f	signature:(const VTermState *state, int index, VTermColor *col)
vterm_state_get_penattr	vim/vim/src/libvterm/include/vterm.h	/^int  vterm_state_get_penattr(const VTermState *state, VTermAttr attr, VTermValue *val);$/;"	p	signature:(const VTermState *state, VTermAttr attr, VTermValue *val)
vterm_state_get_penattr	vim/vim/src/libvterm/src/pen.c	/^int vterm_state_get_penattr(const VTermState *state, VTermAttr attr, VTermValue *val)$/;"	f	signature:(const VTermState *state, VTermAttr attr, VTermValue *val)
vterm_state_get_unrecognised_fbdata	vim/vim/src/libvterm/include/vterm.h	/^void *vterm_state_get_unrecognised_fbdata(VTermState *state);$/;"	p	signature:(VTermState *state)
vterm_state_get_unrecognised_fbdata	vim/vim/src/libvterm/src/state.c	/^void *vterm_state_get_unrecognised_fbdata(VTermState *state)$/;"	f	signature:(VTermState *state)
vterm_state_getpen	vim/vim/src/libvterm/src/pen.c	/^INTERNAL int vterm_state_getpen(VTermState *state, long args[], int argcount UNUSED)$/;"	f	signature:(VTermState *state, long args[], int argcount UNUSED)
vterm_state_getpen	vim/vim/src/libvterm/src/vterm_internal.h	/^int  vterm_state_getpen(VTermState *state, long args[], int argcount);$/;"	p	signature:(VTermState *state, long args[], int argcount)
vterm_state_new	vim/vim/src/libvterm/src/state.c	/^static VTermState *vterm_state_new(VTerm *vt)$/;"	f	file:	signature:(VTerm *vt)
vterm_state_newpen	vim/vim/src/libvterm/src/pen.c	/^INTERNAL void vterm_state_newpen(VTermState *state)$/;"	f	signature:(VTermState *state)
vterm_state_newpen	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_state_newpen(VTermState *state);$/;"	p	signature:(VTermState *state)
vterm_state_push_output_sprintf_CSI	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_state_push_output_sprintf_CSI(VTermState *vts, const char *format, ...);$/;"	p	signature:(VTermState *vts, const char *format, ...)
vterm_state_reset	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_reset(VTermState *state, int hard);$/;"	p	signature:(VTermState *state, int hard)
vterm_state_reset	vim/vim/src/libvterm/src/state.c	/^void vterm_state_reset(VTermState *state, int hard)$/;"	f	signature:(VTermState *state, int hard)
vterm_state_resetpen	vim/vim/src/libvterm/src/pen.c	/^INTERNAL void vterm_state_resetpen(VTermState *state)$/;"	f	signature:(VTermState *state)
vterm_state_resetpen	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_state_resetpen(VTermState *state);$/;"	p	signature:(VTermState *state)
vterm_state_savepen	vim/vim/src/libvterm/src/pen.c	/^INTERNAL void vterm_state_savepen(VTermState *state, int save)$/;"	f	signature:(VTermState *state, int save)
vterm_state_savepen	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_state_savepen(VTermState *state, int save);$/;"	p	signature:(VTermState *state, int save)
vterm_state_set_bold_highbright	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_set_bold_highbright(VTermState *state, int bold_is_highbright);$/;"	p	signature:(VTermState *state, int bold_is_highbright)
vterm_state_set_bold_highbright	vim/vim/src/libvterm/src/pen.c	/^void vterm_state_set_bold_highbright(VTermState *state, int bold_is_highbright)$/;"	f	signature:(VTermState *state, int bold_is_highbright)
vterm_state_set_callbacks	vim/vim/src/libvterm/include/vterm.h	/^void  vterm_state_set_callbacks(VTermState *state, const VTermStateCallbacks *callbacks, void *user);$/;"	p	signature:(VTermState *state, const VTermStateCallbacks *callbacks, void *user)
vterm_state_set_callbacks	vim/vim/src/libvterm/src/state.c	/^void vterm_state_set_callbacks(VTermState *state, const VTermStateCallbacks *callbacks, void *user)$/;"	f	signature:(VTermState *state, const VTermStateCallbacks *callbacks, void *user)
vterm_state_set_default_colors	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_set_default_colors(VTermState *state, const VTermColor *default_fg, const VTermColor *default_bg);$/;"	p	signature:(VTermState *state, const VTermColor *default_fg, const VTermColor *default_bg)
vterm_state_set_default_colors	vim/vim/src/libvterm/src/pen.c	/^void vterm_state_set_default_colors(VTermState *state, const VTermColor *default_fg, const VTermColor *default_bg)$/;"	f	signature:(VTermState *state, const VTermColor *default_fg, const VTermColor *default_bg)
vterm_state_set_palette_color	vim/vim/src/libvterm/include/vterm.h	/^void vterm_state_set_palette_color(VTermState *state, int index, const VTermColor *col);$/;"	p	signature:(VTermState *state, int index, const VTermColor *col)
vterm_state_set_palette_color	vim/vim/src/libvterm/src/pen.c	/^void vterm_state_set_palette_color(VTermState *state, int index, const VTermColor *col)$/;"	f	signature:(VTermState *state, int index, const VTermColor *col)
vterm_state_set_termprop	vim/vim/src/libvterm/include/vterm.h	/^int  vterm_state_set_termprop(VTermState *state, VTermProp prop, VTermValue *val);$/;"	p	signature:(VTermState *state, VTermProp prop, VTermValue *val)
vterm_state_set_termprop	vim/vim/src/libvterm/src/state.c	/^int vterm_state_set_termprop(VTermState *state, VTermProp prop, VTermValue *val)$/;"	f	signature:(VTermState *state, VTermProp prop, VTermValue *val)
vterm_state_set_unrecognised_fallbacks	vim/vim/src/libvterm/include/vterm.h	/^void  vterm_state_set_unrecognised_fallbacks(VTermState *state, const VTermParserCallbacks *fallbacks, void *user);$/;"	p	signature:(VTermState *state, const VTermParserCallbacks *fallbacks, void *user)
vterm_state_set_unrecognised_fallbacks	vim/vim/src/libvterm/src/state.c	/^void vterm_state_set_unrecognised_fallbacks(VTermState *state, const VTermParserCallbacks *fallbacks, void *user)$/;"	f	signature:(VTermState *state, const VTermParserCallbacks *fallbacks, void *user)
vterm_state_setpen	vim/vim/src/libvterm/src/pen.c	/^INTERNAL void vterm_state_setpen(VTermState *state, const long args[], int argcount)$/;"	f	signature:(VTermState *state, const long args[], int argcount)
vterm_state_setpen	vim/vim/src/libvterm/src/vterm_internal.h	/^void vterm_state_setpen(VTermState *state, const long args[], int argcount);$/;"	p	signature:(VTermState *state, const long args[], int argcount)
vterm_unicode_is_combining	vim/vim/src/libvterm/src/unicode.c	/^INTERNAL int vterm_unicode_is_combining(uint32_t codepoint)$/;"	f	signature:(uint32_t codepoint)
vterm_unicode_is_combining	vim/vim/src/libvterm/src/vterm_internal.h	/^int vterm_unicode_is_combining(uint32_t codepoint);$/;"	p	signature:(uint32_t codepoint)
vterm_unicode_width	vim/vim/src/libvterm/src/unicode.c	/^INTERNAL int vterm_unicode_width(uint32_t codepoint)$/;"	f	signature:(uint32_t codepoint)
vterm_unicode_width	vim/vim/src/libvterm/src/vterm_internal.h	/^int vterm_unicode_width(uint32_t codepoint);$/;"	p	signature:(uint32_t codepoint)
vts	vim/vim/src/libvterm/bin/unterm.c	/^static VTermScreen *vts;$/;"	v	file:
vul_desc	vim/vim/src/os_vms.c	/^vul_desc(DESC *des, char *str)$/;"	f	file:	signature:(DESC *des, char *str)
vul_item	vim/vim/src/os_vms.c	/^vul_item(ITEM *itm, short len, short cod, char *adr, int *ret)$/;"	f	file:	signature:(ITEM *itm, short len, short cod, char *adr, int *ret)
vungetc	vim/vim/src/getchar.c	/^vungetc(int c)$/;"	f	signature:(int c)
vv_di	vim/vim/src/eval.c	/^    dictitem16_T vv_di;		\/* value and name for key (max 16 chars!) *\/$/;"	m	struct:vimvar	file:	access:public
vv_dict	vim/vim/src/eval.c	198;"	d	file:
vv_exception	vim/vim/src/ex_docmd.c	/^    char_u	*vv_exception;$/;"	m	struct:dbg_stuff	file:	access:public
vv_flags	vim/vim/src/eval.c	/^    char	vv_flags;	\/* VV_COMPAT, VV_RO, VV_RO_SBX *\/$/;"	m	struct:vimvar	file:	access:public
vv_float	vim/vim/src/eval.c	195;"	d	file:
vv_list	vim/vim/src/eval.c	197;"	d	file:
vv_name	vim/vim/src/eval.c	/^    char	*vv_name;	\/* name of variable, without v: *\/$/;"	m	struct:vimvar	file:	access:public
vv_nr	vim/vim/src/eval.c	194;"	d	file:
vv_str	vim/vim/src/eval.c	196;"	d	file:
vv_throwpoint	vim/vim/src/ex_docmd.c	/^    char_u	*vv_throwpoint;$/;"	m	struct:dbg_stuff	file:	access:public
vv_tv	vim/vim/src/eval.c	199;"	d	file:
vv_type	vim/vim/src/eval.c	193;"	d	file:
vval	vim/vim/src/structs.h	/^    }		vval;$/;"	m	struct:__anon184	typeref:union:__anon184::__anon185	access:public
váním	vim/vim/runtime/tutor/tutor.cs	/^POZNÁMKA: Zapamatuj si, ¾e by ses mìl uèit pou¾íváním, ne zapamatováním.$/;"	p
w	vim/vim/runtime/tutor/tutor.cs	/^       objekt - udává rozsah pøíkazu, napøíklad  w  (slovo),$/;"	m	signature:(slovo)
w	vim/vim/runtime/tutor/tutor.cs	/^  2. Objekty jsou také shodné, jako napø.: w (slovo), $ (konec øádku), atd.$/;"	m	signature:(slovo)
wVirtKey	vim/vim/src/os_win32.c	/^    WORD    wVirtKey;$/;"	m	struct:__anon211	file:	access:public
w_alist	vim/vim/src/structs.h	/^    alist_T	*w_alist;	    \/* pointer to arglist for this window *\/$/;"	m	struct:window_S	access:public
w_allbuf_opt	vim/vim/src/structs.h	/^    winopt_T	w_allbuf_opt;$/;"	m	struct:window_S	access:public
w_alt_fnum	vim/vim/src/structs.h	/^    int		w_alt_fnum;	    \/* alternate file (for # and CTRL-^) *\/$/;"	m	struct:window_S	access:public
w_arg_idx	vim/vim/src/structs.h	/^    int		w_arg_idx;	    \/* current index in argument list (can be$/;"	m	struct:window_S	access:public
w_arg_idx_invalid	vim/vim/src/structs.h	/^    int		w_arg_idx_invalid;  \/* editing another file than w_arg_idx *\/$/;"	m	struct:window_S	access:public
w_botfill	vim/vim/src/structs.h	/^    int		w_botfill;	    \/* TRUE when filler lines are actually$/;"	m	struct:window_S	access:public
w_botline	vim/vim/src/structs.h	/^    linenr_T	w_botline;	    \/* number of the line below the bottom of$/;"	m	struct:window_S	access:public
w_buffer	vim/vim/src/structs.h	/^    buf_T	*w_buffer;	    \/* buffer we are a window into (used$/;"	m	struct:window_S	access:public
w_changelistidx	vim/vim/src/structs.h	/^    int		w_changelistidx;	\/* current position in b_changelist *\/$/;"	m	struct:window_S	access:public
w_cline_folded	vim/vim/src/structs.h	/^    int		w_cline_folded;	    \/* cursor line is folded *\/$/;"	m	struct:window_S	access:public
w_cline_height	vim/vim/src/structs.h	/^    int		w_cline_height;	    \/* current size of cursor line *\/$/;"	m	struct:window_S	access:public
w_cline_row	vim/vim/src/structs.h	/^    int		w_cline_row;	    \/* starting row of the cursor line *\/$/;"	m	struct:window_S	access:public
w_closing	vim/vim/src/structs.h	/^    int		w_closing;	    \/* window is being closed, don't let$/;"	m	struct:window_S	access:public
w_cursor	vim/vim/src/structs.h	/^    pos_T	w_cursor;	    \/* cursor position in buffer *\/$/;"	m	struct:window_S	access:public
w_curswant	vim/vim/src/structs.h	/^    colnr_T	w_curswant;	    \/* The column we'd like to be at.  This is$/;"	m	struct:window_S	access:public
w_empty_rows	vim/vim/src/structs.h	/^    int		w_empty_rows;	    \/* number of ~ rows in window *\/$/;"	m	struct:window_S	access:public
w_farsi	vim/vim/src/structs.h	/^    int		w_farsi;	\/* for the window dependent Farsi functions *\/$/;"	m	struct:window_S	access:public
w_filler_rows	vim/vim/src/structs.h	/^    int		w_filler_rows;	    \/* number of filler rows at the end of the$/;"	m	struct:window_S	access:public
w_fold_manual	vim/vim/src/structs.h	/^    char	w_fold_manual;	    \/* when TRUE: some folds are opened\/closed$/;"	m	struct:window_S	access:public
w_foldinvalid	vim/vim/src/structs.h	/^    char	w_foldinvalid;	    \/* when TRUE: folding needs to be$/;"	m	struct:window_S	access:public
w_folds	vim/vim/src/structs.h	/^    garray_T	w_folds;	    \/* array of nested folds *\/$/;"	m	struct:window_S	access:public
w_fraction	vim/vim/src/structs.h	/^    int		w_fraction;$/;"	m	struct:window_S	access:public
w_frame	vim/vim/src/structs.h	/^    frame_T	*w_frame;	    \/* frame containing this window *\/$/;"	m	struct:window_S	access:public
w_height	vim/vim/src/structs.h	/^    int		w_height;	    \/* number of rows in window, excluding$/;"	m	struct:window_S	access:public
w_id	vim/vim/src/structs.h	/^    int		w_id;		    \/* unique window ID *\/$/;"	m	struct:window_S	access:public
w_jumplist	vim/vim/src/structs.h	/^    xfmark_T	w_jumplist[JUMPLISTSIZE];$/;"	m	struct:window_S	access:public
w_jumplistidx	vim/vim/src/structs.h	/^    int		w_jumplistidx;		\/* current position *\/$/;"	m	struct:window_S	access:public
w_jumplistlen	vim/vim/src/structs.h	/^    int		w_jumplistlen;		\/* number of active entries *\/$/;"	m	struct:window_S	access:public
w_leftcol	vim/vim/src/structs.h	/^    colnr_T	w_leftcol;	    \/* window column number of the left most$/;"	m	struct:window_S	access:public
w_line	vim/vim/src/structs.h	/^typedef struct w_line$/;"	s
w_line::wl_folded	vim/vim/src/structs.h	/^    char	wl_folded;	\/* TRUE when this is a range of folded lines *\/$/;"	m	struct:w_line	access:public
w_line::wl_lastlnum	vim/vim/src/structs.h	/^    linenr_T	wl_lastlnum;	\/* last buffer line number for logical line *\/$/;"	m	struct:w_line	access:public
w_line::wl_lnum	vim/vim/src/structs.h	/^    linenr_T	wl_lnum;	\/* buffer line number for logical line *\/$/;"	m	struct:w_line	access:public
w_line::wl_size	vim/vim/src/structs.h	/^    short_u	wl_size;	\/* height in screen lines *\/$/;"	m	struct:w_line	access:public
w_line::wl_valid	vim/vim/src/structs.h	/^    char	wl_valid;	\/* TRUE values are valid for text in buffer *\/$/;"	m	struct:w_line	access:public
w_lines	vim/vim/src/structs.h	/^    wline_T	*w_lines;$/;"	m	struct:window_S	access:public
w_lines_valid	vim/vim/src/structs.h	/^    int		w_lines_valid;	    \/* number of valid entries *\/$/;"	m	struct:window_S	access:public
w_llist	vim/vim/src/structs.h	/^    qf_info_T	*w_llist;		\/* Location list for this window *\/$/;"	m	struct:window_S	access:public
w_llist_ref	vim/vim/src/structs.h	/^    qf_info_T	*w_llist_ref;$/;"	m	struct:window_S	access:public
w_localdir	vim/vim/src/structs.h	/^    char_u	*w_localdir;	    \/* absolute path of local directory or$/;"	m	struct:window_S	access:public
w_match_head	vim/vim/src/structs.h	/^    matchitem_T	*w_match_head;		\/* head of match list *\/$/;"	m	struct:window_S	access:public
w_mzscheme_ref	vim/vim/src/structs.h	/^    void	*w_mzscheme_ref;	\/* The MzScheme value for this window *\/$/;"	m	struct:window_S	access:public
w_next	vim/vim/src/structs.h	/^    win_T	*w_next;	    \/* link to next window *\/$/;"	m	struct:window_S	access:public
w_next_match_id	vim/vim/src/structs.h	/^    int		w_next_match_id;	\/* next match ID *\/$/;"	m	struct:window_S	access:public
w_nrwidth	vim/vim/src/structs.h	/^    int		w_nrwidth;	    \/* width of 'number' and 'relativenumber'$/;"	m	struct:window_S	access:public
w_nrwidth_line_count	vim/vim/src/structs.h	/^    linenr_T	w_nrwidth_line_count;	\/* line count when ml_nrwidth_width$/;"	m	struct:window_S	access:public
w_nrwidth_width	vim/vim/src/structs.h	/^    int		w_nrwidth_width;	\/* nr of chars to print line count. *\/$/;"	m	struct:window_S	access:public
w_nuw_cached	vim/vim/src/structs.h	/^    long	w_nuw_cached;		\/* 'numberwidth' option cached *\/$/;"	m	struct:window_S	access:public
w_old_botfill	vim/vim/src/structs.h	/^    int		w_old_botfill;	    \/* w_botfill at last redraw *\/$/;"	m	struct:window_S	access:public
w_old_cursor_fcol	vim/vim/src/structs.h	/^    colnr_T	w_old_cursor_fcol;  \/* first column for block visual part *\/$/;"	m	struct:window_S	access:public
w_old_cursor_lcol	vim/vim/src/structs.h	/^    colnr_T	w_old_cursor_lcol;  \/* last column for block visual part *\/$/;"	m	struct:window_S	access:public
w_old_cursor_lnum	vim/vim/src/structs.h	/^    linenr_T	w_old_cursor_lnum;  \/* last known end of visual part *\/$/;"	m	struct:window_S	access:public
w_old_curswant	vim/vim/src/structs.h	/^    colnr_T	w_old_curswant;	    \/* last known value of Curswant *\/$/;"	m	struct:window_S	access:public
w_old_topfill	vim/vim/src/structs.h	/^    int		w_old_topfill;	    \/* w_topfill at last redraw *\/$/;"	m	struct:window_S	access:public
w_old_visual_col	vim/vim/src/structs.h	/^    colnr_T	w_old_visual_col;   \/* last known start of visual part *\/$/;"	m	struct:window_S	access:public
w_old_visual_lnum	vim/vim/src/structs.h	/^    linenr_T	w_old_visual_lnum;  \/* last known start of visual part *\/$/;"	m	struct:window_S	access:public
w_old_visual_mode	vim/vim/src/structs.h	/^    char	w_old_visual_mode;  \/* last known VIsual_mode *\/$/;"	m	struct:window_S	access:public
w_onebuf_opt	vim/vim/src/structs.h	/^    winopt_T	w_onebuf_opt;$/;"	m	struct:window_S	access:public
w_p_arab	vim/vim/src/structs.h	150;"	d
w_p_bri	vim/vim/src/structs.h	154;"	d
w_p_brimin	vim/vim/src/structs.h	/^    int		w_p_brimin;	    \/* minimum width for breakindent *\/$/;"	m	struct:window_S	access:public
w_p_briopt	vim/vim/src/structs.h	156;"	d
w_p_brisbr	vim/vim/src/structs.h	/^    int		w_p_brisbr;	    \/* sbr in 'briopt' *\/$/;"	m	struct:window_S	access:public
w_p_brishift	vim/vim/src/structs.h	/^    int		w_p_brishift;	    \/* additional shift for breakindent *\/$/;"	m	struct:window_S	access:public
w_p_cc	vim/vim/src/structs.h	236;"	d
w_p_cc_cols	vim/vim/src/structs.h	/^    int		*w_p_cc_cols;	    \/* array of columns to highlight or NULL *\/$/;"	m	struct:window_S	access:public
w_p_cocu	vim/vim/src/structs.h	258;"	d
w_p_cole	vim/vim/src/structs.h	260;"	d
w_p_crb	vim/vim/src/structs.h	264;"	d
w_p_crb_save	vim/vim/src/structs.h	266;"	d
w_p_cuc	vim/vim/src/structs.h	232;"	d
w_p_cul	vim/vim/src/structs.h	234;"	d
w_p_diff	vim/vim/src/structs.h	160;"	d
w_p_diff_saved	vim/vim/src/structs.h	246;"	d
w_p_fdc	vim/vim/src/structs.h	164;"	d
w_p_fdc_save	vim/vim/src/structs.h	166;"	d
w_p_fde	vim/vim/src/structs.h	187;"	d
w_p_fde_flags	vim/vim/src/structs.h	/^    long_u	w_p_fde_flags;	    \/* flags for 'foldexpr' *\/$/;"	m	struct:window_S	access:public
w_p_fdi	vim/vim/src/structs.h	172;"	d
w_p_fdl	vim/vim/src/structs.h	174;"	d
w_p_fdl_save	vim/vim/src/structs.h	176;"	d
w_p_fdm	vim/vim/src/structs.h	178;"	d
w_p_fdm_save	vim/vim/src/structs.h	180;"	d
w_p_fdn	vim/vim/src/structs.h	184;"	d
w_p_fdt	vim/vim/src/structs.h	189;"	d
w_p_fdt_flags	vim/vim/src/structs.h	/^    long_u	w_p_fdt_flags;	    \/* flags for 'foldtext' *\/$/;"	m	struct:window_S	access:public
w_p_fen	vim/vim/src/structs.h	168;"	d
w_p_fen_save	vim/vim/src/structs.h	170;"	d
w_p_fml	vim/vim/src/structs.h	182;"	d
w_p_fmr	vim/vim/src/structs.h	192;"	d
w_p_lbr	vim/vim/src/structs.h	196;"	d
w_p_list	vim/vim/src/structs.h	199;"	d
w_p_nu	vim/vim/src/structs.h	201;"	d
w_p_nuw	vim/vim/src/structs.h	206;"	d
w_p_pvw	vim/vim/src/structs.h	216;"	d
w_p_rl	vim/vim/src/structs.h	220;"	d
w_p_rlc	vim/vim/src/structs.h	222;"	d
w_p_rnu	vim/vim/src/structs.h	203;"	d
w_p_scb	vim/vim/src/structs.h	244;"	d
w_p_scb_save	vim/vim/src/structs.h	248;"	d
w_p_scl	vim/vim/src/structs.h	270;"	d
w_p_scr	vim/vim/src/structs.h	225;"	d
w_p_scriptID	vim/vim/src/structs.h	281;"	d
w_p_spell	vim/vim/src/structs.h	228;"	d
w_p_stl	vim/vim/src/structs.h	240;"	d
w_p_stl_flags	vim/vim/src/structs.h	/^    long_u	w_p_stl_flags;	    \/* flags for 'statusline' *\/$/;"	m	struct:window_S	access:public
w_p_tk	vim/vim/src/structs.h	274;"	d
w_p_tms	vim/vim/src/structs.h	276;"	d
w_p_wfh	vim/vim/src/structs.h	210;"	d
w_p_wfw	vim/vim/src/structs.h	212;"	d
w_p_wrap	vim/vim/src/structs.h	251;"	d
w_p_wrap_save	vim/vim/src/structs.h	254;"	d
w_pcmark	vim/vim/src/structs.h	/^    pos_T	w_pcmark;	\/* previous context mark *\/$/;"	m	struct:window_S	access:public
w_perl_private	vim/vim/src/structs.h	/^    void	*w_perl_private;$/;"	m	struct:window_S	access:public
w_prev	vim/vim/src/structs.h	/^    win_T	*w_prev;	    \/* link to previous window *\/$/;"	m	struct:window_S	access:public
w_prev_fraction_row	vim/vim/src/structs.h	/^    int		w_prev_fraction_row;$/;"	m	struct:window_S	access:public
w_prev_pcmark	vim/vim/src/structs.h	/^    pos_T	w_prev_pcmark;	\/* previous w_pcmark *\/$/;"	m	struct:window_S	access:public
w_python3_ref	vim/vim/src/structs.h	/^    void	*w_python3_ref;		\/* The Python value for this window *\/$/;"	m	struct:window_S	access:public
w_python_ref	vim/vim/src/structs.h	/^    void	*w_python_ref;		\/* The Python value for this window *\/$/;"	m	struct:window_S	access:public
w_redr_status	vim/vim/src/structs.h	/^    int		w_redr_status;	    \/* if TRUE status line must be redrawn *\/$/;"	m	struct:window_S	access:public
w_redr_type	vim/vim/src/structs.h	/^    int		w_redr_type;	    \/* type of redraw to be performed on win *\/$/;"	m	struct:window_S	access:public
w_redraw_bot	vim/vim/src/structs.h	/^    linenr_T	w_redraw_bot;	    \/* when != 0: last line needing redraw *\/$/;"	m	struct:window_S	access:public
w_redraw_top	vim/vim/src/structs.h	/^    linenr_T	w_redraw_top;	    \/* when != 0: first line needing redraw *\/$/;"	m	struct:window_S	access:public
w_ru_cursor	vim/vim/src/structs.h	/^    pos_T	w_ru_cursor;	    \/* cursor position shown in ruler *\/$/;"	m	struct:window_S	access:public
w_ru_empty	vim/vim/src/structs.h	/^    char	w_ru_empty;	    \/* TRUE if ruler shows 0-1 (empty line) *\/$/;"	m	struct:window_S	access:public
w_ru_line_count	vim/vim/src/structs.h	/^    linenr_T	w_ru_line_count;    \/* line count used for ruler *\/$/;"	m	struct:window_S	access:public
w_ru_topfill	vim/vim/src/structs.h	/^    int		w_ru_topfill;	    \/* topfill shown in ruler *\/$/;"	m	struct:window_S	access:public
w_ru_topline	vim/vim/src/structs.h	/^    linenr_T	w_ru_topline;	    \/* topline shown in ruler *\/$/;"	m	struct:window_S	access:public
w_ru_virtcol	vim/vim/src/structs.h	/^    colnr_T	w_ru_virtcol;	    \/* virtcol shown in ruler *\/$/;"	m	struct:window_S	access:public
w_ruby_ref	vim/vim/src/structs.h	/^    void	*w_ruby_ref;$/;"	m	struct:window_S	access:public
w_s	vim/vim/src/structs.h	/^    synblock_T	*w_s;		    \/* for :ownsyntax *\/$/;"	m	struct:window_S	access:public
w_scbind_pos	vim/vim/src/structs.h	/^    long	w_scbind_pos;$/;"	m	struct:window_S	access:public
w_scrollbars	vim/vim/src/structs.h	/^    scrollbar_T	w_scrollbars[2];	\/* vert. Scrollbars for this window *\/$/;"	m	struct:window_S	access:public
w_set_curswant	vim/vim/src/structs.h	/^    int		w_set_curswant;	    \/* If set, then update w_curswant the next$/;"	m	struct:window_S	access:public
w_skipcol	vim/vim/src/structs.h	/^    colnr_T	w_skipcol;	    \/* starting column when a single line$/;"	m	struct:window_S	access:public
w_status_height	vim/vim/src/structs.h	/^    int		w_status_height;    \/* number of status lines (0 or 1) *\/$/;"	m	struct:window_S	access:public
w_tagstack	vim/vim/src/structs.h	/^    taggy_T	w_tagstack[TAGSTACKSIZE];	\/* the tag stack *\/$/;"	m	struct:window_S	access:public
w_tagstackidx	vim/vim/src/structs.h	/^    int		w_tagstackidx;		\/* idx just below active entry *\/$/;"	m	struct:window_S	access:public
w_tagstacklen	vim/vim/src/structs.h	/^    int		w_tagstacklen;		\/* number of tags on stack *\/$/;"	m	struct:window_S	access:public
w_tcl_ref	vim/vim/src/structs.h	/^    void	*w_tcl_ref;$/;"	m	struct:window_S	access:public
w_topfill	vim/vim/src/structs.h	/^    int		w_topfill;	    \/* number of filler lines above w_topline *\/$/;"	m	struct:window_S	access:public
w_topline	vim/vim/src/structs.h	/^    linenr_T	w_topline;	    \/* buffer line number of the line at the$/;"	m	struct:window_S	access:public
w_topline_was_set	vim/vim/src/structs.h	/^    char	w_topline_was_set;  \/* flag set to TRUE when topline is set,$/;"	m	struct:window_S	access:public
w_upd_rows	vim/vim/src/structs.h	/^    int		w_upd_rows;	    \/* number of window lines to update when$/;"	m	struct:window_S	access:public
w_valid	vim/vim/src/structs.h	/^    int		w_valid;$/;"	m	struct:window_S	access:public
w_valid_cursor	vim/vim/src/structs.h	/^    pos_T	w_valid_cursor;	    \/* last known position of w_cursor, used$/;"	m	struct:window_S	access:public
w_valid_leftcol	vim/vim/src/structs.h	/^    colnr_T	w_valid_leftcol;    \/* last known w_leftcol *\/$/;"	m	struct:window_S	access:public
w_vars	vim/vim/src/structs.h	/^    dict_T	*w_vars;	\/* internal variables, local to window *\/$/;"	m	struct:window_S	access:public
w_virtcol	vim/vim/src/structs.h	/^    colnr_T	w_virtcol;	    \/* column number of the cursor in the$/;"	m	struct:window_S	access:public
w_vsep_width	vim/vim/src/structs.h	/^    int		w_vsep_width;	    \/* Number of separator columns (0 or 1).$/;"	m	struct:window_S	access:public
w_wcol	vim/vim/src/structs.h	/^    int		w_wrow, w_wcol;	    \/* cursor position in window *\/$/;"	m	struct:window_S	access:public
w_width	vim/vim/src/structs.h	/^    int		w_width;	    \/* Width of window, excluding separation.$/;"	m	struct:window_S	access:public
w_wincol	vim/vim/src/structs.h	/^    int		w_wincol;	    \/* Leftmost column of window in screen.$/;"	m	struct:window_S	access:public
w_winrow	vim/vim/src/structs.h	/^    int		w_winrow;	    \/* first row of window in screen *\/$/;"	m	struct:window_S	access:public
w_winvar	vim/vim/src/structs.h	/^    dictitem_T	w_winvar;	\/* variable for "w:" Dictionary *\/$/;"	m	struct:window_S	access:public
w_wrow	vim/vim/src/structs.h	/^    int		w_wrow, w_wcol;	    \/* cursor position in window *\/$/;"	m	struct:window_S	access:public
wait4pid	vim/vim/src/os_unix.c	/^static pid_t wait4pid(pid_t, waitstatus *);$/;"	p	file:	signature:(pid_t, waitstatus *)
wait4pid	vim/vim/src/os_unix.c	/^wait4pid(pid_t child, waitstatus *status)$/;"	f	file:	signature:(pid_t child, waitstatus *status)
wait_for_single_object	vim/vim/src/os_win32.c	/^wait_for_single_object($/;"	f	file:	signature:( HANDLE hHandle, DWORD dwMilliseconds)
wait_return	vim/vim/src/message.c	/^wait_return(int redraw)$/;"	f	signature:(int redraw)
waiting_for_winpos	vim/vim/src/term.c	/^static int waiting_for_winpos = FALSE;$/;"	v	file:
waitstatus	vim/vim/src/os_unix.c	/^typedef int waitstatus;$/;"	t	file:
waitstatus	vim/vim/src/os_unix.c	/^typedef union wait waitstatus;$/;"	t	typeref:union:wait	file:
want_full_screen	vim/vim/src/structs.h	/^    int		want_full_screen;$/;"	m	struct:__anon210	access:public
want_garbage_collect	vim/vim/src/globals.h	/^EXTERN int	want_garbage_collect INIT(= FALSE);$/;"	v
want_movecursor	vim/vim/src/libvterm/t/harness.c	/^static int want_movecursor = 0;$/;"	v	file:
want_moverect	vim/vim/src/libvterm/t/harness.c	/^static int want_moverect = 0;$/;"	v	file:
want_screen_damage	vim/vim/src/libvterm/t/harness.c	/^static int want_screen_damage = 0;$/;"	v	file:
want_screen_damage_cells	vim/vim/src/libvterm/t/harness.c	/^static int want_screen_damage_cells = 0;$/;"	v	file:
want_screen_scrollback	vim/vim/src/libvterm/t/harness.c	/^static int want_screen_scrollback = 0;$/;"	v	file:
want_scrollrect	vim/vim/src/libvterm/t/harness.c	/^static int want_scrollrect = 0;$/;"	v	file:
want_settermprop	vim/vim/src/libvterm/t/harness.c	/^static int want_settermprop = 0;$/;"	v	file:
want_state_erase	vim/vim/src/libvterm/t/harness.c	/^static int want_state_erase = 0;$/;"	v	file:
want_state_putglyph	vim/vim/src/libvterm/t/harness.c	/^static int want_state_putglyph = 0;$/;"	v	file:
warp_to_pc	vim/vim/src/workshop.c	/^static void	 warp_to_pc(int);$/;"	p	file:	signature:(int)
warp_to_pc	vim/vim/src/workshop.c	/^warp_to_pc($/;"	f	file:	signature:( int lnum)
was_set_insecurely	vim/vim/src/option.c	/^was_set_insecurely(char_u *opt, int opt_flags)$/;"	f	signature:(char_u *opt, int opt_flags)
wasicanon	vim/vim/src/libvterm/bin/vterm-ctrl.c	/^int wasicanon;$/;"	v
wb_window	vim/vim/src/os_amiga.c	/^static struct Window	*wb_window;$/;"	v	typeref:struct:Window	file:
wc_count	vim/vim/src/spell.c	/^    short_u	wc_count;	    \/* nr of times word was seen *\/$/;"	m	struct:wordcount_S	file:	access:public
wc_use_keyname	vim/vim/src/option.c	/^static int wc_use_keyname(char_u *varp, long *wcp);$/;"	p	file:	signature:(char_u *varp, long *wcp)
wc_use_keyname	vim/vim/src/option.c	/^wc_use_keyname(char_u *varp, long *wcp)$/;"	f	file:	signature:(char_u *varp, long *wcp)
wc_word	vim/vim/src/spell.c	/^    char_u	wc_word[1];	    \/* word, actually longer *\/$/;"	m	struct:wordcount_S	file:	access:public
wcmd_T	vim/vim/src/ex_docmd.c	/^} wcmd_T;$/;"	t	typeref:struct:__anon16	file:
wcsicmp	vim/vim/src/os_win32.c	150;"	d	file:
what	vim/vim/src/gui_gtk.c	/^    GtkWidget *what;	\/* 'Find what' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
what	vim/vim/src/gui_motif.c	/^    Widget what;	\/* 'Find what' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
where_paste_started	vim/vim/src/globals.h	/^EXTERN pos_T	where_paste_started;$/;"	v
which_scrollbars	vim/vim/src/gui.h	/^    int		which_scrollbars[3];\/* Which scrollbar boxes are active? *\/$/;"	m	struct:Gui	access:public
whole_undofile	vim/vim/src/crypt.c	/^    int	    whole_undofile; \/* whole undo file is encrypted *\/$/;"	m	struct:__anon214	file:	access:public
wi_fold_manual	vim/vim/src/structs.h	/^    int		wi_fold_manual;	\/* copy of w_fold_manual *\/$/;"	m	struct:wininfo_S	access:public
wi_folds	vim/vim/src/structs.h	/^    garray_T	wi_folds;	\/* clone of w_folds *\/$/;"	m	struct:wininfo_S	access:public
wi_fpos	vim/vim/src/structs.h	/^    pos_T	wi_fpos;	\/* last cursor position in the file *\/$/;"	m	struct:wininfo_S	access:public
wi_next	vim/vim/src/structs.h	/^    wininfo_T	*wi_next;	\/* next entry or NULL for last entry *\/$/;"	m	struct:wininfo_S	access:public
wi_opt	vim/vim/src/structs.h	/^    winopt_T	wi_opt;		\/* local window options *\/$/;"	m	struct:wininfo_S	access:public
wi_optset	vim/vim/src/structs.h	/^    int		wi_optset;	\/* TRUE when wi_opt has useful values *\/$/;"	m	struct:wininfo_S	access:public
wi_prev	vim/vim/src/structs.h	/^    wininfo_T	*wi_prev;	\/* previous entry or NULL for first entry *\/$/;"	m	struct:wininfo_S	access:public
wi_win	vim/vim/src/structs.h	/^    win_T	*wi_win;	\/* pointer to window that did set wi_fpos *\/$/;"	m	struct:wininfo_S	access:public
wid	vim/vim/src/gui.h	/^    Window	wid;		    \/* Window id of text area *\/$/;"	m	struct:Gui	access:public
wid	vim/vim/src/gui.h	/^    WindowPtr	wid;		    \/* Window id of text area *\/$/;"	m	struct:Gui	access:public
wide_WindowProc	vim/vim/src/globals.h	/^EXTERN int	wide_WindowProc INIT(= FALSE);	\/* use wide WindowProc() *\/$/;"	v
wide_bold_font	vim/vim/src/gui.h	/^    GuiFont	wide_bold_font;	    \/* Bold 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
wide_boldital_font	vim/vim/src/gui.h	/^    GuiFont	wide_boldital_font; \/* Bold-Italic 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
wide_font	vim/vim/src/gui.h	/^    GuiFont	wide_font;	    \/* Normal 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
wide_ital_font	vim/vim/src/gui.h	/^    GuiFont	wide_ital_font;	    \/* Italic 'guifontwide' font *\/$/;"	m	struct:Gui	access:public
widget	vim/vim/src/gui_gtk_f.c	/^    GtkWidget *widget;$/;"	m	struct:_GtkFormChild	file:	access:public
widgetIsIconified	vim/vim/src/integration.c	/^widgetIsIconified($/;"	f	file:	signature:( Widget w)
width	vim/vim/src/gui.h	/^    int		width;		\/* Current width of scroll bar in cols *\/$/;"	m	struct:GuiScrollbar	access:public
width	vim/vim/src/gui_mac.c	/^    short   width;	\/* Size of the text in pixel *\/$/;"	m	struct:__anon225	file:	access:public
width	vim/vim/src/hardcopy.c	/^    float	width;		\/* width and height in points for portrait *\/$/;"	m	struct:prt_mediasize_S	file:	access:public
width	vim/vim/src/libvterm/include/vterm.h	/^  char     width;$/;"	m	struct:__anon62	access:public
width	vim/vim/src/libvterm/include/vterm.h	/^  int             width;$/;"	m	struct:__anon56	access:public
width	vim/vim/src/os_vms.c	/^    short	width;$/;"	m	struct:__anon23	file:	access:public
width	vim/vim/src/xpm/include/simx.h	/^    unsigned int width;$/;"	m	struct:__anon87	access:public
width	vim/vim/src/xpm/include/xpm.h	/^    unsigned int width;			\/* Returns the width of the created$/;"	m	struct:__anon93	access:public
width	vim/vim/src/xpm/include/xpm.h	/^    unsigned int width;		\/* image width *\/$/;"	m	struct:__anon91	access:public
wild	vim/vim/src/gui_xmdlg.c	/^static char wild[3] = "*";$/;"	v	file:
wild_menu_showing	vim/vim/src/globals.h	/^EXTERN int  wild_menu_showing INIT(= 0);$/;"	v
wim_flags	vim/vim/src/globals.h	/^EXTERN char_u	wim_flags[4];$/;"	v
win	vim/vim/src/if_mzsch.c	/^    win_T	    *win;$/;"	m	struct:__anon8	file:	access:public
win	vim/vim/src/if_py_both.h	/^    win_T	*win;$/;"	m	struct:__anon109	access:public
win32_enable_privilege	vim/vim/src/os_win32.c	/^win32_enable_privilege(LPTSTR lpszPrivilege, BOOL bEnable)$/;"	f	file:	signature:(LPTSTR lpszPrivilege, BOOL bEnable)
win32_fileinfo	vim/vim/src/os_win32.c	/^win32_fileinfo(char_u *fname, BY_HANDLE_FILE_INFORMATION *info)$/;"	f	signature:(char_u *fname, BY_HANDLE_FILE_INFORMATION *info)
win32_getattrs	vim/vim/src/os_win32.c	/^static int win32_getattrs(char_u *name);$/;"	p	file:	signature:(char_u *name)
win32_getattrs	vim/vim/src/os_win32.c	/^win32_getattrs(char_u *name)$/;"	f	file:	signature:(char_u *name)
win32_kbd_patch_key	vim/vim/src/os_win32.c	/^win32_kbd_patch_key($/;"	f	file:	signature:( KEY_EVENT_RECORD *pker)
win32_set_archive	vim/vim/src/os_win32.c	/^static int win32_set_archive(char_u *name);$/;"	p	file:	signature:(char_u *name)
win32_set_archive	vim/vim/src/os_win32.c	/^win32_set_archive(char_u *name)$/;"	f	file:	signature:(char_u *name)
win32_set_foreground	vim/vim/src/os_mswin.c	/^win32_set_foreground(void)$/;"	f	signature:(void)
win32_setattrs	vim/vim/src/os_win32.c	/^static int win32_setattrs(char_u *name, int attrs);$/;"	p	file:	signature:(char_u *name, int attrs)
win32_setattrs	vim/vim/src/os_win32.c	/^win32_setattrs(char_u *name, int attrs)$/;"	f	file:	signature:(char_u *name, int attrs)
win8_or_later	vim/vim/src/os_win32.c	/^static BOOL win8_or_later = FALSE;$/;"	v	file:
winEventHandlerUPP	vim/vim/src/gui_mac.c	/^static EventHandlerUPP winEventHandlerUPP = NULL;$/;"	v	file:
win_T	vim/vim/src/structs.h	/^typedef struct window_S		win_T;$/;"	t	typeref:struct:window_S
win_alloc	vim/vim/src/window.c	/^static win_T *win_alloc(win_T *after, int hidden);$/;"	p	file:	signature:(win_T *after, int hidden)
win_alloc	vim/vim/src/window.c	/^win_alloc(win_T *after UNUSED, int hidden UNUSED)$/;"	f	file:	signature:(win_T *after UNUSED, int hidden UNUSED)
win_alloc_aucmd_win	vim/vim/src/window.c	/^win_alloc_aucmd_win(void)$/;"	f	signature:(void)
win_alloc_first	vim/vim/src/window.c	/^win_alloc_first(void)$/;"	f	signature:(void)
win_alloc_firstwin	vim/vim/src/window.c	/^static int win_alloc_firstwin(win_T *oldwin);$/;"	p	file:	signature:(win_T *oldwin)
win_alloc_firstwin	vim/vim/src/window.c	/^win_alloc_firstwin(win_T *oldwin)$/;"	f	file:	signature:(win_T *oldwin)
win_alloc_lines	vim/vim/src/window.c	/^win_alloc_lines(win_T *wp)$/;"	f	signature:(win_T *wp)
win_altframe	vim/vim/src/window.c	/^static frame_T *win_altframe(win_T *win, tabpage_T *tp);$/;"	p	file:	signature:(win_T *win, tabpage_T *tp)
win_altframe	vim/vim/src/window.c	/^win_altframe($/;"	f	file:	signature:( win_T *win, tabpage_T *tp)
win_append	vim/vim/src/window.c	/^win_append(win_T *after, win_T *wp)$/;"	f	signature:(win_T *after, win_T *wp)
win_chartabsize	vim/vim/src/charset.c	/^static int win_chartabsize(win_T *wp, char_u *p, colnr_T col);$/;"	p	file:	signature:(win_T *wp, char_u *p, colnr_T col)
win_chartabsize	vim/vim/src/charset.c	/^win_chartabsize(win_T *wp, char_u *p, colnr_T col)$/;"	f	file:	signature:(win_T *wp, char_u *p, colnr_T col)
win_clip_init	vim/vim/src/winclip.c	/^win_clip_init(void)$/;"	f	signature:(void)
win_close	vim/vim/src/window.c	/^win_close(win_T *win, int free_buf)$/;"	f	signature:(win_T *win, int free_buf)
win_close_othertab	vim/vim/src/window.c	/^win_close_othertab(win_T *win, int free_buf, tabpage_T *tp)$/;"	f	signature:(win_T *win, int free_buf, tabpage_T *tp)
win_col_off	vim/vim/src/move.c	/^win_col_off(win_T *wp)$/;"	f	signature:(win_T *wp)
win_col_off2	vim/vim/src/move.c	/^win_col_off2(win_T *wp)$/;"	f	signature:(win_T *wp)
win_comp_pos	vim/vim/src/window.c	/^win_comp_pos(void)$/;"	f	signature:(void)
win_comp_scroll	vim/vim/src/window.c	/^win_comp_scroll(win_T *wp)$/;"	f	signature:(win_T *wp)
win_copy_options	vim/vim/src/option.c	/^win_copy_options(win_T *wp_from, win_T *wp_to)$/;"	f	signature:(win_T *wp_from, win_T *wp_to)
win_count	vim/vim/src/window.c	/^win_count(void)$/;"	f	signature:(void)
win_del_lines	vim/vim/src/screen.c	/^win_del_lines($/;"	f	signature:( win_T *wp, int row, int line_count, int invalid, int mayclear)
win_do_lines	vim/vim/src/screen.c	/^static int win_do_lines(win_T *wp, int row, int line_count, int mayclear, int del);$/;"	p	file:	signature:(win_T *wp, int row, int line_count, int mayclear, int del)
win_do_lines	vim/vim/src/screen.c	/^win_do_lines($/;"	f	file:	signature:( win_T *wp, int row, int line_count, int mayclear, int del)
win_drag_status_line	vim/vim/src/window.c	/^win_drag_status_line(win_T *dragwin, int offset)$/;"	f	signature:(win_T *dragwin, int offset)
win_drag_vsep_line	vim/vim/src/window.c	/^win_drag_vsep_line(win_T *dragwin, int offset)$/;"	f	signature:(win_T *dragwin, int offset)
win_draw_end	vim/vim/src/screen.c	/^static void win_draw_end(win_T *wp, int c1, int c2, int row, int endrow, hlf_T hl);$/;"	p	file:	signature:(win_T *wp, int c1, int c2, int row, int endrow, hlf_T hl)
win_draw_end	vim/vim/src/screen.c	/^win_draw_end($/;"	f	file:	signature:( win_T *wp, int c1, int c2, int row, int endrow, hlf_T hl)
win_enter	vim/vim/src/window.c	/^win_enter(win_T *wp, int undo_sync)$/;"	f	signature:(win_T *wp, int undo_sync)
win_enter_ext	vim/vim/src/window.c	/^static void win_enter_ext(win_T *wp, int undo_sync, int no_curwin, int trigger_new_autocmds, int trigger_enter_autocmds, int trigger_leave_autocmds);$/;"	p	file:	signature:(win_T *wp, int undo_sync, int no_curwin, int trigger_new_autocmds, int trigger_enter_autocmds, int trigger_leave_autocmds)
win_enter_ext	vim/vim/src/window.c	/^win_enter_ext($/;"	f	file:	signature:( win_T *wp, int undo_sync, int curwin_invalid, int trigger_new_autocmds UNUSED, int trigger_enter_autocmds UNUSED, int trigger_leave_autocmds UNUSED)
win_equal	vim/vim/src/window.c	/^win_equal($/;"	f	signature:( win_T *next_curwin, int current, int dir)
win_equal_rec	vim/vim/src/window.c	/^static void win_equal_rec(win_T *next_curwin, int current, frame_T *topfr, int dir, int col, int row, int width, int height);$/;"	p	file:	signature:(win_T *next_curwin, int current, frame_T *topfr, int dir, int col, int row, int width, int height)
win_equal_rec	vim/vim/src/window.c	/^win_equal_rec($/;"	f	file:	signature:( win_T *next_curwin, int current, frame_T *topfr, int dir, int col, int row, int width, int height)
win_exchange	vim/vim/src/window.c	/^static void win_exchange(long);$/;"	p	file:	signature:(long)
win_exchange	vim/vim/src/window.c	/^win_exchange(long Prenum)$/;"	f	file:	signature:(long Prenum)
win_find_nr	vim/vim/src/window.c	/^win_find_nr(int winnr)$/;"	f	signature:(int winnr)
win_find_tabpage	vim/vim/src/window.c	/^win_find_tabpage(win_T *win)$/;"	f	signature:(win_T *win)
win_findbuf	vim/vim/src/window.c	/^win_findbuf(typval_T *argvars, list_T *list)$/;"	f	signature:(typval_T *argvars, list_T *list)
win_foldinfo	vim/vim/src/screen.c	/^static foldinfo_T win_foldinfo;	\/* info for 'foldcolumn' *\/$/;"	v	file:
win_free	vim/vim/src/window.c	/^static void win_free(win_T *wp, tabpage_T *tp);$/;"	p	file:	signature:(win_T *wp, tabpage_T *tp)
win_free	vim/vim/src/window.c	/^win_free($/;"	f	file:	signature:( win_T *wp, tabpage_T *tp)
win_free_all	vim/vim/src/window.c	/^win_free_all(void)$/;"	f	signature:(void)
win_free_lsize	vim/vim/src/window.c	/^win_free_lsize(win_T *wp)$/;"	f	signature:(win_T *wp)
win_free_mem	vim/vim/src/window.c	/^static win_T *win_free_mem(win_T *win, int *dirp, tabpage_T *tp);$/;"	p	file:	signature:(win_T *win, int *dirp, tabpage_T *tp)
win_free_mem	vim/vim/src/window.c	/^win_free_mem($/;"	f	file:	signature:( win_T *win, int *dirp, tabpage_T *tp)
win_getid	vim/vim/src/window.c	/^win_getid(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
win_goto	vim/vim/src/window.c	/^win_goto(win_T *wp)$/;"	f	signature:(win_T *wp)
win_goto_hor	vim/vim/src/window.c	/^static void win_goto_hor(int left, long count);$/;"	p	file:	signature:(int left, long count)
win_goto_hor	vim/vim/src/window.c	/^win_goto_hor($/;"	f	file:	signature:( int left, long count)
win_goto_ver	vim/vim/src/window.c	/^static void win_goto_ver(int up, long count);$/;"	p	file:	signature:(int up, long count)
win_goto_ver	vim/vim/src/window.c	/^win_goto_ver($/;"	f	file:	signature:( int up, long count)
win_gotoid	vim/vim/src/window.c	/^win_gotoid(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
win_hasvertsplit	vim/vim/src/window.c	/^win_hasvertsplit(void)$/;"	f	signature:(void)
win_id2tabwin	vim/vim/src/window.c	/^win_id2tabwin(typval_T *argvars, list_T *list)$/;"	f	signature:(typval_T *argvars, list_T *list)
win_id2win	vim/vim/src/window.c	/^win_id2win(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
win_id2wp	vim/vim/src/window.c	/^win_id2wp(typval_T *argvars)$/;"	f	signature:(typval_T *argvars)
win_init	vim/vim/src/window.c	/^static void win_init(win_T *newp, win_T *oldp, int flags);$/;"	p	file:	signature:(win_T *newp, win_T *oldp, int flags)
win_init	vim/vim/src/window.c	/^win_init(win_T *newp, win_T *oldp, int flags UNUSED)$/;"	f	file:	signature:(win_T *newp, win_T *oldp, int flags UNUSED)
win_init_empty	vim/vim/src/window.c	/^win_init_empty(win_T *wp)$/;"	f	signature:(win_T *wp)
win_init_size	vim/vim/src/window.c	/^win_init_size(void)$/;"	f	signature:(void)
win_init_some	vim/vim/src/window.c	/^static void win_init_some(win_T *newp, win_T *oldp);$/;"	p	file:	signature:(win_T *newp, win_T *oldp)
win_init_some	vim/vim/src/window.c	/^win_init_some(win_T *newp, win_T *oldp)$/;"	f	file:	signature:(win_T *newp, win_T *oldp)
win_ins_lines	vim/vim/src/screen.c	/^win_ins_lines($/;"	f	signature:( win_T *wp, int row, int line_count, int invalid, int mayclear)
win_lbr_chartabsize	vim/vim/src/charset.c	/^win_lbr_chartabsize($/;"	f	signature:( win_T *wp, char_u *line UNUSED, char_u *s, colnr_T col, int *headp UNUSED)
win_line	vim/vim/src/screen.c	/^static int win_line(win_T *, linenr_T, int, int, int nochange, proftime_T *syntax_tm);$/;"	p	file:	signature:(win_T *, linenr_T, int, int, int nochange, proftime_T *syntax_tm)
win_line	vim/vim/src/screen.c	/^win_line($/;"	f	file:	signature:( win_T *wp, linenr_T lnum, int startrow, int endrow, int nochange UNUSED, proftime_T *syntax_tm)
win_linetabsize	vim/vim/src/charset.c	/^win_linetabsize(win_T *wp, char_u *line, colnr_T len)$/;"	f	signature:(win_T *wp, char_u *line, colnr_T len)
win_move_after	vim/vim/src/window.c	/^win_move_after(win_T *win1, win_T *win2)$/;"	f	signature:(win_T *win1, win_T *win2)
win_new_height	vim/vim/src/window.c	/^win_new_height(win_T *wp, int height)$/;"	f	signature:(win_T *wp, int height)
win_new_shellsize	vim/vim/src/term.c	/^win_new_shellsize(void)$/;"	f	signature:(void)
win_new_tabpage	vim/vim/src/window.c	/^win_new_tabpage(int after)$/;"	f	signature:(int after)
win_new_width	vim/vim/src/window.c	/^win_new_width(win_T *wp, int width)$/;"	f	signature:(win_T *wp, int width)
win_nolbr_chartabsize	vim/vim/src/charset.c	/^static int win_nolbr_chartabsize(win_T *wp, char_u *s, colnr_T col, int *headp);$/;"	p	file:	signature:(win_T *wp, char_u *s, colnr_T col, int *headp)
win_nolbr_chartabsize	vim/vim/src/charset.c	/^win_nolbr_chartabsize($/;"	f	file:	signature:( win_T *wp, char_u *s, colnr_T col, int *headp)
win_redr_custom	vim/vim/src/screen.c	/^static void win_redr_custom(win_T *wp, int draw_ruler);$/;"	p	file:	signature:(win_T *wp, int draw_ruler)
win_redr_custom	vim/vim/src/screen.c	/^win_redr_custom($/;"	f	file:	signature:( win_T *wp, int draw_ruler)
win_redr_ruler	vim/vim/src/screen.c	/^static void win_redr_ruler(win_T *wp, int always);$/;"	p	file:	signature:(win_T *wp, int always)
win_redr_ruler	vim/vim/src/screen.c	/^win_redr_ruler(win_T *wp, int always)$/;"	f	file:	signature:(win_T *wp, int always)
win_redr_status	vim/vim/src/screen.c	/^win_redr_status(win_T *wp)$/;"	f	signature:(win_T *wp)
win_redr_status_matches	vim/vim/src/screen.c	/^win_redr_status_matches($/;"	f	signature:( expand_T *xp, int num_matches, char_u **matches, int match, int showtail)
win_redraw_last_status	vim/vim/src/screen.c	/^win_redraw_last_status(frame_T *frp)$/;"	f	signature:(frame_T *frp)
win_remove	vim/vim/src/window.c	/^win_remove($/;"	f	signature:( win_T *wp, tabpage_T *tp)
win_resize_off	vim/vim/src/os_amiga.c	/^win_resize_off(void)$/;"	f	signature:(void)
win_resize_on	vim/vim/src/os_amiga.c	/^win_resize_on(void)$/;"	f	signature:(void)
win_rest_invalid	vim/vim/src/screen.c	/^static void win_rest_invalid(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
win_rest_invalid	vim/vim/src/screen.c	/^win_rest_invalid(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
win_rotate	vim/vim/src/window.c	/^static void win_rotate(int, int);$/;"	p	file:	signature:(int, int)
win_rotate	vim/vim/src/window.c	/^win_rotate(int upwards, int count)$/;"	f	file:	signature:(int upwards, int count)
win_setheight	vim/vim/src/window.c	/^win_setheight(int height)$/;"	f	signature:(int height)
win_setheight_win	vim/vim/src/window.c	/^win_setheight_win(int height, win_T *win)$/;"	f	signature:(int height, win_T *win)
win_setminheight	vim/vim/src/window.c	/^win_setminheight(void)$/;"	f	signature:(void)
win_setwidth	vim/vim/src/window.c	/^win_setwidth(int width)$/;"	f	signature:(int width)
win_setwidth_win	vim/vim/src/window.c	/^win_setwidth_win(int width, win_T *wp)$/;"	f	signature:(int width, win_T *wp)
win_size_restore	vim/vim/src/window.c	/^win_size_restore(garray_T *gap)$/;"	f	signature:(garray_T *gap)
win_size_save	vim/vim/src/window.c	/^win_size_save(garray_T *gap)$/;"	f	signature:(garray_T *gap)
win_socket_id	vim/vim/src/globals.h	/^EXTERN long_u	win_socket_id INIT(= 0);$/;"	v
win_split	vim/vim/src/window.c	/^win_split(int size, int flags)$/;"	f	signature:(int size, int flags)
win_split_ins	vim/vim/src/window.c	/^win_split_ins($/;"	f	signature:( int size, int flags, win_T *new_wp, int dir)
win_totop	vim/vim/src/window.c	/^static void win_totop(int size, int flags);$/;"	p	file:	signature:(int size, int flags)
win_totop	vim/vim/src/window.c	/^win_totop(int size, int flags)$/;"	f	file:	signature:(int size, int flags)
win_update	vim/vim/src/screen.c	/^static void win_update(win_T *wp);$/;"	p	file:	signature:(win_T *wp)
win_update	vim/vim/src/screen.c	/^win_update(win_T *wp)$/;"	f	file:	signature:(win_T *wp)
win_valid	vim/vim/src/window.c	/^win_valid(win_T *win)$/;"	f	signature:(win_T *win)
win_valid_any_tab	vim/vim/src/window.c	/^win_valid_any_tab(win_T *win)$/;"	f	signature:(win_T *win)
windgoto	vim/vim/src/screen.c	/^windgoto(int row, int col)$/;"	f	signature:(int row, int col)
window	vim/vim/src/gui_gtk_f.c	/^    GdkWindow *window;$/;"	m	struct:_GtkFormChild	file:	access:public
window_S	vim/vim/src/structs.h	/^struct window_S$/;"	s
window_S::w_alist	vim/vim/src/structs.h	/^    alist_T	*w_alist;	    \/* pointer to arglist for this window *\/$/;"	m	struct:window_S	access:public
window_S::w_allbuf_opt	vim/vim/src/structs.h	/^    winopt_T	w_allbuf_opt;$/;"	m	struct:window_S	access:public
window_S::w_alt_fnum	vim/vim/src/structs.h	/^    int		w_alt_fnum;	    \/* alternate file (for # and CTRL-^) *\/$/;"	m	struct:window_S	access:public
window_S::w_arg_idx	vim/vim/src/structs.h	/^    int		w_arg_idx;	    \/* current index in argument list (can be$/;"	m	struct:window_S	access:public
window_S::w_arg_idx_invalid	vim/vim/src/structs.h	/^    int		w_arg_idx_invalid;  \/* editing another file than w_arg_idx *\/$/;"	m	struct:window_S	access:public
window_S::w_botfill	vim/vim/src/structs.h	/^    int		w_botfill;	    \/* TRUE when filler lines are actually$/;"	m	struct:window_S	access:public
window_S::w_botline	vim/vim/src/structs.h	/^    linenr_T	w_botline;	    \/* number of the line below the bottom of$/;"	m	struct:window_S	access:public
window_S::w_buffer	vim/vim/src/structs.h	/^    buf_T	*w_buffer;	    \/* buffer we are a window into (used$/;"	m	struct:window_S	access:public
window_S::w_changelistidx	vim/vim/src/structs.h	/^    int		w_changelistidx;	\/* current position in b_changelist *\/$/;"	m	struct:window_S	access:public
window_S::w_cline_folded	vim/vim/src/structs.h	/^    int		w_cline_folded;	    \/* cursor line is folded *\/$/;"	m	struct:window_S	access:public
window_S::w_cline_height	vim/vim/src/structs.h	/^    int		w_cline_height;	    \/* current size of cursor line *\/$/;"	m	struct:window_S	access:public
window_S::w_cline_row	vim/vim/src/structs.h	/^    int		w_cline_row;	    \/* starting row of the cursor line *\/$/;"	m	struct:window_S	access:public
window_S::w_closing	vim/vim/src/structs.h	/^    int		w_closing;	    \/* window is being closed, don't let$/;"	m	struct:window_S	access:public
window_S::w_cursor	vim/vim/src/structs.h	/^    pos_T	w_cursor;	    \/* cursor position in buffer *\/$/;"	m	struct:window_S	access:public
window_S::w_curswant	vim/vim/src/structs.h	/^    colnr_T	w_curswant;	    \/* The column we'd like to be at.  This is$/;"	m	struct:window_S	access:public
window_S::w_empty_rows	vim/vim/src/structs.h	/^    int		w_empty_rows;	    \/* number of ~ rows in window *\/$/;"	m	struct:window_S	access:public
window_S::w_farsi	vim/vim/src/structs.h	/^    int		w_farsi;	\/* for the window dependent Farsi functions *\/$/;"	m	struct:window_S	access:public
window_S::w_filler_rows	vim/vim/src/structs.h	/^    int		w_filler_rows;	    \/* number of filler rows at the end of the$/;"	m	struct:window_S	access:public
window_S::w_fold_manual	vim/vim/src/structs.h	/^    char	w_fold_manual;	    \/* when TRUE: some folds are opened\/closed$/;"	m	struct:window_S	access:public
window_S::w_foldinvalid	vim/vim/src/structs.h	/^    char	w_foldinvalid;	    \/* when TRUE: folding needs to be$/;"	m	struct:window_S	access:public
window_S::w_folds	vim/vim/src/structs.h	/^    garray_T	w_folds;	    \/* array of nested folds *\/$/;"	m	struct:window_S	access:public
window_S::w_fraction	vim/vim/src/structs.h	/^    int		w_fraction;$/;"	m	struct:window_S	access:public
window_S::w_frame	vim/vim/src/structs.h	/^    frame_T	*w_frame;	    \/* frame containing this window *\/$/;"	m	struct:window_S	access:public
window_S::w_height	vim/vim/src/structs.h	/^    int		w_height;	    \/* number of rows in window, excluding$/;"	m	struct:window_S	access:public
window_S::w_id	vim/vim/src/structs.h	/^    int		w_id;		    \/* unique window ID *\/$/;"	m	struct:window_S	access:public
window_S::w_jumplist	vim/vim/src/structs.h	/^    xfmark_T	w_jumplist[JUMPLISTSIZE];$/;"	m	struct:window_S	access:public
window_S::w_jumplistidx	vim/vim/src/structs.h	/^    int		w_jumplistidx;		\/* current position *\/$/;"	m	struct:window_S	access:public
window_S::w_jumplistlen	vim/vim/src/structs.h	/^    int		w_jumplistlen;		\/* number of active entries *\/$/;"	m	struct:window_S	access:public
window_S::w_leftcol	vim/vim/src/structs.h	/^    colnr_T	w_leftcol;	    \/* window column number of the left most$/;"	m	struct:window_S	access:public
window_S::w_lines	vim/vim/src/structs.h	/^    wline_T	*w_lines;$/;"	m	struct:window_S	access:public
window_S::w_lines_valid	vim/vim/src/structs.h	/^    int		w_lines_valid;	    \/* number of valid entries *\/$/;"	m	struct:window_S	access:public
window_S::w_llist	vim/vim/src/structs.h	/^    qf_info_T	*w_llist;		\/* Location list for this window *\/$/;"	m	struct:window_S	access:public
window_S::w_llist_ref	vim/vim/src/structs.h	/^    qf_info_T	*w_llist_ref;$/;"	m	struct:window_S	access:public
window_S::w_localdir	vim/vim/src/structs.h	/^    char_u	*w_localdir;	    \/* absolute path of local directory or$/;"	m	struct:window_S	access:public
window_S::w_match_head	vim/vim/src/structs.h	/^    matchitem_T	*w_match_head;		\/* head of match list *\/$/;"	m	struct:window_S	access:public
window_S::w_mzscheme_ref	vim/vim/src/structs.h	/^    void	*w_mzscheme_ref;	\/* The MzScheme value for this window *\/$/;"	m	struct:window_S	access:public
window_S::w_next	vim/vim/src/structs.h	/^    win_T	*w_next;	    \/* link to next window *\/$/;"	m	struct:window_S	access:public
window_S::w_next_match_id	vim/vim/src/structs.h	/^    int		w_next_match_id;	\/* next match ID *\/$/;"	m	struct:window_S	access:public
window_S::w_nrwidth	vim/vim/src/structs.h	/^    int		w_nrwidth;	    \/* width of 'number' and 'relativenumber'$/;"	m	struct:window_S	access:public
window_S::w_nrwidth_line_count	vim/vim/src/structs.h	/^    linenr_T	w_nrwidth_line_count;	\/* line count when ml_nrwidth_width$/;"	m	struct:window_S	access:public
window_S::w_nrwidth_width	vim/vim/src/structs.h	/^    int		w_nrwidth_width;	\/* nr of chars to print line count. *\/$/;"	m	struct:window_S	access:public
window_S::w_nuw_cached	vim/vim/src/structs.h	/^    long	w_nuw_cached;		\/* 'numberwidth' option cached *\/$/;"	m	struct:window_S	access:public
window_S::w_old_botfill	vim/vim/src/structs.h	/^    int		w_old_botfill;	    \/* w_botfill at last redraw *\/$/;"	m	struct:window_S	access:public
window_S::w_old_cursor_fcol	vim/vim/src/structs.h	/^    colnr_T	w_old_cursor_fcol;  \/* first column for block visual part *\/$/;"	m	struct:window_S	access:public
window_S::w_old_cursor_lcol	vim/vim/src/structs.h	/^    colnr_T	w_old_cursor_lcol;  \/* last column for block visual part *\/$/;"	m	struct:window_S	access:public
window_S::w_old_cursor_lnum	vim/vim/src/structs.h	/^    linenr_T	w_old_cursor_lnum;  \/* last known end of visual part *\/$/;"	m	struct:window_S	access:public
window_S::w_old_curswant	vim/vim/src/structs.h	/^    colnr_T	w_old_curswant;	    \/* last known value of Curswant *\/$/;"	m	struct:window_S	access:public
window_S::w_old_topfill	vim/vim/src/structs.h	/^    int		w_old_topfill;	    \/* w_topfill at last redraw *\/$/;"	m	struct:window_S	access:public
window_S::w_old_visual_col	vim/vim/src/structs.h	/^    colnr_T	w_old_visual_col;   \/* last known start of visual part *\/$/;"	m	struct:window_S	access:public
window_S::w_old_visual_lnum	vim/vim/src/structs.h	/^    linenr_T	w_old_visual_lnum;  \/* last known start of visual part *\/$/;"	m	struct:window_S	access:public
window_S::w_old_visual_mode	vim/vim/src/structs.h	/^    char	w_old_visual_mode;  \/* last known VIsual_mode *\/$/;"	m	struct:window_S	access:public
window_S::w_onebuf_opt	vim/vim/src/structs.h	/^    winopt_T	w_onebuf_opt;$/;"	m	struct:window_S	access:public
window_S::w_p_brimin	vim/vim/src/structs.h	/^    int		w_p_brimin;	    \/* minimum width for breakindent *\/$/;"	m	struct:window_S	access:public
window_S::w_p_brisbr	vim/vim/src/structs.h	/^    int		w_p_brisbr;	    \/* sbr in 'briopt' *\/$/;"	m	struct:window_S	access:public
window_S::w_p_brishift	vim/vim/src/structs.h	/^    int		w_p_brishift;	    \/* additional shift for breakindent *\/$/;"	m	struct:window_S	access:public
window_S::w_p_cc_cols	vim/vim/src/structs.h	/^    int		*w_p_cc_cols;	    \/* array of columns to highlight or NULL *\/$/;"	m	struct:window_S	access:public
window_S::w_p_fde_flags	vim/vim/src/structs.h	/^    long_u	w_p_fde_flags;	    \/* flags for 'foldexpr' *\/$/;"	m	struct:window_S	access:public
window_S::w_p_fdt_flags	vim/vim/src/structs.h	/^    long_u	w_p_fdt_flags;	    \/* flags for 'foldtext' *\/$/;"	m	struct:window_S	access:public
window_S::w_p_stl_flags	vim/vim/src/structs.h	/^    long_u	w_p_stl_flags;	    \/* flags for 'statusline' *\/$/;"	m	struct:window_S	access:public
window_S::w_pcmark	vim/vim/src/structs.h	/^    pos_T	w_pcmark;	\/* previous context mark *\/$/;"	m	struct:window_S	access:public
window_S::w_perl_private	vim/vim/src/structs.h	/^    void	*w_perl_private;$/;"	m	struct:window_S	access:public
window_S::w_prev	vim/vim/src/structs.h	/^    win_T	*w_prev;	    \/* link to previous window *\/$/;"	m	struct:window_S	access:public
window_S::w_prev_fraction_row	vim/vim/src/structs.h	/^    int		w_prev_fraction_row;$/;"	m	struct:window_S	access:public
window_S::w_prev_pcmark	vim/vim/src/structs.h	/^    pos_T	w_prev_pcmark;	\/* previous w_pcmark *\/$/;"	m	struct:window_S	access:public
window_S::w_python3_ref	vim/vim/src/structs.h	/^    void	*w_python3_ref;		\/* The Python value for this window *\/$/;"	m	struct:window_S	access:public
window_S::w_python_ref	vim/vim/src/structs.h	/^    void	*w_python_ref;		\/* The Python value for this window *\/$/;"	m	struct:window_S	access:public
window_S::w_redr_status	vim/vim/src/structs.h	/^    int		w_redr_status;	    \/* if TRUE status line must be redrawn *\/$/;"	m	struct:window_S	access:public
window_S::w_redr_type	vim/vim/src/structs.h	/^    int		w_redr_type;	    \/* type of redraw to be performed on win *\/$/;"	m	struct:window_S	access:public
window_S::w_redraw_bot	vim/vim/src/structs.h	/^    linenr_T	w_redraw_bot;	    \/* when != 0: last line needing redraw *\/$/;"	m	struct:window_S	access:public
window_S::w_redraw_top	vim/vim/src/structs.h	/^    linenr_T	w_redraw_top;	    \/* when != 0: first line needing redraw *\/$/;"	m	struct:window_S	access:public
window_S::w_ru_cursor	vim/vim/src/structs.h	/^    pos_T	w_ru_cursor;	    \/* cursor position shown in ruler *\/$/;"	m	struct:window_S	access:public
window_S::w_ru_empty	vim/vim/src/structs.h	/^    char	w_ru_empty;	    \/* TRUE if ruler shows 0-1 (empty line) *\/$/;"	m	struct:window_S	access:public
window_S::w_ru_line_count	vim/vim/src/structs.h	/^    linenr_T	w_ru_line_count;    \/* line count used for ruler *\/$/;"	m	struct:window_S	access:public
window_S::w_ru_topfill	vim/vim/src/structs.h	/^    int		w_ru_topfill;	    \/* topfill shown in ruler *\/$/;"	m	struct:window_S	access:public
window_S::w_ru_topline	vim/vim/src/structs.h	/^    linenr_T	w_ru_topline;	    \/* topline shown in ruler *\/$/;"	m	struct:window_S	access:public
window_S::w_ru_virtcol	vim/vim/src/structs.h	/^    colnr_T	w_ru_virtcol;	    \/* virtcol shown in ruler *\/$/;"	m	struct:window_S	access:public
window_S::w_ruby_ref	vim/vim/src/structs.h	/^    void	*w_ruby_ref;$/;"	m	struct:window_S	access:public
window_S::w_s	vim/vim/src/structs.h	/^    synblock_T	*w_s;		    \/* for :ownsyntax *\/$/;"	m	struct:window_S	access:public
window_S::w_scbind_pos	vim/vim/src/structs.h	/^    long	w_scbind_pos;$/;"	m	struct:window_S	access:public
window_S::w_scrollbars	vim/vim/src/structs.h	/^    scrollbar_T	w_scrollbars[2];	\/* vert. Scrollbars for this window *\/$/;"	m	struct:window_S	access:public
window_S::w_set_curswant	vim/vim/src/structs.h	/^    int		w_set_curswant;	    \/* If set, then update w_curswant the next$/;"	m	struct:window_S	access:public
window_S::w_skipcol	vim/vim/src/structs.h	/^    colnr_T	w_skipcol;	    \/* starting column when a single line$/;"	m	struct:window_S	access:public
window_S::w_status_height	vim/vim/src/structs.h	/^    int		w_status_height;    \/* number of status lines (0 or 1) *\/$/;"	m	struct:window_S	access:public
window_S::w_tagstack	vim/vim/src/structs.h	/^    taggy_T	w_tagstack[TAGSTACKSIZE];	\/* the tag stack *\/$/;"	m	struct:window_S	access:public
window_S::w_tagstackidx	vim/vim/src/structs.h	/^    int		w_tagstackidx;		\/* idx just below active entry *\/$/;"	m	struct:window_S	access:public
window_S::w_tagstacklen	vim/vim/src/structs.h	/^    int		w_tagstacklen;		\/* number of tags on stack *\/$/;"	m	struct:window_S	access:public
window_S::w_tcl_ref	vim/vim/src/structs.h	/^    void	*w_tcl_ref;$/;"	m	struct:window_S	access:public
window_S::w_topfill	vim/vim/src/structs.h	/^    int		w_topfill;	    \/* number of filler lines above w_topline *\/$/;"	m	struct:window_S	access:public
window_S::w_topline	vim/vim/src/structs.h	/^    linenr_T	w_topline;	    \/* buffer line number of the line at the$/;"	m	struct:window_S	access:public
window_S::w_topline_was_set	vim/vim/src/structs.h	/^    char	w_topline_was_set;  \/* flag set to TRUE when topline is set,$/;"	m	struct:window_S	access:public
window_S::w_upd_rows	vim/vim/src/structs.h	/^    int		w_upd_rows;	    \/* number of window lines to update when$/;"	m	struct:window_S	access:public
window_S::w_valid	vim/vim/src/structs.h	/^    int		w_valid;$/;"	m	struct:window_S	access:public
window_S::w_valid_cursor	vim/vim/src/structs.h	/^    pos_T	w_valid_cursor;	    \/* last known position of w_cursor, used$/;"	m	struct:window_S	access:public
window_S::w_valid_leftcol	vim/vim/src/structs.h	/^    colnr_T	w_valid_leftcol;    \/* last known w_leftcol *\/$/;"	m	struct:window_S	access:public
window_S::w_vars	vim/vim/src/structs.h	/^    dict_T	*w_vars;	\/* internal variables, local to window *\/$/;"	m	struct:window_S	access:public
window_S::w_virtcol	vim/vim/src/structs.h	/^    colnr_T	w_virtcol;	    \/* column number of the cursor in the$/;"	m	struct:window_S	access:public
window_S::w_vsep_width	vim/vim/src/structs.h	/^    int		w_vsep_width;	    \/* Number of separator columns (0 or 1).$/;"	m	struct:window_S	access:public
window_S::w_wcol	vim/vim/src/structs.h	/^    int		w_wrow, w_wcol;	    \/* cursor position in window *\/$/;"	m	struct:window_S	access:public
window_S::w_width	vim/vim/src/structs.h	/^    int		w_width;	    \/* Width of window, excluding separation.$/;"	m	struct:window_S	access:public
window_S::w_wincol	vim/vim/src/structs.h	/^    int		w_wincol;	    \/* Leftmost column of window in screen.$/;"	m	struct:window_S	access:public
window_S::w_winrow	vim/vim/src/structs.h	/^    int		w_winrow;	    \/* first row of window in screen *\/$/;"	m	struct:window_S	access:public
window_S::w_winvar	vim/vim/src/structs.h	/^    dictitem_T	w_winvar;	\/* variable for "w:" Dictionary *\/$/;"	m	struct:window_S	access:public
window_S::w_wrow	vim/vim/src/structs.h	/^    int		w_wrow, w_wcol;	    \/* cursor position in window *\/$/;"	m	struct:window_S	access:public
window_buffer	vim/vim/src/if_ruby.c	/^static VALUE window_buffer(VALUE self)$/;"	f	file:	signature:(VALUE self)
window_cb	vim/vim/src/dosinst.c	/^window_cb(HWND hwnd, LPARAM lparam)$/;"	f	file:	signature:(HWND hwnd, LPARAM lparam)
window_count	vim/vim/src/structs.h	/^    int		window_count;		\/* number of windows to use *\/$/;"	m	struct:__anon210	access:public
window_cursor	vim/vim/src/if_ruby.c	/^static VALUE window_cursor(VALUE self)$/;"	f	file:	signature:(VALUE self)
window_dsize	vim/vim/src/if_ruby.c	/^static size_t window_dsize(const void *buf);$/;"	p	file:	signature:(const void *buf)
window_dsize	vim/vim/src/if_ruby.c	/^static size_t window_dsize(const void *win UNUSED)$/;"	f	file:	signature:(const void *win UNUSED)
window_fixup_proc	vim/vim/src/if_mzsch.c	/^static int window_fixup_proc(void *obj)$/;"	f	file:	signature:(void *obj)
window_height	vim/vim/src/if_ruby.c	/^static VALUE window_height(VALUE self)$/;"	f	file:	signature:(VALUE self)
window_layout	vim/vim/src/structs.h	/^    int		window_layout;		\/* 0, WIN_HOR, WIN_VER or WIN_TABS *\/$/;"	m	struct:__anon210	access:public
window_mark_proc	vim/vim/src/if_mzsch.c	/^static int window_mark_proc(void *obj)$/;"	f	file:	signature:(void *obj)
window_new	vim/vim/src/if_mzsch.c	/^static Scheme_Object *window_new(win_T *win);$/;"	p	file:	signature:(win_T *win)
window_new	vim/vim/src/if_mzsch.c	/^window_new(win_T *win)$/;"	f	file:	signature:(win_T *win)
window_new	vim/vim/src/if_ruby.c	/^static VALUE window_new(win_T *win)$/;"	f	file:	signature:(win_T *win)
window_s_aref	vim/vim/src/if_ruby.c	/^static VALUE window_s_aref(VALUE self UNUSED, VALUE num)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE num)
window_s_count	vim/vim/src/if_ruby.c	/^static VALUE window_s_count(void)$/;"	f	file:	signature:(void)
window_s_current	vim/vim/src/if_ruby.c	/^static VALUE window_s_current(void)$/;"	f	file:	signature:(void)
window_set_cursor	vim/vim/src/if_ruby.c	/^static VALUE window_set_cursor(VALUE self, VALUE pos)$/;"	f	file:	signature:(VALUE self, VALUE pos)
window_set_height	vim/vim/src/if_ruby.c	/^static VALUE window_set_height(VALUE self, VALUE height)$/;"	f	file:	signature:(VALUE self, VALUE height)
window_set_width	vim/vim/src/if_ruby.c	/^static VALUE window_set_width(VALUE self UNUSED, VALUE width)$/;"	f	file:	signature:(VALUE self UNUSED, VALUE width)
window_size_proc	vim/vim/src/if_mzsch.c	/^static int window_size_proc(void *obj UNUSED)$/;"	f	file:	signature:(void *obj UNUSED)
window_type	vim/vim/src/if_ruby.c	/^static const rb_data_type_t window_type = {$/;"	v	file:
window_width	vim/vim/src/if_ruby.c	/^static VALUE window_width(VALUE self UNUSED)$/;"	f	file:	signature:(VALUE self UNUSED)
windowcmd	vim/vim/src/if_tcl.c	/^windowcmd($/;"	f	file:	signature:( ClientData dummy UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
winframe_remove	vim/vim/src/window.c	/^winframe_remove($/;"	f	signature:( win_T *win, int *dirp UNUSED, tabpage_T *tp)
wininfo_S	vim/vim/src/structs.h	/^struct wininfo_S$/;"	s
wininfo_S::wi_fold_manual	vim/vim/src/structs.h	/^    int		wi_fold_manual;	\/* copy of w_fold_manual *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_folds	vim/vim/src/structs.h	/^    garray_T	wi_folds;	\/* clone of w_folds *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_fpos	vim/vim/src/structs.h	/^    pos_T	wi_fpos;	\/* last cursor position in the file *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_next	vim/vim/src/structs.h	/^    wininfo_T	*wi_next;	\/* next entry or NULL for last entry *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_opt	vim/vim/src/structs.h	/^    winopt_T	wi_opt;		\/* local window options *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_optset	vim/vim/src/structs.h	/^    int		wi_optset;	\/* TRUE when wi_opt has useful values *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_prev	vim/vim/src/structs.h	/^    wininfo_T	*wi_prev;	\/* previous entry or NULL for first entry *\/$/;"	m	struct:wininfo_S	access:public
wininfo_S::wi_win	vim/vim/src/structs.h	/^    win_T	*wi_win;	\/* pointer to window that did set wi_fpos *\/$/;"	m	struct:wininfo_S	access:public
wininfo_T	vim/vim/src/structs.h	/^typedef struct wininfo_S	wininfo_T;$/;"	t	typeref:struct:wininfo_S
wininfo_other_tab_diff	vim/vim/src/buffer.c	/^static int wininfo_other_tab_diff(wininfo_T *wip);$/;"	p	file:	signature:(wininfo_T *wip)
wininfo_other_tab_diff	vim/vim/src/buffer.c	/^wininfo_other_tab_diff(wininfo_T *wip)$/;"	f	file:	signature:(wininfo_T *wip)
winopt_T	vim/vim/src/structs.h	/^} winopt_T;$/;"	t	typeref:struct:__anon164
winpos_x	vim/vim/src/term.c	/^static int winpos_x;$/;"	v	file:
winpos_y	vim/vim/src/term.c	/^static int winpos_y;$/;"	v	file:
winpty_conerr_name	vim/vim/src/terminal.c	/^LPCWSTR (*winpty_conerr_name)(void*);$/;"	v
winpty_config_free	vim/vim/src/terminal.c	/^void (*winpty_config_free)(void*);$/;"	v
winpty_config_new	vim/vim/src/terminal.c	/^void* (*winpty_config_new)(UINT64, void*);$/;"	v
winpty_config_set_initial_size	vim/vim/src/terminal.c	/^void (*winpty_config_set_initial_size)(void*, int, int);$/;"	v
winpty_conin_name	vim/vim/src/terminal.c	/^LPCWSTR (*winpty_conin_name)(void*);$/;"	v
winpty_conout_name	vim/vim/src/terminal.c	/^LPCWSTR (*winpty_conout_name)(void*);$/;"	v
winpty_error_free	vim/vim/src/terminal.c	/^void (*winpty_error_free)(void*);$/;"	v
winpty_error_msg	vim/vim/src/terminal.c	/^LPCWSTR (*winpty_error_msg)(void*);$/;"	v
winpty_free	vim/vim/src/terminal.c	/^void (*winpty_free)(void*);$/;"	v
winpty_open	vim/vim/src/terminal.c	/^void* (*winpty_open)(void*, void*);$/;"	v
winpty_set_size	vim/vim/src/terminal.c	/^BOOL (*winpty_set_size)(void*, int, int, void*);$/;"	v
winpty_spawn	vim/vim/src/terminal.c	/^BOOL (*winpty_spawn)(void*, void*, HANDLE*, HANDLE*, DWORD*, void*);$/;"	v
winpty_spawn_config_free	vim/vim/src/terminal.c	/^void (*winpty_spawn_config_free)(void*);$/;"	v
winpty_spawn_config_new	vim/vim/src/terminal.c	/^void* (*winpty_spawn_config_new)(UINT64, void*, LPCWSTR, void*, void*, void*);$/;"	v
winselfcmd	vim/vim/src/if_tcl.c	/^winselfcmd($/;"	f	file:	signature:( ClientData ref, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
wipe_buffer	vim/vim/src/buffer.c	/^wipe_buffer($/;"	f	signature:( buf_T *buf, int aucmd UNUSED)
wipe_dummy_buffer	vim/vim/src/quickfix.c	/^static void	wipe_dummy_buffer(buf_T *buf, char_u *dirname_start);$/;"	p	file:	signature:(buf_T *buf, char_u *dirname_start)
wipe_dummy_buffer	vim/vim/src/quickfix.c	/^wipe_dummy_buffer(buf_T *buf, char_u *dirname_start)$/;"	f	file:	signature:(buf_T *buf, char_u *dirname_start)
with	vim/vim/src/gui_gtk.c	/^    GtkWidget *with;	\/* 'Replace with' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
with	vim/vim/src/gui_motif.c	/^    Widget with;	\/* 'Replace with' entry text widget *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
wl_folded	vim/vim/src/structs.h	/^    char	wl_folded;	\/* TRUE when this is a range of folded lines *\/$/;"	m	struct:w_line	access:public
wl_lastlnum	vim/vim/src/structs.h	/^    linenr_T	wl_lastlnum;	\/* last buffer line number for logical line *\/$/;"	m	struct:w_line	access:public
wl_lnum	vim/vim/src/structs.h	/^    linenr_T	wl_lnum;	\/* buffer line number for logical line *\/$/;"	m	struct:w_line	access:public
wl_size	vim/vim/src/structs.h	/^    short_u	wl_size;	\/* height in screen lines *\/$/;"	m	struct:w_line	access:public
wl_valid	vim/vim/src/structs.h	/^    char	wl_valid;	\/* TRUE values are valid for text in buffer *\/$/;"	m	struct:w_line	access:public
wline_T	vim/vim/src/structs.h	/^} wline_T;$/;"	t	typeref:struct:w_line
wmDeleteWindowTranslation	vim/vim/src/gui_at_fs.c	/^static char *wmDeleteWindowTranslation = "\\$/;"	v	file:
wmShellWidgetClass	vim/vim/src/gui_gtk_vms.h	676;"	d
wm_atoms	vim/vim/src/gui_x11.c	/^static Atom   wm_atoms[2];	\/* Window Manager Atoms *\/$/;"	v	file:
wm_protocols_atom	vim/vim/src/gui_gtk_x11.c	/^static GdkAtom wm_protocols_atom = GDK_NONE;$/;"	v	file:
wn_affixID	vim/vim/src/spellfile.c	/^    char_u	wn_affixID;	\/* supported\/required prefix ID or 0 *\/$/;"	m	struct:wordnode_S	file:	access:public
wn_byte	vim/vim/src/spellfile.c	/^    char_u	wn_byte;	\/* Byte for this node. NUL for word end *\/$/;"	m	struct:wordnode_S	file:	access:public
wn_child	vim/vim/src/spellfile.c	/^    wordnode_T	*wn_child;	\/* child (next byte in word) *\/$/;"	m	struct:wordnode_S	file:	access:public
wn_flags	vim/vim/src/spellfile.c	/^    short_u	wn_flags;	\/* WF_ flags *\/$/;"	m	struct:wordnode_S	file:	access:public
wn_nr	vim/vim/src/spellfile.c	/^    int		wn_nr;		\/* sequence nr for printing *\/$/;"	m	struct:wordnode_S	file:	access:public
wn_refs	vim/vim/src/spellfile.c	/^    int		wn_refs;	\/* Nr. of references to this node.  Only$/;"	m	struct:wordnode_S	file:	access:public
wn_region	vim/vim/src/spellfile.c	/^    short	wn_region;	\/* region mask *\/$/;"	m	struct:wordnode_S	file:	access:public
wn_sibling	vim/vim/src/spellfile.c	/^    wordnode_T  *wn_sibling;	\/* next sibling (alternate byte in word,$/;"	m	struct:wordnode_S	file:	access:public
wn_u1	vim/vim/src/spellfile.c	/^    } wn_u1;$/;"	m	struct:wordnode_S	typeref:union:wordnode_S::__anon5	file:	access:public
wn_u2	vim/vim/src/spellfile.c	/^    } wn_u2;$/;"	m	struct:wordnode_S	typeref:union:wordnode_S::__anon6	file:	access:public
wnode	vim/vim/src/spellfile.c	/^	wordnode_T *wnode;	\/* parent node that will write this node *\/$/;"	m	union:wordnode_S::__anon6	file:	access:public
wo_arab	vim/vim/src/structs.h	/^    int		wo_arab;$/;"	m	struct:__anon164	access:public
wo_bri	vim/vim/src/structs.h	/^    int		wo_bri;$/;"	m	struct:__anon164	access:public
wo_briopt	vim/vim/src/structs.h	/^    char_u	*wo_briopt;$/;"	m	struct:__anon164	access:public
wo_cc	vim/vim/src/structs.h	/^    char_u	*wo_cc;$/;"	m	struct:__anon164	access:public
wo_cocu	vim/vim/src/structs.h	/^    char_u	*wo_cocu;		\/* 'concealcursor' *\/$/;"	m	struct:__anon164	access:public
wo_cole	vim/vim/src/structs.h	/^    long	wo_cole;		\/* 'conceallevel' *\/$/;"	m	struct:__anon164	access:public
wo_crb	vim/vim/src/structs.h	/^    int		wo_crb;$/;"	m	struct:__anon164	access:public
wo_crb_save	vim/vim/src/structs.h	/^    int		wo_crb_save;	\/* 'cursorbind' state saved for diff mode*\/$/;"	m	struct:__anon164	access:public
wo_cuc	vim/vim/src/structs.h	/^    int		wo_cuc;$/;"	m	struct:__anon164	access:public
wo_cul	vim/vim/src/structs.h	/^    int		wo_cul;$/;"	m	struct:__anon164	access:public
wo_diff	vim/vim/src/structs.h	/^    int		wo_diff;$/;"	m	struct:__anon164	access:public
wo_diff_saved	vim/vim/src/structs.h	/^    int		wo_diff_saved; \/* options were saved for starting diff mode *\/$/;"	m	struct:__anon164	access:public
wo_fdc	vim/vim/src/structs.h	/^    long	wo_fdc;$/;"	m	struct:__anon164	access:public
wo_fdc_save	vim/vim/src/structs.h	/^    int		wo_fdc_save;$/;"	m	struct:__anon164	access:public
wo_fde	vim/vim/src/structs.h	/^    char_u	*wo_fde;$/;"	m	struct:__anon164	access:public
wo_fdi	vim/vim/src/structs.h	/^    char_u	*wo_fdi;$/;"	m	struct:__anon164	access:public
wo_fdl	vim/vim/src/structs.h	/^    long	wo_fdl;$/;"	m	struct:__anon164	access:public
wo_fdl_save	vim/vim/src/structs.h	/^    int		wo_fdl_save;$/;"	m	struct:__anon164	access:public
wo_fdm	vim/vim/src/structs.h	/^    char_u	*wo_fdm;$/;"	m	struct:__anon164	access:public
wo_fdm_save	vim/vim/src/structs.h	/^    char_u	*wo_fdm_save;$/;"	m	struct:__anon164	access:public
wo_fdn	vim/vim/src/structs.h	/^    long	wo_fdn;$/;"	m	struct:__anon164	access:public
wo_fdt	vim/vim/src/structs.h	/^    char_u	*wo_fdt;$/;"	m	struct:__anon164	access:public
wo_fen	vim/vim/src/structs.h	/^    int		wo_fen;$/;"	m	struct:__anon164	access:public
wo_fen_save	vim/vim/src/structs.h	/^    int		wo_fen_save;$/;"	m	struct:__anon164	access:public
wo_fml	vim/vim/src/structs.h	/^    long	wo_fml;$/;"	m	struct:__anon164	access:public
wo_fmr	vim/vim/src/structs.h	/^    char_u	*wo_fmr;$/;"	m	struct:__anon164	access:public
wo_lbr	vim/vim/src/structs.h	/^    int		wo_lbr;$/;"	m	struct:__anon164	access:public
wo_list	vim/vim/src/structs.h	/^    int		wo_list;$/;"	m	struct:__anon164	access:public
wo_nu	vim/vim/src/structs.h	/^    int		wo_nu;$/;"	m	struct:__anon164	access:public
wo_nuw	vim/vim/src/structs.h	/^    long	wo_nuw;$/;"	m	struct:__anon164	access:public
wo_pvw	vim/vim/src/structs.h	/^    int		wo_pvw;$/;"	m	struct:__anon164	access:public
wo_rl	vim/vim/src/structs.h	/^    int		wo_rl;$/;"	m	struct:__anon164	access:public
wo_rlc	vim/vim/src/structs.h	/^    char_u	*wo_rlc;$/;"	m	struct:__anon164	access:public
wo_rnu	vim/vim/src/structs.h	/^    int		wo_rnu;$/;"	m	struct:__anon164	access:public
wo_scb	vim/vim/src/structs.h	/^    int		wo_scb;$/;"	m	struct:__anon164	access:public
wo_scb_save	vim/vim/src/structs.h	/^    int		wo_scb_save;	\/* 'scrollbind' saved for diff mode*\/$/;"	m	struct:__anon164	access:public
wo_scl	vim/vim/src/structs.h	/^    char_u	*wo_scl;$/;"	m	struct:__anon164	access:public
wo_scr	vim/vim/src/structs.h	/^    long	wo_scr;$/;"	m	struct:__anon164	access:public
wo_scriptID	vim/vim/src/structs.h	/^    int		wo_scriptID[WV_COUNT];	\/* SIDs for window-local options *\/$/;"	m	struct:__anon164	access:public
wo_spell	vim/vim/src/structs.h	/^    int		wo_spell;$/;"	m	struct:__anon164	access:public
wo_stl	vim/vim/src/structs.h	/^    char_u	*wo_stl;$/;"	m	struct:__anon164	access:public
wo_tk	vim/vim/src/structs.h	/^    char_u	*wo_tk;$/;"	m	struct:__anon164	access:public
wo_tms	vim/vim/src/structs.h	/^    char_u	*wo_tms;$/;"	m	struct:__anon164	access:public
wo_wfh	vim/vim/src/structs.h	/^    int		wo_wfh;$/;"	m	struct:__anon164	access:public
wo_wfw	vim/vim/src/structs.h	/^    int		wo_wfw;$/;"	m	struct:__anon164	access:public
wo_wrap	vim/vim/src/structs.h	/^    int		wo_wrap;$/;"	m	struct:__anon164	access:public
wo_wrap_save	vim/vim/src/structs.h	/^    int		wo_wrap_save;	\/* 'wrap' state saved for diff mode*\/$/;"	m	struct:__anon164	access:public
word_end_col	vim/vim/src/vim.h	/^    short_u	word_end_col;$/;"	m	struct:VimClipboard	access:public
word_start_col	vim/vim/src/vim.h	/^    short_u	word_start_col;$/;"	m	struct:VimClipboard	access:public
wordcount_S	vim/vim/src/spell.c	/^typedef struct wordcount_S$/;"	s	file:
wordcount_S::wc_count	vim/vim/src/spell.c	/^    short_u	wc_count;	    \/* nr of times word was seen *\/$/;"	m	struct:wordcount_S	file:	access:public
wordcount_S::wc_word	vim/vim/src/spell.c	/^    char_u	wc_word[1];	    \/* word, actually longer *\/$/;"	m	struct:wordcount_S	file:	access:public
wordcount_T	vim/vim/src/spell.c	/^} wordcount_T;$/;"	t	typeref:struct:wordcount_S	file:
wordnode_S	vim/vim/src/spellfile.c	/^struct wordnode_S$/;"	s	file:
wordnode_S::__anon5::hashkey	vim/vim/src/spellfile.c	/^	char_u	hashkey[6];	\/* the hash key, only used while compressing *\/$/;"	m	union:wordnode_S::__anon5	file:	access:public
wordnode_S::__anon5::index	vim/vim/src/spellfile.c	/^	int	index;		\/* index in written nodes (valid after first$/;"	m	union:wordnode_S::__anon5	file:	access:public
wordnode_S::__anon6::next	vim/vim/src/spellfile.c	/^	wordnode_T *next;	\/* next node with same hash key *\/$/;"	m	union:wordnode_S::__anon6	file:	access:public
wordnode_S::__anon6::wnode	vim/vim/src/spellfile.c	/^	wordnode_T *wnode;	\/* parent node that will write this node *\/$/;"	m	union:wordnode_S::__anon6	file:	access:public
wordnode_S::wn_affixID	vim/vim/src/spellfile.c	/^    char_u	wn_affixID;	\/* supported\/required prefix ID or 0 *\/$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_byte	vim/vim/src/spellfile.c	/^    char_u	wn_byte;	\/* Byte for this node. NUL for word end *\/$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_child	vim/vim/src/spellfile.c	/^    wordnode_T	*wn_child;	\/* child (next byte in word) *\/$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_flags	vim/vim/src/spellfile.c	/^    short_u	wn_flags;	\/* WF_ flags *\/$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_nr	vim/vim/src/spellfile.c	/^    int		wn_nr;		\/* sequence nr for printing *\/$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_refs	vim/vim/src/spellfile.c	/^    int		wn_refs;	\/* Nr. of references to this node.  Only$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_region	vim/vim/src/spellfile.c	/^    short	wn_region;	\/* region mask *\/$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_sibling	vim/vim/src/spellfile.c	/^    wordnode_T  *wn_sibling;	\/* next sibling (alternate byte in word,$/;"	m	struct:wordnode_S	file:	access:public
wordnode_S::wn_u1	vim/vim/src/spellfile.c	/^    } wn_u1;$/;"	m	struct:wordnode_S	typeref:union:wordnode_S::__anon5	file:	access:public
wordnode_S::wn_u2	vim/vim/src/spellfile.c	/^    } wn_u2;$/;"	m	struct:wordnode_S	typeref:union:wordnode_S::__anon6	file:	access:public
wordnode_T	vim/vim/src/spellfile.c	/^typedef struct wordnode_S wordnode_T;$/;"	t	typeref:struct:wordnode_S	file:
wordtree_alloc	vim/vim/src/spellfile.c	/^static wordnode_T *wordtree_alloc(spellinfo_T *spin);$/;"	p	file:	signature:(spellinfo_T *spin)
wordtree_alloc	vim/vim/src/spellfile.c	/^wordtree_alloc(spellinfo_T *spin)$/;"	f	file:	signature:(spellinfo_T *spin)
wordtree_compress	vim/vim/src/spellfile.c	/^static void wordtree_compress(spellinfo_T *spin, wordnode_T *root);$/;"	p	file:	signature:(spellinfo_T *spin, wordnode_T *root)
wordtree_compress	vim/vim/src/spellfile.c	/^wordtree_compress(spellinfo_T *spin, wordnode_T *root)$/;"	f	file:	signature:(spellinfo_T *spin, wordnode_T *root)
works_inplace	vim/vim/src/crypt.c	/^    int	    works_inplace; \/* encryption\/decryption can be done in-place *\/$/;"	m	struct:__anon214	file:	access:public
workshopHotKeysEnabled	vim/vim/src/workshop.c	/^static Boolean	 workshopHotKeysEnabled = False;$/;"	v	file:
workshopInitDone	vim/vim/src/workshop.c	/^static Boolean	 workshopInitDone = False;$/;"	v	file:
workshop_add_balloon_eval_area	vim/vim/src/integration.h	/^void workshop_add_balloon_eval_area(void *frame, void *window, Widget widget);$/;"	p	signature:(void *frame, void *window, Widget widget)
workshop_add_frame	vim/vim/src/integration.h	/^void *workshop_add_frame(void *frame, Widget form,$/;"	p	signature:(void *frame, Widget form, Widget top, Widget bottom, Widget footer, Widget menu)
workshop_add_mark_type	vim/vim/src/integration.h	/^void workshop_add_mark_type(int idx, char *colorspec, char *sign);$/;"	p	signature:(int idx, char *colorspec, char *sign)
workshop_add_mark_type	vim/vim/src/workshop.c	/^workshop_add_mark_type($/;"	f	signature:( int idx, char *colorspec, char *sign)
workshop_balloon_delay	vim/vim/src/workshop.c	/^workshop_balloon_delay($/;"	f	signature:( int delay)
workshop_balloon_mode	vim/vim/src/workshop.c	/^workshop_balloon_mode($/;"	f	signature:( Boolean on)
workshop_beval_cb	vim/vim/src/workshop.c	/^void		 workshop_beval_cb(BalloonEval *, int);$/;"	p	file:	signature:(BalloonEval *, int)
workshop_beval_cb	vim/vim/src/workshop.c	/^workshop_beval_cb($/;"	f	signature:( BalloonEval *beval, int state)
workshop_change_mark_type	vim/vim/src/integration.h	/^void workshop_change_mark_type(char *filename, int markId, int type);$/;"	p	signature:(char *filename, int markId, int type)
workshop_change_mark_type	vim/vim/src/workshop.c	/^workshop_change_mark_type($/;"	f	signature:( char *filename, int markId, int idx)
workshop_connect	vim/vim/src/integration.c	/^void	workshop_connect(XtAppContext context)$/;"	f	signature:(XtAppContext context)
workshop_connect	vim/vim/src/integration.h	/^void workshop_connect(XtAppContext context);$/;"	p	signature:(XtAppContext context)
workshop_connection_closed	vim/vim/src/integration.c	/^static void workshop_connection_closed(void);$/;"	p	file:	signature:(void)
workshop_connection_closed	vim/vim/src/integration.c	/^workshop_connection_closed(void)$/;"	f	signature:(void)
workshop_delete_frame	vim/vim/src/integration.h	/^void workshop_delete_frame(void *handle);$/;"	p	signature:(void *handle)
workshop_delete_mark	vim/vim/src/integration.h	/^void workshop_delete_mark(char *filename, int markId);$/;"	p	signature:(char *filename, int markId)
workshop_delete_mark	vim/vim/src/workshop.c	/^workshop_delete_mark($/;"	f	signature:( char *filename, int markId)
workshop_disconnect	vim/vim/src/integration.c	/^static void workshop_disconnect(void);$/;"	p	file:	signature:(void)
workshop_disconnect	vim/vim/src/integration.c	/^void	workshop_disconnect(void)$/;"	f	signature:(void)
workshop_file_closed_lineno	vim/vim/src/integration.c	/^void workshop_file_closed_lineno(char *filename, int lineno)$/;"	f	signature:(char *filename, int lineno)
workshop_file_closed_lineno	vim/vim/src/integration.h	/^void workshop_file_closed_lineno(char *filename, int line);$/;"	p	signature:(char *filename, int line)
workshop_file_opened	vim/vim/src/integration.c	/^void workshop_file_opened(char *filename, int readOnly)$/;"	f	signature:(char *filename, int readOnly)
workshop_file_opened	vim/vim/src/integration.h	/^void workshop_file_opened(char *filename, int readOnly);$/;"	p	signature:(char *filename, int readOnly)
workshop_file_saved	vim/vim/src/integration.c	/^void workshop_file_saved(char *filename)$/;"	f	signature:(char *filename)
workshop_file_saved	vim/vim/src/integration.h	/^void workshop_file_saved(char *filename);$/;"	p	signature:(char *filename)
workshop_footer_message	vim/vim/src/integration.h	/^void workshop_footer_message(char *message, int severity);$/;"	p	signature:(char *message, int severity)
workshop_footer_message	vim/vim/src/workshop.c	/^workshop_footer_message($/;"	f	signature:( char *message, int severity UNUSED)
workshop_frame_moved	vim/vim/src/integration.c	/^void workshop_frame_moved(int new_x, int new_y, int new_w, int new_h)$/;"	f	signature:(int new_x, int new_y, int new_w, int new_h)
workshop_frame_moved	vim/vim/src/integration.h	/^void workshop_frame_moved(int new_x, int new_y, int new_w, int new_h);$/;"	p	signature:(int new_x, int new_y, int new_w, int new_h)
workshop_frame_sensitivities	vim/vim/src/workshop.c	/^workshop_frame_sensitivities($/;"	f	signature:( VerbSense *vs)
workshop_front_file	vim/vim/src/integration.h	/^void workshop_front_file(char *filename);$/;"	p	signature:(char *filename)
workshop_front_file	vim/vim/src/workshop.c	/^workshop_front_file($/;"	f	signature:( char *filename UNUSED)
workshop_get_balloon_text	vim/vim/src/integration.h	/^int workshop_get_balloon_text(Position x, Position y,$/;"	p	signature:(Position x, Position y, void *frame, void *window, char **filename, int *line, char **text, int *mouseIndex)
workshop_get_editor_name	vim/vim/src/integration.h	/^char *workshop_get_editor_name();$/;"	p
workshop_get_editor_name	vim/vim/src/workshop.c	/^workshop_get_editor_name(void)$/;"	f	signature:(void)
workshop_get_editor_version	vim/vim/src/integration.h	/^char *workshop_get_editor_version();$/;"	p
workshop_get_editor_version	vim/vim/src/workshop.c	/^workshop_get_editor_version(void)$/;"	f	signature:(void)
workshop_get_font_height	vim/vim/src/integration.h	/^int workshop_get_font_height(void);$/;"	p	signature:(void)
workshop_get_font_height	vim/vim/src/workshop.c	/^workshop_get_font_height(void)$/;"	f	signature:(void)
workshop_get_mark_lineno	vim/vim/src/integration.h	/^int workshop_get_mark_lineno(char *filename, int markId);$/;"	p	signature:(char *filename, int markId)
workshop_get_mark_lineno	vim/vim/src/workshop.c	/^workshop_get_mark_lineno($/;"	f	signature:( char *filename, int markId)
workshop_get_positions	vim/vim/src/integration.h	/^int workshop_get_positions(void *frame,$/;"	p	signature:(void *frame, char **filename, int *curLine, int *curCol, int *selStartLine, int *selStartCol, int *selEndLine, int *selEndCol, int *selLength, char **selection)
workshop_get_positions	vim/vim/src/workshop.c	/^workshop_get_positions($/;"	f	signature:( void *clientData UNUSED, char **filename, int *curLine, int *curCol, int *selStartLine, int *selStartCol, int *selEndLine, int *selEndCol, int *selLength, char **selection)
workshop_get_width_height	vim/vim/src/integration.c	/^Boolean workshop_get_width_height(int *width, int *height)$/;"	f	signature:(int *width, int *height)
workshop_get_width_height	vim/vim/src/integration.h	/^Boolean workshop_get_width_height(int *, int *);$/;"	p	signature:(int *, int *)
workshop_goto_line	vim/vim/src/integration.h	/^void workshop_goto_line(char *filename, int lineno);$/;"	p	signature:(char *filename, int lineno)
workshop_goto_line	vim/vim/src/workshop.c	/^workshop_goto_line($/;"	f	signature:( char *filename, int lineno)
workshop_goto_mark	vim/vim/src/integration.h	/^void workshop_goto_mark(char *filename, int markId, char *message);$/;"	p	signature:(char *filename, int markId, char *message)
workshop_goto_mark	vim/vim/src/workshop.c	/^workshop_goto_mark($/;"	f	signature:( char *filename, int markId, char *message)
workshop_hotkey_pressed	vim/vim/src/integration.h	/^void workshop_hotkey_pressed(void *frame, void *clientData);$/;"	p	signature:(void *frame, void *clientData)
workshop_hotkeys	vim/vim/src/workshop.c	/^void		 workshop_hotkeys(Boolean);$/;"	p	file:
workshop_hotkeys	vim/vim/src/workshop.c	/^workshop_hotkeys($/;"	f	signature:( Boolean on)
workshop_init	vim/vim/src/workshop.c	/^workshop_init(void)$/;"	f	signature:(void)
workshop_load_file	vim/vim/src/integration.h	/^void workshop_load_file(char *filename, int line, char *frameid);$/;"	p	signature:(char *filename, int line, char *frameid)
workshop_load_file	vim/vim/src/workshop.c	/^workshop_load_file($/;"	f	signature:( char *filename, int line, char *frameid UNUSED)
workshop_mark_batch_begin	vim/vim/src/integration.h	/^void workshop_mark_batch_begin();$/;"	p
workshop_mark_batch_end	vim/vim/src/integration.h	/^void workshop_mark_batch_end();$/;"	p
workshop_maximize	vim/vim/src/integration.h	/^void workshop_maximize();$/;"	p
workshop_maximize	vim/vim/src/workshop.c	/^workshop_maximize(void)$/;"	f	signature:(void)
workshop_maximize_shell	vim/vim/src/integration.c	/^void workshop_maximize_shell(Widget shell)$/;"	f	signature:(Widget shell)
workshop_maximize_shell	vim/vim/src/integration.h	/^void workshop_maximize_shell(Widget shell);$/;"	p	signature:(Widget shell)
workshop_menu_begin	vim/vim/src/workshop.c	/^workshop_menu_begin($/;"	f	signature:( char *label)
workshop_menu_end	vim/vim/src/workshop.c	/^workshop_menu_end(void)$/;"	f	signature:(void)
workshop_menu_item	vim/vim/src/workshop.c	/^workshop_menu_item($/;"	f	signature:( char *label, char *verb, char *accelerator UNUSED, char *acceleratorText, char *name UNUSED, char *filepos UNUSED, char *sensitive)
workshop_minimize	vim/vim/src/integration.h	/^void workshop_minimize();$/;"	p
workshop_minimize	vim/vim/src/workshop.c	/^workshop_minimize(void)$/;"	f	signature:(void)
workshop_minimize_shell	vim/vim/src/integration.c	/^workshop_minimize_shell(Widget shell)$/;"	f	signature:(Widget shell)
workshop_minimize_shell	vim/vim/src/integration.h	/^void workshop_minimize_shell(Widget shell);$/;"	p	signature:(Widget shell)
workshop_moved_marks	vim/vim/src/integration.h	/^void workshop_moved_marks(char *filename);$/;"	p	signature:(char *filename)
workshop_moved_marks	vim/vim/src/workshop.c	/^workshop_moved_marks(char *filename UNUSED)$/;"	f	signature:(char *filename UNUSED)
workshop_perform_verb	vim/vim/src/integration.c	/^void workshop_perform_verb(char *verb, void *clientData)$/;"	f	signature:(char *verb, void *clientData)
workshop_perform_verb	vim/vim/src/integration.h	/^void workshop_perform_verb(char *verb, void *clientData);$/;"	p	signature:(char *verb, void *clientData)
workshop_postinit	vim/vim/src/workshop.c	/^workshop_postinit(void)$/;"	f	signature:(void)
workshop_quit	vim/vim/src/integration.h	/^void workshop_quit();$/;"	p
workshop_quit	vim/vim/src/workshop.c	/^workshop_quit(void)$/;"	f	signature:(void)
workshop_reconfigure_frame	vim/vim/src/integration.h	/^void workshop_reconfigure_frame(void *frame);$/;"	p	signature:(void *frame)
workshop_register_hotkey	vim/vim/src/integration.h	/^void workshop_register_hotkey(Modifiers modifiers, KeySym keysym,$/;"	p	signature:(Modifiers modifiers, KeySym keysym, void *clientData)
workshop_reload_file	vim/vim/src/integration.h	/^void workshop_reload_file(char *filename, int line);$/;"	p	signature:(char *filename, int line)
workshop_reload_file	vim/vim/src/workshop.c	/^workshop_reload_file($/;"	f	signature:( char *filename, int line)
workshop_remove_balloon_eval_area	vim/vim/src/integration.h	/^void workshop_remove_balloon_eval_area(void *frame, void *window, Widget widget);$/;"	p	signature:(void *frame, void *window, Widget widget)
workshop_save_file	vim/vim/src/integration.h	/^void workshop_save_file(char *filename);$/;"	p	signature:(char *filename)
workshop_save_file	vim/vim/src/workshop.c	/^workshop_save_file($/;"	f	signature:( char *filename)
workshop_save_files	vim/vim/src/integration.h	/^void workshop_save_files();$/;"	p
workshop_save_files	vim/vim/src/workshop.c	/^workshop_save_files(void)$/;"	f	signature:(void)
workshop_save_sensitivity	vim/vim/src/workshop.c	/^workshop_save_sensitivity(char *filename UNUSED)$/;"	f	signature:(char *filename UNUSED)
workshop_send_message	vim/vim/src/integration.c	/^void workshop_send_message(char *buf)$/;"	f	signature:(char *buf)
workshop_send_message	vim/vim/src/integration.h	/^void workshop_send_message(char *buf);$/;"	p	signature:(char *buf)
workshop_sensitivity	vim/vim/src/integration.c	/^static void workshop_sensitivity(int num, char *table);$/;"	p	file:	signature:(int num, char *table)
workshop_sensitivity	vim/vim/src/integration.c	/^void workshop_sensitivity(int num, char *table)$/;"	f	signature:(int num, char *table)
workshop_set_mark	vim/vim/src/integration.h	/^void workshop_set_mark(char *filename, int lineno, int markId, int type);$/;"	p	signature:(char *filename, int lineno, int markId, int type)
workshop_set_mark	vim/vim/src/workshop.c	/^workshop_set_mark($/;"	f	signature:( char *filename, int lineno, int markId, int idx)
workshop_set_option	vim/vim/src/integration.h	/^void workshop_set_option(char *name, char *value);$/;"	p	signature:(char *name, char *value)
workshop_set_option	vim/vim/src/workshop.c	/^workshop_set_option($/;"	f	signature:( char *option, char *value)
workshop_set_option_first	vim/vim/src/integration.c	/^static void workshop_set_option_first(char *name, char *value);$/;"	p	file:	signature:(char *name, char *value)
workshop_set_option_first	vim/vim/src/integration.c	/^void workshop_set_option_first(char *name, char *value)$/;"	f	signature:(char *name, char *value)
workshop_show_balloon_tip	vim/vim/src/workshop.c	/^workshop_show_balloon_tip($/;"	f	signature:( char *tip)
workshop_show_file	vim/vim/src/integration.h	/^void workshop_show_file(char *filename);$/;"	p	signature:(char *filename)
workshop_show_file	vim/vim/src/workshop.c	/^workshop_show_file($/;"	f	signature:( char *filename)
workshop_submenu_begin	vim/vim/src/workshop.c	/^workshop_submenu_begin($/;"	f	signature:( char *label)
workshop_submenu_end	vim/vim/src/workshop.c	/^workshop_submenu_end(void)$/;"	f	signature:(void)
workshop_test_getcurrentfile	vim/vim/src/integration.h	/^char *workshop_test_getcurrentfile();$/;"	p
workshop_test_getcurrentfile	vim/vim/src/workshop.c	/^workshop_test_getcurrentfile(void)$/;"	f	signature:(void)
workshop_test_getcursorcol	vim/vim/src/integration.h	/^int workshop_test_getcursorcol();$/;"	p
workshop_test_getcursorcol	vim/vim/src/workshop.c	/^workshop_test_getcursorcol(void)$/;"	f	signature:(void)
workshop_test_getcursorrow	vim/vim/src/integration.h	/^int workshop_test_getcursorrow();$/;"	p
workshop_test_getcursorrow	vim/vim/src/workshop.c	/^workshop_test_getcursorrow(void)$/;"	f	signature:(void)
workshop_test_getcursorrowtext	vim/vim/src/integration.h	/^char *workshop_test_getcursorrowtext();$/;"	p
workshop_test_getcursorrowtext	vim/vim/src/workshop.c	/^workshop_test_getcursorrowtext(void)$/;"	f	signature:(void)
workshop_test_getselectedtext	vim/vim/src/integration.h	/^char *workshop_test_getselectedtext();$/;"	p
workshop_test_getselectedtext	vim/vim/src/workshop.c	/^workshop_test_getselectedtext(void)$/;"	f	signature:(void)
workshop_toolbar_begin	vim/vim/src/workshop.c	/^workshop_toolbar_begin(void)$/;"	f	signature:(void)
workshop_toolbar_button	vim/vim/src/workshop.c	/^workshop_toolbar_button($/;"	f	signature:( char *label, char *verb, char *senseVerb UNUSED, char *filepos UNUSED, char *help, char *sense, char *file, char *left)
workshop_toolbar_end	vim/vim/src/workshop.c	/^workshop_toolbar_end(void)$/;"	f	signature:(void)
workshop_unregister_hotkey	vim/vim/src/integration.h	/^void workshop_unregister_hotkey(Modifiers modifiers, KeySym keysym,$/;"	p	signature:(Modifiers modifiers, KeySym keysym, void *clientData)
wp	vim/vim/src/fold.c	/^    win_T	*wp;		\/* window *\/$/;"	m	struct:__anon95	file:	access:public
wp	vim/vim/src/gui.h	/^    win_T	*wp;		\/* Scrollbar's window, NULL for bottom *\/$/;"	m	struct:GuiScrollbar	access:public
writePortInFile	vim/vim/src/testdir/test_channel.py	/^def writePortInFile(port):$/;"	f	access:public
writePortInFile	vim/vim/src/testdir/test_netbeans.py	/^def writePortInFile(port):$/;"	f	access:public
write_buf_line	vim/vim/src/channel.c	/^write_buf_line(buf_T *buf, linenr_T lnum, channel_T *channel)$/;"	f	file:	signature:(buf_T *buf, linenr_T lnum, channel_T *channel)
write_buffer_marks	vim/vim/src/mark.c	/^write_buffer_marks(buf_T *buf, FILE *fp_out)$/;"	f	file:	signature:(buf_T *buf, FILE *fp_out)
write_chars	vim/vim/src/os_win32.c	/^static DWORD write_chars(char_u *pchBuf, DWORD cbToWrite);$/;"	p	file:	signature:(char_u *pchBuf, DWORD cbToWrite)
write_chars	vim/vim/src/os_win32.c	/^write_chars($/;"	f	file:	signature:( char_u *pchBuf, DWORD cbToWrite)
write_eintr	vim/vim/src/fileio.c	/^write_eintr(int fd, void *buf, size_t bufsize)$/;"	f	signature:(int fd, void *buf, size_t bufsize)
write_eintr	vim/vim/src/vim.h	1759;"	d
write_list	vim/vim/src/list.c	/^write_list(FILE *fd, list_T *list, int binary)$/;"	f	signature:(FILE *fd, list_T *list, int binary)
write_lnum_adjust	vim/vim/src/fileio.c	/^write_lnum_adjust(linenr_T offset)$/;"	f	signature:(linenr_T offset)
write_one_filemark	vim/vim/src/mark.c	/^static void write_one_filemark(FILE *fp, xfmark_T *fm, int c1, int c2);$/;"	p	file:	signature:(FILE *fp, xfmark_T *fm, int c1, int c2)
write_one_filemark	vim/vim/src/mark.c	/^write_one_filemark($/;"	f	file:	signature:( FILE *fp, xfmark_T *fm, int c1, int c2)
write_one_mark	vim/vim/src/mark.c	/^write_one_mark(FILE *fp_out, int c, pos_T *pos)$/;"	f	file:	signature:(FILE *fp_out, int c, pos_T *pos)
write_output	vim/vim/src/if_py_both.h	/^write_output(OutputObject *self, PyObject *string)$/;"	f	signature:(OutputObject *self, PyObject *string)
write_reg_contents	vim/vim/src/ops.c	/^write_reg_contents($/;"	f	signature:( int name, char_u *str, int maxlen, int must_append)
write_reg_contents_ex	vim/vim/src/ops.c	/^write_reg_contents_ex($/;"	f	signature:( int name, char_u *str, int maxlen, int must_append, int yank_type, long block_len)
write_reg_contents_lst	vim/vim/src/ops.c	/^write_reg_contents_lst($/;"	f	signature:( int name, char_u **strings, int maxlen UNUSED, int must_append, int yank_type, long block_len)
write_session_file	vim/vim/src/gui_gtk_x11.c	/^write_session_file(char_u *filename)$/;"	f	file:	signature:(char_u *filename)
write_spell_prefcond	vim/vim/src/spellfile.c	/^static int write_spell_prefcond(FILE *fd, garray_T *gap);$/;"	p	file:	signature:(FILE *fd, garray_T *gap)
write_spell_prefcond	vim/vim/src/spellfile.c	/^write_spell_prefcond(FILE *fd, garray_T *gap)$/;"	f	file:	signature:(FILE *fd, garray_T *gap)
write_string	vim/vim/src/json.c	/^write_string(garray_T *gap, char_u *str)$/;"	f	file:	signature:(garray_T *gap, char_u *str)
write_to_term	vim/vim/src/terminal.c	/^write_to_term(buf_T *buffer, char_u *msg, channel_T *channel)$/;"	f	signature:(buf_T *buffer, char_u *msg, channel_T *channel)
write_vim_spell	vim/vim/src/spellfile.c	/^static int write_vim_spell(spellinfo_T *spin, char_u *fname);$/;"	p	file:	signature:(spellinfo_T *spin, char_u *fname)
write_vim_spell	vim/vim/src/spellfile.c	/^write_vim_spell(spellinfo_T *spin, char_u *fname)$/;"	f	file:	signature:(spellinfo_T *spin, char_u *fname)
write_viminfo	vim/vim/src/ex_cmds.c	/^write_viminfo(char_u *file, int forceit)$/;"	f	signature:(char_u *file, int forceit)
write_viminfo_barlines	vim/vim/src/ex_cmds.c	/^static void write_viminfo_barlines(vir_T *virp, FILE *fp_out);$/;"	p	file:	signature:(vir_T *virp, FILE *fp_out)
write_viminfo_barlines	vim/vim/src/ex_cmds.c	/^write_viminfo_barlines(vir_T *virp, FILE *fp_out)$/;"	f	file:	signature:(vir_T *virp, FILE *fp_out)
write_viminfo_bufferlist	vim/vim/src/buffer.c	/^write_viminfo_bufferlist(FILE *fp)$/;"	f	signature:(FILE *fp)
write_viminfo_filemarks	vim/vim/src/mark.c	/^write_viminfo_filemarks(FILE *fp)$/;"	f	signature:(FILE *fp)
write_viminfo_history	vim/vim/src/ex_getln.c	/^write_viminfo_history(FILE *fp, int merge)$/;"	f	signature:(FILE *fp, int merge)
write_viminfo_marks	vim/vim/src/mark.c	/^write_viminfo_marks(FILE *fp_out, garray_T *buflist)$/;"	f	signature:(FILE *fp_out, garray_T *buflist)
write_viminfo_registers	vim/vim/src/ops.c	/^write_viminfo_registers(FILE *fp)$/;"	f	signature:(FILE *fp)
write_viminfo_search_pattern	vim/vim/src/search.c	/^write_viminfo_search_pattern(FILE *fp)$/;"	f	signature:(FILE *fp)
write_viminfo_sub_string	vim/vim/src/ex_cmds.c	/^write_viminfo_sub_string(FILE *fp)$/;"	f	signature:(FILE *fp)
write_viminfo_varlist	vim/vim/src/eval.c	/^write_viminfo_varlist(FILE *fp)$/;"	f	signature:(FILE *fp)
write_viminfo_version	vim/vim/src/ex_cmds.c	/^static void write_viminfo_version(FILE *fp_out);$/;"	p	file:	signature:(FILE *fp_out)
write_viminfo_version	vim/vim/src/ex_cmds.c	/^write_viminfo_version(FILE *fp_out)$/;"	f	file:	signature:(FILE *fp_out)
writefn	vim/vim/src/if_py_both.h	/^typedef void (*writefn)(char_u *);$/;"	t
writer	vim/vim/src/if_py_both.h	/^writer(writefn fn, char_u *str, PyInt n)$/;"	f	signature:(writefn fn, char_u *str, PyInt n)
ws_debug	vim/vim/src/wsdebug.c	/^FILE		*ws_debug = NULL;$/;"	v
ws_dlevel	vim/vim/src/wsdebug.c	/^u_int		 ws_dlevel = 0;		\/* ws_debug verbosity level *\/$/;"	v
wsdebug	vim/vim/src/wsdebug.c	/^void		 wsdebug(char *, ...);$/;"	p	file:	signature:(char *, ...)
wsdebug	vim/vim/src/wsdebug.c	/^wsdebug($/;"	f	signature:( char *fmt, ...)
wsdebug	vim/vim/src/wsdebug.h	/^void		 wsdebug(char *, ...);$/;"	p	signature:(char *, ...)
wsdebug	vim/vim/src/wsdebug.h	/^wsdebug($/;"	f	signature:( char *fmt, ...)
wsdebug_log_init	vim/vim/src/wsdebug.c	/^wsdebug_log_init($/;"	f	signature:( char *log_var, char *level_var)
wsdebug_wait	vim/vim/src/wsdebug.c	/^void wsdebug_wait($/;"	f	signature:( u_int wait_flags, char *wait_var, u_int wait_secs)
wstat_symlink_aware	vim/vim/src/os_mswin.c	/^wstat_symlink_aware(const WCHAR *name, stat_T *stp)$/;"	f	file:	signature:(const WCHAR *name, stat_T *stp)
wstrace	vim/vim/src/wsdebug.c	/^void		 wstrace(char *, ...);$/;"	p	file:	signature:(char *, ...)
wstrace	vim/vim/src/wsdebug.c	/^wstrace($/;"	f	signature:( char *fmt, ...)
wstrace	vim/vim/src/wsdebug.h	/^void		 wstrace(char *, ...);$/;"	p	signature:(char *, ...)
wstrace	vim/vim/src/wsdebug.h	/^wstrace($/;"	f	signature:( char *fmt, ...)
wvsp_one	vim/vim/src/search.c	/^static void wvsp_one(FILE *fp, int idx, char *s, int sc);$/;"	p	file:	signature:(FILE *fp, int idx, char *s, int sc)
wvsp_one	vim/vim/src/search.c	/^wvsp_one($/;"	f	file:	signature:( FILE *fp, int idx, char *s, int sc)
wword	vim/vim/src/gui_gtk.c	/^    GtkWidget *wword;	\/* 'Whole word only' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
wword	vim/vim/src/gui_motif.c	/^    Widget wword;	\/* 'Exact match' check button *\/$/;"	m	struct:_SharedFindReplace	file:	access:public
wx	vim/vim/src/hardcopy.c	/^    int		wx;$/;"	m	struct:prt_ps_font_S	file:	access:public
x	vim/vim/src/gui_beval.h	/^    int			x;$/;"	m	struct:BalloonEvalStruct	access:public
x	vim/vim/src/gui_gtk_f.c	/^    gint x;		\/* relative subwidget x position *\/$/;"	m	struct:_GtkFormChild	file:	access:public
x	vim/vim/src/iid_ole.c	/^    unsigned long x;$/;"	m	struct:_IID	file:	access:public
x	vim/vim/src/os_vms.c	/^    }	x;$/;"	m	struct:__anon23	typeref:union:__anon23::__anon24	file:	access:public
x11_display	vim/vim/src/os_unix.c	/^Display	    *x11_display = NULL;$/;"	v
x11_export_final_selection	vim/vim/src/ops.c	/^x11_export_final_selection(void)$/;"	f	signature:(void)
x11_setup_atoms	vim/vim/src/ui.c	/^x11_setup_atoms(Display *dpy)$/;"	f	signature:(Display *dpy)
x11_setup_selection	vim/vim/src/ui.c	/^x11_setup_selection(Widget w)$/;"	f	signature:(Widget w)
x11_window	vim/vim/src/os_unix.c	/^Window	    x11_window = 0;$/;"	v
x_IOerror_check	vim/vim/src/os_unix.c	/^static int x_IOerror_check(Display *dpy);$/;"	p	file:	signature:(Display *dpy)
x_IOerror_check	vim/vim/src/os_unix.c	/^x_IOerror_check(Display *dpy UNUSED)$/;"	f	file:	signature:(Display *dpy UNUSED)
x_IOerror_handler	vim/vim/src/os_unix.c	/^static int x_IOerror_handler(Display *dpy);$/;"	p	file:	signature:(Display *dpy)
x_IOerror_handler	vim/vim/src/os_unix.c	/^x_IOerror_handler(Display *dpy UNUSED)$/;"	f	file:	signature:(Display *dpy UNUSED)
x_cmdqueue	vim/vim/src/if_xcmdsrv.c	/^struct x_cmdqueue$/;"	s	file:
x_cmdqueue::len	vim/vim/src/if_xcmdsrv.c	/^    long_u		len;$/;"	m	struct:x_cmdqueue	file:	access:public
x_cmdqueue::next	vim/vim/src/if_xcmdsrv.c	/^    struct x_cmdqueue	*next;$/;"	m	struct:x_cmdqueue	typeref:struct:x_cmdqueue::x_cmdqueue	file:	access:public
x_cmdqueue::prev	vim/vim/src/if_xcmdsrv.c	/^    struct x_cmdqueue	*prev;$/;"	m	struct:x_cmdqueue	typeref:struct:x_cmdqueue::x_cmdqueue	file:	access:public
x_cmdqueue::propInfo	vim/vim/src/if_xcmdsrv.c	/^    char_u		*propInfo;$/;"	m	struct:x_cmdqueue	file:	access:public
x_connect_to_server	vim/vim/src/os_unix.c	/^static int x_connect_to_server(void);$/;"	p	file:	signature:(void)
x_connect_to_server	vim/vim/src/os_unix.c	/^x_connect_to_server(void)$/;"	f	file:	signature:(void)
x_error_check	vim/vim/runtime/tools/xcmdsrv_client.c	/^static int	x_error_check(Display *dpy, XErrorEvent *error_event);$/;"	p	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_error_check	vim/vim/runtime/tools/xcmdsrv_client.c	/^x_error_check(Display *dpy, XErrorEvent *error_event)$/;"	f	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_error_check	vim/vim/src/if_xcmdsrv.c	/^static int	x_error_check(Display *dpy, XErrorEvent *error_event);$/;"	p	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_error_check	vim/vim/src/if_xcmdsrv.c	/^x_error_check(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)$/;"	f	file:	signature:(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)
x_error_check	vim/vim/src/os_unix.c	/^static int x_error_check(Display *dpy, XErrorEvent *error_event);$/;"	p	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_error_check	vim/vim/src/os_unix.c	/^x_error_check(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)$/;"	f	file:	signature:(Display *dpy UNUSED, XErrorEvent *error_event UNUSED)
x_error_handler	vim/vim/src/os_unix.c	/^static int x_error_handler(Display *dpy, XErrorEvent *error_event);$/;"	p	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_error_handler	vim/vim/src/os_unix.c	/^x_error_handler(Display *dpy, XErrorEvent *error_event)$/;"	f	file:	signature:(Display *dpy, XErrorEvent *error_event)
x_force_connect	vim/vim/src/globals.h	/^EXTERN int	x_force_connect INIT(= FALSE); \/* Do connect to X server.$/;"	v
x_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int x_hotspot;		\/* Returns the x hotspot's$/;"	m	struct:__anon93	access:public
x_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int x_hotspot;	\/* Returns the x hotspot's coordinate *\/$/;"	m	struct:__anon92	access:public
x_jump_env	vim/vim/src/globals.h	/^EXTERN JMP_BUF x_jump_env;$/;"	v
x_no_connect	vim/vim/src/globals.h	/^EXTERN int	x_no_connect INIT(= FALSE); \/* don't connect to X server *\/$/;"	v
x_queue_T	vim/vim/src/if_xcmdsrv.c	/^typedef struct x_cmdqueue x_queue_T;$/;"	t	typeref:struct:x_cmdqueue	file:
xfilemark	vim/vim/src/structs.h	/^typedef struct xfilemark$/;"	s
xfilemark::fmark	vim/vim/src/structs.h	/^    fmark_T	fmark;$/;"	m	struct:xfilemark	access:public
xfilemark::fname	vim/vim/src/structs.h	/^    char_u	*fname;		\/* file name, used when fnum == 0 *\/$/;"	m	struct:xfilemark	access:public
xfilemark::time_set	vim/vim/src/structs.h	/^    time_T	time_set;$/;"	m	struct:xfilemark	access:public
xfmark_T	vim/vim/src/structs.h	/^} xfmark_T;$/;"	t	typeref:struct:xfilemark
xic	vim/vim/src/globals.h	/^EXTERN GtkIMContext	*xic INIT(= NULL);$/;"	v
xic	vim/vim/src/globals.h	/^EXTERN XIC		xic INIT(= NULL);$/;"	v
xim_bg_color	vim/vim/src/globals.h	/^EXTERN guicolor_T	xim_bg_color INIT(= INVALCOLOR);$/;"	v
xim_changed_while_preediting	vim/vim/src/globals.h	/^EXTERN int		xim_changed_while_preediting INIT(= FALSE);$/;"	v
xim_destroy_cb	vim/vim/src/mbyte.c	/^static void xim_destroy_cb(XIM im, XPointer client_data, XPointer call_data);$/;"	p	file:	signature:(XIM im, XPointer client_data, XPointer call_data)
xim_destroy_cb	vim/vim/src/mbyte.c	/^xim_destroy_cb($/;"	f	file:	signature:( XIM im UNUSED, XPointer client_data UNUSED, XPointer call_data UNUSED)
xim_expected_char	vim/vim/src/mbyte.c	/^static int xim_expected_char = NUL;$/;"	v	file:
xim_fg_color	vim/vim/src/globals.h	/^EXTERN guicolor_T	xim_fg_color INIT(= INVALCOLOR);$/;"	v
xim_get_status_area_height	vim/vim/src/mbyte.c	/^xim_get_status_area_height(void)$/;"	f	signature:(void)
xim_has_focus	vim/vim/src/mbyte.c	/^static int	xim_has_focus = FALSE;	\/* XIM is really being used for Vim *\/$/;"	v	file:
xim_has_preediting	vim/vim/src/mbyte.c	/^static int xim_has_preediting INIT(= FALSE);  \/* IM current status *\/$/;"	v	file:
xim_ignored_char	vim/vim/src/mbyte.c	/^static int xim_ignored_char = FALSE;$/;"	v	file:
xim_init	vim/vim/src/mbyte.c	/^xim_init(void)$/;"	f	signature:(void)
xim_instantiate_cb	vim/vim/src/mbyte.c	/^xim_instantiate_cb($/;"	f	file:	signature:( Display *display, XPointer client_data UNUSED, XPointer call_data UNUSED)
xim_is_active	vim/vim/src/mbyte.c	/^static int	xim_is_active = FALSE;  \/* XIM should be active in the current$/;"	v	file:
xim_log	vim/vim/src/mbyte.c	/^xim_log(char *s, ...)$/;"	f	file:	signature:(char *s, ...)
xim_queue_key_press_event	vim/vim/src/mbyte.c	/^xim_queue_key_press_event(GdkEventKey *event, int down)$/;"	f	signature:(GdkEventKey *event, int down)
xim_real_init	vim/vim/src/mbyte.c	/^static int xim_real_init(Window x11_window, Display *x11_display);$/;"	p	file:	signature:(Window x11_window, Display *x11_display)
xim_real_init	vim/vim/src/mbyte.c	/^xim_real_init(Window x11_window, Display *x11_display)$/;"	f	file:	signature:(Window x11_window, Display *x11_display)
xim_reset	vim/vim/src/mbyte.c	/^xim_reset(void)$/;"	f	signature:(void)
xim_set_focus	vim/vim/src/mbyte.c	/^xim_set_focus(int focus)$/;"	f	signature:(int focus)
xim_set_preedit	vim/vim/src/mbyte.c	/^xim_set_preedit(void)$/;"	f	signature:(void)
xim_set_status_area	vim/vim/src/mbyte.c	/^xim_set_status_area(void)$/;"	f	signature:(void)
xmArrowButtonWidgetClass	vim/vim/src/gui_gtk_vms.h	677;"	d
xmCascadeButtonClassRec	vim/vim/src/gui_gtk_vms.h	678;"	d
xmCascadeButtonGadgetClass	vim/vim/src/gui_gtk_vms.h	679;"	d
xmCascadeButtonWidgetClass	vim/vim/src/gui_gtk_vms.h	680;"	d
xmDialogShellWidgetClass	vim/vim/src/gui_gtk_vms.h	681;"	d
xmDrawingAreaWidgetClass	vim/vim/src/gui_gtk_vms.h	682;"	d
xmDrawnButtonWidgetClass	vim/vim/src/gui_gtk_vms.h	683;"	d
xmEnhancedButtonClassRec	vim/vim/src/gui_xmebw.c	/^XmEnhancedButtonClassRec xmEnhancedButtonClassRec =$/;"	v
xmEnhancedButtonPrimClassExtRec	vim/vim/src/gui_xmebw.c	/^XmPrimitiveClassExtRec xmEnhancedButtonPrimClassExtRec =$/;"	v
xmEnhancedButtonWidgetClass	vim/vim/src/gui_xmebw.c	/^WidgetClass xmEnhancedButtonWidgetClass =$/;"	v
xmFileSelectionBoxWidgetClass	vim/vim/src/gui_gtk_vms.h	684;"	d
xmFormWidgetClass	vim/vim/src/gui_gtk_vms.h	685;"	d
xmFrameWidgetClass	vim/vim/src/gui_gtk_vms.h	686;"	d
xmGadgetClass	vim/vim/src/gui_gtk_vms.h	687;"	d
xmLabelGadgetClass	vim/vim/src/gui_gtk_vms.h	688;"	d
xmLabelWidgetClass	vim/vim/src/gui_gtk_vms.h	689;"	d
xmListWidgetClass	vim/vim/src/gui_gtk_vms.h	690;"	d
xmMainWindowWidgetClass	vim/vim/src/gui_gtk_vms.h	691;"	d
xmManagerClassRec	vim/vim/src/gui_gtk_vms.h	692;"	d
xmManagerWidgetClass	vim/vim/src/gui_gtk_vms.h	693;"	d
xmMenuShellWidgetClass	vim/vim/src/gui_gtk_vms.h	694;"	d
xmMessageBoxWidgetClass	vim/vim/src/gui_gtk_vms.h	695;"	d
xmPrimitiveClassRec	vim/vim/src/gui_gtk_vms.h	696;"	d
xmPrimitiveWidgetClass	vim/vim/src/gui_gtk_vms.h	697;"	d
xmPushButtonClassRec	vim/vim/src/gui_gtk_vms.h	698;"	d
xmPushButtonGadgetClass	vim/vim/src/gui_gtk_vms.h	699;"	d
xmPushButtonWidgetClass	vim/vim/src/gui_gtk_vms.h	700;"	d
xmRowColumnWidgetClass	vim/vim/src/gui_gtk_vms.h	701;"	d
xmSashWidgetClass	vim/vim/src/gui_gtk_vms.h	702;"	d
xmScrollBarWidgetClass	vim/vim/src/gui_gtk_vms.h	703;"	d
xmScrolledWindowClassRec	vim/vim/src/gui_gtk_vms.h	704;"	d
xmScrolledWindowWidgetClass	vim/vim/src/gui_gtk_vms.h	705;"	d
xmSeparatorGadgetClass	vim/vim/src/gui_gtk_vms.h	706;"	d
xmSeparatorWidgetClass	vim/vim/src/gui_gtk_vms.h	707;"	d
xmTextFieldWidgetClass	vim/vim/src/gui_gtk_vms.h	708;"	d
xmTextWidgetClass	vim/vim/src/gui_gtk_vms.h	709;"	d
xmToggleButtonGadgetClass	vim/vim/src/gui_gtk_vms.h	710;"	d
xmToggleButtonWidgetClass	vim/vim/src/gui_gtk_vms.h	711;"	d
xopen_message	vim/vim/src/os_unix.c	/^xopen_message(long elapsed_msec)$/;"	f	file:	signature:(long elapsed_msec)
xp_arg	vim/vim/src/ex_getln.c	/^    char_u	*xp_arg;	\/* user-defined expansion arg *\/$/;"	m	struct:cmdline_info	file:	access:public
xp_arg	vim/vim/src/structs.h	/^    char_u	*xp_arg;		\/* completion function *\/$/;"	m	struct:expand	access:public
xp_backslash	vim/vim/src/structs.h	/^    int		xp_backslash;		\/* one of the XP_BS_ values *\/$/;"	m	struct:expand	access:public
xp_col	vim/vim/src/structs.h	/^    int		xp_col;			\/* cursor position in line *\/$/;"	m	struct:expand	access:public
xp_context	vim/vim/src/ex_getln.c	/^    int		xp_context;	\/* type of expansion *\/$/;"	m	struct:cmdline_info	file:	access:public
xp_context	vim/vim/src/structs.h	/^    int		xp_context;		\/* type of expansion *\/$/;"	m	struct:expand	access:public
xp_files	vim/vim/src/structs.h	/^    char_u	**xp_files;		\/* list of files *\/$/;"	m	struct:expand	access:public
xp_line	vim/vim/src/structs.h	/^    char_u	*xp_line;		\/* text being completed *\/$/;"	m	struct:expand	access:public
xp_numfiles	vim/vim/src/structs.h	/^    int		xp_numfiles;		\/* number of files found by$/;"	m	struct:expand	access:public
xp_pattern	vim/vim/src/structs.h	/^    char_u	*xp_pattern;		\/* start of item to expand *\/$/;"	m	struct:expand	access:public
xp_pattern_len	vim/vim/src/structs.h	/^    int		xp_pattern_len;		\/* bytes in xp_pattern before cursor *\/$/;"	m	struct:expand	access:public
xp_scriptID	vim/vim/src/structs.h	/^    int		xp_scriptID;		\/* SID for completion function *\/$/;"	m	struct:expand	access:public
xp_shell	vim/vim/src/structs.h	/^    int		xp_shell;		\/* TRUE for a shell command, more$/;"	m	struct:expand	access:public
xpc	vim/vim/src/ex_getln.c	/^    expand_T	*xpc;		\/* struct being used for expansion, xp_pattern$/;"	m	struct:cmdline_info	file:	access:public
xpm	vim/vim/src/structs.h	/^    char	**xpm;		    \/* pixmap data *\/$/;"	m	struct:VimMenu	access:public
xpm_fname	vim/vim/src/structs.h	/^    char	*xpm_fname;	    \/* file with pixmap data *\/$/;"	m	struct:VimMenu	access:public
xsmp	vim/vim/src/os_unix.c	/^static xsmp_config_T xsmp;$/;"	v	file:
xsmp_close	vim/vim/src/os_unix.c	/^xsmp_close(void)$/;"	f	signature:(void)
xsmp_config_T	vim/vim/src/os_unix.c	/^} xsmp_config_T;$/;"	t	typeref:struct:__anon74	file:
xsmp_die	vim/vim/src/os_unix.c	/^static void xsmp_die(SmcConn smc_conn, SmPointer client_data);$/;"	p	file:	signature:(SmcConn smc_conn, SmPointer client_data)
xsmp_die	vim/vim/src/os_unix.c	/^xsmp_die(SmcConn smc_conn UNUSED, SmPointer client_data UNUSED)$/;"	f	file:	signature:(SmcConn smc_conn UNUSED, SmPointer client_data UNUSED)
xsmp_handle_interaction	vim/vim/src/os_unix.c	/^static void xsmp_handle_interaction(SmcConn smc_conn, SmPointer client_data);$/;"	p	file:	signature:(SmcConn smc_conn, SmPointer client_data)
xsmp_handle_interaction	vim/vim/src/os_unix.c	/^xsmp_handle_interaction(SmcConn smc_conn, SmPointer client_data UNUSED)$/;"	f	file:	signature:(SmcConn smc_conn, SmPointer client_data UNUSED)
xsmp_handle_requests	vim/vim/src/os_unix.c	/^xsmp_handle_requests(void)$/;"	f	signature:(void)
xsmp_handle_save_yourself	vim/vim/src/os_unix.c	/^static void xsmp_handle_save_yourself(SmcConn smc_conn, SmPointer client_data, int save_type, Bool shutdown, int interact_style, Bool fast);$/;"	p	file:	signature:(SmcConn smc_conn, SmPointer client_data, int save_type, Bool shutdown, int interact_style, Bool fast)
xsmp_handle_save_yourself	vim/vim/src/os_unix.c	/^xsmp_handle_save_yourself($/;"	f	file:	signature:( SmcConn smc_conn, SmPointer client_data UNUSED, int save_type UNUSED, Bool shutdown, int interact_style UNUSED, Bool fast UNUSED)
xsmp_ice_connection	vim/vim/src/os_unix.c	/^static void xsmp_ice_connection(IceConn iceConn, IcePointer clientData, Bool opening, IcePointer *watchData);$/;"	p	file:	signature:(IceConn iceConn, IcePointer clientData, Bool opening, IcePointer *watchData)
xsmp_ice_connection	vim/vim/src/os_unix.c	/^xsmp_ice_connection($/;"	f	file:	signature:( IceConn iceConn, IcePointer clientData UNUSED, Bool opening, IcePointer *watchData UNUSED)
xsmp_icefd	vim/vim/src/globals.h	/^EXTERN int xsmp_icefd INIT(= -1);   \/* The actual connection *\/$/;"	v
xsmp_init	vim/vim/src/os_unix.c	/^xsmp_init(void)$/;"	f	signature:(void)
xsmp_save_complete	vim/vim/src/os_unix.c	/^static void xsmp_save_complete(SmcConn smc_conn, SmPointer client_data);$/;"	p	file:	signature:(SmcConn smc_conn, SmPointer client_data)
xsmp_save_complete	vim/vim/src/os_unix.c	/^xsmp_save_complete($/;"	f	file:	signature:( SmcConn smc_conn UNUSED, SmPointer client_data UNUSED)
xsmp_shutdown_cancelled	vim/vim/src/os_unix.c	/^static void xsmp_shutdown_cancelled(SmcConn smc_conn, SmPointer	client_data);$/;"	p	file:	signature:(SmcConn smc_conn, SmPointer client_data)
xsmp_shutdown_cancelled	vim/vim/src/os_unix.c	/^xsmp_shutdown_cancelled($/;"	f	file:	signature:( SmcConn smc_conn, SmPointer client_data UNUSED)
xt_index_in	vim/vim/src/term.c	/^static int xt_index_in = 0;$/;"	v	file:
xt_index_out	vim/vim/src/term.c	/^static int xt_index_out = 0;$/;"	v	file:
xterm_Shell	vim/vim/src/os_unix.c	/^static Widget	xterm_Shell = (Widget)0;$/;"	v	file:
xterm_button	vim/vim/src/os_unix.c	/^static int	xterm_button;$/;"	v	file:
xterm_display	vim/vim/src/globals.h	/^EXTERN char	*xterm_display INIT(= NULL);	\/* xterm display name; points$/;"	v
xterm_dpy	vim/vim/src/globals.h	/^EXTERN Display	*xterm_dpy INIT(= NULL);	\/* xterm display pointer *\/$/;"	v
xterm_dpy_was_reset	vim/vim/src/os_unix.c	/^static int xterm_dpy_was_reset = FALSE;$/;"	v	file:
xterm_trace	vim/vim/src/os_unix.c	/^static int	xterm_trace = -1;	\/* default: disabled *\/$/;"	v	file:
xterm_update	vim/vim/src/os_unix.c	/^static void xterm_update(void);$/;"	p	file:	signature:(void)
xterm_update	vim/vim/src/os_unix.c	/^xterm_update(void)$/;"	f	file:	signature:(void)
xxdline	vim/vim/src/xxd/xxd.c	/^static void xxdline __P((FILE *, char *, int));$/;"	p	file:	signature:(FILE *, char *, int)
xxdline	vim/vim/src/xxd/xxd.c	/^xxdline(FILE *fp, char *l, int nz)$/;"	f	file:	signature:(FILE *fp, char *l, int nz)
xy2win	vim/vim/src/gui.c	/^static win_T *xy2win(int x, int y);$/;"	p	file:	signature:(int x, int y)
xy2win	vim/vim/src/gui.c	/^xy2win(int x UNUSED, int y UNUSED)$/;"	f	file:	signature:(int x UNUSED, int y UNUSED)
y	vim/vim/src/gui_beval.h	/^    int			y;$/;"	m	struct:BalloonEvalStruct	access:public
y	vim/vim/src/gui_gtk_f.c	/^    gint y;		\/* relative subwidget y position *\/$/;"	m	struct:_GtkFormChild	file:	access:public
y	vim/vim/src/os_vms.c	/^	}	y;$/;"	m	union:__anon23::__anon24	typeref:struct:__anon23::__anon24::__anon25	file:	access:public
y_acute	vim/vim/src/regexp_nfa.c	809;"	d	file:
y_append	vim/vim/src/ops.c	/^static int		y_append;	    \/* TRUE when appending *\/$/;"	v	file:
y_array	vim/vim/src/ops.c	/^    char_u	**y_array;	\/* pointer to array of line pointers *\/$/;"	m	struct:__anon79	file:	access:public
y_current	vim/vim/src/ops.c	/^static yankreg_T	*y_current;	    \/* ptr to current yankreg *\/$/;"	v	file:
y_diaeresis	vim/vim/src/regexp_nfa.c	810;"	d	file:
y_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int y_hotspot;		\/* Returns the y hotspot's$/;"	m	struct:__anon93	access:public
y_hotspot	vim/vim/src/xpm/include/xpm.h	/^    unsigned int y_hotspot;	\/* Returns the y hotspot's coordinate *\/$/;"	m	struct:__anon92	access:public
y_previous	vim/vim/src/ops.c	/^static yankreg_T	*y_previous = NULL; \/* ptr to last written yankreg *\/$/;"	v	file:
y_read_regs	vim/vim/src/ops.c	/^static yankreg_T *y_read_regs = NULL;$/;"	v	file:
y_regs	vim/vim/src/ops.c	/^static yankreg_T	y_regs[NUM_REGISTERS];$/;"	v	file:
y_size	vim/vim/src/ops.c	/^    linenr_T	y_size;		\/* number of lines in y_array *\/$/;"	m	struct:__anon79	file:	access:public
y_time_set	vim/vim/src/ops.c	/^    time_t	y_time_set;$/;"	m	struct:__anon79	file:	access:public
y_type	vim/vim/src/ops.c	/^    char_u	y_type;		\/* MLINE, MCHAR or MBLOCK *\/$/;"	m	struct:__anon79	file:	access:public
y_width	vim/vim/src/ops.c	/^    colnr_T	y_width;	\/* only set if y_type == MBLOCK *\/$/;"	m	struct:__anon79	file:	access:public
yank_copy_line	vim/vim/src/ops.c	/^static int	yank_copy_line(struct block_def *bd, long y_idx);$/;"	p	file:	signature:(struct block_def *bd, long y_idx)
yank_copy_line	vim/vim/src/ops.c	/^yank_copy_line(struct block_def *bd, long y_idx)$/;"	f	file:	signature:(struct block_def *bd, long y_idx)
yank_cut_buffer0	vim/vim/src/ui.c	/^yank_cut_buffer0(Display *dpy, VimClipboard *cbd)$/;"	f	signature:(Display *dpy, VimClipboard *cbd)
yank_register_mline	vim/vim/src/ops.c	/^yank_register_mline(int regname)$/;"	f	signature:(int regname)
yankreg_T	vim/vim/src/ops.c	/^} yankreg_T;$/;"	t	typeref:struct:__anon79	file:
zip_state_T	vim/vim/src/crypt_zip.c	/^} zip_state_T;$/;"	t	typeref:struct:__anon154	file:
znak	vim/vim/runtime/tutor/tutor.cs	/^  2. Pro nahrazení znaku pod kurzorem, napi¹  r  a potom znak, kterým$/;"	p
znamená	vim/vim/runtime/tutor/tutor.cs	/^     To znamená, ¾e je potøeba si pøíkazy vyzkou¹et pro jejich správné$/;"	p
zábavné	vim/vim/runtime/tutor/tutor.cs	/^      2)  Bláto je zábavné,$/;"	p
~AdjustedGlyphRun	vim/vim/src/gui_dwrite.cpp	/^    ~AdjustedGlyphRun(void)$/;"	f	class:AdjustedGlyphRun	access:public	signature:(void)
~CCommands	vim/vim/src/VisVim/Commands.cpp	/^CCommands::~CCommands()$/;"	f	class:CCommands	signature:()
~COleAutomationControl	vim/vim/src/VisVim/OleAut.cpp	/^COleAutomationControl::~COleAutomationControl ()$/;"	f	class:COleAutomationControl	signature:()
~CShellExt	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExt::~CShellExt()$/;"	f	class:CShellExt	signature:()
~CShellExtClassFactory	vim/vim/src/GvimExt/gvimext.cpp	/^CShellExtClassFactory::~CShellExtClassFactory()$/;"	f	class:CShellExtClassFactory	signature:()
~CVim	vim/vim/src/if_ole.cpp	/^    virtual ~CVim();$/;"	p	class:FINAL	file:	access:public	signature:()
~CVim	vim/vim/src/if_ole.cpp	/^CVim::~CVim()$/;"	f	class:CVim	signature:()
~CVimCF	vim/vim/src/if_ole.cpp	/^    virtual ~CVimCF() {};$/;"	f	class:FINAL	access:public	signature:()
~DWriteContext	vim/vim/src/gui_dwrite.cpp	/^    virtual ~DWriteContext();$/;"	p	struct:DWriteContext	file:	access:public	signature:()
~DWriteContext	vim/vim/src/gui_dwrite.cpp	/^DWriteContext::~DWriteContext()$/;"	f	class:DWriteContext	signature:()
~GdiTextRenderer	vim/vim/src/gui_dwrite.cpp	/^    virtual ~GdiTextRenderer()$/;"	f	class:FINAL	access:public	signature:()
