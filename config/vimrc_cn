""""""""""""""""""""""""""""""""""""""""vim项目管理的基本界面配置
"下面这段配置是关于vimrc的快速配置,
"在今后使用vim日子里,你会频繁地更改你的vimrc,
"所以我们需要设置一些快捷方式使我们能够快速访问vimrc
"set mapleader
"当mapleader未设置或为空时就使用缺省的"\"作为mapleader
"let  mapleader = “,”  默认是"\"作为mapleader
let mapleader = ","
let g:mapleader = ","
"fast reloading of the .vimrc
"vim中使用"\ss"来执行这个映射的vim命令
map <silent> <leader>ss :source ~/.vimrc<cr>
"fast editing of .vimrc
"vim中使用"\ee"来执行这个映射的vim命令
map <silent> <leader>ee :e ~/.vimrc<cr>
"when .vimrc is edited, reload it.
"每次写入.vimrc后，都会执行这个自动命令,source一次~/.vimrc文件
autocmd! bufwritepost .vimrc source ~/.vimrc



"另外，在编辑vimrc文件时，我更喜欢新开一个标签页来编辑，而不是在当前窗口中。
"因此，我定义了SwitchToBuf()函数，它在所有标签页的窗口中查找指定的文件名，如果找到这样一个窗口，就跳到此窗口中；
"否则，它新建一个标签页来打开vimrc文件。(注：标签页(tab)功能只有在vim
"7.0版本以上才支持。)：
"
"Platform
function! MySys()
  if has("win32")
    return "windows"
  else
    return "linux"
  endif
endfunction

function! SwitchToBuf(filename)
    "let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
    "find in current tab
    let bufwinnr = bufwinnr(a:filename)
    if bufwinnr != -1
        exec bufwinnr . "wincmd w"
        return
    else
        "Find in each tab
        tabfirst
        let tab = 1
        while tab <= tabpagenr("$")
            let bufwinnr = bufwinnr(a:filename)
            if bufwinnr != -1
                exec "normal " . tab . "gt"
                exec bufwinnr . "wincmd w"
                return
            endif
            tabnext
            let tab = tab + 1
        endwhile
        "Not exist, new tab
        exec "tabnew " . a:filename
    endif
endfunction



"Fast edit vimrc
if MySys() == 'linux'
    "Fast reloading of .vimrc
    map <silent> <leader>ss :source ~/.vimrc<cr>
    "Fast editing of .vimrc
    map <silent> <leader>ee :call SwitchToBuf("~/.vimrc")<cr>
    "When .vimrc is edited, reload it
    autocmd! bufwritepost .vimrc source ~/.vimrc
elseif MySys() == 'windows'
    "Set helplang
    set helplang=cn
    "Fast reloading of the _vimrc
    map <silent> <leader>ss :source ~/_vimrc<cr>
    "Fast editing of _vimrc
    map <silent> <leader>ee :call SwitchToBuf("~/_vimrc")<cr>
    "When _vimrc is edited, reload it
    autocmd! bufwritepost _vimrc source ~/_vimrc
endif
"For windows version
if MySys() == 'windows'
    source $VIMRUNTIME/mswin.vim
    behave mswin
endif 



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"打开vim基本开关
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set history=700
syntax enable		"语法高亮使能
syntax on		"语法高亮开启
set nocp		"关闭vi兼容模式
" Enable filetype plugins
filetype plugin on 	"允许文件类型检测
filetype plugin indent on 	"允许文件类型检测
filetype indent on
set completeopt=longest,menu	"去掉预览窗口显示
" Set to auto read when a file is changed from the outside
set autoread
" Ignore compiled files
set wildignore=*.o,*~,*.pyc
"Always show current position
set ruler
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases 
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch
" For regular expressions turn magic on
set magic



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vim基本界面配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number		"显示行号
"set nonumber		"关闭行号显示
"set nohlsearch 	"关闭关键字高亮
colorscheme evening	"设置颜色主题(此处为夜间模式)
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8
" Use Unix as the standard file type
set ffs=unix,dos,mac


" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile
" Use spaces instead of tabs
set expandtab
" Be smart when using tabs ;)
set smarttab
" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>
" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
"set viminfo^=%

" Format the status line
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ [POS:%l/%L,%c]
set laststatus=2
set ruler



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"lookupfile plugin configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:LookupFile_TagExpr = '"./filenametags"'
"let g:LookupFile_TagExpr = string('./filenametags')
""""let g:myLookupFileTagExpr = './filenanmetags'
""""let g:LookupFile_TagExpr = 'g:myLookupFileTagExpr'
"let g:LookupFile_MinPatLength = 2               "最少输入2个字符才开始查找
let g:LookupFile_MinPatLength = 1               "最少输入1个字符才开始查找
let g:LookupFile_PreserveLastPattern = 0        "不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1     "保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1          "回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles = 0              "不允许创建不存在的文件
let g:LookupFile_RecentFileListSize = 30
""""" Don't display binary files
let g:LookupFile_FileFilter = '\.class$\|\.o$\|\.obj$\|\.exe$\|\.jar$\|\.zip$\|\.war$\|\.ear$'
"""""映射LookupFile为,lt,键入"\lt",就在tag文件中查找指定文件明
""""nmap <silent> <leader>lt :LUTags<cr>
"""""映射LUBufs为,lb,当键入"\lb"时,就在打开的buf中查找指定buffer
""""nmap <silent> <leader>lb :LUBufs<cr>
"""""映射LUWalk为,lw,键入"\lw",就在指定目录结构中查找
""""nmap <silent> <leader>lw :LUWalk<cr>





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"lookup file with ignore case
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! LookupFile_IgnoreCaseFunc(pattern)
    let _tags = &tags
    try
        let &tags = eval(g:LookupFile_TagExpr)
        let newpattern = '\c' . a:pattern
        let tags = taglist(newpattern)
    catch
        echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
        return ""
    finally
        let &tags = _tags
    endtry

    "show the matches for what is typed so far.
    let files = map(tags, 'v:val["filename"]')
    return files
endfunction
let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"下面是winmanager, taglist, minibuffer的窗口集成的基本配置
let winManagerWindowLayout = 'FileExplorer|TagList'
let Tlist_Auto_Highlight_Tag = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Show_Menu = 1
let Tlist_Show_One_File = 1
let g:bufExplorerMaxHeight=30
let g:miniBufExplorerMoreThanOne=0
map <F12> :WMToggle<CR>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"下面是各种源文件头操作配置
"You can add these lines into your `.vimrc`
"下面是关于文件头添加插件的配置:根据你的实际需要修改
    let g:header_field_author = 'Your Name'
    let g:header_field_author_email = 'your@mail'
    let g:header_field_filename = 1
    let g:header_field_timestamp = 1
    let g:header_field_timestamp_format = '%Y.%m.%d'
    map <F2> :AddGNULicense<CR>
    "map <F2> :AddHeader<CR>
"配置后vim中直接敲命令:AddHeader并回车即可在当前文件首部添加文件头
"或者进入vim后直接按F4快捷键也能起到相同作用
"此插件会自动根据你源码类型来添加,如下例子：
"Examples
"========
"For example, 
"when you open a file named `start.sh` 
"and press `F4` after above settings, 
"plugin will add these lines at the top of your buffer
"
"    #!/bin/bash
"    # start.sh
"    # Author: Your Name <your@mail>
"    # Date: 13.03.2016
"or for a file named `index.php`
"    <?php
"    /*
"     * index.php
"     * Author: Your Name <your@mail>
"     * Date: 13.03.2016
"     */
map <F3> :set tags+=~/.vim/systags,./tags,./filenametags<cr>
map <F4> :cscope add ./cscope.out ./<cr>

